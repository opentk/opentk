// <auto-generated />
//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2015 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//



namespace OpenToolkit.OpenGL
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    //Attributes are created just so the file will compile, they should not be used anywhere outside of this class and have no actual implementation
    public static partial class GL
    {
        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Operate on the accumulation buffer
        /// </summary>
        /// <param name="op">
        /// Specifies the accumulation buffer operation. Symbolic constants Accum, Load, Add, Mult, and Return are accepted.
        /// </param>
        /// <param name="value">
        /// Specifies a floating-point value used in the accumulation buffer operation. op determines how value is used.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glAccum")]
        public static void Accum(OpenToolkit.OpenGL.AccumOp op, Single value) => instance.Accum(op, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Set the active program object for a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the program pipeline object to set the active program object for.
        /// </param>
        /// <param name="program">
        /// Specifies the program object to set as the active program pipeline object pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glActiveShaderProgram")]
        [CLSCompliant(false)]
        public static void ActiveShaderProgram(Int32 pipeline, Int32 program) => instance.ActiveShaderProgram(pipeline, program);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Set the active program object for a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the program pipeline object to set the active program object for.
        /// </param>
        /// <param name="program">
        /// Specifies the program object to set as the active program pipeline object pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glActiveShaderProgram")]
        [CLSCompliant(false)]
        public static void ActiveShaderProgram(UInt32 pipeline, UInt32 program) => instance.ActiveShaderProgram(pipeline, program);

        /// <summary>[requires: v1.3]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 80. texture must be one of Texturei, where i ranges from zero to the value of MaxCombinedTextureImageUnits minus one. The initial value is Texture0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glActiveTexture")]
        public static void ActiveTexture(OpenToolkit.OpenGL.TextureUnit texture) => instance.ActiveTexture(texture);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the alpha test function
        /// </summary>
        /// <param name="func">
        /// Specifies the alpha comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range [0,1], where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glAlphaFunc")]
        public static void AlphaFunc(OpenToolkit.OpenGL.AlphaFunction func, Single @ref) => instance.AlphaFunc(func, @ref);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Determine if textures are loaded in texture memory
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be queried.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array containing the names of the textures to be queried.
        /// </param>
        /// <param name="residences">[length: n]
        /// Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        [CLSCompliant(false)]
        public static bool AreTexturesResident(Int32 n, [CountAttribute(Parameter = "n")] Int32[] textures, [OutAttribute, CountAttribute(Parameter = "n")] bool[] residences) => instance.AreTexturesResident(n, textures, residences);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Determine if textures are loaded in texture memory
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be queried.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array containing the names of the textures to be queried.
        /// </param>
        /// <param name="residences">[length: n]
        /// Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        [CLSCompliant(false)]
        public static bool AreTexturesResident(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 textures, [OutAttribute, CountAttribute(Parameter = "n")] out bool residences) => instance.AreTexturesResident(n, ref textures, out residences);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Determine if textures are loaded in texture memory
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be queried.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array containing the names of the textures to be queried.
        /// </param>
        /// <param name="residences">[length: n]
        /// Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        [CLSCompliant(false)]
        public static unsafe bool AreTexturesResident(Int32 n, [CountAttribute(Parameter = "n")] Int32* textures, [OutAttribute, CountAttribute(Parameter = "n")] bool* residences) => instance.AreTexturesResident(n, textures, residences);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Determine if textures are loaded in texture memory
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be queried.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array containing the names of the textures to be queried.
        /// </param>
        /// <param name="residences">[length: n]
        /// Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        [CLSCompliant(false)]
        public static bool AreTexturesResident(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] textures, [OutAttribute, CountAttribute(Parameter = "n")] bool[] residences) => instance.AreTexturesResident(n, textures, residences);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Determine if textures are loaded in texture memory
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be queried.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array containing the names of the textures to be queried.
        /// </param>
        /// <param name="residences">[length: n]
        /// Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        [CLSCompliant(false)]
        public static bool AreTexturesResident(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 textures, [OutAttribute, CountAttribute(Parameter = "n")] out bool residences) => instance.AreTexturesResident(n, ref textures, out residences);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Determine if textures are loaded in texture memory
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be queried.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array containing the names of the textures to be queried.
        /// </param>
        /// <param name="residences">[length: n]
        /// Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        [CLSCompliant(false)]
        public static unsafe bool AreTexturesResident(Int32 n, [CountAttribute(Parameter = "n")] UInt32* textures, [OutAttribute, CountAttribute(Parameter = "n")] bool* residences) => instance.AreTexturesResident(n, textures, residences);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Render a vertex using the specified vertex array element
        /// </summary>
        /// <param name="i">
        /// Specifies an index into the enabled vertex data arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glArrayElement")]
        public static void ArrayElement(Int32 i) => instance.ArrayElement(i);

        /// <summary>[requires: v2.0]
        /// Attaches a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to which a shader object will be attached.
        /// </param>
        /// <param name="shader">
        /// Specifies the shader object that is to be attached.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
        [CLSCompliant(false)]
        public static void AttachShader(Int32 program, Int32 shader) => instance.AttachShader(program, shader);

        /// <summary>[requires: v2.0]
        /// Attaches a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to which a shader object will be attached.
        /// </param>
        /// <param name="shader">
        /// Specifies the shader object that is to be attached.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
        [CLSCompliant(false)]
        public static void AttachShader(UInt32 program, UInt32 shader) => instance.AttachShader(program, shader);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Delimit the vertices of a primitive or a group of like primitives
        /// </summary>
        /// <param name="mode">
        /// Specifies the primitive or primitives that will be created from vertices presented between glBegin and the subsequent glEnd. Ten symbolic constants are accepted: Points, Lines, LineStrip, LineLoop, Triangles, TriangleStrip, TriangleFan, Quads, QuadStrip, and Polygon.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBegin")]
        public static void Begin(OpenToolkit.OpenGL.BeginMode mode) => instance.Begin(mode);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Delimit the vertices of a primitive or a group of like primitives
        /// </summary>
        /// <param name="mode">
        /// Specifies the primitive or primitives that will be created from vertices presented between glBegin and the subsequent glEnd. Ten symbolic constants are accepted: Points, Lines, LineStrip, LineLoop, Triangles, TriangleStrip, TriangleFan, Quads, QuadStrip, and Polygon.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBegin")]
        public static void Begin(OpenToolkit.OpenGL.PrimitiveType mode) => instance.Begin(mode);

        /// <summary>[requires: v3.0]
        /// Start conditional rendering
        /// </summary>
        /// <param name="id">
        /// Specifies the name of an occlusion query object whose results are used to determine if the rendering commands are discarded.
        /// </param>
        /// <param name="mode">
        /// Specifies how glBeginConditionalRender interprets the results of the occlusion query.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
        [CLSCompliant(false)]
        public static void BeginConditionalRender(Int32 id, OpenToolkit.OpenGL.ConditionalRenderType mode) => instance.BeginConditionalRender(id, mode);

        /// <summary>[requires: v3.0]
        /// Start conditional rendering
        /// </summary>
        /// <param name="id">
        /// Specifies the name of an occlusion query object whose results are used to determine if the rendering commands are discarded.
        /// </param>
        /// <param name="mode">
        /// Specifies how glBeginConditionalRender interprets the results of the occlusion query.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
        [CLSCompliant(false)]
        public static void BeginConditionalRender(UInt32 id, OpenToolkit.OpenGL.ConditionalRenderType mode) => instance.BeginConditionalRender(id, mode);

        /// <summary>[requires: v1.5]
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, AnySamplesPassedConservative, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBeginQuery")]
        [CLSCompliant(false)]
        public static void BeginQuery(OpenToolkit.OpenGL.QueryTarget target, Int32 id) => instance.BeginQuery(target, id);

        /// <summary>[requires: v1.5]
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, AnySamplesPassedConservative, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBeginQuery")]
        [CLSCompliant(false)]
        public static void BeginQuery(OpenToolkit.OpenGL.QueryTarget target, UInt32 id) => instance.BeginQuery(target, id);

        /// <summary>[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Delimit the boundaries of a query object on an indexed target
        /// </summary>
        /// <param name="target">
        /// Specifies the target type of query object established between glBeginQueryIndexed and the subsequent glEndQueryIndexed. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query target upon which to begin the query.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glBeginQueryIndexed")]
        [CLSCompliant(false)]
        public static void BeginQueryIndexed(OpenToolkit.OpenGL.QueryTarget target, Int32 index, Int32 id) => instance.BeginQueryIndexed(target, index, id);

        /// <summary>[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Delimit the boundaries of a query object on an indexed target
        /// </summary>
        /// <param name="target">
        /// Specifies the target type of query object established between glBeginQueryIndexed and the subsequent glEndQueryIndexed. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query target upon which to begin the query.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glBeginQueryIndexed")]
        [CLSCompliant(false)]
        public static void BeginQueryIndexed(OpenToolkit.OpenGL.QueryTarget target, UInt32 index, UInt32 id) => instance.BeginQueryIndexed(target, index, id);

        /// <summary>[requires: v3.0]
        /// Start transform feedback operation
        /// </summary>
        /// <param name="primitiveMode">
        /// Specify the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback.
        /// </param>
        [Obsolete("Use TransformFeedbackPrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginTransformFeedback")]
        public static void BeginTransformFeedback(OpenToolkit.OpenGL.BeginFeedbackMode primitiveMode) => instance.BeginTransformFeedback(primitiveMode);

        /// <summary>[requires: v3.0]
        /// Start transform feedback operation
        /// </summary>
        /// <param name="primitiveMode">
        /// Specify the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginTransformFeedback")]
        public static void BeginTransformFeedback(OpenToolkit.OpenGL.TransformFeedbackPrimitiveType primitiveMode) => instance.BeginTransformFeedback(primitiveMode);

        /// <summary>[requires: v2.0]
        /// Associates a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object in which the association is to be made.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </param>
        /// <param name="name">
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        [CLSCompliant(false)]
        public static void BindAttribLocation(Int32 program, Int32 index, String name) => instance.BindAttribLocation(program, index, name);

        /// <summary>[requires: v2.0]
        /// Associates a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object in which the association is to be made.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </param>
        /// <param name="name">
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        [CLSCompliant(false)]
        public static void BindAttribLocation(UInt32 program, UInt32 index, String name) => instance.BindAttribLocation(program, index, name);

        /// <summary>[requires: v1.5]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBindBuffer")]
        [CLSCompliant(false)]
        public static void BindBuffer(OpenToolkit.OpenGL.BufferTarget target, Int32 buffer) => instance.BindBuffer(target, buffer);

        /// <summary>[requires: v1.5]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBindBuffer")]
        [CLSCompliant(false)]
        public static void BindBuffer(OpenToolkit.OpenGL.BufferTarget target, UInt32 buffer) => instance.BindBuffer(target, buffer);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// Bind a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glBindBufferBase")]
        [CLSCompliant(false)]
        public static void BindBufferBase(OpenToolkit.OpenGL.BufferRangeTarget target, Int32 index, Int32 buffer) => instance.BindBufferBase(target, index, buffer);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// Bind a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glBindBufferBase")]
        [CLSCompliant(false)]
        public static void BindBufferBase(OpenToolkit.OpenGL.BufferRangeTarget target, UInt32 index, UInt32 buffer) => instance.BindBufferBase(target, index, buffer);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// Bind a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        [Obsolete("Use BufferRangeTarget overload instead")]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glBindBufferBase")]
        [CLSCompliant(false)]
        public static void BindBufferBase(OpenToolkit.OpenGL.BufferTarget target, Int32 index, Int32 buffer) => instance.BindBufferBase(target, index, buffer);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// Bind a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        [Obsolete("Use BufferRangeTarget overload instead")]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glBindBufferBase")]
        [CLSCompliant(false)]
        public static void BindBufferBase(OpenToolkit.OpenGL.BufferTarget target, UInt32 index, UInt32 buffer) => instance.BindBufferBase(target, index, buffer);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer, or ShaderStorageBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        /// <param name="offset">
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </param>
        /// <param name="size">
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenToolkit.OpenGL.BufferRangeTarget target, Int32 index, Int32 buffer, IntPtr offset, Int32 size) => instance.BindBufferRange(target, index, buffer, offset, size);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer, or ShaderStorageBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        /// <param name="offset">
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </param>
        /// <param name="size">
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenToolkit.OpenGL.BufferRangeTarget target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size) => instance.BindBufferRange(target, index, buffer, offset, size);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer, or ShaderStorageBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        /// <param name="offset">
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </param>
        /// <param name="size">
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenToolkit.OpenGL.BufferRangeTarget target, UInt32 index, UInt32 buffer, IntPtr offset, Int32 size) => instance.BindBufferRange(target, index, buffer, offset, size);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer, or ShaderStorageBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        /// <param name="offset">
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </param>
        /// <param name="size">
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenToolkit.OpenGL.BufferRangeTarget target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size) => instance.BindBufferRange(target, index, buffer, offset, size);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer, or ShaderStorageBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        /// <param name="offset">
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </param>
        /// <param name="size">
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </param>
        [Obsolete("Use BufferRangeTarget overload instead")]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenToolkit.OpenGL.BufferTarget target, Int32 index, Int32 buffer, IntPtr offset, Int32 size) => instance.BindBufferRange(target, index, buffer, offset, size);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer, or ShaderStorageBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        /// <param name="offset">
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </param>
        /// <param name="size">
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </param>
        [Obsolete("Use BufferRangeTarget overload instead")]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenToolkit.OpenGL.BufferTarget target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size) => instance.BindBufferRange(target, index, buffer, offset, size);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer, or ShaderStorageBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        /// <param name="offset">
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </param>
        /// <param name="size">
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </param>
        [Obsolete("Use BufferRangeTarget overload instead")]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenToolkit.OpenGL.BufferTarget target, UInt32 index, UInt32 buffer, IntPtr offset, Int32 size) => instance.BindBufferRange(target, index, buffer, offset, size);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]
        /// Bind a range within a buffer object to an indexed buffer target
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer, or ShaderStorageBuffer.
        /// </param>
        /// <param name="index">
        /// Specify the index of the binding point within the array specified by target.
        /// </param>
        /// <param name="buffer">
        /// The name of a buffer object to bind to the specified binding point.
        /// </param>
        /// <param name="offset">
        /// The starting offset in basic machine units into the buffer object buffer.
        /// </param>
        /// <param name="size">
        /// The amount of data in machine units that can be read from the buffet object while used as an indexed target.
        /// </param>
        [Obsolete("Use BufferRangeTarget overload instead")]
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glBindBufferRange")]
        [CLSCompliant(false)]
        public static void BindBufferRange(OpenToolkit.OpenGL.BufferTarget target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size) => instance.BindBufferRange(target, index, buffer, offset, size);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">[length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        [CLSCompliant(false)]
        public static void BindBuffersBase(OpenToolkit.OpenGL.BufferRangeTarget target, Int32 first, Int32 count, [CountAttribute(Parameter = "count")] Int32[] buffers) => instance.BindBuffersBase(target, first, count, buffers);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">[length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        [CLSCompliant(false)]
        public static void BindBuffersBase(OpenToolkit.OpenGL.BufferRangeTarget target, Int32 first, Int32 count, [CountAttribute(Parameter = "count")] ref Int32 buffers) => instance.BindBuffersBase(target, first, count, ref buffers);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">[length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        [CLSCompliant(false)]
        public static unsafe void BindBuffersBase(OpenToolkit.OpenGL.BufferRangeTarget target, Int32 first, Int32 count, [CountAttribute(Parameter = "count")] Int32* buffers) => instance.BindBuffersBase(target, first, count, buffers);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">[length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        [CLSCompliant(false)]
        public static void BindBuffersBase(OpenToolkit.OpenGL.BufferRangeTarget target, UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32[] buffers) => instance.BindBuffersBase(target, first, count, buffers);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">[length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        [CLSCompliant(false)]
        public static void BindBuffersBase(OpenToolkit.OpenGL.BufferRangeTarget target, UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 buffers) => instance.BindBuffersBase(target, first, count, ref buffers);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">[length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersBase")]
        [CLSCompliant(false)]
        public static unsafe void BindBuffersBase(OpenToolkit.OpenGL.BufferRangeTarget target, UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32* buffers) => instance.BindBuffersBase(target, first, count, buffers);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">[length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        /// <param name="offsets">[length: count]</param>
        /// <param name="sizes">[length: count]</param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        [CLSCompliant(false)]
        public static void BindBuffersRange(OpenToolkit.OpenGL.BufferRangeTarget target, Int32 first, Int32 count, [CountAttribute(Parameter = "count")] Int32[] buffers, [CountAttribute(Parameter = "count")] IntPtr[] offsets, [CountAttribute(Parameter = "count")] IntPtr[] sizes) => instance.BindBuffersRange(target, first, count, buffers, offsets, sizes);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">[length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        /// <param name="offsets">[length: count]</param>
        /// <param name="sizes">[length: count]</param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        [CLSCompliant(false)]
        public static void BindBuffersRange(OpenToolkit.OpenGL.BufferRangeTarget target, Int32 first, Int32 count, [CountAttribute(Parameter = "count")] ref Int32 buffers, [CountAttribute(Parameter = "count")] ref IntPtr offsets, [CountAttribute(Parameter = "count")] ref IntPtr sizes) => instance.BindBuffersRange(target, first, count, ref buffers, ref offsets, ref sizes);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">[length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        /// <param name="offsets">[length: count]</param>
        /// <param name="sizes">[length: count]</param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        [CLSCompliant(false)]
        public static unsafe void BindBuffersRange(OpenToolkit.OpenGL.BufferRangeTarget target, Int32 first, Int32 count, [CountAttribute(Parameter = "count")] Int32* buffers, [CountAttribute(Parameter = "count")] IntPtr* offsets, [CountAttribute(Parameter = "count")] IntPtr* sizes) => instance.BindBuffersRange(target, first, count, buffers, offsets, sizes);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">[length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        /// <param name="offsets">[length: count]</param>
        /// <param name="sizes">[length: count]</param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        [CLSCompliant(false)]
        public static void BindBuffersRange(OpenToolkit.OpenGL.BufferRangeTarget target, UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32[] buffers, [CountAttribute(Parameter = "count")] IntPtr[] offsets, [CountAttribute(Parameter = "count")] IntPtr[] sizes) => instance.BindBuffersRange(target, first, count, buffers, offsets, sizes);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">[length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        /// <param name="offsets">[length: count]</param>
        /// <param name="sizes">[length: count]</param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        [CLSCompliant(false)]
        public static void BindBuffersRange(OpenToolkit.OpenGL.BufferRangeTarget target, UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 buffers, [CountAttribute(Parameter = "count")] ref IntPtr offsets, [CountAttribute(Parameter = "count")] ref IntPtr sizes) => instance.BindBuffersRange(target, first, count, ref buffers, ref offsets, ref sizes);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind ranges of one or more buffer objects to a sequence of indexed buffer targets
        /// </summary>
        /// <param name="target">
        /// Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.
        /// </param>
        /// <param name="first">
        /// Specify the index of the first binding point within the array specified by target.
        /// </param>
        /// <param name="count">
        /// Specify the number of contiguous binding points to which to bind buffers.
        /// </param>
        /// <param name="buffers">[length: count]
        /// A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.
        /// </param>
        /// <param name="offsets">[length: count]</param>
        /// <param name="sizes">[length: count]</param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindBuffersRange")]
        [CLSCompliant(false)]
        public static unsafe void BindBuffersRange(OpenToolkit.OpenGL.BufferRangeTarget target, UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32* buffers, [CountAttribute(Parameter = "count")] IntPtr* offsets, [CountAttribute(Parameter = "count")] IntPtr* sizes) => instance.BindBuffersRange(target, first, count, buffers, offsets, sizes);

        /// <summary>[requires: v3.0]
        /// Bind a user-defined varying out variable to a fragment shader color number
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to modify
        /// </param>
        /// <param name="color">
        /// The color number to bind the user-defined varying out variable to
        /// </param>
        /// <param name="name">[length: COMPSIZE(name)]
        /// The name of the user-defined varying out variable whose binding to modify
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindFragDataLocation")]
        [CLSCompliant(false)]
        public static void BindFragDataLocation(Int32 program, Int32 color, [CountAttribute(Computed = "name")] String name) => instance.BindFragDataLocation(program, color, name);

        /// <summary>[requires: v3.0]
        /// Bind a user-defined varying out variable to a fragment shader color number
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to modify
        /// </param>
        /// <param name="color">
        /// The color number to bind the user-defined varying out variable to
        /// </param>
        /// <param name="name">[length: COMPSIZE(name)]
        /// The name of the user-defined varying out variable whose binding to modify
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindFragDataLocation")]
        [CLSCompliant(false)]
        public static void BindFragDataLocation(UInt32 program, UInt32 color, [CountAttribute(Computed = "name")] String name) => instance.BindFragDataLocation(program, color, name);

        /// <summary>[requires: v3.3 or ARB_blend_func_extended|VERSION_3_3]
        /// Bind a user-defined varying out variable to a fragment shader color number and index
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to modify
        /// </param>
        /// <param name="colorNumber">
        /// The color number to bind the user-defined varying out variable to
        /// </param>
        /// <param name="index">
        /// The index of the color input to bind the user-defined varying out variable to
        /// </param>
        /// <param name="name">
        /// The name of the user-defined varying out variable whose binding to modify
        /// </param>
        [AutoGenerated(Category = "ARB_blend_func_extended|VERSION_3_3", Version = "3.3", EntryPoint = "glBindFragDataLocationIndexed")]
        [CLSCompliant(false)]
        public static void BindFragDataLocationIndexed(Int32 program, Int32 colorNumber, Int32 index, String name) => instance.BindFragDataLocationIndexed(program, colorNumber, index, name);

        /// <summary>[requires: v3.3 or ARB_blend_func_extended|VERSION_3_3]
        /// Bind a user-defined varying out variable to a fragment shader color number and index
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to modify
        /// </param>
        /// <param name="colorNumber">
        /// The color number to bind the user-defined varying out variable to
        /// </param>
        /// <param name="index">
        /// The index of the color input to bind the user-defined varying out variable to
        /// </param>
        /// <param name="name">
        /// The name of the user-defined varying out variable whose binding to modify
        /// </param>
        [AutoGenerated(Category = "ARB_blend_func_extended|VERSION_3_3", Version = "3.3", EntryPoint = "glBindFragDataLocationIndexed")]
        [CLSCompliant(false)]
        public static void BindFragDataLocationIndexed(UInt32 program, UInt32 colorNumber, UInt32 index, String name) => instance.BindFragDataLocationIndexed(program, colorNumber, index, name);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Bind a framebuffer to a framebuffer target
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target of the binding operation.
        /// </param>
        /// <param name="framebuffer">
        /// Specifies the name of the framebuffer object to bind.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBindFramebuffer")]
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenToolkit.OpenGL.FramebufferTarget target, Int32 framebuffer) => instance.BindFramebuffer(target, framebuffer);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Bind a framebuffer to a framebuffer target
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target of the binding operation.
        /// </param>
        /// <param name="framebuffer">
        /// Specifies the name of the framebuffer object to bind.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBindFramebuffer")]
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenToolkit.OpenGL.FramebufferTarget target, UInt32 framebuffer) => instance.BindFramebuffer(target, framebuffer);

        /// <summary>[requires: v4.2 or ARB_shader_image_load_store|VERSION_4_2]
        /// Bind a level of a texture to an image unit
        /// </summary>
        /// <param name="unit">
        /// Specifies the index of the image unit to which to bind the texture
        /// </param>
        /// <param name="texture">
        /// Specifies the name of the texture to bind to the image unit.
        /// </param>
        /// <param name="level">
        /// Specifies the level of the texture that is to be bound.
        /// </param>
        /// <param name="layered">
        /// Specifies whether a layered texture binding is to be established.
        /// </param>
        /// <param name="layer">
        /// If layered is False, specifies the layer of texture to be bound to the image unit. Ignored otherwise.
        /// </param>
        /// <param name="access">
        /// Specifies a token indicating the type of access that will be performed on the image.
        /// </param>
        /// <param name="format">
        /// Specifies the format that the elements of the image will be treated as for the purposes of formatted stores.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_image_load_store|VERSION_4_2", Version = "4.2", EntryPoint = "glBindImageTexture")]
        [CLSCompliant(false)]
        public static void BindImageTexture(Int32 unit, Int32 texture, Int32 level, bool layered, Int32 layer, OpenToolkit.OpenGL.TextureAccess access, OpenToolkit.OpenGL.SizedInternalFormat format) => instance.BindImageTexture(unit, texture, level, layered, layer, access, format);

        /// <summary>[requires: v4.2 or ARB_shader_image_load_store|VERSION_4_2]
        /// Bind a level of a texture to an image unit
        /// </summary>
        /// <param name="unit">
        /// Specifies the index of the image unit to which to bind the texture
        /// </param>
        /// <param name="texture">
        /// Specifies the name of the texture to bind to the image unit.
        /// </param>
        /// <param name="level">
        /// Specifies the level of the texture that is to be bound.
        /// </param>
        /// <param name="layered">
        /// Specifies whether a layered texture binding is to be established.
        /// </param>
        /// <param name="layer">
        /// If layered is False, specifies the layer of texture to be bound to the image unit. Ignored otherwise.
        /// </param>
        /// <param name="access">
        /// Specifies a token indicating the type of access that will be performed on the image.
        /// </param>
        /// <param name="format">
        /// Specifies the format that the elements of the image will be treated as for the purposes of formatted stores.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_image_load_store|VERSION_4_2", Version = "4.2", EntryPoint = "glBindImageTexture")]
        [CLSCompliant(false)]
        public static void BindImageTexture(UInt32 unit, UInt32 texture, Int32 level, bool layered, Int32 layer, OpenToolkit.OpenGL.TextureAccess access, OpenToolkit.OpenGL.SizedInternalFormat format) => instance.BindImageTexture(unit, texture, level, layered, layer, access, format);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// Specifies the first image unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">[length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        [CLSCompliant(false)]
        public static void BindImageTextures(Int32 first, Int32 count, [CountAttribute(Parameter = "count")] Int32[] textures) => instance.BindImageTextures(first, count, textures);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// Specifies the first image unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">[length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        [CLSCompliant(false)]
        public static void BindImageTextures(Int32 first, Int32 count, [CountAttribute(Parameter = "count")] ref Int32 textures) => instance.BindImageTextures(first, count, ref textures);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// Specifies the first image unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">[length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        [CLSCompliant(false)]
        public static unsafe void BindImageTextures(Int32 first, Int32 count, [CountAttribute(Parameter = "count")] Int32* textures) => instance.BindImageTextures(first, count, textures);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// Specifies the first image unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">[length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        [CLSCompliant(false)]
        public static void BindImageTextures(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32[] textures) => instance.BindImageTextures(first, count, textures);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// Specifies the first image unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">[length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        [CLSCompliant(false)]
        public static void BindImageTextures(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 textures) => instance.BindImageTextures(first, count, ref textures);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named texture images to a sequence of consecutive image units
        /// </summary>
        /// <param name="first">
        /// Specifies the first image unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">[length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindImageTextures")]
        [CLSCompliant(false)]
        public static unsafe void BindImageTextures(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32* textures) => instance.BindImageTextures(first, count, textures);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Bind a program pipeline to the current context
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of the pipeline object to bind to the context.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glBindProgramPipeline")]
        [CLSCompliant(false)]
        public static void BindProgramPipeline(Int32 pipeline) => instance.BindProgramPipeline(pipeline);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Bind a program pipeline to the current context
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of the pipeline object to bind to the context.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glBindProgramPipeline")]
        [CLSCompliant(false)]
        public static void BindProgramPipeline(UInt32 pipeline) => instance.BindProgramPipeline(pipeline);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Bind a renderbuffer to a renderbuffer target
        /// </summary>
        /// <param name="target">
        /// Specifies the renderbuffer target of the binding operation. target must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the name of the renderbuffer object to bind.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBindRenderbuffer")]
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenToolkit.OpenGL.RenderbufferTarget target, Int32 renderbuffer) => instance.BindRenderbuffer(target, renderbuffer);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Bind a renderbuffer to a renderbuffer target
        /// </summary>
        /// <param name="target">
        /// Specifies the renderbuffer target of the binding operation. target must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the name of the renderbuffer object to bind.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBindRenderbuffer")]
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenToolkit.OpenGL.RenderbufferTarget target, UInt32 renderbuffer) => instance.BindRenderbuffer(target, renderbuffer);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Bind a named sampler to a texturing target
        /// </summary>
        /// <param name="unit">
        /// Specifies the index of the texture unit to which the sampler is bound.
        /// </param>
        /// <param name="sampler">
        /// Specifies the name of a sampler.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glBindSampler")]
        [CLSCompliant(false)]
        public static void BindSampler(Int32 unit, Int32 sampler) => instance.BindSampler(unit, sampler);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Bind a named sampler to a texturing target
        /// </summary>
        /// <param name="unit">
        /// Specifies the index of the texture unit to which the sampler is bound.
        /// </param>
        /// <param name="sampler">
        /// Specifies the name of a sampler.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glBindSampler")]
        [CLSCompliant(false)]
        public static void BindSampler(UInt32 unit, UInt32 sampler) => instance.BindSampler(unit, sampler);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of samplers to bind.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies the address of an array of names of existing sampler objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        [CLSCompliant(false)]
        public static void BindSamplers(Int32 first, Int32 count, [CountAttribute(Parameter = "count")] Int32[] samplers) => instance.BindSamplers(first, count, samplers);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of samplers to bind.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies the address of an array of names of existing sampler objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        [CLSCompliant(false)]
        public static void BindSamplers(Int32 first, Int32 count, [CountAttribute(Parameter = "count")] ref Int32 samplers) => instance.BindSamplers(first, count, ref samplers);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of samplers to bind.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies the address of an array of names of existing sampler objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        [CLSCompliant(false)]
        public static unsafe void BindSamplers(Int32 first, Int32 count, [CountAttribute(Parameter = "count")] Int32* samplers) => instance.BindSamplers(first, count, samplers);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of samplers to bind.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies the address of an array of names of existing sampler objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        [CLSCompliant(false)]
        public static void BindSamplers(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32[] samplers) => instance.BindSamplers(first, count, samplers);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of samplers to bind.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies the address of an array of names of existing sampler objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        [CLSCompliant(false)]
        public static void BindSamplers(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 samplers) => instance.BindSamplers(first, count, ref samplers);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named sampler objects to a sequence of consecutive sampler units
        /// </summary>
        /// <param name="first">
        /// Specifies the first sampler unit to which a sampler object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of samplers to bind.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies the address of an array of names of existing sampler objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindSamplers")]
        [CLSCompliant(false)]
        public static unsafe void BindSamplers(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32* samplers) => instance.BindSamplers(first, count, samplers);

        /// <summary>[requires: v1.1]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the texture is bound. Must be one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMap, TextureCubeMapArray, TextureBuffer, Texture2DMultisample or Texture2DMultisampleArray.
        /// </param>
        /// <param name="texture">
        /// Specifies the name of a texture.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glBindTexture")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenToolkit.OpenGL.TextureTarget target, Int32 texture) => instance.BindTexture(target, texture);

        /// <summary>[requires: v1.1]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the texture is bound. Must be one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMap, TextureCubeMapArray, TextureBuffer, Texture2DMultisample or Texture2DMultisampleArray.
        /// </param>
        /// <param name="texture">
        /// Specifies the name of a texture.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glBindTexture")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenToolkit.OpenGL.TextureTarget target, UInt32 texture) => instance.BindTexture(target, texture);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">[length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        [CLSCompliant(false)]
        public static void BindTextures(Int32 first, Int32 count, [CountAttribute(Parameter = "count")] Int32[] textures) => instance.BindTextures(first, count, textures);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">[length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        [CLSCompliant(false)]
        public static void BindTextures(Int32 first, Int32 count, [CountAttribute(Parameter = "count")] ref Int32 textures) => instance.BindTextures(first, count, ref textures);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">[length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        [CLSCompliant(false)]
        public static unsafe void BindTextures(Int32 first, Int32 count, [CountAttribute(Parameter = "count")] Int32* textures) => instance.BindTextures(first, count, textures);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">[length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        [CLSCompliant(false)]
        public static void BindTextures(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32[] textures) => instance.BindTextures(first, count, textures);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">[length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        [CLSCompliant(false)]
        public static void BindTextures(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 textures) => instance.BindTextures(first, count, ref textures);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named textures to a sequence of consecutive texture units
        /// </summary>
        /// <param name="first">
        /// Specifies the first texture unit to which a texture is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of textures to bind.
        /// </param>
        /// <param name="textures">[length: count]
        /// Specifies the address of an array of names of existing texture objects.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindTextures")]
        [CLSCompliant(false)]
        public static unsafe void BindTextures(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32* textures) => instance.BindTextures(first, count, textures);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="unit"></param>
        /// <param name="texture"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glBindTextureUnit")]
        [CLSCompliant(false)]
        public static void BindTextureUnit(Int32 unit, Int32 texture) => instance.BindTextureUnit(unit, texture);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="unit"></param>
        /// <param name="texture"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glBindTextureUnit")]
        [CLSCompliant(false)]
        public static void BindTextureUnit(UInt32 unit, UInt32 texture) => instance.BindTextureUnit(unit, texture);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Bind a transform feedback object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which to bind the transform feedback object id. target must be TransformFeedback.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glBindTransformFeedback")]
        [CLSCompliant(false)]
        public static void BindTransformFeedback(OpenToolkit.OpenGL.TransformFeedbackTarget target, Int32 id) => instance.BindTransformFeedback(target, id);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Bind a transform feedback object
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which to bind the transform feedback object id. target must be TransformFeedback.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glBindTransformFeedback")]
        [CLSCompliant(false)]
        public static void BindTransformFeedback(OpenToolkit.OpenGL.TransformFeedbackTarget target, UInt32 id) => instance.BindTransformFeedback(target, id);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Bind a vertex array object
        /// </summary>
        /// <param name="array">
        /// Specifies the name of the vertex array to bind.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBindVertexArray")]
        [CLSCompliant(false)]
        public static void BindVertexArray(Int32 array) => instance.BindVertexArray(array);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Bind a vertex array object
        /// </summary>
        /// <param name="array">
        /// Specifies the name of the vertex array to bind.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBindVertexArray")]
        [CLSCompliant(false)]
        public static void BindVertexArray(UInt32 array) => instance.BindVertexArray(array);

        /// <summary>[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Bind a buffer to a vertex buffer bind point
        /// </summary>
        /// <param name="bindingindex">
        /// The index of the vertex buffer binding point to which to bind the buffer.
        /// </param>
        /// <param name="buffer">
        /// The name of an existing buffer to bind to the vertex buffer binding point.
        /// </param>
        /// <param name="offset">
        /// The offset of the first element of the buffer.
        /// </param>
        /// <param name="stride">
        /// The distance between elements within the buffer.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glBindVertexBuffer")]
        [CLSCompliant(false)]
        public static void BindVertexBuffer(Int32 bindingindex, Int32 buffer, IntPtr offset, Int32 stride) => instance.BindVertexBuffer(bindingindex, buffer, offset, stride);

        /// <summary>[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Bind a buffer to a vertex buffer bind point
        /// </summary>
        /// <param name="bindingindex">
        /// The index of the vertex buffer binding point to which to bind the buffer.
        /// </param>
        /// <param name="buffer">
        /// The name of an existing buffer to bind to the vertex buffer binding point.
        /// </param>
        /// <param name="offset">
        /// The offset of the first element of the buffer.
        /// </param>
        /// <param name="stride">
        /// The distance between elements within the buffer.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glBindVertexBuffer")]
        [CLSCompliant(false)]
        public static void BindVertexBuffer(UInt32 bindingindex, UInt32 buffer, IntPtr offset, Int32 stride) => instance.BindVertexBuffer(bindingindex, buffer, offset, stride);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of buffers to bind.
        /// </param>
        /// <param name="buffers">[length: count]
        /// Specifies the address of an array of names of existing buffer objects.
        /// </param>
        /// <param name="offsets">[length: count]
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </param>
        /// <param name="strides">[length: count]
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        [CLSCompliant(false)]
        public static void BindVertexBuffers(Int32 first, Int32 count, [CountAttribute(Parameter = "count")] Int32[] buffers, [CountAttribute(Parameter = "count")] IntPtr[] offsets, [CountAttribute(Parameter = "count")] Int32[] strides) => instance.BindVertexBuffers(first, count, buffers, offsets, strides);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of buffers to bind.
        /// </param>
        /// <param name="buffers">[length: count]
        /// Specifies the address of an array of names of existing buffer objects.
        /// </param>
        /// <param name="offsets">[length: count]
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </param>
        /// <param name="strides">[length: count]
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        [CLSCompliant(false)]
        public static void BindVertexBuffers(Int32 first, Int32 count, [CountAttribute(Parameter = "count")] ref Int32 buffers, [CountAttribute(Parameter = "count")] ref IntPtr offsets, [CountAttribute(Parameter = "count")] ref Int32 strides) => instance.BindVertexBuffers(first, count, ref buffers, ref offsets, ref strides);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of buffers to bind.
        /// </param>
        /// <param name="buffers">[length: count]
        /// Specifies the address of an array of names of existing buffer objects.
        /// </param>
        /// <param name="offsets">[length: count]
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </param>
        /// <param name="strides">[length: count]
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        [CLSCompliant(false)]
        public static unsafe void BindVertexBuffers(Int32 first, Int32 count, [CountAttribute(Parameter = "count")] Int32* buffers, [CountAttribute(Parameter = "count")] IntPtr* offsets, [CountAttribute(Parameter = "count")] Int32* strides) => instance.BindVertexBuffers(first, count, buffers, offsets, strides);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of buffers to bind.
        /// </param>
        /// <param name="buffers">[length: count]
        /// Specifies the address of an array of names of existing buffer objects.
        /// </param>
        /// <param name="offsets">[length: count]
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </param>
        /// <param name="strides">[length: count]
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        [CLSCompliant(false)]
        public static void BindVertexBuffers(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32[] buffers, [CountAttribute(Parameter = "count")] IntPtr[] offsets, [CountAttribute(Parameter = "count")] Int32[] strides) => instance.BindVertexBuffers(first, count, buffers, offsets, strides);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of buffers to bind.
        /// </param>
        /// <param name="buffers">[length: count]
        /// Specifies the address of an array of names of existing buffer objects.
        /// </param>
        /// <param name="offsets">[length: count]
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </param>
        /// <param name="strides">[length: count]
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        [CLSCompliant(false)]
        public static void BindVertexBuffers(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 buffers, [CountAttribute(Parameter = "count")] ref IntPtr offsets, [CountAttribute(Parameter = "count")] ref Int32 strides) => instance.BindVertexBuffers(first, count, ref buffers, ref offsets, ref strides);

        /// <summary>[requires: v4.4 or ARB_multi_bind|VERSION_4_4]
        /// Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
        /// </summary>
        /// <param name="first">
        /// Specifies the first vertex buffer binding point to which a buffer object is to be bound.
        /// </param>
        /// <param name="count">
        /// Specifies the number of buffers to bind.
        /// </param>
        /// <param name="buffers">[length: count]
        /// Specifies the address of an array of names of existing buffer objects.
        /// </param>
        /// <param name="offsets">[length: count]
        /// Specifies the address of an array of offsets to associate with the binding points.
        /// </param>
        /// <param name="strides">[length: count]
        /// Specifies the address of an array of strides to associate with the binding points.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_bind|VERSION_4_4", Version = "4.4", EntryPoint = "glBindVertexBuffers")]
        [CLSCompliant(false)]
        public static unsafe void BindVertexBuffers(UInt32 first, Int32 count, [CountAttribute(Parameter = "count")] UInt32* buffers, [CountAttribute(Parameter = "count")] IntPtr* offsets, [CountAttribute(Parameter = "count")] Int32* strides) => instance.BindVertexBuffers(first, count, buffers, offsets, strides);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a bitmap
        /// </summary>
        /// <param name="width">
        /// Specify the pixel width and height of the bitmap image.
        /// </param>
        /// <param name="height">
        /// Specify the pixel width and height of the bitmap image.
        /// </param>
        /// <param name="xorig">
        /// Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
        /// </param>
        /// <param name="yorig">
        /// Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
        /// </param>
        /// <param name="xmove">
        /// Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
        /// </param>
        /// <param name="ymove">
        /// Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
        /// </param>
        /// <param name="bitmap">[length: COMPSIZE(width,height)]
        /// Specifies the address of the bitmap image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBitmap")]
        [CLSCompliant(false)]
        public static void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, [CountAttribute(Computed = "width,height")] Byte[] bitmap) => instance.Bitmap(width, height, xorig, yorig, xmove, ymove, bitmap);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a bitmap
        /// </summary>
        /// <param name="width">
        /// Specify the pixel width and height of the bitmap image.
        /// </param>
        /// <param name="height">
        /// Specify the pixel width and height of the bitmap image.
        /// </param>
        /// <param name="xorig">
        /// Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
        /// </param>
        /// <param name="yorig">
        /// Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
        /// </param>
        /// <param name="xmove">
        /// Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
        /// </param>
        /// <param name="ymove">
        /// Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
        /// </param>
        /// <param name="bitmap">[length: COMPSIZE(width,height)]
        /// Specifies the address of the bitmap image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBitmap")]
        [CLSCompliant(false)]
        public static void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, [CountAttribute(Computed = "width,height")] ref Byte bitmap) => instance.Bitmap(width, height, xorig, yorig, xmove, ymove, ref bitmap);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a bitmap
        /// </summary>
        /// <param name="width">
        /// Specify the pixel width and height of the bitmap image.
        /// </param>
        /// <param name="height">
        /// Specify the pixel width and height of the bitmap image.
        /// </param>
        /// <param name="xorig">
        /// Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
        /// </param>
        /// <param name="yorig">
        /// Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
        /// </param>
        /// <param name="xmove">
        /// Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
        /// </param>
        /// <param name="ymove">
        /// Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
        /// </param>
        /// <param name="bitmap">[length: COMPSIZE(width,height)]
        /// Specifies the address of the bitmap image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBitmap")]
        [CLSCompliant(false)]
        public static unsafe void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, [CountAttribute(Computed = "width,height")] Byte* bitmap) => instance.Bitmap(width, height, xorig, yorig, xmove, ymove, bitmap);

        /// <summary>[requires: v1.4 or ARB_imaging|VERSION_1_4]
        /// Set the blend color
        /// </summary>
        /// <param name="red">
        /// specify the components of BlendColor
        /// </param>
        /// <param name="green">
        /// specify the components of BlendColor
        /// </param>
        /// <param name="blue">
        /// specify the components of BlendColor
        /// </param>
        /// <param name="alpha">
        /// specify the components of BlendColor
        /// </param>
        [AutoGenerated(Category = "ARB_imaging|VERSION_1_4", Version = "1.4", EntryPoint = "glBlendColor")]
        public static void BlendColor(Single red, Single green, Single blue, Single alpha) => instance.BlendColor(red, green, blue, alpha);

        /// <summary>[requires: v1.4 or ARB_imaging|VERSION_1_4]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="mode">
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [Obsolete("Use BlendEquationMode overload instead")]
        [AutoGenerated(Category = "ARB_imaging|VERSION_1_4", Version = "1.4", EntryPoint = "glBlendEquation")]
        public static void BlendEquation(OpenToolkit.OpenGL.ArbDrawBuffersBlend mode) => instance.BlendEquation(mode);

        /// <summary>[requires: v1.4 or ARB_imaging|VERSION_1_4]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="mode">
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging|VERSION_1_4", Version = "1.4", EntryPoint = "glBlendEquation")]
        public static void BlendEquation(OpenToolkit.OpenGL.BlendEquationMode mode) => instance.BlendEquation(mode);

        /// <summary>[requires: v1.4 or ARB_imaging|VERSION_1_4]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="mode">
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [Obsolete("Use ArbDrawBuffersBlend overload instead")]
        [AutoGenerated(Category = "ARB_imaging|VERSION_1_4", Version = "1.4", EntryPoint = "glBlendEquation")]
        public static void BlendEquation(OpenToolkit.OpenGL.Version40 mode) => instance.BlendEquation(mode);

        /// <summary>[requires: v4.0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="buf">
        /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
        /// </param>
        /// <param name="mode">
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [Obsolete("Use BlendEquationMode overload instead")]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendEquationi")]
        [CLSCompliant(false)]
        public static void BlendEquation(Int32 buf, OpenToolkit.OpenGL.ArbDrawBuffersBlend mode) => instance.BlendEquation(buf, mode);

        /// <summary>[requires: v4.0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="buf">
        /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
        /// </param>
        /// <param name="mode">
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendEquationi")]
        [CLSCompliant(false)]
        public static void BlendEquation(Int32 buf, OpenToolkit.OpenGL.BlendEquationMode mode) => instance.BlendEquation(buf, mode);

        /// <summary>[requires: v4.0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="buf">
        /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
        /// </param>
        /// <param name="mode">
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [Obsolete("Use ArbDrawBuffersBlend overload instead")]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendEquationi")]
        [CLSCompliant(false)]
        public static void BlendEquation(Int32 buf, OpenToolkit.OpenGL.Version40 mode) => instance.BlendEquation(buf, mode);

        /// <summary>[requires: v4.0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="buf">
        /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
        /// </param>
        /// <param name="mode">
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [Obsolete("Use BlendEquationMode overload instead")]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendEquationi")]
        [CLSCompliant(false)]
        public static void BlendEquation(UInt32 buf, OpenToolkit.OpenGL.ArbDrawBuffersBlend mode) => instance.BlendEquation(buf, mode);

        /// <summary>[requires: v4.0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="buf">
        /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
        /// </param>
        /// <param name="mode">
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendEquationi")]
        [CLSCompliant(false)]
        public static void BlendEquation(UInt32 buf, OpenToolkit.OpenGL.BlendEquationMode mode) => instance.BlendEquation(buf, mode);

        /// <summary>[requires: v4.0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="buf">
        /// for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.
        /// </param>
        /// <param name="mode">
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [Obsolete("Use ArbDrawBuffersBlend overload instead")]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendEquationi")]
        [CLSCompliant(false)]
        public static void BlendEquation(UInt32 buf, OpenToolkit.OpenGL.Version40 mode) => instance.BlendEquation(buf, mode);

        /// <summary>[requires: v2.0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="modeRGB">
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        /// <param name="modeAlpha">
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquationSeparate")]
        public static void BlendEquationSeparate(OpenToolkit.OpenGL.BlendEquationMode modeRGB, OpenToolkit.OpenGL.BlendEquationMode modeAlpha) => instance.BlendEquationSeparate(modeRGB, modeAlpha);

        /// <summary>[requires: v4.0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="buf">
        /// for glBlendEquationSeparatei, specifies the index of the draw buffer for which to set the blend equations.
        /// </param>
        /// <param name="modeRGB">
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        /// <param name="modeAlpha">
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendEquationSeparatei")]
        [CLSCompliant(false)]
        public static void BlendEquationSeparate(Int32 buf, OpenToolkit.OpenGL.BlendEquationMode modeRGB, OpenToolkit.OpenGL.BlendEquationMode modeAlpha) => instance.BlendEquationSeparate(buf, modeRGB, modeAlpha);

        /// <summary>[requires: v4.0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="buf">
        /// for glBlendEquationSeparatei, specifies the index of the draw buffer for which to set the blend equations.
        /// </param>
        /// <param name="modeRGB">
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        /// <param name="modeAlpha">
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendEquationSeparatei")]
        [CLSCompliant(false)]
        public static void BlendEquationSeparate(UInt32 buf, OpenToolkit.OpenGL.BlendEquationMode modeRGB, OpenToolkit.OpenGL.BlendEquationMode modeAlpha) => instance.BlendEquationSeparate(buf, modeRGB, modeAlpha);

        /// <summary>[requires: v1.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dfactor">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBlendFunc")]
        public static void BlendFunc(OpenToolkit.OpenGL.BlendingFactor sfactor, OpenToolkit.OpenGL.BlendingFactor dfactor) => instance.BlendFunc(sfactor, dfactor);

        /// <summary>[requires: v1.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dfactor">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [Obsolete("Use ArbDrawBuffersBlend overload instead")]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBlendFunc")]
        public static void BlendFunc(OpenToolkit.OpenGL.BlendingFactor sfactor, OpenToolkit.OpenGL.Version40 dfactor) => instance.BlendFunc(sfactor, dfactor);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="buf">
        /// For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
        /// </param>
        /// <param name="src">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dst">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [Obsolete("Use BlendingFactorSrc overload instead")]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFunci")]
        [CLSCompliant(false)]
        public static void BlendFunc(Int32 buf, OpenToolkit.OpenGL.ArbDrawBuffersBlend src, OpenToolkit.OpenGL.ArbDrawBuffersBlend dst) => instance.BlendFunc(buf, src, dst);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="buf">
        /// For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
        /// </param>
        /// <param name="src">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dst">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFunci")]
        [CLSCompliant(false)]
        public static void BlendFunc(Int32 buf, OpenToolkit.OpenGL.BlendingFactorSrc src, OpenToolkit.OpenGL.BlendingFactorDest dst) => instance.BlendFunc(buf, src, dst);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="buf">
        /// For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
        /// </param>
        /// <param name="src">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dst">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [Obsolete("Use ArbDrawBuffersBlend overload instead")]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFunci")]
        [CLSCompliant(false)]
        public static void BlendFunc(Int32 buf, OpenToolkit.OpenGL.Version40 src, OpenToolkit.OpenGL.Version40 dst) => instance.BlendFunc(buf, src, dst);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="buf">
        /// For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
        /// </param>
        /// <param name="src">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dst">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [Obsolete("Use BlendingFactorSrc overload instead")]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFunci")]
        [CLSCompliant(false)]
        public static void BlendFunc(UInt32 buf, OpenToolkit.OpenGL.ArbDrawBuffersBlend src, OpenToolkit.OpenGL.ArbDrawBuffersBlend dst) => instance.BlendFunc(buf, src, dst);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="buf">
        /// For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
        /// </param>
        /// <param name="src">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dst">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFunci")]
        [CLSCompliant(false)]
        public static void BlendFunc(UInt32 buf, OpenToolkit.OpenGL.BlendingFactorSrc src, OpenToolkit.OpenGL.BlendingFactorDest dst) => instance.BlendFunc(buf, src, dst);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="buf">
        /// For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
        /// </param>
        /// <param name="src">
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dst">
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [Obsolete("Use ArbDrawBuffersBlend overload instead")]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFunci")]
        [CLSCompliant(false)]
        public static void BlendFunc(UInt32 buf, OpenToolkit.OpenGL.Version40 src, OpenToolkit.OpenGL.Version40 dst) => instance.BlendFunc(buf, src, dst);

        /// <summary>[requires: v1.4]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="sfactorRGB">
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </param>
        /// <param name="dfactorRGB">
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="sfactorAlpha">
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
        /// </param>
        /// <param name="dfactorAlpha">
        /// Specified how the alpha source blending factor is computed. The initial value is One.
        /// </param>
        [Obsolete("Use BlendingFactorSrc overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glBlendFuncSeparate")]
        public static void BlendFuncSeparate(OpenToolkit.OpenGL.ArbDrawBuffersBlend sfactorRGB, OpenToolkit.OpenGL.ArbDrawBuffersBlend dfactorRGB, OpenToolkit.OpenGL.ArbDrawBuffersBlend sfactorAlpha, OpenToolkit.OpenGL.ArbDrawBuffersBlend dfactorAlpha) => instance.BlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);

        /// <summary>[requires: v1.4]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="sfactorRGB">
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </param>
        /// <param name="dfactorRGB">
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="sfactorAlpha">
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
        /// </param>
        /// <param name="dfactorAlpha">
        /// Specified how the alpha source blending factor is computed. The initial value is One.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glBlendFuncSeparate")]
        public static void BlendFuncSeparate(OpenToolkit.OpenGL.BlendingFactorSrc sfactorRGB, OpenToolkit.OpenGL.BlendingFactorDest dfactorRGB, OpenToolkit.OpenGL.BlendingFactorSrc sfactorAlpha, OpenToolkit.OpenGL.BlendingFactorDest dfactorAlpha) => instance.BlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="buf">
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </param>
        /// <param name="srcRGB">
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dstRGB">
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
        /// </param>
        /// <param name="srcAlpha">
        /// Specified how the alpha source blending factor is computed. The initial value is One.
        /// </param>
        /// <param name="dstAlpha">
        /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
        /// </param>
        [Obsolete("Use BlendingFactorSrc overload instead")]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFuncSeparatei")]
        [CLSCompliant(false)]
        public static void BlendFuncSeparate(Int32 buf, OpenToolkit.OpenGL.ArbDrawBuffersBlend srcRGB, OpenToolkit.OpenGL.ArbDrawBuffersBlend dstRGB, OpenToolkit.OpenGL.ArbDrawBuffersBlend srcAlpha, OpenToolkit.OpenGL.ArbDrawBuffersBlend dstAlpha) => instance.BlendFuncSeparate(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="buf">
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </param>
        /// <param name="srcRGB">
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dstRGB">
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
        /// </param>
        /// <param name="srcAlpha">
        /// Specified how the alpha source blending factor is computed. The initial value is One.
        /// </param>
        /// <param name="dstAlpha">
        /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFuncSeparatei")]
        [CLSCompliant(false)]
        public static void BlendFuncSeparate(Int32 buf, OpenToolkit.OpenGL.BlendingFactorSrc srcRGB, OpenToolkit.OpenGL.BlendingFactorDest dstRGB, OpenToolkit.OpenGL.BlendingFactorSrc srcAlpha, OpenToolkit.OpenGL.BlendingFactorDest dstAlpha) => instance.BlendFuncSeparate(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="buf">
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </param>
        /// <param name="srcRGB">
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dstRGB">
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
        /// </param>
        /// <param name="srcAlpha">
        /// Specified how the alpha source blending factor is computed. The initial value is One.
        /// </param>
        /// <param name="dstAlpha">
        /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
        /// </param>
        [Obsolete("Use BlendingFactorSrc overload instead")]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFuncSeparatei")]
        [CLSCompliant(false)]
        public static void BlendFuncSeparate(Int32 buf, OpenToolkit.OpenGL.Version40 srcRGB, OpenToolkit.OpenGL.Version40 dstRGB, OpenToolkit.OpenGL.Version40 srcAlpha, OpenToolkit.OpenGL.Version40 dstAlpha) => instance.BlendFuncSeparate(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="buf">
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </param>
        /// <param name="srcRGB">
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dstRGB">
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
        /// </param>
        /// <param name="srcAlpha">
        /// Specified how the alpha source blending factor is computed. The initial value is One.
        /// </param>
        /// <param name="dstAlpha">
        /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
        /// </param>
        [Obsolete("Use BlendingFactorSrc overload instead")]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFuncSeparatei")]
        [CLSCompliant(false)]
        public static void BlendFuncSeparate(UInt32 buf, OpenToolkit.OpenGL.ArbDrawBuffersBlend srcRGB, OpenToolkit.OpenGL.ArbDrawBuffersBlend dstRGB, OpenToolkit.OpenGL.ArbDrawBuffersBlend srcAlpha, OpenToolkit.OpenGL.ArbDrawBuffersBlend dstAlpha) => instance.BlendFuncSeparate(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="buf">
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </param>
        /// <param name="srcRGB">
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dstRGB">
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
        /// </param>
        /// <param name="srcAlpha">
        /// Specified how the alpha source blending factor is computed. The initial value is One.
        /// </param>
        /// <param name="dstAlpha">
        /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFuncSeparatei")]
        [CLSCompliant(false)]
        public static void BlendFuncSeparate(UInt32 buf, OpenToolkit.OpenGL.BlendingFactorSrc srcRGB, OpenToolkit.OpenGL.BlendingFactorDest dstRGB, OpenToolkit.OpenGL.BlendingFactorSrc srcAlpha, OpenToolkit.OpenGL.BlendingFactorDest dstAlpha) => instance.BlendFuncSeparate(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

        /// <summary>[requires: v4.0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="buf">
        /// For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions.
        /// </param>
        /// <param name="srcRGB">
        /// Specifies how the red, green, and blue blending factors are computed. The initial value is One.
        /// </param>
        /// <param name="dstRGB">
        /// Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.
        /// </param>
        /// <param name="srcAlpha">
        /// Specified how the alpha source blending factor is computed. The initial value is One.
        /// </param>
        /// <param name="dstAlpha">
        /// Specified how the alpha destination blending factor is computed. The initial value is Zero.
        /// </param>
        [Obsolete("Use BlendingFactorSrc overload instead")]
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glBlendFuncSeparatei")]
        [CLSCompliant(false)]
        public static void BlendFuncSeparate(UInt32 buf, OpenToolkit.OpenGL.Version40 srcRGB, OpenToolkit.OpenGL.Version40 dstRGB, OpenToolkit.OpenGL.Version40 srcAlpha, OpenToolkit.OpenGL.Version40 dstAlpha) => instance.BlendFuncSeparate(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Copy a block of pixels from the read framebuffer to the draw framebuffer
        /// </summary>
        /// <param name="srcX0">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcY0">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcX1">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="srcY1">
        /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
        /// </param>
        /// <param name="dstX0">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstY0">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstX1">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="dstY1">
        /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
        /// </param>
        /// <param name="mask">
        /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.
        /// </param>
        /// <param name="filter">
        /// Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glBlitFramebuffer")]
        public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenToolkit.OpenGL.ClearBufferMask mask, OpenToolkit.OpenGL.BlitFramebufferFilter filter) => instance.BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="readFramebuffer"></param>
        /// <param name="drawFramebuffer"></param>
        /// <param name="srcX0"></param>
        /// <param name="srcY0"></param>
        /// <param name="srcX1"></param>
        /// <param name="srcY1"></param>
        /// <param name="dstX0"></param>
        /// <param name="dstY0"></param>
        /// <param name="dstX1"></param>
        /// <param name="dstY1"></param>
        /// <param name="mask"></param>
        /// <param name="filter"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glBlitNamedFramebuffer")]
        [CLSCompliant(false)]
        public static void BlitNamedFramebuffer(Int32 readFramebuffer, Int32 drawFramebuffer, Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenToolkit.OpenGL.ClearBufferMask mask, OpenToolkit.OpenGL.BlitFramebufferFilter filter) => instance.BlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="readFramebuffer"></param>
        /// <param name="drawFramebuffer"></param>
        /// <param name="srcX0"></param>
        /// <param name="srcY0"></param>
        /// <param name="srcX1"></param>
        /// <param name="srcY1"></param>
        /// <param name="dstX0"></param>
        /// <param name="dstY0"></param>
        /// <param name="dstX1"></param>
        /// <param name="dstY1"></param>
        /// <param name="mask"></param>
        /// <param name="filter"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glBlitNamedFramebuffer")]
        [CLSCompliant(false)]
        public static void BlitNamedFramebuffer(UInt32 readFramebuffer, UInt32 drawFramebuffer, Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenToolkit.OpenGL.ClearBufferMask mask, OpenToolkit.OpenGL.BlitFramebufferFilter filter) => instance.BlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

        /// <summary>[requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData(OpenToolkit.OpenGL.BufferTarget target, Int32 size, [CountAttribute(Parameter = "size")] IntPtr data, OpenToolkit.OpenGL.BufferUsageHint usage) => instance.BufferData(target, size, data, usage);

        /// <summary>[requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenToolkit.OpenGL.BufferTarget target, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.BufferData<T2>(target, size, data, usage);

        /// <summary>[requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenToolkit.OpenGL.BufferTarget target, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.BufferData<T2>(target, size, data, usage);

        /// <summary>[requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenToolkit.OpenGL.BufferTarget target, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.BufferData<T2>(target, size, data, usage);

        /// <summary>[requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenToolkit.OpenGL.BufferTarget target, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.BufferData<T2>(target, size, ref data, usage);

        /// <summary>[requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData(OpenToolkit.OpenGL.BufferTarget target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenToolkit.OpenGL.BufferUsageHint usage) => instance.BufferData(target, size, data, usage);

        /// <summary>[requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenToolkit.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.BufferData<T2>(target, size, data, usage);

        /// <summary>[requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenToolkit.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.BufferData<T2>(target, size, data, usage);

        /// <summary>[requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenToolkit.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.BufferData<T2>(target, size, data, usage);

        /// <summary>[requires: v1.5]
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage">
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenToolkit.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.BufferData<T2>(target, size, ref data, usage);

        /// <summary>[requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static void BufferStorage(OpenToolkit.OpenGL.BufferTarget target, Int32 size, [CountAttribute(Parameter = "size")] IntPtr data, OpenToolkit.OpenGL.BufferStorageFlags flags) => instance.BufferStorage(target, size, data, flags);

        /// <summary>[requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        [CLSCompliant(false)]
        public static void BufferStorage<T2>(OpenToolkit.OpenGL.BufferTarget target, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.BufferStorage<T2>(target, size, data, flags);

        /// <summary>[requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        [CLSCompliant(false)]
        public static void BufferStorage<T2>(OpenToolkit.OpenGL.BufferTarget target, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.BufferStorage<T2>(target, size, data, flags);

        /// <summary>[requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        [CLSCompliant(false)]
        public static void BufferStorage<T2>(OpenToolkit.OpenGL.BufferTarget target, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.BufferStorage<T2>(target, size, data, flags);

        /// <summary>[requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static void BufferStorage<T2>(OpenToolkit.OpenGL.BufferTarget target, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.BufferStorage<T2>(target, size, ref data, flags);

        /// <summary>[requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static void BufferStorage(OpenToolkit.OpenGL.BufferTarget target, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenToolkit.OpenGL.BufferStorageFlags flags) => instance.BufferStorage(target, size, data, flags);

        /// <summary>[requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        [CLSCompliant(false)]
        public static void BufferStorage<T2>(OpenToolkit.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.BufferStorage<T2>(target, size, data, flags);

        /// <summary>[requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        [CLSCompliant(false)]
        public static void BufferStorage<T2>(OpenToolkit.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.BufferStorage<T2>(target, size, data, flags);

        /// <summary>[requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        [CLSCompliant(false)]
        public static void BufferStorage<T2>(OpenToolkit.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.BufferStorage<T2>(target, size, data, flags);

        /// <summary>[requires: v4.4 or ARB_buffer_storage|VERSION_4_4]
        /// Creates and initializes a buffer object's immutable data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="flags">
        /// Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.
        /// </param>
        [AutoGenerated(Category = "ARB_buffer_storage|VERSION_4_4", Version = "4.4", EntryPoint = "glBufferStorage")]
        public static void BufferStorage<T2>(OpenToolkit.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.BufferStorage<T2>(target, size, ref data, flags);

        /// <summary>[requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, Int32 size, [CountAttribute(Parameter = "size")] IntPtr data) => instance.BufferSubData(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
         => instance.BufferSubData<T3>(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
         => instance.BufferSubData<T3>(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
         => instance.BufferSubData<T3>(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
         => instance.BufferSubData<T3>(target, offset, size, ref data);

        /// <summary>[requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data) => instance.BufferSubData(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
         => instance.BufferSubData<T3>(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
         => instance.BufferSubData<T3>(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
         => instance.BufferSubData<T3>(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
         => instance.BufferSubData<T3>(target, offset, size, ref data);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Execute a display list
        /// </summary>
        /// <param name="list">
        /// Specifies the integer name of the display list to be executed.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCallList")]
        [CLSCompliant(false)]
        public static void CallList(Int32 list) => instance.CallList(list);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Execute a display list
        /// </summary>
        /// <param name="list">
        /// Specifies the integer name of the display list to be executed.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCallList")]
        [CLSCompliant(false)]
        public static void CallList(UInt32 list) => instance.CallList(list);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Execute a list of display lists
        /// </summary>
        /// <param name="n">
        /// Specifies the number of display lists to be executed.
        /// </param>
        /// <param name="type">
        /// Specifies the type of values in lists. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, Gl2Bytes, Gl3Bytes, and Gl4Bytes are accepted.
        /// </param>
        /// <param name="lists">[length: COMPSIZE(n,type)]
        /// Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCallLists")]
        public static void CallLists(Int32 n, OpenToolkit.OpenGL.ListNameType type, [CountAttribute(Computed = "n,type")] IntPtr lists) => instance.CallLists(n, type, lists);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Execute a list of display lists
        /// </summary>
        /// <param name="n">
        /// Specifies the number of display lists to be executed.
        /// </param>
        /// <param name="type">
        /// Specifies the type of values in lists. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, Gl2Bytes, Gl3Bytes, and Gl4Bytes are accepted.
        /// </param>
        /// <param name="lists">[length: COMPSIZE(n,type)]
        /// Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCallLists")]
        [CLSCompliant(false)]
        public static void CallLists<T2>(Int32 n, OpenToolkit.OpenGL.ListNameType type, [InAttribute, OutAttribute, CountAttribute(Computed = "n,type")] T2[] lists)
            where T2 : struct
         => instance.CallLists<T2>(n, type, lists);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Execute a list of display lists
        /// </summary>
        /// <param name="n">
        /// Specifies the number of display lists to be executed.
        /// </param>
        /// <param name="type">
        /// Specifies the type of values in lists. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, Gl2Bytes, Gl3Bytes, and Gl4Bytes are accepted.
        /// </param>
        /// <param name="lists">[length: COMPSIZE(n,type)]
        /// Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCallLists")]
        [CLSCompliant(false)]
        public static void CallLists<T2>(Int32 n, OpenToolkit.OpenGL.ListNameType type, [InAttribute, OutAttribute, CountAttribute(Computed = "n,type")] T2[,] lists)
            where T2 : struct
         => instance.CallLists<T2>(n, type, lists);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Execute a list of display lists
        /// </summary>
        /// <param name="n">
        /// Specifies the number of display lists to be executed.
        /// </param>
        /// <param name="type">
        /// Specifies the type of values in lists. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, Gl2Bytes, Gl3Bytes, and Gl4Bytes are accepted.
        /// </param>
        /// <param name="lists">[length: COMPSIZE(n,type)]
        /// Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCallLists")]
        [CLSCompliant(false)]
        public static void CallLists<T2>(Int32 n, OpenToolkit.OpenGL.ListNameType type, [InAttribute, OutAttribute, CountAttribute(Computed = "n,type")] T2[,,] lists)
            where T2 : struct
         => instance.CallLists<T2>(n, type, lists);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Execute a list of display lists
        /// </summary>
        /// <param name="n">
        /// Specifies the number of display lists to be executed.
        /// </param>
        /// <param name="type">
        /// Specifies the type of values in lists. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, Gl2Bytes, Gl3Bytes, and Gl4Bytes are accepted.
        /// </param>
        /// <param name="lists">[length: COMPSIZE(n,type)]
        /// Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCallLists")]
        public static void CallLists<T2>(Int32 n, OpenToolkit.OpenGL.ListNameType type, [InAttribute, OutAttribute, CountAttribute(Computed = "n,type")] ref T2 lists)
            where T2 : struct
         => instance.CallLists<T2>(n, type, ref lists);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Check the completeness status of a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specify the target of the framebuffer completeness check.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glCheckFramebufferStatus")]
        public static OpenToolkit.OpenGL.FramebufferErrorCode CheckFramebufferStatus(OpenToolkit.OpenGL.FramebufferTarget target) => instance.CheckFramebufferStatus(target);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="target"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCheckNamedFramebufferStatus")]
        [CLSCompliant(false)]
        public static OpenToolkit.OpenGL.FramebufferStatus CheckNamedFramebufferStatus(Int32 framebuffer, OpenToolkit.OpenGL.FramebufferTarget target) => instance.CheckNamedFramebufferStatus(framebuffer, target);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="target"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCheckNamedFramebufferStatus")]
        [CLSCompliant(false)]
        public static OpenToolkit.OpenGL.FramebufferStatus CheckNamedFramebufferStatus(UInt32 framebuffer, OpenToolkit.OpenGL.FramebufferTarget target) => instance.CheckNamedFramebufferStatus(framebuffer, target);

        /// <summary>[requires: v3.0]
        /// Specify whether data read via glReadPixels should be clamped
        /// </summary>
        /// <param name="target">
        /// Target for color clamping. target must be ClampReadColor.
        /// </param>
        /// <param name="clamp">
        /// Specifies whether to apply color clamping. clamp must be True or False.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClampColor")]
        public static void ClampColor(OpenToolkit.OpenGL.ClampColorTarget target, OpenToolkit.OpenGL.ClampColorMode clamp) => instance.ClampColor(target, clamp);

        /// <summary>[requires: v1.0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClear")]
        public static void Clear(OpenToolkit.OpenGL.ClearBufferMask mask) => instance.Clear(mask);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify clear values for the accumulation buffer
        /// </summary>
        /// <param name="red">
        /// Specify the red, green, blue, and alpha values used when the accumulation buffer is cleared. The initial values are all 0.
        /// </param>
        /// <param name="green">
        /// Specify the red, green, blue, and alpha values used when the accumulation buffer is cleared. The initial values are all 0.
        /// </param>
        /// <param name="blue">
        /// Specify the red, green, blue, and alpha values used when the accumulation buffer is cleared. The initial values are all 0.
        /// </param>
        /// <param name="alpha">
        /// Specify the red, green, blue, and alpha values used when the accumulation buffer is cleared. The initial values are all 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearAccum")]
        public static void ClearAccum(Single red, Single green, Single blue, Single alpha) => instance.ClearAccum(red, green, blue, alpha);

        /// <summary>[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill a buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferData")]
        public static void ClearBufferData(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.PixelInternalFormat internalformat, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data) => instance.ClearBufferData(target, internalformat, format, type, data);

        /// <summary>[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill a buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferData")]
        [CLSCompliant(false)]
        public static void ClearBufferData<T4>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.PixelInternalFormat internalformat, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[] data)
            where T4 : struct
         => instance.ClearBufferData<T4>(target, internalformat, format, type, data);

        /// <summary>[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill a buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferData")]
        [CLSCompliant(false)]
        public static void ClearBufferData<T4>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.PixelInternalFormat internalformat, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,] data)
            where T4 : struct
         => instance.ClearBufferData<T4>(target, internalformat, format, type, data);

        /// <summary>[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill a buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferData")]
        [CLSCompliant(false)]
        public static void ClearBufferData<T4>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.PixelInternalFormat internalformat, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,,] data)
            where T4 : struct
         => instance.ClearBufferData<T4>(target, internalformat, format, type, data);

        /// <summary>[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill a buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferData")]
        public static void ClearBufferData<T4>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.PixelInternalFormat internalformat, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T4 data)
            where T4 : struct
         => instance.ClearBufferData<T4>(target, internalformat, format, type, ref data);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="depth">
        /// The value to clear a depth render buffer to.
        /// </param>
        /// <param name="stencil">
        /// The value to clear a stencil render buffer to.
        /// </param>
        [Obsolete("Use ClearBufferCombined overload instead")]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfi")]
        public static void ClearBuffer(OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Single depth, Int32 stencil) => instance.ClearBuffer(buffer, drawbuffer, depth, stencil);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="depth">
        /// The value to clear a depth render buffer to.
        /// </param>
        /// <param name="stencil">
        /// The value to clear a stencil render buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfi")]
        public static void ClearBuffer(OpenToolkit.OpenGL.ClearBufferCombined buffer, Int32 drawbuffer, Single depth, Int32 stencil) => instance.ClearBuffer(buffer, drawbuffer, depth, stencil);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Single[] value) => instance.ClearBuffer(buffer, drawbuffer, value);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] ref Single value) => instance.ClearBuffer(buffer, drawbuffer, ref value);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
        [CLSCompliant(false)]
        public static unsafe void ClearBuffer(OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Single* value) => instance.ClearBuffer(buffer, drawbuffer, value);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Int32[] value) => instance.ClearBuffer(buffer, drawbuffer, value);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] ref Int32 value) => instance.ClearBuffer(buffer, drawbuffer, ref value);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
        [CLSCompliant(false)]
        public static unsafe void ClearBuffer(OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] Int32* value) => instance.ClearBuffer(buffer, drawbuffer, value);

        /// <summary>[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static void ClearBufferSubData(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, Int32 size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data) => instance.ClearBufferSubData(target, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearBufferSubData<T6>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, Int32 size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
            where T6 : struct
         => instance.ClearBufferSubData<T6>(target, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearBufferSubData<T6>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, Int32 size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
            where T6 : struct
         => instance.ClearBufferSubData<T6>(target, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearBufferSubData<T6>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, Int32 size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
            where T6 : struct
         => instance.ClearBufferSubData<T6>(target, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static void ClearBufferSubData<T6>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, Int32 size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
            where T6 : struct
         => instance.ClearBufferSubData<T6>(target, internalformat, offset, size, format, type, ref data);

        /// <summary>[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static void ClearBufferSubData(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data) => instance.ClearBufferSubData(target, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearBufferSubData<T6>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[] data)
            where T6 : struct
         => instance.ClearBufferSubData<T6>(target, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearBufferSubData<T6>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,] data)
            where T6 : struct
         => instance.ClearBufferSubData<T6>(target, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearBufferSubData<T6>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T6[,,] data)
            where T6 : struct
         => instance.ClearBufferSubData<T6>(target, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]
        /// Fill all or part of buffer object's data store with a fixed value
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of the global buffer binding targets.
        /// </param>
        /// <param name="internalformat">
        /// The internal format with which the data will be stored in the buffer object.
        /// </param>
        /// <param name="offset">
        /// The offset, in basic machine units into the buffer object's data store at which to start filling.
        /// </param>
        /// <param name="size">
        /// The size, in basic machine units of the range of the data store to fill.
        /// </param>
        /// <param name="format">
        /// The format of the data in memory addressed by data.
        /// </param>
        /// <param name="type">
        /// The type of the data in memory addressed by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address of a memory location storing the data to be replicated into the buffer's data store.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glClearBufferSubData")]
        public static void ClearBufferSubData<T6>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T6 data)
            where T6 : struct
         => instance.ClearBufferSubData<T6>(target, internalformat, offset, size, format, type, ref data);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] UInt32[] value) => instance.ClearBuffer(buffer, drawbuffer, value);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        [CLSCompliant(false)]
        public static void ClearBuffer(OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] ref UInt32 value) => instance.ClearBuffer(buffer, drawbuffer, ref value);

        /// <summary>[requires: v3.0]
        /// Clear individual buffers of the currently bound draw framebuffer
        /// </summary>
        /// <param name="buffer">
        /// Specify the buffer to clear.
        /// </param>
        /// <param name="drawbuffer">
        /// Specify a particular draw buffer to clear.
        /// </param>
        /// <param name="value">[length: COMPSIZE(buffer)]
        /// For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        [CLSCompliant(false)]
        public static unsafe void ClearBuffer(OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, [CountAttribute(Computed = "buffer")] UInt32* value) => instance.ClearBuffer(buffer, drawbuffer, value);

        /// <summary>[requires: v1.0]
        /// Specify clear values for the color buffers
        /// </summary>
        /// <param name="red">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="green">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="blue">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="alpha">
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearColor")]
        public static void ClearColor(Single red, Single green, Single blue, Single alpha) => instance.ClearColor(red, green, blue, alpha);

        /// <summary>[requires: v1.0]
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="depth">
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearDepth")]
        public static void ClearDepth(Double depth) => instance.ClearDepth(depth);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="d">
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glClearDepthf")]
        public static void ClearDepth(Single d) => instance.ClearDepth(d);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the clear value for the color index buffers
        /// </summary>
        /// <param name="c">
        /// Specifies the index used when the color index buffers are cleared. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearIndex")]
        public static void ClearIndex(Single c) => instance.ClearIndex(c);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferData(Int32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, IntPtr data) => instance.ClearNamedBufferData(buffer, internalformat, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferData<T4>(Int32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[] data)
            where T4 : struct
         => instance.ClearNamedBufferData<T4>(buffer, internalformat, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferData<T4>(Int32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,] data)
            where T4 : struct
         => instance.ClearNamedBufferData<T4>(buffer, internalformat, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferData<T4>(Int32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,,] data)
            where T4 : struct
         => instance.ClearNamedBufferData<T4>(buffer, internalformat, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferData<T4>(Int32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T4 data)
            where T4 : struct
         => instance.ClearNamedBufferData<T4>(buffer, internalformat, format, type, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferData(UInt32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, IntPtr data) => instance.ClearNamedBufferData(buffer, internalformat, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferData<T4>(UInt32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[] data)
            where T4 : struct
         => instance.ClearNamedBufferData<T4>(buffer, internalformat, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferData<T4>(UInt32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,] data)
            where T4 : struct
         => instance.ClearNamedBufferData<T4>(buffer, internalformat, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferData<T4>(UInt32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T4[,,] data)
            where T4 : struct
         => instance.ClearNamedBufferData<T4>(buffer, internalformat, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferData<T4>(UInt32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T4 data)
            where T4 : struct
         => instance.ClearNamedBufferData<T4>(buffer, internalformat, format, type, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData(Int32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, Int32 size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, IntPtr data) => instance.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(Int32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, Int32 size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(Int32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, Int32 size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(Int32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, Int32 size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(Int32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, Int32 size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData(Int32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, IntPtr data) => instance.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(Int32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(Int32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(Int32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(Int32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData(UInt32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, Int32 size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, IntPtr data) => instance.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(UInt32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, Int32 size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(UInt32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, Int32 size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(UInt32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, Int32 size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(UInt32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, Int32 size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData(UInt32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, IntPtr data) => instance.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(UInt32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(UInt32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(UInt32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void ClearNamedBufferSubData<T6>(UInt32 buffer, OpenToolkit.OpenGL.PixelInternalFormat internalformat, IntPtr offset, IntPtr size, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
         => instance.ClearNamedBufferSubData<T6>(buffer, internalformat, offset, size, format, type, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="depth"></param>
        /// <param name="stencil"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferfi")]
        [CLSCompliant(false)]
        public static void ClearNamedFramebuffer(Int32 framebuffer, OpenToolkit.OpenGL.ClearBufferCombined buffer, Int32 drawbuffer, Single depth, Int32 stencil) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, depth, stencil);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="depth"></param>
        /// <param name="stencil"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferfi")]
        [CLSCompliant(false)]
        public static void ClearNamedFramebuffer(UInt32 framebuffer, OpenToolkit.OpenGL.ClearBufferCombined buffer, Int32 drawbuffer, Single depth, Int32 stencil) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, depth, stencil);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferfv")]
        [CLSCompliant(false)]
        public static void ClearNamedFramebuffer(Int32 framebuffer, OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Single[] value) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, value);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferfv")]
        [CLSCompliant(false)]
        public static void ClearNamedFramebuffer(Int32 framebuffer, OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, ref Single value) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, ref value);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferfv")]
        [CLSCompliant(false)]
        public static unsafe void ClearNamedFramebuffer(Int32 framebuffer, OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Single* value) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, value);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferfv")]
        [CLSCompliant(false)]
        public static void ClearNamedFramebuffer(UInt32 framebuffer, OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Single[] value) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, value);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferfv")]
        [CLSCompliant(false)]
        public static void ClearNamedFramebuffer(UInt32 framebuffer, OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, ref Single value) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, ref value);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferfv")]
        [CLSCompliant(false)]
        public static unsafe void ClearNamedFramebuffer(UInt32 framebuffer, OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Single* value) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, value);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferiv")]
        [CLSCompliant(false)]
        public static void ClearNamedFramebuffer(Int32 framebuffer, OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Int32[] value) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, value);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferiv")]
        [CLSCompliant(false)]
        public static void ClearNamedFramebuffer(Int32 framebuffer, OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, ref Int32 value) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, ref value);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferiv")]
        [CLSCompliant(false)]
        public static unsafe void ClearNamedFramebuffer(Int32 framebuffer, OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Int32* value) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, value);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferiv")]
        [CLSCompliant(false)]
        public static void ClearNamedFramebuffer(UInt32 framebuffer, OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Int32[] value) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, value);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferiv")]
        [CLSCompliant(false)]
        public static void ClearNamedFramebuffer(UInt32 framebuffer, OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, ref Int32 value) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, ref value);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferiv")]
        [CLSCompliant(false)]
        public static unsafe void ClearNamedFramebuffer(UInt32 framebuffer, OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Int32* value) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, value);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferuiv")]
        [CLSCompliant(false)]
        public static void ClearNamedFramebuffer(UInt32 framebuffer, OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, UInt32[] value) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, value);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferuiv")]
        [CLSCompliant(false)]
        public static void ClearNamedFramebuffer(UInt32 framebuffer, OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, ref UInt32 value) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, ref value);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buffer"></param>
        /// <param name="drawbuffer"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glClearNamedFramebufferuiv")]
        [CLSCompliant(false)]
        public static unsafe void ClearNamedFramebuffer(UInt32 framebuffer, OpenToolkit.OpenGL.ClearBuffer buffer, Int32 drawbuffer, UInt32* value) => instance.ClearNamedFramebuffer(framebuffer, buffer, drawbuffer, value);

        /// <summary>[requires: v1.0]
        /// Specify the clear value for the stencil buffer
        /// </summary>
        /// <param name="s">
        /// Specifies the index used when the stencil buffer is cleared. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearStencil")]
        public static void ClearStencil(Int32 s) => instance.ClearStencil(s);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        [CLSCompliant(false)]
        public static void ClearTexImage(Int32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data) => instance.ClearTexImage(texture, level, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        [CLSCompliant(false)]
        public static void ClearTexImage<T4>(Int32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[] data)
            where T4 : struct
         => instance.ClearTexImage<T4>(texture, level, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        [CLSCompliant(false)]
        public static void ClearTexImage<T4>(Int32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,] data)
            where T4 : struct
         => instance.ClearTexImage<T4>(texture, level, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        [CLSCompliant(false)]
        public static void ClearTexImage<T4>(Int32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,,] data)
            where T4 : struct
         => instance.ClearTexImage<T4>(texture, level, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        [CLSCompliant(false)]
        public static void ClearTexImage<T4>(Int32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T4 data)
            where T4 : struct
         => instance.ClearTexImage<T4>(texture, level, format, type, ref data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        [CLSCompliant(false)]
        public static void ClearTexImage(UInt32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data) => instance.ClearTexImage(texture, level, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        [CLSCompliant(false)]
        public static void ClearTexImage<T4>(UInt32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[] data)
            where T4 : struct
         => instance.ClearTexImage<T4>(texture, level, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        [CLSCompliant(false)]
        public static void ClearTexImage<T4>(UInt32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,] data)
            where T4 : struct
         => instance.ClearTexImage<T4>(texture, level, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        [CLSCompliant(false)]
        public static void ClearTexImage<T4>(UInt32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T4[,,] data)
            where T4 : struct
         => instance.ClearTexImage<T4>(texture, level, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexImage")]
        [CLSCompliant(false)]
        public static void ClearTexImage<T4>(UInt32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T4 data)
            where T4 : struct
         => instance.ClearTexImage<T4>(texture, level, format, type, ref data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="xoffset">
        /// The coordinate of the left edge of the region to be cleared.
        /// </param>
        /// <param name="yoffset">
        /// The coordinate of the lower edge of the region to be cleared.
        /// </param>
        /// <param name="zoffset">
        /// The coordinate of the front of the region to be cleared.
        /// </param>
        /// <param name="width">
        /// The width of the region to be cleared.
        /// </param>
        /// <param name="height">
        /// The height of the region to be cleared.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        [CLSCompliant(false)]
        public static void ClearTexSubImage(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data) => instance.ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="xoffset">
        /// The coordinate of the left edge of the region to be cleared.
        /// </param>
        /// <param name="yoffset">
        /// The coordinate of the lower edge of the region to be cleared.
        /// </param>
        /// <param name="zoffset">
        /// The coordinate of the front of the region to be cleared.
        /// </param>
        /// <param name="width">
        /// The width of the region to be cleared.
        /// </param>
        /// <param name="height">
        /// The height of the region to be cleared.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        [CLSCompliant(false)]
        public static void ClearTexSubImage<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T10[] data)
            where T10 : struct
         => instance.ClearTexSubImage<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="xoffset">
        /// The coordinate of the left edge of the region to be cleared.
        /// </param>
        /// <param name="yoffset">
        /// The coordinate of the lower edge of the region to be cleared.
        /// </param>
        /// <param name="zoffset">
        /// The coordinate of the front of the region to be cleared.
        /// </param>
        /// <param name="width">
        /// The width of the region to be cleared.
        /// </param>
        /// <param name="height">
        /// The height of the region to be cleared.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        [CLSCompliant(false)]
        public static void ClearTexSubImage<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T10[,] data)
            where T10 : struct
         => instance.ClearTexSubImage<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="xoffset">
        /// The coordinate of the left edge of the region to be cleared.
        /// </param>
        /// <param name="yoffset">
        /// The coordinate of the lower edge of the region to be cleared.
        /// </param>
        /// <param name="zoffset">
        /// The coordinate of the front of the region to be cleared.
        /// </param>
        /// <param name="width">
        /// The width of the region to be cleared.
        /// </param>
        /// <param name="height">
        /// The height of the region to be cleared.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        [CLSCompliant(false)]
        public static void ClearTexSubImage<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T10[,,] data)
            where T10 : struct
         => instance.ClearTexSubImage<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="xoffset">
        /// The coordinate of the left edge of the region to be cleared.
        /// </param>
        /// <param name="yoffset">
        /// The coordinate of the lower edge of the region to be cleared.
        /// </param>
        /// <param name="zoffset">
        /// The coordinate of the front of the region to be cleared.
        /// </param>
        /// <param name="width">
        /// The width of the region to be cleared.
        /// </param>
        /// <param name="height">
        /// The height of the region to be cleared.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        [CLSCompliant(false)]
        public static void ClearTexSubImage<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T10 data)
            where T10 : struct
         => instance.ClearTexSubImage<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ref data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="xoffset">
        /// The coordinate of the left edge of the region to be cleared.
        /// </param>
        /// <param name="yoffset">
        /// The coordinate of the lower edge of the region to be cleared.
        /// </param>
        /// <param name="zoffset">
        /// The coordinate of the front of the region to be cleared.
        /// </param>
        /// <param name="width">
        /// The width of the region to be cleared.
        /// </param>
        /// <param name="height">
        /// The height of the region to be cleared.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        [CLSCompliant(false)]
        public static void ClearTexSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type")] IntPtr data) => instance.ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="xoffset">
        /// The coordinate of the left edge of the region to be cleared.
        /// </param>
        /// <param name="yoffset">
        /// The coordinate of the lower edge of the region to be cleared.
        /// </param>
        /// <param name="zoffset">
        /// The coordinate of the front of the region to be cleared.
        /// </param>
        /// <param name="width">
        /// The width of the region to be cleared.
        /// </param>
        /// <param name="height">
        /// The height of the region to be cleared.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        [CLSCompliant(false)]
        public static void ClearTexSubImage<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T10[] data)
            where T10 : struct
         => instance.ClearTexSubImage<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="xoffset">
        /// The coordinate of the left edge of the region to be cleared.
        /// </param>
        /// <param name="yoffset">
        /// The coordinate of the lower edge of the region to be cleared.
        /// </param>
        /// <param name="zoffset">
        /// The coordinate of the front of the region to be cleared.
        /// </param>
        /// <param name="width">
        /// The width of the region to be cleared.
        /// </param>
        /// <param name="height">
        /// The height of the region to be cleared.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        [CLSCompliant(false)]
        public static void ClearTexSubImage<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T10[,] data)
            where T10 : struct
         => instance.ClearTexSubImage<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="xoffset">
        /// The coordinate of the left edge of the region to be cleared.
        /// </param>
        /// <param name="yoffset">
        /// The coordinate of the lower edge of the region to be cleared.
        /// </param>
        /// <param name="zoffset">
        /// The coordinate of the front of the region to be cleared.
        /// </param>
        /// <param name="width">
        /// The width of the region to be cleared.
        /// </param>
        /// <param name="height">
        /// The height of the region to be cleared.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        [CLSCompliant(false)]
        public static void ClearTexSubImage<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] T10[,,] data)
            where T10 : struct
         => instance.ClearTexSubImage<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

        /// <summary>[requires: v4.4 or ARB_clear_texture|VERSION_4_4]
        /// Fills all or part of a texture image with a constant value
        /// </summary>
        /// <param name="texture">
        /// The name of an existing texture object containing the image to be cleared.
        /// </param>
        /// <param name="level">
        /// The level of texture containing the region to be cleared.
        /// </param>
        /// <param name="xoffset">
        /// The coordinate of the left edge of the region to be cleared.
        /// </param>
        /// <param name="yoffset">
        /// The coordinate of the lower edge of the region to be cleared.
        /// </param>
        /// <param name="zoffset">
        /// The coordinate of the front of the region to be cleared.
        /// </param>
        /// <param name="width">
        /// The width of the region to be cleared.
        /// </param>
        /// <param name="height">
        /// The height of the region to be cleared.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be cleared.
        /// </param>
        /// <param name="format">
        /// The format of the data whose address in memory is given by data.
        /// </param>
        /// <param name="type">
        /// The type of the data whose address in memory is given by data.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type)]
        /// The address in memory of the data to be used to clear the specified region.
        /// </param>
        [AutoGenerated(Category = "ARB_clear_texture|VERSION_4_4", Version = "4.4", EntryPoint = "glClearTexSubImage")]
        [CLSCompliant(false)]
        public static void ClearTexSubImage<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type")] ref T10 data)
            where T10 : struct
         => instance.ClearTexSubImage<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ref data);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of Texture, where i ranges from 0 to the value of MaxTextureCoords - 1, which is an implementation-dependent value.  The initial value is Texture0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glClientActiveTexture")]
        public static void ClientActiveTexture(OpenToolkit.OpenGL.TextureUnit texture) => instance.ClientActiveTexture(texture);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// The sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
        /// </param>
        /// <param name="timeout">
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glClientWaitSync")]
        [CLSCompliant(false)]
        public static OpenToolkit.OpenGL.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenToolkit.OpenGL.ClientWaitSyncFlags flags, Int64 timeout) => instance.ClientWaitSync(sync, flags, timeout);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// The sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
        /// </param>
        /// <param name="timeout">
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glClientWaitSync")]
        [CLSCompliant(false)]
        public static OpenToolkit.OpenGL.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenToolkit.OpenGL.ClientWaitSyncFlags flags, UInt64 timeout) => instance.ClientWaitSync(sync, flags, timeout);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// The sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
        /// </param>
        /// <param name="timeout">
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </param>
        [Obsolete("Use ClientWaitSyncFlags overload instead")]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glClientWaitSync")]
        [CLSCompliant(false)]
        public static OpenToolkit.OpenGL.WaitSyncStatus ClientWaitSync(IntPtr sync, Int32 flags, Int64 timeout) => instance.ClientWaitSync(sync, flags, timeout);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// The sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
        /// </param>
        /// <param name="timeout">
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </param>
        [Obsolete("Use ClientWaitSyncFlags overload instead")]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glClientWaitSync")]
        [CLSCompliant(false)]
        public static OpenToolkit.OpenGL.WaitSyncStatus ClientWaitSync(IntPtr sync, Int32 flags, UInt64 timeout) => instance.ClientWaitSync(sync, flags, timeout);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Block and wait for a sync object to become signaled
        /// </summary>
        /// <param name="sync">
        /// The sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
        /// </param>
        /// <param name="timeout">
        /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
        /// </param>
        [Obsolete("Use ClientWaitSyncFlags overload instead")]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glClientWaitSync")]
        [CLSCompliant(false)]
        public static OpenToolkit.OpenGL.WaitSyncStatus ClientWaitSync(IntPtr sync, UInt32 flags, UInt64 timeout) => instance.ClientWaitSync(sync, flags, timeout);

        /// <summary>[requires: v4.5 or ARB_clip_control|VERSION_4_5]</summary>
        /// <param name="origin"></param>
        /// <param name="depth"></param>
        [AutoGenerated(Category = "ARB_clip_control|VERSION_4_5", Version = "4.5", EntryPoint = "glClipControl")]
        public static void ClipControl(OpenToolkit.OpenGL.ClipOrigin origin, OpenToolkit.OpenGL.ClipDepthMode depth) => instance.ClipControl(origin, depth);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="plane">
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="equation">[length: 4]
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClipPlane")]
        [CLSCompliant(false)]
        public static void ClipPlane(OpenToolkit.OpenGL.ClipPlaneName plane, [CountAttribute(Count = 4)] Double[] equation) => instance.ClipPlane(plane, equation);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="plane">
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="equation">[length: 4]
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClipPlane")]
        [CLSCompliant(false)]
        public static void ClipPlane(OpenToolkit.OpenGL.ClipPlaneName plane, [CountAttribute(Count = 4)] ref Double equation) => instance.ClipPlane(plane, ref equation);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="plane">
        /// Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.
        /// </param>
        /// <param name="equation">[length: 4]
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClipPlane")]
        [CLSCompliant(false)]
        public static unsafe void ClipPlane(OpenToolkit.OpenGL.ClipPlaneName plane, [CountAttribute(Count = 4)] Double* equation) => instance.ClipPlane(plane, equation);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3b")]
        [CLSCompliant(false)]
        public static void Color3(SByte red, SByte green, SByte blue) => instance.Color3(red, green, blue);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3bv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] SByte[] v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3bv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] ref SByte v) => instance.Color3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3bv")]
        [CLSCompliant(false)]
        public static unsafe void Color3([CountAttribute(Count = 3)] SByte* v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3d")]
        public static void Color3(Double red, Double green, Double blue) => instance.Color3(red, green, blue);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3dv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] Double[] v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3dv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] ref Double v) => instance.Color3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3dv")]
        [CLSCompliant(false)]
        public static unsafe void Color3([CountAttribute(Count = 3)] Double* v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3f")]
        public static void Color3(Single red, Single green, Single blue) => instance.Color3(red, green, blue);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3fv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] Single[] v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3fv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] ref Single v) => instance.Color3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3fv")]
        [CLSCompliant(false)]
        public static unsafe void Color3([CountAttribute(Count = 3)] Single* v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3i")]
        public static void Color3(Int32 red, Int32 green, Int32 blue) => instance.Color3(red, green, blue);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3iv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] Int32[] v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3iv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] ref Int32 v) => instance.Color3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3iv")]
        [CLSCompliant(false)]
        public static unsafe void Color3([CountAttribute(Count = 3)] Int32* v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3s")]
        public static void Color3(Int16 red, Int16 green, Int16 blue) => instance.Color3(red, green, blue);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3sv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] Int16[] v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3sv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] ref Int16 v) => instance.Color3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3sv")]
        [CLSCompliant(false)]
        public static unsafe void Color3([CountAttribute(Count = 3)] Int16* v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3ub")]
        public static void Color3(Byte red, Byte green, Byte blue) => instance.Color3(red, green, blue);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3ubv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] Byte[] v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3ubv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] ref Byte v) => instance.Color3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3ubv")]
        [CLSCompliant(false)]
        public static unsafe void Color3([CountAttribute(Count = 3)] Byte* v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3ui")]
        [CLSCompliant(false)]
        public static void Color3(UInt32 red, UInt32 green, UInt32 blue) => instance.Color3(red, green, blue);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3uiv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] UInt32[] v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3uiv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] ref UInt32 v) => instance.Color3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3uiv")]
        [CLSCompliant(false)]
        public static unsafe void Color3([CountAttribute(Count = 3)] UInt32* v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3us")]
        [CLSCompliant(false)]
        public static void Color3(UInt16 red, UInt16 green, UInt16 blue) => instance.Color3(red, green, blue);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3usv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] UInt16[] v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3usv")]
        [CLSCompliant(false)]
        public static void Color3([CountAttribute(Count = 3)] ref UInt16 v) => instance.Color3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor3usv")]
        [CLSCompliant(false)]
        public static unsafe void Color3([CountAttribute(Count = 3)] UInt16* v) => instance.Color3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4b")]
        [CLSCompliant(false)]
        public static void Color4(SByte red, SByte green, SByte blue, SByte alpha) => instance.Color4(red, green, blue, alpha);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4bv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] SByte[] v) => instance.Color4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4bv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] ref SByte v) => instance.Color4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4bv")]
        [CLSCompliant(false)]
        public static unsafe void Color4([CountAttribute(Count = 4)] SByte* v) => instance.Color4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4d")]
        public static void Color4(Double red, Double green, Double blue, Double alpha) => instance.Color4(red, green, blue, alpha);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4dv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] Double[] v) => instance.Color4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4dv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] ref Double v) => instance.Color4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4dv")]
        [CLSCompliant(false)]
        public static unsafe void Color4([CountAttribute(Count = 4)] Double* v) => instance.Color4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4f")]
        public static void Color4(Single red, Single green, Single blue, Single alpha) => instance.Color4(red, green, blue, alpha);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4fv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] Single[] v) => instance.Color4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4fv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] ref Single v) => instance.Color4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4fv")]
        [CLSCompliant(false)]
        public static unsafe void Color4([CountAttribute(Count = 4)] Single* v) => instance.Color4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4i")]
        public static void Color4(Int32 red, Int32 green, Int32 blue, Int32 alpha) => instance.Color4(red, green, blue, alpha);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4iv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] Int32[] v) => instance.Color4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4iv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] ref Int32 v) => instance.Color4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4iv")]
        [CLSCompliant(false)]
        public static unsafe void Color4([CountAttribute(Count = 4)] Int32* v) => instance.Color4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4s")]
        public static void Color4(Int16 red, Int16 green, Int16 blue, Int16 alpha) => instance.Color4(red, green, blue, alpha);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4sv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] Int16[] v) => instance.Color4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4sv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] ref Int16 v) => instance.Color4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4sv")]
        [CLSCompliant(false)]
        public static unsafe void Color4([CountAttribute(Count = 4)] Int16* v) => instance.Color4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4ub")]
        public static void Color4(Byte red, Byte green, Byte blue, Byte alpha) => instance.Color4(red, green, blue, alpha);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4ubv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] Byte[] v) => instance.Color4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4ubv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] ref Byte v) => instance.Color4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4ubv")]
        [CLSCompliant(false)]
        public static unsafe void Color4([CountAttribute(Count = 4)] Byte* v) => instance.Color4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4ui")]
        [CLSCompliant(false)]
        public static void Color4(UInt32 red, UInt32 green, UInt32 blue, UInt32 alpha) => instance.Color4(red, green, blue, alpha);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4uiv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] UInt32[] v) => instance.Color4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4uiv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] ref UInt32 v) => instance.Color4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4uiv")]
        [CLSCompliant(false)]
        public static unsafe void Color4([CountAttribute(Count = 4)] UInt32* v) => instance.Color4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        /// <param name="alpha">
        /// Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4us")]
        [CLSCompliant(false)]
        public static void Color4(UInt16 red, UInt16 green, UInt16 blue, UInt16 alpha) => instance.Color4(red, green, blue, alpha);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4usv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] UInt16[] v) => instance.Color4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4usv")]
        [CLSCompliant(false)]
        public static void Color4([CountAttribute(Count = 4)] ref UInt16 v) => instance.Color4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify new red, green, and blue values for the current color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColor4usv")]
        [CLSCompliant(false)]
        public static unsafe void Color4([CountAttribute(Count = 4)] UInt16* v) => instance.Color4(v);

        /// <summary>[requires: v1.0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="red">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="green">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="blue">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="alpha">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColorMask")]
        public static void ColorMask(bool red, bool green, bool blue, bool alpha) => instance.ColorMask(red, green, blue, alpha);

        /// <summary>[requires: v3.0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="index">
        /// For glColorMaski, specifies the index of the draw buffer whose color mask to set.
        /// </param>
        /// <param name="r">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="g">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="b">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="a">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glColorMaski")]
        [CLSCompliant(false)]
        public static void ColorMask(Int32 index, bool r, bool g, bool b, bool a) => instance.ColorMask(index, r, g, b, a);

        /// <summary>[requires: v3.0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="index">
        /// For glColorMaski, specifies the index of the draw buffer whose color mask to set.
        /// </param>
        /// <param name="r">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="g">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="b">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        /// <param name="a">
        /// Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glColorMaski")]
        [CLSCompliant(false)]
        public static void ColorMask(UInt32 index, bool r, bool g, bool b, bool a) => instance.ColorMask(index, r, g, b, a);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Cause a material color to track the current color
        /// </summary>
        /// <param name="face">
        /// Specifies whether front, back, or both front and back material parameters should track the current color. Accepted values are Front, Back, and FrontAndBack. The initial value is FrontAndBack.
        /// </param>
        /// <param name="mode">
        /// Specifies which of several material parameters track the current color. Accepted values are Emission, Ambient, Diffuse, Specular, and AmbientAndDiffuse. The initial value is AmbientAndDiffuse.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColorMaterial")]
        public static void ColorMaterial(OpenToolkit.OpenGL.MaterialFace face, OpenToolkit.OpenGL.ColorMaterialParameter mode) => instance.ColorMaterial(face, mode);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="color"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP3ui")]
        [CLSCompliant(false)]
        public static void ColorP3(OpenToolkit.OpenGL.PackedPointerType type, Int32 color) => instance.ColorP3(type, color);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="color"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP3ui")]
        [CLSCompliant(false)]
        public static void ColorP3(OpenToolkit.OpenGL.PackedPointerType type, UInt32 color) => instance.ColorP3(type, color);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="color">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP3uiv")]
        [CLSCompliant(false)]
        public static unsafe void ColorP3(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] Int32* color) => instance.ColorP3(type, color);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="color">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP3uiv")]
        [CLSCompliant(false)]
        public static unsafe void ColorP3(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] UInt32* color) => instance.ColorP3(type, color);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="color"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP4ui")]
        [CLSCompliant(false)]
        public static void ColorP4(OpenToolkit.OpenGL.PackedPointerType type, Int32 color) => instance.ColorP4(type, color);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="color"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP4ui")]
        [CLSCompliant(false)]
        public static void ColorP4(OpenToolkit.OpenGL.PackedPointerType type, UInt32 color) => instance.ColorP4(type, color);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="color">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP4uiv")]
        [CLSCompliant(false)]
        public static unsafe void ColorP4(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] Int32* color) => instance.ColorP4(type, color);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="color">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glColorP4uiv")]
        [CLSCompliant(false)]
        public static unsafe void ColorP4(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] UInt32* color) => instance.ColorP4(type, color);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glColorPointer")]
        public static void ColorPointer(Int32 size, OpenToolkit.OpenGL.ColorPointerType type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) => instance.ColorPointer(size, type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glColorPointer")]
        [CLSCompliant(false)]
        public static void ColorPointer<T3>(Int32 size, OpenToolkit.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
            where T3 : struct
         => instance.ColorPointer<T3>(size, type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glColorPointer")]
        [CLSCompliant(false)]
        public static void ColorPointer<T3>(Int32 size, OpenToolkit.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
            where T3 : struct
         => instance.ColorPointer<T3>(size, type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glColorPointer")]
        [CLSCompliant(false)]
        public static void ColorPointer<T3>(Int32 size, OpenToolkit.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
            where T3 : struct
         => instance.ColorPointer<T3>(size, type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glColorPointer")]
        public static void ColorPointer<T3>(Int32 size, OpenToolkit.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
            where T3 : struct
         => instance.ColorPointer<T3>(size, type, stride, ref pointer);

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="count">
        /// The number of table entries to replace.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type,count)]
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static void ColorSubTable(OpenToolkit.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,count")] IntPtr data) => instance.ColorSubTable(target, start, count, format, type, data);

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="count">
        /// The number of table entries to replace.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type,count)]
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        [CLSCompliant(false)]
        public static void ColorSubTable<T5>(OpenToolkit.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,count")] T5[] data)
            where T5 : struct
         => instance.ColorSubTable<T5>(target, start, count, format, type, data);

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="count">
        /// The number of table entries to replace.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type,count)]
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        [CLSCompliant(false)]
        public static void ColorSubTable<T5>(OpenToolkit.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,count")] T5[,] data)
            where T5 : struct
         => instance.ColorSubTable<T5>(target, start, count, format, type, data);

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="count">
        /// The number of table entries to replace.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type,count)]
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        [CLSCompliant(false)]
        public static void ColorSubTable<T5>(OpenToolkit.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,count")] T5[,,] data)
            where T5 : struct
         => instance.ColorSubTable<T5>(target, start, count, format, type, data);

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="count">
        /// The number of table entries to replace.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="data">[length: COMPSIZE(format,type,count)]
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorSubTable")]
        public static void ColorSubTable<T5>(OpenToolkit.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,count")] ref T5 data)
            where T5 : struct
         => instance.ColorSubTable<T5>(target, start, count, format, type, ref data);

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of entries in the color lookup table specified by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="table">[length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static void ColorTable(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr table) => instance.ColorTable(target, internalformat, width, format, type, table);

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of entries in the color lookup table specified by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="table">[length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        [CLSCompliant(false)]
        public static void ColorTable<T5>(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[] table)
            where T5 : struct
         => instance.ColorTable<T5>(target, internalformat, width, format, type, table);

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of entries in the color lookup table specified by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="table">[length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        [CLSCompliant(false)]
        public static void ColorTable<T5>(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[,] table)
            where T5 : struct
         => instance.ColorTable<T5>(target, internalformat, width, format, type, table);

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of entries in the color lookup table specified by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="table">[length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        [CLSCompliant(false)]
        public static void ColorTable<T5>(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[,,] table)
            where T5 : struct
         => instance.ColorTable<T5>(target, internalformat, width, format, type, table);

        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of entries in the color lookup table specified by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="table">[length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTable")]
        public static void ColorTable<T5>(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T5 table)
            where T5 : struct
         => instance.ColorTable<T5>(target, internalformat, width, format, type, ref table);

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameterfv")]
        [CLSCompliant(false)]
        public static void ColorTableParameter(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] Single[] @params) => instance.ColorTableParameter(target, pname, @params);

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameterfv")]
        [CLSCompliant(false)]
        public static void ColorTableParameter(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] ref Single @params) => instance.ColorTableParameter(target, pname, ref @params);

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void ColorTableParameter(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] Single* @params) => instance.ColorTableParameter(target, pname, @params);

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameteriv")]
        [CLSCompliant(false)]
        public static void ColorTableParameter(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] Int32[] @params) => instance.ColorTableParameter(target, pname, @params);

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameteriv")]
        [CLSCompliant(false)]
        public static void ColorTableParameter(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] ref Int32 @params) => instance.ColorTableParameter(target, pname, ref @params);

        /// <summary>
        /// Set color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glColorTableParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void ColorTableParameter(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.ColorTableParameterPNameSgi pname, [CountAttribute(Computed = "pname")] Int32* @params) => instance.ColorTableParameter(target, pname, @params);

        /// <summary>[requires: v2.0]
        /// Compiles a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be compiled.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
        [CLSCompliant(false)]
        public static void CompileShader(Int32 shader) => instance.CompileShader(shader);

        /// <summary>[requires: v2.0]
        /// Compiles a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be compiled.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
        [CLSCompliant(false)]
        public static void CompileShader(UInt32 shader) => instance.CompileShader(shader);

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static void CompressedTexImage1D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) => instance.CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage1D<T6>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[] data)
            where T6 : struct
         => instance.CompressedTexImage1D<T6>(target, level, internalformat, width, border, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage1D<T6>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,] data)
            where T6 : struct
         => instance.CompressedTexImage1D<T6>(target, level, internalformat, width, border, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage1D<T6>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,,] data)
            where T6 : struct
         => instance.CompressedTexImage1D<T6>(target, level, internalformat, width, border, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static void CompressedTexImage1D<T6>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T6 data)
            where T6 : struct
         => instance.CompressedTexImage1D<T6>(target, level, internalformat, width, border, imageSize, ref data);

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) => instance.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[] data)
            where T7 : struct
         => instance.CompressedTexImage2D<T7>(target, level, internalformat, width, height, border, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,] data)
            where T7 : struct
         => instance.CompressedTexImage2D<T7>(target, level, internalformat, width, height, border, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T7[,,] data)
            where T7 : struct
         => instance.CompressedTexImage2D<T7>(target, level, internalformat, width, height, border, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T7 data)
            where T7 : struct
         => instance.CompressedTexImage2D<T7>(target, level, internalformat, width, height, border, imageSize, ref data);

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) => instance.CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage3D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] data)
            where T8 : struct
         => instance.CompressedTexImage3D<T8>(target, level, internalformat, width, height, depth, border, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage3D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] data)
            where T8 : struct
         => instance.CompressedTexImage3D<T8>(target, level, internalformat, width, height, depth, border, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage3D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] data)
            where T8 : struct
         => instance.CompressedTexImage3D<T8>(target, level, internalformat, width, height, depth, border, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static void CompressedTexImage3D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 data)
            where T8 : struct
         => instance.CompressedTexImage3D<T8>(target, level, internalformat, width, height, depth, border, imageSize, ref data);

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static void CompressedTexSubImage1D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) => instance.CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage1D<T6>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[] data)
            where T6 : struct
         => instance.CompressedTexSubImage1D<T6>(target, level, xoffset, width, format, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage1D<T6>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,] data)
            where T6 : struct
         => instance.CompressedTexSubImage1D<T6>(target, level, xoffset, width, format, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage1D<T6>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T6[,,] data)
            where T6 : struct
         => instance.CompressedTexSubImage1D<T6>(target, level, xoffset, width, format, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static void CompressedTexSubImage1D<T6>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T6 data)
            where T6 : struct
         => instance.CompressedTexSubImage1D<T6>(target, level, xoffset, width, format, imageSize, ref data);

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) => instance.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[] data)
            where T8 : struct
         => instance.CompressedTexSubImage2D<T8>(target, level, xoffset, yoffset, width, height, format, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,] data)
            where T8 : struct
         => instance.CompressedTexSubImage2D<T8>(target, level, xoffset, yoffset, width, height, format, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T8[,,] data)
            where T8 : struct
         => instance.CompressedTexSubImage2D<T8>(target, level, xoffset, yoffset, width, height, format, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T8 data)
            where T8 : struct
         => instance.CompressedTexSubImage2D<T8>(target, level, xoffset, yoffset, width, height, format, imageSize, ref data);

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [CountAttribute(Parameter = "imageSize")] IntPtr data) => instance.CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage3D<T10>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T10[] data)
            where T10 : struct
         => instance.CompressedTexSubImage3D<T10>(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage3D<T10>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T10[,] data)
            where T10 : struct
         => instance.CompressedTexSubImage3D<T10>(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage3D<T10>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] T10[,,] data)
            where T10 : struct
         => instance.CompressedTexSubImage3D<T10>(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        /// <summary>[requires: v1.3]
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize">
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize]
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static void CompressedTexSubImage3D<T10>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute, CountAttribute(Parameter = "imageSize")] ref T10 data)
            where T10 : struct
         => instance.CompressedTexSubImage3D<T10>(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage1D(Int32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, IntPtr data) => instance.CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage1D<T6>(Int32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
         => instance.CompressedTextureSubImage1D<T6>(texture, level, xoffset, width, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage1D<T6>(Int32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
         => instance.CompressedTextureSubImage1D<T6>(texture, level, xoffset, width, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage1D<T6>(Int32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
         => instance.CompressedTextureSubImage1D<T6>(texture, level, xoffset, width, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage1D<T6>(Int32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
         => instance.CompressedTextureSubImage1D<T6>(texture, level, xoffset, width, format, imageSize, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage1D(UInt32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, IntPtr data) => instance.CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage1D<T6>(UInt32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
         => instance.CompressedTextureSubImage1D<T6>(texture, level, xoffset, width, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage1D<T6>(UInt32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
         => instance.CompressedTextureSubImage1D<T6>(texture, level, xoffset, width, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage1D<T6>(UInt32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[,,] data)
            where T6 : struct
         => instance.CompressedTextureSubImage1D<T6>(texture, level, xoffset, width, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage1D<T6>(UInt32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
         => instance.CompressedTextureSubImage1D<T6>(texture, level, xoffset, width, format, imageSize, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage2D(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, IntPtr data) => instance.CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage2D<T8>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
         => instance.CompressedTextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage2D<T8>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
         => instance.CompressedTextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage2D<T8>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
         => instance.CompressedTextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage2D<T8>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
         => instance.CompressedTextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, imageSize, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage2D(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, IntPtr data) => instance.CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage2D<T8>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
         => instance.CompressedTextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage2D<T8>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
         => instance.CompressedTextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage2D<T8>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
         => instance.CompressedTextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage2D<T8>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
         => instance.CompressedTextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, imageSize, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage3D(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, IntPtr data) => instance.CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage3D<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
            where T10 : struct
         => instance.CompressedTextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage3D<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
            where T10 : struct
         => instance.CompressedTextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage3D<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
            where T10 : struct
         => instance.CompressedTextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage3D<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
            where T10 : struct
         => instance.CompressedTextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage3D(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, IntPtr data) => instance.CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage3D<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
            where T10 : struct
         => instance.CompressedTextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage3D<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
            where T10 : struct
         => instance.CompressedTextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage3D<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
            where T10 : struct
         => instance.CompressedTextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="imageSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCompressedTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void CompressedTextureSubImage3D<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
            where T10 : struct
         => instance.CompressedTextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, ref data);

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">[length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static void ConvolutionFilter1D(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr image) => instance.ConvolutionFilter1D(target, internalformat, width, format, type, image);

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">[length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        [CLSCompliant(false)]
        public static void ConvolutionFilter1D<T5>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[] image)
            where T5 : struct
         => instance.ConvolutionFilter1D<T5>(target, internalformat, width, format, type, image);

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">[length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        [CLSCompliant(false)]
        public static void ConvolutionFilter1D<T5>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[,] image)
            where T5 : struct
         => instance.ConvolutionFilter1D<T5>(target, internalformat, width, format, type, image);

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">[length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        [CLSCompliant(false)]
        public static void ConvolutionFilter1D<T5>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T5[,,] image)
            where T5 : struct
         => instance.ConvolutionFilter1D<T5>(target, internalformat, width, format, type, image);

        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Alpha, Luminance, LuminanceAlpha, Intensity, Rgb, and Rgba.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">[length: COMPSIZE(format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter1D")]
        public static void ConvolutionFilter1D<T5>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T5 image)
            where T5 : struct
         => instance.ConvolutionFilter1D<T5>(target, internalformat, width, format, type, ref image);

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">[length: COMPSIZE(format,type,width,height)]
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static void ConvolutionFilter2D(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr image) => instance.ConvolutionFilter2D(target, internalformat, width, height, format, type, image);

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">[length: COMPSIZE(format,type,width,height)]
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        [CLSCompliant(false)]
        public static void ConvolutionFilter2D<T6>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[] image)
            where T6 : struct
         => instance.ConvolutionFilter2D<T6>(target, internalformat, width, height, format, type, image);

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">[length: COMPSIZE(format,type,width,height)]
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        [CLSCompliant(false)]
        public static void ConvolutionFilter2D<T6>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,] image)
            where T6 : struct
         => instance.ConvolutionFilter2D<T6>(target, internalformat, width, height, format, type, image);

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">[length: COMPSIZE(format,type,width,height)]
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        [CLSCompliant(false)]
        public static void ConvolutionFilter2D<T6>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,,] image)
            where T6 : struct
         => instance.ConvolutionFilter2D<T6>(target, internalformat, width, height, format, type, image);

        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array referenced by data.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array referenced by data.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">[length: COMPSIZE(format,type,width,height)]
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionFilter2D")]
        public static void ConvolutionFilter2D<T6>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T6 image)
            where T6 : struct
         => instance.ConvolutionFilter2D<T6>(target, internalformat, width, height, format, type, ref image);

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="@params">
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameterf")]
        public static void ConvolutionParameter(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.ConvolutionParameterExt pname, Single @params) => instance.ConvolutionParameter(target, pname, @params);

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameterfv")]
        [CLSCompliant(false)]
        public static void ConvolutionParameter(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] Single[] @params) => instance.ConvolutionParameter(target, pname, @params);

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void ConvolutionParameter(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] Single* @params) => instance.ConvolutionParameter(target, pname, @params);

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="@params">
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameteri")]
        public static void ConvolutionParameter(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.ConvolutionParameterExt pname, Int32 @params) => instance.ConvolutionParameter(target, pname, @params);

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameteriv")]
        [CLSCompliant(false)]
        public static void ConvolutionParameter(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] Int32[] @params) => instance.ConvolutionParameter(target, pname, @params);

        /// <summary>
        /// Set convolution parameters
        /// </summary>
        /// <param name="target">
        /// The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be set. Must be ConvolutionBorderMode.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glConvolutionParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void ConvolutionParameter(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.ConvolutionParameterExt pname, [CountAttribute(Computed = "pname")] Int32* @params) => instance.ConvolutionParameter(target, pname, @params);

        /// <summary>[requires: v3.1 or ARB_copy_buffer|VERSION_3_1]
        /// Copy part of the data store of a buffer object to the data store of another buffer object
        /// </summary>
        /// <param name="readTarget">
        /// Specifies the target from whose data store data should be read.
        /// </param>
        /// <param name="writeTarget">
        /// Specifies the target to whose data store data should be written.
        /// </param>
        /// <param name="readOffset">
        /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
        /// </param>
        /// <param name="writeOffset">
        /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
        /// </param>
        /// <param name="size">
        /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
        /// </param>
        [AutoGenerated(Category = "ARB_copy_buffer|VERSION_3_1", Version = "3.1", EntryPoint = "glCopyBufferSubData")]
        public static void CopyBufferSubData(OpenToolkit.OpenGL.BufferTarget readTarget, OpenToolkit.OpenGL.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, Int32 size) => instance.CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);

        /// <summary>[requires: v3.1 or ARB_copy_buffer|VERSION_3_1]
        /// Copy part of the data store of a buffer object to the data store of another buffer object
        /// </summary>
        /// <param name="readTarget">
        /// Specifies the target from whose data store data should be read.
        /// </param>
        /// <param name="writeTarget">
        /// Specifies the target to whose data store data should be written.
        /// </param>
        /// <param name="readOffset">
        /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
        /// </param>
        /// <param name="writeOffset">
        /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
        /// </param>
        /// <param name="size">
        /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
        /// </param>
        [AutoGenerated(Category = "ARB_copy_buffer|VERSION_3_1", Version = "3.1", EntryPoint = "glCopyBufferSubData")]
        public static void CopyBufferSubData(OpenToolkit.OpenGL.BufferTarget readTarget, OpenToolkit.OpenGL.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size) => instance.CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);

        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="start">
        /// The starting index of the portion of the color table to be replaced.
        /// </param>
        /// <param name="x">
        /// The window coordinates of the left corner of the row of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// The window coordinates of the left corner of the row of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// The number of table entries to replace.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyColorSubTable")]
        public static void CopyColorSubTable(OpenToolkit.OpenGL.ColorTableTarget target, Int32 start, Int32 x, Int32 y, Int32 width) => instance.CopyColorSubTable(target, start, x, y, width);

        /// <summary>
        /// Copy pixels into a color table
        /// </summary>
        /// <param name="target">
        /// The color table target. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="internalformat">
        /// The internal storage format of the texture image. Must be one of the following symbolic constants: Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="x">
        /// The x coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.
        /// </param>
        /// <param name="y">
        /// The y coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.
        /// </param>
        /// <param name="width">
        /// The width of the pixel rectangle.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyColorTable")]
        public static void CopyColorTable(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 x, Int32 y, Int32 width) => instance.CopyColorTable(target, internalformat, x, y, width);

        /// <summary>
        /// Copy pixels into a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution1D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="x">
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </param>
        /// <param name="y">
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array to copy.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyConvolutionFilter1D")]
        public static void CopyConvolutionFilter1D(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 x, Int32 y, Int32 width) => instance.CopyConvolutionFilter1D(target, internalformat, x, y, width);

        /// <summary>
        /// Copy pixels into a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Convolution2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="x">
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </param>
        /// <param name="y">
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </param>
        /// <param name="width">
        /// The width of the pixel array to copy.
        /// </param>
        /// <param name="height">
        /// The height of the pixel array to copy.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glCopyConvolutionFilter2D")]
        public static void CopyConvolutionFilter2D(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height) => instance.CopyConvolutionFilter2D(target, internalformat, x, y, width, height);

        /// <summary>[requires: v4.3 or ARB_copy_image|VERSION_4_3]
        /// Perform a raw data copy between two images
        /// </summary>
        /// <param name="srcName">
        /// The name of a texture or renderbuffer object from which to copy.
        /// </param>
        /// <param name="srcTarget">
        /// The target representing the namespace of the source name srcName.
        /// </param>
        /// <param name="srcLevel">
        /// The mipmap level to read from the source.
        /// </param>
        /// <param name="srcX">
        /// The X coordinate of the left edge of the souce region to copy.
        /// </param>
        /// <param name="srcY">
        /// The Y coordinate of the top edge of the souce region to copy.
        /// </param>
        /// <param name="srcZ">
        /// The Z coordinate of the near edge of the souce region to copy.
        /// </param>
        /// <param name="dstName">
        /// The name of a texture or renderbuffer object to which to copy.
        /// </param>
        /// <param name="dstTarget">
        /// The target representing the namespace of the destination name dstName.
        /// </param>
        /// <param name="dstLevel">
        /// The X coordinate of the left edge of the destination region.
        /// </param>
        /// <param name="dstX">
        /// The X coordinate of the left edge of the destination region.
        /// </param>
        /// <param name="dstY">
        /// The Y coordinate of the top edge of the destination region.
        /// </param>
        /// <param name="dstZ">
        /// The Z coordinate of the near edge of the destination region.
        /// </param>
        /// <param name="srcWidth">
        /// The width of the region to be copied.
        /// </param>
        /// <param name="srcHeight">
        /// The height of the region to be copied.
        /// </param>
        /// <param name="srcDepth">
        /// The depth of the region to be copied.
        /// </param>
        [AutoGenerated(Category = "ARB_copy_image|VERSION_4_3", Version = "4.3", EntryPoint = "glCopyImageSubData")]
        [CLSCompliant(false)]
        public static void CopyImageSubData(Int32 srcName, OpenToolkit.OpenGL.ImageTarget srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, Int32 dstName, OpenToolkit.OpenGL.ImageTarget dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth) => instance.CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);

        /// <summary>[requires: v4.3 or ARB_copy_image|VERSION_4_3]
        /// Perform a raw data copy between two images
        /// </summary>
        /// <param name="srcName">
        /// The name of a texture or renderbuffer object from which to copy.
        /// </param>
        /// <param name="srcTarget">
        /// The target representing the namespace of the source name srcName.
        /// </param>
        /// <param name="srcLevel">
        /// The mipmap level to read from the source.
        /// </param>
        /// <param name="srcX">
        /// The X coordinate of the left edge of the souce region to copy.
        /// </param>
        /// <param name="srcY">
        /// The Y coordinate of the top edge of the souce region to copy.
        /// </param>
        /// <param name="srcZ">
        /// The Z coordinate of the near edge of the souce region to copy.
        /// </param>
        /// <param name="dstName">
        /// The name of a texture or renderbuffer object to which to copy.
        /// </param>
        /// <param name="dstTarget">
        /// The target representing the namespace of the destination name dstName.
        /// </param>
        /// <param name="dstLevel">
        /// The X coordinate of the left edge of the destination region.
        /// </param>
        /// <param name="dstX">
        /// The X coordinate of the left edge of the destination region.
        /// </param>
        /// <param name="dstY">
        /// The Y coordinate of the top edge of the destination region.
        /// </param>
        /// <param name="dstZ">
        /// The Z coordinate of the near edge of the destination region.
        /// </param>
        /// <param name="srcWidth">
        /// The width of the region to be copied.
        /// </param>
        /// <param name="srcHeight">
        /// The height of the region to be copied.
        /// </param>
        /// <param name="srcDepth">
        /// The depth of the region to be copied.
        /// </param>
        [AutoGenerated(Category = "ARB_copy_image|VERSION_4_3", Version = "4.3", EntryPoint = "glCopyImageSubData")]
        [CLSCompliant(false)]
        public static void CopyImageSubData(UInt32 srcName, OpenToolkit.OpenGL.ImageTarget srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, UInt32 dstName, OpenToolkit.OpenGL.ImageTarget dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth) => instance.CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="readBuffer"></param>
        /// <param name="writeBuffer"></param>
        /// <param name="readOffset"></param>
        /// <param name="writeOffset"></param>
        /// <param name="size"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCopyNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void CopyNamedBufferSubData(Int32 readBuffer, Int32 writeBuffer, IntPtr readOffset, IntPtr writeOffset, Int32 size) => instance.CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="readBuffer"></param>
        /// <param name="writeBuffer"></param>
        /// <param name="readOffset"></param>
        /// <param name="writeOffset"></param>
        /// <param name="size"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCopyNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void CopyNamedBufferSubData(Int32 readBuffer, Int32 writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size) => instance.CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="readBuffer"></param>
        /// <param name="writeBuffer"></param>
        /// <param name="readOffset"></param>
        /// <param name="writeOffset"></param>
        /// <param name="size"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCopyNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void CopyNamedBufferSubData(UInt32 readBuffer, UInt32 writeBuffer, IntPtr readOffset, IntPtr writeOffset, Int32 size) => instance.CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="readBuffer"></param>
        /// <param name="writeBuffer"></param>
        /// <param name="readOffset"></param>
        /// <param name="writeOffset"></param>
        /// <param name="size"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCopyNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void CopyNamedBufferSubData(UInt32 readBuffer, UInt32 writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size) => instance.CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Copy pixels in the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the rectangular region of pixels to be copied. Both must be nonnegative.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the rectangular region of pixels to be copied. Both must be nonnegative.
        /// </param>
        /// <param name="type">
        /// Specifies whether color values, depth values, or stencil values are to be copied. Symbolic constants Color, Depth, and Stencil are accepted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCopyPixels")]
        public static void CopyPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelCopyType type) => instance.CopyPixels(x, y, width, height, type);

        /// <summary>[requires: v1.1]
        /// Copy pixels into a 1D texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: CompressedRed, CompressedRg, CompressedRgb, CompressedRgba. CompressedSrgb, CompressedSrgbAlpha. DepthComponent, DepthComponent16, DepthComponent24, DepthComponent32, StencilIndex8, Red, Rg, Rgb, R3G3B2, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, Rgba16, Srgb, Srgb8, SrgbAlpha, or Srgb8Alpha8.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the left corner of the row of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the left corner of the row of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. The height of the texture image is 1.
        /// </param>
        /// <param name="border">
        /// Must be 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexImage1D")]
        public static void CopyTexImage1D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 border) => instance.CopyTexImage1D(target, level, internalformat, x, y, width, border);

        /// <summary>[requires: v1.1]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: CompressedRed, CompressedRg, CompressedRgb, CompressedRgba. CompressedSrgb, CompressedSrgbAlpha. DepthComponent, DepthComponent16, DepthComponent24, DepthComponent32, StencilIndex8, Red, Rg, Rgb, R3G3B2, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, Rgba16, Srgb, Srgb8, SrgbAlpha, or Srgb8Alpha8.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image.
        /// </param>
        /// <param name="border">
        /// Must be 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexImage2D")]
        public static void CopyTexImage2D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border) => instance.CopyTexImage2D(target, level, internalformat, x, y, width, height, border);

        /// <summary>[requires: v1.1]
        /// Copy a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies the texel offset within the texture array.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the left corner of the row of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the left corner of the row of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexSubImage1D")]
        public static void CopyTexSubImage1D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width) => instance.CopyTexSubImage1D(target, level, xoffset, x, y, width);

        /// <summary>[requires: v1.1]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or Texture1DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexSubImage2D")]
        public static void CopyTexSubImage2D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height) => instance.CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);

        /// <summary>[requires: v1.2]
        /// Copy a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="x">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glCopyTexSubImage3D")]
        public static void CopyTexSubImage3D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height) => instance.CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCopyTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void CopyTextureSubImage1D(Int32 texture, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width) => instance.CopyTextureSubImage1D(texture, level, xoffset, x, y, width);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCopyTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void CopyTextureSubImage1D(UInt32 texture, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width) => instance.CopyTextureSubImage1D(texture, level, xoffset, x, y, width);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCopyTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void CopyTextureSubImage2D(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height) => instance.CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCopyTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void CopyTextureSubImage2D(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height) => instance.CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCopyTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void CopyTextureSubImage3D(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height) => instance.CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCopyTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void CopyTextureSubImage3D(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height) => instance.CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="buffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateBuffers")]
        [CLSCompliant(false)]
        public static void CreateBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] buffers) => instance.CreateBuffers(n, buffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="buffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateBuffers")]
        [CLSCompliant(false)]
        public static void CreateBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 buffers) => instance.CreateBuffers(n, out buffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="buffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateBuffers")]
        [CLSCompliant(false)]
        public static unsafe void CreateBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* buffers) => instance.CreateBuffers(n, buffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="buffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateBuffers")]
        [CLSCompliant(false)]
        public static void CreateBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] buffers) => instance.CreateBuffers(n, buffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="buffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateBuffers")]
        [CLSCompliant(false)]
        public static void CreateBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 buffers) => instance.CreateBuffers(n, out buffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="buffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateBuffers")]
        [CLSCompliant(false)]
        public static unsafe void CreateBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* buffers) => instance.CreateBuffers(n, buffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="framebuffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateFramebuffers")]
        [CLSCompliant(false)]
        public static void CreateFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] framebuffers) => instance.CreateFramebuffers(n, framebuffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="framebuffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateFramebuffers")]
        [CLSCompliant(false)]
        public static void CreateFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 framebuffers) => instance.CreateFramebuffers(n, out framebuffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="framebuffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void CreateFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* framebuffers) => instance.CreateFramebuffers(n, framebuffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="framebuffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateFramebuffers")]
        [CLSCompliant(false)]
        public static void CreateFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] framebuffers) => instance.CreateFramebuffers(n, framebuffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="framebuffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateFramebuffers")]
        [CLSCompliant(false)]
        public static void CreateFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 framebuffers) => instance.CreateFramebuffers(n, out framebuffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="framebuffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void CreateFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* framebuffers) => instance.CreateFramebuffers(n, framebuffers);

        /// <summary>[requires: v2.0]
        /// Creates a program object
        /// </summary>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCreateProgram")]
        public static Int32 CreateProgram() => instance.CreateProgram();

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="pipelines">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateProgramPipelines")]
        [CLSCompliant(false)]
        public static void CreateProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] pipelines) => instance.CreateProgramPipelines(n, pipelines);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="pipelines">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateProgramPipelines")]
        [CLSCompliant(false)]
        public static void CreateProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 pipelines) => instance.CreateProgramPipelines(n, out pipelines);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="pipelines">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateProgramPipelines")]
        [CLSCompliant(false)]
        public static unsafe void CreateProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* pipelines) => instance.CreateProgramPipelines(n, pipelines);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="pipelines">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateProgramPipelines")]
        [CLSCompliant(false)]
        public static void CreateProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] pipelines) => instance.CreateProgramPipelines(n, pipelines);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="pipelines">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateProgramPipelines")]
        [CLSCompliant(false)]
        public static void CreateProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 pipelines) => instance.CreateProgramPipelines(n, out pipelines);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="pipelines">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateProgramPipelines")]
        [CLSCompliant(false)]
        public static unsafe void CreateProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* pipelines) => instance.CreateProgramPipelines(n, pipelines);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="target"></param>
        /// <param name="n"></param>
        /// <param name="ids">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateQueries")]
        [CLSCompliant(false)]
        public static void CreateQueries(OpenToolkit.OpenGL.QueryTarget target, Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] ids) => instance.CreateQueries(target, n, ids);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="target"></param>
        /// <param name="n"></param>
        /// <param name="ids">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateQueries")]
        [CLSCompliant(false)]
        public static void CreateQueries(OpenToolkit.OpenGL.QueryTarget target, Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 ids) => instance.CreateQueries(target, n, out ids);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="target"></param>
        /// <param name="n"></param>
        /// <param name="ids">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateQueries")]
        [CLSCompliant(false)]
        public static unsafe void CreateQueries(OpenToolkit.OpenGL.QueryTarget target, Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* ids) => instance.CreateQueries(target, n, ids);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="target"></param>
        /// <param name="n"></param>
        /// <param name="ids">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateQueries")]
        [CLSCompliant(false)]
        public static void CreateQueries(OpenToolkit.OpenGL.QueryTarget target, Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] ids) => instance.CreateQueries(target, n, ids);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="target"></param>
        /// <param name="n"></param>
        /// <param name="ids">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateQueries")]
        [CLSCompliant(false)]
        public static void CreateQueries(OpenToolkit.OpenGL.QueryTarget target, Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 ids) => instance.CreateQueries(target, n, out ids);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="target"></param>
        /// <param name="n"></param>
        /// <param name="ids">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateQueries")]
        [CLSCompliant(false)]
        public static unsafe void CreateQueries(OpenToolkit.OpenGL.QueryTarget target, Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* ids) => instance.CreateQueries(target, n, ids);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="renderbuffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateRenderbuffers")]
        [CLSCompliant(false)]
        public static void CreateRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] renderbuffers) => instance.CreateRenderbuffers(n, renderbuffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="renderbuffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateRenderbuffers")]
        [CLSCompliant(false)]
        public static void CreateRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 renderbuffers) => instance.CreateRenderbuffers(n, out renderbuffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="renderbuffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void CreateRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* renderbuffers) => instance.CreateRenderbuffers(n, renderbuffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="renderbuffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateRenderbuffers")]
        [CLSCompliant(false)]
        public static void CreateRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] renderbuffers) => instance.CreateRenderbuffers(n, renderbuffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="renderbuffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateRenderbuffers")]
        [CLSCompliant(false)]
        public static void CreateRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 renderbuffers) => instance.CreateRenderbuffers(n, out renderbuffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="renderbuffers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void CreateRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* renderbuffers) => instance.CreateRenderbuffers(n, renderbuffers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="samplers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateSamplers")]
        [CLSCompliant(false)]
        public static void CreateSamplers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] samplers) => instance.CreateSamplers(n, samplers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="samplers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateSamplers")]
        [CLSCompliant(false)]
        public static void CreateSamplers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 samplers) => instance.CreateSamplers(n, out samplers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="samplers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateSamplers")]
        [CLSCompliant(false)]
        public static unsafe void CreateSamplers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* samplers) => instance.CreateSamplers(n, samplers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="samplers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateSamplers")]
        [CLSCompliant(false)]
        public static void CreateSamplers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] samplers) => instance.CreateSamplers(n, samplers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="samplers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateSamplers")]
        [CLSCompliant(false)]
        public static void CreateSamplers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 samplers) => instance.CreateSamplers(n, out samplers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="samplers">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateSamplers")]
        [CLSCompliant(false)]
        public static unsafe void CreateSamplers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* samplers) => instance.CreateSamplers(n, samplers);

        /// <summary>[requires: v2.0]
        /// Creates a shader object
        /// </summary>
        /// <param name="type">
        /// Specifies the type of shader to be created. Must be one of ComputeShader, VertexShader, TessControlShader, TessEvaluationShader, GeometryShader, or FragmentShader.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCreateShader")]
        public static Int32 CreateShader(OpenToolkit.OpenGL.ShaderType type) => instance.CreateShader(type);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Create a stand-alone program from an array of null-terminated source code strings
        /// </summary>
        /// <param name="type">
        /// Specifies the type of shader to create.
        /// </param>
        /// <param name="count">
        /// Specifies the number of source code strings in the array strings.
        /// </param>
        /// <param name="strings">[length: count]
        /// Specifies the address of an array of pointers to source code strings from which to create the program object.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glCreateShaderProgramv")]
        public static Int32 CreateShaderProgram(OpenToolkit.OpenGL.ShaderType type, Int32 count, [CountAttribute(Parameter = "count")] String[] strings) => instance.CreateShaderProgram(type, count, strings);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="target"></param>
        /// <param name="n"></param>
        /// <param name="textures">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTextures")]
        [CLSCompliant(false)]
        public static void CreateTextures(OpenToolkit.OpenGL.TextureTarget target, Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] textures) => instance.CreateTextures(target, n, textures);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="target"></param>
        /// <param name="n"></param>
        /// <param name="textures">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTextures")]
        [CLSCompliant(false)]
        public static void CreateTextures(OpenToolkit.OpenGL.TextureTarget target, Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 textures) => instance.CreateTextures(target, n, out textures);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="target"></param>
        /// <param name="n"></param>
        /// <param name="textures">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTextures")]
        [CLSCompliant(false)]
        public static unsafe void CreateTextures(OpenToolkit.OpenGL.TextureTarget target, Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* textures) => instance.CreateTextures(target, n, textures);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="target"></param>
        /// <param name="n"></param>
        /// <param name="textures">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTextures")]
        [CLSCompliant(false)]
        public static void CreateTextures(OpenToolkit.OpenGL.TextureTarget target, Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] textures) => instance.CreateTextures(target, n, textures);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="target"></param>
        /// <param name="n"></param>
        /// <param name="textures">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTextures")]
        [CLSCompliant(false)]
        public static void CreateTextures(OpenToolkit.OpenGL.TextureTarget target, Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 textures) => instance.CreateTextures(target, n, out textures);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="target"></param>
        /// <param name="n"></param>
        /// <param name="textures">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTextures")]
        [CLSCompliant(false)]
        public static unsafe void CreateTextures(OpenToolkit.OpenGL.TextureTarget target, Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* textures) => instance.CreateTextures(target, n, textures);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="ids">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void CreateTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] ids) => instance.CreateTransformFeedbacks(n, ids);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="ids">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void CreateTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 ids) => instance.CreateTransformFeedbacks(n, out ids);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="ids">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void CreateTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* ids) => instance.CreateTransformFeedbacks(n, ids);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="ids">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void CreateTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] ids) => instance.CreateTransformFeedbacks(n, ids);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="ids">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void CreateTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 ids) => instance.CreateTransformFeedbacks(n, out ids);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="ids">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void CreateTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* ids) => instance.CreateTransformFeedbacks(n, ids);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="arrays">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateVertexArrays")]
        [CLSCompliant(false)]
        public static void CreateVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] arrays) => instance.CreateVertexArrays(n, arrays);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="arrays">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateVertexArrays")]
        [CLSCompliant(false)]
        public static void CreateVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 arrays) => instance.CreateVertexArrays(n, out arrays);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="arrays">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateVertexArrays")]
        [CLSCompliant(false)]
        public static unsafe void CreateVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* arrays) => instance.CreateVertexArrays(n, arrays);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="arrays">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateVertexArrays")]
        [CLSCompliant(false)]
        public static void CreateVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] arrays) => instance.CreateVertexArrays(n, arrays);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="arrays">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateVertexArrays")]
        [CLSCompliant(false)]
        public static void CreateVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 arrays) => instance.CreateVertexArrays(n, out arrays);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="n"></param>
        /// <param name="arrays">[length: n]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glCreateVertexArrays")]
        [CLSCompliant(false)]
        public static unsafe void CreateVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* arrays) => instance.CreateVertexArrays(n, arrays);

        /// <summary>[requires: v1.0]
        /// Specify whether front- or back-facing facets can be culled
        /// </summary>
        /// <param name="mode">
        /// Specifies whether front- or back-facing facets are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCullFace")]
        public static void CullFace(OpenToolkit.OpenGL.CullFaceMode mode) => instance.CullFace(mode);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback(DebugProc callback, IntPtr userParam) => instance.DebugMessageCallback(callback, userParam);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        [CLSCompliant(false)]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[] userParam)
            where T1 : struct
         => instance.DebugMessageCallback<T1>(callback, userParam);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        [CLSCompliant(false)]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,] userParam)
            where T1 : struct
         => instance.DebugMessageCallback<T1>(callback, userParam);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        [CLSCompliant(false)]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,,] userParam)
            where T1 : struct
         => instance.DebugMessageCallback<T1>(callback, userParam);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback">
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam">
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] ref T1 userParam)
            where T1 : struct
         => instance.DebugMessageCallback<T1>(callback, ref userParam);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenToolkit.OpenGL.DebugSourceControl source, OpenToolkit.OpenGL.DebugTypeControl type, OpenToolkit.OpenGL.DebugSeverityControl severity, Int32 count, [CountAttribute(Parameter = "count")] Int32[] ids, bool enabled) => instance.DebugMessageControl(source, type, severity, count, ids, enabled);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenToolkit.OpenGL.DebugSourceControl source, OpenToolkit.OpenGL.DebugTypeControl type, OpenToolkit.OpenGL.DebugSeverityControl severity, Int32 count, [CountAttribute(Parameter = "count")] ref Int32 ids, bool enabled) => instance.DebugMessageControl(source, type, severity, count, ref ids, enabled);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenToolkit.OpenGL.DebugSourceControl source, OpenToolkit.OpenGL.DebugTypeControl type, OpenToolkit.OpenGL.DebugSeverityControl severity, Int32 count, [CountAttribute(Parameter = "count")] Int32* ids, bool enabled) => instance.DebugMessageControl(source, type, severity, count, ids, enabled);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenToolkit.OpenGL.DebugSourceControl source, OpenToolkit.OpenGL.DebugTypeControl type, OpenToolkit.OpenGL.DebugSeverityControl severity, Int32 count, [CountAttribute(Parameter = "count")] UInt32[] ids, bool enabled) => instance.DebugMessageControl(source, type, severity, count, ids, enabled);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenToolkit.OpenGL.DebugSourceControl source, OpenToolkit.OpenGL.DebugTypeControl type, OpenToolkit.OpenGL.DebugSeverityControl severity, Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 ids, bool enabled) => instance.DebugMessageControl(source, type, severity, count, ref ids, enabled);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source">
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type">
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity">
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count">
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled">
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenToolkit.OpenGL.DebugSourceControl source, OpenToolkit.OpenGL.DebugTypeControl type, OpenToolkit.OpenGL.DebugSeverityControl severity, Int32 count, [CountAttribute(Parameter = "count")] UInt32* ids, bool enabled) => instance.DebugMessageControl(source, type, severity, count, ids, enabled);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type">
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id">
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity">
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length">
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">[length: COMPSIZE(buf,length)]
        /// The address of a character array containing the message to insert.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageInsert")]
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenToolkit.OpenGL.DebugSourceExternal source, OpenToolkit.OpenGL.DebugType type, Int32 id, OpenToolkit.OpenGL.DebugSeverity severity, Int32 length, [CountAttribute(Computed = "buf,length")] String buf) => instance.DebugMessageInsert(source, type, id, severity, length, buf);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source">
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type">
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id">
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity">
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length">
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">[length: COMPSIZE(buf,length)]
        /// The address of a character array containing the message to insert.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glDebugMessageInsert")]
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenToolkit.OpenGL.DebugSourceExternal source, OpenToolkit.OpenGL.DebugType type, UInt32 id, OpenToolkit.OpenGL.DebugSeverity severity, Int32 length, [CountAttribute(Computed = "buf,length")] String buf) => instance.DebugMessageInsert(source, type, id, severity, length, buf);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="buffers">[length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffer([CountAttribute(Parameter = "n")] Int32 buffers) => instance.DeleteBuffer(buffers);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="buffers">[length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffer([CountAttribute(Parameter = "n")] UInt32 buffers) => instance.DeleteBuffer(buffers);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, [CountAttribute(Parameter = "n")] Int32[] buffers) => instance.DeleteBuffers(n, buffers);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 buffers) => instance.DeleteBuffers(n, ref buffers);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteBuffers(Int32 n, [CountAttribute(Parameter = "n")] Int32* buffers) => instance.DeleteBuffers(n, buffers);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] buffers) => instance.DeleteBuffers(n, buffers);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 buffers) => instance.DeleteBuffers(n, ref buffers);

        /// <summary>[requires: v1.5]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteBuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32* buffers) => instance.DeleteBuffers(n, buffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="framebuffers">[length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffer([CountAttribute(Parameter = "n")] Int32 framebuffers) => instance.DeleteFramebuffer(framebuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="framebuffers">[length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffer([CountAttribute(Parameter = "n")] UInt32 framebuffers) => instance.DeleteFramebuffer(framebuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, [CountAttribute(Parameter = "n")] Int32[] framebuffers) => instance.DeleteFramebuffers(n, framebuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 framebuffers) => instance.DeleteFramebuffers(n, ref framebuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteFramebuffers(Int32 n, [CountAttribute(Parameter = "n")] Int32* framebuffers) => instance.DeleteFramebuffers(n, framebuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] framebuffers) => instance.DeleteFramebuffers(n, framebuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 framebuffers) => instance.DeleteFramebuffers(n, ref framebuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete framebuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// A pointer to an array containing n framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteFramebuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32* framebuffers) => instance.DeleteFramebuffers(n, framebuffers);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Delete a contiguous group of display lists
        /// </summary>
        /// <param name="list">
        /// Specifies the integer name of the first display list to delete.
        /// </param>
        /// <param name="range">
        /// Specifies the number of display lists to delete.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDeleteLists")]
        [CLSCompliant(false)]
        public static void DeleteLists(Int32 list, Int32 range) => instance.DeleteLists(list, range);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Delete a contiguous group of display lists
        /// </summary>
        /// <param name="list">
        /// Specifies the integer name of the first display list to delete.
        /// </param>
        /// <param name="range">
        /// Specifies the number of display lists to delete.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDeleteLists")]
        [CLSCompliant(false)]
        public static void DeleteLists(UInt32 list, Int32 range) => instance.DeleteLists(list, range);

        /// <summary>[requires: v2.0]
        /// Deletes a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
        [CLSCompliant(false)]
        public static void DeleteProgram(Int32 program) => instance.DeleteProgram(program);

        /// <summary>[requires: v2.0]
        /// Deletes a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
        [CLSCompliant(false)]
        public static void DeleteProgram(UInt32 program) => instance.DeleteProgram(program);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="pipelines">[length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        [CLSCompliant(false)]
        public static void DeleteProgramPipeline([CountAttribute(Parameter = "n")] Int32 pipelines) => instance.DeleteProgramPipeline(pipelines);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="pipelines">[length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        [CLSCompliant(false)]
        public static void DeleteProgramPipeline([CountAttribute(Parameter = "n")] UInt32 pipelines) => instance.DeleteProgramPipeline(pipelines);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline objects to delete.
        /// </param>
        /// <param name="pipelines">[length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        [CLSCompliant(false)]
        public static void DeleteProgramPipelines(Int32 n, [CountAttribute(Parameter = "n")] Int32[] pipelines) => instance.DeleteProgramPipelines(n, pipelines);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline objects to delete.
        /// </param>
        /// <param name="pipelines">[length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        [CLSCompliant(false)]
        public static void DeleteProgramPipelines(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 pipelines) => instance.DeleteProgramPipelines(n, ref pipelines);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline objects to delete.
        /// </param>
        /// <param name="pipelines">[length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        [CLSCompliant(false)]
        public static unsafe void DeleteProgramPipelines(Int32 n, [CountAttribute(Parameter = "n")] Int32* pipelines) => instance.DeleteProgramPipelines(n, pipelines);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline objects to delete.
        /// </param>
        /// <param name="pipelines">[length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        [CLSCompliant(false)]
        public static void DeleteProgramPipelines(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] pipelines) => instance.DeleteProgramPipelines(n, pipelines);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline objects to delete.
        /// </param>
        /// <param name="pipelines">[length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        [CLSCompliant(false)]
        public static void DeleteProgramPipelines(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 pipelines) => instance.DeleteProgramPipelines(n, ref pipelines);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Delete program pipeline objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline objects to delete.
        /// </param>
        /// <param name="pipelines">[length: n]
        /// Specifies an array of names of program pipeline objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
        [CLSCompliant(false)]
        public static unsafe void DeleteProgramPipelines(Int32 n, [CountAttribute(Parameter = "n")] UInt32* pipelines) => instance.DeleteProgramPipelines(n, pipelines);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="ids">[length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQuery([CountAttribute(Parameter = "n")] Int32 ids) => instance.DeleteQuery(ids);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="ids">[length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQuery([CountAttribute(Parameter = "n")] UInt32 ids) => instance.DeleteQuery(ids);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] Int32[] ids) => instance.DeleteQueries(n, ids);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 ids) => instance.DeleteQueries(n, ref ids);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static unsafe void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] Int32* ids) => instance.DeleteQueries(n, ids);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] ids) => instance.DeleteQueries(n, ids);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 ids) => instance.DeleteQueries(n, ref ids);

        /// <summary>[requires: v1.5]
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query objects to be deleted.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of query objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
        [CLSCompliant(false)]
        public static unsafe void DeleteQueries(Int32 n, [CountAttribute(Parameter = "n")] UInt32* ids) => instance.DeleteQueries(n, ids);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="renderbuffers">[length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffer([CountAttribute(Parameter = "n")] Int32 renderbuffers) => instance.DeleteRenderbuffer(renderbuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="renderbuffers">[length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffer([CountAttribute(Parameter = "n")] UInt32 renderbuffers) => instance.DeleteRenderbuffer(renderbuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, [CountAttribute(Parameter = "n")] Int32[] renderbuffers) => instance.DeleteRenderbuffers(n, renderbuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 renderbuffers) => instance.DeleteRenderbuffers(n, ref renderbuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteRenderbuffers(Int32 n, [CountAttribute(Parameter = "n")] Int32* renderbuffers) => instance.DeleteRenderbuffers(n, renderbuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] renderbuffers) => instance.DeleteRenderbuffers(n, renderbuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 renderbuffers) => instance.DeleteRenderbuffers(n, ref renderbuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Delete renderbuffer objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// A pointer to an array containing n renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteRenderbuffers(Int32 n, [CountAttribute(Parameter = "n")] UInt32* renderbuffers) => instance.DeleteRenderbuffers(n, renderbuffers);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="samplers">[length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSampler([CountAttribute(Parameter = "count")] Int32 samplers) => instance.DeleteSampler(samplers);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="samplers">[length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSampler([CountAttribute(Parameter = "count")] UInt32 samplers) => instance.DeleteSampler(samplers);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSamplers(Int32 count, [CountAttribute(Parameter = "count")] Int32[] samplers) => instance.DeleteSamplers(count, samplers);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSamplers(Int32 count, [CountAttribute(Parameter = "count")] ref Int32 samplers) => instance.DeleteSamplers(count, ref samplers);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteSamplers(Int32 count, [CountAttribute(Parameter = "count")] Int32* samplers) => instance.DeleteSamplers(count, samplers);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSamplers(Int32 count, [CountAttribute(Parameter = "count")] UInt32[] samplers) => instance.DeleteSamplers(count, samplers);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static void DeleteSamplers(Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 samplers) => instance.DeleteSamplers(count, ref samplers);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Delete named sampler objects
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler objects to be deleted.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array of sampler objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glDeleteSamplers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteSamplers(Int32 count, [CountAttribute(Parameter = "count")] UInt32* samplers) => instance.DeleteSamplers(count, samplers);

        /// <summary>[requires: v2.0]
        /// Deletes a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
        [CLSCompliant(false)]
        public static void DeleteShader(Int32 shader) => instance.DeleteShader(shader);

        /// <summary>[requires: v2.0]
        /// Deletes a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
        [CLSCompliant(false)]
        public static void DeleteShader(UInt32 shader) => instance.DeleteShader(shader);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Delete a sync object
        /// </summary>
        /// <param name="sync">
        /// The sync object to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glDeleteSync")]
        public static void DeleteSync(IntPtr sync) => instance.DeleteSync(sync);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="textures">[length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTexture([CountAttribute(Parameter = "n")] Int32 textures) => instance.DeleteTexture(textures);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="textures">[length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTexture([CountAttribute(Parameter = "n")] UInt32 textures) => instance.DeleteTexture(textures);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, [CountAttribute(Parameter = "n")] Int32[] textures) => instance.DeleteTextures(n, textures);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 textures) => instance.DeleteTextures(n, ref textures);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTextures(Int32 n, [CountAttribute(Parameter = "n")] Int32* textures) => instance.DeleteTextures(n, textures);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] textures) => instance.DeleteTextures(n, textures);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 textures) => instance.DeleteTextures(n, ref textures);

        /// <summary>[requires: v1.1]
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTextures(Int32 n, [CountAttribute(Parameter = "n")] UInt32* textures) => instance.DeleteTextures(n, textures);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="ids">[length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedback([CountAttribute(Parameter = "n")] Int32 ids) => instance.DeleteTransformFeedback(ids);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="ids">[length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedback([CountAttribute(Parameter = "n")] UInt32 ids) => instance.DeleteTransformFeedback(ids);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedbacks(Int32 n, [CountAttribute(Parameter = "n")] Int32[] ids) => instance.DeleteTransformFeedbacks(n, ids);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedbacks(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 ids) => instance.DeleteTransformFeedbacks(n, ref ids);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTransformFeedbacks(Int32 n, [CountAttribute(Parameter = "n")] Int32* ids) => instance.DeleteTransformFeedbacks(n, ids);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedbacks(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] ids) => instance.DeleteTransformFeedbacks(n, ids);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void DeleteTransformFeedbacks(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 ids) => instance.DeleteTransformFeedbacks(n, ref ids);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Delete transform feedback objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback objects to delete.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of names of transform feedback objects to delete.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDeleteTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTransformFeedbacks(Int32 n, [CountAttribute(Parameter = "n")] UInt32* ids) => instance.DeleteTransformFeedbacks(n, ids);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="arrays">[length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArray([CountAttribute(Parameter = "n")] Int32 arrays) => instance.DeleteVertexArray(arrays);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="arrays">[length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArray([CountAttribute(Parameter = "n")] UInt32 arrays) => instance.DeleteVertexArray(arrays);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array objects to be deleted.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] Int32[] arrays) => instance.DeleteVertexArrays(n, arrays);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array objects to be deleted.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 arrays) => instance.DeleteVertexArrays(n, ref arrays);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array objects to be deleted.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static unsafe void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] Int32* arrays) => instance.DeleteVertexArrays(n, arrays);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array objects to be deleted.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] arrays) => instance.DeleteVertexArrays(n, arrays);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array objects to be deleted.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 arrays) => instance.DeleteVertexArrays(n, ref arrays);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Delete vertex array objects
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array objects to be deleted.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies the address of an array containing the n names of the objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        [CLSCompliant(false)]
        public static unsafe void DeleteVertexArrays(Int32 n, [CountAttribute(Parameter = "n")] UInt32* arrays) => instance.DeleteVertexArrays(n, arrays);

        /// <summary>[requires: v1.0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func">
        /// Specifies the depth comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Less.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthFunc")]
        public static void DepthFunc(OpenToolkit.OpenGL.DepthFunction func) => instance.DepthFunc(func);

        /// <summary>[requires: v1.0]
        /// Enable or disable writing into the depth buffer
        /// </summary>
        /// <param name="flag">
        /// Specifies whether the depth buffer is enabled for writing. If flag is False, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthMask")]
        public static void DepthMask(bool flag) => instance.DepthMask(flag);

        /// <summary>[requires: v1.0]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="near">
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="far">
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthRange")]
        public static void DepthRange(Double near, Double far) => instance.DepthRange(near, far);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose depth range to update.
        /// </param>
        /// <param name="count">
        /// Specifies the number of viewports whose depth range to update.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        [CLSCompliant(false)]
        public static void DepthRangeArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] Double[] v) => instance.DepthRangeArray(first, count, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose depth range to update.
        /// </param>
        /// <param name="count">
        /// Specifies the number of viewports whose depth range to update.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        [CLSCompliant(false)]
        public static void DepthRangeArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] ref Double v) => instance.DepthRangeArray(first, count, ref v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose depth range to update.
        /// </param>
        /// <param name="count">
        /// Specifies the number of viewports whose depth range to update.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        [CLSCompliant(false)]
        public static unsafe void DepthRangeArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] Double* v) => instance.DepthRangeArray(first, count, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose depth range to update.
        /// </param>
        /// <param name="count">
        /// Specifies the number of viewports whose depth range to update.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        [CLSCompliant(false)]
        public static void DepthRangeArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Double[] v) => instance.DepthRangeArray(first, count, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose depth range to update.
        /// </param>
        /// <param name="count">
        /// Specifies the number of viewports whose depth range to update.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        [CLSCompliant(false)]
        public static void DepthRangeArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] ref Double v) => instance.DepthRangeArray(first, count, ref v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose depth range to update.
        /// </param>
        /// <param name="count">
        /// Specifies the number of viewports whose depth range to update.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specifies the address of an array containing the near and far values for the depth range of each modified viewport.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
        [CLSCompliant(false)]
        public static unsafe void DepthRangeArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Double* v) => instance.DepthRangeArray(first, count, v);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="n">
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="f">
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangef")]
        public static void DepthRange(Single n, Single f) => instance.DepthRange(n, f);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose depth range to update.
        /// </param>
        /// <param name="n">
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="f">
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeIndexed")]
        [CLSCompliant(false)]
        public static void DepthRangeIndexed(Int32 index, Double n, Double f) => instance.DepthRangeIndexed(index, n, f);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose depth range to update.
        /// </param>
        /// <param name="n">
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="f">
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glDepthRangeIndexed")]
        [CLSCompliant(false)]
        public static void DepthRangeIndexed(UInt32 index, Double n, Double f) => instance.DepthRangeIndexed(index, n, f);

        /// <summary>[requires: v2.0]
        /// Detaches a shader object from a program object to which it is attached
        /// </summary>
        /// <param name="program">
        /// Specifies the program object from which to detach the shader object.
        /// </param>
        /// <param name="shader">
        /// Specifies the shader object to be detached.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
        [CLSCompliant(false)]
        public static void DetachShader(Int32 program, Int32 shader) => instance.DetachShader(program, shader);

        /// <summary>[requires: v2.0]
        /// Detaches a shader object from a program object to which it is attached
        /// </summary>
        /// <param name="program">
        /// Specifies the program object from which to detach the shader object.
        /// </param>
        /// <param name="shader">
        /// Specifies the shader object to be detached.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
        [CLSCompliant(false)]
        public static void DetachShader(UInt32 program, UInt32 shader) => instance.DetachShader(program, shader);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="cap"></param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDisable")]
        public static void Disable(OpenToolkit.OpenGL.EnableCap cap) => instance.Disable(cap);

        /// <summary>[requires: v1.1][deprecated: v3.2]</summary>
        /// <param name="array"></param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDisableClientState")]
        public static void DisableClientState(OpenToolkit.OpenGL.ArrayCap array) => instance.DisableClientState(array);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glDisablei")]
        [CLSCompliant(false)]
        public static void Disable(OpenToolkit.OpenGL.IndexedEnableCap target, Int32 index) => instance.Disable(target, index);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glDisablei")]
        [CLSCompliant(false)]
        public static void Disable(OpenToolkit.OpenGL.IndexedEnableCap target, UInt32 index) => instance.Disable(target, index);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glDisableVertexArrayAttrib")]
        [CLSCompliant(false)]
        public static void DisableVertexArrayAttrib(Int32 vaobj, Int32 index) => instance.DisableVertexArrayAttrib(vaobj, index);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glDisableVertexArrayAttrib")]
        [CLSCompliant(false)]
        public static void DisableVertexArrayAttrib(UInt32 vaobj, UInt32 index) => instance.DisableVertexArrayAttrib(vaobj, index);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void DisableVertexAttribArray(Int32 index) => instance.DisableVertexAttribArray(index);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void DisableVertexAttribArray(UInt32 index) => instance.DisableVertexAttribArray(index);

        /// <summary>[requires: v4.3 or ARB_compute_shader|VERSION_4_3]
        /// Launch one or more compute work groups
        /// </summary>
        /// <param name="num_groups_x">
        /// The number of work groups to be launched in the X dimension.
        /// </param>
        /// <param name="num_groups_y">
        /// The number of work groups to be launched in the Y dimension.
        /// </param>
        /// <param name="num_groups_z">
        /// The number of work groups to be launched in the Z dimension.
        /// </param>
        [AutoGenerated(Category = "ARB_compute_shader|VERSION_4_3", Version = "4.3", EntryPoint = "glDispatchCompute")]
        [CLSCompliant(false)]
        public static void DispatchCompute(Int32 num_groups_x, Int32 num_groups_y, Int32 num_groups_z) => instance.DispatchCompute(num_groups_x, num_groups_y, num_groups_z);

        /// <summary>[requires: v4.3 or ARB_compute_shader|VERSION_4_3]
        /// Launch one or more compute work groups
        /// </summary>
        /// <param name="num_groups_x">
        /// The number of work groups to be launched in the X dimension.
        /// </param>
        /// <param name="num_groups_y">
        /// The number of work groups to be launched in the Y dimension.
        /// </param>
        /// <param name="num_groups_z">
        /// The number of work groups to be launched in the Z dimension.
        /// </param>
        [AutoGenerated(Category = "ARB_compute_shader|VERSION_4_3", Version = "4.3", EntryPoint = "glDispatchCompute")]
        [CLSCompliant(false)]
        public static void DispatchCompute(UInt32 num_groups_x, UInt32 num_groups_y, UInt32 num_groups_z) => instance.DispatchCompute(num_groups_x, num_groups_y, num_groups_z);

        /// <summary>[requires: v4.3 or ARB_compute_shader|VERSION_4_3]
        /// Launch one or more compute work groups using parameters stored in a buffer
        /// </summary>
        /// <param name="indirect">
        /// The offset into the buffer object currently bound to the DispatchIndirectBuffer buffer target at which the dispatch parameters are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_compute_shader|VERSION_4_3", Version = "4.3", EntryPoint = "glDispatchComputeIndirect")]
        public static void DispatchComputeIndirect(IntPtr indirect) => instance.DispatchComputeIndirect(indirect);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawArrays")]
        public static void DrawArrays(OpenToolkit.OpenGL.BeginMode mode, Int32 first, Int32 count) => instance.DrawArrays(mode, first, count);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawArrays")]
        public static void DrawArrays(OpenToolkit.OpenGL.PrimitiveType mode, Int32 first, Int32 count) => instance.DrawArrays(mode, first, count);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        public static void DrawArraysIndirect(OpenToolkit.OpenGL.ArbDrawIndirect mode, IntPtr indirect) => instance.DrawArraysIndirect(mode, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        [CLSCompliant(false)]
        public static void DrawArraysIndirect<T1>(OpenToolkit.OpenGL.ArbDrawIndirect mode, [InAttribute, OutAttribute] T1[] indirect)
            where T1 : struct
         => instance.DrawArraysIndirect<T1>(mode, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        [CLSCompliant(false)]
        public static void DrawArraysIndirect<T1>(OpenToolkit.OpenGL.ArbDrawIndirect mode, [InAttribute, OutAttribute] T1[,] indirect)
            where T1 : struct
         => instance.DrawArraysIndirect<T1>(mode, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        [CLSCompliant(false)]
        public static void DrawArraysIndirect<T1>(OpenToolkit.OpenGL.ArbDrawIndirect mode, [InAttribute, OutAttribute] T1[,,] indirect)
            where T1 : struct
         => instance.DrawArraysIndirect<T1>(mode, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        public static void DrawArraysIndirect<T1>(OpenToolkit.OpenGL.ArbDrawIndirect mode, [InAttribute, OutAttribute] ref T1 indirect)
            where T1 : struct
         => instance.DrawArraysIndirect<T1>(mode, ref indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        public static void DrawArraysIndirect(OpenToolkit.OpenGL.PrimitiveType mode, IntPtr indirect) => instance.DrawArraysIndirect(mode, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        [CLSCompliant(false)]
        public static void DrawArraysIndirect<T1>(OpenToolkit.OpenGL.PrimitiveType mode, [InAttribute, OutAttribute] T1[] indirect)
            where T1 : struct
         => instance.DrawArraysIndirect<T1>(mode, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        [CLSCompliant(false)]
        public static void DrawArraysIndirect<T1>(OpenToolkit.OpenGL.PrimitiveType mode, [InAttribute, OutAttribute] T1[,] indirect)
            where T1 : struct
         => instance.DrawArraysIndirect<T1>(mode, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        [CLSCompliant(false)]
        public static void DrawArraysIndirect<T1>(OpenToolkit.OpenGL.PrimitiveType mode, [InAttribute, OutAttribute] T1[,,] indirect)
            where T1 : struct
         => instance.DrawArraysIndirect<T1>(mode, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawArraysIndirect")]
        public static void DrawArraysIndirect<T1>(OpenToolkit.OpenGL.PrimitiveType mode, [InAttribute, OutAttribute] ref T1 indirect)
            where T1 : struct
         => instance.DrawArraysIndirect<T1>(mode, ref indirect);

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a range of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawArraysInstanced")]
        public static void DrawArraysInstanced(OpenToolkit.OpenGL.BeginMode mode, Int32 first, Int32 count, Int32 instancecount) => instance.DrawArraysInstanced(mode, first, count, instancecount);

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a range of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawArraysInstanced")]
        public static void DrawArraysInstanced(OpenToolkit.OpenGL.PrimitiveType mode, Int32 first, Int32 count, Int32 instancecount) => instance.DrawArraysInstanced(mode, first, count, instancecount);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a range of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawArraysInstancedBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawArraysInstancedBaseInstance(OpenToolkit.OpenGL.PrimitiveType mode, Int32 first, Int32 count, Int32 instancecount, Int32 baseinstance) => instance.DrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a range of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count">
        /// Specifies the number of indices to be rendered.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawArraysInstancedBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawArraysInstancedBaseInstance(OpenToolkit.OpenGL.PrimitiveType mode, Int32 first, Int32 count, Int32 instancecount, UInt32 baseinstance) => instance.DrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);

        /// <summary>[requires: v1.0]
        /// Specify which color buffers are to be drawn into
        /// </summary>
        /// <param name="buf">
        /// Specifies up to four color buffers to be drawn into. Symbolic constants None, FrontLeft, FrontRight, BackLeft, BackRight, Front, Back, Left, Right, and FrontAndBack are accepted. The initial value is Front for single-buffered contexts, and Back for double-buffered contexts.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawBuffer")]
        public static void DrawBuffer(OpenToolkit.OpenGL.DrawBufferMode buf) => instance.DrawBuffer(buf);

        /// <summary>[requires: v2.0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffers in bufs.
        /// </param>
        /// <param name="bufs">[length: n]
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
        [CLSCompliant(false)]
        public static void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] OpenToolkit.OpenGL.DrawBuffersEnum[] bufs) => instance.DrawBuffers(n, bufs);

        /// <summary>[requires: v2.0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffers in bufs.
        /// </param>
        /// <param name="bufs">[length: n]
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
        [CLSCompliant(false)]
        public static void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] ref OpenToolkit.OpenGL.DrawBuffersEnum bufs) => instance.DrawBuffers(n, ref bufs);

        /// <summary>[requires: v2.0]
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffers in bufs.
        /// </param>
        /// <param name="bufs">[length: n]
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
        [CLSCompliant(false)]
        public static unsafe void DrawBuffers(Int32 n, [CountAttribute(Parameter = "n")] OpenToolkit.OpenGL.DrawBuffersEnum* bufs) => instance.DrawBuffers(n, bufs);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] Int32 indices) => instance.DrawElements(mode, count, type, indices);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices) => instance.DrawElements(mode, count, type, indices);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices)
            where T3 : struct
         => instance.DrawElements<T3>(mode, count, type, indices);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices)
            where T3 : struct
         => instance.DrawElements<T3>(mode, count, type, indices);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices)
            where T3 : struct
         => instance.DrawElements<T3>(mode, count, type, indices);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices)
            where T3 : struct
         => instance.DrawElements<T3>(mode, count, type, ref indices);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] Int32 indices) => instance.DrawElements(mode, count, type, indices);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices) => instance.DrawElements(mode, count, type, indices);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices)
            where T3 : struct
         => instance.DrawElements<T3>(mode, count, type, indices);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices)
            where T3 : struct
         => instance.DrawElements<T3>(mode, count, type, indices);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices)
            where T3 : struct
         => instance.DrawElements<T3>(mode, count, type, indices);

        /// <summary>[requires: v1.1]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices)
            where T3 : struct
         => instance.DrawElements<T3>(mode, count, type, ref indices);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static void DrawElementsBaseVertex(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) => instance.DrawElementsBaseVertex(mode, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsBaseVertex<T3>(mode, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsBaseVertex<T3>(mode, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsBaseVertex<T3>(mode, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static void DrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsBaseVertex<T3>(mode, count, type, ref indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static void DrawElementsBaseVertex(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) => instance.DrawElementsBaseVertex(mode, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsBaseVertex<T3>(mode, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsBaseVertex<T3>(mode, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsBaseVertex<T3>(mode, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsBaseVertex")]
        public static void DrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsBaseVertex<T3>(mode, count, type, ref indices, basevertex);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        public static void DrawElementsIndirect(OpenToolkit.OpenGL.ArbDrawIndirect mode, OpenToolkit.OpenGL.ArbDrawIndirect type, IntPtr indirect) => instance.DrawElementsIndirect(mode, type, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        [CLSCompliant(false)]
        public static void DrawElementsIndirect<T2>(OpenToolkit.OpenGL.ArbDrawIndirect mode, OpenToolkit.OpenGL.ArbDrawIndirect type, [InAttribute, OutAttribute] T2[] indirect)
            where T2 : struct
         => instance.DrawElementsIndirect<T2>(mode, type, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        [CLSCompliant(false)]
        public static void DrawElementsIndirect<T2>(OpenToolkit.OpenGL.ArbDrawIndirect mode, OpenToolkit.OpenGL.ArbDrawIndirect type, [InAttribute, OutAttribute] T2[,] indirect)
            where T2 : struct
         => instance.DrawElementsIndirect<T2>(mode, type, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        [CLSCompliant(false)]
        public static void DrawElementsIndirect<T2>(OpenToolkit.OpenGL.ArbDrawIndirect mode, OpenToolkit.OpenGL.ArbDrawIndirect type, [InAttribute, OutAttribute] T2[,,] indirect)
            where T2 : struct
         => instance.DrawElementsIndirect<T2>(mode, type, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        public static void DrawElementsIndirect<T2>(OpenToolkit.OpenGL.ArbDrawIndirect mode, OpenToolkit.OpenGL.ArbDrawIndirect type, [InAttribute, OutAttribute] ref T2 indirect)
            where T2 : struct
         => instance.DrawElementsIndirect<T2>(mode, type, ref indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        public static void DrawElementsIndirect(OpenToolkit.OpenGL.PrimitiveType mode, OpenToolkit.OpenGL.DrawElementsType type, IntPtr indirect) => instance.DrawElementsIndirect(mode, type, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        [CLSCompliant(false)]
        public static void DrawElementsIndirect<T2>(OpenToolkit.OpenGL.PrimitiveType mode, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T2[] indirect)
            where T2 : struct
         => instance.DrawElementsIndirect<T2>(mode, type, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        [CLSCompliant(false)]
        public static void DrawElementsIndirect<T2>(OpenToolkit.OpenGL.PrimitiveType mode, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T2[,] indirect)
            where T2 : struct
         => instance.DrawElementsIndirect<T2>(mode, type, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        [CLSCompliant(false)]
        public static void DrawElementsIndirect<T2>(OpenToolkit.OpenGL.PrimitiveType mode, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T2[,,] indirect)
            where T2 : struct
         => instance.DrawElementsIndirect<T2>(mode, type, indirect);

        /// <summary>[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">
        /// Specifies the address of a structure containing the draw parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_indirect|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawElementsIndirect")]
        public static void DrawElementsIndirect<T2>(OpenToolkit.OpenGL.PrimitiveType mode, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T2 indirect)
            where T2 : struct
         => instance.DrawElementsIndirect<T2>(mode, type, ref indirect);

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 instancecount) => instance.DrawElementsInstanced(mode, count, type, indices, instancecount);

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        [CLSCompliant(false)]
        public static void DrawElementsInstanced<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices, Int32 instancecount)
            where T3 : struct
         => instance.DrawElementsInstanced<T3>(mode, count, type, indices, instancecount);

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        [CLSCompliant(false)]
        public static void DrawElementsInstanced<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices, Int32 instancecount)
            where T3 : struct
         => instance.DrawElementsInstanced<T3>(mode, count, type, indices, instancecount);

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        [CLSCompliant(false)]
        public static void DrawElementsInstanced<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices, Int32 instancecount)
            where T3 : struct
         => instance.DrawElementsInstanced<T3>(mode, count, type, indices, instancecount);

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices, Int32 instancecount)
            where T3 : struct
         => instance.DrawElementsInstanced<T3>(mode, count, type, ref indices, instancecount);

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 instancecount) => instance.DrawElementsInstanced(mode, count, type, indices, instancecount);

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        [CLSCompliant(false)]
        public static void DrawElementsInstanced<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices, Int32 instancecount)
            where T3 : struct
         => instance.DrawElementsInstanced<T3>(mode, count, type, indices, instancecount);

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        [CLSCompliant(false)]
        public static void DrawElementsInstanced<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices, Int32 instancecount)
            where T3 : struct
         => instance.DrawElementsInstanced<T3>(mode, count, type, indices, instancecount);

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        [CLSCompliant(false)]
        public static void DrawElementsInstanced<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices, Int32 instancecount)
            where T3 : struct
         => instance.DrawElementsInstanced<T3>(mode, count, type, indices, instancecount);

        /// <summary>[requires: v3.1]
        /// Draw multiple instances of a set of elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
        public static void DrawElementsInstanced<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices, Int32 instancecount)
            where T3 : struct
         => instance.DrawElementsInstanced<T3>(mode, count, type, ref indices, instancecount);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseInstance(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, Int32 baseinstance) => instance.DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseInstance(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, UInt32 baseinstance) => instance.DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[] indices, Int32 instancecount, Int32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseInstance<T3>(mode, count, type, indices, instancecount, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[] indices, Int32 instancecount, UInt32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseInstance<T3>(mode, count, type, indices, instancecount, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[,] indices, Int32 instancecount, Int32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseInstance<T3>(mode, count, type, indices, instancecount, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[,] indices, Int32 instancecount, UInt32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseInstance<T3>(mode, count, type, indices, instancecount, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[,,] indices, Int32 instancecount, Int32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseInstance<T3>(mode, count, type, indices, instancecount, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[,,] indices, Int32 instancecount, UInt32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseInstance<T3>(mode, count, type, indices, instancecount, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] ref T3 indices, Int32 instancecount, Int32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseInstance<T3>(mode, count, type, ref indices, instancecount, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Draw multiple instances of a set of elements with offset applied to instanced attributes
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the specified range of indices to be rendered.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] ref T3 indices, Int32 instancecount, UInt32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseInstance<T3>(mode, count, type, ref indices, instancecount, baseinstance);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static void DrawElementsInstancedBaseVertex(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 instancecount, Int32 basevertex) => instance.DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices, Int32 instancecount, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertex<T3>(mode, count, type, indices, instancecount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices, Int32 instancecount, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertex<T3>(mode, count, type, indices, instancecount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices, Int32 instancecount, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertex<T3>(mode, count, type, indices, instancecount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static void DrawElementsInstancedBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices, Int32 instancecount, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertex<T3>(mode, count, type, ref indices, instancecount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static void DrawElementsInstancedBaseVertex(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 instancecount, Int32 basevertex) => instance.DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[] indices, Int32 instancecount, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertex<T3>(mode, count, type, indices, instancecount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,] indices, Int32 instancecount, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertex<T3>(mode, count, type, indices, instancecount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T3[,,] indices, Int32 instancecount, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertex<T3>(mode, count, type, indices, instancecount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
        public static void DrawElementsInstancedBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T3 indices, Int32 instancecount, Int32 basevertex)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertex<T3>(mode, count, type, ref indices, instancecount, basevertex);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertexBaseInstance(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, Int32 basevertex, Int32 baseinstance) => instance.DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertexBaseInstance(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Parameter = "count")] IntPtr indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance) => instance.DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[] indices, Int32 instancecount, Int32 basevertex, Int32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertexBaseInstance<T3>(mode, count, type, indices, instancecount, basevertex, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[] indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertexBaseInstance<T3>(mode, count, type, indices, instancecount, basevertex, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[,] indices, Int32 instancecount, Int32 basevertex, Int32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertexBaseInstance<T3>(mode, count, type, indices, instancecount, basevertex, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[,] indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertexBaseInstance<T3>(mode, count, type, indices, instancecount, basevertex, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[,,] indices, Int32 instancecount, Int32 basevertex, Int32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertexBaseInstance<T3>(mode, count, type, indices, instancecount, basevertex, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] T3[,,] indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertexBaseInstance<T3>(mode, count, type, indices, instancecount, basevertex, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] ref T3 indices, Int32 instancecount, Int32 basevertex, Int32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertexBaseInstance<T3>(mode, count, type, ref indices, instancecount, basevertex, baseinstance);

        /// <summary>[requires: v4.2 or ARB_base_instance|VERSION_4_2]
        /// Render multiple instances of a set of primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the indexed geometry that should be drawn.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        /// <param name="baseinstance">
        /// Specifies the base instance for use in fetching instanced vertex attributes.
        /// </param>
        [AutoGenerated(Category = "ARB_base_instance|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawElementsInstancedBaseVertexBaseInstance")]
        [CLSCompliant(false)]
        public static void DrawElementsInstancedBaseVertexBaseInstance<T3>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Parameter = "count")] ref T3 indices, Int32 instancecount, Int32 basevertex, UInt32 baseinstance)
            where T3 : struct
         => instance.DrawElementsInstancedBaseVertexBaseInstance<T3>(mode, count, type, ref indices, instancecount, basevertex, baseinstance);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Write a block of pixels to the frame buffer
        /// </summary>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. Symbolic constants ColorIndex, StencilIndex, DepthComponent, Rgb, Bgr, Rgba, Bgra, Red, Green, Blue, Alpha, Luminance, and LuminanceAlpha are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the data type for data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static void DrawPixels(Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) => instance.DrawPixels(width, height, format, type, pixels);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Write a block of pixels to the frame buffer
        /// </summary>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. Symbolic constants ColorIndex, StencilIndex, DepthComponent, Rgb, Bgr, Rgba, Bgra, Red, Green, Blue, Alpha, Luminance, and LuminanceAlpha are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the data type for data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawPixels")]
        [CLSCompliant(false)]
        public static void DrawPixels<T4>(Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T4[] pixels)
            where T4 : struct
         => instance.DrawPixels<T4>(width, height, format, type, pixels);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Write a block of pixels to the frame buffer
        /// </summary>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. Symbolic constants ColorIndex, StencilIndex, DepthComponent, Rgb, Bgr, Rgba, Bgra, Red, Green, Blue, Alpha, Luminance, and LuminanceAlpha are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the data type for data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawPixels")]
        [CLSCompliant(false)]
        public static void DrawPixels<T4>(Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T4[,] pixels)
            where T4 : struct
         => instance.DrawPixels<T4>(width, height, format, type, pixels);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Write a block of pixels to the frame buffer
        /// </summary>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. Symbolic constants ColorIndex, StencilIndex, DepthComponent, Rgb, Bgr, Rgba, Bgra, Red, Green, Blue, Alpha, Luminance, and LuminanceAlpha are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the data type for data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawPixels")]
        [CLSCompliant(false)]
        public static void DrawPixels<T4>(Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T4[,,] pixels)
            where T4 : struct
         => instance.DrawPixels<T4>(width, height, format, type, pixels);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Write a block of pixels to the frame buffer
        /// </summary>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. Symbolic constants ColorIndex, StencilIndex, DepthComponent, Rgb, Bgr, Rgba, Bgra, Red, Green, Blue, Alpha, Luminance, and LuminanceAlpha are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the data type for data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static void DrawPixels<T4>(Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T4 pixels)
            where T4 : struct
         => instance.DrawPixels<T4>(width, height, format, type, ref pixels);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenToolkit.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices) => instance.DrawRangeElements(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[] indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,] indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,,] indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T5 indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, ref indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenToolkit.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices) => instance.DrawRangeElements(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[] indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,] indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,,] indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T5 indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, ref indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenToolkit.OpenGL.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices) => instance.DrawRangeElements(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[] indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,] indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,,] indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T5 indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, ref indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements(OpenToolkit.OpenGL.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices) => instance.DrawRangeElements(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[] indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,] indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,,] indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, indices);

        /// <summary>[requires: v1.2]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        [CLSCompliant(false)]
        public static void DrawRangeElements<T5>(OpenToolkit.OpenGL.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T5 indices)
            where T5 : struct
         => instance.DrawRangeElements<T5>(mode, start, end, count, type, ref indices);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex(OpenToolkit.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) => instance.DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[] indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,] indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,,] indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T5 indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, ref indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex(OpenToolkit.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) => instance.DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[] indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,] indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,,] indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T5 indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, ref indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex(OpenToolkit.OpenGL.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) => instance.DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[] indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,] indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,,] indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.PrimitiveType mode, Int32 start, Int32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T5 indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, ref indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex(OpenToolkit.OpenGL.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "count,type")] IntPtr indices, Int32 basevertex) => instance.DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[] indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,] indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] T5[,,] indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, indices, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render primitives from array data with a per-element offset
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
        /// </param>
        /// <param name="start">
        /// Specifies the minimum array index contained in indices.
        /// </param>
        /// <param name="end">
        /// Specifies the maximum array index contained in indices.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(count,type)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="basevertex">
        /// Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void DrawRangeElementsBaseVertex<T5>(OpenToolkit.OpenGL.PrimitiveType mode, UInt32 start, UInt32 end, Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "count,type")] ref T5 indices, Int32 basevertex)
            where T5 : struct
         => instance.DrawRangeElementsBaseVertex<T5>(mode, start, end, count, type, ref indices, basevertex);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Render primitives using a count derived from a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawTransformFeedback")]
        [CLSCompliant(false)]
        public static void DrawTransformFeedback(OpenToolkit.OpenGL.BeginMode mode, Int32 id) => instance.DrawTransformFeedback(mode, id);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Render primitives using a count derived from a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawTransformFeedback")]
        [CLSCompliant(false)]
        public static void DrawTransformFeedback(OpenToolkit.OpenGL.BeginMode mode, UInt32 id) => instance.DrawTransformFeedback(mode, id);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Render primitives using a count derived from a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawTransformFeedback")]
        [CLSCompliant(false)]
        public static void DrawTransformFeedback(OpenToolkit.OpenGL.PrimitiveType mode, Int32 id) => instance.DrawTransformFeedback(mode, id);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Render primitives using a count derived from a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawTransformFeedback")]
        [CLSCompliant(false)]
        public static void DrawTransformFeedback(OpenToolkit.OpenGL.PrimitiveType mode, UInt32 id) => instance.DrawTransformFeedback(mode, id);

        /// <summary>[requires: v4.2 or ARB_transform_feedback_instanced|VERSION_4_2]
        /// Render multiple instances of primitives using a count derived from a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the geometry to render.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback_instanced|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawTransformFeedbackInstanced")]
        [CLSCompliant(false)]
        public static void DrawTransformFeedbackInstanced(OpenToolkit.OpenGL.PrimitiveType mode, Int32 id, Int32 instancecount) => instance.DrawTransformFeedbackInstanced(mode, id, instancecount);

        /// <summary>[requires: v4.2 or ARB_transform_feedback_instanced|VERSION_4_2]
        /// Render multiple instances of primitives using a count derived from a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the geometry to render.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback_instanced|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawTransformFeedbackInstanced")]
        [CLSCompliant(false)]
        public static void DrawTransformFeedbackInstanced(OpenToolkit.OpenGL.PrimitiveType mode, UInt32 id, Int32 instancecount) => instance.DrawTransformFeedbackInstanced(mode, id, instancecount);

        /// <summary>[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Render primitives using a count derived from a specifed stream of a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        /// <param name="stream">
        /// Specifies the index of the transform feedback stream from which to retrieve a primitive count.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawTransformFeedbackStream")]
        [CLSCompliant(false)]
        public static void DrawTransformFeedbackStream(OpenToolkit.OpenGL.BeginMode mode, Int32 id, Int32 stream) => instance.DrawTransformFeedbackStream(mode, id, stream);

        /// <summary>[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Render primitives using a count derived from a specifed stream of a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        /// <param name="stream">
        /// Specifies the index of the transform feedback stream from which to retrieve a primitive count.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawTransformFeedbackStream")]
        [CLSCompliant(false)]
        public static void DrawTransformFeedbackStream(OpenToolkit.OpenGL.BeginMode mode, UInt32 id, UInt32 stream) => instance.DrawTransformFeedbackStream(mode, id, stream);

        /// <summary>[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Render primitives using a count derived from a specifed stream of a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        /// <param name="stream">
        /// Specifies the index of the transform feedback stream from which to retrieve a primitive count.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawTransformFeedbackStream")]
        [CLSCompliant(false)]
        public static void DrawTransformFeedbackStream(OpenToolkit.OpenGL.PrimitiveType mode, Int32 id, Int32 stream) => instance.DrawTransformFeedbackStream(mode, id, stream);

        /// <summary>[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Render primitives using a count derived from a specifed stream of a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        /// <param name="stream">
        /// Specifies the index of the transform feedback stream from which to retrieve a primitive count.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glDrawTransformFeedbackStream")]
        [CLSCompliant(false)]
        public static void DrawTransformFeedbackStream(OpenToolkit.OpenGL.PrimitiveType mode, UInt32 id, UInt32 stream) => instance.DrawTransformFeedbackStream(mode, id, stream);

        /// <summary>[requires: v4.2 or ARB_transform_feedback_instanced|VERSION_4_2]
        /// Render multiple instances of primitives using a count derived from a specifed stream of a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        /// <param name="stream">
        /// Specifies the index of the transform feedback stream from which to retrieve a primitive count.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the geometry to render.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback_instanced|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawTransformFeedbackStreamInstanced")]
        [CLSCompliant(false)]
        public static void DrawTransformFeedbackStreamInstanced(OpenToolkit.OpenGL.PrimitiveType mode, Int32 id, Int32 stream, Int32 instancecount) => instance.DrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);

        /// <summary>[requires: v4.2 or ARB_transform_feedback_instanced|VERSION_4_2]
        /// Render multiple instances of primitives using a count derived from a specifed stream of a transform feedback object
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="id">
        /// Specifies the name of a transform feedback object from which to retrieve a primitive count.
        /// </param>
        /// <param name="stream">
        /// Specifies the index of the transform feedback stream from which to retrieve a primitive count.
        /// </param>
        /// <param name="instancecount">
        /// Specifies the number of instances of the geometry to render.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback_instanced|VERSION_4_2", Version = "4.2", EntryPoint = "glDrawTransformFeedbackStreamInstanced")]
        [CLSCompliant(false)]
        public static void DrawTransformFeedbackStreamInstanced(OpenToolkit.OpenGL.PrimitiveType mode, UInt32 id, UInt32 stream, Int32 instancecount) => instance.DrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Flag edges as either boundary or nonboundary
        /// </summary>
        /// <param name="flag">
        /// Specifies the current edge flag value, either True or False. The initial value is True.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEdgeFlag")]
        public static void EdgeFlag(bool flag) => instance.EdgeFlag(flag);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of edge flags
        /// </summary>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(stride)]
        /// Specifies a pointer to the first edge flag in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
        public static void EdgeFlagPointer(Int32 stride, [CountAttribute(Computed = "stride")] IntPtr pointer) => instance.EdgeFlagPointer(stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of edge flags
        /// </summary>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(stride)]
        /// Specifies a pointer to the first edge flag in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
        [CLSCompliant(false)]
        public static void EdgeFlagPointer<T1>(Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "stride")] T1[] pointer)
            where T1 : struct
         => instance.EdgeFlagPointer<T1>(stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of edge flags
        /// </summary>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(stride)]
        /// Specifies a pointer to the first edge flag in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
        [CLSCompliant(false)]
        public static void EdgeFlagPointer<T1>(Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "stride")] T1[,] pointer)
            where T1 : struct
         => instance.EdgeFlagPointer<T1>(stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of edge flags
        /// </summary>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(stride)]
        /// Specifies a pointer to the first edge flag in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
        [CLSCompliant(false)]
        public static void EdgeFlagPointer<T1>(Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "stride")] T1[,,] pointer)
            where T1 : struct
         => instance.EdgeFlagPointer<T1>(stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of edge flags
        /// </summary>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(stride)]
        /// Specifies a pointer to the first edge flag in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
        public static void EdgeFlagPointer<T1>(Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "stride")] ref T1 pointer)
            where T1 : struct
         => instance.EdgeFlagPointer<T1>(stride, ref pointer);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Flag edges as either boundary or nonboundary
        /// </summary>
        /// <param name="flag">[length: 1]
        /// Specifies the current edge flag value, either True or False. The initial value is True.
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEdgeFlagv")]
        [CLSCompliant(false)]
        public static void EdgeFlag([CountAttribute(Count = 1)] bool[] flag) => instance.EdgeFlag(flag);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Flag edges as either boundary or nonboundary
        /// </summary>
        /// <param name="flag">[length: 1]
        /// Specifies the current edge flag value, either True or False. The initial value is True.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEdgeFlagv")]
        [CLSCompliant(false)]
        public static unsafe void EdgeFlag([CountAttribute(Count = 1)] bool* flag) => instance.EdgeFlag(flag);

        /// <summary>[requires: v1.0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEnable")]
        public static void Enable(OpenToolkit.OpenGL.EnableCap cap) => instance.Enable(cap);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Enable or disable client-side capability
        /// </summary>
        /// <param name="array">
        /// Specifies the capability to enable. Symbolic constants ColorArray, EdgeFlagArray, FogCoordArray, IndexArray, NormalArray, SecondaryColorArray, TextureCoordArray, and VertexArray are accepted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glEnableClientState")]
        public static void EnableClientState(OpenToolkit.OpenGL.ArrayCap array) => instance.EnableClientState(array);

        /// <summary>[requires: v3.0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the switch to disable (for glEnablei and glDisablei only).
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEnablei")]
        [CLSCompliant(false)]
        public static void Enable(OpenToolkit.OpenGL.IndexedEnableCap target, Int32 index) => instance.Enable(target, index);

        /// <summary>[requires: v3.0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the switch to disable (for glEnablei and glDisablei only).
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEnablei")]
        [CLSCompliant(false)]
        public static void Enable(OpenToolkit.OpenGL.IndexedEnableCap target, UInt32 index) => instance.Enable(target, index);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glEnableVertexArrayAttrib")]
        [CLSCompliant(false)]
        public static void EnableVertexArrayAttrib(Int32 vaobj, Int32 index) => instance.EnableVertexArrayAttrib(vaobj, index);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glEnableVertexArrayAttrib")]
        [CLSCompliant(false)]
        public static void EnableVertexArrayAttrib(UInt32 vaobj, UInt32 index) => instance.EnableVertexArrayAttrib(vaobj, index);

        /// <summary>[requires: v2.0]
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void EnableVertexAttribArray(Int32 index) => instance.EnableVertexAttribArray(index);

        /// <summary>[requires: v2.0]
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void EnableVertexAttribArray(UInt32 index) => instance.EnableVertexAttribArray(index);

        /// <summary>[requires: v1.0][deprecated: v3.2]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEnd")]
        public static void End() => instance.End();

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEndConditionalRender")]
        public static void EndConditionalRender() => instance.EndConditionalRender();

        /// <summary>[requires: v1.0][deprecated: v3.2]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEndList")]
        public static void EndList() => instance.EndList();

        /// <summary>[requires: v1.5]</summary>
        /// <param name="target"></param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glEndQuery")]
        public static void EndQuery(OpenToolkit.OpenGL.QueryTarget target) => instance.EndQuery(target);

        /// <summary>[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glEndQueryIndexed")]
        [CLSCompliant(false)]
        public static void EndQueryIndexed(OpenToolkit.OpenGL.QueryTarget target, Int32 index) => instance.EndQueryIndexed(target, index);

        /// <summary>[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glEndQueryIndexed")]
        [CLSCompliant(false)]
        public static void EndQueryIndexed(OpenToolkit.OpenGL.QueryTarget target, UInt32 index) => instance.EndQueryIndexed(target, index);

        /// <summary>[requires: v3.0]</summary>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEndTransformFeedback")]
        public static void EndTransformFeedback() => instance.EndTransformFeedback();

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord1d")]
        public static void EvalCoord1(Double u) => instance.EvalCoord1(u);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">[length: 1]
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord1dv")]
        [CLSCompliant(false)]
        public static unsafe void EvalCoord1([CountAttribute(Count = 1)] Double* u) => instance.EvalCoord1(u);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord1f")]
        public static void EvalCoord1(Single u) => instance.EvalCoord1(u);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">[length: 1]
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord1fv")]
        [CLSCompliant(false)]
        public static unsafe void EvalCoord1([CountAttribute(Count = 1)] Single* u) => instance.EvalCoord1(u);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        /// <param name="v">
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord2d")]
        public static void EvalCoord2(Double u, Double v) => instance.EvalCoord2(u, v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">[length: 2]
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord2dv")]
        [CLSCompliant(false)]
        public static void EvalCoord2([CountAttribute(Count = 2)] Double[] u) => instance.EvalCoord2(u);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">[length: 2]
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord2dv")]
        [CLSCompliant(false)]
        public static void EvalCoord2([CountAttribute(Count = 2)] ref Double u) => instance.EvalCoord2(ref u);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">[length: 2]
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord2dv")]
        [CLSCompliant(false)]
        public static unsafe void EvalCoord2([CountAttribute(Count = 2)] Double* u) => instance.EvalCoord2(u);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        /// <param name="v">
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord2f")]
        public static void EvalCoord2(Single u, Single v) => instance.EvalCoord2(u, v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">[length: 2]
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord2fv")]
        [CLSCompliant(false)]
        public static void EvalCoord2([CountAttribute(Count = 2)] Single[] u) => instance.EvalCoord2(u);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">[length: 2]
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord2fv")]
        [CLSCompliant(false)]
        public static void EvalCoord2([CountAttribute(Count = 2)] ref Single u) => instance.EvalCoord2(ref u);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Evaluate enabled one- and two-dimensional maps
        /// </summary>
        /// <param name="u">[length: 2]
        /// Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalCoord2fv")]
        [CLSCompliant(false)]
        public static unsafe void EvalCoord2([CountAttribute(Count = 2)] Single* u) => instance.EvalCoord2(u);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Compute a one- or two-dimensional grid of points or lines
        /// </summary>
        /// <param name="mode">
        /// In glEvalMesh1, specifies whether to compute a one-dimensional mesh of points or lines. Symbolic constants Point and Line are accepted.
        /// </param>
        /// <param name="i1">
        /// Specify the first and last integer values for grid domain variable .
        /// </param>
        /// <param name="i2">
        /// Specify the first and last integer values for grid domain variable .
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalMesh1")]
        public static void EvalMesh1(OpenToolkit.OpenGL.MeshMode1 mode, Int32 i1, Int32 i2) => instance.EvalMesh1(mode, i1, i2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Compute a one- or two-dimensional grid of points or lines
        /// </summary>
        /// <param name="mode">
        /// In glEvalMesh1, specifies whether to compute a one-dimensional mesh of points or lines. Symbolic constants Point and Line are accepted.
        /// </param>
        /// <param name="i1">
        /// Specify the first and last integer values for grid domain variable .
        /// </param>
        /// <param name="i2">
        /// Specify the first and last integer values for grid domain variable .
        /// </param>
        /// <param name="j1"></param>
        /// <param name="j2"></param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalMesh2")]
        public static void EvalMesh2(OpenToolkit.OpenGL.MeshMode2 mode, Int32 i1, Int32 i2, Int32 j1, Int32 j2) => instance.EvalMesh2(mode, i1, i2, j1, j2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Generate and evaluate a single point in a mesh
        /// </summary>
        /// <param name="i">
        /// Specifies the integer value for grid domain variable .
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalPoint1")]
        public static void EvalPoint1(Int32 i) => instance.EvalPoint1(i);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Generate and evaluate a single point in a mesh
        /// </summary>
        /// <param name="i">
        /// Specifies the integer value for grid domain variable .
        /// </param>
        /// <param name="j">
        /// Specifies the integer value for grid domain variable  (glEvalPoint2 only).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEvalPoint2")]
        public static void EvalPoint2(Int32 i, Int32 j) => instance.EvalPoint2(i, j);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Controls feedback mode
        /// </summary>
        /// <param name="size">
        /// Specifies the maximum number of values that can be written into buffer.
        /// </param>
        /// <param name="type">
        /// Specifies a symbolic constant that describes the information that will be returned for each vertex. Gl2D, Gl3D, Gl3DColor, Gl3DColorTexture, and Gl4DColorTexture are accepted.
        /// </param>
        /// <param name="buffer">[length: size]
        /// Returns the feedback data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
        [CLSCompliant(false)]
        public static void FeedbackBuffer(Int32 size, OpenToolkit.OpenGL.FeedbackType type, [OutAttribute, CountAttribute(Parameter = "size")] Single[] buffer) => instance.FeedbackBuffer(size, type, buffer);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Controls feedback mode
        /// </summary>
        /// <param name="size">
        /// Specifies the maximum number of values that can be written into buffer.
        /// </param>
        /// <param name="type">
        /// Specifies a symbolic constant that describes the information that will be returned for each vertex. Gl2D, Gl3D, Gl3DColor, Gl3DColorTexture, and Gl4DColorTexture are accepted.
        /// </param>
        /// <param name="buffer">[length: size]
        /// Returns the feedback data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
        [CLSCompliant(false)]
        public static void FeedbackBuffer(Int32 size, OpenToolkit.OpenGL.FeedbackType type, [OutAttribute, CountAttribute(Parameter = "size")] out Single buffer) => instance.FeedbackBuffer(size, type, out buffer);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Controls feedback mode
        /// </summary>
        /// <param name="size">
        /// Specifies the maximum number of values that can be written into buffer.
        /// </param>
        /// <param name="type">
        /// Specifies a symbolic constant that describes the information that will be returned for each vertex. Gl2D, Gl3D, Gl3DColor, Gl3DColorTexture, and Gl4DColorTexture are accepted.
        /// </param>
        /// <param name="buffer">[length: size]
        /// Returns the feedback data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
        [CLSCompliant(false)]
        public static unsafe void FeedbackBuffer(Int32 size, OpenToolkit.OpenGL.FeedbackType type, [OutAttribute, CountAttribute(Parameter = "size")] Single* buffer) => instance.FeedbackBuffer(size, type, buffer);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Create a new sync object and insert it into the GL command stream
        /// </summary>
        /// <param name="condition">
        /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
        /// </param>
        /// <param name="flags">
        /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
        /// </param>
        [Obsolete("Use SyncCondition overload instead")]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glFenceSync")]
        [CLSCompliant(false)]
        public static IntPtr FenceSync(OpenToolkit.OpenGL.ArbSync condition, Int32 flags) => instance.FenceSync(condition, flags);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Create a new sync object and insert it into the GL command stream
        /// </summary>
        /// <param name="condition">
        /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
        /// </param>
        /// <param name="flags">
        /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
        /// </param>
        [Obsolete("Use SyncCondition overload instead")]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glFenceSync")]
        [CLSCompliant(false)]
        public static IntPtr FenceSync(OpenToolkit.OpenGL.ArbSync condition, UInt32 flags) => instance.FenceSync(condition, flags);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Create a new sync object and insert it into the GL command stream
        /// </summary>
        /// <param name="condition">
        /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
        /// </param>
        /// <param name="flags">
        /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glFenceSync")]
        public static IntPtr FenceSync(OpenToolkit.OpenGL.SyncCondition condition, OpenToolkit.OpenGL.WaitSyncFlags flags) => instance.FenceSync(condition, flags);

        /// <summary>[requires: v1.0]
        /// Block until all GL execution is complete
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFinish")]
        public static void Finish() => instance.Finish();

        /// <summary>[requires: v1.0]
        /// Force execution of GL commands in finite time
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFlush")]
        public static void Flush() => instance.Flush();

        /// <summary>[requires: v3.0 or ARB_map_buffer_range|VERSION_3_0]
        /// Indicate modifications to a range of a mapped buffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the start of the buffer subrange, in basic machine units.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the buffer subrange, in basic machine units.
        /// </param>
        [AutoGenerated(Category = "ARB_map_buffer_range|VERSION_3_0", Version = "3.0", EntryPoint = "glFlushMappedBufferRange")]
        public static void FlushMappedBufferRange(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, Int32 length) => instance.FlushMappedBufferRange(target, offset, length);

        /// <summary>[requires: v3.0 or ARB_map_buffer_range|VERSION_3_0]
        /// Indicate modifications to a range of a mapped buffer
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the start of the buffer subrange, in basic machine units.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the buffer subrange, in basic machine units.
        /// </param>
        [AutoGenerated(Category = "ARB_map_buffer_range|VERSION_3_0", Version = "3.0", EntryPoint = "glFlushMappedBufferRange")]
        public static void FlushMappedBufferRange(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, IntPtr length) => instance.FlushMappedBufferRange(target, offset, length);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glFlushMappedNamedBufferRange")]
        [CLSCompliant(false)]
        public static void FlushMappedNamedBufferRange(Int32 buffer, IntPtr offset, Int32 length) => instance.FlushMappedNamedBufferRange(buffer, offset, length);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glFlushMappedNamedBufferRange")]
        [CLSCompliant(false)]
        public static void FlushMappedNamedBufferRange(Int32 buffer, IntPtr offset, IntPtr length) => instance.FlushMappedNamedBufferRange(buffer, offset, length);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glFlushMappedNamedBufferRange")]
        [CLSCompliant(false)]
        public static void FlushMappedNamedBufferRange(UInt32 buffer, IntPtr offset, Int32 length) => instance.FlushMappedNamedBufferRange(buffer, offset, length);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="length"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glFlushMappedNamedBufferRange")]
        [CLSCompliant(false)]
        public static void FlushMappedNamedBufferRange(UInt32 buffer, IntPtr offset, IntPtr length) => instance.FlushMappedNamedBufferRange(buffer, offset, length);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current fog coordinates
        /// </summary>
        /// <param name="coord">
        /// Specify the fog distance.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordd")]
        public static void FogCoord(Double coord) => instance.FogCoord(coord);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current fog coordinates
        /// </summary>
        /// <param name="coord">[length: 1]
        /// Specify the fog distance.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoorddv")]
        [CLSCompliant(false)]
        public static unsafe void FogCoord([CountAttribute(Count = 1)] Double* coord) => instance.FogCoord(coord);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current fog coordinates
        /// </summary>
        /// <param name="coord">
        /// Specify the fog distance.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordf")]
        public static void FogCoord(Single coord) => instance.FogCoord(coord);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current fog coordinates
        /// </summary>
        /// <param name="coord">[length: 1]
        /// Specify the fog distance.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordfv")]
        [CLSCompliant(false)]
        public static unsafe void FogCoord([CountAttribute(Count = 1)] Single* coord) => instance.FogCoord(coord);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each fog coordinate. Symbolic constants Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static void FogCoordPointer(OpenToolkit.OpenGL.FogPointerType type, Int32 stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer) => instance.FogCoordPointer(type, stride, pointer);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each fog coordinate. Symbolic constants Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        [CLSCompliant(false)]
        public static void FogCoordPointer<T2>(OpenToolkit.OpenGL.FogPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[] pointer)
            where T2 : struct
         => instance.FogCoordPointer<T2>(type, stride, pointer);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each fog coordinate. Symbolic constants Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        [CLSCompliant(false)]
        public static void FogCoordPointer<T2>(OpenToolkit.OpenGL.FogPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,] pointer)
            where T2 : struct
         => instance.FogCoordPointer<T2>(type, stride, pointer);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each fog coordinate. Symbolic constants Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        [CLSCompliant(false)]
        public static void FogCoordPointer<T2>(OpenToolkit.OpenGL.FogPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,,] pointer)
            where T2 : struct
         => instance.FogCoordPointer<T2>(type, stride, pointer);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each fog coordinate. Symbolic constants Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static void FogCoordPointer<T2>(OpenToolkit.OpenGL.FogPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] ref T2 pointer)
            where T2 : struct
         => instance.FogCoordPointer<T2>(type, stride, ref pointer);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFogf")]
        public static void Fog(OpenToolkit.OpenGL.FogParameter pname, Single param) => instance.Fog(pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFogfv")]
        [CLSCompliant(false)]
        public static void Fog(OpenToolkit.OpenGL.FogParameter pname, [CountAttribute(Computed = "pname")] Single[] @params) => instance.Fog(pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFogfv")]
        [CLSCompliant(false)]
        public static unsafe void Fog(OpenToolkit.OpenGL.FogParameter pname, [CountAttribute(Computed = "pname")] Single* @params) => instance.Fog(pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFogi")]
        public static void Fog(OpenToolkit.OpenGL.FogParameter pname, Int32 param) => instance.Fog(pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFogiv")]
        [CLSCompliant(false)]
        public static void Fog(OpenToolkit.OpenGL.FogParameter pname, [CountAttribute(Computed = "pname")] Int32[] @params) => instance.Fog(pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify fog parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFogiv")]
        [CLSCompliant(false)]
        public static unsafe void Fog(OpenToolkit.OpenGL.FogParameter pname, [CountAttribute(Computed = "pname")] Int32* @params) => instance.Fog(pname, @params);

        /// <summary>[requires: v4.3 or ARB_framebuffer_no_attachments|VERSION_4_3]
        /// Set a named parameter of a framebuffer
        /// </summary>
        /// <param name="target">
        /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
        /// </param>
        /// <param name="pname">
        /// A token indicating the parameter to be modified.
        /// </param>
        /// <param name="param">
        /// The new value for the parameter named pname.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_no_attachments|VERSION_4_3", Version = "4.3", EntryPoint = "glFramebufferParameteri")]
        public static void FramebufferParameter(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferDefaultParameter pname, Int32 param) => instance.FramebufferParameter(target, pname, param);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Attach a renderbuffer as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer.
        /// </param>
        /// <param name="renderbuffertarget">
        /// Specifies the renderbuffer target and must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferRenderbuffer")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.RenderbufferTarget renderbuffertarget, Int32 renderbuffer) => instance.FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Attach a renderbuffer as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer.
        /// </param>
        /// <param name="renderbuffertarget">
        /// Specifies the renderbuffer target and must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer">
        /// Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferRenderbuffer")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer) => instance.FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);

        /// <summary>[requires: v3.2]
        /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
        /// </param>
        /// <param name="texture">
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </param>
        /// <param name="level">
        /// Specifies the mipmap level of texture to attach.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glFramebufferTexture")]
        [CLSCompliant(false)]
        public static void FramebufferTexture(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level) => instance.FramebufferTexture(target, attachment, texture, level);

        /// <summary>[requires: v3.2]
        /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
        /// </param>
        /// <param name="texture">
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </param>
        /// <param name="level">
        /// Specifies the mipmap level of texture to attach.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glFramebufferTexture")]
        [CLSCompliant(false)]
        public static void FramebufferTexture(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level) => instance.FramebufferTexture(target, attachment, texture, level);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="attachment"></param>
        /// <param name="textarget"></param>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTexture1D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture1D(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.TextureTarget textarget, Int32 texture, Int32 level) => instance.FramebufferTexture1D(target, attachment, textarget, texture, level);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="attachment"></param>
        /// <param name="textarget"></param>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTexture1D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture1D(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.TextureTarget textarget, UInt32 texture, Int32 level) => instance.FramebufferTexture1D(target, attachment, textarget, texture, level);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="attachment"></param>
        /// <param name="textarget"></param>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTexture2D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.TextureTarget textarget, Int32 texture, Int32 level) => instance.FramebufferTexture2D(target, attachment, textarget, texture, level);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="attachment"></param>
        /// <param name="textarget"></param>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTexture2D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.TextureTarget textarget, UInt32 texture, Int32 level) => instance.FramebufferTexture2D(target, attachment, textarget, texture, level);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="attachment"></param>
        /// <param name="textarget"></param>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="zoffset"></param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTexture3D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture3D(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.TextureTarget textarget, Int32 texture, Int32 level, Int32 zoffset) => instance.FramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]</summary>
        /// <param name="target"></param>
        /// <param name="attachment"></param>
        /// <param name="textarget"></param>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="zoffset"></param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTexture3D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture3D(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.TextureTarget textarget, UInt32 texture, Int32 level, Int32 zoffset) => instance.FramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Attach a single layer of a texture to a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
        /// </param>
        /// <param name="texture">
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </param>
        /// <param name="level">
        /// Specifies the mipmap level of texture to attach.
        /// </param>
        /// <param name="layer">
        /// Specifies the layer of texture to attach.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        [CLSCompliant(false)]
        public static void FramebufferTextureLayer(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer) => instance.FramebufferTextureLayer(target, attachment, texture, level, layer);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Attach a single layer of a texture to a framebuffer
        /// </summary>
        /// <param name="target">
        /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
        /// </param>
        /// <param name="texture">
        /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
        /// </param>
        /// <param name="level">
        /// Specifies the mipmap level of texture to attach.
        /// </param>
        /// <param name="layer">
        /// Specifies the layer of texture to attach.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        [CLSCompliant(false)]
        public static void FramebufferTextureLayer(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer) => instance.FramebufferTextureLayer(target, attachment, texture, level, layer);

        /// <summary>[requires: v1.0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode">
        /// Specifies the orientation of front-facing polygons. Cw and Ccw are accepted. The initial value is Ccw.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFrontFace")]
        public static void FrontFace(OpenToolkit.OpenGL.FrontFaceDirection mode) => instance.FrontFace(mode);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix by a perspective matrix
        /// </summary>
        /// <param name="left">
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="right">
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="bottom">
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="top">
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="zNear">
        /// Specify the distances to the near and far depth clipping planes. Both distances must be positive.
        /// </param>
        /// <param name="zFar">
        /// Specify the distances to the near and far depth clipping planes. Both distances must be positive.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFrustum")]
        public static void Frustum(Double left, Double right, Double bottom, Double top, Double zNear, Double zFar) => instance.Frustum(left, right, bottom, top, zNear, zFar);

        /// <summary>[requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static Int32 GenBuffer() => instance.GenBuffer();

        /// <summary>[requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] buffers) => instance.GenBuffers(n, buffers);

        /// <summary>[requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 buffers) => instance.GenBuffers(n, out buffers);

        /// <summary>[requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* buffers) => instance.GenBuffers(n, buffers);

        /// <summary>[requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] buffers) => instance.GenBuffers(n, buffers);

        /// <summary>[requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 buffers) => instance.GenBuffers(n, out buffers);

        /// <summary>[requires: v1.5]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n]
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenBuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* buffers) => instance.GenBuffers(n, buffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate mipmaps for a specified texture target
        /// </summary>
        /// <param name="target">
        /// Specifies the target to which the texture whose mimaps to generate is bound. target must be Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray or TextureCubeMap.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenerateMipmap")]
        public static void GenerateMipmap(OpenToolkit.OpenGL.GenerateMipmapTarget target) => instance.GenerateMipmap(target);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGenerateTextureMipmap")]
        [CLSCompliant(false)]
        public static void GenerateTextureMipmap(Int32 texture) => instance.GenerateTextureMipmap(texture);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGenerateTextureMipmap")]
        [CLSCompliant(false)]
        public static void GenerateTextureMipmap(UInt32 texture) => instance.GenerateTextureMipmap(texture);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static Int32 GenFramebuffer() => instance.GenFramebuffer();

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to generate.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] framebuffers) => instance.GenFramebuffers(n, framebuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to generate.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 framebuffers) => instance.GenFramebuffers(n, out framebuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to generate.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* framebuffers) => instance.GenFramebuffers(n, framebuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to generate.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] framebuffers) => instance.GenFramebuffers(n, framebuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to generate.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 framebuffers) => instance.GenFramebuffers(n, out framebuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of framebuffer object names to generate.
        /// </param>
        /// <param name="framebuffers">[length: n]
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenFramebuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* framebuffers) => instance.GenFramebuffers(n, framebuffers);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Generate a contiguous set of empty display lists
        /// </summary>
        /// <param name="range">
        /// Specifies the number of contiguous empty display lists to be generated.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGenLists")]
        public static Int32 GenLists(Int32 range) => instance.GenLists(range);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        [CLSCompliant(false)]
        public static Int32 GenProgramPipeline() => instance.GenProgramPipeline();

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline object names to reserve.
        /// </param>
        /// <param name="pipelines">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        [CLSCompliant(false)]
        public static void GenProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] pipelines) => instance.GenProgramPipelines(n, pipelines);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline object names to reserve.
        /// </param>
        /// <param name="pipelines">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        [CLSCompliant(false)]
        public static void GenProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 pipelines) => instance.GenProgramPipelines(n, out pipelines);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline object names to reserve.
        /// </param>
        /// <param name="pipelines">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        [CLSCompliant(false)]
        public static unsafe void GenProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* pipelines) => instance.GenProgramPipelines(n, pipelines);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline object names to reserve.
        /// </param>
        /// <param name="pipelines">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        [CLSCompliant(false)]
        public static void GenProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] pipelines) => instance.GenProgramPipelines(n, pipelines);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline object names to reserve.
        /// </param>
        /// <param name="pipelines">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        [CLSCompliant(false)]
        public static void GenProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 pipelines) => instance.GenProgramPipelines(n, out pipelines);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Reserve program pipeline object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of program pipeline object names to reserve.
        /// </param>
        /// <param name="pipelines">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
        [CLSCompliant(false)]
        public static unsafe void GenProgramPipelines(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* pipelines) => instance.GenProgramPipelines(n, pipelines);

        /// <summary>[requires: v1.5]
        /// Generate query object names
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static Int32 GenQuery() => instance.GenQuery();

        /// <summary>[requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] ids) => instance.GenQueries(n, ids);

        /// <summary>[requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 ids) => instance.GenQueries(n, out ids);

        /// <summary>[requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static unsafe void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* ids) => instance.GenQueries(n, ids);

        /// <summary>[requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] ids) => instance.GenQueries(n, ids);

        /// <summary>[requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 ids) => instance.GenQueries(n, out ids);

        /// <summary>[requires: v1.5]
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of query object names to be generated.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array in which the generated query object names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
        [CLSCompliant(false)]
        public static unsafe void GenQueries(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* ids) => instance.GenQueries(n, ids);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static Int32 GenRenderbuffer() => instance.GenRenderbuffer();

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to generate.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] renderbuffers) => instance.GenRenderbuffers(n, renderbuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to generate.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 renderbuffers) => instance.GenRenderbuffers(n, out renderbuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to generate.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* renderbuffers) => instance.GenRenderbuffers(n, renderbuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to generate.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] renderbuffers) => instance.GenRenderbuffers(n, renderbuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to generate.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 renderbuffers) => instance.GenRenderbuffers(n, out renderbuffers);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of renderbuffer object names to generate.
        /// </param>
        /// <param name="renderbuffers">[length: n]
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenRenderbuffers(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* renderbuffers) => instance.GenRenderbuffers(n, renderbuffers);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static Int32 GenSampler() => instance.GenSampler();

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static void GenSamplers(Int32 count, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] samplers) => instance.GenSamplers(count, samplers);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static void GenSamplers(Int32 count, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 samplers) => instance.GenSamplers(count, out samplers);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static unsafe void GenSamplers(Int32 count, [OutAttribute, CountAttribute(Parameter = "count")] Int32* samplers) => instance.GenSamplers(count, samplers);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static void GenSamplers(Int32 count, [OutAttribute, CountAttribute(Parameter = "count")] UInt32[] samplers) => instance.GenSamplers(count, samplers);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static void GenSamplers(Int32 count, [OutAttribute, CountAttribute(Parameter = "count")] out UInt32 samplers) => instance.GenSamplers(count, out samplers);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Generate sampler object names
        /// </summary>
        /// <param name="count">
        /// Specifies the number of sampler object names to generate.
        /// </param>
        /// <param name="samplers">[length: count]
        /// Specifies an array in which the generated sampler object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGenSamplers")]
        [CLSCompliant(false)]
        public static unsafe void GenSamplers(Int32 count, [OutAttribute, CountAttribute(Parameter = "count")] UInt32* samplers) => instance.GenSamplers(count, samplers);

        /// <summary>[requires: v1.1]
        /// Generate texture names
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static Int32 GenTexture() => instance.GenTexture();

        /// <summary>[requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] textures) => instance.GenTextures(n, textures);

        /// <summary>[requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 textures) => instance.GenTextures(n, out textures);

        /// <summary>[requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static unsafe void GenTextures(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* textures) => instance.GenTextures(n, textures);

        /// <summary>[requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] textures) => instance.GenTextures(n, textures);

        /// <summary>[requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 textures) => instance.GenTextures(n, out textures);

        /// <summary>[requires: v1.1]
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static unsafe void GenTextures(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* textures) => instance.GenTextures(n, textures);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static Int32 GenTransformFeedback() => instance.GenTransformFeedback();

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] ids) => instance.GenTransformFeedbacks(n, ids);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 ids) => instance.GenTransformFeedbacks(n, out ids);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void GenTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* ids) => instance.GenTransformFeedbacks(n, ids);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] ids) => instance.GenTransformFeedbacks(n, ids);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static void GenTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 ids) => instance.GenTransformFeedbacks(n, out ids);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Reserve transform feedback object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of transform feedback object names to reserve.
        /// </param>
        /// <param name="ids">[length: n]
        /// Specifies an array of into which the reserved names will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glGenTransformFeedbacks")]
        [CLSCompliant(false)]
        public static unsafe void GenTransformFeedbacks(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* ids) => instance.GenTransformFeedbacks(n, ids);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static Int32 GenVertexArray() => instance.GenVertexArray();

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array object names to generate.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32[] arrays) => instance.GenVertexArrays(n, arrays);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array object names to generate.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out Int32 arrays) => instance.GenVertexArrays(n, out arrays);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array object names to generate.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static unsafe void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] Int32* arrays) => instance.GenVertexArrays(n, arrays);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array object names to generate.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32[] arrays) => instance.GenVertexArrays(n, arrays);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array object names to generate.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] out UInt32 arrays) => instance.GenVertexArrays(n, out arrays);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Generate vertex array object names
        /// </summary>
        /// <param name="n">
        /// Specifies the number of vertex array object names to generate.
        /// </param>
        /// <param name="arrays">[length: n]
        /// Specifies an array in which the generated vertex array object names are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        [CLSCompliant(false)]
        public static unsafe void GenVertexArrays(Int32 n, [OutAttribute, CountAttribute(Parameter = "n")] UInt32* arrays) => instance.GenVertexArrays(n, arrays);

        /// <summary>[requires: v4.2 or ARB_shader_atomic_counters|VERSION_4_2]
        /// Retrieve information about the set of active atomic counter buffers for a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object from which to retrieve information.
        /// </param>
        /// <param name="bufferIndex">
        /// Specifies index of an active atomic counter buffer.
        /// </param>
        /// <param name="pname">
        /// Specifies which parameter of the atomic counter buffer to retrieve.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_atomic_counters|VERSION_4_2", Version = "4.2", EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        [CLSCompliant(false)]
        public static void GetActiveAtomicCounterBuffer(Int32 program, Int32 bufferIndex, OpenToolkit.OpenGL.AtomicCounterBufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetActiveAtomicCounterBuffer(program, bufferIndex, pname, @params);

        /// <summary>[requires: v4.2 or ARB_shader_atomic_counters|VERSION_4_2]
        /// Retrieve information about the set of active atomic counter buffers for a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object from which to retrieve information.
        /// </param>
        /// <param name="bufferIndex">
        /// Specifies index of an active atomic counter buffer.
        /// </param>
        /// <param name="pname">
        /// Specifies which parameter of the atomic counter buffer to retrieve.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_atomic_counters|VERSION_4_2", Version = "4.2", EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        [CLSCompliant(false)]
        public static void GetActiveAtomicCounterBuffer(Int32 program, Int32 bufferIndex, OpenToolkit.OpenGL.AtomicCounterBufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetActiveAtomicCounterBuffer(program, bufferIndex, pname, out @params);

        /// <summary>[requires: v4.2 or ARB_shader_atomic_counters|VERSION_4_2]
        /// Retrieve information about the set of active atomic counter buffers for a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object from which to retrieve information.
        /// </param>
        /// <param name="bufferIndex">
        /// Specifies index of an active atomic counter buffer.
        /// </param>
        /// <param name="pname">
        /// Specifies which parameter of the atomic counter buffer to retrieve.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_atomic_counters|VERSION_4_2", Version = "4.2", EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAtomicCounterBuffer(Int32 program, Int32 bufferIndex, OpenToolkit.OpenGL.AtomicCounterBufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetActiveAtomicCounterBuffer(program, bufferIndex, pname, @params);

        /// <summary>[requires: v4.2 or ARB_shader_atomic_counters|VERSION_4_2]
        /// Retrieve information about the set of active atomic counter buffers for a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object from which to retrieve information.
        /// </param>
        /// <param name="bufferIndex">
        /// Specifies index of an active atomic counter buffer.
        /// </param>
        /// <param name="pname">
        /// Specifies which parameter of the atomic counter buffer to retrieve.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_atomic_counters|VERSION_4_2", Version = "4.2", EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        [CLSCompliant(false)]
        public static void GetActiveAtomicCounterBuffer(UInt32 program, UInt32 bufferIndex, OpenToolkit.OpenGL.AtomicCounterBufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetActiveAtomicCounterBuffer(program, bufferIndex, pname, @params);

        /// <summary>[requires: v4.2 or ARB_shader_atomic_counters|VERSION_4_2]
        /// Retrieve information about the set of active atomic counter buffers for a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object from which to retrieve information.
        /// </param>
        /// <param name="bufferIndex">
        /// Specifies index of an active atomic counter buffer.
        /// </param>
        /// <param name="pname">
        /// Specifies which parameter of the atomic counter buffer to retrieve.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_atomic_counters|VERSION_4_2", Version = "4.2", EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        [CLSCompliant(false)]
        public static void GetActiveAtomicCounterBuffer(UInt32 program, UInt32 bufferIndex, OpenToolkit.OpenGL.AtomicCounterBufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetActiveAtomicCounterBuffer(program, bufferIndex, pname, out @params);

        /// <summary>[requires: v4.2 or ARB_shader_atomic_counters|VERSION_4_2]
        /// Retrieve information about the set of active atomic counter buffers for a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object from which to retrieve information.
        /// </param>
        /// <param name="bufferIndex">
        /// Specifies index of an active atomic counter buffer.
        /// </param>
        /// <param name="pname">
        /// Specifies which parameter of the atomic counter buffer to retrieve.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_atomic_counters|VERSION_4_2", Version = "4.2", EntryPoint = "glGetActiveAtomicCounterBufferiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAtomicCounterBuffer(UInt32 program, UInt32 bufferIndex, OpenToolkit.OpenGL.AtomicCounterBufferParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetActiveAtomicCounterBuffer(program, bufferIndex, pname, @params);

        /// <summary>[requires: v2.0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.ActiveAttribType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetActiveAttrib(program, index, bufSize, out length, out size, out type, out name);

        /// <summary>[requires: v2.0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.ActiveAttribType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetActiveAttrib(program, index, bufSize, length, size, type, out name);

        /// <summary>[requires: v2.0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.ActiveAttribType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetActiveAttrib(program, index, bufSize, out length, out size, out type, out name);

        /// <summary>[requires: v2.0]
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.ActiveAttribType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetActiveAttrib(program, index, bufSize, length, size, type, out name);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query the subroutine name.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="bufsize">
        /// Specifies the size of the buffer whose address is given in name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable which is to receive the length of the shader subroutine uniform name.
        /// </param>
        /// <param name="name">[length: bufsize]
        /// Specifies the address of an array into which the name of the shader subroutine uniform will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineName")]
        [CLSCompliant(false)]
        public static void GetActiveSubroutineName(Int32 program, OpenToolkit.OpenGL.ShaderType shadertype, Int32 index, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String name) => instance.GetActiveSubroutineName(program, shadertype, index, bufsize, out length, out name);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query the subroutine name.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="bufsize">
        /// Specifies the size of the buffer whose address is given in name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable which is to receive the length of the shader subroutine uniform name.
        /// </param>
        /// <param name="name">[length: bufsize]
        /// Specifies the address of an array into which the name of the shader subroutine uniform will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineName")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveSubroutineName(Int32 program, OpenToolkit.OpenGL.ShaderType shadertype, Int32 index, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String name) => instance.GetActiveSubroutineName(program, shadertype, index, bufsize, length, out name);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query the subroutine name.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="bufsize">
        /// Specifies the size of the buffer whose address is given in name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable which is to receive the length of the shader subroutine uniform name.
        /// </param>
        /// <param name="name">[length: bufsize]
        /// Specifies the address of an array into which the name of the shader subroutine uniform will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineName")]
        [CLSCompliant(false)]
        public static void GetActiveSubroutineName(UInt32 program, OpenToolkit.OpenGL.ShaderType shadertype, UInt32 index, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String name) => instance.GetActiveSubroutineName(program, shadertype, index, bufsize, out length, out name);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query the subroutine name.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="bufsize">
        /// Specifies the size of the buffer whose address is given in name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable which is to receive the length of the shader subroutine uniform name.
        /// </param>
        /// <param name="name">[length: bufsize]
        /// Specifies the address of an array into which the name of the shader subroutine uniform will be written.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineName")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveSubroutineName(UInt32 program, OpenToolkit.OpenGL.ShaderType shadertype, UInt32 index, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String name) => instance.GetActiveSubroutineName(program, shadertype, index, bufsize, length, out name);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query a property of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of the shader subroutine uniform to query. pname must be NumCompatibleSubroutines, CompatibleSubroutines, UniformSize or UniformNameLength.
        /// </param>
        /// <param name="values">[length: COMPSIZE(pname)]
        /// Specifies the address of a into which the queried value or values will be placed.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformiv")]
        [CLSCompliant(false)]
        public static void GetActiveSubroutineUniform(Int32 program, OpenToolkit.OpenGL.ShaderType shadertype, Int32 index, OpenToolkit.OpenGL.ActiveSubroutineUniformParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] values) => instance.GetActiveSubroutineUniform(program, shadertype, index, pname, values);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query a property of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of the shader subroutine uniform to query. pname must be NumCompatibleSubroutines, CompatibleSubroutines, UniformSize or UniformNameLength.
        /// </param>
        /// <param name="values">[length: COMPSIZE(pname)]
        /// Specifies the address of a into which the queried value or values will be placed.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformiv")]
        [CLSCompliant(false)]
        public static void GetActiveSubroutineUniform(Int32 program, OpenToolkit.OpenGL.ShaderType shadertype, Int32 index, OpenToolkit.OpenGL.ActiveSubroutineUniformParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 values) => instance.GetActiveSubroutineUniform(program, shadertype, index, pname, out values);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query a property of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of the shader subroutine uniform to query. pname must be NumCompatibleSubroutines, CompatibleSubroutines, UniformSize or UniformNameLength.
        /// </param>
        /// <param name="values">[length: COMPSIZE(pname)]
        /// Specifies the address of a into which the queried value or values will be placed.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveSubroutineUniform(Int32 program, OpenToolkit.OpenGL.ShaderType shadertype, Int32 index, OpenToolkit.OpenGL.ActiveSubroutineUniformParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* values) => instance.GetActiveSubroutineUniform(program, shadertype, index, pname, values);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query a property of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of the shader subroutine uniform to query. pname must be NumCompatibleSubroutines, CompatibleSubroutines, UniformSize or UniformNameLength.
        /// </param>
        /// <param name="values">[length: COMPSIZE(pname)]
        /// Specifies the address of a into which the queried value or values will be placed.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformiv")]
        [CLSCompliant(false)]
        public static void GetActiveSubroutineUniform(UInt32 program, OpenToolkit.OpenGL.ShaderType shadertype, UInt32 index, OpenToolkit.OpenGL.ActiveSubroutineUniformParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] values) => instance.GetActiveSubroutineUniform(program, shadertype, index, pname, values);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query a property of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of the shader subroutine uniform to query. pname must be NumCompatibleSubroutines, CompatibleSubroutines, UniformSize or UniformNameLength.
        /// </param>
        /// <param name="values">[length: COMPSIZE(pname)]
        /// Specifies the address of a into which the queried value or values will be placed.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformiv")]
        [CLSCompliant(false)]
        public static void GetActiveSubroutineUniform(UInt32 program, OpenToolkit.OpenGL.ShaderType shadertype, UInt32 index, OpenToolkit.OpenGL.ActiveSubroutineUniformParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 values) => instance.GetActiveSubroutineUniform(program, shadertype, index, pname, out values);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query a property of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of the shader subroutine uniform to query. pname must be NumCompatibleSubroutines, CompatibleSubroutines, UniformSize or UniformNameLength.
        /// </param>
        /// <param name="values">[length: COMPSIZE(pname)]
        /// Specifies the address of a into which the queried value or values will be placed.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveSubroutineUniform(UInt32 program, OpenToolkit.OpenGL.ShaderType shadertype, UInt32 index, OpenToolkit.OpenGL.ActiveSubroutineUniformParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* values) => instance.GetActiveSubroutineUniform(program, shadertype, index, pname, values);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="bufsize">
        /// Specifies the size of the buffer whose address is given in name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable into which is written the number of characters copied into name.
        /// </param>
        /// <param name="name">[length: bufsize]
        /// Specifies the address of a buffer that will receive the name of the specified shader subroutine uniform.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformName")]
        [CLSCompliant(false)]
        public static void GetActiveSubroutineUniformName(Int32 program, OpenToolkit.OpenGL.ShaderType shadertype, Int32 index, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String name) => instance.GetActiveSubroutineUniformName(program, shadertype, index, bufsize, out length, out name);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="bufsize">
        /// Specifies the size of the buffer whose address is given in name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable into which is written the number of characters copied into name.
        /// </param>
        /// <param name="name">[length: bufsize]
        /// Specifies the address of a buffer that will receive the name of the specified shader subroutine uniform.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformName")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveSubroutineUniformName(Int32 program, OpenToolkit.OpenGL.ShaderType shadertype, Int32 index, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String name) => instance.GetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, out name);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="bufsize">
        /// Specifies the size of the buffer whose address is given in name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable into which is written the number of characters copied into name.
        /// </param>
        /// <param name="name">[length: bufsize]
        /// Specifies the address of a buffer that will receive the name of the specified shader subroutine uniform.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformName")]
        [CLSCompliant(false)]
        public static void GetActiveSubroutineUniformName(UInt32 program, OpenToolkit.OpenGL.ShaderType shadertype, UInt32 index, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String name) => instance.GetActiveSubroutineUniformName(program, shadertype, index, bufsize, out length, out name);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Query the name of an active shader subroutine uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing the subroutine.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the shader subroutine uniform.
        /// </param>
        /// <param name="bufsize">
        /// Specifies the size of the buffer whose address is given in name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable into which is written the number of characters copied into name.
        /// </param>
        /// <param name="name">[length: bufsize]
        /// Specifies the address of a buffer that will receive the name of the specified shader subroutine uniform.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetActiveSubroutineUniformName")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveSubroutineUniformName(UInt32 program, OpenToolkit.OpenGL.ShaderType shadertype, UInt32 index, Int32 bufsize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufsize")] out String name) => instance.GetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, out name);

        /// <summary>[requires: v2.0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.ActiveUniformType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetActiveUniform(program, index, bufSize, out length, out size, out type, out name);

        /// <summary>[requires: v2.0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.ActiveUniformType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetActiveUniform(program, index, bufSize, length, size, type, out name);

        /// <summary>[requires: v2.0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.ActiveUniformType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetActiveUniform(program, index, bufSize, out length, out size, out type, out name);

        /// <summary>[requires: v2.0]
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1]
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1]
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.ActiveUniformType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetActiveUniform(program, index, bufSize, length, size, type, out name);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenToolkit.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] Int32[] @params) => instance.GetActiveUniformBlock(program, uniformBlockIndex, pname, @params);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenToolkit.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] out Int32 @params) => instance.GetActiveUniformBlock(program, uniformBlockIndex, pname, out @params);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenToolkit.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] Int32* @params) => instance.GetActiveUniformBlock(program, uniformBlockIndex, pname, @params);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenToolkit.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] Int32[] @params) => instance.GetActiveUniformBlock(program, uniformBlockIndex, pname, @params);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenToolkit.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] out Int32 @params) => instance.GetActiveUniformBlock(program, uniformBlockIndex, pname, out @params);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Query information about an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,uniformBlockIndex,pname)]
        /// Specifies the address of a variable to receive the result of the query.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenToolkit.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute, CountAttribute(Computed = "program,uniformBlockIndex,pname")] Int32* @params) => instance.GetActiveUniformBlock(program, uniformBlockIndex, pname, @params);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </param>
        /// <param name="uniformBlockName">[length: bufSize]
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockName")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformBlockName) => instance.GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, out length, out uniformBlockName);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </param>
        /// <param name="uniformBlockName">[length: bufSize]
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockName")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformBlockName) => instance.GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, out uniformBlockName);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </param>
        /// <param name="uniformBlockName">[length: bufSize]
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockName")]
        [CLSCompliant(false)]
        public static void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformBlockName) => instance.GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, out length, out uniformBlockName);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the name of an active uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// Specifies the index of the uniform block within program.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer addressed by uniformBlockName.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.
        /// </param>
        /// <param name="uniformBlockName">[length: bufSize]
        /// Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformBlockName")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformBlockName) => instance.GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, out uniformBlockName);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Query the name of an active uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the program containing the active uniform index uniformIndex.
        /// </param>
        /// <param name="uniformIndex">
        /// Specifies the index of the active uniform whose name to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer, in units of GLchar, of the buffer whose address is specified in uniformName.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable that will receive the number of characters that were or would have been written to the buffer addressed by uniformName.
        /// </param>
        /// <param name="uniformName">[length: bufSize]
        /// Specifies the address of a buffer into which the GL will place the name of the active uniform at uniformIndex within program.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformName")]
        [CLSCompliant(false)]
        public static void GetActiveUniformName(Int32 program, Int32 uniformIndex, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformName) => instance.GetActiveUniformName(program, uniformIndex, bufSize, out length, out uniformName);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Query the name of an active uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the program containing the active uniform index uniformIndex.
        /// </param>
        /// <param name="uniformIndex">
        /// Specifies the index of the active uniform whose name to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer, in units of GLchar, of the buffer whose address is specified in uniformName.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable that will receive the number of characters that were or would have been written to the buffer addressed by uniformName.
        /// </param>
        /// <param name="uniformName">[length: bufSize]
        /// Specifies the address of a buffer into which the GL will place the name of the active uniform at uniformIndex within program.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformName")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformName(Int32 program, Int32 uniformIndex, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformName) => instance.GetActiveUniformName(program, uniformIndex, bufSize, length, out uniformName);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Query the name of an active uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the program containing the active uniform index uniformIndex.
        /// </param>
        /// <param name="uniformIndex">
        /// Specifies the index of the active uniform whose name to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer, in units of GLchar, of the buffer whose address is specified in uniformName.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable that will receive the number of characters that were or would have been written to the buffer addressed by uniformName.
        /// </param>
        /// <param name="uniformName">[length: bufSize]
        /// Specifies the address of a buffer into which the GL will place the name of the active uniform at uniformIndex within program.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformName")]
        [CLSCompliant(false)]
        public static void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformName) => instance.GetActiveUniformName(program, uniformIndex, bufSize, out length, out uniformName);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Query the name of an active uniform
        /// </summary>
        /// <param name="program">
        /// Specifies the program containing the active uniform index uniformIndex.
        /// </param>
        /// <param name="uniformIndex">
        /// Specifies the index of the active uniform whose name to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer, in units of GLchar, of the buffer whose address is specified in uniformName.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable that will receive the number of characters that were or would have been written to the buffer addressed by uniformName.
        /// </param>
        /// <param name="uniformName">[length: bufSize]
        /// Specifies the address of a buffer into which the GL will place the name of the active uniform at uniformIndex within program.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformName")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String uniformName) => instance.GetActiveUniformName(program, uniformIndex, bufSize, length, out uniformName);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(Int32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] Int32[] uniformIndices, OpenToolkit.OpenGL.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] Int32[] @params) => instance.GetActiveUniforms(program, uniformCount, uniformIndices, pname, @params);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(Int32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] ref Int32 uniformIndices, OpenToolkit.OpenGL.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] out Int32 @params) => instance.GetActiveUniforms(program, uniformCount, ref uniformIndices, pname, out @params);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniforms(Int32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] Int32* uniformIndices, OpenToolkit.OpenGL.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] Int32* @params) => instance.GetActiveUniforms(program, uniformCount, uniformIndices, pname, @params);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(UInt32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] UInt32[] uniformIndices, OpenToolkit.OpenGL.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] Int32[] @params) => instance.GetActiveUniforms(program, uniformCount, uniformIndices, pname, @params);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static void GetActiveUniforms(UInt32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] ref UInt32 uniformIndices, OpenToolkit.OpenGL.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] out Int32 @params) => instance.GetActiveUniforms(program, uniformCount, ref uniformIndices, pname, out @params);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Returns information about several active uniform variables for the specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
        /// </param>
        /// <param name="uniformIndices">[length: uniformCount]
        /// Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(uniformCount,pname)]
        /// Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetActiveUniformsiv")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniforms(UInt32 program, Int32 uniformCount, [CountAttribute(Parameter = "uniformCount")] UInt32* uniformIndices, OpenToolkit.OpenGL.ActiveUniformParameter pname, [OutAttribute, CountAttribute(Computed = "uniformCount,pname")] Int32* @params) => instance.GetActiveUniforms(program, uniformCount, uniformIndices, pname, @params);

        /// <summary>[requires: v2.0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute, CountAttribute(Count = 1)] out Int32 count, [OutAttribute, CountAttribute(Parameter = "maxCount")] Int32[] shaders) => instance.GetAttachedShaders(program, maxCount, out count, shaders);

        /// <summary>[requires: v2.0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute, CountAttribute(Count = 1)] out Int32 count, [OutAttribute, CountAttribute(Parameter = "maxCount")] out Int32 shaders) => instance.GetAttachedShaders(program, maxCount, out count, out shaders);

        /// <summary>[requires: v2.0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static unsafe void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute, CountAttribute(Count = 1)] Int32* count, [OutAttribute, CountAttribute(Parameter = "maxCount")] Int32* shaders) => instance.GetAttachedShaders(program, maxCount, count, shaders);

        /// <summary>[requires: v2.0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute, CountAttribute(Count = 1)] out Int32 count, [OutAttribute, CountAttribute(Parameter = "maxCount")] UInt32[] shaders) => instance.GetAttachedShaders(program, maxCount, out count, shaders);

        /// <summary>[requires: v2.0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute, CountAttribute(Count = 1)] out Int32 count, [OutAttribute, CountAttribute(Parameter = "maxCount")] out UInt32 shaders) => instance.GetAttachedShaders(program, maxCount, out count, out shaders);

        /// <summary>[requires: v2.0]
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount">
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1]
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount]
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static unsafe void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute, CountAttribute(Count = 1)] Int32* count, [OutAttribute, CountAttribute(Parameter = "maxCount")] UInt32* shaders) => instance.GetAttachedShaders(program, maxCount, count, shaders);

        /// <summary>[requires: v2.0]
        /// Returns the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name">
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        [CLSCompliant(false)]
        public static Int32 GetAttribLocation(Int32 program, String name) => instance.GetAttribLocation(program, name);

        /// <summary>[requires: v2.0]
        /// Returns the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name">
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        [CLSCompliant(false)]
        public static Int32 GetAttribLocation(UInt32 program, String name) => instance.GetAttribLocation(program, name);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenToolkit.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] bool[] data) => instance.GetBoolean(target, index, data);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenToolkit.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] out bool data) => instance.GetBoolean(target, index, out data);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        [CLSCompliant(false)]
        public static unsafe void GetBoolean(OpenToolkit.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] bool* data) => instance.GetBoolean(target, index, data);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenToolkit.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] bool[] data) => instance.GetBoolean(target, index, data);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenToolkit.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] out bool data) => instance.GetBoolean(target, index, out data);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        [CLSCompliant(false)]
        public static unsafe void GetBoolean(OpenToolkit.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] bool* data) => instance.GetBoolean(target, index, data);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static bool GetBoolean(OpenToolkit.OpenGL.GetPName pname) => instance.GetBoolean(pname);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenToolkit.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool[] data) => instance.GetBoolean(pname, data);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenToolkit.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out bool data) => instance.GetBoolean(pname, out data);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static unsafe void GetBoolean(OpenToolkit.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] bool* data) => instance.GetBoolean(pname, data);

        /// <summary>[requires: v3.2]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64[] @params) => instance.GetBufferParameter(target, pname, @params);

        /// <summary>[requires: v3.2]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int64 @params) => instance.GetBufferParameter(target, pname, out @params);

        /// <summary>[requires: v3.2]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameter(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* @params) => instance.GetBufferParameter(target, pname, @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetBufferParameter(target, pname, @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetBufferParameter(target, pname, out @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameter(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetBufferParameter(target, pname, @params);

        /// <summary>[requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.BufferPointer pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params) => instance.GetBufferPointer(target, pname, @params);

        /// <summary>[requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetBufferPointer<T2>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] @params)
            where T2 : struct
         => instance.GetBufferPointer<T2>(target, pname, @params);

        /// <summary>[requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetBufferPointer<T2>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] @params)
            where T2 : struct
         => instance.GetBufferPointer<T2>(target, pname, @params);

        /// <summary>[requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetBufferPointer<T2>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] @params)
            where T2 : struct
         => instance.GetBufferPointer<T2>(target, pname, @params);

        /// <summary>[requires: v1.5]
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static void GetBufferPointer<T2>(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.BufferPointer pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 @params)
            where T2 : struct
         => instance.GetBufferPointer<T2>(target, pname, ref @params);

        /// <summary>[requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] IntPtr data) => instance.GetBufferSubData(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        [CLSCompliant(false)]
        public static void GetBufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
         => instance.GetBufferSubData<T3>(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        [CLSCompliant(false)]
        public static void GetBufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
         => instance.GetBufferSubData<T3>(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        [CLSCompliant(false)]
        public static void GetBufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
         => instance.GetBufferSubData<T3>(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
         => instance.GetBufferSubData<T3>(target, offset, size, ref data);

        /// <summary>[requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [OutAttribute, CountAttribute(Parameter = "size")] IntPtr data) => instance.GetBufferSubData(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        [CLSCompliant(false)]
        public static void GetBufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[] data)
            where T3 : struct
         => instance.GetBufferSubData<T3>(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        [CLSCompliant(false)]
        public static void GetBufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,] data)
            where T3 : struct
         => instance.GetBufferSubData<T3>(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        [CLSCompliant(false)]
        public static void GetBufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T3[,,] data)
            where T3 : struct
         => instance.GetBufferSubData<T3>(target, offset, size, data);

        /// <summary>[requires: v1.5]
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </param>
        /// <param name="size">
        /// Specifies the size in bytes of the data store region being returned.
        /// </param>
        /// <param name="data">[length: size]
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static void GetBufferSubData<T3>(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T3 data)
            where T3 : struct
         => instance.GetBufferSubData<T3>(target, offset, size, ref data);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
        /// </param>
        /// <param name="equation">[length: 4]
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetClipPlane")]
        [CLSCompliant(false)]
        public static void GetClipPlane(OpenToolkit.OpenGL.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] Double[] equation) => instance.GetClipPlane(plane, equation);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
        /// </param>
        /// <param name="equation">[length: 4]
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetClipPlane")]
        [CLSCompliant(false)]
        public static void GetClipPlane(OpenToolkit.OpenGL.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] out Double equation) => instance.GetClipPlane(plane, out equation);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.
        /// </param>
        /// <param name="equation">[length: 4]
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetClipPlane")]
        [CLSCompliant(false)]
        public static unsafe void GetClipPlane(OpenToolkit.OpenGL.ClipPlaneName plane, [OutAttribute, CountAttribute(Count = 4)] Double* equation) => instance.GetClipPlane(plane, equation);

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="table">[length: COMPSIZE(target,format,type)]
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static void GetColorTable(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr table) => instance.GetColorTable(target, format, type, table);

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="table">[length: COMPSIZE(target,format,type)]
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        [CLSCompliant(false)]
        public static void GetColorTable<T3>(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[] table)
            where T3 : struct
         => instance.GetColorTable<T3>(target, format, type, table);

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="table">[length: COMPSIZE(target,format,type)]
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        [CLSCompliant(false)]
        public static void GetColorTable<T3>(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,] table)
            where T3 : struct
         => instance.GetColorTable<T3>(target, format, type, table);

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="table">[length: COMPSIZE(target,format,type)]
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        [CLSCompliant(false)]
        public static void GetColorTable<T3>(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,,] table)
            where T3 : struct
         => instance.GetColorTable<T3>(target, format, type, table);

        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="table">[length: COMPSIZE(target,format,type)]
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTable")]
        public static void GetColorTable<T3>(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T3 table)
            where T3 : struct
         => instance.GetColorTable<T3>(target, format, type, ref table);

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameterfv")]
        [CLSCompliant(false)]
        public static void GetColorTableParameter(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) => instance.GetColorTableParameter(target, pname, @params);

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameterfv")]
        [CLSCompliant(false)]
        public static void GetColorTableParameter(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) => instance.GetColorTableParameter(target, pname, out @params);

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetColorTableParameter(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) => instance.GetColorTableParameter(target, pname, @params);

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameteriv")]
        [CLSCompliant(false)]
        public static void GetColorTableParameter(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetColorTableParameter(target, pname, @params);

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameteriv")]
        [CLSCompliant(false)]
        public static void GetColorTableParameter(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetColorTableParameter(target, pname, out @params);

        /// <summary>
        /// Get color lookup table parameters
        /// </summary>
        /// <param name="target">
        /// The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.
        /// </param>
        /// <param name="pname">
        /// The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to an array where the values of the parameter will be stored.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetColorTableParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetColorTableParameter(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.GetColorTableParameterPNameSgi pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetColorTableParameter(target, pname, @params);

        /// <summary>[requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="img">[length: COMPSIZE(target,level)]
        /// Returns the compressed texture image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static void GetCompressedTexImage(OpenToolkit.OpenGL.TextureTarget target, Int32 level, [OutAttribute, CountAttribute(Computed = "target,level")] IntPtr img) => instance.GetCompressedTexImage(target, level, img);

        /// <summary>[requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="img">[length: COMPSIZE(target,level)]
        /// Returns the compressed texture image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTexImage<T2>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] T2[] img)
            where T2 : struct
         => instance.GetCompressedTexImage<T2>(target, level, img);

        /// <summary>[requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="img">[length: COMPSIZE(target,level)]
        /// Returns the compressed texture image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTexImage<T2>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] T2[,] img)
            where T2 : struct
         => instance.GetCompressedTexImage<T2>(target, level, img);

        /// <summary>[requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="img">[length: COMPSIZE(target,level)]
        /// Returns the compressed texture image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTexImage<T2>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] T2[,,] img)
            where T2 : struct
         => instance.GetCompressedTexImage<T2>(target, level, img);

        /// <summary>[requires: v1.3]
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="img">[length: COMPSIZE(target,level)]
        /// Returns the compressed texture image.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static void GetCompressedTexImage<T2>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level")] ref T2 img)
            where T2 : struct
         => instance.GetCompressedTexImage<T2>(target, level, ref img);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureImage(Int32 texture, Int32 level, Int32 bufSize, [OutAttribute] IntPtr pixels) => instance.GetCompressedTextureImage(texture, level, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureImage<T3>(Int32 texture, Int32 level, Int32 bufSize, [InAttribute, OutAttribute] T3[] pixels)
            where T3 : struct
         => instance.GetCompressedTextureImage<T3>(texture, level, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureImage<T3>(Int32 texture, Int32 level, Int32 bufSize, [InAttribute, OutAttribute] T3[,] pixels)
            where T3 : struct
         => instance.GetCompressedTextureImage<T3>(texture, level, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureImage<T3>(Int32 texture, Int32 level, Int32 bufSize, [InAttribute, OutAttribute] T3[,,] pixels)
            where T3 : struct
         => instance.GetCompressedTextureImage<T3>(texture, level, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureImage<T3>(Int32 texture, Int32 level, Int32 bufSize, [InAttribute, OutAttribute] ref T3 pixels)
            where T3 : struct
         => instance.GetCompressedTextureImage<T3>(texture, level, bufSize, ref pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureImage(UInt32 texture, Int32 level, Int32 bufSize, [OutAttribute] IntPtr pixels) => instance.GetCompressedTextureImage(texture, level, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureImage<T3>(UInt32 texture, Int32 level, Int32 bufSize, [InAttribute, OutAttribute] T3[] pixels)
            where T3 : struct
         => instance.GetCompressedTextureImage<T3>(texture, level, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureImage<T3>(UInt32 texture, Int32 level, Int32 bufSize, [InAttribute, OutAttribute] T3[,] pixels)
            where T3 : struct
         => instance.GetCompressedTextureImage<T3>(texture, level, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureImage<T3>(UInt32 texture, Int32 level, Int32 bufSize, [InAttribute, OutAttribute] T3[,,] pixels)
            where T3 : struct
         => instance.GetCompressedTextureImage<T3>(texture, level, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureImage<T3>(UInt32 texture, Int32 level, Int32 bufSize, [InAttribute, OutAttribute] ref T3 pixels)
            where T3 : struct
         => instance.GetCompressedTextureImage<T3>(texture, level, bufSize, ref pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureSubImage(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Int32 bufSize, [OutAttribute] IntPtr pixels) => instance.GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureSubImage<T9>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Int32 bufSize, [InAttribute, OutAttribute] T9[] pixels)
            where T9 : struct
         => instance.GetCompressedTextureSubImage<T9>(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureSubImage<T9>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Int32 bufSize, [InAttribute, OutAttribute] T9[,] pixels)
            where T9 : struct
         => instance.GetCompressedTextureSubImage<T9>(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureSubImage<T9>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Int32 bufSize, [InAttribute, OutAttribute] T9[,,] pixels)
            where T9 : struct
         => instance.GetCompressedTextureSubImage<T9>(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureSubImage<T9>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Int32 bufSize, [InAttribute, OutAttribute] ref T9 pixels)
            where T9 : struct
         => instance.GetCompressedTextureSubImage<T9>(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, ref pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Int32 bufSize, [OutAttribute] IntPtr pixels) => instance.GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureSubImage<T9>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Int32 bufSize, [InAttribute, OutAttribute] T9[] pixels)
            where T9 : struct
         => instance.GetCompressedTextureSubImage<T9>(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureSubImage<T9>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Int32 bufSize, [InAttribute, OutAttribute] T9[,] pixels)
            where T9 : struct
         => instance.GetCompressedTextureSubImage<T9>(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureSubImage<T9>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Int32 bufSize, [InAttribute, OutAttribute] T9[,,] pixels)
            where T9 : struct
         => instance.GetCompressedTextureSubImage<T9>(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetCompressedTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetCompressedTextureSubImage<T9>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Int32 bufSize, [InAttribute, OutAttribute] ref T9 pixels)
            where T9 : struct
         => instance.GetCompressedTextureSubImage<T9>(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, ref pixels);

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
        /// </param>
        /// <param name="format">
        /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the output image.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static void GetConvolutionFilter(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr image) => instance.GetConvolutionFilter(target, format, type, image);

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
        /// </param>
        /// <param name="format">
        /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the output image.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        [CLSCompliant(false)]
        public static void GetConvolutionFilter<T3>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[] image)
            where T3 : struct
         => instance.GetConvolutionFilter<T3>(target, format, type, image);

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
        /// </param>
        /// <param name="format">
        /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the output image.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        [CLSCompliant(false)]
        public static void GetConvolutionFilter<T3>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,] image)
            where T3 : struct
         => instance.GetConvolutionFilter<T3>(target, format, type, image);

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
        /// </param>
        /// <param name="format">
        /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the output image.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        [CLSCompliant(false)]
        public static void GetConvolutionFilter<T3>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,,] image)
            where T3 : struct
         => instance.GetConvolutionFilter<T3>(target, format, type, image);

        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// The filter to be retrieved. Must be one of Convolution1D or Convolution2D.
        /// </param>
        /// <param name="format">
        /// Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="image">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the output image.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionFilter")]
        public static void GetConvolutionFilter<T3>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T3 image)
            where T3 : struct
         => instance.GetConvolutionFilter<T3>(target, format, type, ref image);

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameterfv")]
        [CLSCompliant(false)]
        public static void GetConvolutionParameter(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) => instance.GetConvolutionParameter(target, pname, @params);

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameterfv")]
        [CLSCompliant(false)]
        public static void GetConvolutionParameter(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) => instance.GetConvolutionParameter(target, pname, out @params);

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetConvolutionParameter(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) => instance.GetConvolutionParameter(target, pname, @params);

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameteriv")]
        [CLSCompliant(false)]
        public static void GetConvolutionParameter(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetConvolutionParameter(target, pname, @params);

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameteriv")]
        [CLSCompliant(false)]
        public static void GetConvolutionParameter(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetConvolutionParameter(target, pname, out @params);

        /// <summary>
        /// Get convolution parameters
        /// </summary>
        /// <param name="target">
        /// The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Pointer to storage for the parameters to be retrieved.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetConvolutionParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetConvolutionParameter(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.ConvolutionParameterExt pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetConvolutionParameter(target, pname, @params);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenToolkit.OpenGL.DebugSource[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenToolkit.OpenGL.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenToolkit.OpenGL.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) => instance.GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, out messageLog);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenToolkit.OpenGL.DebugSource sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenToolkit.OpenGL.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenToolkit.OpenGL.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) => instance.GetDebugMessageLog(count, bufSize, out sources, out types, out ids, out severities, out lengths, out messageLog);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenToolkit.OpenGL.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenToolkit.OpenGL.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] Int32* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenToolkit.OpenGL.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) => instance.GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, out messageLog);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenToolkit.OpenGL.DebugSource[] sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenToolkit.OpenGL.DebugType[] types, [OutAttribute, CountAttribute(Parameter = "count")] UInt32[] ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenToolkit.OpenGL.DebugSeverity[] severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32[] lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) => instance.GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, out messageLog);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] out OpenToolkit.OpenGL.DebugSource sources, [OutAttribute, CountAttribute(Parameter = "count")] out OpenToolkit.OpenGL.DebugType types, [OutAttribute, CountAttribute(Parameter = "count")] out UInt32 ids, [OutAttribute, CountAttribute(Parameter = "count")] out OpenToolkit.OpenGL.DebugSeverity severities, [OutAttribute, CountAttribute(Parameter = "count")] out Int32 lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) => instance.GetDebugMessageLog(count, bufSize, out sources, out types, out ids, out severities, out lengths, out messageLog);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count">
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize">
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count]
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count]
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count]
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count]
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count]
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize]
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "count")] OpenToolkit.OpenGL.DebugSource* sources, [OutAttribute, CountAttribute(Parameter = "count")] OpenToolkit.OpenGL.DebugType* types, [OutAttribute, CountAttribute(Parameter = "count")] UInt32* ids, [OutAttribute, CountAttribute(Parameter = "count")] OpenToolkit.OpenGL.DebugSeverity* severities, [OutAttribute, CountAttribute(Parameter = "count")] Int32* lengths, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String messageLog) => instance.GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, out messageLog);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        [CLSCompliant(false)]
        public static void GetDouble(OpenToolkit.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Double[] data) => instance.GetDouble(target, index, data);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        [CLSCompliant(false)]
        public static void GetDouble(OpenToolkit.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] out Double data) => instance.GetDouble(target, index, out data);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        [CLSCompliant(false)]
        public static unsafe void GetDouble(OpenToolkit.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Double* data) => instance.GetDouble(target, index, data);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        [CLSCompliant(false)]
        public static void GetDouble(OpenToolkit.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Double[] data) => instance.GetDouble(target, index, data);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        [CLSCompliant(false)]
        public static void GetDouble(OpenToolkit.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] out Double data) => instance.GetDouble(target, index, out data);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetDoublei_v")]
        [CLSCompliant(false)]
        public static unsafe void GetDouble(OpenToolkit.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Double* data) => instance.GetDouble(target, index, data);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        [CLSCompliant(false)]
        public static Double GetDouble(OpenToolkit.OpenGL.GetPName pname) => instance.GetDouble(pname);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        [CLSCompliant(false)]
        public static void GetDouble(OpenToolkit.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Double[] data) => instance.GetDouble(pname, data);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        [CLSCompliant(false)]
        public static void GetDouble(OpenToolkit.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Double data) => instance.GetDouble(pname, out data);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
        [CLSCompliant(false)]
        public static unsafe void GetDouble(OpenToolkit.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Double* data) => instance.GetDouble(pname, data);

        /// <summary>[requires: v1.0]
        /// Return error information
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetError")]
        public static OpenToolkit.OpenGL.ErrorCode GetError() => instance.GetError();

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenToolkit.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Single[] data) => instance.GetFloat(target, index, data);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenToolkit.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] out Single data) => instance.GetFloat(target, index, out data);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        [CLSCompliant(false)]
        public static unsafe void GetFloat(OpenToolkit.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Single* data) => instance.GetFloat(target, index, data);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenToolkit.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Single[] data) => instance.GetFloat(target, index, data);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenToolkit.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] out Single data) => instance.GetFloat(target, index, out data);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glGetFloati_v")]
        [CLSCompliant(false)]
        public static unsafe void GetFloat(OpenToolkit.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Single* data) => instance.GetFloat(target, index, data);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static Single GetFloat(OpenToolkit.OpenGL.GetPName pname) => instance.GetFloat(pname);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenToolkit.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] data) => instance.GetFloat(pname, data);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenToolkit.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single data) => instance.GetFloat(pname, out data);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static unsafe void GetFloat(OpenToolkit.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* data) => instance.GetFloat(pname, data);

        /// <summary>[requires: v3.3 or ARB_blend_func_extended|VERSION_3_3]
        /// Query the bindings of color indices to user-defined varying out variables
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to query
        /// </param>
        /// <param name="name">
        /// The name of the user-defined varying out variable whose index to query
        /// </param>
        [AutoGenerated(Category = "ARB_blend_func_extended|VERSION_3_3", Version = "3.3", EntryPoint = "glGetFragDataIndex")]
        [CLSCompliant(false)]
        public static Int32 GetFragDataIndex(Int32 program, String name) => instance.GetFragDataIndex(program, name);

        /// <summary>[requires: v3.3 or ARB_blend_func_extended|VERSION_3_3]
        /// Query the bindings of color indices to user-defined varying out variables
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to query
        /// </param>
        /// <param name="name">
        /// The name of the user-defined varying out variable whose index to query
        /// </param>
        [AutoGenerated(Category = "ARB_blend_func_extended|VERSION_3_3", Version = "3.3", EntryPoint = "glGetFragDataIndex")]
        [CLSCompliant(false)]
        public static Int32 GetFragDataIndex(UInt32 program, String name) => instance.GetFragDataIndex(program, name);

        /// <summary>[requires: v3.0]
        /// Query the bindings of color numbers to user-defined varying out variables
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to query
        /// </param>
        /// <param name="name">[length: COMPSIZE(name)]
        /// The name of the user-defined varying out variable whose binding to query
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        [CLSCompliant(false)]
        public static Int32 GetFragDataLocation(Int32 program, [CountAttribute(Computed = "name")] String name) => instance.GetFragDataLocation(program, name);

        /// <summary>[requires: v3.0]
        /// Query the bindings of color numbers to user-defined varying out variables
        /// </summary>
        /// <param name="program">
        /// The name of the program containing varying out variable whose binding to query
        /// </param>
        /// <param name="name">[length: COMPSIZE(name)]
        /// The name of the user-defined varying out variable whose binding to query
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        [CLSCompliant(false)]
        public static Int32 GetFragDataLocation(UInt32 program, [CountAttribute(Computed = "name")] String name) => instance.GetFragDataLocation(program, name);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment within target
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of attachment to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetFramebufferAttachmentParameter(target, attachment, pname, @params);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment within target
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of attachment to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetFramebufferAttachmentParameter(target, attachment, pname, out @params);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about attachments of a bound framebuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation.
        /// </param>
        /// <param name="attachment">
        /// Specifies the attachment within target
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of attachment to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable receive the value of pname for attachment.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetFramebufferAttachmentParameter(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.FramebufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetFramebufferAttachmentParameter(target, attachment, pname, @params);

        /// <summary>[requires: v4.3 or ARB_framebuffer_no_attachments|VERSION_4_3]
        /// Retrieve a named parameter from a framebuffer
        /// </summary>
        /// <param name="target">
        /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
        /// </param>
        /// <param name="pname">
        /// A token indicating the parameter to be retrieved.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// The address of a variable to receive the value of the parameter named pname.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_no_attachments|VERSION_4_3", Version = "4.3", EntryPoint = "glGetFramebufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetFramebufferParameter(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferDefaultParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetFramebufferParameter(target, pname, @params);

        /// <summary>[requires: v4.3 or ARB_framebuffer_no_attachments|VERSION_4_3]
        /// Retrieve a named parameter from a framebuffer
        /// </summary>
        /// <param name="target">
        /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
        /// </param>
        /// <param name="pname">
        /// A token indicating the parameter to be retrieved.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// The address of a variable to receive the value of the parameter named pname.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_no_attachments|VERSION_4_3", Version = "4.3", EntryPoint = "glGetFramebufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetFramebufferParameter(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferDefaultParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetFramebufferParameter(target, pname, out @params);

        /// <summary>[requires: v4.3 or ARB_framebuffer_no_attachments|VERSION_4_3]
        /// Retrieve a named parameter from a framebuffer
        /// </summary>
        /// <param name="target">
        /// The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.
        /// </param>
        /// <param name="pname">
        /// A token indicating the parameter to be retrieved.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// The address of a variable to receive the value of the parameter named pname.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_no_attachments|VERSION_4_3", Version = "4.3", EntryPoint = "glGetFramebufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetFramebufferParameter(OpenToolkit.OpenGL.FramebufferTarget target, OpenToolkit.OpenGL.FramebufferDefaultParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetFramebufferParameter(target, pname, @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetGraphicsResetStatus")]
        public static OpenToolkit.OpenGL.ResetStatus GetGraphicsResetStatus() => instance.GetGraphicsResetStatus();

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        /// <param name="reset">
        /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
        /// </param>
        /// <param name="format">
        /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">[length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned histogram table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static void GetHistogram(OpenToolkit.OpenGL.HistogramTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values) => instance.GetHistogram(target, reset, format, type, values);

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        /// <param name="reset">
        /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
        /// </param>
        /// <param name="format">
        /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">[length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned histogram table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        [CLSCompliant(false)]
        public static void GetHistogram<T4>(OpenToolkit.OpenGL.HistogramTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[] values)
            where T4 : struct
         => instance.GetHistogram<T4>(target, reset, format, type, values);

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        /// <param name="reset">
        /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
        /// </param>
        /// <param name="format">
        /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">[length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned histogram table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        [CLSCompliant(false)]
        public static void GetHistogram<T4>(OpenToolkit.OpenGL.HistogramTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,] values)
            where T4 : struct
         => instance.GetHistogram<T4>(target, reset, format, type, values);

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        /// <param name="reset">
        /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
        /// </param>
        /// <param name="format">
        /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">[length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned histogram table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        [CLSCompliant(false)]
        public static void GetHistogram<T4>(OpenToolkit.OpenGL.HistogramTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,,] values)
            where T4 : struct
         => instance.GetHistogram<T4>(target, reset, format, type, values);

        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        /// <param name="reset">
        /// If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.
        /// </param>
        /// <param name="format">
        /// The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">[length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned histogram table.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogram")]
        public static void GetHistogram<T4>(OpenToolkit.OpenGL.HistogramTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T4 values)
            where T4 : struct
         => instance.GetHistogram<T4>(target, reset, format, type, ref values);

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameterfv")]
        [CLSCompliant(false)]
        public static void GetHistogramParameter(OpenToolkit.OpenGL.HistogramTargetExt target, OpenToolkit.OpenGL.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) => instance.GetHistogramParameter(target, pname, @params);

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameterfv")]
        [CLSCompliant(false)]
        public static void GetHistogramParameter(OpenToolkit.OpenGL.HistogramTargetExt target, OpenToolkit.OpenGL.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) => instance.GetHistogramParameter(target, pname, out @params);

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetHistogramParameter(OpenToolkit.OpenGL.HistogramTargetExt target, OpenToolkit.OpenGL.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) => instance.GetHistogramParameter(target, pname, @params);

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameteriv")]
        [CLSCompliant(false)]
        public static void GetHistogramParameter(OpenToolkit.OpenGL.HistogramTargetExt target, OpenToolkit.OpenGL.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetHistogramParameter(target, pname, @params);

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameteriv")]
        [CLSCompliant(false)]
        public static void GetHistogramParameter(OpenToolkit.OpenGL.HistogramTargetExt target, OpenToolkit.OpenGL.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetHistogramParameter(target, pname, out @params);

        /// <summary>
        /// Get histogram parameters
        /// </summary>
        /// <param name="target">
        /// Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetHistogramParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetHistogramParameter(OpenToolkit.OpenGL.HistogramTargetExt target, OpenToolkit.OpenGL.GetHistogramParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetHistogramParameter(target, pname, @params);

        /// <summary>[requires: v3.2]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenToolkit.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64[] data) => instance.GetInteger64(target, index, data);

        /// <summary>[requires: v3.2]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenToolkit.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] out Int64 data) => instance.GetInteger64(target, index, out data);

        /// <summary>[requires: v3.2]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenToolkit.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64* data) => instance.GetInteger64(target, index, data);

        /// <summary>[requires: v3.2]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenToolkit.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64[] data) => instance.GetInteger64(target, index, data);

        /// <summary>[requires: v3.2]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenToolkit.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] out Int64 data) => instance.GetInteger64(target, index, out data);

        /// <summary>[requires: v3.2]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenToolkit.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64* data) => instance.GetInteger64(target, index, data);

        /// <summary>[requires: v3.2]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use GetIndexedPName overload instead")]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenToolkit.OpenGL.Version32 target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64[] data) => instance.GetInteger64(target, index, data);

        /// <summary>[requires: v3.2]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use GetIndexedPName overload instead")]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenToolkit.OpenGL.Version32 target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] out Int64 data) => instance.GetInteger64(target, index, out data);

        /// <summary>[requires: v3.2]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use GetIndexedPName overload instead")]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenToolkit.OpenGL.Version32 target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64* data) => instance.GetInteger64(target, index, data);

        /// <summary>[requires: v3.2]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use GetIndexedPName overload instead")]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenToolkit.OpenGL.Version32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64[] data) => instance.GetInteger64(target, index, data);

        /// <summary>[requires: v3.2]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use GetIndexedPName overload instead")]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenToolkit.OpenGL.Version32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] out Int64 data) => instance.GetInteger64(target, index, out data);

        /// <summary>[requires: v3.2]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [Obsolete("Use GetIndexedPName overload instead")]
        [AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenToolkit.OpenGL.Version32 target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int64* data) => instance.GetInteger64(target, index, data);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]</summary>
        /// <param name="pname"></param>
        [Obsolete("Use GetPName overload instead")]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static Int64 GetInteger64(OpenToolkit.OpenGL.ArbSync pname) => instance.GetInteger64(pname);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]</summary>
        /// <param name="pname"></param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static Int64 GetInteger64(OpenToolkit.OpenGL.GetPName pname) => instance.GetInteger64(pname);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use GetPName overload instead")]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenToolkit.OpenGL.ArbSync pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64[] data) => instance.GetInteger64(pname, data);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use GetPName overload instead")]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenToolkit.OpenGL.ArbSync pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int64 data) => instance.GetInteger64(pname, out data);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use GetPName overload instead")]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenToolkit.OpenGL.ArbSync pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* data) => instance.GetInteger64(pname, data);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenToolkit.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64[] data) => instance.GetInteger64(pname, data);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static void GetInteger64(OpenToolkit.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int64 data) => instance.GetInteger64(pname, out data);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger64(OpenToolkit.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* data) => instance.GetInteger64(pname, data);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenToolkit.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Int32[] data) => instance.GetInteger(target, index, data);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenToolkit.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] out Int32 data) => instance.GetInteger(target, index, out data);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenToolkit.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute, CountAttribute(Computed = "target")] Int32* data) => instance.GetInteger(target, index, data);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenToolkit.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int32[] data) => instance.GetInteger(target, index, data);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenToolkit.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] out Int32 data) => instance.GetInteger(target, index, out data);

        /// <summary>[requires: v3.0 or ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1]</summary>
        /// <param name="target"></param>
        /// <param name="index"></param>
        /// <param name="data">[length: COMPSIZE(target)]</param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_0|VERSION_3_1", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenToolkit.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute, CountAttribute(Computed = "target")] Int32* data) => instance.GetInteger(target, index, data);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static Int32 GetInteger(OpenToolkit.OpenGL.GetPName pname) => instance.GetInteger(pname);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenToolkit.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] data) => instance.GetInteger(pname, data);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenToolkit.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 data) => instance.GetInteger(pname, out data);

        /// <summary>[requires: v1.0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenToolkit.OpenGL.GetPName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* data) => instance.GetInteger(pname, data);

        /// <summary>[requires: v4.3 or ARB_internalformat_query2|VERSION_4_3]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, TextureCubeMap, TextureCubeMapArray, TextureRectangle, TextureBuffer, Renderbuffer, Texture2DMultisample or Texture2DMultisampleArray.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </param>
        /// <param name="@params">[length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_internalformat_query2|VERSION_4_3", Version = "4.3", EntryPoint = "glGetInternalformati64v")]
        [CLSCompliant(false)]
        public static void GetInternalformat(OpenToolkit.OpenGL.ImageTarget target, OpenToolkit.OpenGL.SizedInternalFormat internalformat, OpenToolkit.OpenGL.InternalFormatParameter pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int64[] @params) => instance.GetInternalformat(target, internalformat, pname, bufSize, @params);

        /// <summary>[requires: v4.3 or ARB_internalformat_query2|VERSION_4_3]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, TextureCubeMap, TextureCubeMapArray, TextureRectangle, TextureBuffer, Renderbuffer, Texture2DMultisample or Texture2DMultisampleArray.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </param>
        /// <param name="@params">[length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_internalformat_query2|VERSION_4_3", Version = "4.3", EntryPoint = "glGetInternalformati64v")]
        [CLSCompliant(false)]
        public static void GetInternalformat(OpenToolkit.OpenGL.ImageTarget target, OpenToolkit.OpenGL.SizedInternalFormat internalformat, OpenToolkit.OpenGL.InternalFormatParameter pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int64 @params) => instance.GetInternalformat(target, internalformat, pname, bufSize, out @params);

        /// <summary>[requires: v4.3 or ARB_internalformat_query2|VERSION_4_3]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, TextureCubeMap, TextureCubeMapArray, TextureRectangle, TextureBuffer, Renderbuffer, Texture2DMultisample or Texture2DMultisampleArray.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </param>
        /// <param name="@params">[length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_internalformat_query2|VERSION_4_3", Version = "4.3", EntryPoint = "glGetInternalformati64v")]
        [CLSCompliant(false)]
        public static unsafe void GetInternalformat(OpenToolkit.OpenGL.ImageTarget target, OpenToolkit.OpenGL.SizedInternalFormat internalformat, OpenToolkit.OpenGL.InternalFormatParameter pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int64* @params) => instance.GetInternalformat(target, internalformat, pname, bufSize, @params);

        /// <summary>[requires: v4.2 or ARB_internalformat_query|VERSION_4_2]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, TextureCubeMap, TextureCubeMapArray, TextureRectangle, TextureBuffer, Renderbuffer, Texture2DMultisample or Texture2DMultisampleArray.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </param>
        /// <param name="@params">[length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_internalformat_query|VERSION_4_2", Version = "4.2", EntryPoint = "glGetInternalformativ")]
        [CLSCompliant(false)]
        public static void GetInternalformat(OpenToolkit.OpenGL.ImageTarget target, OpenToolkit.OpenGL.SizedInternalFormat internalformat, OpenToolkit.OpenGL.InternalFormatParameter pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32[] @params) => instance.GetInternalformat(target, internalformat, pname, bufSize, @params);

        /// <summary>[requires: v4.2 or ARB_internalformat_query|VERSION_4_2]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, TextureCubeMap, TextureCubeMapArray, TextureRectangle, TextureBuffer, Renderbuffer, Texture2DMultisample or Texture2DMultisampleArray.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </param>
        /// <param name="@params">[length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_internalformat_query|VERSION_4_2", Version = "4.2", EntryPoint = "glGetInternalformativ")]
        [CLSCompliant(false)]
        public static void GetInternalformat(OpenToolkit.OpenGL.ImageTarget target, OpenToolkit.OpenGL.SizedInternalFormat internalformat, OpenToolkit.OpenGL.InternalFormatParameter pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int32 @params) => instance.GetInternalformat(target, internalformat, pname, bufSize, out @params);

        /// <summary>[requires: v4.2 or ARB_internalformat_query|VERSION_4_2]
        /// Retrieve information about implementation-dependent support for internal formats
        /// </summary>
        /// <param name="target">
        /// Indicates the usage of the internal format. target must be Texture1D, Texture1DArray, Texture2D, Texture2DArray, Texture3D, TextureCubeMap, TextureCubeMapArray, TextureRectangle, TextureBuffer, Renderbuffer, Texture2DMultisample or Texture2DMultisampleArray.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format about which to retrieve information.
        /// </param>
        /// <param name="pname">
        /// Specifies the type of information to query.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of basic machine units that may be written to params by the function.
        /// </param>
        /// <param name="@params">[length: bufSize]
        /// Specifies the address of a variable into which to write the retrieved information.
        /// </param>
        [AutoGenerated(Category = "ARB_internalformat_query|VERSION_4_2", Version = "4.2", EntryPoint = "glGetInternalformativ")]
        [CLSCompliant(false)]
        public static unsafe void GetInternalformat(OpenToolkit.OpenGL.ImageTarget target, OpenToolkit.OpenGL.SizedInternalFormat internalformat, OpenToolkit.OpenGL.InternalFormatParameter pname, Int32 bufSize, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params) => instance.GetInternalformat(target, internalformat, pname, bufSize, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetLightfv")]
        [CLSCompliant(false)]
        public static void GetLight(OpenToolkit.OpenGL.LightName light, OpenToolkit.OpenGL.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) => instance.GetLight(light, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetLightfv")]
        [CLSCompliant(false)]
        public static void GetLight(OpenToolkit.OpenGL.LightName light, OpenToolkit.OpenGL.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) => instance.GetLight(light, pname, out @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetLightfv")]
        [CLSCompliant(false)]
        public static unsafe void GetLight(OpenToolkit.OpenGL.LightName light, OpenToolkit.OpenGL.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) => instance.GetLight(light, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetLightiv")]
        [CLSCompliant(false)]
        public static void GetLight(OpenToolkit.OpenGL.LightName light, OpenToolkit.OpenGL.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetLight(light, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetLightiv")]
        [CLSCompliant(false)]
        public static void GetLight(OpenToolkit.OpenGL.LightName light, OpenToolkit.OpenGL.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetLight(light, pname, out @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return light source parameter values
        /// </summary>
        /// <param name="light">
        /// Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetLightiv")]
        [CLSCompliant(false)]
        public static unsafe void GetLight(OpenToolkit.OpenGL.LightName light, OpenToolkit.OpenGL.LightParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetLight(light, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">[length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapdv")]
        [CLSCompliant(false)]
        public static void GetMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] Double[] v) => instance.GetMap(target, query, v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">[length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapdv")]
        [CLSCompliant(false)]
        public static void GetMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] out Double v) => instance.GetMap(target, query, out v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">[length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapdv")]
        [CLSCompliant(false)]
        public static unsafe void GetMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] Double* v) => instance.GetMap(target, query, v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">[length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapfv")]
        [CLSCompliant(false)]
        public static void GetMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] Single[] v) => instance.GetMap(target, query, v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">[length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapfv")]
        [CLSCompliant(false)]
        public static void GetMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] out Single v) => instance.GetMap(target, query, out v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">[length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapfv")]
        [CLSCompliant(false)]
        public static unsafe void GetMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] Single* v) => instance.GetMap(target, query, v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">[length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapiv")]
        [CLSCompliant(false)]
        public static void GetMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] Int32[] v) => instance.GetMap(target, query, v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">[length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapiv")]
        [CLSCompliant(false)]
        public static void GetMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] out Int32 v) => instance.GetMap(target, query, out v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return evaluator parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.
        /// </param>
        /// <param name="query">
        /// Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.
        /// </param>
        /// <param name="v">[length: COMPSIZE(target,query)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMapiv")]
        [CLSCompliant(false)]
        public static unsafe void GetMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.GetMapQuery query, [OutAttribute, CountAttribute(Computed = "target,query")] Int32* v) => instance.GetMap(target, query, v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        [CLSCompliant(false)]
        public static void GetMaterial(OpenToolkit.OpenGL.MaterialFace face, OpenToolkit.OpenGL.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) => instance.GetMaterial(face, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        [CLSCompliant(false)]
        public static void GetMaterial(OpenToolkit.OpenGL.MaterialFace face, OpenToolkit.OpenGL.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) => instance.GetMaterial(face, pname, out @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        [CLSCompliant(false)]
        public static unsafe void GetMaterial(OpenToolkit.OpenGL.MaterialFace face, OpenToolkit.OpenGL.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) => instance.GetMaterial(face, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMaterialiv")]
        [CLSCompliant(false)]
        public static void GetMaterial(OpenToolkit.OpenGL.MaterialFace face, OpenToolkit.OpenGL.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetMaterial(face, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMaterialiv")]
        [CLSCompliant(false)]
        public static void GetMaterial(OpenToolkit.OpenGL.MaterialFace face, OpenToolkit.OpenGL.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetMaterial(face, pname, out @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return material parameters
        /// </summary>
        /// <param name="face">
        /// Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.
        /// </param>
        /// <param name="pname">
        /// Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetMaterialiv")]
        [CLSCompliant(false)]
        public static unsafe void GetMaterial(OpenToolkit.OpenGL.MaterialFace face, OpenToolkit.OpenGL.MaterialParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetMaterial(face, pname, @params);

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="reset">
        /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
        /// </param>
        /// <param name="format">
        /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">[length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static void GetMinmax(OpenToolkit.OpenGL.MinmaxTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr values) => instance.GetMinmax(target, reset, format, type, values);

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="reset">
        /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
        /// </param>
        /// <param name="format">
        /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">[length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        [CLSCompliant(false)]
        public static void GetMinmax<T4>(OpenToolkit.OpenGL.MinmaxTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[] values)
            where T4 : struct
         => instance.GetMinmax<T4>(target, reset, format, type, values);

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="reset">
        /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
        /// </param>
        /// <param name="format">
        /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">[length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        [CLSCompliant(false)]
        public static void GetMinmax<T4>(OpenToolkit.OpenGL.MinmaxTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,] values)
            where T4 : struct
         => instance.GetMinmax<T4>(target, reset, format, type, values);

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="reset">
        /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
        /// </param>
        /// <param name="format">
        /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">[length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        [CLSCompliant(false)]
        public static void GetMinmax<T4>(OpenToolkit.OpenGL.MinmaxTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,,] values)
            where T4 : struct
         => instance.GetMinmax<T4>(target, reset, format, type, values);

        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="reset">
        /// If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.
        /// </param>
        /// <param name="format">
        /// The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="values">[length: COMPSIZE(target,format,type)]
        /// A pointer to storage for the returned values.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmax")]
        public static void GetMinmax<T4>(OpenToolkit.OpenGL.MinmaxTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T4 values)
            where T4 : struct
         => instance.GetMinmax<T4>(target, reset, format, type, ref values);

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameterfv")]
        [CLSCompliant(false)]
        public static void GetMinmaxParameter(OpenToolkit.OpenGL.MinmaxTargetExt target, OpenToolkit.OpenGL.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) => instance.GetMinmaxParameter(target, pname, @params);

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameterfv")]
        [CLSCompliant(false)]
        public static void GetMinmaxParameter(OpenToolkit.OpenGL.MinmaxTargetExt target, OpenToolkit.OpenGL.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) => instance.GetMinmaxParameter(target, pname, out @params);

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetMinmaxParameter(OpenToolkit.OpenGL.MinmaxTargetExt target, OpenToolkit.OpenGL.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) => instance.GetMinmaxParameter(target, pname, @params);

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameteriv")]
        [CLSCompliant(false)]
        public static void GetMinmaxParameter(OpenToolkit.OpenGL.MinmaxTargetExt target, OpenToolkit.OpenGL.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetMinmaxParameter(target, pname, @params);

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameteriv")]
        [CLSCompliant(false)]
        public static void GetMinmaxParameter(OpenToolkit.OpenGL.MinmaxTargetExt target, OpenToolkit.OpenGL.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetMinmaxParameter(target, pname, out @params);

        /// <summary>
        /// Get minmax parameters
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        /// <param name="pname">
        /// The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// A pointer to storage for the retrieved parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetMinmaxParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetMinmaxParameter(OpenToolkit.OpenGL.MinmaxTargetExt target, OpenToolkit.OpenGL.GetMinmaxParameterPNameExt pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetMinmaxParameter(target, pname, @params);

        /// <summary>[requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// Specifies the sample parameter name. pname must be SamplePosition.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the sample whose position to query.
        /// </param>
        /// <param name="val">[length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the position of the sample.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        [CLSCompliant(false)]
        public static void GetMultisample(OpenToolkit.OpenGL.GetMultisamplePName pname, Int32 index, [OutAttribute, CountAttribute(Computed = "pname")] Single[] val) => instance.GetMultisample(pname, index, val);

        /// <summary>[requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// Specifies the sample parameter name. pname must be SamplePosition.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the sample whose position to query.
        /// </param>
        /// <param name="val">[length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the position of the sample.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        [CLSCompliant(false)]
        public static void GetMultisample(OpenToolkit.OpenGL.GetMultisamplePName pname, Int32 index, [OutAttribute, CountAttribute(Computed = "pname")] out Single val) => instance.GetMultisample(pname, index, out val);

        /// <summary>[requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// Specifies the sample parameter name. pname must be SamplePosition.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the sample whose position to query.
        /// </param>
        /// <param name="val">[length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the position of the sample.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        [CLSCompliant(false)]
        public static unsafe void GetMultisample(OpenToolkit.OpenGL.GetMultisamplePName pname, Int32 index, [OutAttribute, CountAttribute(Computed = "pname")] Single* val) => instance.GetMultisample(pname, index, val);

        /// <summary>[requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// Specifies the sample parameter name. pname must be SamplePosition.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the sample whose position to query.
        /// </param>
        /// <param name="val">[length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the position of the sample.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        [CLSCompliant(false)]
        public static void GetMultisample(OpenToolkit.OpenGL.GetMultisamplePName pname, UInt32 index, [OutAttribute, CountAttribute(Computed = "pname")] Single[] val) => instance.GetMultisample(pname, index, val);

        /// <summary>[requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// Specifies the sample parameter name. pname must be SamplePosition.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the sample whose position to query.
        /// </param>
        /// <param name="val">[length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the position of the sample.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        [CLSCompliant(false)]
        public static void GetMultisample(OpenToolkit.OpenGL.GetMultisamplePName pname, UInt32 index, [OutAttribute, CountAttribute(Computed = "pname")] out Single val) => instance.GetMultisample(pname, index, out val);

        /// <summary>[requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Retrieve the location of a sample
        /// </summary>
        /// <param name="pname">
        /// Specifies the sample parameter name. pname must be SamplePosition.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the sample whose position to query.
        /// </param>
        /// <param name="val">[length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the position of the sample.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glGetMultisamplefv")]
        [CLSCompliant(false)]
        public static unsafe void GetMultisample(OpenToolkit.OpenGL.GetMultisamplePName pname, UInt32 index, [OutAttribute, CountAttribute(Computed = "pname")] Single* val) => instance.GetMultisample(pname, index, val);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetNamedBufferParameter(Int32 buffer, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute] Int64[] @params) => instance.GetNamedBufferParameter(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetNamedBufferParameter(Int32 buffer, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute] out Int64 @params) => instance.GetNamedBufferParameter(buffer, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteri64v")]
        [CLSCompliant(false)]
        public static unsafe void GetNamedBufferParameter(Int32 buffer, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute] Int64* @params) => instance.GetNamedBufferParameter(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetNamedBufferParameter(UInt32 buffer, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute] Int64[] @params) => instance.GetNamedBufferParameter(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteri64v")]
        [CLSCompliant(false)]
        public static void GetNamedBufferParameter(UInt32 buffer, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute] out Int64 @params) => instance.GetNamedBufferParameter(buffer, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteri64v")]
        [CLSCompliant(false)]
        public static unsafe void GetNamedBufferParameter(UInt32 buffer, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute] Int64* @params) => instance.GetNamedBufferParameter(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedBufferParameter(Int32 buffer, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute] Int32[] @params) => instance.GetNamedBufferParameter(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedBufferParameter(Int32 buffer, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute] out Int32 @params) => instance.GetNamedBufferParameter(buffer, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetNamedBufferParameter(Int32 buffer, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute] Int32* @params) => instance.GetNamedBufferParameter(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedBufferParameter(UInt32 buffer, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute] Int32[] @params) => instance.GetNamedBufferParameter(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedBufferParameter(UInt32 buffer, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute] out Int32 @params) => instance.GetNamedBufferParameter(buffer, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetNamedBufferParameter(UInt32 buffer, OpenToolkit.OpenGL.BufferParameterName pname, [OutAttribute] Int32* @params) => instance.GetNamedBufferParameter(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetNamedBufferPointer(Int32 buffer, OpenToolkit.OpenGL.BufferPointer pname, [OutAttribute] IntPtr @params) => instance.GetNamedBufferPointer(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetNamedBufferPointer<T2>(Int32 buffer, OpenToolkit.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] T2[] @params)
            where T2 : struct
         => instance.GetNamedBufferPointer<T2>(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetNamedBufferPointer<T2>(Int32 buffer, OpenToolkit.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] T2[,] @params)
            where T2 : struct
         => instance.GetNamedBufferPointer<T2>(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetNamedBufferPointer<T2>(Int32 buffer, OpenToolkit.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] T2[,,] @params)
            where T2 : struct
         => instance.GetNamedBufferPointer<T2>(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetNamedBufferPointer<T2>(Int32 buffer, OpenToolkit.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] ref T2 @params)
            where T2 : struct
         => instance.GetNamedBufferPointer<T2>(buffer, pname, ref @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetNamedBufferPointer(UInt32 buffer, OpenToolkit.OpenGL.BufferPointer pname, [OutAttribute] IntPtr @params) => instance.GetNamedBufferPointer(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetNamedBufferPointer<T2>(UInt32 buffer, OpenToolkit.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] T2[] @params)
            where T2 : struct
         => instance.GetNamedBufferPointer<T2>(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetNamedBufferPointer<T2>(UInt32 buffer, OpenToolkit.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] T2[,] @params)
            where T2 : struct
         => instance.GetNamedBufferPointer<T2>(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetNamedBufferPointer<T2>(UInt32 buffer, OpenToolkit.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] T2[,,] @params)
            where T2 : struct
         => instance.GetNamedBufferPointer<T2>(buffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferPointerv")]
        [CLSCompliant(false)]
        public static void GetNamedBufferPointer<T2>(UInt32 buffer, OpenToolkit.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] ref T2 @params)
            where T2 : struct
         => instance.GetNamedBufferPointer<T2>(buffer, pname, ref @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData(Int32 buffer, IntPtr offset, Int32 size, [OutAttribute] IntPtr data) => instance.GetNamedBufferSubData(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData(Int32 buffer, IntPtr offset, IntPtr size, [OutAttribute] IntPtr data) => instance.GetNamedBufferSubData(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData(UInt32 buffer, IntPtr offset, Int32 size, [OutAttribute] IntPtr data) => instance.GetNamedBufferSubData(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData(UInt32 buffer, IntPtr offset, IntPtr size, [OutAttribute] IntPtr data) => instance.GetNamedBufferSubData(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
         => instance.GetNamedBufferSubData<T3>(buffer, offset, size, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="attachment"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedFramebufferAttachmentParameter(Int32 framebuffer, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.FramebufferParameterName pname, [OutAttribute] Int32[] @params) => instance.GetNamedFramebufferAttachmentParameter(framebuffer, attachment, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="attachment"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedFramebufferAttachmentParameter(Int32 framebuffer, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.FramebufferParameterName pname, [OutAttribute] out Int32 @params) => instance.GetNamedFramebufferAttachmentParameter(framebuffer, attachment, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="attachment"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetNamedFramebufferAttachmentParameter(Int32 framebuffer, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.FramebufferParameterName pname, [OutAttribute] Int32* @params) => instance.GetNamedFramebufferAttachmentParameter(framebuffer, attachment, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="attachment"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.FramebufferParameterName pname, [OutAttribute] Int32[] @params) => instance.GetNamedFramebufferAttachmentParameter(framebuffer, attachment, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="attachment"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.FramebufferParameterName pname, [OutAttribute] out Int32 @params) => instance.GetNamedFramebufferAttachmentParameter(framebuffer, attachment, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="attachment"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.FramebufferParameterName pname, [OutAttribute] Int32* @params) => instance.GetNamedFramebufferAttachmentParameter(framebuffer, attachment, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedFramebufferParameter(Int32 framebuffer, OpenToolkit.OpenGL.FramebufferDefaultParameter pname, [OutAttribute] Int32[] param) => instance.GetNamedFramebufferParameter(framebuffer, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedFramebufferParameter(Int32 framebuffer, OpenToolkit.OpenGL.FramebufferDefaultParameter pname, [OutAttribute] out Int32 param) => instance.GetNamedFramebufferParameter(framebuffer, pname, out param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetNamedFramebufferParameter(Int32 framebuffer, OpenToolkit.OpenGL.FramebufferDefaultParameter pname, [OutAttribute] Int32* param) => instance.GetNamedFramebufferParameter(framebuffer, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedFramebufferParameter(UInt32 framebuffer, OpenToolkit.OpenGL.FramebufferDefaultParameter pname, [OutAttribute] Int32[] param) => instance.GetNamedFramebufferParameter(framebuffer, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedFramebufferParameter(UInt32 framebuffer, OpenToolkit.OpenGL.FramebufferDefaultParameter pname, [OutAttribute] out Int32 param) => instance.GetNamedFramebufferParameter(framebuffer, pname, out param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedFramebufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetNamedFramebufferParameter(UInt32 framebuffer, OpenToolkit.OpenGL.FramebufferDefaultParameter pname, [OutAttribute] Int32* param) => instance.GetNamedFramebufferParameter(framebuffer, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="renderbuffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedRenderbufferParameter(Int32 renderbuffer, OpenToolkit.OpenGL.RenderbufferParameterName pname, [OutAttribute] Int32[] @params) => instance.GetNamedRenderbufferParameter(renderbuffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="renderbuffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedRenderbufferParameter(Int32 renderbuffer, OpenToolkit.OpenGL.RenderbufferParameterName pname, [OutAttribute] out Int32 @params) => instance.GetNamedRenderbufferParameter(renderbuffer, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="renderbuffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetNamedRenderbufferParameter(Int32 renderbuffer, OpenToolkit.OpenGL.RenderbufferParameterName pname, [OutAttribute] Int32* @params) => instance.GetNamedRenderbufferParameter(renderbuffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="renderbuffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedRenderbufferParameter(UInt32 renderbuffer, OpenToolkit.OpenGL.RenderbufferParameterName pname, [OutAttribute] Int32[] @params) => instance.GetNamedRenderbufferParameter(renderbuffer, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="renderbuffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetNamedRenderbufferParameter(UInt32 renderbuffer, OpenToolkit.OpenGL.RenderbufferParameterName pname, [OutAttribute] out Int32 @params) => instance.GetNamedRenderbufferParameter(renderbuffer, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="renderbuffer"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetNamedRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetNamedRenderbufferParameter(UInt32 renderbuffer, OpenToolkit.OpenGL.RenderbufferParameterName pname, [OutAttribute] Int32* @params) => instance.GetNamedRenderbufferParameter(renderbuffer, pname, @params);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="table"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnColorTable")]
        public static void GetnColorTable(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [OutAttribute] IntPtr table) => instance.GetnColorTable(target, format, type, bufSize, table);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="table"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnColorTable")]
        [CLSCompliant(false)]
        public static void GetnColorTable<T4>(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T4[] table)
            where T4 : struct
         => instance.GetnColorTable<T4>(target, format, type, bufSize, table);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="table"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnColorTable")]
        [CLSCompliant(false)]
        public static void GetnColorTable<T4>(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T4[,] table)
            where T4 : struct
         => instance.GetnColorTable<T4>(target, format, type, bufSize, table);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="table"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnColorTable")]
        [CLSCompliant(false)]
        public static void GetnColorTable<T4>(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T4[,,] table)
            where T4 : struct
         => instance.GetnColorTable<T4>(target, format, type, bufSize, table);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="table"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnColorTable")]
        public static void GetnColorTable<T4>(OpenToolkit.OpenGL.ColorTableTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] ref T4 table)
            where T4 : struct
         => instance.GetnColorTable<T4>(target, format, type, bufSize, ref table);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="lod"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnCompressedTexImage")]
        public static void GetnCompressedTexImage(OpenToolkit.OpenGL.TextureTarget target, Int32 lod, Int32 bufSize, [OutAttribute] IntPtr pixels) => instance.GetnCompressedTexImage(target, lod, bufSize, pixels);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="lod"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnCompressedTexImage")]
        [CLSCompliant(false)]
        public static void GetnCompressedTexImage<T3>(OpenToolkit.OpenGL.TextureTarget target, Int32 lod, Int32 bufSize, [InAttribute, OutAttribute] T3[] pixels)
            where T3 : struct
         => instance.GetnCompressedTexImage<T3>(target, lod, bufSize, pixels);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="lod"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnCompressedTexImage")]
        [CLSCompliant(false)]
        public static void GetnCompressedTexImage<T3>(OpenToolkit.OpenGL.TextureTarget target, Int32 lod, Int32 bufSize, [InAttribute, OutAttribute] T3[,] pixels)
            where T3 : struct
         => instance.GetnCompressedTexImage<T3>(target, lod, bufSize, pixels);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="lod"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnCompressedTexImage")]
        [CLSCompliant(false)]
        public static void GetnCompressedTexImage<T3>(OpenToolkit.OpenGL.TextureTarget target, Int32 lod, Int32 bufSize, [InAttribute, OutAttribute] T3[,,] pixels)
            where T3 : struct
         => instance.GetnCompressedTexImage<T3>(target, lod, bufSize, pixels);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="lod"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnCompressedTexImage")]
        public static void GetnCompressedTexImage<T3>(OpenToolkit.OpenGL.TextureTarget target, Int32 lod, Int32 bufSize, [InAttribute, OutAttribute] ref T3 pixels)
            where T3 : struct
         => instance.GetnCompressedTexImage<T3>(target, lod, bufSize, ref pixels);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="image"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnConvolutionFilter")]
        public static void GetnConvolutionFilter(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [OutAttribute] IntPtr image) => instance.GetnConvolutionFilter(target, format, type, bufSize, image);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="image"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnConvolutionFilter")]
        [CLSCompliant(false)]
        public static void GetnConvolutionFilter<T4>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T4[] image)
            where T4 : struct
         => instance.GetnConvolutionFilter<T4>(target, format, type, bufSize, image);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="image"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnConvolutionFilter")]
        [CLSCompliant(false)]
        public static void GetnConvolutionFilter<T4>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T4[,] image)
            where T4 : struct
         => instance.GetnConvolutionFilter<T4>(target, format, type, bufSize, image);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="image"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnConvolutionFilter")]
        [CLSCompliant(false)]
        public static void GetnConvolutionFilter<T4>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T4[,,] image)
            where T4 : struct
         => instance.GetnConvolutionFilter<T4>(target, format, type, bufSize, image);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="image"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnConvolutionFilter")]
        public static void GetnConvolutionFilter<T4>(OpenToolkit.OpenGL.ConvolutionTarget target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] ref T4 image)
            where T4 : struct
         => instance.GetnConvolutionFilter<T4>(target, format, type, bufSize, ref image);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="reset"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnHistogram")]
        public static void GetnHistogram(OpenToolkit.OpenGL.HistogramTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [OutAttribute] IntPtr values) => instance.GetnHistogram(target, reset, format, type, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="reset"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnHistogram")]
        [CLSCompliant(false)]
        public static void GetnHistogram<T5>(OpenToolkit.OpenGL.HistogramTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T5[] values)
            where T5 : struct
         => instance.GetnHistogram<T5>(target, reset, format, type, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="reset"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnHistogram")]
        [CLSCompliant(false)]
        public static void GetnHistogram<T5>(OpenToolkit.OpenGL.HistogramTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T5[,] values)
            where T5 : struct
         => instance.GetnHistogram<T5>(target, reset, format, type, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="reset"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnHistogram")]
        [CLSCompliant(false)]
        public static void GetnHistogram<T5>(OpenToolkit.OpenGL.HistogramTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T5[,,] values)
            where T5 : struct
         => instance.GetnHistogram<T5>(target, reset, format, type, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="reset"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnHistogram")]
        public static void GetnHistogram<T5>(OpenToolkit.OpenGL.HistogramTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] ref T5 values)
            where T5 : struct
         => instance.GetnHistogram<T5>(target, reset, format, type, bufSize, ref values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="query"></param>
        /// <param name="bufSize"></param>
        /// <param name="v"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapdv")]
        [CLSCompliant(false)]
        public static void GetnMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.MapQuery query, Int32 bufSize, [OutAttribute] Double[] v) => instance.GetnMap(target, query, bufSize, v);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="query"></param>
        /// <param name="bufSize"></param>
        /// <param name="v"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapdv")]
        [CLSCompliant(false)]
        public static void GetnMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.MapQuery query, Int32 bufSize, [OutAttribute] out Double v) => instance.GetnMap(target, query, bufSize, out v);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="query"></param>
        /// <param name="bufSize"></param>
        /// <param name="v"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapdv")]
        [CLSCompliant(false)]
        public static unsafe void GetnMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.MapQuery query, Int32 bufSize, [OutAttribute] Double* v) => instance.GetnMap(target, query, bufSize, v);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="query"></param>
        /// <param name="bufSize"></param>
        /// <param name="v"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapfv")]
        [CLSCompliant(false)]
        public static void GetnMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.MapQuery query, Int32 bufSize, [OutAttribute] Single[] v) => instance.GetnMap(target, query, bufSize, v);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="query"></param>
        /// <param name="bufSize"></param>
        /// <param name="v"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapfv")]
        [CLSCompliant(false)]
        public static void GetnMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.MapQuery query, Int32 bufSize, [OutAttribute] out Single v) => instance.GetnMap(target, query, bufSize, out v);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="query"></param>
        /// <param name="bufSize"></param>
        /// <param name="v"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapfv")]
        [CLSCompliant(false)]
        public static unsafe void GetnMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.MapQuery query, Int32 bufSize, [OutAttribute] Single* v) => instance.GetnMap(target, query, bufSize, v);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="query"></param>
        /// <param name="bufSize"></param>
        /// <param name="v"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapiv")]
        [CLSCompliant(false)]
        public static void GetnMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.MapQuery query, Int32 bufSize, [OutAttribute] Int32[] v) => instance.GetnMap(target, query, bufSize, v);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="query"></param>
        /// <param name="bufSize"></param>
        /// <param name="v"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapiv")]
        [CLSCompliant(false)]
        public static void GetnMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.MapQuery query, Int32 bufSize, [OutAttribute] out Int32 v) => instance.GetnMap(target, query, bufSize, out v);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="query"></param>
        /// <param name="bufSize"></param>
        /// <param name="v"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMapiv")]
        [CLSCompliant(false)]
        public static unsafe void GetnMap(OpenToolkit.OpenGL.MapTarget target, OpenToolkit.OpenGL.MapQuery query, Int32 bufSize, [OutAttribute] Int32* v) => instance.GetnMap(target, query, bufSize, v);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="reset"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMinmax")]
        public static void GetnMinmax(OpenToolkit.OpenGL.MinmaxTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [OutAttribute] IntPtr values) => instance.GetnMinmax(target, reset, format, type, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="reset"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMinmax")]
        [CLSCompliant(false)]
        public static void GetnMinmax<T5>(OpenToolkit.OpenGL.MinmaxTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T5[] values)
            where T5 : struct
         => instance.GetnMinmax<T5>(target, reset, format, type, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="reset"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMinmax")]
        [CLSCompliant(false)]
        public static void GetnMinmax<T5>(OpenToolkit.OpenGL.MinmaxTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T5[,] values)
            where T5 : struct
         => instance.GetnMinmax<T5>(target, reset, format, type, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="reset"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMinmax")]
        [CLSCompliant(false)]
        public static void GetnMinmax<T5>(OpenToolkit.OpenGL.MinmaxTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T5[,,] values)
            where T5 : struct
         => instance.GetnMinmax<T5>(target, reset, format, type, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="reset"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnMinmax")]
        public static void GetnMinmax<T5>(OpenToolkit.OpenGL.MinmaxTargetExt target, bool reset, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] ref T5 values)
            where T5 : struct
         => instance.GetnMinmax<T5>(target, reset, format, type, bufSize, ref values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="map"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapfv")]
        [CLSCompliant(false)]
        public static void GetnPixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 bufSize, [OutAttribute] Single[] values) => instance.GetnPixelMap(map, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="map"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapfv")]
        [CLSCompliant(false)]
        public static void GetnPixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 bufSize, [OutAttribute] out Single values) => instance.GetnPixelMap(map, bufSize, out values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="map"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapfv")]
        [CLSCompliant(false)]
        public static unsafe void GetnPixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 bufSize, [OutAttribute] Single* values) => instance.GetnPixelMap(map, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="map"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapuiv")]
        [CLSCompliant(false)]
        public static void GetnPixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 bufSize, [OutAttribute] Int32[] values) => instance.GetnPixelMap(map, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="map"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapuiv")]
        [CLSCompliant(false)]
        public static void GetnPixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 bufSize, [OutAttribute] out Int32 values) => instance.GetnPixelMap(map, bufSize, out values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="map"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetnPixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 bufSize, [OutAttribute] Int32* values) => instance.GetnPixelMap(map, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="map"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapuiv")]
        [CLSCompliant(false)]
        public static void GetnPixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 bufSize, [OutAttribute] UInt32[] values) => instance.GetnPixelMap(map, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="map"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapuiv")]
        [CLSCompliant(false)]
        public static void GetnPixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 bufSize, [OutAttribute] out UInt32 values) => instance.GetnPixelMap(map, bufSize, out values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="map"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetnPixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 bufSize, [OutAttribute] UInt32* values) => instance.GetnPixelMap(map, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="map"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapusv")]
        [CLSCompliant(false)]
        public static void GetnPixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 bufSize, [OutAttribute] Int16[] values) => instance.GetnPixelMap(map, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="map"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapusv")]
        [CLSCompliant(false)]
        public static void GetnPixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 bufSize, [OutAttribute] out Int16 values) => instance.GetnPixelMap(map, bufSize, out values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="map"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapusv")]
        [CLSCompliant(false)]
        public static unsafe void GetnPixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 bufSize, [OutAttribute] Int16* values) => instance.GetnPixelMap(map, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="map"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapusv")]
        [CLSCompliant(false)]
        public static void GetnPixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 bufSize, [OutAttribute] UInt16[] values) => instance.GetnPixelMap(map, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="map"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapusv")]
        [CLSCompliant(false)]
        public static void GetnPixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 bufSize, [OutAttribute] out UInt16 values) => instance.GetnPixelMap(map, bufSize, out values);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="map"></param>
        /// <param name="bufSize"></param>
        /// <param name="values"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPixelMapusv")]
        [CLSCompliant(false)]
        public static unsafe void GetnPixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 bufSize, [OutAttribute] UInt16* values) => instance.GetnPixelMap(map, bufSize, values);

        /// <summary>[requires: v4.5]</summary>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPolygonStipple")]
        [CLSCompliant(false)]
        public static Byte GetnPolygonStipple() => instance.GetnPolygonStipple();

        /// <summary>[requires: v4.5]</summary>
        /// <param name="bufSize"></param>
        /// <param name="pattern"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPolygonStipple")]
        [CLSCompliant(false)]
        public static void GetnPolygonStipple(Int32 bufSize, [OutAttribute] Byte[] pattern) => instance.GetnPolygonStipple(bufSize, pattern);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="bufSize"></param>
        /// <param name="pattern"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPolygonStipple")]
        [CLSCompliant(false)]
        public static void GetnPolygonStipple(Int32 bufSize, [OutAttribute] out Byte pattern) => instance.GetnPolygonStipple(bufSize, out pattern);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="bufSize"></param>
        /// <param name="pattern"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnPolygonStipple")]
        [CLSCompliant(false)]
        public static unsafe void GetnPolygonStipple(Int32 bufSize, [OutAttribute] Byte* pattern) => instance.GetnPolygonStipple(bufSize, pattern);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="rowBufSize"></param>
        /// <param name="row"></param>
        /// <param name="columnBufSize"></param>
        /// <param name="column"></param>
        /// <param name="span"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnSeparableFilter")]
        public static void GetnSeparableFilter(OpenToolkit.OpenGL.SeparableTargetExt target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 rowBufSize, [OutAttribute] IntPtr row, Int32 columnBufSize, [OutAttribute] IntPtr column, [OutAttribute] IntPtr span) => instance.GetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="rowBufSize"></param>
        /// <param name="row"></param>
        /// <param name="columnBufSize"></param>
        /// <param name="column"></param>
        /// <param name="span"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnSeparableFilter")]
        [CLSCompliant(false)]
        public static void GetnSeparableFilter<T4, T6, T7>(OpenToolkit.OpenGL.SeparableTargetExt target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 rowBufSize, [InAttribute, OutAttribute] T4[] row, Int32 columnBufSize, [InAttribute, OutAttribute] T6[] column, [InAttribute, OutAttribute] T7[] span)
            where T4 : struct
            where T6 : struct
            where T7 : struct
         => instance.GetnSeparableFilter<T4, T6, T7>(target, format, type, rowBufSize, row, columnBufSize, column, span);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="rowBufSize"></param>
        /// <param name="row"></param>
        /// <param name="columnBufSize"></param>
        /// <param name="column"></param>
        /// <param name="span"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnSeparableFilter")]
        [CLSCompliant(false)]
        public static void GetnSeparableFilter<T4, T6, T7>(OpenToolkit.OpenGL.SeparableTargetExt target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 rowBufSize, [InAttribute, OutAttribute] T4[,] row, Int32 columnBufSize, [InAttribute, OutAttribute] T6[,] column, [InAttribute, OutAttribute] T7[,] span)
            where T4 : struct
            where T6 : struct
            where T7 : struct
         => instance.GetnSeparableFilter<T4, T6, T7>(target, format, type, rowBufSize, row, columnBufSize, column, span);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="rowBufSize"></param>
        /// <param name="row"></param>
        /// <param name="columnBufSize"></param>
        /// <param name="column"></param>
        /// <param name="span"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnSeparableFilter")]
        [CLSCompliant(false)]
        public static void GetnSeparableFilter<T4, T6, T7>(OpenToolkit.OpenGL.SeparableTargetExt target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 rowBufSize, [InAttribute, OutAttribute] T4[,,] row, Int32 columnBufSize, [InAttribute, OutAttribute] T6[,,] column, [InAttribute, OutAttribute] T7[,,] span)
            where T4 : struct
            where T6 : struct
            where T7 : struct
         => instance.GetnSeparableFilter<T4, T6, T7>(target, format, type, rowBufSize, row, columnBufSize, column, span);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="rowBufSize"></param>
        /// <param name="row"></param>
        /// <param name="columnBufSize"></param>
        /// <param name="column"></param>
        /// <param name="span"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnSeparableFilter")]
        public static void GetnSeparableFilter<T4, T6, T7>(OpenToolkit.OpenGL.SeparableTargetExt target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 rowBufSize, [InAttribute, OutAttribute] ref T4 row, Int32 columnBufSize, [InAttribute, OutAttribute] ref T6 column, [InAttribute, OutAttribute] ref T7 span)
            where T4 : struct
            where T6 : struct
            where T7 : struct
         => instance.GetnSeparableFilter<T4, T6, T7>(target, format, type, rowBufSize, ref row, columnBufSize, ref column, ref span);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="level"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnTexImage")]
        public static void GetnTexImage(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [OutAttribute] IntPtr pixels) => instance.GetnTexImage(target, level, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="level"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnTexImage")]
        [CLSCompliant(false)]
        public static void GetnTexImage<T5>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T5[] pixels)
            where T5 : struct
         => instance.GetnTexImage<T5>(target, level, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="level"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnTexImage")]
        [CLSCompliant(false)]
        public static void GetnTexImage<T5>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T5[,] pixels)
            where T5 : struct
         => instance.GetnTexImage<T5>(target, level, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="level"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnTexImage")]
        [CLSCompliant(false)]
        public static void GetnTexImage<T5>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T5[,,] pixels)
            where T5 : struct
         => instance.GetnTexImage<T5>(target, level, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="target"></param>
        /// <param name="level"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnTexImage")]
        public static void GetnTexImage<T5>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] ref T5 pixels)
            where T5 : struct
         => instance.GetnTexImage<T5>(target, level, format, type, bufSize, ref pixels);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformdv")]
        [CLSCompliant(false)]
        public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Double[] @params) => instance.GetnUniform(program, location, bufSize, @params);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformdv")]
        [CLSCompliant(false)]
        public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Double @params) => instance.GetnUniform(program, location, bufSize, out @params);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformdv")]
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Double* @params) => instance.GetnUniform(program, location, bufSize, @params);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformdv")]
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Double[] @params) => instance.GetnUniform(program, location, bufSize, @params);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformdv")]
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Double @params) => instance.GetnUniform(program, location, bufSize, out @params);

        /// <summary>[requires: v4.5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformdv")]
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Double* @params) => instance.GetnUniform(program, location, bufSize, @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformfv")]
        [CLSCompliant(false)]
        public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params) => instance.GetnUniform(program, location, bufSize, @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformfv")]
        [CLSCompliant(false)]
        public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params) => instance.GetnUniform(program, location, bufSize, out @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformfv")]
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params) => instance.GetnUniform(program, location, bufSize, @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformfv")]
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params) => instance.GetnUniform(program, location, bufSize, @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformfv")]
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params) => instance.GetnUniform(program, location, bufSize, out @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformfv")]
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params) => instance.GetnUniform(program, location, bufSize, @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformiv")]
        [CLSCompliant(false)]
        public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params) => instance.GetnUniform(program, location, bufSize, @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformiv")]
        [CLSCompliant(false)]
        public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params) => instance.GetnUniform(program, location, bufSize, out @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformiv")]
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params) => instance.GetnUniform(program, location, bufSize, @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformiv")]
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params) => instance.GetnUniform(program, location, bufSize, @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformiv")]
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params) => instance.GetnUniform(program, location, bufSize, out @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformiv")]
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params) => instance.GetnUniform(program, location, bufSize, @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformuiv")]
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32[] @params) => instance.GetnUniform(program, location, bufSize, @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformuiv")]
        [CLSCompliant(false)]
        public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out UInt32 @params) => instance.GetnUniform(program, location, bufSize, out @params);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="bufSize"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glGetnUniformuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] UInt32* @params) => instance.GetnUniform(program, location, bufSize, @params);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenToolkit.OpenGL.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) => instance.GetObjectLabel(identifier, name, bufSize, length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenToolkit.OpenGL.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) => instance.GetObjectLabel(identifier, name, bufSize, out length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectLabel(OpenToolkit.OpenGL.ObjectLabelIdentifier identifier, Int32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) => instance.GetObjectLabel(identifier, name, bufSize, length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenToolkit.OpenGL.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) => instance.GetObjectLabel(identifier, name, bufSize, length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static void GetObjectLabel(OpenToolkit.OpenGL.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) => instance.GetObjectLabel(identifier, name, bufSize, out length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectLabel(OpenToolkit.OpenGL.ObjectLabelIdentifier identifier, UInt32 name, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) => instance.GetObjectLabel(identifier, name, bufSize, length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) => instance.GetObjectPtrLabel(ptr, bufSize, length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) => instance.GetObjectPtrLabel(ptr, bufSize, out length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel(IntPtr ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label) => instance.GetObjectPtrLabel(ptr, bufSize, length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         => instance.GetObjectPtrLabel<T0>(ptr, bufSize, length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         => instance.GetObjectPtrLabel<T0>(ptr, bufSize, out length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         => instance.GetObjectPtrLabel<T0>(ptr, bufSize, length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         => instance.GetObjectPtrLabel<T0>(ptr, bufSize, length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         => instance.GetObjectPtrLabel<T0>(ptr, bufSize, out length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         => instance.GetObjectPtrLabel<T0>(ptr, bufSize, length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         => instance.GetObjectPtrLabel<T0>(ptr, bufSize, length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         => instance.GetObjectPtrLabel<T0>(ptr, bufSize, out length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         => instance.GetObjectPtrLabel<T0>(ptr, bufSize, length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         => instance.GetObjectPtrLabel<T0>(ref ptr, bufSize, length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         => instance.GetObjectPtrLabel<T0>(ref ptr, bufSize, out length, out label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Retrieve the label of a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// The name of the sync object whose label to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The length of the buffer whose address is in label.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable to receive the length of the object label.
        /// </param>
        /// <param name="label">[length: bufSize]
        /// The address of a string that will receive the object label.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glGetObjectPtrLabel")]
        [CLSCompliant(false)]
        public static unsafe void GetObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String label)
            where T0 : struct
         => instance.GetObjectPtrLabel<T0>(ref ptr, bufSize, length, out label);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        [CLSCompliant(false)]
        public static Single GetPixelMap(OpenToolkit.OpenGL.PixelMap map) => instance.GetPixelMap(map);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">[length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        [CLSCompliant(false)]
        public static void GetPixelMap(OpenToolkit.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] Single[] values) => instance.GetPixelMap(map, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">[length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        [CLSCompliant(false)]
        public static void GetPixelMap(OpenToolkit.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] out Single values) => instance.GetPixelMap(map, out values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">[length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        [CLSCompliant(false)]
        public static unsafe void GetPixelMap(OpenToolkit.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] Single* values) => instance.GetPixelMap(map, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">[length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        [CLSCompliant(false)]
        public static void GetPixelMap(OpenToolkit.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] Int32[] values) => instance.GetPixelMap(map, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">[length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        [CLSCompliant(false)]
        public static void GetPixelMap(OpenToolkit.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] out Int32 values) => instance.GetPixelMap(map, out values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">[length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetPixelMap(OpenToolkit.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] Int32* values) => instance.GetPixelMap(map, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">[length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        [CLSCompliant(false)]
        public static void GetPixelMap(OpenToolkit.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] UInt32[] values) => instance.GetPixelMap(map, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">[length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        [CLSCompliant(false)]
        public static void GetPixelMap(OpenToolkit.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] out UInt32 values) => instance.GetPixelMap(map, out values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">[length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetPixelMap(OpenToolkit.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] UInt32* values) => instance.GetPixelMap(map, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">[length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        [CLSCompliant(false)]
        public static void GetPixelMap(OpenToolkit.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] Int16[] values) => instance.GetPixelMap(map, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">[length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        [CLSCompliant(false)]
        public static void GetPixelMap(OpenToolkit.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] out Int16 values) => instance.GetPixelMap(map, out values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">[length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        [CLSCompliant(false)]
        public static unsafe void GetPixelMap(OpenToolkit.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] Int16* values) => instance.GetPixelMap(map, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">[length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        [CLSCompliant(false)]
        public static void GetPixelMap(OpenToolkit.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] UInt16[] values) => instance.GetPixelMap(map, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">[length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        [CLSCompliant(false)]
        public static void GetPixelMap(OpenToolkit.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] out UInt16 values) => instance.GetPixelMap(map, out values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the specified pixel map
        /// </summary>
        /// <param name="map">
        /// Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.
        /// </param>
        /// <param name="values">[length: COMPSIZE(map)]
        /// Returns the pixel map contents.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        [CLSCompliant(false)]
        public static unsafe void GetPixelMap(OpenToolkit.OpenGL.PixelMap map, [OutAttribute, CountAttribute(Computed = "map")] UInt16* values) => instance.GetPixelMap(map, values);

        /// <summary></summary>
        /// <param name="map"></param>
        /// <param name="size"></param>
        /// <param name="values">[length: size]</param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetPixelMapxv")]
        [CLSCompliant(false)]
        public static void GetPixelMapx(OpenToolkit.OpenGL.PixelMap map, Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] Int32[] values) => instance.GetPixelMapx(map, size, values);

        /// <summary></summary>
        /// <param name="map"></param>
        /// <param name="size"></param>
        /// <param name="values">[length: size]</param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetPixelMapxv")]
        [CLSCompliant(false)]
        public static void GetPixelMapx(OpenToolkit.OpenGL.PixelMap map, Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] out Int32 values) => instance.GetPixelMapx(map, size, out values);

        /// <summary></summary>
        /// <param name="map"></param>
        /// <param name="size"></param>
        /// <param name="values">[length: size]</param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glGetPixelMapxv")]
        [CLSCompliant(false)]
        public static unsafe void GetPixelMapx(OpenToolkit.OpenGL.PixelMap map, Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] Int32* values) => instance.GetPixelMapx(map, size, values);

        /// <summary>[requires: v1.1 or KHR_debug|VERSION_1_1|VERSION_4_3|VERSION_4_3]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_1_1|VERSION_4_3|VERSION_4_3", Version = "1.1", EntryPoint = "glGetPointerv")]
        public static void GetPointer(OpenToolkit.OpenGL.GetPointervPName pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr @params) => instance.GetPointer(pname, @params);

        /// <summary>[requires: v1.1 or KHR_debug|VERSION_1_1|VERSION_4_3|VERSION_4_3]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_1_1|VERSION_4_3|VERSION_4_3", Version = "1.1", EntryPoint = "glGetPointerv")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenToolkit.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T1[] @params)
            where T1 : struct
         => instance.GetPointer<T1>(pname, @params);

        /// <summary>[requires: v1.1 or KHR_debug|VERSION_1_1|VERSION_4_3|VERSION_4_3]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_1_1|VERSION_4_3|VERSION_4_3", Version = "1.1", EntryPoint = "glGetPointerv")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenToolkit.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T1[,] @params)
            where T1 : struct
         => instance.GetPointer<T1>(pname, @params);

        /// <summary>[requires: v1.1 or KHR_debug|VERSION_1_1|VERSION_4_3|VERSION_4_3]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_1_1|VERSION_4_3|VERSION_4_3", Version = "1.1", EntryPoint = "glGetPointerv")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenToolkit.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T1[,,] @params)
            where T1 : struct
         => instance.GetPointer<T1>(pname, @params);

        /// <summary>[requires: v1.1 or KHR_debug|VERSION_1_1|VERSION_4_3|VERSION_4_3]
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_1_1|VERSION_4_3|VERSION_4_3", Version = "1.1", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenToolkit.OpenGL.GetPointervPName pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T1 @params)
            where T1 : struct
         => instance.GetPointer<T1>(pname, ref @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the polygon stipple pattern
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPolygonStipple")]
        [CLSCompliant(false)]
        public static Byte GetPolygonStipple() => instance.GetPolygonStipple();

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the polygon stipple pattern
        /// </summary>
        /// <param name="mask">[length: COMPSIZE()]
        /// Returns the stipple pattern. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPolygonStipple")]
        [CLSCompliant(false)]
        public static void GetPolygonStipple([OutAttribute, CountAttribute(Computed = "")] Byte[] mask) => instance.GetPolygonStipple(mask);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the polygon stipple pattern
        /// </summary>
        /// <param name="mask">[length: COMPSIZE()]
        /// Returns the stipple pattern. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPolygonStipple")]
        [CLSCompliant(false)]
        public static void GetPolygonStipple([OutAttribute, CountAttribute(Computed = "")] out Byte mask) => instance.GetPolygonStipple(out mask);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return the polygon stipple pattern
        /// </summary>
        /// <param name="mask">[length: COMPSIZE()]
        /// Returns the stipple pattern. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetPolygonStipple")]
        [CLSCompliant(false)]
        public static unsafe void GetPolygonStipple([OutAttribute, CountAttribute(Computed = "")] Byte* mask) => instance.GetPolygonStipple(mask);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.BinaryFormat binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary) => instance.GetProgramBinary(program, bufSize, out length, out binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[] binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, out length, out binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,] binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, out length, out binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,,] binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, out length, out binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T4 binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, out length, out binaryFormat, ref binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.BinaryFormat* binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary) => instance.GetProgramBinary(program, bufSize, length, binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.BinaryFormat* binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[] binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, length, binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.BinaryFormat* binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,] binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, length, binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.BinaryFormat* binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,,] binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, length, binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.BinaryFormat* binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T4 binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, length, binaryFormat, ref binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.BinaryFormat binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary) => instance.GetProgramBinary(program, bufSize, out length, out binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[] binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, out length, out binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,] binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, out length, out binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,,] binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, out length, out binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T4 binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, out length, out binaryFormat, ref binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.BinaryFormat* binaryFormat, [OutAttribute, CountAttribute(Parameter = "bufSize")] IntPtr binary) => instance.GetProgramBinary(program, bufSize, length, binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.BinaryFormat* binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[] binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, length, binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.BinaryFormat* binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,] binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, length, binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.BinaryFormat* binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] T4[,,] binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, length, binaryFormat, binary);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Return a binary representation of a program object's compiled and linked executable source
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose binary representation to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given by binary.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable to receive the number of bytes written into binary.
        /// </param>
        /// <param name="binaryFormat">[length: 1]
        /// Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.
        /// </param>
        /// <param name="binary">[length: bufSize]
        /// Specifies the address an array into which the GL will return program's binary representation.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramBinary")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.BinaryFormat* binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "bufSize")] ref T4 binary)
            where T4 : struct
         => instance.GetProgramBinary<T4>(program, bufSize, length, binaryFormat, ref binary);

        /// <summary>[requires: v2.0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) => instance.GetProgramInfoLog(program, bufSize, out length, out infoLog);

        /// <summary>[requires: v2.0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) => instance.GetProgramInfoLog(program, bufSize, length, out infoLog);

        /// <summary>[requires: v2.0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) => instance.GetProgramInfoLog(program, bufSize, out length, out infoLog);

        /// <summary>[requires: v2.0]
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) => instance.GetProgramInfoLog(program, bufSize, length, out infoLog);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose interface to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program to query.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter within programInterface to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramInterfaceiv")]
        [CLSCompliant(false)]
        public static void GetProgramInterface(Int32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, OpenToolkit.OpenGL.ProgramInterfaceParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetProgramInterface(program, programInterface, pname, @params);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose interface to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program to query.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter within programInterface to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramInterfaceiv")]
        [CLSCompliant(false)]
        public static void GetProgramInterface(Int32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, OpenToolkit.OpenGL.ProgramInterfaceParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetProgramInterface(program, programInterface, pname, out @params);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose interface to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program to query.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter within programInterface to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramInterfaceiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramInterface(Int32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, OpenToolkit.OpenGL.ProgramInterfaceParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetProgramInterface(program, programInterface, pname, @params);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose interface to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program to query.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter within programInterface to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramInterfaceiv")]
        [CLSCompliant(false)]
        public static void GetProgramInterface(UInt32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, OpenToolkit.OpenGL.ProgramInterfaceParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetProgramInterface(program, programInterface, pname, @params);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose interface to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program to query.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter within programInterface to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramInterfaceiv")]
        [CLSCompliant(false)]
        public static void GetProgramInterface(UInt32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, OpenToolkit.OpenGL.ProgramInterfaceParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetProgramInterface(program, programInterface, pname, out @params);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query a property of an interface in a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose interface to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program to query.
        /// </param>
        /// <param name="pname">
        /// The name of the parameter within programInterface to query.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// The address of a variable to retrieve the value of pname for the program interface.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramInterfaceiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramInterface(UInt32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, OpenToolkit.OpenGL.ProgramInterfaceParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetProgramInterface(program, programInterface, pname, @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenToolkit.OpenGL.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetProgram(program, pname, @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenToolkit.OpenGL.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetProgram(program, pname, out @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(Int32 program, OpenToolkit.OpenGL.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetProgram(program, pname, @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use GetProgramParameterName overload instead")]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenToolkit.OpenGL.ProgramParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetProgram(program, pname, @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use GetProgramParameterName overload instead")]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenToolkit.OpenGL.ProgramParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetProgram(program, pname, out @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use GetProgramParameterName overload instead")]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(Int32 program, OpenToolkit.OpenGL.ProgramParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetProgram(program, pname, @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenToolkit.OpenGL.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetProgram(program, pname, @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenToolkit.OpenGL.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetProgram(program, pname, out @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(UInt32 program, OpenToolkit.OpenGL.GetProgramParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetProgram(program, pname, @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use GetProgramParameterName overload instead")]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenToolkit.OpenGL.ProgramParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetProgram(program, pname, @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use GetProgramParameterName overload instead")]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenToolkit.OpenGL.ProgramParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetProgram(program, pname, out @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [Obsolete("Use GetProgramParameterName overload instead")]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(UInt32 program, OpenToolkit.OpenGL.ProgramParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetProgram(program, pname, @params);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve the info log string from a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object from which to retrieve the info log.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies the address of an array of characters into which will be written the info log for pipeline.
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
        [CLSCompliant(false)]
        public static void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) => instance.GetProgramPipelineInfoLog(pipeline, bufSize, length, out infoLog);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve the info log string from a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object from which to retrieve the info log.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies the address of an array of characters into which will be written the info log for pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
        [CLSCompliant(false)]
        public static void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) => instance.GetProgramPipelineInfoLog(pipeline, bufSize, out length, out infoLog);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve the info log string from a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object from which to retrieve the info log.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies the address of an array of characters into which will be written the info log for pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) => instance.GetProgramPipelineInfoLog(pipeline, bufSize, length, out infoLog);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve the info log string from a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object from which to retrieve the info log.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies the address of an array of characters into which will be written the info log for pipeline.
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
        [CLSCompliant(false)]
        public static void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) => instance.GetProgramPipelineInfoLog(pipeline, bufSize, length, out infoLog);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve the info log string from a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object from which to retrieve the info log.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies the address of an array of characters into which will be written the info log for pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
        [CLSCompliant(false)]
        public static void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) => instance.GetProgramPipelineInfoLog(pipeline, bufSize, out length, out infoLog);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve the info log string from a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object from which to retrieve the info log.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of a variable into which will be written the number of characters written into infoLog.
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies the address of an array of characters into which will be written the info log for pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) => instance.GetProgramPipelineInfoLog(pipeline, bufSize, length, out infoLog);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to retrieve.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
        [CLSCompliant(false)]
        public static void GetProgramPipeline(Int32 pipeline, OpenToolkit.OpenGL.ProgramPipelineParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetProgramPipeline(pipeline, pname, @params);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to retrieve.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
        [CLSCompliant(false)]
        public static void GetProgramPipeline(Int32 pipeline, OpenToolkit.OpenGL.ProgramPipelineParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetProgramPipeline(pipeline, pname, out @params);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to retrieve.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramPipeline(Int32 pipeline, OpenToolkit.OpenGL.ProgramPipelineParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetProgramPipeline(pipeline, pname, @params);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to retrieve.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
        [CLSCompliant(false)]
        public static void GetProgramPipeline(UInt32 pipeline, OpenToolkit.OpenGL.ProgramPipelineParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetProgramPipeline(pipeline, pname, @params);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to retrieve.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
        [CLSCompliant(false)]
        public static void GetProgramPipeline(UInt32 pipeline, OpenToolkit.OpenGL.ProgramPipelineParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetProgramPipeline(pipeline, pname, out @params);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Retrieve properties of a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object whose parameter retrieve.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to retrieve.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramPipeline(UInt32 pipeline, OpenToolkit.OpenGL.ProgramPipelineParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetProgramPipeline(pipeline, pname, @params);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the index of a named resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="name">[length: COMPSIZE(name)]
        /// The name of the resource to query the index of.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceIndex")]
        [CLSCompliant(false)]
        public static Int32 GetProgramResourceIndex(Int32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, [CountAttribute(Computed = "name")] String name) => instance.GetProgramResourceIndex(program, programInterface, name);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the index of a named resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="name">[length: COMPSIZE(name)]
        /// The name of the resource to query the index of.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceIndex")]
        [CLSCompliant(false)]
        public static Int32 GetProgramResourceIndex(UInt32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, [CountAttribute(Computed = "name")] String name) => instance.GetProgramResourceIndex(program, programInterface, name);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="index"></param>
        /// <param name="propCount"></param>
        /// <param name="props">[length: propCount]</param>
        /// <param name="bufSize"></param>
        /// <param name="length">[length: 1]</param>
        /// <param name="@params">[length: bufSize]</param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        [CLSCompliant(false)]
        public static void GetProgramResource(Int32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, Int32 index, Int32 propCount, [CountAttribute(Parameter = "propCount")] OpenToolkit.OpenGL.ProgramProperty[] props, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32[] @params) => instance.GetProgramResource(program, programInterface, index, propCount, props, bufSize, out length, @params);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="index"></param>
        /// <param name="propCount"></param>
        /// <param name="props">[length: propCount]</param>
        /// <param name="bufSize"></param>
        /// <param name="length">[length: 1]</param>
        /// <param name="@params">[length: bufSize]</param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        [CLSCompliant(false)]
        public static void GetProgramResource(Int32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, Int32 index, Int32 propCount, [CountAttribute(Parameter = "propCount")] ref OpenToolkit.OpenGL.ProgramProperty props, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int32 @params) => instance.GetProgramResource(program, programInterface, index, propCount, ref props, bufSize, out length, out @params);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="index"></param>
        /// <param name="propCount"></param>
        /// <param name="props">[length: propCount]</param>
        /// <param name="bufSize"></param>
        /// <param name="length">[length: 1]</param>
        /// <param name="@params">[length: bufSize]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramResource(Int32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, Int32 index, Int32 propCount, [CountAttribute(Parameter = "propCount")] OpenToolkit.OpenGL.ProgramProperty* props, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params) => instance.GetProgramResource(program, programInterface, index, propCount, props, bufSize, length, @params);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="index"></param>
        /// <param name="propCount"></param>
        /// <param name="props">[length: propCount]</param>
        /// <param name="bufSize"></param>
        /// <param name="length">[length: 1]</param>
        /// <param name="@params">[length: bufSize]</param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramResource(Int32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, Int32 index, Int32 propCount, [CountAttribute(Parameter = "propCount")] OpenToolkit.OpenGL.ProgramProperty* props, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params) => instance.GetProgramResource(program, programInterface, index, propCount, props, bufSize, length, @params);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="index"></param>
        /// <param name="propCount"></param>
        /// <param name="props">[length: propCount]</param>
        /// <param name="bufSize"></param>
        /// <param name="length">[length: 1]</param>
        /// <param name="@params">[length: bufSize]</param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        [CLSCompliant(false)]
        public static void GetProgramResource(UInt32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, UInt32 index, Int32 propCount, [CountAttribute(Parameter = "propCount")] OpenToolkit.OpenGL.ProgramProperty[] props, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32[] @params) => instance.GetProgramResource(program, programInterface, index, propCount, props, bufSize, out length, @params);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="index"></param>
        /// <param name="propCount"></param>
        /// <param name="props">[length: propCount]</param>
        /// <param name="bufSize"></param>
        /// <param name="length">[length: 1]</param>
        /// <param name="@params">[length: bufSize]</param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        [CLSCompliant(false)]
        public static void GetProgramResource(UInt32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, UInt32 index, Int32 propCount, [CountAttribute(Parameter = "propCount")] ref OpenToolkit.OpenGL.ProgramProperty props, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int32 @params) => instance.GetProgramResource(program, programInterface, index, propCount, ref props, bufSize, out length, out @params);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="index"></param>
        /// <param name="propCount"></param>
        /// <param name="props">[length: propCount]</param>
        /// <param name="bufSize"></param>
        /// <param name="length">[length: 1]</param>
        /// <param name="@params">[length: bufSize]</param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramResource(UInt32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, UInt32 index, Int32 propCount, [CountAttribute(Parameter = "propCount")] OpenToolkit.OpenGL.ProgramProperty* props, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params) => instance.GetProgramResource(program, programInterface, index, propCount, props, bufSize, length, @params);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Retrieve values for multiple properties of a single active resource within a program object
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="index"></param>
        /// <param name="propCount"></param>
        /// <param name="props">[length: propCount]</param>
        /// <param name="bufSize"></param>
        /// <param name="length">[length: 1]</param>
        /// <param name="@params">[length: bufSize]</param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramResource(UInt32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, UInt32 index, Int32 propCount, [CountAttribute(Parameter = "propCount")] OpenToolkit.OpenGL.ProgramProperty* props, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* @params) => instance.GetProgramResource(program, programInterface, index, propCount, props, bufSize, length, @params);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the location of a named resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="name">[length: COMPSIZE(name)]
        /// The name of the resource to query the location of.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceLocation")]
        [CLSCompliant(false)]
        public static Int32 GetProgramResourceLocation(Int32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, [CountAttribute(Computed = "name")] String name) => instance.GetProgramResourceLocation(program, programInterface, name);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the location of a named resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="name">[length: COMPSIZE(name)]
        /// The name of the resource to query the location of.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceLocation")]
        [CLSCompliant(false)]
        public static Int32 GetProgramResourceLocation(UInt32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, [CountAttribute(Computed = "name")] String name) => instance.GetProgramResourceLocation(program, programInterface, name);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the fragment color index of a named variable within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="name">[length: COMPSIZE(name)]
        /// The name of the resource to query the location of.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceLocationIndex")]
        [CLSCompliant(false)]
        public static Int32 GetProgramResourceLocationIndex(Int32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, [CountAttribute(Computed = "name")] String name) => instance.GetProgramResourceLocationIndex(program, programInterface, name);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the fragment color index of a named variable within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the resource named name.
        /// </param>
        /// <param name="name">[length: COMPSIZE(name)]
        /// The name of the resource to query the location of.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceLocationIndex")]
        [CLSCompliant(false)]
        public static Int32 GetProgramResourceLocationIndex(UInt32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, [CountAttribute(Computed = "name")] String name) => instance.GetProgramResourceLocationIndex(program, programInterface, name);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the indexed resource.
        /// </param>
        /// <param name="index">
        /// The index of the resource within programInterface of program.
        /// </param>
        /// <param name="bufSize">
        /// The size of the character array whose address is given by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the length of the resource name.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a character array into which will be written the name of the resource.
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceName")]
        [CLSCompliant(false)]
        public static void GetProgramResourceName(Int32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetProgramResourceName(program, programInterface, index, bufSize, length, out name);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the indexed resource.
        /// </param>
        /// <param name="index">
        /// The index of the resource within programInterface of program.
        /// </param>
        /// <param name="bufSize">
        /// The size of the character array whose address is given by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the length of the resource name.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a character array into which will be written the name of the resource.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceName")]
        [CLSCompliant(false)]
        public static void GetProgramResourceName(Int32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetProgramResourceName(program, programInterface, index, bufSize, out length, out name);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the indexed resource.
        /// </param>
        /// <param name="index">
        /// The index of the resource within programInterface of program.
        /// </param>
        /// <param name="bufSize">
        /// The size of the character array whose address is given by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the length of the resource name.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a character array into which will be written the name of the resource.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceName")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramResourceName(Int32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetProgramResourceName(program, programInterface, index, bufSize, length, out name);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the indexed resource.
        /// </param>
        /// <param name="index">
        /// The index of the resource within programInterface of program.
        /// </param>
        /// <param name="bufSize">
        /// The size of the character array whose address is given by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the length of the resource name.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a character array into which will be written the name of the resource.
        /// </param>
        [Obsolete("Use out overload instead")]
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceName")]
        [CLSCompliant(false)]
        public static void GetProgramResourceName(UInt32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32[] length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetProgramResourceName(program, programInterface, index, bufSize, length, out name);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the indexed resource.
        /// </param>
        /// <param name="index">
        /// The index of the resource within programInterface of program.
        /// </param>
        /// <param name="bufSize">
        /// The size of the character array whose address is given by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the length of the resource name.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a character array into which will be written the name of the resource.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceName")]
        [CLSCompliant(false)]
        public static void GetProgramResourceName(UInt32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetProgramResourceName(program, programInterface, index, bufSize, out length, out name);

        /// <summary>[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]
        /// Query the name of an indexed resource within a program
        /// </summary>
        /// <param name="program">
        /// The name of a program object whose resources to query.
        /// </param>
        /// <param name="programInterface">
        /// A token identifying the interface within program containing the indexed resource.
        /// </param>
        /// <param name="index">
        /// The index of the resource within programInterface of program.
        /// </param>
        /// <param name="bufSize">
        /// The size of the character array whose address is given by name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the length of the resource name.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a character array into which will be written the name of the resource.
        /// </param>
        [AutoGenerated(Category = "ARB_program_interface_query|VERSION_4_3", Version = "4.3", EntryPoint = "glGetProgramResourceName")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramResourceName(UInt32 program, OpenToolkit.OpenGL.ProgramInterface programInterface, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetProgramResourceName(program, programInterface, index, bufSize, length, out name);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve properties of a program object corresponding to a specified shader stage
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing shader stage.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of the shader to query. pname must be ActiveSubroutineUniforms, ActiveSubroutineUniformLocations, ActiveSubroutines, ActiveSubroutineUniformMaxLength, or ActiveSubroutineMaxLength.
        /// </param>
        /// <param name="values">[length: 1]
        /// Specifies the address of a variable into which the queried value or values will be placed.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetProgramStageiv")]
        [CLSCompliant(false)]
        public static void GetProgramStage(Int32 program, OpenToolkit.OpenGL.ShaderType shadertype, OpenToolkit.OpenGL.ProgramStageParameter pname, [OutAttribute, CountAttribute(Count = 1)] out Int32 values) => instance.GetProgramStage(program, shadertype, pname, out values);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve properties of a program object corresponding to a specified shader stage
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing shader stage.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of the shader to query. pname must be ActiveSubroutineUniforms, ActiveSubroutineUniformLocations, ActiveSubroutines, ActiveSubroutineUniformMaxLength, or ActiveSubroutineMaxLength.
        /// </param>
        /// <param name="values">[length: 1]
        /// Specifies the address of a variable into which the queried value or values will be placed.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetProgramStageiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramStage(Int32 program, OpenToolkit.OpenGL.ShaderType shadertype, OpenToolkit.OpenGL.ProgramStageParameter pname, [OutAttribute, CountAttribute(Count = 1)] Int32* values) => instance.GetProgramStage(program, shadertype, pname, values);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve properties of a program object corresponding to a specified shader stage
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing shader stage.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of the shader to query. pname must be ActiveSubroutineUniforms, ActiveSubroutineUniformLocations, ActiveSubroutines, ActiveSubroutineUniformMaxLength, or ActiveSubroutineMaxLength.
        /// </param>
        /// <param name="values">[length: 1]
        /// Specifies the address of a variable into which the queried value or values will be placed.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetProgramStageiv")]
        [CLSCompliant(false)]
        public static void GetProgramStage(UInt32 program, OpenToolkit.OpenGL.ShaderType shadertype, OpenToolkit.OpenGL.ProgramStageParameter pname, [OutAttribute, CountAttribute(Count = 1)] out Int32 values) => instance.GetProgramStage(program, shadertype, pname, out values);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve properties of a program object corresponding to a specified shader stage
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing shader stage.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter of the shader to query. pname must be ActiveSubroutineUniforms, ActiveSubroutineUniformLocations, ActiveSubroutines, ActiveSubroutineUniformMaxLength, or ActiveSubroutineMaxLength.
        /// </param>
        /// <param name="values">[length: 1]
        /// Specifies the address of a variable into which the queried value or values will be placed.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetProgramStageiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramStage(UInt32 program, OpenToolkit.OpenGL.ShaderType shadertype, OpenToolkit.OpenGL.ProgramStageParameter pname, [OutAttribute, CountAttribute(Count = 1)] Int32* values) => instance.GetProgramStage(program, shadertype, pname, values);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="id"></param>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="offset"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetQueryBufferObjecti64v")]
        [CLSCompliant(false)]
        public static void GetQueryBufferObject(Int32 id, Int32 buffer, OpenToolkit.OpenGL.QueryObjectParameterName pname, IntPtr offset) => instance.GetQueryBufferObject(id, buffer, pname, offset);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="id"></param>
        /// <param name="buffer"></param>
        /// <param name="pname"></param>
        /// <param name="offset"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetQueryBufferObjecti64v")]
        [CLSCompliant(false)]
        public static void GetQueryBufferObject(UInt32 id, UInt32 buffer, OpenToolkit.OpenGL.QueryObjectParameterName pname, IntPtr offset) => instance.GetQueryBufferObject(id, buffer, pname, offset);

        /// <summary>[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query object target.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        [CLSCompliant(false)]
        public static void GetQueryIndexed(OpenToolkit.OpenGL.QueryTarget target, Int32 index, OpenToolkit.OpenGL.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetQueryIndexed(target, index, pname, @params);

        /// <summary>[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query object target.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        [CLSCompliant(false)]
        public static void GetQueryIndexed(OpenToolkit.OpenGL.QueryTarget target, Int32 index, OpenToolkit.OpenGL.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetQueryIndexed(target, index, pname, out @params);

        /// <summary>[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query object target.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryIndexed(OpenToolkit.OpenGL.QueryTarget target, Int32 index, OpenToolkit.OpenGL.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetQueryIndexed(target, index, pname, @params);

        /// <summary>[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query object target.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        [CLSCompliant(false)]
        public static void GetQueryIndexed(OpenToolkit.OpenGL.QueryTarget target, UInt32 index, OpenToolkit.OpenGL.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetQueryIndexed(target, index, pname, @params);

        /// <summary>[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query object target.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        [CLSCompliant(false)]
        public static void GetQueryIndexed(OpenToolkit.OpenGL.QueryTarget target, UInt32 index, OpenToolkit.OpenGL.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetQueryIndexed(target, index, pname, out @params);

        /// <summary>[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]
        /// Return parameters of an indexed query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the query object target.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback3|VERSION_4_0", Version = "4.0", EntryPoint = "glGetQueryIndexediv")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryIndexed(OpenToolkit.OpenGL.QueryTarget target, UInt32 index, OpenToolkit.OpenGL.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetQueryIndexed(target, index, pname, @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        [CLSCompliant(false)]
        public static void GetQuery(OpenToolkit.OpenGL.QueryTarget target, OpenToolkit.OpenGL.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetQuery(target, pname, @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        [CLSCompliant(false)]
        public static void GetQuery(OpenToolkit.OpenGL.QueryTarget target, OpenToolkit.OpenGL.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetQuery(target, pname, out @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object target parameter. Accepted values are CurrentQuery or QueryCounterBits.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQuery(OpenToolkit.OpenGL.QueryTarget target, OpenToolkit.OpenGL.GetQueryParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetQuery(target, pname, @params);

        /// <summary>[requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjecti64v")]
        [CLSCompliant(false)]
        public static void GetQueryObject(Int32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64[] @params) => instance.GetQueryObject(id, pname, @params);

        /// <summary>[requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjecti64v")]
        [CLSCompliant(false)]
        public static void GetQueryObject(Int32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int64 @params) => instance.GetQueryObject(id, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjecti64v")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryObject(Int32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* @params) => instance.GetQueryObject(id, pname, @params);

        /// <summary>[requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjecti64v")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64[] @params) => instance.GetQueryObject(id, pname, @params);

        /// <summary>[requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjecti64v")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int64 @params) => instance.GetQueryObject(id, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjecti64v")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryObject(UInt32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int64* @params) => instance.GetQueryObject(id, pname, @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(Int32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetQueryObject(id, pname, @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(Int32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetQueryObject(id, pname, out @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryObject(Int32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetQueryObject(id, pname, @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetQueryObject(id, pname, @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetQueryObject(id, pname, out @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryObject(UInt32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetQueryObject(id, pname, @params);

        /// <summary>[requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjectui64v")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt64[] @params) => instance.GetQueryObject(id, pname, @params);

        /// <summary>[requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjectui64v")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt64 @params) => instance.GetQueryObject(id, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glGetQueryObjectui64v")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryObject(UInt32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt64* @params) => instance.GetQueryObject(id, pname, @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32[] @params) => instance.GetQueryObject(id, pname, @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static void GetQueryObject(UInt32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt32 @params) => instance.GetQueryObject(id, pname, out @params);

        /// <summary>[requires: v1.5]
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// Specifies the name of a query object.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetQueryObject(UInt32 id, OpenToolkit.OpenGL.GetQueryObjectParam pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params) => instance.GetQueryObject(id, pname, @params);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation. target must be Renderbuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenToolkit.OpenGL.RenderbufferTarget target, OpenToolkit.OpenGL.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetRenderbufferParameter(target, pname, @params);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation. target must be Renderbuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenToolkit.OpenGL.RenderbufferTarget target, OpenToolkit.OpenGL.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetRenderbufferParameter(target, pname, out @params);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Retrieve information about a bound renderbuffer object
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the query operation. target must be Renderbuffer.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the renderbuffer bound to target.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the address of an array to receive the value of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetRenderbufferParameter(OpenToolkit.OpenGL.RenderbufferTarget target, OpenToolkit.OpenGL.RenderbufferParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetRenderbufferParameter(target, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) => instance.GetSamplerParameter(sampler, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) => instance.GetSamplerParameter(sampler, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) => instance.GetSamplerParameter(sampler, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) => instance.GetSamplerParameter(sampler, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use All overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameterI(Int32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetSamplerParameterI(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use All overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameterI(Int32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetSamplerParameterI(sampler, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use All overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameterI(Int32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetSamplerParameterI(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameterI(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetSamplerParameterI(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameterI(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetSamplerParameterI(sampler, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameterI(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetSamplerParameterI(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use All overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetSamplerParameterI(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use All overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetSamplerParameterI(sampler, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use All overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetSamplerParameterI(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetSamplerParameterI(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetSamplerParameterI(sampler, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetSamplerParameterI(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use All overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIuiv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32[] @params) => instance.GetSamplerParameterI(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use All overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIuiv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt32 @params) => instance.GetSamplerParameterI(sampler, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use All overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params) => instance.GetSamplerParameterI(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIuiv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32[] @params) => instance.GetSamplerParameterI(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIuiv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt32 @params) => instance.GetSamplerParameterI(sampler, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameterIuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params) => instance.GetSamplerParameterI(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetSamplerParameter(sampler, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetSamplerParameter(sampler, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetSamplerParameter(sampler, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void GetSamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetSamplerParameter(sampler, pname, out @params);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Return sampler parameter values
        /// </summary>
        /// <param name="sampler">
        /// Specifies name of the sampler object from which to retrieve parameters.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the sampler parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glGetSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetSamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetSamplerParameter(sampler, pname, @params);

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// The separable filter to be retrieved. Must be Separable2D.
        /// </param>
        /// <param name="format">
        /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the row filter image.
        /// </param>
        /// <param name="column">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the column filter image.
        /// </param>
        /// <param name="span">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the span filter image (currently unused).
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static void GetSeparableFilter(OpenToolkit.OpenGL.SeparableTargetExt target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr row, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr column, [OutAttribute, CountAttribute(Computed = "target,format,type")] IntPtr span) => instance.GetSeparableFilter(target, format, type, row, column, span);

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// The separable filter to be retrieved. Must be Separable2D.
        /// </param>
        /// <param name="format">
        /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the row filter image.
        /// </param>
        /// <param name="column">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the column filter image.
        /// </param>
        /// <param name="span">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the span filter image (currently unused).
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        [CLSCompliant(false)]
        public static void GetSeparableFilter<T3, T4, T5>(OpenToolkit.OpenGL.SeparableTargetExt target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[] column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T5[] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
         => instance.GetSeparableFilter<T3, T4, T5>(target, format, type, row, column, span);

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// The separable filter to be retrieved. Must be Separable2D.
        /// </param>
        /// <param name="format">
        /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the row filter image.
        /// </param>
        /// <param name="column">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the column filter image.
        /// </param>
        /// <param name="span">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the span filter image (currently unused).
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        [CLSCompliant(false)]
        public static void GetSeparableFilter<T3, T4, T5>(OpenToolkit.OpenGL.SeparableTargetExt target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,] column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T5[,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
         => instance.GetSeparableFilter<T3, T4, T5>(target, format, type, row, column, span);

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// The separable filter to be retrieved. Must be Separable2D.
        /// </param>
        /// <param name="format">
        /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the row filter image.
        /// </param>
        /// <param name="column">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the column filter image.
        /// </param>
        /// <param name="span">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the span filter image (currently unused).
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        [CLSCompliant(false)]
        public static void GetSeparableFilter<T3, T4, T5>(OpenToolkit.OpenGL.SeparableTargetExt target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T3[,,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T4[,,] column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
         => instance.GetSeparableFilter<T3, T4, T5>(target, format, type, row, column, span);

        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// The separable filter to be retrieved. Must be Separable2D.
        /// </param>
        /// <param name="format">
        /// Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the row filter image.
        /// </param>
        /// <param name="column">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the column filter image.
        /// </param>
        /// <param name="span">[length: COMPSIZE(target,format,type)]
        /// Pointer to storage for the span filter image (currently unused).
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glGetSeparableFilter")]
        public static void GetSeparableFilter<T3, T4, T5>(OpenToolkit.OpenGL.SeparableTargetExt target, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T3 row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T4 column, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type")] ref T5 span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
         => instance.GetSeparableFilter<T3, T4, T5>(target, format, type, ref row, ref column, ref span);

        /// <summary>[requires: v2.0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) => instance.GetShaderInfoLog(shader, bufSize, out length, out infoLog);

        /// <summary>[requires: v2.0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) => instance.GetShaderInfoLog(shader, bufSize, length, out infoLog);

        /// <summary>[requires: v2.0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) => instance.GetShaderInfoLog(shader, bufSize, out length, out infoLog);

        /// <summary>[requires: v2.0]
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize]
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String infoLog) => instance.GetShaderInfoLog(shader, bufSize, length, out infoLog);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(Int32 shader, OpenToolkit.OpenGL.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetShader(shader, pname, @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(Int32 shader, OpenToolkit.OpenGL.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetShader(shader, pname, out @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static unsafe void GetShader(Int32 shader, OpenToolkit.OpenGL.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetShader(shader, pname, @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenToolkit.OpenGL.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetShader(shader, pname, @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenToolkit.OpenGL.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetShader(shader, pname, out @params);

        /// <summary>[requires: v2.0]
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static unsafe void GetShader(UInt32 shader, OpenToolkit.OpenGL.ShaderParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetShader(shader, pname, @params);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the type of shader whose precision to query. shaderType must be VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype">
        /// Specifies the numeric format whose precision and range to query.
        /// </param>
        /// <param name="range">[length: 2]
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </param>
        /// <param name="precision">[length: 1]
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenToolkit.OpenGL.ShaderType shadertype, OpenToolkit.OpenGL.ShaderPrecision precisiontype, [OutAttribute, CountAttribute(Count = 2)] Int32[] range, [OutAttribute, CountAttribute(Count = 1)] out Int32 precision) => instance.GetShaderPrecisionFormat(shadertype, precisiontype, range, out precision);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the type of shader whose precision to query. shaderType must be VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype">
        /// Specifies the numeric format whose precision and range to query.
        /// </param>
        /// <param name="range">[length: 2]
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </param>
        /// <param name="precision">[length: 1]
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenToolkit.OpenGL.ShaderType shadertype, OpenToolkit.OpenGL.ShaderPrecision precisiontype, [OutAttribute, CountAttribute(Count = 2)] out Int32 range, [OutAttribute, CountAttribute(Count = 1)] out Int32 precision) => instance.GetShaderPrecisionFormat(shadertype, precisiontype, out range, out precision);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Retrieve the range and precision for numeric formats supported by the shader compiler
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the type of shader whose precision to query. shaderType must be VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype">
        /// Specifies the numeric format whose precision and range to query.
        /// </param>
        /// <param name="range">[length: 2]
        /// Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.
        /// </param>
        /// <param name="precision">[length: 1]
        /// Specifies the address of an integer into which the numeric precision of the implementation is written.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderPrecisionFormat(OpenToolkit.OpenGL.ShaderType shadertype, OpenToolkit.OpenGL.ShaderPrecision precisiontype, [OutAttribute, CountAttribute(Count = 2)] Int32* range, [OutAttribute, CountAttribute(Count = 1)] Int32* precision) => instance.GetShaderPrecisionFormat(shadertype, precisiontype, range, precision);

        /// <summary>[requires: v2.0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize]
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String source) => instance.GetShaderSource(shader, bufSize, out length, out source);

        /// <summary>[requires: v2.0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize]
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String source) => instance.GetShaderSource(shader, bufSize, length, out source);

        /// <summary>[requires: v2.0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize]
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String source) => instance.GetShaderSource(shader, bufSize, out length, out source);

        /// <summary>[requires: v2.0]
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1]
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize]
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String source) => instance.GetShaderSource(shader, bufSize, length, out source);

        /// <summary>[requires: v1.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, or ShadingLanguageVersion. Additionally, glGetStringi accepts the Extensions token.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetString")]
        public static String GetString(OpenToolkit.OpenGL.StringName name) => instance.GetString(name);

        /// <summary>[requires: v3.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, or ShadingLanguageVersion. Additionally, glGetStringi accepts the Extensions token.
        /// </param>
        /// <param name="index">
        /// For glGetStringi, specifies the index of the string to return.
        /// </param>
        [Obsolete("Use StringNameIndexed overload instead")]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        [CLSCompliant(false)]
        public static String GetString(OpenToolkit.OpenGL.StringName name, Int32 index) => instance.GetString(name, index);

        /// <summary>[requires: v3.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, or ShadingLanguageVersion. Additionally, glGetStringi accepts the Extensions token.
        /// </param>
        /// <param name="index">
        /// For glGetStringi, specifies the index of the string to return.
        /// </param>
        [Obsolete("Use StringNameIndexed overload instead")]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        [CLSCompliant(false)]
        public static String GetString(OpenToolkit.OpenGL.StringName name, UInt32 index) => instance.GetString(name, index);

        /// <summary>[requires: v3.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, or ShadingLanguageVersion. Additionally, glGetStringi accepts the Extensions token.
        /// </param>
        /// <param name="index">
        /// For glGetStringi, specifies the index of the string to return.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        [CLSCompliant(false)]
        public static String GetString(OpenToolkit.OpenGL.StringNameIndexed name, Int32 index) => instance.GetString(name, index);

        /// <summary>[requires: v3.0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, or ShadingLanguageVersion. Additionally, glGetStringi accepts the Extensions token.
        /// </param>
        /// <param name="index">
        /// For glGetStringi, specifies the index of the string to return.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
        [CLSCompliant(false)]
        public static String GetString(OpenToolkit.OpenGL.StringNameIndexed name, UInt32 index) => instance.GetString(name, index);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the index of a subroutine uniform of a given shader stage within a program
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing shader stage.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="name">
        /// Specifies the name of the subroutine uniform whose index to query.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetSubroutineIndex")]
        [CLSCompliant(false)]
        public static Int32 GetSubroutineIndex(Int32 program, OpenToolkit.OpenGL.ShaderType shadertype, String name) => instance.GetSubroutineIndex(program, shadertype, name);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the index of a subroutine uniform of a given shader stage within a program
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing shader stage.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="name">
        /// Specifies the name of the subroutine uniform whose index to query.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetSubroutineIndex")]
        [CLSCompliant(false)]
        public static Int32 GetSubroutineIndex(UInt32 program, OpenToolkit.OpenGL.ShaderType shadertype, String name) => instance.GetSubroutineIndex(program, shadertype, name);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the location of a subroutine uniform of a given shader stage within a program
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing shader stage.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="name">
        /// Specifies the name of the subroutine uniform whose index to query.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetSubroutineUniformLocation")]
        [CLSCompliant(false)]
        public static Int32 GetSubroutineUniformLocation(Int32 program, OpenToolkit.OpenGL.ShaderType shadertype, String name) => instance.GetSubroutineUniformLocation(program, shadertype, name);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the location of a subroutine uniform of a given shader stage within a program
        /// </summary>
        /// <param name="program">
        /// Specifies the name of the program containing shader stage.
        /// </param>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="name">
        /// Specifies the name of the subroutine uniform whose index to query.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetSubroutineUniformLocation")]
        [CLSCompliant(false)]
        public static Int32 GetSubroutineUniformLocation(UInt32 program, OpenToolkit.OpenGL.ShaderType shadertype, String name) => instance.GetSubroutineUniformLocation(program, shadertype, name);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">[length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [Obsolete("Use SyncParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static void GetSync(IntPtr sync, OpenToolkit.OpenGL.ArbSync pname, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32[] values) => instance.GetSync(sync, pname, bufSize, out length, values);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">[length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [Obsolete("Use SyncParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static void GetSync(IntPtr sync, OpenToolkit.OpenGL.ArbSync pname, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int32 values) => instance.GetSync(sync, pname, bufSize, out length, out values);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">[length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [Obsolete("Use SyncParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static unsafe void GetSync(IntPtr sync, OpenToolkit.OpenGL.ArbSync pname, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* values) => instance.GetSync(sync, pname, bufSize, length, values);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">[length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static void GetSync(IntPtr sync, OpenToolkit.OpenGL.SyncParameterName pname, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32[] values) => instance.GetSync(sync, pname, bufSize, out length, values);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">[length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static void GetSync(IntPtr sync, OpenToolkit.OpenGL.SyncParameterName pname, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Parameter = "bufSize")] out Int32 values) => instance.GetSync(sync, pname, bufSize, out length, out values);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Query the properties of a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose properties to query.
        /// </param>
        /// <param name="pname">
        /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
        /// </param>
        /// <param name="bufSize">
        /// Specifies the size of the buffer whose address is given in values.
        /// </param>
        /// <param name="length">[length: 1]
        /// Specifies the address of an variable to receive the number of integers placed in values.
        /// </param>
        /// <param name="values">[length: bufSize]
        /// Specifies the address of an array to receive the values of the queried parameter.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glGetSynciv")]
        [CLSCompliant(false)]
        public static unsafe void GetSync(IntPtr sync, OpenToolkit.OpenGL.SyncParameterName pname, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Parameter = "bufSize")] Int32* values) => instance.GetSync(sync, pname, bufSize, length, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        [CLSCompliant(false)]
        public static void GetTexEnv(OpenToolkit.OpenGL.TextureEnvTarget target, OpenToolkit.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) => instance.GetTexEnv(target, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        [CLSCompliant(false)]
        public static void GetTexEnv(OpenToolkit.OpenGL.TextureEnvTarget target, OpenToolkit.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) => instance.GetTexEnv(target, pname, out @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexEnv(OpenToolkit.OpenGL.TextureEnvTarget target, OpenToolkit.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) => instance.GetTexEnv(target, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        [CLSCompliant(false)]
        public static void GetTexEnv(OpenToolkit.OpenGL.TextureEnvTarget target, OpenToolkit.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetTexEnv(target, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        [CLSCompliant(false)]
        public static void GetTexEnv(OpenToolkit.OpenGL.TextureEnvTarget target, OpenToolkit.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetTexEnv(target, pname, out @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexEnv(OpenToolkit.OpenGL.TextureEnvTarget target, OpenToolkit.OpenGL.TextureEnvParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetTexEnv(target, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGendv")]
        [CLSCompliant(false)]
        public static void GetTexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Double[] @params) => instance.GetTexGen(coord, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGendv")]
        [CLSCompliant(false)]
        public static void GetTexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Double @params) => instance.GetTexGen(coord, pname, out @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGendv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Double* @params) => instance.GetTexGen(coord, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGenfv")]
        [CLSCompliant(false)]
        public static void GetTexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) => instance.GetTexGen(coord, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGenfv")]
        [CLSCompliant(false)]
        public static void GetTexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) => instance.GetTexGen(coord, pname, out @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGenfv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) => instance.GetTexGen(coord, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGeniv")]
        [CLSCompliant(false)]
        public static void GetTexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetTexGen(coord, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGeniv")]
        [CLSCompliant(false)]
        public static void GetTexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetTexGen(coord, pname, out @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Return texture coordinate generation parameters
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexGeniv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetTexGen(coord, pname, @params);

        /// <summary>[requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="format">
        /// Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.
        /// </param>
        /// <param name="type">
        /// Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(target,level,format,type)]
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static void GetTexImage(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "target,level,format,type")] IntPtr pixels) => instance.GetTexImage(target, level, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="format">
        /// Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.
        /// </param>
        /// <param name="type">
        /// Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(target,level,format,type)]
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        [CLSCompliant(false)]
        public static void GetTexImage<T4>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T4[] pixels)
            where T4 : struct
         => instance.GetTexImage<T4>(target, level, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="format">
        /// Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.
        /// </param>
        /// <param name="type">
        /// Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(target,level,format,type)]
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        [CLSCompliant(false)]
        public static void GetTexImage<T4>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T4[,] pixels)
            where T4 : struct
         => instance.GetTexImage<T4>(target, level, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="format">
        /// Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.
        /// </param>
        /// <param name="type">
        /// Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(target,level,format,type)]
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        [CLSCompliant(false)]
        public static void GetTexImage<T4>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] T4[,,] pixels)
            where T4 : struct
         => instance.GetTexImage<T4>(target, level, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="format">
        /// Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.
        /// </param>
        /// <param name="type">
        /// Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(target,level,format,type)]
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static void GetTexImage<T4>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,level,format,type")] ref T4 pixels)
            where T4 : struct
         => instance.GetTexImage<T4>(target, level, format, type, ref pixels);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        [CLSCompliant(false)]
        public static void GetTexLevelParameter(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) => instance.GetTexLevelParameter(target, level, pname, @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        [CLSCompliant(false)]
        public static void GetTexLevelParameter(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) => instance.GetTexLevelParameter(target, level, pname, out @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexLevelParameter(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) => instance.GetTexLevelParameter(target, level, pname, @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        [CLSCompliant(false)]
        public static void GetTexLevelParameter(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetTexLevelParameter(target, level, pname, @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        [CLSCompliant(false)]
        public static void GetTexLevelParameter(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetTexLevelParameter(target, level, pname, out @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values for a specific level of detail
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture, one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, Texture2DMultisample, Texture2DMultisampleArray, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, ProxyTexture1D, ProxyTexture2D, ProxyTexture3D, ProxyTexture1DArray, ProxyTexture2DArray, ProxyTextureRectangle, ProxyTexture2DMultisample, ProxyTexture2DMultisampleArray, ProxyTextureCubeMap, or TextureBuffer.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexLevelParameter(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetTexLevelParameter(target, level, pname, @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single[] @params) => instance.GetTexParameter(target, pname, @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Single @params) => instance.GetTexParameter(target, pname, out @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Single* @params) => instance.GetTexParameter(target, pname, @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        [CLSCompliant(false)]
        public static void GetTexParameterI(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetTexParameterI(target, pname, @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        [CLSCompliant(false)]
        public static void GetTexParameterI(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetTexParameterI(target, pname, out @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameterI(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetTexParameterI(target, pname, @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        [CLSCompliant(false)]
        public static void GetTexParameterI(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32[] @params) => instance.GetTexParameterI(target, pname, @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        [CLSCompliant(false)]
        public static void GetTexParameterI(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out UInt32 @params) => instance.GetTexParameterI(target, pname, out @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameterI(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] UInt32* @params) => instance.GetTexParameterI(target, pname, @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32[] @params) => instance.GetTexParameter(target, pname, @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Int32 @params) => instance.GetTexParameter(target, pname, out @params);

        /// <summary>[requires: v1.0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Returns the texture parameters.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Int32* @params) => instance.GetTexParameter(target, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureImage")]
        [CLSCompliant(false)]
        public static void GetTextureImage(Int32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [OutAttribute] IntPtr pixels) => instance.GetTextureImage(texture, level, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureImage")]
        [CLSCompliant(false)]
        public static void GetTextureImage<T5>(Int32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T5[] pixels)
            where T5 : struct
         => instance.GetTextureImage<T5>(texture, level, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureImage")]
        [CLSCompliant(false)]
        public static void GetTextureImage<T5>(Int32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T5[,] pixels)
            where T5 : struct
         => instance.GetTextureImage<T5>(texture, level, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureImage")]
        [CLSCompliant(false)]
        public static void GetTextureImage<T5>(Int32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T5[,,] pixels)
            where T5 : struct
         => instance.GetTextureImage<T5>(texture, level, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureImage")]
        [CLSCompliant(false)]
        public static void GetTextureImage<T5>(Int32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] ref T5 pixels)
            where T5 : struct
         => instance.GetTextureImage<T5>(texture, level, format, type, bufSize, ref pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureImage")]
        [CLSCompliant(false)]
        public static void GetTextureImage(UInt32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [OutAttribute] IntPtr pixels) => instance.GetTextureImage(texture, level, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureImage")]
        [CLSCompliant(false)]
        public static void GetTextureImage<T5>(UInt32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T5[] pixels)
            where T5 : struct
         => instance.GetTextureImage<T5>(texture, level, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureImage")]
        [CLSCompliant(false)]
        public static void GetTextureImage<T5>(UInt32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T5[,] pixels)
            where T5 : struct
         => instance.GetTextureImage<T5>(texture, level, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureImage")]
        [CLSCompliant(false)]
        public static void GetTextureImage<T5>(UInt32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T5[,,] pixels)
            where T5 : struct
         => instance.GetTextureImage<T5>(texture, level, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureImage")]
        [CLSCompliant(false)]
        public static void GetTextureImage<T5>(UInt32 texture, Int32 level, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] ref T5 pixels)
            where T5 : struct
         => instance.GetTextureImage<T5>(texture, level, format, type, bufSize, ref pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameterfv")]
        [CLSCompliant(false)]
        public static void GetTextureLevelParameter(Int32 texture, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Single[] @params) => instance.GetTextureLevelParameter(texture, level, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameterfv")]
        [CLSCompliant(false)]
        public static void GetTextureLevelParameter(Int32 texture, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] out Single @params) => instance.GetTextureLevelParameter(texture, level, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetTextureLevelParameter(Int32 texture, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Single* @params) => instance.GetTextureLevelParameter(texture, level, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameterfv")]
        [CLSCompliant(false)]
        public static void GetTextureLevelParameter(UInt32 texture, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Single[] @params) => instance.GetTextureLevelParameter(texture, level, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameterfv")]
        [CLSCompliant(false)]
        public static void GetTextureLevelParameter(UInt32 texture, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] out Single @params) => instance.GetTextureLevelParameter(texture, level, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetTextureLevelParameter(UInt32 texture, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Single* @params) => instance.GetTextureLevelParameter(texture, level, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameteriv")]
        [CLSCompliant(false)]
        public static void GetTextureLevelParameter(Int32 texture, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params) => instance.GetTextureLevelParameter(texture, level, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameteriv")]
        [CLSCompliant(false)]
        public static void GetTextureLevelParameter(Int32 texture, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params) => instance.GetTextureLevelParameter(texture, level, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetTextureLevelParameter(Int32 texture, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params) => instance.GetTextureLevelParameter(texture, level, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameteriv")]
        [CLSCompliant(false)]
        public static void GetTextureLevelParameter(UInt32 texture, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params) => instance.GetTextureLevelParameter(texture, level, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameteriv")]
        [CLSCompliant(false)]
        public static void GetTextureLevelParameter(UInt32 texture, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params) => instance.GetTextureLevelParameter(texture, level, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureLevelParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetTextureLevelParameter(UInt32 texture, Int32 level, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params) => instance.GetTextureLevelParameter(texture, level, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterfv")]
        [CLSCompliant(false)]
        public static void GetTextureParameter(Int32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Single[] @params) => instance.GetTextureParameter(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterfv")]
        [CLSCompliant(false)]
        public static void GetTextureParameter(Int32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] out Single @params) => instance.GetTextureParameter(texture, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetTextureParameter(Int32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Single* @params) => instance.GetTextureParameter(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterfv")]
        [CLSCompliant(false)]
        public static void GetTextureParameter(UInt32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Single[] @params) => instance.GetTextureParameter(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterfv")]
        [CLSCompliant(false)]
        public static void GetTextureParameter(UInt32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] out Single @params) => instance.GetTextureParameter(texture, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetTextureParameter(UInt32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Single* @params) => instance.GetTextureParameter(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterIiv")]
        [CLSCompliant(false)]
        public static void GetTextureParameterI(Int32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params) => instance.GetTextureParameterI(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterIiv")]
        [CLSCompliant(false)]
        public static void GetTextureParameterI(Int32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params) => instance.GetTextureParameterI(texture, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterIiv")]
        [CLSCompliant(false)]
        public static unsafe void GetTextureParameterI(Int32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params) => instance.GetTextureParameterI(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterIiv")]
        [CLSCompliant(false)]
        public static void GetTextureParameterI(UInt32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params) => instance.GetTextureParameterI(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterIiv")]
        [CLSCompliant(false)]
        public static void GetTextureParameterI(UInt32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params) => instance.GetTextureParameterI(texture, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterIiv")]
        [CLSCompliant(false)]
        public static unsafe void GetTextureParameterI(UInt32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params) => instance.GetTextureParameterI(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterIuiv")]
        [CLSCompliant(false)]
        public static void GetTextureParameterI(UInt32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] UInt32[] @params) => instance.GetTextureParameterI(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterIuiv")]
        [CLSCompliant(false)]
        public static void GetTextureParameterI(UInt32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] out UInt32 @params) => instance.GetTextureParameterI(texture, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameterIuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetTextureParameterI(UInt32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] UInt32* @params) => instance.GetTextureParameterI(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameteriv")]
        [CLSCompliant(false)]
        public static void GetTextureParameter(Int32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params) => instance.GetTextureParameter(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameteriv")]
        [CLSCompliant(false)]
        public static void GetTextureParameter(Int32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params) => instance.GetTextureParameter(texture, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetTextureParameter(Int32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params) => instance.GetTextureParameter(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameteriv")]
        [CLSCompliant(false)]
        public static void GetTextureParameter(UInt32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params) => instance.GetTextureParameter(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameteriv")]
        [CLSCompliant(false)]
        public static void GetTextureParameter(UInt32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params) => instance.GetTextureParameter(texture, pname, out @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetTextureParameter(UInt32 texture, OpenToolkit.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params) => instance.GetTextureParameter(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetTextureSubImage(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [OutAttribute] IntPtr pixels) => instance.GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetTextureSubImage<T11>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T11[] pixels)
            where T11 : struct
         => instance.GetTextureSubImage<T11>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetTextureSubImage<T11>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T11[,] pixels)
            where T11 : struct
         => instance.GetTextureSubImage<T11>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetTextureSubImage<T11>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T11[,,] pixels)
            where T11 : struct
         => instance.GetTextureSubImage<T11>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetTextureSubImage<T11>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] ref T11 pixels)
            where T11 : struct
         => instance.GetTextureSubImage<T11>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, ref pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetTextureSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [OutAttribute] IntPtr pixels) => instance.GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetTextureSubImage<T11>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T11[] pixels)
            where T11 : struct
         => instance.GetTextureSubImage<T11>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetTextureSubImage<T11>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T11[,] pixels)
            where T11 : struct
         => instance.GetTextureSubImage<T11>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetTextureSubImage<T11>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T11[,,] pixels)
            where T11 : struct
         => instance.GetTextureSubImage<T11>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);

        /// <summary>[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_get_texture_sub_image|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTextureSubImage")]
        [CLSCompliant(false)]
        public static void GetTextureSubImage<T11>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] ref T11 pixels)
            where T11 : struct
         => instance.GetTextureSubImage<T11>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, ref pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="index"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki_v")]
        [CLSCompliant(false)]
        public static void GetTransformFeedback(Int32 xfb, OpenToolkit.OpenGL.TransformFeedbackIndexedParameter pname, Int32 index, [OutAttribute] Int32[] param) => instance.GetTransformFeedback(xfb, pname, index, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="index"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki_v")]
        [CLSCompliant(false)]
        public static void GetTransformFeedback(Int32 xfb, OpenToolkit.OpenGL.TransformFeedbackIndexedParameter pname, Int32 index, [OutAttribute] out Int32 param) => instance.GetTransformFeedback(xfb, pname, index, out param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="index"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki_v")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedback(Int32 xfb, OpenToolkit.OpenGL.TransformFeedbackIndexedParameter pname, Int32 index, [OutAttribute] Int32* param) => instance.GetTransformFeedback(xfb, pname, index, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="index"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki_v")]
        [CLSCompliant(false)]
        public static void GetTransformFeedback(UInt32 xfb, OpenToolkit.OpenGL.TransformFeedbackIndexedParameter pname, UInt32 index, [OutAttribute] Int32[] param) => instance.GetTransformFeedback(xfb, pname, index, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="index"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki_v")]
        [CLSCompliant(false)]
        public static void GetTransformFeedback(UInt32 xfb, OpenToolkit.OpenGL.TransformFeedbackIndexedParameter pname, UInt32 index, [OutAttribute] out Int32 param) => instance.GetTransformFeedback(xfb, pname, index, out param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="index"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki_v")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedback(UInt32 xfb, OpenToolkit.OpenGL.TransformFeedbackIndexedParameter pname, UInt32 index, [OutAttribute] Int32* param) => instance.GetTransformFeedback(xfb, pname, index, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="index"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki64_v")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbacki64_(Int32 xfb, OpenToolkit.OpenGL.TransformFeedbackIndexedParameter pname, Int32 index, [OutAttribute] Int64[] param) => instance.GetTransformFeedbacki64_(xfb, pname, index, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="index"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki64_v")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbacki64_(Int32 xfb, OpenToolkit.OpenGL.TransformFeedbackIndexedParameter pname, Int32 index, [OutAttribute] out Int64 param) => instance.GetTransformFeedbacki64_(xfb, pname, index, out param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="index"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki64_v")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedbacki64_(Int32 xfb, OpenToolkit.OpenGL.TransformFeedbackIndexedParameter pname, Int32 index, [OutAttribute] Int64* param) => instance.GetTransformFeedbacki64_(xfb, pname, index, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="index"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki64_v")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbacki64_(UInt32 xfb, OpenToolkit.OpenGL.TransformFeedbackIndexedParameter pname, UInt32 index, [OutAttribute] Int64[] param) => instance.GetTransformFeedbacki64_(xfb, pname, index, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="index"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki64_v")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbacki64_(UInt32 xfb, OpenToolkit.OpenGL.TransformFeedbackIndexedParameter pname, UInt32 index, [OutAttribute] out Int64 param) => instance.GetTransformFeedbacki64_(xfb, pname, index, out param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="index"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbacki64_v")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedbacki64_(UInt32 xfb, OpenToolkit.OpenGL.TransformFeedbackIndexedParameter pname, UInt32 index, [OutAttribute] Int64* param) => instance.GetTransformFeedbacki64_(xfb, pname, index, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbackiv")]
        [CLSCompliant(false)]
        public static void GetTransformFeedback(Int32 xfb, OpenToolkit.OpenGL.TransformFeedbackParameter pname, [OutAttribute] Int32[] param) => instance.GetTransformFeedback(xfb, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbackiv")]
        [CLSCompliant(false)]
        public static void GetTransformFeedback(Int32 xfb, OpenToolkit.OpenGL.TransformFeedbackParameter pname, [OutAttribute] out Int32 param) => instance.GetTransformFeedback(xfb, pname, out param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbackiv")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedback(Int32 xfb, OpenToolkit.OpenGL.TransformFeedbackParameter pname, [OutAttribute] Int32* param) => instance.GetTransformFeedback(xfb, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbackiv")]
        [CLSCompliant(false)]
        public static void GetTransformFeedback(UInt32 xfb, OpenToolkit.OpenGL.TransformFeedbackParameter pname, [OutAttribute] Int32[] param) => instance.GetTransformFeedback(xfb, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbackiv")]
        [CLSCompliant(false)]
        public static void GetTransformFeedback(UInt32 xfb, OpenToolkit.OpenGL.TransformFeedbackParameter pname, [OutAttribute] out Int32 param) => instance.GetTransformFeedback(xfb, pname, out param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetTransformFeedbackiv")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedback(UInt32 xfb, OpenToolkit.OpenGL.TransformFeedbackParameter pname, [OutAttribute] Int32* param) => instance.GetTransformFeedback(xfb, pname, param);

        /// <summary>[requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.ActiveAttribType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetTransformFeedbackVarying(program, index, bufSize, out length, out size, out type, out name);

        /// <summary>[requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.TransformFeedbackType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetTransformFeedbackVarying(program, index, bufSize, out length, out size, out type, out name);

        /// <summary>[requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.ActiveAttribType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetTransformFeedbackVarying(program, index, bufSize, length, size, type, out name);

        /// <summary>[requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.TransformFeedbackType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetTransformFeedbackVarying(program, index, bufSize, length, size, type, out name);

        /// <summary>[requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.ActiveAttribType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetTransformFeedbackVarying(program, index, bufSize, out length, out size, out type, out name);

        /// <summary>[requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] out Int32 length, [OutAttribute, CountAttribute(Count = 1)] out Int32 size, [OutAttribute, CountAttribute(Count = 1)] out OpenToolkit.OpenGL.TransformFeedbackType type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetTransformFeedbackVarying(program, index, bufSize, out length, out size, out type, out name);

        /// <summary>[requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.ActiveAttribType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetTransformFeedbackVarying(program, index, bufSize, length, size, type, out name);

        /// <summary>[requires: v3.0]
        /// Retrieve information about varying variables selected for transform feedback
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="index">
        /// The index of the varying variable whose information to retrieve.
        /// </param>
        /// <param name="bufSize">
        /// The maximum number of characters, including the null terminator, that may be written into name.
        /// </param>
        /// <param name="length">[length: 1]
        /// The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.
        /// </param>
        /// <param name="size">[length: 1]
        /// The address of a variable that will receive the size of the varying.
        /// </param>
        /// <param name="type">[length: 1]
        /// The address of a variable that will recieve the type of the varying.
        /// </param>
        /// <param name="name">[length: bufSize]
        /// The address of a buffer into which will be written the name of the varying.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        [CLSCompliant(false)]
        public static unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute, CountAttribute(Count = 1)] Int32* length, [OutAttribute, CountAttribute(Count = 1)] Int32* size, [OutAttribute, CountAttribute(Count = 1)] OpenToolkit.OpenGL.TransformFeedbackType* type, [OutAttribute, CountAttribute(Parameter = "bufSize")] out String name) => instance.GetTransformFeedbackVarying(program, index, bufSize, length, size, type, out name);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockName">[length: COMPSIZE()]
        /// Specifies the address an array of characters to containing the name of the uniform block whose index to retrieve.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformBlockIndex")]
        [CLSCompliant(false)]
        public static Int32 GetUniformBlockIndex(Int32 program, [CountAttribute(Computed = "")] String uniformBlockName) => instance.GetUniformBlockIndex(program, uniformBlockName);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing the uniform block.
        /// </param>
        /// <param name="uniformBlockName">[length: COMPSIZE()]
        /// Specifies the address an array of characters to containing the name of the uniform block whose index to retrieve.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformBlockIndex")]
        [CLSCompliant(false)]
        public static Int32 GetUniformBlockIndex(UInt32 program, [CountAttribute(Computed = "")] String uniformBlockName) => instance.GetUniformBlockIndex(program, uniformBlockName);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformdv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Double[] @params) => instance.GetUniform(program, location, @params);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformdv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] out Double @params) => instance.GetUniform(program, location, out @params);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformdv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Double* @params) => instance.GetUniform(program, location, @params);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformdv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Double[] @params) => instance.GetUniform(program, location, @params);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformdv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] out Double @params) => instance.GetUniform(program, location, out @params);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformdv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Double* @params) => instance.GetUniform(program, location, @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Single[] @params) => instance.GetUniform(program, location, @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] out Single @params) => instance.GetUniform(program, location, out @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Single* @params) => instance.GetUniform(program, location, @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Single[] @params) => instance.GetUniform(program, location, @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] out Single @params) => instance.GetUniform(program, location, out @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Single* @params) => instance.GetUniform(program, location, @params);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(Int32 program, Int32 uniformCount, [CountAttribute(Computed = "uniformCount")] String[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] Int32[] uniformIndices) => instance.GetUniformIndices(program, uniformCount, uniformNames, uniformIndices);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(Int32 program, Int32 uniformCount, [CountAttribute(Computed = "uniformCount")] String[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] out Int32 uniformIndices) => instance.GetUniformIndices(program, uniformCount, uniformNames, out uniformIndices);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static unsafe void GetUniformIndices(Int32 program, Int32 uniformCount, [CountAttribute(Computed = "uniformCount")] String[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] Int32* uniformIndices) => instance.GetUniformIndices(program, uniformCount, uniformNames, uniformIndices);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(UInt32 program, Int32 uniformCount, [CountAttribute(Computed = "uniformCount")] String[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] UInt32[] uniformIndices) => instance.GetUniformIndices(program, uniformCount, uniformNames, uniformIndices);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static void GetUniformIndices(UInt32 program, Int32 uniformCount, [CountAttribute(Computed = "uniformCount")] String[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] out UInt32 uniformIndices) => instance.GetUniformIndices(program, uniformCount, uniformNames, out uniformIndices);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Retrieve the index of a named uniform block
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program containing uniforms whose indices to query.
        /// </param>
        /// <param name="uniformCount">
        /// Specifies the number of uniforms whose indices to query.
        /// </param>
        /// <param name="uniformNames">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
        /// </param>
        /// <param name="uniformIndices">[length: COMPSIZE(uniformCount)]
        /// Specifies the address of an array that will receive the indices of the uniforms.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glGetUniformIndices")]
        [CLSCompliant(false)]
        public static unsafe void GetUniformIndices(UInt32 program, Int32 uniformCount, [CountAttribute(Computed = "uniformCount")] String[] uniformNames, [OutAttribute, CountAttribute(Computed = "uniformCount")] UInt32* uniformIndices) => instance.GetUniformIndices(program, uniformCount, uniformNames, uniformIndices);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int32[] @params) => instance.GetUniform(program, location, @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] out Int32 @params) => instance.GetUniform(program, location, out @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int32* @params) => instance.GetUniform(program, location, @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int32[] @params) => instance.GetUniform(program, location, @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] out Int32 @params) => instance.GetUniform(program, location, out @params);

        /// <summary>[requires: v2.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] Int32* @params) => instance.GetUniform(program, location, @params);

        /// <summary>[requires: v2.0]
        /// Returns the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name">
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        [CLSCompliant(false)]
        public static Int32 GetUniformLocation(Int32 program, String name) => instance.GetUniformLocation(program, name);

        /// <summary>[requires: v2.0]
        /// Returns the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name">
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        [CLSCompliant(false)]
        public static Int32 GetUniformLocation(UInt32 program, String name) => instance.GetUniformLocation(program, name);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the value of a subroutine uniform of a given shader stage of the current program
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the subroutine uniform.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Specifies the address of a variable to receive the value or values of the subroutine uniform.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformSubroutineuiv")]
        [CLSCompliant(false)]
        public static void GetUniformSubroutine(OpenToolkit.OpenGL.ShaderType shadertype, Int32 location, [OutAttribute, CountAttribute(Count = 1)] out Int32 @params) => instance.GetUniformSubroutine(shadertype, location, out @params);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the value of a subroutine uniform of a given shader stage of the current program
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the subroutine uniform.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Specifies the address of a variable to receive the value or values of the subroutine uniform.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformSubroutineuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniformSubroutine(OpenToolkit.OpenGL.ShaderType shadertype, Int32 location, [OutAttribute, CountAttribute(Count = 1)] Int32* @params) => instance.GetUniformSubroutine(shadertype, location, @params);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the value of a subroutine uniform of a given shader stage of the current program
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the subroutine uniform.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Specifies the address of a variable to receive the value or values of the subroutine uniform.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformSubroutineuiv")]
        [CLSCompliant(false)]
        public static void GetUniformSubroutine(OpenToolkit.OpenGL.ShaderType shadertype, Int32 location, [OutAttribute, CountAttribute(Count = 1)] out UInt32 @params) => instance.GetUniformSubroutine(shadertype, location, out @params);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Retrieve the value of a subroutine uniform of a given shader stage of the current program
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the subroutine uniform.
        /// </param>
        /// <param name="@params">[length: 1]
        /// Specifies the address of a variable to receive the value or values of the subroutine uniform.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glGetUniformSubroutineuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniformSubroutine(OpenToolkit.OpenGL.ShaderType shadertype, Int32 location, [OutAttribute, CountAttribute(Count = 1)] UInt32* @params) => instance.GetUniformSubroutine(shadertype, location, @params);

        /// <summary>[requires: v3.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] UInt32[] @params) => instance.GetUniform(program, location, @params);

        /// <summary>[requires: v3.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] out UInt32 @params) => instance.GetUniform(program, location, out @params);

        /// <summary>[requires: v3.0]
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(program,location)]
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute, CountAttribute(Computed = "program,location")] UInt32* @params) => instance.GetUniform(program, location, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexed64iv")]
        [CLSCompliant(false)]
        public static void GetVertexArrayIndexed64(Int32 vaobj, Int32 index, OpenToolkit.OpenGL.VertexArrayIndexed64Parameter pname, [OutAttribute] Int64[] param) => instance.GetVertexArrayIndexed64(vaobj, index, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexed64iv")]
        [CLSCompliant(false)]
        public static void GetVertexArrayIndexed64(Int32 vaobj, Int32 index, OpenToolkit.OpenGL.VertexArrayIndexed64Parameter pname, [OutAttribute] out Int64 param) => instance.GetVertexArrayIndexed64(vaobj, index, pname, out param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexed64iv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexArrayIndexed64(Int32 vaobj, Int32 index, OpenToolkit.OpenGL.VertexArrayIndexed64Parameter pname, [OutAttribute] Int64* param) => instance.GetVertexArrayIndexed64(vaobj, index, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexed64iv")]
        [CLSCompliant(false)]
        public static void GetVertexArrayIndexed64(UInt32 vaobj, UInt32 index, OpenToolkit.OpenGL.VertexArrayIndexed64Parameter pname, [OutAttribute] Int64[] param) => instance.GetVertexArrayIndexed64(vaobj, index, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexed64iv")]
        [CLSCompliant(false)]
        public static void GetVertexArrayIndexed64(UInt32 vaobj, UInt32 index, OpenToolkit.OpenGL.VertexArrayIndexed64Parameter pname, [OutAttribute] out Int64 param) => instance.GetVertexArrayIndexed64(vaobj, index, pname, out param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexed64iv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexArrayIndexed64(UInt32 vaobj, UInt32 index, OpenToolkit.OpenGL.VertexArrayIndexed64Parameter pname, [OutAttribute] Int64* param) => instance.GetVertexArrayIndexed64(vaobj, index, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexediv")]
        [CLSCompliant(false)]
        public static void GetVertexArrayIndexed(Int32 vaobj, Int32 index, OpenToolkit.OpenGL.VertexArrayIndexedParameter pname, [OutAttribute] Int32[] param) => instance.GetVertexArrayIndexed(vaobj, index, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexediv")]
        [CLSCompliant(false)]
        public static void GetVertexArrayIndexed(Int32 vaobj, Int32 index, OpenToolkit.OpenGL.VertexArrayIndexedParameter pname, [OutAttribute] out Int32 param) => instance.GetVertexArrayIndexed(vaobj, index, pname, out param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexediv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexArrayIndexed(Int32 vaobj, Int32 index, OpenToolkit.OpenGL.VertexArrayIndexedParameter pname, [OutAttribute] Int32* param) => instance.GetVertexArrayIndexed(vaobj, index, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexediv")]
        [CLSCompliant(false)]
        public static void GetVertexArrayIndexed(UInt32 vaobj, UInt32 index, OpenToolkit.OpenGL.VertexArrayIndexedParameter pname, [OutAttribute] Int32[] param) => instance.GetVertexArrayIndexed(vaobj, index, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexediv")]
        [CLSCompliant(false)]
        public static void GetVertexArrayIndexed(UInt32 vaobj, UInt32 index, OpenToolkit.OpenGL.VertexArrayIndexedParameter pname, [OutAttribute] out Int32 param) => instance.GetVertexArrayIndexed(vaobj, index, pname, out param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayIndexediv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexArrayIndexed(UInt32 vaobj, UInt32 index, OpenToolkit.OpenGL.VertexArrayIndexedParameter pname, [OutAttribute] Int32* param) => instance.GetVertexArrayIndexed(vaobj, index, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayiv")]
        [CLSCompliant(false)]
        public static void GetVertexArray(Int32 vaobj, OpenToolkit.OpenGL.VertexArrayParameter pname, [OutAttribute] Int32[] param) => instance.GetVertexArray(vaobj, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayiv")]
        [CLSCompliant(false)]
        public static void GetVertexArray(Int32 vaobj, OpenToolkit.OpenGL.VertexArrayParameter pname, [OutAttribute] out Int32 param) => instance.GetVertexArray(vaobj, pname, out param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexArray(Int32 vaobj, OpenToolkit.OpenGL.VertexArrayParameter pname, [OutAttribute] Int32* param) => instance.GetVertexArray(vaobj, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayiv")]
        [CLSCompliant(false)]
        public static void GetVertexArray(UInt32 vaobj, OpenToolkit.OpenGL.VertexArrayParameter pname, [OutAttribute] Int32[] param) => instance.GetVertexArray(vaobj, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayiv")]
        [CLSCompliant(false)]
        public static void GetVertexArray(UInt32 vaobj, OpenToolkit.OpenGL.VertexArrayParameter pname, [OutAttribute] out Int32 param) => instance.GetVertexArray(vaobj, pname, out param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glGetVertexArrayiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexArray(UInt32 vaobj, OpenToolkit.OpenGL.VertexArrayParameter pname, [OutAttribute] Int32* param) => instance.GetVertexArray(vaobj, pname, param);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Double[] @params) => instance.GetVertexAttrib(index, pname, @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] out Double @params) => instance.GetVertexAttrib(index, pname, out @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Double* @params) => instance.GetVertexAttrib(index, pname, @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Double[] @params) => instance.GetVertexAttrib(index, pname, @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] out Double @params) => instance.GetVertexAttrib(index, pname, out @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Double* @params) => instance.GetVertexAttrib(index, pname, @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Single[] @params) => instance.GetVertexAttrib(index, pname, @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] out Single @params) => instance.GetVertexAttrib(index, pname, out @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Single* @params) => instance.GetVertexAttrib(index, pname, @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Single[] @params) => instance.GetVertexAttrib(index, pname, @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] out Single @params) => instance.GetVertexAttrib(index, pname, out @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Single* @params) => instance.GetVertexAttrib(index, pname, @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribI(Int32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] out Int32 @params) => instance.GetVertexAttribI(index, pname, out @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttribI(Int32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] Int32* @params) => instance.GetVertexAttribI(index, pname, @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribI(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] out Int32 @params) => instance.GetVertexAttribI(index, pname, out @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttribI(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] Int32* @params) => instance.GetVertexAttribI(index, pname, @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribI(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] out UInt32 @params) => instance.GetVertexAttribI(index, pname, out @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: 1]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttribI(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 1)] UInt32* @params) => instance.GetVertexAttribI(index, pname, @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Int32[] @params) => instance.GetVertexAttrib(index, pname, @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] out Int32 @params) => instance.GetVertexAttrib(index, pname, out @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Int32* @params) => instance.GetVertexAttrib(index, pname, @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Int32[] @params) => instance.GetVertexAttrib(index, pname, @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] out Int32 @params) => instance.GetVertexAttrib(index, pname, out @params);

        /// <summary>[requires: v2.0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4]
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Count = 4)] Int32* @params) => instance.GetVertexAttrib(index, pname, @params);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribL(Int32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Double[] @params) => instance.GetVertexAttribL(index, pname, @params);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribL(Int32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Double @params) => instance.GetVertexAttribL(index, pname, out @params);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttribL(Int32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Double* @params) => instance.GetVertexAttribL(index, pname, @params);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribL(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Double[] @params) => instance.GetVertexAttribL(index, pname, @params);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribL(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] out Double @params) => instance.GetVertexAttribL(index, pname, out @params);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttribL(UInt32 index, OpenToolkit.OpenGL.VertexAttribParameter pname, [OutAttribute, CountAttribute(Computed = "pname")] Double* @params) => instance.GetVertexAttribL(index, pname, @params);

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(Int32 index, OpenToolkit.OpenGL.VertexAttribPointerParameter pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer) => instance.GetVertexAttribPointer(index, pname, pointer);

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenToolkit.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] pointer)
            where T2 : struct
         => instance.GetVertexAttribPointer<T2>(index, pname, pointer);

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenToolkit.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] pointer)
            where T2 : struct
         => instance.GetVertexAttribPointer<T2>(index, pname, pointer);

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenToolkit.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] pointer)
            where T2 : struct
         => instance.GetVertexAttribPointer<T2>(index, pname, pointer);

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenToolkit.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 pointer)
            where T2 : struct
         => instance.GetVertexAttribPointer<T2>(index, pname, ref pointer);

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(UInt32 index, OpenToolkit.OpenGL.VertexAttribPointerParameter pname, [OutAttribute, CountAttribute(Count = 1)] IntPtr pointer) => instance.GetVertexAttribPointer(index, pname, pointer);

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenToolkit.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[] pointer)
            where T2 : struct
         => instance.GetVertexAttribPointer<T2>(index, pname, pointer);

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenToolkit.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,] pointer)
            where T2 : struct
         => instance.GetVertexAttribPointer<T2>(index, pname, pointer);

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenToolkit.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] T2[,,] pointer)
            where T2 : struct
         => instance.GetVertexAttribPointer<T2>(index, pname, pointer);

        /// <summary>[requires: v2.0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1]
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenToolkit.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute, CountAttribute(Count = 1)] ref T2 pointer)
            where T2 : struct
         => instance.GetVertexAttribPointer<T2>(index, pname, ref pointer);

        /// <summary>[requires: v1.0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating the behavior to be controlled. LineSmoothHint, PolygonSmoothHint, TextureCompressionHint, and FragmentShaderDerivativeHint are accepted.
        /// </param>
        /// <param name="mode">
        /// Specifies a symbolic constant indicating the desired behavior. Fastest, Nicest, and DontCare are accepted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glHint")]
        public static void Hint(OpenToolkit.OpenGL.HintTarget target, OpenToolkit.OpenGL.HintMode mode) => instance.Hint(target, mode);

        /// <summary>
        /// Define histogram table
        /// </summary>
        /// <param name="target">
        /// The histogram whose parameters are to be set. Must be one of Histogram or ProxyHistogram.
        /// </param>
        /// <param name="width">
        /// The number of entries in the histogram table.  Must be a power of 2.
        /// </param>
        /// <param name="internalformat">
        /// The format of entries in the histogram table. Must be one of Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="sink">
        /// If True, pixels will be consumed by the histogramming process and no drawing or texture loading will take place. If False, pixels will proceed to the minmax process after histogramming.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glHistogram")]
        public static void Histogram(OpenToolkit.OpenGL.HistogramTargetExt target, Int32 width, OpenToolkit.OpenGL.InternalFormat internalformat, bool sink) => instance.Histogram(target, width, internalformat, sink);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexd")]
        public static void Index(Double c) => instance.Index(c);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">[length: 1]
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexdv")]
        [CLSCompliant(false)]
        public static unsafe void Index([CountAttribute(Count = 1)] Double* c) => instance.Index(c);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexf")]
        public static void Index(Single c) => instance.Index(c);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">[length: 1]
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexfv")]
        [CLSCompliant(false)]
        public static unsafe void Index([CountAttribute(Count = 1)] Single* c) => instance.Index(c);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexi")]
        public static void Index(Int32 c) => instance.Index(c);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">[length: 1]
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexiv")]
        [CLSCompliant(false)]
        public static unsafe void Index([CountAttribute(Count = 1)] Int32* c) => instance.Index(c);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Control the writing of individual bits in the color index buffers
        /// </summary>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable the writing of individual bits in the color index buffers. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexMask")]
        [CLSCompliant(false)]
        public static void IndexMask(Int32 mask) => instance.IndexMask(mask);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Control the writing of individual bits in the color index buffers
        /// </summary>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable the writing of individual bits in the color index buffers. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexMask")]
        [CLSCompliant(false)]
        public static void IndexMask(UInt32 mask) => instance.IndexMask(mask);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of color indexes
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each color index in the array. Symbolic constants UnsignedByte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first index in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIndexPointer")]
        public static void IndexPointer(OpenToolkit.OpenGL.IndexPointerType type, Int32 stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer) => instance.IndexPointer(type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of color indexes
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each color index in the array. Symbolic constants UnsignedByte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first index in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIndexPointer")]
        [CLSCompliant(false)]
        public static void IndexPointer<T2>(OpenToolkit.OpenGL.IndexPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[] pointer)
            where T2 : struct
         => instance.IndexPointer<T2>(type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of color indexes
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each color index in the array. Symbolic constants UnsignedByte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first index in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIndexPointer")]
        [CLSCompliant(false)]
        public static void IndexPointer<T2>(OpenToolkit.OpenGL.IndexPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,] pointer)
            where T2 : struct
         => instance.IndexPointer<T2>(type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of color indexes
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each color index in the array. Symbolic constants UnsignedByte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first index in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIndexPointer")]
        [CLSCompliant(false)]
        public static void IndexPointer<T2>(OpenToolkit.OpenGL.IndexPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,,] pointer)
            where T2 : struct
         => instance.IndexPointer<T2>(type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of color indexes
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each color index in the array. Symbolic constants UnsignedByte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first index in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIndexPointer")]
        public static void IndexPointer<T2>(OpenToolkit.OpenGL.IndexPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] ref T2 pointer)
            where T2 : struct
         => instance.IndexPointer<T2>(type, stride, ref pointer);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexs")]
        public static void Index(Int16 c) => instance.Index(c);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">[length: 1]
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIndexsv")]
        [CLSCompliant(false)]
        public static unsafe void Index([CountAttribute(Count = 1)] Int16* c) => instance.Index(c);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIndexub")]
        public static void Index(Byte c) => instance.Index(c);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Set the current color index
        /// </summary>
        /// <param name="c">[length: 1]
        /// Specifies the new value for the current color index.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIndexubv")]
        [CLSCompliant(false)]
        public static unsafe void Index([CountAttribute(Count = 1)] Byte* c) => instance.Index(c);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Initialize the name stack
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glInitNames")]
        public static void InitNames() => instance.InitNames();

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Simultaneously specify and enable several interleaved arrays
        /// </summary>
        /// <param name="format">
        /// Specifies the type of array to enable. Symbolic constants V2f, V3f, C4ubV2f, C4ubV3f, C3fV3f, N3fV3f, C4fN3fV3f, T2fV3f, T4fV4f, T2fC4ubV3f, T2fC3fV3f, T2fN3fV3f, T2fC4fN3fV3f, and T4fC4fN3fV4f are accepted.
        /// </param>
        /// <param name="stride">
        /// Specifies the offset in bytes between each aggregate array element.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(format,stride)]</param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        public static void InterleavedArrays(OpenToolkit.OpenGL.InterleavedArrayFormat format, Int32 stride, [CountAttribute(Computed = "format,stride")] IntPtr pointer) => instance.InterleavedArrays(format, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Simultaneously specify and enable several interleaved arrays
        /// </summary>
        /// <param name="format">
        /// Specifies the type of array to enable. Symbolic constants V2f, V3f, C4ubV2f, C4ubV3f, C3fV3f, N3fV3f, C4fN3fV3f, T2fV3f, T4fV4f, T2fC4ubV3f, T2fC3fV3f, T2fN3fV3f, T2fC4fN3fV3f, and T4fC4fN3fV4f are accepted.
        /// </param>
        /// <param name="stride">
        /// Specifies the offset in bytes between each aggregate array element.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(format,stride)]</param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        [CLSCompliant(false)]
        public static void InterleavedArrays<T2>(OpenToolkit.OpenGL.InterleavedArrayFormat format, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "format,stride")] T2[] pointer)
            where T2 : struct
         => instance.InterleavedArrays<T2>(format, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Simultaneously specify and enable several interleaved arrays
        /// </summary>
        /// <param name="format">
        /// Specifies the type of array to enable. Symbolic constants V2f, V3f, C4ubV2f, C4ubV3f, C3fV3f, N3fV3f, C4fN3fV3f, T2fV3f, T4fV4f, T2fC4ubV3f, T2fC3fV3f, T2fN3fV3f, T2fC4fN3fV3f, and T4fC4fN3fV4f are accepted.
        /// </param>
        /// <param name="stride">
        /// Specifies the offset in bytes between each aggregate array element.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(format,stride)]</param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        [CLSCompliant(false)]
        public static void InterleavedArrays<T2>(OpenToolkit.OpenGL.InterleavedArrayFormat format, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "format,stride")] T2[,] pointer)
            where T2 : struct
         => instance.InterleavedArrays<T2>(format, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Simultaneously specify and enable several interleaved arrays
        /// </summary>
        /// <param name="format">
        /// Specifies the type of array to enable. Symbolic constants V2f, V3f, C4ubV2f, C4ubV3f, C3fV3f, N3fV3f, C4fN3fV3f, T2fV3f, T4fV4f, T2fC4ubV3f, T2fC3fV3f, T2fN3fV3f, T2fC4fN3fV3f, and T4fC4fN3fV4f are accepted.
        /// </param>
        /// <param name="stride">
        /// Specifies the offset in bytes between each aggregate array element.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(format,stride)]</param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        [CLSCompliant(false)]
        public static void InterleavedArrays<T2>(OpenToolkit.OpenGL.InterleavedArrayFormat format, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "format,stride")] T2[,,] pointer)
            where T2 : struct
         => instance.InterleavedArrays<T2>(format, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Simultaneously specify and enable several interleaved arrays
        /// </summary>
        /// <param name="format">
        /// Specifies the type of array to enable. Symbolic constants V2f, V3f, C4ubV2f, C4ubV3f, C3fV3f, N3fV3f, C4fN3fV3f, T2fV3f, T4fV4f, T2fC4ubV3f, T2fC3fV3f, T2fN3fV3f, T2fC4fN3fV3f, and T4fC4fN3fV4f are accepted.
        /// </param>
        /// <param name="stride">
        /// Specifies the offset in bytes between each aggregate array element.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(format,stride)]</param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        public static void InterleavedArrays<T2>(OpenToolkit.OpenGL.InterleavedArrayFormat format, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "format,stride")] ref T2 pointer)
            where T2 : struct
         => instance.InterleavedArrays<T2>(format, stride, ref pointer);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content of a buffer object's data store
        /// </summary>
        /// <param name="buffer">
        /// The name of a buffer object whose data store to invalidate.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateBufferData")]
        [CLSCompliant(false)]
        public static void InvalidateBufferData(Int32 buffer) => instance.InvalidateBufferData(buffer);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content of a buffer object's data store
        /// </summary>
        /// <param name="buffer">
        /// The name of a buffer object whose data store to invalidate.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateBufferData")]
        [CLSCompliant(false)]
        public static void InvalidateBufferData(UInt32 buffer) => instance.InvalidateBufferData(buffer);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate a region of a buffer object's data store
        /// </summary>
        /// <param name="buffer">
        /// The name of a buffer object, a subrange of whose data store to invalidate.
        /// </param>
        /// <param name="offset">
        /// The offset within the buffer's data store of the start of the range to be invalidated.
        /// </param>
        /// <param name="length">
        /// The length of the range within the buffer's data store to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateBufferSubData")]
        [CLSCompliant(false)]
        public static void InvalidateBufferSubData(Int32 buffer, IntPtr offset, Int32 length) => instance.InvalidateBufferSubData(buffer, offset, length);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate a region of a buffer object's data store
        /// </summary>
        /// <param name="buffer">
        /// The name of a buffer object, a subrange of whose data store to invalidate.
        /// </param>
        /// <param name="offset">
        /// The offset within the buffer's data store of the start of the range to be invalidated.
        /// </param>
        /// <param name="length">
        /// The length of the range within the buffer's data store to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateBufferSubData")]
        [CLSCompliant(false)]
        public static void InvalidateBufferSubData(Int32 buffer, IntPtr offset, IntPtr length) => instance.InvalidateBufferSubData(buffer, offset, length);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate a region of a buffer object's data store
        /// </summary>
        /// <param name="buffer">
        /// The name of a buffer object, a subrange of whose data store to invalidate.
        /// </param>
        /// <param name="offset">
        /// The offset within the buffer's data store of the start of the range to be invalidated.
        /// </param>
        /// <param name="length">
        /// The length of the range within the buffer's data store to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateBufferSubData")]
        [CLSCompliant(false)]
        public static void InvalidateBufferSubData(UInt32 buffer, IntPtr offset, Int32 length) => instance.InvalidateBufferSubData(buffer, offset, length);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate a region of a buffer object's data store
        /// </summary>
        /// <param name="buffer">
        /// The name of a buffer object, a subrange of whose data store to invalidate.
        /// </param>
        /// <param name="offset">
        /// The offset within the buffer's data store of the start of the range to be invalidated.
        /// </param>
        /// <param name="length">
        /// The length of the range within the buffer's data store to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateBufferSubData")]
        [CLSCompliant(false)]
        public static void InvalidateBufferSubData(UInt32 buffer, IntPtr offset, IntPtr length) => instance.InvalidateBufferSubData(buffer, offset, length);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// The target to which the framebuffer is attached. target must be Framebuffer, DrawFramebuffer, or ReadFramebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// The number of entries in the attachments array.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// The address of an array identifying the attachments to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateFramebuffer(OpenToolkit.OpenGL.FramebufferTarget target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenToolkit.OpenGL.FramebufferAttachment[] attachments) => instance.InvalidateFramebuffer(target, numAttachments, attachments);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// The target to which the framebuffer is attached. target must be Framebuffer, DrawFramebuffer, or ReadFramebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// The number of entries in the attachments array.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// The address of an array identifying the attachments to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateFramebuffer(OpenToolkit.OpenGL.FramebufferTarget target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] ref OpenToolkit.OpenGL.FramebufferAttachment attachments) => instance.InvalidateFramebuffer(target, numAttachments, ref attachments);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// The target to which the framebuffer is attached. target must be Framebuffer, DrawFramebuffer, or ReadFramebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// The number of entries in the attachments array.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// The address of an array identifying the attachments to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateFramebuffer")]
        [CLSCompliant(false)]
        public static unsafe void InvalidateFramebuffer(OpenToolkit.OpenGL.FramebufferTarget target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenToolkit.OpenGL.FramebufferAttachment* attachments) => instance.InvalidateFramebuffer(target, numAttachments, attachments);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="numAttachments"></param>
        /// <param name="attachments"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferData")]
        [CLSCompliant(false)]
        public static void InvalidateNamedFramebufferData(Int32 framebuffer, Int32 numAttachments, OpenToolkit.OpenGL.FramebufferAttachment[] attachments) => instance.InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="numAttachments"></param>
        /// <param name="attachments"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferData")]
        [CLSCompliant(false)]
        public static void InvalidateNamedFramebufferData(Int32 framebuffer, Int32 numAttachments, ref OpenToolkit.OpenGL.FramebufferAttachment attachments) => instance.InvalidateNamedFramebufferData(framebuffer, numAttachments, ref attachments);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="numAttachments"></param>
        /// <param name="attachments"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferData")]
        [CLSCompliant(false)]
        public static unsafe void InvalidateNamedFramebufferData(Int32 framebuffer, Int32 numAttachments, OpenToolkit.OpenGL.FramebufferAttachment* attachments) => instance.InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="numAttachments"></param>
        /// <param name="attachments"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferData")]
        [CLSCompliant(false)]
        public static void InvalidateNamedFramebufferData(UInt32 framebuffer, Int32 numAttachments, OpenToolkit.OpenGL.FramebufferAttachment[] attachments) => instance.InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="numAttachments"></param>
        /// <param name="attachments"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferData")]
        [CLSCompliant(false)]
        public static void InvalidateNamedFramebufferData(UInt32 framebuffer, Int32 numAttachments, ref OpenToolkit.OpenGL.FramebufferAttachment attachments) => instance.InvalidateNamedFramebufferData(framebuffer, numAttachments, ref attachments);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="numAttachments"></param>
        /// <param name="attachments"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferData")]
        [CLSCompliant(false)]
        public static unsafe void InvalidateNamedFramebufferData(UInt32 framebuffer, Int32 numAttachments, OpenToolkit.OpenGL.FramebufferAttachment* attachments) => instance.InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="numAttachments"></param>
        /// <param name="attachments"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferSubData")]
        [CLSCompliant(false)]
        public static void InvalidateNamedFramebufferSubData(Int32 framebuffer, Int32 numAttachments, OpenToolkit.OpenGL.FramebufferAttachment[] attachments, Int32 x, Int32 y, Int32 width, Int32 height) => instance.InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="numAttachments"></param>
        /// <param name="attachments"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferSubData")]
        [CLSCompliant(false)]
        public static void InvalidateNamedFramebufferSubData(Int32 framebuffer, Int32 numAttachments, ref OpenToolkit.OpenGL.FramebufferAttachment attachments, Int32 x, Int32 y, Int32 width, Int32 height) => instance.InvalidateNamedFramebufferSubData(framebuffer, numAttachments, ref attachments, x, y, width, height);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="numAttachments"></param>
        /// <param name="attachments"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferSubData")]
        [CLSCompliant(false)]
        public static unsafe void InvalidateNamedFramebufferSubData(Int32 framebuffer, Int32 numAttachments, OpenToolkit.OpenGL.FramebufferAttachment* attachments, Int32 x, Int32 y, Int32 width, Int32 height) => instance.InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="numAttachments"></param>
        /// <param name="attachments"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferSubData")]
        [CLSCompliant(false)]
        public static void InvalidateNamedFramebufferSubData(UInt32 framebuffer, Int32 numAttachments, OpenToolkit.OpenGL.FramebufferAttachment[] attachments, Int32 x, Int32 y, Int32 width, Int32 height) => instance.InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="numAttachments"></param>
        /// <param name="attachments"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferSubData")]
        [CLSCompliant(false)]
        public static void InvalidateNamedFramebufferSubData(UInt32 framebuffer, Int32 numAttachments, ref OpenToolkit.OpenGL.FramebufferAttachment attachments, Int32 x, Int32 y, Int32 width, Int32 height) => instance.InvalidateNamedFramebufferSubData(framebuffer, numAttachments, ref attachments, x, y, width, height);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="numAttachments"></param>
        /// <param name="attachments"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glInvalidateNamedFramebufferSubData")]
        [CLSCompliant(false)]
        public static unsafe void InvalidateNamedFramebufferSubData(UInt32 framebuffer, Int32 numAttachments, OpenToolkit.OpenGL.FramebufferAttachment* attachments, Int32 x, Int32 y, Int32 width, Int32 height) => instance.InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content of a region of some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// The target to which the framebuffer is attached. target must be Framebuffer, DrawFramebuffer, or ReadFramebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// The number of entries in the attachments array.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// The address of an array identifying the attachments to be invalidated.
        /// </param>
        /// <param name="x">
        /// The X offset of the region to be invalidated.
        /// </param>
        /// <param name="y">
        /// The Y offset of the region to be invalidated.
        /// </param>
        /// <param name="width">
        /// The width of the region to be invalidated.
        /// </param>
        /// <param name="height">
        /// The height of the region to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateSubFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateSubFramebuffer(OpenToolkit.OpenGL.FramebufferTarget target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenToolkit.OpenGL.FramebufferAttachment[] attachments, Int32 x, Int32 y, Int32 width, Int32 height) => instance.InvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content of a region of some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// The target to which the framebuffer is attached. target must be Framebuffer, DrawFramebuffer, or ReadFramebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// The number of entries in the attachments array.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// The address of an array identifying the attachments to be invalidated.
        /// </param>
        /// <param name="x">
        /// The X offset of the region to be invalidated.
        /// </param>
        /// <param name="y">
        /// The Y offset of the region to be invalidated.
        /// </param>
        /// <param name="width">
        /// The width of the region to be invalidated.
        /// </param>
        /// <param name="height">
        /// The height of the region to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateSubFramebuffer")]
        [CLSCompliant(false)]
        public static void InvalidateSubFramebuffer(OpenToolkit.OpenGL.FramebufferTarget target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] ref OpenToolkit.OpenGL.FramebufferAttachment attachments, Int32 x, Int32 y, Int32 width, Int32 height) => instance.InvalidateSubFramebuffer(target, numAttachments, ref attachments, x, y, width, height);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the content of a region of some or all of a framebuffer object's attachments
        /// </summary>
        /// <param name="target">
        /// The target to which the framebuffer is attached. target must be Framebuffer, DrawFramebuffer, or ReadFramebuffer.
        /// </param>
        /// <param name="numAttachments">
        /// The number of entries in the attachments array.
        /// </param>
        /// <param name="attachments">[length: numAttachments]
        /// The address of an array identifying the attachments to be invalidated.
        /// </param>
        /// <param name="x">
        /// The X offset of the region to be invalidated.
        /// </param>
        /// <param name="y">
        /// The Y offset of the region to be invalidated.
        /// </param>
        /// <param name="width">
        /// The width of the region to be invalidated.
        /// </param>
        /// <param name="height">
        /// The height of the region to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateSubFramebuffer")]
        [CLSCompliant(false)]
        public static unsafe void InvalidateSubFramebuffer(OpenToolkit.OpenGL.FramebufferTarget target, Int32 numAttachments, [CountAttribute(Parameter = "numAttachments")] OpenToolkit.OpenGL.FramebufferAttachment* attachments, Int32 x, Int32 y, Int32 width, Int32 height) => instance.InvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the entirety a texture image
        /// </summary>
        /// <param name="texture">
        /// The name of a texture object to invalidate.
        /// </param>
        /// <param name="level">
        /// The level of detail of the texture object to invalidate.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateTexImage")]
        [CLSCompliant(false)]
        public static void InvalidateTexImage(Int32 texture, Int32 level) => instance.InvalidateTexImage(texture, level);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate the entirety a texture image
        /// </summary>
        /// <param name="texture">
        /// The name of a texture object to invalidate.
        /// </param>
        /// <param name="level">
        /// The level of detail of the texture object to invalidate.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateTexImage")]
        [CLSCompliant(false)]
        public static void InvalidateTexImage(UInt32 texture, Int32 level) => instance.InvalidateTexImage(texture, level);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate a region of a texture image
        /// </summary>
        /// <param name="texture">
        /// The name of a texture object a subregion of which to invalidate.
        /// </param>
        /// <param name="level">
        /// The level of detail of the texture object within which the region resides.
        /// </param>
        /// <param name="xoffset">
        /// The X offset of the region to be invalidated.
        /// </param>
        /// <param name="yoffset">
        /// The Y offset of the region to be invalidated.
        /// </param>
        /// <param name="zoffset">
        /// The Z offset of the region to be invalidated.
        /// </param>
        /// <param name="width">
        /// The width of the region to be invalidated.
        /// </param>
        /// <param name="height">
        /// The height of the region to be invalidated.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateTexSubImage")]
        [CLSCompliant(false)]
        public static void InvalidateTexSubImage(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth) => instance.InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);

        /// <summary>[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]
        /// Invalidate a region of a texture image
        /// </summary>
        /// <param name="texture">
        /// The name of a texture object a subregion of which to invalidate.
        /// </param>
        /// <param name="level">
        /// The level of detail of the texture object within which the region resides.
        /// </param>
        /// <param name="xoffset">
        /// The X offset of the region to be invalidated.
        /// </param>
        /// <param name="yoffset">
        /// The Y offset of the region to be invalidated.
        /// </param>
        /// <param name="zoffset">
        /// The Z offset of the region to be invalidated.
        /// </param>
        /// <param name="width">
        /// The width of the region to be invalidated.
        /// </param>
        /// <param name="height">
        /// The height of the region to be invalidated.
        /// </param>
        /// <param name="depth">
        /// The depth of the region to be invalidated.
        /// </param>
        [AutoGenerated(Category = "ARB_invalidate_subdata|VERSION_4_3", Version = "4.3", EntryPoint = "glInvalidateTexSubImage")]
        [CLSCompliant(false)]
        public static void InvalidateTexSubImage(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth) => instance.InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);

        /// <summary>[requires: v1.5]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsBuffer")]
        [CLSCompliant(false)]
        public static bool IsBuffer(Int32 buffer) => instance.IsBuffer(buffer);

        /// <summary>[requires: v1.5]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsBuffer")]
        [CLSCompliant(false)]
        public static bool IsBuffer(UInt32 buffer) => instance.IsBuffer(buffer);

        /// <summary>[requires: v1.0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIsEnabled")]
        public static bool IsEnabled(OpenToolkit.OpenGL.EnableCap cap) => instance.IsEnabled(cap);

        /// <summary>[requires: v3.0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the capability.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glIsEnabledi")]
        [CLSCompliant(false)]
        public static bool IsEnabled(OpenToolkit.OpenGL.IndexedEnableCap target, Int32 index) => instance.IsEnabled(target, index);

        /// <summary>[requires: v3.0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="target">
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        /// <param name="index">
        /// Specifies the index of the capability.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glIsEnabledi")]
        [CLSCompliant(false)]
        public static bool IsEnabled(OpenToolkit.OpenGL.IndexedEnableCap target, UInt32 index) => instance.IsEnabled(target, index);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Determine if a name corresponds to a framebuffer object
        /// </summary>
        /// <param name="framebuffer">
        /// Specifies a value that may be the name of a framebuffer object.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glIsFramebuffer")]
        [CLSCompliant(false)]
        public static bool IsFramebuffer(Int32 framebuffer) => instance.IsFramebuffer(framebuffer);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Determine if a name corresponds to a framebuffer object
        /// </summary>
        /// <param name="framebuffer">
        /// Specifies a value that may be the name of a framebuffer object.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glIsFramebuffer")]
        [CLSCompliant(false)]
        public static bool IsFramebuffer(UInt32 framebuffer) => instance.IsFramebuffer(framebuffer);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Determine if a name corresponds to a display list
        /// </summary>
        /// <param name="list">
        /// Specifies a potential display list name.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIsList")]
        [CLSCompliant(false)]
        public static bool IsList(Int32 list) => instance.IsList(list);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Determine if a name corresponds to a display list
        /// </summary>
        /// <param name="list">
        /// Specifies a potential display list name.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIsList")]
        [CLSCompliant(false)]
        public static bool IsList(UInt32 list) => instance.IsList(list);

        /// <summary>[requires: v2.0]
        /// Determines if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies a potential program object.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
        [CLSCompliant(false)]
        public static bool IsProgram(Int32 program) => instance.IsProgram(program);

        /// <summary>[requires: v2.0]
        /// Determines if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// Specifies a potential program object.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
        [CLSCompliant(false)]
        public static bool IsProgram(UInt32 program) => instance.IsProgram(program);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Determine if a name corresponds to a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies a value that may be the name of a program pipeline object.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glIsProgramPipeline")]
        [CLSCompliant(false)]
        public static bool IsProgramPipeline(Int32 pipeline) => instance.IsProgramPipeline(pipeline);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Determine if a name corresponds to a program pipeline object
        /// </summary>
        /// <param name="pipeline">
        /// Specifies a value that may be the name of a program pipeline object.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glIsProgramPipeline")]
        [CLSCompliant(false)]
        public static bool IsProgramPipeline(UInt32 pipeline) => instance.IsProgramPipeline(pipeline);

        /// <summary>[requires: v1.5]
        /// Determine if a name corresponds to a query object
        /// </summary>
        /// <param name="id">
        /// Specifies a value that may be the name of a query object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsQuery")]
        [CLSCompliant(false)]
        public static bool IsQuery(Int32 id) => instance.IsQuery(id);

        /// <summary>[requires: v1.5]
        /// Determine if a name corresponds to a query object
        /// </summary>
        /// <param name="id">
        /// Specifies a value that may be the name of a query object.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsQuery")]
        [CLSCompliant(false)]
        public static bool IsQuery(UInt32 id) => instance.IsQuery(id);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Determine if a name corresponds to a renderbuffer object
        /// </summary>
        /// <param name="renderbuffer">
        /// Specifies a value that may be the name of a renderbuffer object.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glIsRenderbuffer")]
        [CLSCompliant(false)]
        public static bool IsRenderbuffer(Int32 renderbuffer) => instance.IsRenderbuffer(renderbuffer);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Determine if a name corresponds to a renderbuffer object
        /// </summary>
        /// <param name="renderbuffer">
        /// Specifies a value that may be the name of a renderbuffer object.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glIsRenderbuffer")]
        [CLSCompliant(false)]
        public static bool IsRenderbuffer(UInt32 renderbuffer) => instance.IsRenderbuffer(renderbuffer);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Determine if a name corresponds to a sampler object
        /// </summary>
        /// <param name="sampler">
        /// Specifies a value that may be the name of a sampler object.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glIsSampler")]
        [CLSCompliant(false)]
        public static bool IsSampler(Int32 sampler) => instance.IsSampler(sampler);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Determine if a name corresponds to a sampler object
        /// </summary>
        /// <param name="sampler">
        /// Specifies a value that may be the name of a sampler object.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glIsSampler")]
        [CLSCompliant(false)]
        public static bool IsSampler(UInt32 sampler) => instance.IsSampler(sampler);

        /// <summary>[requires: v2.0]
        /// Determines if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies a potential shader object.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
        [CLSCompliant(false)]
        public static bool IsShader(Int32 shader) => instance.IsShader(shader);

        /// <summary>[requires: v2.0]
        /// Determines if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies a potential shader object.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
        [CLSCompliant(false)]
        public static bool IsShader(UInt32 shader) => instance.IsShader(shader);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Determine if a name corresponds to a sync object
        /// </summary>
        /// <param name="sync">
        /// Specifies a value that may be the name of a sync object.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glIsSync")]
        public static bool IsSync(IntPtr sync) => instance.IsSync(sync);

        /// <summary>[requires: v1.1]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// Specifies a value that may be the name of a texture.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIsTexture")]
        [CLSCompliant(false)]
        public static bool IsTexture(Int32 texture) => instance.IsTexture(texture);

        /// <summary>[requires: v1.1]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// Specifies a value that may be the name of a texture.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIsTexture")]
        [CLSCompliant(false)]
        public static bool IsTexture(UInt32 texture) => instance.IsTexture(texture);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Determine if a name corresponds to a transform feedback object
        /// </summary>
        /// <param name="id">
        /// Specifies a value that may be the name of a transform feedback object.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glIsTransformFeedback")]
        [CLSCompliant(false)]
        public static bool IsTransformFeedback(Int32 id) => instance.IsTransformFeedback(id);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Determine if a name corresponds to a transform feedback object
        /// </summary>
        /// <param name="id">
        /// Specifies a value that may be the name of a transform feedback object.
        /// </param>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glIsTransformFeedback")]
        [CLSCompliant(false)]
        public static bool IsTransformFeedback(UInt32 id) => instance.IsTransformFeedback(id);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Determine if a name corresponds to a vertex array object
        /// </summary>
        /// <param name="array">
        /// Specifies a value that may be the name of a vertex array object.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glIsVertexArray")]
        [CLSCompliant(false)]
        public static bool IsVertexArray(Int32 array) => instance.IsVertexArray(array);

        /// <summary>[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]
        /// Determine if a name corresponds to a vertex array object
        /// </summary>
        /// <param name="array">
        /// Specifies a value that may be the name of a vertex array object.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_array_object|VERSION_3_0", Version = "3.0", EntryPoint = "glIsVertexArray")]
        [CLSCompliant(false)]
        public static bool IsVertexArray(UInt32 array) => instance.IsVertexArray(array);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightf")]
        public static void Light(OpenToolkit.OpenGL.LightName light, OpenToolkit.OpenGL.LightParameter pname, Single param) => instance.Light(light, pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightfv")]
        [CLSCompliant(false)]
        public static void Light(OpenToolkit.OpenGL.LightName light, OpenToolkit.OpenGL.LightParameter pname, [CountAttribute(Computed = "pname")] Single[] @params) => instance.Light(light, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightfv")]
        [CLSCompliant(false)]
        public static unsafe void Light(OpenToolkit.OpenGL.LightName light, OpenToolkit.OpenGL.LightParameter pname, [CountAttribute(Computed = "pname")] Single* @params) => instance.Light(light, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLighti")]
        public static void Light(OpenToolkit.OpenGL.LightName light, OpenToolkit.OpenGL.LightParameter pname, Int32 param) => instance.Light(light, pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightiv")]
        [CLSCompliant(false)]
        public static void Light(OpenToolkit.OpenGL.LightName light, OpenToolkit.OpenGL.LightParameter pname, [CountAttribute(Computed = "pname")] Int32[] @params) => instance.Light(light, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set light source parameters
        /// </summary>
        /// <param name="light">
        /// Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.
        /// </param>
        /// <param name="pname">
        /// Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that parameter pname of light source light will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightiv")]
        [CLSCompliant(false)]
        public static unsafe void Light(OpenToolkit.OpenGL.LightName light, OpenToolkit.OpenGL.LightParameter pname, [CountAttribute(Computed = "pname")] Int32* @params) => instance.Light(light, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightModelf")]
        public static void LightModel(OpenToolkit.OpenGL.LightModelParameter pname, Single param) => instance.LightModel(pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightModelfv")]
        [CLSCompliant(false)]
        public static void LightModel(OpenToolkit.OpenGL.LightModelParameter pname, [CountAttribute(Computed = "pname")] Single[] @params) => instance.LightModel(pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightModelfv")]
        [CLSCompliant(false)]
        public static unsafe void LightModel(OpenToolkit.OpenGL.LightModelParameter pname, [CountAttribute(Computed = "pname")] Single* @params) => instance.LightModel(pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="param">
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightModeli")]
        public static void LightModel(OpenToolkit.OpenGL.LightModelParameter pname, Int32 param) => instance.LightModel(pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightModeliv")]
        [CLSCompliant(false)]
        public static void LightModel(OpenToolkit.OpenGL.LightModelParameter pname, [CountAttribute(Computed = "pname")] Int32[] @params) => instance.LightModel(pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the lighting model parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that param will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLightModeliv")]
        [CLSCompliant(false)]
        public static unsafe void LightModel(OpenToolkit.OpenGL.LightModelParameter pname, [CountAttribute(Computed = "pname")] Int32* @params) => instance.LightModel(pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the line stipple pattern
        /// </summary>
        /// <param name="factor">
        /// Specifies a multiplier for each bit in the line stipple pattern. If factor is 3, for example, each bit in the pattern is used three times before the next bit in the pattern is used. factor is clamped to the range [1, 256] and defaults to 1.
        /// </param>
        /// <param name="pattern">
        /// Specifies a 16-bit integer whose bit pattern determines which fragments of a line will be drawn when the line is rasterized. Bit zero is used first; the default pattern is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLineStipple")]
        [CLSCompliant(false)]
        public static void LineStipple(Int32 factor, Int16 pattern) => instance.LineStipple(factor, pattern);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the line stipple pattern
        /// </summary>
        /// <param name="factor">
        /// Specifies a multiplier for each bit in the line stipple pattern. If factor is 3, for example, each bit in the pattern is used three times before the next bit in the pattern is used. factor is clamped to the range [1, 256] and defaults to 1.
        /// </param>
        /// <param name="pattern">
        /// Specifies a 16-bit integer whose bit pattern determines which fragments of a line will be drawn when the line is rasterized. Bit zero is used first; the default pattern is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLineStipple")]
        [CLSCompliant(false)]
        public static void LineStipple(Int32 factor, UInt16 pattern) => instance.LineStipple(factor, pattern);

        /// <summary>[requires: v1.0]
        /// Specify the width of rasterized lines
        /// </summary>
        /// <param name="width">
        /// Specifies the width of rasterized lines. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLineWidth")]
        public static void LineWidth(Single width) => instance.LineWidth(width);

        /// <summary>[requires: v2.0]
        /// Links a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object to be linked.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
        [CLSCompliant(false)]
        public static void LinkProgram(Int32 program) => instance.LinkProgram(program);

        /// <summary>[requires: v2.0]
        /// Links a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object to be linked.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
        [CLSCompliant(false)]
        public static void LinkProgram(UInt32 program) => instance.LinkProgram(program);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the display-list base for glCallLists
        /// </summary>
        /// <param name="@base">
        /// Specifies an integer offset that will be added to glCallLists offsets to generate display-list names. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glListBase")]
        [CLSCompliant(false)]
        public static void ListBase(Int32 @base) => instance.ListBase(@base);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the display-list base for glCallLists
        /// </summary>
        /// <param name="@base">
        /// Specifies an integer offset that will be added to glCallLists offsets to generate display-list names. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glListBase")]
        [CLSCompliant(false)]
        public static void ListBase(UInt32 @base) => instance.ListBase(@base);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Replace the current matrix with the identity matrix
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLoadIdentity")]
        public static void LoadIdentity() => instance.LoadIdentity();

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLoadMatrixd")]
        [CLSCompliant(false)]
        public static void LoadMatrix([CountAttribute(Count = 16)] Double[] m) => instance.LoadMatrix(m);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLoadMatrixd")]
        [CLSCompliant(false)]
        public static void LoadMatrix([CountAttribute(Count = 16)] ref Double m) => instance.LoadMatrix(ref m);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLoadMatrixd")]
        [CLSCompliant(false)]
        public static unsafe void LoadMatrix([CountAttribute(Count = 16)] Double* m) => instance.LoadMatrix(m);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        [CLSCompliant(false)]
        public static void LoadMatrix([CountAttribute(Count = 16)] Single[] m) => instance.LoadMatrix(m);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        [CLSCompliant(false)]
        public static void LoadMatrix([CountAttribute(Count = 16)] ref Single m) => instance.LoadMatrix(ref m);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Replace the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        [CLSCompliant(false)]
        public static unsafe void LoadMatrix([CountAttribute(Count = 16)] Single* m) => instance.LoadMatrix(m);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Load a name onto the name stack
        /// </summary>
        /// <param name="name">
        /// Specifies a name that will replace the top value on the name stack.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLoadName")]
        [CLSCompliant(false)]
        public static void LoadName(Int32 name) => instance.LoadName(name);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Load a name onto the name stack
        /// </summary>
        /// <param name="name">
        /// Specifies a name that will replace the top value on the name stack.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLoadName")]
        [CLSCompliant(false)]
        public static void LoadName(UInt32 name) => instance.LoadName(name);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
        [CLSCompliant(false)]
        public static void LoadTransposeMatrix([CountAttribute(Count = 16)] Double[] m) => instance.LoadTransposeMatrix(m);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
        [CLSCompliant(false)]
        public static void LoadTransposeMatrix([CountAttribute(Count = 16)] ref Double m) => instance.LoadTransposeMatrix(ref m);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
        [CLSCompliant(false)]
        public static unsafe void LoadTransposeMatrix([CountAttribute(Count = 16)] Double* m) => instance.LoadTransposeMatrix(m);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
        [CLSCompliant(false)]
        public static void LoadTransposeMatrix([CountAttribute(Count = 16)] Single[] m) => instance.LoadTransposeMatrix(m);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
        [CLSCompliant(false)]
        public static void LoadTransposeMatrix([CountAttribute(Count = 16)] ref Single m) => instance.LoadTransposeMatrix(ref m);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
        [CLSCompliant(false)]
        public static unsafe void LoadTransposeMatrix([CountAttribute(Count = 16)] Single* m) => instance.LoadTransposeMatrix(m);

        /// <summary>[requires: v1.0]
        /// Specify a logical pixel operation for rendering
        /// </summary>
        /// <param name="opcode">
        /// Specifies a symbolic constant that selects a logical operation. The following symbols are accepted: Clear, Set, Copy, CopyInverted, Noop, Invert, And, Nand, Or, Nor, Xor, Equiv, AndReverse, AndInverted, OrReverse, and OrInverted. The initial value is Copy.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLogicOp")]
        public static void LogicOp(OpenToolkit.OpenGL.LogicOp opcode) => instance.LogicOp(opcode);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a one-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map1Vertex3, Map1Vertex4, Map1Index, Map1Color4, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, and Map1TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="stride">
        /// Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
        /// </param>
        /// <param name="order">
        /// Specifies the number of control points. Must be positive.
        /// </param>
        /// <param name="points">[length: COMPSIZE(target,stride,order)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap1d")]
        [CLSCompliant(false)]
        public static void Map1(OpenToolkit.OpenGL.MapTarget target, Double u1, Double u2, Int32 stride, Int32 order, [CountAttribute(Computed = "target,stride,order")] Double[] points) => instance.Map1(target, u1, u2, stride, order, points);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a one-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map1Vertex3, Map1Vertex4, Map1Index, Map1Color4, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, and Map1TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="stride">
        /// Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
        /// </param>
        /// <param name="order">
        /// Specifies the number of control points. Must be positive.
        /// </param>
        /// <param name="points">[length: COMPSIZE(target,stride,order)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap1d")]
        [CLSCompliant(false)]
        public static void Map1(OpenToolkit.OpenGL.MapTarget target, Double u1, Double u2, Int32 stride, Int32 order, [CountAttribute(Computed = "target,stride,order")] ref Double points) => instance.Map1(target, u1, u2, stride, order, ref points);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a one-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map1Vertex3, Map1Vertex4, Map1Index, Map1Color4, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, and Map1TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="stride">
        /// Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
        /// </param>
        /// <param name="order">
        /// Specifies the number of control points. Must be positive.
        /// </param>
        /// <param name="points">[length: COMPSIZE(target,stride,order)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap1d")]
        [CLSCompliant(false)]
        public static unsafe void Map1(OpenToolkit.OpenGL.MapTarget target, Double u1, Double u2, Int32 stride, Int32 order, [CountAttribute(Computed = "target,stride,order")] Double* points) => instance.Map1(target, u1, u2, stride, order, points);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a one-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map1Vertex3, Map1Vertex4, Map1Index, Map1Color4, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, and Map1TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="stride">
        /// Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
        /// </param>
        /// <param name="order">
        /// Specifies the number of control points. Must be positive.
        /// </param>
        /// <param name="points">[length: COMPSIZE(target,stride,order)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap1f")]
        [CLSCompliant(false)]
        public static void Map1(OpenToolkit.OpenGL.MapTarget target, Single u1, Single u2, Int32 stride, Int32 order, [CountAttribute(Computed = "target,stride,order")] Single[] points) => instance.Map1(target, u1, u2, stride, order, points);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a one-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map1Vertex3, Map1Vertex4, Map1Index, Map1Color4, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, and Map1TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="stride">
        /// Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
        /// </param>
        /// <param name="order">
        /// Specifies the number of control points. Must be positive.
        /// </param>
        /// <param name="points">[length: COMPSIZE(target,stride,order)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap1f")]
        [CLSCompliant(false)]
        public static void Map1(OpenToolkit.OpenGL.MapTarget target, Single u1, Single u2, Int32 stride, Int32 order, [CountAttribute(Computed = "target,stride,order")] ref Single points) => instance.Map1(target, u1, u2, stride, order, ref points);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a one-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map1Vertex3, Map1Vertex4, Map1Index, Map1Color4, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, and Map1TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.
        /// </param>
        /// <param name="stride">
        /// Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.
        /// </param>
        /// <param name="order">
        /// Specifies the number of control points. Must be positive.
        /// </param>
        /// <param name="points">[length: COMPSIZE(target,stride,order)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap1f")]
        [CLSCompliant(false)]
        public static unsafe void Map1(OpenToolkit.OpenGL.MapTarget target, Single u1, Single u2, Int32 stride, Int32 order, [CountAttribute(Computed = "target,stride,order")] Single* points) => instance.Map1(target, u1, u2, stride, order, points);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a two-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map2Vertex3, Map2Vertex4, Map2Index, Map2Color4, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, and Map2TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="ustride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
        /// </param>
        /// <param name="uorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="v1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="v2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="vstride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
        /// </param>
        /// <param name="vorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="points">[length: COMPSIZE(target,ustride,uorder,vstride,vorder)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap2d")]
        [CLSCompliant(false)]
        public static void Map2(OpenToolkit.OpenGL.MapTarget target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, [CountAttribute(Computed = "target,ustride,uorder,vstride,vorder")] Double[] points) => instance.Map2(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a two-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map2Vertex3, Map2Vertex4, Map2Index, Map2Color4, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, and Map2TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="ustride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
        /// </param>
        /// <param name="uorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="v1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="v2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="vstride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
        /// </param>
        /// <param name="vorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="points">[length: COMPSIZE(target,ustride,uorder,vstride,vorder)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap2d")]
        [CLSCompliant(false)]
        public static void Map2(OpenToolkit.OpenGL.MapTarget target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, [CountAttribute(Computed = "target,ustride,uorder,vstride,vorder")] ref Double points) => instance.Map2(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ref points);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a two-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map2Vertex3, Map2Vertex4, Map2Index, Map2Color4, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, and Map2TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="ustride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
        /// </param>
        /// <param name="uorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="v1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="v2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="vstride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
        /// </param>
        /// <param name="vorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="points">[length: COMPSIZE(target,ustride,uorder,vstride,vorder)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap2d")]
        [CLSCompliant(false)]
        public static unsafe void Map2(OpenToolkit.OpenGL.MapTarget target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, [CountAttribute(Computed = "target,ustride,uorder,vstride,vorder")] Double* points) => instance.Map2(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a two-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map2Vertex3, Map2Vertex4, Map2Index, Map2Color4, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, and Map2TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="ustride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
        /// </param>
        /// <param name="uorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="v1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="v2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="vstride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
        /// </param>
        /// <param name="vorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="points">[length: COMPSIZE(target,ustride,uorder,vstride,vorder)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap2f")]
        [CLSCompliant(false)]
        public static void Map2(OpenToolkit.OpenGL.MapTarget target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, [CountAttribute(Computed = "target,ustride,uorder,vstride,vorder")] Single[] points) => instance.Map2(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a two-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map2Vertex3, Map2Vertex4, Map2Index, Map2Color4, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, and Map2TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="ustride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
        /// </param>
        /// <param name="uorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="v1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="v2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="vstride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
        /// </param>
        /// <param name="vorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="points">[length: COMPSIZE(target,ustride,uorder,vstride,vorder)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap2f")]
        [CLSCompliant(false)]
        public static void Map2(OpenToolkit.OpenGL.MapTarget target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, [CountAttribute(Computed = "target,ustride,uorder,vstride,vorder")] ref Single points) => instance.Map2(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ref points);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a two-dimensional evaluator
        /// </summary>
        /// <param name="target">
        /// Specifies the kind of values that are generated by the evaluator. Symbolic constants Map2Vertex3, Map2Vertex4, Map2Index, Map2Color4, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, and Map2TextureCoord4 are accepted.
        /// </param>
        /// <param name="u1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="u2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.
        /// </param>
        /// <param name="ustride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.
        /// </param>
        /// <param name="uorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="v1">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="v2">
        /// Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.
        /// </param>
        /// <param name="vstride">
        /// Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.
        /// </param>
        /// <param name="vorder">
        /// Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.
        /// </param>
        /// <param name="points">[length: COMPSIZE(target,ustride,uorder,vstride,vorder)]
        /// Specifies a pointer to the array of control points.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMap2f")]
        [CLSCompliant(false)]
        public static unsafe void Map2(OpenToolkit.OpenGL.MapTarget target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, [CountAttribute(Computed = "target,ustride,uorder,vstride,vorder")] Single* points) => instance.Map2(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

        /// <summary>[requires: v1.5]
        /// Map a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies the target buffer object being mapped. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer or UniformBuffer.
        /// </param>
        /// <param name="access">
        /// For glMapBuffer only, specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be ReadOnly, WriteOnly, or ReadWrite.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glMapBuffer")]
        public static IntPtr MapBuffer(OpenToolkit.OpenGL.BufferTarget target, OpenToolkit.OpenGL.BufferAccess access) => instance.MapBuffer(target, access);

        /// <summary>[requires: v3.0 or ARB_map_buffer_range|VERSION_3_0]
        /// Map a section of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies a binding to which the target buffer is bound.
        /// </param>
        /// <param name="offset">
        /// Specifies a the starting offset within the buffer of the range to be mapped.
        /// </param>
        /// <param name="length">
        /// Specifies a length of the range to be mapped.
        /// </param>
        /// <param name="access">
        /// Specifies a combination of access flags indicating the desired access to the range.
        /// </param>
        [AutoGenerated(Category = "ARB_map_buffer_range|VERSION_3_0", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static IntPtr MapBufferRange(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, Int32 length, OpenToolkit.OpenGL.BufferAccessMask access) => instance.MapBufferRange(target, offset, length, access);

        /// <summary>[requires: v3.0 or ARB_map_buffer_range|VERSION_3_0]
        /// Map a section of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// Specifies a binding to which the target buffer is bound.
        /// </param>
        /// <param name="offset">
        /// Specifies a the starting offset within the buffer of the range to be mapped.
        /// </param>
        /// <param name="length">
        /// Specifies a length of the range to be mapped.
        /// </param>
        /// <param name="access">
        /// Specifies a combination of access flags indicating the desired access to the range.
        /// </param>
        [AutoGenerated(Category = "ARB_map_buffer_range|VERSION_3_0", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static IntPtr MapBufferRange(OpenToolkit.OpenGL.BufferTarget target, IntPtr offset, IntPtr length, OpenToolkit.OpenGL.BufferAccessMask access) => instance.MapBufferRange(target, offset, length, access);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a one- or two-dimensional mesh
        /// </summary>
        /// <param name="un">
        /// Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
        /// </param>
        /// <param name="u1">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        /// <param name="u2">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMapGrid1d")]
        public static void MapGrid1(Int32 un, Double u1, Double u2) => instance.MapGrid1(un, u1, u2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a one- or two-dimensional mesh
        /// </summary>
        /// <param name="un">
        /// Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
        /// </param>
        /// <param name="u1">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        /// <param name="u2">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMapGrid1f")]
        public static void MapGrid1(Int32 un, Single u1, Single u2) => instance.MapGrid1(un, u1, u2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a one- or two-dimensional mesh
        /// </summary>
        /// <param name="un">
        /// Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
        /// </param>
        /// <param name="u1">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        /// <param name="u2">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        /// <param name="vn">
        /// Specifies the number of partitions in the grid range interval [v1, v2] (glMapGrid2 only).
        /// </param>
        /// <param name="v1">
        /// Specify the mappings for integer grid domain values j = 0 and j = vn (glMapGrid2 only).
        /// </param>
        /// <param name="v2">
        /// Specify the mappings for integer grid domain values j = 0 and j = vn (glMapGrid2 only).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMapGrid2d")]
        public static void MapGrid2(Int32 un, Double u1, Double u2, Int32 vn, Double v1, Double v2) => instance.MapGrid2(un, u1, u2, vn, v1, v2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Define a one- or two-dimensional mesh
        /// </summary>
        /// <param name="un">
        /// Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
        /// </param>
        /// <param name="u1">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        /// <param name="u2">
        /// Specify the mappings for integer grid domain values i = 0 and i = un.
        /// </param>
        /// <param name="vn">
        /// Specifies the number of partitions in the grid range interval [v1, v2] (glMapGrid2 only).
        /// </param>
        /// <param name="v1">
        /// Specify the mappings for integer grid domain values j = 0 and j = vn (glMapGrid2 only).
        /// </param>
        /// <param name="v2">
        /// Specify the mappings for integer grid domain values j = 0 and j = vn (glMapGrid2 only).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMapGrid2f")]
        public static void MapGrid2(Int32 un, Single u1, Single u2, Int32 vn, Single v1, Single v2) => instance.MapGrid2(un, u1, u2, vn, v1, v2);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="access"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glMapNamedBuffer")]
        [CLSCompliant(false)]
        public static IntPtr MapNamedBuffer(Int32 buffer, OpenToolkit.OpenGL.BufferAccess access) => instance.MapNamedBuffer(buffer, access);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="access"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glMapNamedBuffer")]
        [CLSCompliant(false)]
        public static IntPtr MapNamedBuffer(UInt32 buffer, OpenToolkit.OpenGL.BufferAccess access) => instance.MapNamedBuffer(buffer, access);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="length"></param>
        /// <param name="access"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glMapNamedBufferRange")]
        [CLSCompliant(false)]
        public static IntPtr MapNamedBufferRange(Int32 buffer, IntPtr offset, Int32 length, OpenToolkit.OpenGL.BufferAccessMask access) => instance.MapNamedBufferRange(buffer, offset, length, access);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="length"></param>
        /// <param name="access"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glMapNamedBufferRange")]
        [CLSCompliant(false)]
        public static IntPtr MapNamedBufferRange(Int32 buffer, IntPtr offset, IntPtr length, OpenToolkit.OpenGL.BufferAccessMask access) => instance.MapNamedBufferRange(buffer, offset, length, access);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="length"></param>
        /// <param name="access"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glMapNamedBufferRange")]
        [CLSCompliant(false)]
        public static IntPtr MapNamedBufferRange(UInt32 buffer, IntPtr offset, Int32 length, OpenToolkit.OpenGL.BufferAccessMask access) => instance.MapNamedBufferRange(buffer, offset, length, access);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="length"></param>
        /// <param name="access"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glMapNamedBufferRange")]
        [CLSCompliant(false)]
        public static IntPtr MapNamedBufferRange(UInt32 buffer, IntPtr offset, IntPtr length, OpenToolkit.OpenGL.BufferAccessMask access) => instance.MapNamedBufferRange(buffer, offset, length, access);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="param">
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMaterialf")]
        public static void Material(OpenToolkit.OpenGL.MaterialFace face, OpenToolkit.OpenGL.MaterialParameter pname, Single param) => instance.Material(face, pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMaterialfv")]
        [CLSCompliant(false)]
        public static void Material(OpenToolkit.OpenGL.MaterialFace face, OpenToolkit.OpenGL.MaterialParameter pname, [CountAttribute(Computed = "pname")] Single[] @params) => instance.Material(face, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMaterialfv")]
        [CLSCompliant(false)]
        public static unsafe void Material(OpenToolkit.OpenGL.MaterialFace face, OpenToolkit.OpenGL.MaterialParameter pname, [CountAttribute(Computed = "pname")] Single* @params) => instance.Material(face, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="param">
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMateriali")]
        public static void Material(OpenToolkit.OpenGL.MaterialFace face, OpenToolkit.OpenGL.MaterialParameter pname, Int32 param) => instance.Material(face, pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMaterialiv")]
        [CLSCompliant(false)]
        public static void Material(OpenToolkit.OpenGL.MaterialFace face, OpenToolkit.OpenGL.MaterialParameter pname, [CountAttribute(Computed = "pname")] Int32[] @params) => instance.Material(face, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify material parameters for the lighting model
        /// </summary>
        /// <param name="face">
        /// Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.
        /// </param>
        /// <param name="pname">
        /// Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies the value that parameter Shininess will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMaterialiv")]
        [CLSCompliant(false)]
        public static unsafe void Material(OpenToolkit.OpenGL.MaterialFace face, OpenToolkit.OpenGL.MaterialParameter pname, [CountAttribute(Computed = "pname")] Int32* @params) => instance.Material(face, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify which matrix is the current matrix
        /// </summary>
        /// <param name="mode">
        /// Specifies which matrix stack is the target for subsequent matrix operations. Three values are accepted: Modelview, Projection, and Texture. The initial value is Modelview. Additionally, if the ARB_imaging extension is supported, Color is also accepted.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMatrixMode")]
        public static void MatrixMode(OpenToolkit.OpenGL.MatrixMode mode) => instance.MatrixMode(mode);

        /// <summary>[requires: v4.2 or ARB_shader_image_load_store|VERSION_4_2]
        /// Defines a barrier ordering memory transactions
        /// </summary>
        /// <param name="barriers">
        /// Specifies the barriers to insert. Must be a bitwise combination of VertexAttribArrayBarrierBit, ElementArrayBarrierBit, UniformBarrierBit, TextureFetchBarrierBit, ShaderImageAccessBarrierBit, CommandBarrierBit, PixelBufferBarrierBit, TextureUpdateBarrierBit, BufferUpdateBarrierBit, FramebufferBarrierBit, TransformFeedbackBarrierBit, AtomicCounterBarrierBit, or ShaderStorageBarrierBit. If the special value AllBarrierBits is specified, all supported barriers will be inserted.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_image_load_store|VERSION_4_2", Version = "4.2", EntryPoint = "glMemoryBarrier")]
        public static void MemoryBarrier(OpenToolkit.OpenGL.MemoryBarrierFlags barriers) => instance.MemoryBarrier(barriers);

        /// <summary>[requires: v4.5 or ARB_ES3_1_compatibility|VERSION_4_5]</summary>
        /// <param name="barriers"></param>
        [AutoGenerated(Category = "ARB_ES3_1_compatibility|VERSION_4_5", Version = "4.5", EntryPoint = "glMemoryBarrierByRegion")]
        public static void MemoryBarrierByRegion(OpenToolkit.OpenGL.MemoryBarrierRegionFlags barriers) => instance.MemoryBarrierByRegion(barriers);

        /// <summary>
        /// Define minmax table
        /// </summary>
        /// <param name="target">
        /// The minmax table whose parameters are to be set. Must be Minmax.
        /// </param>
        /// <param name="internalformat">
        /// The format of entries in the minmax table. Must be one of Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="sink">
        /// If True, pixels will be consumed by the minmax process and no drawing or texture loading will take place. If False, pixels will proceed to the final conversion process after minmax.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glMinmax")]
        public static void Minmax(OpenToolkit.OpenGL.MinmaxTargetExt target, OpenToolkit.OpenGL.InternalFormat internalformat, bool sink) => instance.Minmax(target, internalformat, sink);

        /// <summary>[requires: v4.0]
        /// Specifies minimum rate at which sample shaing takes place
        /// </summary>
        /// <param name="value">
        /// Specifies the rate at which samples are shaded within each covered pixel.
        /// </param>
        [AutoGenerated(Category = "VERSION_4_0", Version = "4.0", EntryPoint = "glMinSampleShading")]
        public static void MinSampleShading(Single value) => instance.MinSampleShading(value);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">[length: COMPSIZE(count)]
        /// Points to an array of starting indices in the enabled arrays.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the number of indices to be rendered.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the first and count
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        [CLSCompliant(false)]
        public static void MultiDrawArrays(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "count")] Int32[] first, [CountAttribute(Computed = "drawcount")] Int32[] count, Int32 drawcount) => instance.MultiDrawArrays(mode, first, count, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">[length: COMPSIZE(count)]
        /// Points to an array of starting indices in the enabled arrays.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the number of indices to be rendered.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the first and count
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        [CLSCompliant(false)]
        public static void MultiDrawArrays(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "count")] ref Int32 first, [CountAttribute(Computed = "drawcount")] ref Int32 count, Int32 drawcount) => instance.MultiDrawArrays(mode, ref first, ref count, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">[length: COMPSIZE(count)]
        /// Points to an array of starting indices in the enabled arrays.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the number of indices to be rendered.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the first and count
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawArrays(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "count")] Int32* first, [CountAttribute(Computed = "drawcount")] Int32* count, Int32 drawcount) => instance.MultiDrawArrays(mode, first, count, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">[length: COMPSIZE(count)]
        /// Points to an array of starting indices in the enabled arrays.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the number of indices to be rendered.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the first and count
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        [CLSCompliant(false)]
        public static void MultiDrawArrays(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "count")] Int32[] first, [CountAttribute(Computed = "drawcount")] Int32[] count, Int32 drawcount) => instance.MultiDrawArrays(mode, first, count, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">[length: COMPSIZE(count)]
        /// Points to an array of starting indices in the enabled arrays.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the number of indices to be rendered.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the first and count
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        [CLSCompliant(false)]
        public static void MultiDrawArrays(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "count")] ref Int32 first, [CountAttribute(Computed = "drawcount")] ref Int32 count, Int32 drawcount) => instance.MultiDrawArrays(mode, ref first, ref count, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="first">[length: COMPSIZE(count)]
        /// Points to an array of starting indices in the enabled arrays.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the number of indices to be rendered.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the first and count
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawArrays(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "count")] Int32* first, [CountAttribute(Computed = "drawcount")] Int32* count, Int32 drawcount) => instance.MultiDrawArrays(mode, first, count, drawcount);

        /// <summary>[requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render multiple sets of primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of an array of structures containing the draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the the number of elements in the array of draw parameter structures.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawArraysIndirect")]
        public static void MultiDrawArraysIndirect(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount,stride")] IntPtr indirect, Int32 drawcount, Int32 stride) => instance.MultiDrawArraysIndirect(mode, indirect, drawcount, stride);

        /// <summary>[requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render multiple sets of primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of an array of structures containing the draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the the number of elements in the array of draw parameter structures.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawArraysIndirect")]
        [CLSCompliant(false)]
        public static void MultiDrawArraysIndirect<T1>(OpenToolkit.OpenGL.PrimitiveType mode, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] T1[] indirect, Int32 drawcount, Int32 stride)
            where T1 : struct
         => instance.MultiDrawArraysIndirect<T1>(mode, indirect, drawcount, stride);

        /// <summary>[requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render multiple sets of primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of an array of structures containing the draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the the number of elements in the array of draw parameter structures.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawArraysIndirect")]
        [CLSCompliant(false)]
        public static void MultiDrawArraysIndirect<T1>(OpenToolkit.OpenGL.PrimitiveType mode, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] T1[,] indirect, Int32 drawcount, Int32 stride)
            where T1 : struct
         => instance.MultiDrawArraysIndirect<T1>(mode, indirect, drawcount, stride);

        /// <summary>[requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render multiple sets of primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of an array of structures containing the draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the the number of elements in the array of draw parameter structures.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawArraysIndirect")]
        [CLSCompliant(false)]
        public static void MultiDrawArraysIndirect<T1>(OpenToolkit.OpenGL.PrimitiveType mode, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] T1[,,] indirect, Int32 drawcount, Int32 stride)
            where T1 : struct
         => instance.MultiDrawArraysIndirect<T1>(mode, indirect, drawcount, stride);

        /// <summary>[requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render multiple sets of primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of an array of structures containing the draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the the number of elements in the array of draw parameter structures.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawArraysIndirect")]
        public static void MultiDrawArraysIndirect<T1>(OpenToolkit.OpenGL.PrimitiveType mode, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] ref T1 indirect, Int32 drawcount, Int32 stride)
            where T1 : struct
         => instance.MultiDrawArraysIndirect<T1>(mode, ref indirect, drawcount, stride);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="mode"></param>
        /// <param name="indirect"></param>
        /// <param name="drawcount"></param>
        /// <param name="maxdrawcount"></param>
        /// <param name="stride"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawArraysIndirectCount")]
        public static void MultiDrawArraysIndirectCount(OpenToolkit.OpenGL.PrimitiveType mode, IntPtr indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride) => instance.MultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="mode"></param>
        /// <param name="indirect"></param>
        /// <param name="drawcount"></param>
        /// <param name="maxdrawcount"></param>
        /// <param name="stride"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawArraysIndirectCount")]
        [CLSCompliant(false)]
        public static void MultiDrawArraysIndirectCount<T1>(OpenToolkit.OpenGL.PrimitiveType mode, [InAttribute, OutAttribute] T1[] indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride)
            where T1 : struct
         => instance.MultiDrawArraysIndirectCount<T1>(mode, indirect, drawcount, maxdrawcount, stride);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="mode"></param>
        /// <param name="indirect"></param>
        /// <param name="drawcount"></param>
        /// <param name="maxdrawcount"></param>
        /// <param name="stride"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawArraysIndirectCount")]
        [CLSCompliant(false)]
        public static void MultiDrawArraysIndirectCount<T1>(OpenToolkit.OpenGL.PrimitiveType mode, [InAttribute, OutAttribute] T1[,] indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride)
            where T1 : struct
         => instance.MultiDrawArraysIndirectCount<T1>(mode, indirect, drawcount, maxdrawcount, stride);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="mode"></param>
        /// <param name="indirect"></param>
        /// <param name="drawcount"></param>
        /// <param name="maxdrawcount"></param>
        /// <param name="stride"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawArraysIndirectCount")]
        [CLSCompliant(false)]
        public static void MultiDrawArraysIndirectCount<T1>(OpenToolkit.OpenGL.PrimitiveType mode, [InAttribute, OutAttribute] T1[,,] indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride)
            where T1 : struct
         => instance.MultiDrawArraysIndirectCount<T1>(mode, indirect, drawcount, maxdrawcount, stride);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="mode"></param>
        /// <param name="indirect"></param>
        /// <param name="drawcount"></param>
        /// <param name="maxdrawcount"></param>
        /// <param name="stride"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawArraysIndirectCount")]
        public static void MultiDrawArraysIndirectCount<T1>(OpenToolkit.OpenGL.PrimitiveType mode, [InAttribute, OutAttribute] ref T1 indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride)
            where T1 : struct
         => instance.MultiDrawArraysIndirectCount<T1>(mode, ref indirect, drawcount, maxdrawcount, stride);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 drawcount) => instance.MultiDrawElements(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, ref indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 drawcount) => instance.MultiDrawElements(mode, ref count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, ref count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, ref count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, ref count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, ref count, type, ref indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElements(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 drawcount) => instance.MultiDrawElements(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElements<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, ref indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 drawcount) => instance.MultiDrawElements(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, ref indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 drawcount) => instance.MultiDrawElements(mode, ref count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, ref count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, ref count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, ref count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static void MultiDrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, ref count, type, ref indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElements(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 drawcount) => instance.MultiDrawElements(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, indices, drawcount);

        /// <summary>[requires: v1.4]
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count and indices arrays.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElements<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, Int32 drawcount)
            where T3 : struct
         => instance.MultiDrawElements<T3>(mode, count, type, ref indices, drawcount);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32[] basevertex) => instance.MultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32[] basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32[] basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32[] basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32[] basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, ref indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] ref Int32 basevertex) => instance.MultiDrawElementsBaseVertex(mode, ref count, type, indices, drawcount, ref basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] ref Int32 basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, ref count, type, indices, drawcount, ref basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] ref Int32 basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, ref count, type, indices, drawcount, ref basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] ref Int32 basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, ref count, type, indices, drawcount, ref basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] ref Int32 basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, ref count, type, ref indices, drawcount, ref basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElementsBaseVertex(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32* basevertex) => instance.MultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32* basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32* basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32* basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [Obsolete("Use PrimitiveType overload instead")]
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.BeginMode mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32* basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, ref indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32[] basevertex) => instance.MultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32[] basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32[] basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32[] basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32[] count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32[] basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, ref indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] ref Int32 basevertex) => instance.MultiDrawElementsBaseVertex(mode, ref count, type, indices, drawcount, ref basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] ref Int32 basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, ref count, type, indices, drawcount, ref basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] ref Int32 basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, ref count, type, indices, drawcount, ref basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] ref Int32 basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, ref count, type, indices, drawcount, ref basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] ref Int32 count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] ref Int32 basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, ref count, type, ref indices, drawcount, ref basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElementsBaseVertex(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount")] IntPtr indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32* basevertex) => instance.MultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32* basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32* basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] T3[,,] indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32* basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, indices, drawcount, basevertex);

        /// <summary>[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]
        /// Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
        /// </param>
        /// <param name="count">[length: COMPSIZE(drawcount)]
        /// Points to an array of the elements counts.
        /// </param>
        /// <param name="type">
        /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
        /// </param>
        /// <param name="indices">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the size of the count, indices and basevertex arrays.
        /// </param>
        /// <param name="basevertex">[length: COMPSIZE(drawcount)]
        /// Specifies a pointer to the location where the base vertices are stored.
        /// </param>
        [AutoGenerated(Category = "ARB_draw_elements_base_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
        [CLSCompliant(false)]
        public static unsafe void MultiDrawElementsBaseVertex<T3>(OpenToolkit.OpenGL.PrimitiveType mode, [CountAttribute(Computed = "drawcount")] Int32* count, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount")] ref T3 indices, Int32 drawcount, [CountAttribute(Computed = "drawcount")] Int32* basevertex)
            where T3 : struct
         => instance.MultiDrawElementsBaseVertex<T3>(mode, count, type, ref indices, drawcount, basevertex);

        /// <summary>[requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of a structure containing an array of draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the number of elements in the array addressed by indirect.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawElementsIndirect")]
        public static void MultiDrawElementsIndirect(OpenToolkit.OpenGL.PrimitiveType mode, OpenToolkit.OpenGL.DrawElementsType type, [CountAttribute(Computed = "drawcount,stride")] IntPtr indirect, Int32 drawcount, Int32 stride) => instance.MultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);

        /// <summary>[requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of a structure containing an array of draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the number of elements in the array addressed by indirect.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawElementsIndirect")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsIndirect<T2>(OpenToolkit.OpenGL.PrimitiveType mode, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] T2[] indirect, Int32 drawcount, Int32 stride)
            where T2 : struct
         => instance.MultiDrawElementsIndirect<T2>(mode, type, indirect, drawcount, stride);

        /// <summary>[requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of a structure containing an array of draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the number of elements in the array addressed by indirect.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawElementsIndirect")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsIndirect<T2>(OpenToolkit.OpenGL.PrimitiveType mode, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] T2[,] indirect, Int32 drawcount, Int32 stride)
            where T2 : struct
         => instance.MultiDrawElementsIndirect<T2>(mode, type, indirect, drawcount, stride);

        /// <summary>[requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of a structure containing an array of draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the number of elements in the array addressed by indirect.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawElementsIndirect")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsIndirect<T2>(OpenToolkit.OpenGL.PrimitiveType mode, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] T2[,,] indirect, Int32 drawcount, Int32 stride)
            where T2 : struct
         => instance.MultiDrawElementsIndirect<T2>(mode, type, indirect, drawcount, stride);

        /// <summary>[requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]
        /// Render indexed primitives from array data, taking parameters from memory
        /// </summary>
        /// <param name="mode">
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.
        /// </param>
        /// <param name="type">
        /// Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.
        /// </param>
        /// <param name="indirect">[length: COMPSIZE(drawcount,stride)]
        /// Specifies the address of a structure containing an array of draw parameters.
        /// </param>
        /// <param name="drawcount">
        /// Specifies the number of elements in the array addressed by indirect.
        /// </param>
        /// <param name="stride">
        /// Specifies the distance in basic machine units between elements of the draw parameter array.
        /// </param>
        [AutoGenerated(Category = "ARB_multi_draw_indirect|VERSION_4_3", Version = "4.3", EntryPoint = "glMultiDrawElementsIndirect")]
        public static void MultiDrawElementsIndirect<T2>(OpenToolkit.OpenGL.PrimitiveType mode, OpenToolkit.OpenGL.DrawElementsType type, [InAttribute, OutAttribute, CountAttribute(Computed = "drawcount,stride")] ref T2 indirect, Int32 drawcount, Int32 stride)
            where T2 : struct
         => instance.MultiDrawElementsIndirect<T2>(mode, type, ref indirect, drawcount, stride);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="mode"></param>
        /// <param name="type"></param>
        /// <param name="indirect"></param>
        /// <param name="drawcount"></param>
        /// <param name="maxdrawcount"></param>
        /// <param name="stride"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawElementsIndirectCount")]
        public static void MultiDrawElementsIndirectCount(OpenToolkit.OpenGL.PrimitiveType mode, OpenToolkit.OpenGL.Version46 type, IntPtr indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride) => instance.MultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="mode"></param>
        /// <param name="type"></param>
        /// <param name="indirect"></param>
        /// <param name="drawcount"></param>
        /// <param name="maxdrawcount"></param>
        /// <param name="stride"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawElementsIndirectCount")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsIndirectCount<T2>(OpenToolkit.OpenGL.PrimitiveType mode, OpenToolkit.OpenGL.Version46 type, [InAttribute, OutAttribute] T2[] indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride)
            where T2 : struct
         => instance.MultiDrawElementsIndirectCount<T2>(mode, type, indirect, drawcount, maxdrawcount, stride);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="mode"></param>
        /// <param name="type"></param>
        /// <param name="indirect"></param>
        /// <param name="drawcount"></param>
        /// <param name="maxdrawcount"></param>
        /// <param name="stride"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawElementsIndirectCount")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsIndirectCount<T2>(OpenToolkit.OpenGL.PrimitiveType mode, OpenToolkit.OpenGL.Version46 type, [InAttribute, OutAttribute] T2[,] indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride)
            where T2 : struct
         => instance.MultiDrawElementsIndirectCount<T2>(mode, type, indirect, drawcount, maxdrawcount, stride);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="mode"></param>
        /// <param name="type"></param>
        /// <param name="indirect"></param>
        /// <param name="drawcount"></param>
        /// <param name="maxdrawcount"></param>
        /// <param name="stride"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawElementsIndirectCount")]
        [CLSCompliant(false)]
        public static void MultiDrawElementsIndirectCount<T2>(OpenToolkit.OpenGL.PrimitiveType mode, OpenToolkit.OpenGL.Version46 type, [InAttribute, OutAttribute] T2[,,] indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride)
            where T2 : struct
         => instance.MultiDrawElementsIndirectCount<T2>(mode, type, indirect, drawcount, maxdrawcount, stride);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="mode"></param>
        /// <param name="type"></param>
        /// <param name="indirect"></param>
        /// <param name="drawcount"></param>
        /// <param name="maxdrawcount"></param>
        /// <param name="stride"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glMultiDrawElementsIndirectCount")]
        public static void MultiDrawElementsIndirectCount<T2>(OpenToolkit.OpenGL.PrimitiveType mode, OpenToolkit.OpenGL.Version46 type, [InAttribute, OutAttribute] ref T2 indirect, IntPtr drawcount, Int32 maxdrawcount, Int32 stride)
            where T2 : struct
         => instance.MultiDrawElementsIndirectCount<T2>(mode, type, ref indirect, drawcount, maxdrawcount, stride);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1d")]
        public static void MultiTexCoord1(OpenToolkit.OpenGL.TextureUnit target, Double s) => instance.MultiTexCoord1(target, s);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 1]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1dv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord1(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] Double* v) => instance.MultiTexCoord1(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1f")]
        public static void MultiTexCoord1(OpenToolkit.OpenGL.TextureUnit target, Single s) => instance.MultiTexCoord1(target, s);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 1]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1fv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord1(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] Single* v) => instance.MultiTexCoord1(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1i")]
        public static void MultiTexCoord1(OpenToolkit.OpenGL.TextureUnit target, Int32 s) => instance.MultiTexCoord1(target, s);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 1]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1iv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord1(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] Int32* v) => instance.MultiTexCoord1(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1s")]
        public static void MultiTexCoord1(OpenToolkit.OpenGL.TextureUnit target, Int16 s) => instance.MultiTexCoord1(target, s);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 1]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord1sv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord1(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 1)] Int16* v) => instance.MultiTexCoord1(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2d")]
        public static void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, Double s, Double t) => instance.MultiTexCoord2(target, s, t);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] Double[] v) => instance.MultiTexCoord2(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] ref Double v) => instance.MultiTexCoord2(target, ref v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] Double* v) => instance.MultiTexCoord2(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2f")]
        public static void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, Single s, Single t) => instance.MultiTexCoord2(target, s, t);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] Single[] v) => instance.MultiTexCoord2(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] ref Single v) => instance.MultiTexCoord2(target, ref v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] Single* v) => instance.MultiTexCoord2(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2i")]
        public static void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, Int32 s, Int32 t) => instance.MultiTexCoord2(target, s, t);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] Int32[] v) => instance.MultiTexCoord2(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] ref Int32 v) => instance.MultiTexCoord2(target, ref v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] Int32* v) => instance.MultiTexCoord2(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2s")]
        public static void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, Int16 s, Int16 t) => instance.MultiTexCoord2(target, s, t);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] Int16[] v) => instance.MultiTexCoord2(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] ref Int16 v) => instance.MultiTexCoord2(target, ref v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord2(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 2)] Int16* v) => instance.MultiTexCoord2(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3d")]
        public static void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, Double s, Double t, Double r) => instance.MultiTexCoord3(target, s, t, r);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] Double[] v) => instance.MultiTexCoord3(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] ref Double v) => instance.MultiTexCoord3(target, ref v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] Double* v) => instance.MultiTexCoord3(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3f")]
        public static void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, Single s, Single t, Single r) => instance.MultiTexCoord3(target, s, t, r);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] Single[] v) => instance.MultiTexCoord3(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] ref Single v) => instance.MultiTexCoord3(target, ref v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] Single* v) => instance.MultiTexCoord3(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3i")]
        public static void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, Int32 s, Int32 t, Int32 r) => instance.MultiTexCoord3(target, s, t, r);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] Int32[] v) => instance.MultiTexCoord3(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] ref Int32 v) => instance.MultiTexCoord3(target, ref v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] Int32* v) => instance.MultiTexCoord3(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3s")]
        public static void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, Int16 s, Int16 t, Int16 r) => instance.MultiTexCoord3(target, s, t, r);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] Int16[] v) => instance.MultiTexCoord3(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] ref Int16 v) => instance.MultiTexCoord3(target, ref v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord3(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 3)] Int16* v) => instance.MultiTexCoord3(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4d")]
        public static void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, Double s, Double t, Double r, Double q) => instance.MultiTexCoord4(target, s, t, r, q);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] Double[] v) => instance.MultiTexCoord4(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] ref Double v) => instance.MultiTexCoord4(target, ref v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] Double* v) => instance.MultiTexCoord4(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4f")]
        public static void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, Single s, Single t, Single r, Single q) => instance.MultiTexCoord4(target, s, t, r, q);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] Single[] v) => instance.MultiTexCoord4(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] ref Single v) => instance.MultiTexCoord4(target, ref v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] Single* v) => instance.MultiTexCoord4(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4i")]
        public static void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, Int32 s, Int32 t, Int32 r, Int32 q) => instance.MultiTexCoord4(target, s, t, r, q);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] Int32[] v) => instance.MultiTexCoord4(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] ref Int32 v) => instance.MultiTexCoord4(target, ref v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] Int32* v) => instance.MultiTexCoord4(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="s">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4s")]
        public static void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, Int16 s, Int16 t, Int16 r, Int16 q) => instance.MultiTexCoord4(target, s, t, r, q);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] Int16[] v) => instance.MultiTexCoord4(target, v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        [CLSCompliant(false)]
        public static void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] ref Int16 v) => instance.MultiTexCoord4(target, ref v);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.
        /// </param>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoord4(OpenToolkit.OpenGL.TextureUnit target, [CountAttribute(Count = 4)] Int16* v) => instance.MultiTexCoord4(target, v);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP1ui")]
        [CLSCompliant(false)]
        public static void MultiTexCoordP1(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, Int32 coords) => instance.MultiTexCoordP1(texture, type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP1ui")]
        [CLSCompliant(false)]
        public static void MultiTexCoordP1(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, UInt32 coords) => instance.MultiTexCoordP1(texture, type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP1uiv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoordP1(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] Int32* coords) => instance.MultiTexCoordP1(texture, type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP1uiv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoordP1(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] UInt32* coords) => instance.MultiTexCoordP1(texture, type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP2ui")]
        [CLSCompliant(false)]
        public static void MultiTexCoordP2(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, Int32 coords) => instance.MultiTexCoordP2(texture, type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP2ui")]
        [CLSCompliant(false)]
        public static void MultiTexCoordP2(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, UInt32 coords) => instance.MultiTexCoordP2(texture, type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP2uiv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoordP2(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] Int32* coords) => instance.MultiTexCoordP2(texture, type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP2uiv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoordP2(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] UInt32* coords) => instance.MultiTexCoordP2(texture, type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP3ui")]
        [CLSCompliant(false)]
        public static void MultiTexCoordP3(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, Int32 coords) => instance.MultiTexCoordP3(texture, type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP3ui")]
        [CLSCompliant(false)]
        public static void MultiTexCoordP3(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, UInt32 coords) => instance.MultiTexCoordP3(texture, type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP3uiv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoordP3(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] Int32* coords) => instance.MultiTexCoordP3(texture, type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP3uiv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoordP3(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] UInt32* coords) => instance.MultiTexCoordP3(texture, type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP4ui")]
        [CLSCompliant(false)]
        public static void MultiTexCoordP4(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, Int32 coords) => instance.MultiTexCoordP4(texture, type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP4ui")]
        [CLSCompliant(false)]
        public static void MultiTexCoordP4(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, UInt32 coords) => instance.MultiTexCoordP4(texture, type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP4uiv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoordP4(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] Int32* coords) => instance.MultiTexCoordP4(texture, type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="texture"></param>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glMultiTexCoordP4uiv")]
        [CLSCompliant(false)]
        public static unsafe void MultiTexCoordP4(OpenToolkit.OpenGL.TextureUnit texture, OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] UInt32* coords) => instance.MultiTexCoordP4(texture, type, coords);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMultMatrixd")]
        [CLSCompliant(false)]
        public static void MultMatrix([CountAttribute(Count = 16)] Double[] m) => instance.MultMatrix(m);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMultMatrixd")]
        [CLSCompliant(false)]
        public static void MultMatrix([CountAttribute(Count = 16)] ref Double m) => instance.MultMatrix(ref m);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMultMatrixd")]
        [CLSCompliant(false)]
        public static unsafe void MultMatrix([CountAttribute(Count = 16)] Double* m) => instance.MultMatrix(m);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMultMatrixf")]
        [CLSCompliant(false)]
        public static void MultMatrix([CountAttribute(Count = 16)] Single[] m) => instance.MultMatrix(m);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMultMatrixf")]
        [CLSCompliant(false)]
        public static void MultMatrix([CountAttribute(Count = 16)] ref Single m) => instance.MultMatrix(ref m);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix with the specified matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glMultMatrixf")]
        [CLSCompliant(false)]
        public static unsafe void MultMatrix([CountAttribute(Count = 16)] Single* m) => instance.MultMatrix(m);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
        [CLSCompliant(false)]
        public static void MultTransposeMatrix([CountAttribute(Count = 16)] Double[] m) => instance.MultTransposeMatrix(m);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
        [CLSCompliant(false)]
        public static void MultTransposeMatrix([CountAttribute(Count = 16)] ref Double m) => instance.MultTransposeMatrix(ref m);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
        [CLSCompliant(false)]
        public static unsafe void MultTransposeMatrix([CountAttribute(Count = 16)] Double* m) => instance.MultTransposeMatrix(m);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
        [CLSCompliant(false)]
        public static void MultTransposeMatrix([CountAttribute(Count = 16)] Single[] m) => instance.MultTransposeMatrix(m);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
        [CLSCompliant(false)]
        public static void MultTransposeMatrix([CountAttribute(Count = 16)] ref Single m) => instance.MultTransposeMatrix(ref m);

        /// <summary>[requires: v1.3][deprecated: v3.2]
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">[length: 16]
        /// Points to 16 consecutive values that are used as the elements of a 4  times  4 row-major matrix.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
        [CLSCompliant(false)]
        public static unsafe void MultTransposeMatrix([CountAttribute(Count = 16)] Single* m) => instance.MultTransposeMatrix(m);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData(Int32 buffer, Int32 size, IntPtr data, OpenToolkit.OpenGL.BufferUsageHint usage) => instance.NamedBufferData(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(Int32 buffer, Int32 size, [InAttribute, OutAttribute] T2[] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(Int32 buffer, Int32 size, [InAttribute, OutAttribute] T2[,] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(Int32 buffer, Int32 size, [InAttribute, OutAttribute] T2[,,] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(Int32 buffer, Int32 size, [InAttribute, OutAttribute] ref T2 data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, ref data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData(Int32 buffer, IntPtr size, IntPtr data, OpenToolkit.OpenGL.BufferUsageHint usage) => instance.NamedBufferData(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, ref data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData(UInt32 buffer, Int32 size, IntPtr data, OpenToolkit.OpenGL.BufferUsageHint usage) => instance.NamedBufferData(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(UInt32 buffer, Int32 size, [InAttribute, OutAttribute] T2[] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(UInt32 buffer, Int32 size, [InAttribute, OutAttribute] T2[,] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(UInt32 buffer, Int32 size, [InAttribute, OutAttribute] T2[,,] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(UInt32 buffer, Int32 size, [InAttribute, OutAttribute] ref T2 data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, ref data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData(UInt32 buffer, IntPtr size, IntPtr data, OpenToolkit.OpenGL.BufferUsageHint usage) => instance.NamedBufferData(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferData")]
        [CLSCompliant(false)]
        public static void NamedBufferData<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenToolkit.OpenGL.BufferUsageHint usage)
            where T2 : struct
         => instance.NamedBufferData<T2>(buffer, size, ref data, usage);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage(Int32 buffer, Int32 size, [CountAttribute(Parameter = "size")] IntPtr data, OpenToolkit.OpenGL.BufferStorageFlags flags) => instance.NamedBufferStorage(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(Int32 buffer, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(Int32 buffer, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(Int32 buffer, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(Int32 buffer, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, ref data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage(Int32 buffer, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenToolkit.OpenGL.BufferStorageFlags flags) => instance.NamedBufferStorage(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(Int32 buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, ref data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage(UInt32 buffer, Int32 size, [CountAttribute(Parameter = "size")] IntPtr data, OpenToolkit.OpenGL.BufferStorageFlags flags) => instance.NamedBufferStorage(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(UInt32 buffer, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(UInt32 buffer, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(UInt32 buffer, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(UInt32 buffer, Int32 size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, ref data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage(UInt32 buffer, IntPtr size, [CountAttribute(Parameter = "size")] IntPtr data, OpenToolkit.OpenGL.BufferStorageFlags flags) => instance.NamedBufferStorage(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T2[,,] data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: size]</param>
        /// <param name="flags"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferStorage")]
        [CLSCompliant(false)]
        public static void NamedBufferStorage<T2>(UInt32 buffer, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T2 data, OpenToolkit.OpenGL.BufferStorageFlags flags)
            where T2 : struct
         => instance.NamedBufferStorage<T2>(buffer, size, ref data, flags);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData(Int32 buffer, IntPtr offset, Int32 size, [CountAttribute(Computed = "size")] IntPtr data) => instance.NamedBufferSubData(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[] data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,] data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,,] data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T3 data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData(Int32 buffer, IntPtr offset, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data) => instance.NamedBufferSubData(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[] data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,] data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,,] data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T3 data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData(UInt32 buffer, IntPtr offset, Int32 size, [CountAttribute(Computed = "size")] IntPtr data) => instance.NamedBufferSubData(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[] data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,] data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,,] data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, Int32 size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T3 data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData(UInt32 buffer, IntPtr offset, IntPtr size, [CountAttribute(Computed = "size")] IntPtr data) => instance.NamedBufferSubData(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[] data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,] data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] T3[,,] data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <param name="data">[length: COMPSIZE(size)]</param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedBufferSubData")]
        [CLSCompliant(false)]
        public static void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, [InAttribute, OutAttribute, CountAttribute(Computed = "size")] ref T3 data)
            where T3 : struct
         => instance.NamedBufferSubData<T3>(buffer, offset, size, ref data);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buf"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferDrawBuffer")]
        [CLSCompliant(false)]
        public static void NamedFramebufferDrawBuffer(Int32 framebuffer, OpenToolkit.OpenGL.DrawBufferMode buf) => instance.NamedFramebufferDrawBuffer(framebuffer, buf);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="buf"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferDrawBuffer")]
        [CLSCompliant(false)]
        public static void NamedFramebufferDrawBuffer(UInt32 framebuffer, OpenToolkit.OpenGL.DrawBufferMode buf) => instance.NamedFramebufferDrawBuffer(framebuffer, buf);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="n"></param>
        /// <param name="bufs"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferDrawBuffers")]
        [CLSCompliant(false)]
        public static void NamedFramebufferDrawBuffers(Int32 framebuffer, Int32 n, OpenToolkit.OpenGL.DrawBuffersEnum[] bufs) => instance.NamedFramebufferDrawBuffers(framebuffer, n, bufs);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="n"></param>
        /// <param name="bufs"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferDrawBuffers")]
        [CLSCompliant(false)]
        public static void NamedFramebufferDrawBuffers(Int32 framebuffer, Int32 n, ref OpenToolkit.OpenGL.DrawBuffersEnum bufs) => instance.NamedFramebufferDrawBuffers(framebuffer, n, ref bufs);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="n"></param>
        /// <param name="bufs"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferDrawBuffers")]
        [CLSCompliant(false)]
        public static unsafe void NamedFramebufferDrawBuffers(Int32 framebuffer, Int32 n, OpenToolkit.OpenGL.DrawBuffersEnum* bufs) => instance.NamedFramebufferDrawBuffers(framebuffer, n, bufs);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="n"></param>
        /// <param name="bufs"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferDrawBuffers")]
        [CLSCompliant(false)]
        public static void NamedFramebufferDrawBuffers(UInt32 framebuffer, Int32 n, OpenToolkit.OpenGL.DrawBuffersEnum[] bufs) => instance.NamedFramebufferDrawBuffers(framebuffer, n, bufs);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="n"></param>
        /// <param name="bufs"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferDrawBuffers")]
        [CLSCompliant(false)]
        public static void NamedFramebufferDrawBuffers(UInt32 framebuffer, Int32 n, ref OpenToolkit.OpenGL.DrawBuffersEnum bufs) => instance.NamedFramebufferDrawBuffers(framebuffer, n, ref bufs);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="n"></param>
        /// <param name="bufs"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferDrawBuffers")]
        [CLSCompliant(false)]
        public static unsafe void NamedFramebufferDrawBuffers(UInt32 framebuffer, Int32 n, OpenToolkit.OpenGL.DrawBuffersEnum* bufs) => instance.NamedFramebufferDrawBuffers(framebuffer, n, bufs);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferParameteri")]
        [CLSCompliant(false)]
        public static void NamedFramebufferParameter(Int32 framebuffer, OpenToolkit.OpenGL.FramebufferDefaultParameter pname, Int32 param) => instance.NamedFramebufferParameter(framebuffer, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferParameteri")]
        [CLSCompliant(false)]
        public static void NamedFramebufferParameter(UInt32 framebuffer, OpenToolkit.OpenGL.FramebufferDefaultParameter pname, Int32 param) => instance.NamedFramebufferParameter(framebuffer, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="src"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferReadBuffer")]
        [CLSCompliant(false)]
        public static void NamedFramebufferReadBuffer(Int32 framebuffer, OpenToolkit.OpenGL.ReadBufferMode src) => instance.NamedFramebufferReadBuffer(framebuffer, src);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="src"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferReadBuffer")]
        [CLSCompliant(false)]
        public static void NamedFramebufferReadBuffer(UInt32 framebuffer, OpenToolkit.OpenGL.ReadBufferMode src) => instance.NamedFramebufferReadBuffer(framebuffer, src);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="attachment"></param>
        /// <param name="renderbuffertarget"></param>
        /// <param name="renderbuffer"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferRenderbuffer")]
        [CLSCompliant(false)]
        public static void NamedFramebufferRenderbuffer(Int32 framebuffer, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.RenderbufferTarget renderbuffertarget, Int32 renderbuffer) => instance.NamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="attachment"></param>
        /// <param name="renderbuffertarget"></param>
        /// <param name="renderbuffer"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferRenderbuffer")]
        [CLSCompliant(false)]
        public static void NamedFramebufferRenderbuffer(UInt32 framebuffer, OpenToolkit.OpenGL.FramebufferAttachment attachment, OpenToolkit.OpenGL.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer) => instance.NamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="attachment"></param>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferTexture")]
        [CLSCompliant(false)]
        public static void NamedFramebufferTexture(Int32 framebuffer, OpenToolkit.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level) => instance.NamedFramebufferTexture(framebuffer, attachment, texture, level);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="attachment"></param>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferTexture")]
        [CLSCompliant(false)]
        public static void NamedFramebufferTexture(UInt32 framebuffer, OpenToolkit.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level) => instance.NamedFramebufferTexture(framebuffer, attachment, texture, level);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="attachment"></param>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="layer"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferTextureLayer")]
        [CLSCompliant(false)]
        public static void NamedFramebufferTextureLayer(Int32 framebuffer, OpenToolkit.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer) => instance.NamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="framebuffer"></param>
        /// <param name="attachment"></param>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="layer"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedFramebufferTextureLayer")]
        [CLSCompliant(false)]
        public static void NamedFramebufferTextureLayer(UInt32 framebuffer, OpenToolkit.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer) => instance.NamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="renderbuffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedRenderbufferStorage")]
        [CLSCompliant(false)]
        public static void NamedRenderbufferStorage(Int32 renderbuffer, OpenToolkit.OpenGL.RenderbufferStorage internalformat, Int32 width, Int32 height) => instance.NamedRenderbufferStorage(renderbuffer, internalformat, width, height);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="renderbuffer"></param>
        /// <param name="internalformat"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedRenderbufferStorage")]
        [CLSCompliant(false)]
        public static void NamedRenderbufferStorage(UInt32 renderbuffer, OpenToolkit.OpenGL.RenderbufferStorage internalformat, Int32 width, Int32 height) => instance.NamedRenderbufferStorage(renderbuffer, internalformat, width, height);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="renderbuffer"></param>
        /// <param name="samples"></param>
        /// <param name="internalformat"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedRenderbufferStorageMultisample")]
        [CLSCompliant(false)]
        public static void NamedRenderbufferStorageMultisample(Int32 renderbuffer, Int32 samples, OpenToolkit.OpenGL.RenderbufferStorage internalformat, Int32 width, Int32 height) => instance.NamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="renderbuffer"></param>
        /// <param name="samples"></param>
        /// <param name="internalformat"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glNamedRenderbufferStorageMultisample")]
        [CLSCompliant(false)]
        public static void NamedRenderbufferStorageMultisample(UInt32 renderbuffer, Int32 samples, OpenToolkit.OpenGL.RenderbufferStorage internalformat, Int32 width, Int32 height) => instance.NamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Create or replace a display list
        /// </summary>
        /// <param name="list">
        /// Specifies the display-list name.
        /// </param>
        /// <param name="mode">
        /// Specifies the compilation mode, which can be Compile or CompileAndExecute.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNewList")]
        [CLSCompliant(false)]
        public static void NewList(Int32 list, OpenToolkit.OpenGL.ListMode mode) => instance.NewList(list, mode);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Create or replace a display list
        /// </summary>
        /// <param name="list">
        /// Specifies the display-list name.
        /// </param>
        /// <param name="mode">
        /// Specifies the compilation mode, which can be Compile or CompileAndExecute.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNewList")]
        [CLSCompliant(false)]
        public static void NewList(UInt32 list, OpenToolkit.OpenGL.ListMode mode) => instance.NewList(list, mode);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="nx">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="ny">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="nz">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3b")]
        [CLSCompliant(false)]
        public static void Normal3(Byte nx, Byte ny, Byte nz) => instance.Normal3(nx, ny, nz);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="nx">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="ny">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="nz">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3b")]
        [CLSCompliant(false)]
        public static void Normal3(SByte nx, SByte ny, SByte nz) => instance.Normal3(nx, ny, nz);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3bv")]
        [CLSCompliant(false)]
        public static void Normal3([CountAttribute(Count = 3)] Byte[] v) => instance.Normal3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3bv")]
        [CLSCompliant(false)]
        public static void Normal3([CountAttribute(Count = 3)] ref Byte v) => instance.Normal3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3bv")]
        [CLSCompliant(false)]
        public static unsafe void Normal3([CountAttribute(Count = 3)] Byte* v) => instance.Normal3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3bv")]
        [CLSCompliant(false)]
        public static void Normal3([CountAttribute(Count = 3)] SByte[] v) => instance.Normal3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3bv")]
        [CLSCompliant(false)]
        public static void Normal3([CountAttribute(Count = 3)] ref SByte v) => instance.Normal3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3bv")]
        [CLSCompliant(false)]
        public static unsafe void Normal3([CountAttribute(Count = 3)] SByte* v) => instance.Normal3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="nx">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="ny">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="nz">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3d")]
        public static void Normal3(Double nx, Double ny, Double nz) => instance.Normal3(nx, ny, nz);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3dv")]
        [CLSCompliant(false)]
        public static void Normal3([CountAttribute(Count = 3)] Double[] v) => instance.Normal3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3dv")]
        [CLSCompliant(false)]
        public static void Normal3([CountAttribute(Count = 3)] ref Double v) => instance.Normal3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3dv")]
        [CLSCompliant(false)]
        public static unsafe void Normal3([CountAttribute(Count = 3)] Double* v) => instance.Normal3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="nx">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="ny">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="nz">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3f")]
        public static void Normal3(Single nx, Single ny, Single nz) => instance.Normal3(nx, ny, nz);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3fv")]
        [CLSCompliant(false)]
        public static void Normal3([CountAttribute(Count = 3)] Single[] v) => instance.Normal3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3fv")]
        [CLSCompliant(false)]
        public static void Normal3([CountAttribute(Count = 3)] ref Single v) => instance.Normal3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3fv")]
        [CLSCompliant(false)]
        public static unsafe void Normal3([CountAttribute(Count = 3)] Single* v) => instance.Normal3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="nx">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="ny">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="nz">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3i")]
        public static void Normal3(Int32 nx, Int32 ny, Int32 nz) => instance.Normal3(nx, ny, nz);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3iv")]
        [CLSCompliant(false)]
        public static void Normal3([CountAttribute(Count = 3)] Int32[] v) => instance.Normal3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3iv")]
        [CLSCompliant(false)]
        public static void Normal3([CountAttribute(Count = 3)] ref Int32 v) => instance.Normal3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3iv")]
        [CLSCompliant(false)]
        public static unsafe void Normal3([CountAttribute(Count = 3)] Int32* v) => instance.Normal3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="nx">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="ny">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        /// <param name="nz">
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3s")]
        public static void Normal3(Int16 nx, Int16 ny, Int16 nz) => instance.Normal3(nx, ny, nz);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3sv")]
        [CLSCompliant(false)]
        public static void Normal3([CountAttribute(Count = 3)] Int16[] v) => instance.Normal3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3sv")]
        [CLSCompliant(false)]
        public static void Normal3([CountAttribute(Count = 3)] ref Int16 v) => instance.Normal3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current normal vector
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glNormal3sv")]
        [CLSCompliant(false)]
        public static unsafe void Normal3([CountAttribute(Count = 3)] Int16* v) => instance.Normal3(v);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glNormalP3ui")]
        [CLSCompliant(false)]
        public static void NormalP3(OpenToolkit.OpenGL.PackedPointerType type, Int32 coords) => instance.NormalP3(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glNormalP3ui")]
        [CLSCompliant(false)]
        public static void NormalP3(OpenToolkit.OpenGL.PackedPointerType type, UInt32 coords) => instance.NormalP3(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glNormalP3uiv")]
        [CLSCompliant(false)]
        public static unsafe void NormalP3(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] Int32* coords) => instance.NormalP3(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glNormalP3uiv")]
        [CLSCompliant(false)]
        public static unsafe void NormalP3(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] UInt32* coords) => instance.NormalP3(type, coords);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glNormalPointer")]
        public static void NormalPointer(OpenToolkit.OpenGL.NormalPointerType type, Int32 stride, [CountAttribute(Computed = "type,stride")] IntPtr pointer) => instance.NormalPointer(type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glNormalPointer")]
        [CLSCompliant(false)]
        public static void NormalPointer<T2>(OpenToolkit.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[] pointer)
            where T2 : struct
         => instance.NormalPointer<T2>(type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glNormalPointer")]
        [CLSCompliant(false)]
        public static void NormalPointer<T2>(OpenToolkit.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,] pointer)
            where T2 : struct
         => instance.NormalPointer<T2>(type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glNormalPointer")]
        [CLSCompliant(false)]
        public static void NormalPointer<T2>(OpenToolkit.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] T2[,,] pointer)
            where T2 : struct
         => instance.NormalPointer<T2>(type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(type,stride)]
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glNormalPointer")]
        public static void NormalPointer<T2>(OpenToolkit.OpenGL.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "type,stride")] ref T2 pointer)
            where T2 : struct
         => instance.NormalPointer<T2>(type, stride, ref pointer);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object to label.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectLabel")]
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenToolkit.OpenGL.ObjectLabelIdentifier identifier, Int32 name, Int32 length, [CountAttribute(Computed = "label,length")] String label) => instance.ObjectLabel(identifier, name, length, label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier">
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name">
        /// The name of the object to label.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectLabel")]
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenToolkit.OpenGL.ObjectLabelIdentifier identifier, UInt32 name, Int32 length, [CountAttribute(Computed = "label,length")] String label) => instance.ObjectLabel(identifier, name, length, label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel(IntPtr ptr, Int32 length, [CountAttribute(Computed = "label,length")] String label) => instance.ObjectPtrLabel(ptr, length, label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 length, [CountAttribute(Computed = "label,length")] String label)
            where T0 : struct
         => instance.ObjectPtrLabel<T0>(ptr, length, label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 length, [CountAttribute(Computed = "label,length")] String label)
            where T0 : struct
         => instance.ObjectPtrLabel<T0>(ptr, length, label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 length, [CountAttribute(Computed = "label,length")] String label)
            where T0 : struct
         => instance.ObjectPtrLabel<T0>(ptr, length, label);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr">
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length">
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: COMPSIZE(label,length)]
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 length, [CountAttribute(Computed = "label,length")] String label)
            where T0 : struct
         => instance.ObjectPtrLabel<T0>(ref ptr, length, label);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix with an orthographic matrix
        /// </summary>
        /// <param name="left">
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="right">
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </param>
        /// <param name="bottom">
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="top">
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </param>
        /// <param name="zNear">
        /// Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.
        /// </param>
        /// <param name="zFar">
        /// Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glOrtho")]
        public static void Ortho(Double left, Double right, Double bottom, Double top, Double zNear, Double zFar) => instance.Ortho(left, right, bottom, top, zNear, zFar);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Place a marker in the feedback buffer
        /// </summary>
        /// <param name="token">
        /// Specifies a marker value to be placed in the feedback buffer following a PassThroughToken.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPassThrough")]
        public static void PassThrough(Single token) => instance.PassThrough(token);

        /// <summary>[requires: v4.0 or ARB_tessellation_shader|VERSION_4_0]
        /// Specifies the parameters for patch primitives
        /// </summary>
        /// <param name="pname">
        /// Specifies the name of the parameter to set. The symbolc constants PatchVertices, PatchDefaultOuterLevel, and PatchDefaultInnerLevel are accepted.
        /// </param>
        /// <param name="values">[length: COMPSIZE(pname)]
        /// Specifies the address of an array containing the new values for the parameter given by pname.
        /// </param>
        [AutoGenerated(Category = "ARB_tessellation_shader|VERSION_4_0", Version = "4.0", EntryPoint = "glPatchParameterfv")]
        [CLSCompliant(false)]
        public static void PatchParameter(OpenToolkit.OpenGL.PatchParameterFloat pname, [CountAttribute(Computed = "pname")] Single[] values) => instance.PatchParameter(pname, values);

        /// <summary>[requires: v4.0 or ARB_tessellation_shader|VERSION_4_0]
        /// Specifies the parameters for patch primitives
        /// </summary>
        /// <param name="pname">
        /// Specifies the name of the parameter to set. The symbolc constants PatchVertices, PatchDefaultOuterLevel, and PatchDefaultInnerLevel are accepted.
        /// </param>
        /// <param name="values">[length: COMPSIZE(pname)]
        /// Specifies the address of an array containing the new values for the parameter given by pname.
        /// </param>
        [AutoGenerated(Category = "ARB_tessellation_shader|VERSION_4_0", Version = "4.0", EntryPoint = "glPatchParameterfv")]
        [CLSCompliant(false)]
        public static void PatchParameter(OpenToolkit.OpenGL.PatchParameterFloat pname, [CountAttribute(Computed = "pname")] ref Single values) => instance.PatchParameter(pname, ref values);

        /// <summary>[requires: v4.0 or ARB_tessellation_shader|VERSION_4_0]
        /// Specifies the parameters for patch primitives
        /// </summary>
        /// <param name="pname">
        /// Specifies the name of the parameter to set. The symbolc constants PatchVertices, PatchDefaultOuterLevel, and PatchDefaultInnerLevel are accepted.
        /// </param>
        /// <param name="values">[length: COMPSIZE(pname)]
        /// Specifies the address of an array containing the new values for the parameter given by pname.
        /// </param>
        [AutoGenerated(Category = "ARB_tessellation_shader|VERSION_4_0", Version = "4.0", EntryPoint = "glPatchParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void PatchParameter(OpenToolkit.OpenGL.PatchParameterFloat pname, [CountAttribute(Computed = "pname")] Single* values) => instance.PatchParameter(pname, values);

        /// <summary>[requires: v4.0 or ARB_tessellation_shader|VERSION_4_0]
        /// Specifies the parameters for patch primitives
        /// </summary>
        /// <param name="pname">
        /// Specifies the name of the parameter to set. The symbolc constants PatchVertices, PatchDefaultOuterLevel, and PatchDefaultInnerLevel are accepted.
        /// </param>
        /// <param name="value">
        /// Specifies the new value for the parameter given by pname.
        /// </param>
        [AutoGenerated(Category = "ARB_tessellation_shader|VERSION_4_0", Version = "4.0", EntryPoint = "glPatchParameteri")]
        public static void PatchParameter(OpenToolkit.OpenGL.PatchParameterInt pname, Int32 value) => instance.PatchParameter(pname, value);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Pause transform feedback operations
        /// </summary>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glPauseTransformFeedback")]
        public static void PauseTransformFeedback() => instance.PauseTransformFeedback();

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">[length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapfv")]
        [CLSCompliant(false)]
        public static void PixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 mapsize, [CountAttribute(Parameter = "mapsize")] Single[] values) => instance.PixelMap(map, mapsize, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">[length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapfv")]
        [CLSCompliant(false)]
        public static void PixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 mapsize, [CountAttribute(Parameter = "mapsize")] ref Single values) => instance.PixelMap(map, mapsize, ref values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">[length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapfv")]
        [CLSCompliant(false)]
        public static unsafe void PixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 mapsize, [CountAttribute(Parameter = "mapsize")] Single* values) => instance.PixelMap(map, mapsize, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">[length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        [CLSCompliant(false)]
        public static void PixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 mapsize, [CountAttribute(Parameter = "mapsize")] Int32[] values) => instance.PixelMap(map, mapsize, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">[length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        [CLSCompliant(false)]
        public static void PixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 mapsize, [CountAttribute(Parameter = "mapsize")] ref Int32 values) => instance.PixelMap(map, mapsize, ref values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">[length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        [CLSCompliant(false)]
        public static unsafe void PixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 mapsize, [CountAttribute(Parameter = "mapsize")] Int32* values) => instance.PixelMap(map, mapsize, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">[length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        [CLSCompliant(false)]
        public static void PixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 mapsize, [CountAttribute(Parameter = "mapsize")] UInt32[] values) => instance.PixelMap(map, mapsize, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">[length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        [CLSCompliant(false)]
        public static void PixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 mapsize, [CountAttribute(Parameter = "mapsize")] ref UInt32 values) => instance.PixelMap(map, mapsize, ref values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">[length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        [CLSCompliant(false)]
        public static unsafe void PixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 mapsize, [CountAttribute(Parameter = "mapsize")] UInt32* values) => instance.PixelMap(map, mapsize, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">[length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapusv")]
        [CLSCompliant(false)]
        public static void PixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 mapsize, [CountAttribute(Parameter = "mapsize")] Int16[] values) => instance.PixelMap(map, mapsize, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">[length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapusv")]
        [CLSCompliant(false)]
        public static void PixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 mapsize, [CountAttribute(Parameter = "mapsize")] ref Int16 values) => instance.PixelMap(map, mapsize, ref values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">[length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapusv")]
        [CLSCompliant(false)]
        public static unsafe void PixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 mapsize, [CountAttribute(Parameter = "mapsize")] Int16* values) => instance.PixelMap(map, mapsize, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">[length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapusv")]
        [CLSCompliant(false)]
        public static void PixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 mapsize, [CountAttribute(Parameter = "mapsize")] UInt16[] values) => instance.PixelMap(map, mapsize, values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">[length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapusv")]
        [CLSCompliant(false)]
        public static void PixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 mapsize, [CountAttribute(Parameter = "mapsize")] ref UInt16 values) => instance.PixelMap(map, mapsize, ref values);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set up pixel transfer maps
        /// </summary>
        /// <param name="map">
        /// Specifies a symbolic map name. Must be one of the following: PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, or PixelMapAToA.
        /// </param>
        /// <param name="mapsize">
        /// Specifies the size of the map being defined.
        /// </param>
        /// <param name="values">[length: mapsize]
        /// Specifies an array of mapsize values.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelMapusv")]
        [CLSCompliant(false)]
        public static unsafe void PixelMap(OpenToolkit.OpenGL.PixelMap map, Int32 mapsize, [CountAttribute(Parameter = "mapsize")] UInt16* values) => instance.PixelMap(map, mapsize, values);

        /// <summary></summary>
        /// <param name="map"></param>
        /// <param name="size"></param>
        /// <param name="values">[length: size]</param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelMapx")]
        [CLSCompliant(false)]
        public static void PixelMapx(OpenToolkit.OpenGL.PixelMap map, Int32 size, [CountAttribute(Parameter = "size")] Int32[] values) => instance.PixelMapx(map, size, values);

        /// <summary></summary>
        /// <param name="map"></param>
        /// <param name="size"></param>
        /// <param name="values">[length: size]</param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelMapx")]
        [CLSCompliant(false)]
        public static void PixelMapx(OpenToolkit.OpenGL.PixelMap map, Int32 size, [CountAttribute(Parameter = "size")] ref Int32 values) => instance.PixelMapx(map, size, ref values);

        /// <summary></summary>
        /// <param name="map"></param>
        /// <param name="size"></param>
        /// <param name="values">[length: size]</param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelMapx")]
        [CLSCompliant(false)]
        public static unsafe void PixelMapx(OpenToolkit.OpenGL.PixelMap map, Int32 size, [CountAttribute(Parameter = "size")] Int32* values) => instance.PixelMapx(map, size, values);

        /// <summary>[requires: v1.0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: PackSwapBytes, PackLsbFirst, PackRowLength, PackImageHeight, PackSkipPixels, PackSkipRows, PackSkipImages, and PackAlignment. Six more affect the unpacking of pixel data from memory: UnpackSwapBytes, UnpackLsbFirst, UnpackRowLength, UnpackImageHeight, UnpackSkipPixels, UnpackSkipRows, UnpackSkipImages, and UnpackAlignment.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStoref")]
        public static void PixelStore(OpenToolkit.OpenGL.PixelStoreParameter pname, Single param) => instance.PixelStore(pname, param);

        /// <summary>[requires: v1.0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: PackSwapBytes, PackLsbFirst, PackRowLength, PackImageHeight, PackSkipPixels, PackSkipRows, PackSkipImages, and PackAlignment. Six more affect the unpacking of pixel data from memory: UnpackSwapBytes, UnpackLsbFirst, UnpackRowLength, UnpackImageHeight, UnpackSkipPixels, UnpackSkipRows, UnpackSkipImages, and UnpackAlignment.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStorei")]
        public static void PixelStore(OpenToolkit.OpenGL.PixelStoreParameter pname, Int32 param) => instance.PixelStore(pname, param);

        /// <summary></summary>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "OES_fixed_point", Version = "", EntryPoint = "glPixelStorex")]
        public static void PixelStorex(OpenToolkit.OpenGL.PixelStoreParameter pname, Int32 param) => instance.PixelStorex(pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set pixel transfer modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the pixel transfer parameter to be set. Must be one of the following: MapColor, MapStencil, IndexShift, IndexOffset, RedScale, RedBias, GreenScale, GreenBias, BlueScale, BlueBias, AlphaScale, AlphaBias, DepthScale, or DepthBias.  Additionally, if the ARB_imaging extension is supported, the following symbolic names are accepted: PostColorMatrixRedScale, PostColorMatrixGreenScale, PostColorMatrixBlueScale, PostColorMatrixAlphaScale, PostColorMatrixRedBias, PostColorMatrixGreenBias, PostColorMatrixBlueBias, PostColorMatrixAlphaBias, PostConvolutionRedScale, PostConvolutionGreenScale, PostConvolutionBlueScale, PostConvolutionAlphaScale, PostConvolutionRedBias, PostConvolutionGreenBias, PostConvolutionBlueBias, and PostConvolutionAlphaBias.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelTransferf")]
        public static void PixelTransfer(OpenToolkit.OpenGL.PixelTransferParameter pname, Single param) => instance.PixelTransfer(pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set pixel transfer modes
        /// </summary>
        /// <param name="pname">
        /// Specifies the symbolic name of the pixel transfer parameter to be set. Must be one of the following: MapColor, MapStencil, IndexShift, IndexOffset, RedScale, RedBias, GreenScale, GreenBias, BlueScale, BlueBias, AlphaScale, AlphaBias, DepthScale, or DepthBias.  Additionally, if the ARB_imaging extension is supported, the following symbolic names are accepted: PostColorMatrixRedScale, PostColorMatrixGreenScale, PostColorMatrixBlueScale, PostColorMatrixAlphaScale, PostColorMatrixRedBias, PostColorMatrixGreenBias, PostColorMatrixBlueBias, PostColorMatrixAlphaBias, PostConvolutionRedScale, PostConvolutionGreenScale, PostConvolutionBlueScale, PostConvolutionAlphaScale, PostConvolutionRedBias, PostConvolutionGreenBias, PostConvolutionBlueBias, and PostConvolutionAlphaBias.
        /// </param>
        /// <param name="param">
        /// Specifies the value that pname is set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelTransferi")]
        public static void PixelTransfer(OpenToolkit.OpenGL.PixelTransferParameter pname, Int32 param) => instance.PixelTransfer(pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the pixel zoom factors
        /// </summary>
        /// <param name="xfactor">
        /// Specify the  and  zoom factors for pixel write operations.
        /// </param>
        /// <param name="yfactor">
        /// Specify the  and  zoom factors for pixel write operations.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelZoom")]
        public static void PixelZoom(Single xfactor, Single yfactor) => instance.PixelZoom(xfactor, yfactor);

        /// <summary>[requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="param">
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterf")]
        public static void PointParameter(OpenToolkit.OpenGL.PointParameterName pname, Single param) => instance.PointParameter(pname, param);

        /// <summary>[requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        [CLSCompliant(false)]
        public static void PointParameter(OpenToolkit.OpenGL.PointParameterName pname, [CountAttribute(Computed = "pname")] Single[] @params) => instance.PointParameter(pname, @params);

        /// <summary>[requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void PointParameter(OpenToolkit.OpenGL.PointParameterName pname, [CountAttribute(Computed = "pname")] Single* @params) => instance.PointParameter(pname, @params);

        /// <summary>[requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="param">
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteri")]
        public static void PointParameter(OpenToolkit.OpenGL.PointParameterName pname, Int32 param) => instance.PointParameter(pname, param);

        /// <summary>[requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        [CLSCompliant(false)]
        public static void PointParameter(OpenToolkit.OpenGL.PointParameterName pname, [CountAttribute(Computed = "pname")] Int32[] @params) => instance.PointParameter(pname, @params);

        /// <summary>[requires: v1.4]
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void PointParameter(OpenToolkit.OpenGL.PointParameterName pname, [CountAttribute(Computed = "pname")] Int32* @params) => instance.PointParameter(pname, @params);

        /// <summary>[requires: v1.0]
        /// Specify the diameter of rasterized points
        /// </summary>
        /// <param name="size">
        /// Specifies the diameter of rasterized points. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPointSize")]
        public static void PointSize(Single size) => instance.PointSize(size);

        /// <summary>[requires: v1.0]
        /// Select a polygon rasterization mode
        /// </summary>
        /// <param name="face">
        /// Specifies the polygons that mode applies to. Must be FrontAndBack for front- and back-facing polygons.
        /// </param>
        /// <param name="mode">
        /// Specifies how polygons will be rasterized. Accepted values are Point, Line, and Fill. The initial value is Fill for both front- and back-facing polygons.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPolygonMode")]
        public static void PolygonMode(OpenToolkit.OpenGL.MaterialFace face, OpenToolkit.OpenGL.PolygonMode mode) => instance.PolygonMode(face, mode);

        /// <summary>[requires: v1.1]
        /// Set the scale and units used to calculate depth values
        /// </summary>
        /// <param name="factor">
        /// Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
        /// </param>
        /// <param name="units">
        /// Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glPolygonOffset")]
        public static void PolygonOffset(Single factor, Single units) => instance.PolygonOffset(factor, units);

        /// <summary>[requires: v4.6 or ARB_polygon_offset_clamp|VERSION_4_6]</summary>
        /// <param name="factor"></param>
        /// <param name="units"></param>
        /// <param name="clamp"></param>
        [AutoGenerated(Category = "ARB_polygon_offset_clamp|VERSION_4_6", Version = "4.6", EntryPoint = "glPolygonOffsetClamp")]
        public static void PolygonOffsetClamp(Single factor, Single units, Single clamp) => instance.PolygonOffsetClamp(factor, units, clamp);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the polygon stippling pattern
        /// </summary>
        /// <param name="mask">[length: COMPSIZE()]
        /// Specifies a pointer to a 32  times  32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPolygonStipple")]
        [CLSCompliant(false)]
        public static void PolygonStipple([CountAttribute(Computed = "")] Byte[] mask) => instance.PolygonStipple(mask);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the polygon stippling pattern
        /// </summary>
        /// <param name="mask">[length: COMPSIZE()]
        /// Specifies a pointer to a 32  times  32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPolygonStipple")]
        [CLSCompliant(false)]
        public static void PolygonStipple([CountAttribute(Computed = "")] ref Byte mask) => instance.PolygonStipple(ref mask);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the polygon stippling pattern
        /// </summary>
        /// <param name="mask">[length: COMPSIZE()]
        /// Specifies a pointer to a 32  times  32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPolygonStipple")]
        [CLSCompliant(false)]
        public static unsafe void PolygonStipple([CountAttribute(Computed = "")] Byte* mask) => instance.PolygonStipple(mask);

        /// <summary>[requires: v1.0][deprecated: v3.2]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPopAttrib")]
        public static void PopAttrib() => instance.PopAttrib();

        /// <summary>[requires: v1.1][deprecated: v3.2]</summary>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glPopClientAttrib")]
        public static void PopClientAttrib() => instance.PopClientAttrib();

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Pop the active debug group
        /// </summary>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glPopDebugGroup")]
        public static void PopDebugGroup() => instance.PopDebugGroup();

        /// <summary>[requires: v1.0][deprecated: v3.2]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPopMatrix")]
        public static void PopMatrix() => instance.PopMatrix();

        /// <summary>[requires: v1.0][deprecated: v3.2]</summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPopName")]
        public static void PopName() => instance.PopName();

        /// <summary>[requires: v3.1]
        /// Specify the primitive restart index
        /// </summary>
        /// <param name="index">
        /// Specifies the value to be interpreted as the primitive restart index.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glPrimitiveRestartIndex")]
        [CLSCompliant(false)]
        public static void PrimitiveRestartIndex(Int32 index) => instance.PrimitiveRestartIndex(index);

        /// <summary>[requires: v3.1]
        /// Specify the primitive restart index
        /// </summary>
        /// <param name="index">
        /// Specifies the value to be interpreted as the primitive restart index.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glPrimitiveRestartIndex")]
        [CLSCompliant(false)]
        public static void PrimitiveRestartIndex(UInt32 index) => instance.PrimitiveRestartIndex(index);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Set texture residence priority
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be prioritized.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array containing the names of the textures to be prioritized.
        /// </param>
        /// <param name="priorities">[length: n]
        /// Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        [CLSCompliant(false)]
        public static void PrioritizeTextures(Int32 n, [CountAttribute(Parameter = "n")] Int32[] textures, [CountAttribute(Parameter = "n")] Single[] priorities) => instance.PrioritizeTextures(n, textures, priorities);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Set texture residence priority
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be prioritized.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array containing the names of the textures to be prioritized.
        /// </param>
        /// <param name="priorities">[length: n]
        /// Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        [CLSCompliant(false)]
        public static void PrioritizeTextures(Int32 n, [CountAttribute(Parameter = "n")] ref Int32 textures, [CountAttribute(Parameter = "n")] ref Single priorities) => instance.PrioritizeTextures(n, ref textures, ref priorities);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Set texture residence priority
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be prioritized.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array containing the names of the textures to be prioritized.
        /// </param>
        /// <param name="priorities">[length: n]
        /// Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        [CLSCompliant(false)]
        public static unsafe void PrioritizeTextures(Int32 n, [CountAttribute(Parameter = "n")] Int32* textures, [CountAttribute(Parameter = "n")] Single* priorities) => instance.PrioritizeTextures(n, textures, priorities);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Set texture residence priority
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be prioritized.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array containing the names of the textures to be prioritized.
        /// </param>
        /// <param name="priorities">[length: n]
        /// Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        [CLSCompliant(false)]
        public static void PrioritizeTextures(Int32 n, [CountAttribute(Parameter = "n")] UInt32[] textures, [CountAttribute(Parameter = "n")] Single[] priorities) => instance.PrioritizeTextures(n, textures, priorities);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Set texture residence priority
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be prioritized.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array containing the names of the textures to be prioritized.
        /// </param>
        /// <param name="priorities">[length: n]
        /// Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        [CLSCompliant(false)]
        public static void PrioritizeTextures(Int32 n, [CountAttribute(Parameter = "n")] ref UInt32 textures, [CountAttribute(Parameter = "n")] ref Single priorities) => instance.PrioritizeTextures(n, ref textures, ref priorities);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Set texture residence priority
        /// </summary>
        /// <param name="n">
        /// Specifies the number of textures to be prioritized.
        /// </param>
        /// <param name="textures">[length: n]
        /// Specifies an array containing the names of the textures to be prioritized.
        /// </param>
        /// <param name="priorities">[length: n]
        /// Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        [CLSCompliant(false)]
        public static unsafe void PrioritizeTextures(Int32 n, [CountAttribute(Parameter = "n")] UInt32* textures, [CountAttribute(Parameter = "n")] Single* priorities) => instance.PrioritizeTextures(n, textures, priorities);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary(Int32 program, OpenToolkit.OpenGL.BinaryFormat binaryFormat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) => instance.ProgramBinary(program, binaryFormat, binary, length);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(Int32 program, OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T2[] binary, Int32 length)
            where T2 : struct
         => instance.ProgramBinary<T2>(program, binaryFormat, binary, length);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(Int32 program, OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T2[,] binary, Int32 length)
            where T2 : struct
         => instance.ProgramBinary<T2>(program, binaryFormat, binary, length);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(Int32 program, OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T2[,,] binary, Int32 length)
            where T2 : struct
         => instance.ProgramBinary<T2>(program, binaryFormat, binary, length);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(Int32 program, OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T2 binary, Int32 length)
            where T2 : struct
         => instance.ProgramBinary<T2>(program, binaryFormat, ref binary, length);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary(UInt32 program, OpenToolkit.OpenGL.BinaryFormat binaryFormat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) => instance.ProgramBinary(program, binaryFormat, binary, length);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(UInt32 program, OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T2[] binary, Int32 length)
            where T2 : struct
         => instance.ProgramBinary<T2>(program, binaryFormat, binary, length);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(UInt32 program, OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T2[,] binary, Int32 length)
            where T2 : struct
         => instance.ProgramBinary<T2>(program, binaryFormat, binary, length);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(UInt32 program, OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T2[,,] binary, Int32 length)
            where T2 : struct
         => instance.ProgramBinary<T2>(program, binaryFormat, binary, length);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]
        /// Load a program object with a program binary
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object into which to load a program binary.
        /// </param>
        /// <param name="binaryFormat">
        /// Specifies the format of the binary data in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address an array containing the binary to be loaded into program.
        /// </param>
        /// <param name="length">
        /// Specifies the number of bytes contained in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramBinary")]
        [CLSCompliant(false)]
        public static void ProgramBinary<T2>(UInt32 program, OpenToolkit.OpenGL.BinaryFormat binaryFormat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T2 binary, Int32 length)
            where T2 : struct
         => instance.ProgramBinary<T2>(program, binaryFormat, ref binary, length);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|ARB_separate_shader_objects|VERSION_4_1|VERSION_4_1]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to modify.
        /// </param>
        /// <param name="value">
        /// Specifies the new value of the parameter specified by pname for program.
        /// </param>
        [Obsolete("Use ProgramParameterName overload instead")]
        [AutoGenerated(Category = "ARB_get_program_binary|ARB_separate_shader_objects|VERSION_4_1|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramParameteri")]
        [CLSCompliant(false)]
        public static void ProgramParameter(Int32 program, OpenToolkit.OpenGL.AssemblyProgramParameterArb pname, Int32 value) => instance.ProgramParameter(program, pname, value);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|ARB_separate_shader_objects|VERSION_4_1|VERSION_4_1]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to modify.
        /// </param>
        /// <param name="value">
        /// Specifies the new value of the parameter specified by pname for program.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|ARB_separate_shader_objects|VERSION_4_1|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramParameteri")]
        [CLSCompliant(false)]
        public static void ProgramParameter(Int32 program, OpenToolkit.OpenGL.ProgramParameterName pname, Int32 value) => instance.ProgramParameter(program, pname, value);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|ARB_separate_shader_objects|VERSION_4_1|VERSION_4_1]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to modify.
        /// </param>
        /// <param name="value">
        /// Specifies the new value of the parameter specified by pname for program.
        /// </param>
        [Obsolete("Use ProgramParameterName overload instead")]
        [AutoGenerated(Category = "ARB_get_program_binary|ARB_separate_shader_objects|VERSION_4_1|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramParameteri")]
        [CLSCompliant(false)]
        public static void ProgramParameter(Int32 program, OpenToolkit.OpenGL.Version32 pname, Int32 value) => instance.ProgramParameter(program, pname, value);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|ARB_separate_shader_objects|VERSION_4_1|VERSION_4_1]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to modify.
        /// </param>
        /// <param name="value">
        /// Specifies the new value of the parameter specified by pname for program.
        /// </param>
        [Obsolete("Use ProgramParameterName overload instead")]
        [AutoGenerated(Category = "ARB_get_program_binary|ARB_separate_shader_objects|VERSION_4_1|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramParameteri")]
        [CLSCompliant(false)]
        public static void ProgramParameter(UInt32 program, OpenToolkit.OpenGL.AssemblyProgramParameterArb pname, Int32 value) => instance.ProgramParameter(program, pname, value);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|ARB_separate_shader_objects|VERSION_4_1|VERSION_4_1]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to modify.
        /// </param>
        /// <param name="value">
        /// Specifies the new value of the parameter specified by pname for program.
        /// </param>
        [AutoGenerated(Category = "ARB_get_program_binary|ARB_separate_shader_objects|VERSION_4_1|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramParameteri")]
        [CLSCompliant(false)]
        public static void ProgramParameter(UInt32 program, OpenToolkit.OpenGL.ProgramParameterName pname, Int32 value) => instance.ProgramParameter(program, pname, value);

        /// <summary>[requires: v4.1 or ARB_get_program_binary|ARB_separate_shader_objects|VERSION_4_1|VERSION_4_1]
        /// Specify a parameter for a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the name of a program object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the name of the parameter to modify.
        /// </param>
        /// <param name="value">
        /// Specifies the new value of the parameter specified by pname for program.
        /// </param>
        [Obsolete("Use ProgramParameterName overload instead")]
        [AutoGenerated(Category = "ARB_get_program_binary|ARB_separate_shader_objects|VERSION_4_1|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramParameteri")]
        [CLSCompliant(false)]
        public static void ProgramParameter(UInt32 program, OpenToolkit.OpenGL.Version32 pname, Int32 value) => instance.ProgramParameter(program, pname, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1d")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(Int32 program, Int32 location, Double v0) => instance.ProgramUniform1(program, location, v0);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1d")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(UInt32 program, Int32 location, Double v0) => instance.ProgramUniform1(program, location, v0);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Double[] value) => instance.ProgramUniform1(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Double value) => instance.ProgramUniform1(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Double* value) => instance.ProgramUniform1(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Double[] value) => instance.ProgramUniform1(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Double value) => instance.ProgramUniform1(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Double* value) => instance.ProgramUniform1(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1f")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(Int32 program, Int32 location, Single v0) => instance.ProgramUniform1(program, location, v0);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1f")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(UInt32 program, Int32 location, Single v0) => instance.ProgramUniform1(program, location, v0);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Single[] value) => instance.ProgramUniform1(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Single value) => instance.ProgramUniform1(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Single* value) => instance.ProgramUniform1(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Single[] value) => instance.ProgramUniform1(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Single value) => instance.ProgramUniform1(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Single* value) => instance.ProgramUniform1(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1i")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(Int32 program, Int32 location, Int32 v0) => instance.ProgramUniform1(program, location, v0);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1i")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(UInt32 program, Int32 location, Int32 v0) => instance.ProgramUniform1(program, location, v0);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int32[] value) => instance.ProgramUniform1(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Int32 value) => instance.ProgramUniform1(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int32* value) => instance.ProgramUniform1(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int32[] value) => instance.ProgramUniform1(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref Int32 value) => instance.ProgramUniform1(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] Int32* value) => instance.ProgramUniform1(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1ui")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(UInt32 program, Int32 location, UInt32 v0) => instance.ProgramUniform1(program, location, v0);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1uiv")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt32[] value) => instance.ProgramUniform1(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1uiv")]
        [CLSCompliant(false)]
        public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 value) => instance.ProgramUniform1(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform1uiv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count")] UInt32* value) => instance.ProgramUniform1(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2d")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(Int32 program, Int32 location, Double v0, Double v1) => instance.ProgramUniform2(program, location, v0, v1);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2d")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(UInt32 program, Int32 location, Double v0, Double v1) => instance.ProgramUniform2(program, location, v0, v1);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Double[] value) => instance.ProgramUniform2(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref Double value) => instance.ProgramUniform2(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Double* value) => instance.ProgramUniform2(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Double[] value) => instance.ProgramUniform2(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref Double value) => instance.ProgramUniform2(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Double* value) => instance.ProgramUniform2(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2f")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(Int32 program, Int32 location, Single v0, Single v1) => instance.ProgramUniform2(program, location, v0, v1);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2f")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(UInt32 program, Int32 location, Single v0, Single v1) => instance.ProgramUniform2(program, location, v0, v1);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single[] value) => instance.ProgramUniform2(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref Single value) => instance.ProgramUniform2(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single* value) => instance.ProgramUniform2(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single[] value) => instance.ProgramUniform2(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref Single value) => instance.ProgramUniform2(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single* value) => instance.ProgramUniform2(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2i")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(Int32 program, Int32 location, Int32 v0, Int32 v1) => instance.ProgramUniform2(program, location, v0, v1);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2i")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(UInt32 program, Int32 location, Int32 v0, Int32 v1) => instance.ProgramUniform2(program, location, v0, v1);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2iv")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32[] value) => instance.ProgramUniform2(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2iv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32* value) => instance.ProgramUniform2(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2iv")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32[] value) => instance.ProgramUniform2(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2iv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32* value) => instance.ProgramUniform2(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2ui")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(UInt32 program, Int32 location, UInt32 v0, UInt32 v1) => instance.ProgramUniform2(program, location, v0, v1);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2uiv")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt32[] value) => instance.ProgramUniform2(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2uiv")]
        [CLSCompliant(false)]
        public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref UInt32 value) => instance.ProgramUniform2(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform2uiv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt32* value) => instance.ProgramUniform2(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3d")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(Int32 program, Int32 location, Double v0, Double v1, Double v2) => instance.ProgramUniform3(program, location, v0, v1, v2);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3d")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(UInt32 program, Int32 location, Double v0, Double v1, Double v2) => instance.ProgramUniform3(program, location, v0, v1, v2);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Double[] value) => instance.ProgramUniform3(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Double value) => instance.ProgramUniform3(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Double* value) => instance.ProgramUniform3(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Double[] value) => instance.ProgramUniform3(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Double value) => instance.ProgramUniform3(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Double* value) => instance.ProgramUniform3(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3f")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(Int32 program, Int32 location, Single v0, Single v1, Single v2) => instance.ProgramUniform3(program, location, v0, v1, v2);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3f")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(UInt32 program, Int32 location, Single v0, Single v1, Single v2) => instance.ProgramUniform3(program, location, v0, v1, v2);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single[] value) => instance.ProgramUniform3(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Single value) => instance.ProgramUniform3(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single* value) => instance.ProgramUniform3(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single[] value) => instance.ProgramUniform3(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Single value) => instance.ProgramUniform3(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single* value) => instance.ProgramUniform3(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3i")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2) => instance.ProgramUniform3(program, location, v0, v1, v2);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3i")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2) => instance.ProgramUniform3(program, location, v0, v1, v2);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32[] value) => instance.ProgramUniform3(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Int32 value) => instance.ProgramUniform3(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32* value) => instance.ProgramUniform3(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32[] value) => instance.ProgramUniform3(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Int32 value) => instance.ProgramUniform3(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32* value) => instance.ProgramUniform3(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3ui")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2) => instance.ProgramUniform3(program, location, v0, v1, v2);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3uiv")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt32[] value) => instance.ProgramUniform3(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3uiv")]
        [CLSCompliant(false)]
        public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref UInt32 value) => instance.ProgramUniform3(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform3uiv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt32* value) => instance.ProgramUniform3(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4d")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(Int32 program, Int32 location, Double v0, Double v1, Double v2, Double v3) => instance.ProgramUniform4(program, location, v0, v1, v2, v3);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4d")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(UInt32 program, Int32 location, Double v0, Double v1, Double v2, Double v3) => instance.ProgramUniform4(program, location, v0, v1, v2, v3);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Double[] value) => instance.ProgramUniform4(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Double value) => instance.ProgramUniform4(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Double* value) => instance.ProgramUniform4(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Double[] value) => instance.ProgramUniform4(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Double value) => instance.ProgramUniform4(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Double* value) => instance.ProgramUniform4(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4f")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(Int32 program, Int32 location, Single v0, Single v1, Single v2, Single v3) => instance.ProgramUniform4(program, location, v0, v1, v2, v3);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4f")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(UInt32 program, Int32 location, Single v0, Single v1, Single v2, Single v3) => instance.ProgramUniform4(program, location, v0, v1, v2, v3);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single[] value) => instance.ProgramUniform4(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Single value) => instance.ProgramUniform4(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single* value) => instance.ProgramUniform4(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single[] value) => instance.ProgramUniform4(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Single value) => instance.ProgramUniform4(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single* value) => instance.ProgramUniform4(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4i")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3) => instance.ProgramUniform4(program, location, v0, v1, v2, v3);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4i")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3) => instance.ProgramUniform4(program, location, v0, v1, v2, v3);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32[] value) => instance.ProgramUniform4(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Int32 value) => instance.ProgramUniform4(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32* value) => instance.ProgramUniform4(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32[] value) => instance.ProgramUniform4(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Int32 value) => instance.ProgramUniform4(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32* value) => instance.ProgramUniform4(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4ui")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3) => instance.ProgramUniform4(program, location, v0, v1, v2, v3);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4uiv")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt32[] value) => instance.ProgramUniform4(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4uiv")]
        [CLSCompliant(false)]
        public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref UInt32 value) => instance.ProgramUniform4(program, location, count, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Specify the value of a uniform variable for a specified program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program containing the uniform variable to be modified.
        /// </param>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniform4uiv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt32* value) => instance.ProgramUniform4(program, location, count, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Double[] value) => instance.ProgramUniformMatrix2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] ref Double value) => instance.ProgramUniformMatrix2(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Double* value) => instance.ProgramUniformMatrix2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Double[] value) => instance.ProgramUniformMatrix2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] ref Double value) => instance.ProgramUniformMatrix2(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Double* value) => instance.ProgramUniformMatrix2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single[] value) => instance.ProgramUniformMatrix2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] ref Single value) => instance.ProgramUniformMatrix2(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single* value) => instance.ProgramUniformMatrix2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single[] value) => instance.ProgramUniformMatrix2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] ref Single value) => instance.ProgramUniformMatrix2(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single* value) => instance.ProgramUniformMatrix2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double[] value) => instance.ProgramUniformMatrix2x3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Double value) => instance.ProgramUniformMatrix2x3(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double* value) => instance.ProgramUniformMatrix2x3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double[] value) => instance.ProgramUniformMatrix2x3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Double value) => instance.ProgramUniformMatrix2x3(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double* value) => instance.ProgramUniformMatrix2x3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single[] value) => instance.ProgramUniformMatrix2x3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Single value) => instance.ProgramUniformMatrix2x3(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value) => instance.ProgramUniformMatrix2x3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single[] value) => instance.ProgramUniformMatrix2x3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Single value) => instance.ProgramUniformMatrix2x3(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value) => instance.ProgramUniformMatrix2x3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double[] value) => instance.ProgramUniformMatrix2x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Double value) => instance.ProgramUniformMatrix2x4(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double* value) => instance.ProgramUniformMatrix2x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double[] value) => instance.ProgramUniformMatrix2x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Double value) => instance.ProgramUniformMatrix2x4(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double* value) => instance.ProgramUniformMatrix2x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single[] value) => instance.ProgramUniformMatrix2x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Single value) => instance.ProgramUniformMatrix2x4(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value) => instance.ProgramUniformMatrix2x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single[] value) => instance.ProgramUniformMatrix2x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Single value) => instance.ProgramUniformMatrix2x4(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value) => instance.ProgramUniformMatrix2x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Double[] value) => instance.ProgramUniformMatrix3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] ref Double value) => instance.ProgramUniformMatrix3(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Double* value) => instance.ProgramUniformMatrix3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Double[] value) => instance.ProgramUniformMatrix3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] ref Double value) => instance.ProgramUniformMatrix3(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Double* value) => instance.ProgramUniformMatrix3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single[] value) => instance.ProgramUniformMatrix3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] ref Single value) => instance.ProgramUniformMatrix3(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single* value) => instance.ProgramUniformMatrix3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single[] value) => instance.ProgramUniformMatrix3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] ref Single value) => instance.ProgramUniformMatrix3(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single* value) => instance.ProgramUniformMatrix3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double[] value) => instance.ProgramUniformMatrix3x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Double value) => instance.ProgramUniformMatrix3x2(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double* value) => instance.ProgramUniformMatrix3x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double[] value) => instance.ProgramUniformMatrix3x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Double value) => instance.ProgramUniformMatrix3x2(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double* value) => instance.ProgramUniformMatrix3x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single[] value) => instance.ProgramUniformMatrix3x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Single value) => instance.ProgramUniformMatrix3x2(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value) => instance.ProgramUniformMatrix3x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single[] value) => instance.ProgramUniformMatrix3x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Single value) => instance.ProgramUniformMatrix3x2(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value) => instance.ProgramUniformMatrix3x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double[] value) => instance.ProgramUniformMatrix3x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Double value) => instance.ProgramUniformMatrix3x4(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double* value) => instance.ProgramUniformMatrix3x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double[] value) => instance.ProgramUniformMatrix3x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Double value) => instance.ProgramUniformMatrix3x4(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double* value) => instance.ProgramUniformMatrix3x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single[] value) => instance.ProgramUniformMatrix3x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Single value) => instance.ProgramUniformMatrix3x4(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value) => instance.ProgramUniformMatrix3x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single[] value) => instance.ProgramUniformMatrix3x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Single value) => instance.ProgramUniformMatrix3x4(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value) => instance.ProgramUniformMatrix3x4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Double[] value) => instance.ProgramUniformMatrix4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] ref Double value) => instance.ProgramUniformMatrix4(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Double* value) => instance.ProgramUniformMatrix4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Double[] value) => instance.ProgramUniformMatrix4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] ref Double value) => instance.ProgramUniformMatrix4(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Double* value) => instance.ProgramUniformMatrix4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single[] value) => instance.ProgramUniformMatrix4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] ref Single value) => instance.ProgramUniformMatrix4(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single* value) => instance.ProgramUniformMatrix4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single[] value) => instance.ProgramUniformMatrix4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] ref Single value) => instance.ProgramUniformMatrix4(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single* value) => instance.ProgramUniformMatrix4(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double[] value) => instance.ProgramUniformMatrix4x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Double value) => instance.ProgramUniformMatrix4x2(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double* value) => instance.ProgramUniformMatrix4x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double[] value) => instance.ProgramUniformMatrix4x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Double value) => instance.ProgramUniformMatrix4x2(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double* value) => instance.ProgramUniformMatrix4x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single[] value) => instance.ProgramUniformMatrix4x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Single value) => instance.ProgramUniformMatrix4x2(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value) => instance.ProgramUniformMatrix4x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single[] value) => instance.ProgramUniformMatrix4x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Single value) => instance.ProgramUniformMatrix4x2(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value) => instance.ProgramUniformMatrix4x2(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double[] value) => instance.ProgramUniformMatrix4x3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Double value) => instance.ProgramUniformMatrix4x3(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double* value) => instance.ProgramUniformMatrix4x3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double[] value) => instance.ProgramUniformMatrix4x3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Double value) => instance.ProgramUniformMatrix4x3(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double* value) => instance.ProgramUniformMatrix4x3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single[] value) => instance.ProgramUniformMatrix4x3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Single value) => instance.ProgramUniformMatrix4x3(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value) => instance.ProgramUniformMatrix4x3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single[] value) => instance.ProgramUniformMatrix4x3(program, location, count, transpose, value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        [CLSCompliant(false)]
        public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Single value) => instance.ProgramUniformMatrix4x3(program, location, count, transpose, ref value);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]</summary>
        /// <param name="program"></param>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
        [CLSCompliant(false)]
        public static unsafe void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value) => instance.ProgramUniformMatrix4x3(program, location, count, transpose, value);

        /// <summary>[requires: v3.2 or ARB_provoking_vertex|VERSION_3_2]
        /// Specifiy the vertex to be used as the source of data for flat shaded varyings
        /// </summary>
        /// <param name="mode">
        /// Specifies the vertex to be used as the source of data for flat shaded varyings.
        /// </param>
        [AutoGenerated(Category = "ARB_provoking_vertex|VERSION_3_2", Version = "3.2", EntryPoint = "glProvokingVertex")]
        public static void ProvokingVertex(OpenToolkit.OpenGL.ProvokingVertexMode mode) => instance.ProvokingVertex(mode);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Push and pop the server attribute stack
        /// </summary>
        /// <param name="mask">
        /// Specifies a mask that indicates which attributes to save. Values for mask are listed below.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPushAttrib")]
        public static void PushAttrib(OpenToolkit.OpenGL.AttribMask mask) => instance.PushAttrib(mask);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Push and pop the client attribute stack
        /// </summary>
        /// <param name="mask">
        /// Specifies a mask that indicates which attributes to save.  Values for mask are listed below.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glPushClientAttrib")]
        public static void PushClientAttrib(OpenToolkit.OpenGL.ClientAttribMask mask) => instance.PushClientAttrib(mask);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// The source of the debug message.
        /// </param>
        /// <param name="id">
        /// The identifier of the message.
        /// </param>
        /// <param name="length">
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">[length: COMPSIZE(message,length)]
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glPushDebugGroup")]
        [CLSCompliant(false)]
        public static void PushDebugGroup(OpenToolkit.OpenGL.DebugSourceExternal source, Int32 id, Int32 length, [CountAttribute(Computed = "message,length")] String message) => instance.PushDebugGroup(source, id, length, message);

        /// <summary>[requires: v4.3 or KHR_debug|VERSION_4_3]
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source">
        /// The source of the debug message.
        /// </param>
        /// <param name="id">
        /// The identifier of the message.
        /// </param>
        /// <param name="length">
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">[length: COMPSIZE(message,length)]
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [AutoGenerated(Category = "KHR_debug|VERSION_4_3", Version = "4.3", EntryPoint = "glPushDebugGroup")]
        [CLSCompliant(false)]
        public static void PushDebugGroup(OpenToolkit.OpenGL.DebugSourceExternal source, UInt32 id, Int32 length, [CountAttribute(Computed = "message,length")] String message) => instance.PushDebugGroup(source, id, length, message);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Push and pop the current matrix stack
        /// </summary>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPushMatrix")]
        public static void PushMatrix() => instance.PushMatrix();

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Push and pop the name stack
        /// </summary>
        /// <param name="name">
        /// Specifies a name that will be pushed onto the name stack.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPushName")]
        [CLSCompliant(false)]
        public static void PushName(Int32 name) => instance.PushName(name);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Push and pop the name stack
        /// </summary>
        /// <param name="name">
        /// Specifies a name that will be pushed onto the name stack.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPushName")]
        [CLSCompliant(false)]
        public static void PushName(UInt32 name) => instance.PushName(name);

        /// <summary>[requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
        /// </summary>
        /// <param name="id">
        /// Specify the name of a query object into which to record the GL time.
        /// </param>
        /// <param name="target">
        /// Specify the counter to query. target must be Timestamp.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glQueryCounter")]
        [CLSCompliant(false)]
        public static void QueryCounter(Int32 id, OpenToolkit.OpenGL.QueryCounterTarget target) => instance.QueryCounter(id, target);

        /// <summary>[requires: v3.3 or ARB_timer_query|VERSION_3_3]
        /// Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
        /// </summary>
        /// <param name="id">
        /// Specify the name of a query object into which to record the GL time.
        /// </param>
        /// <param name="target">
        /// Specify the counter to query. target must be Timestamp.
        /// </param>
        [AutoGenerated(Category = "ARB_timer_query|VERSION_3_3", Version = "3.3", EntryPoint = "glQueryCounter")]
        [CLSCompliant(false)]
        public static void QueryCounter(UInt32 id, OpenToolkit.OpenGL.QueryCounterTarget target) => instance.QueryCounter(id, target);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2d")]
        public static void RasterPos2(Double x, Double y) => instance.RasterPos2(x, y);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2dv")]
        [CLSCompliant(false)]
        public static void RasterPos2([CountAttribute(Count = 2)] Double[] v) => instance.RasterPos2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2dv")]
        [CLSCompliant(false)]
        public static void RasterPos2([CountAttribute(Count = 2)] ref Double v) => instance.RasterPos2(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2dv")]
        [CLSCompliant(false)]
        public static unsafe void RasterPos2([CountAttribute(Count = 2)] Double* v) => instance.RasterPos2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2f")]
        public static void RasterPos2(Single x, Single y) => instance.RasterPos2(x, y);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2fv")]
        [CLSCompliant(false)]
        public static void RasterPos2([CountAttribute(Count = 2)] Single[] v) => instance.RasterPos2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2fv")]
        [CLSCompliant(false)]
        public static void RasterPos2([CountAttribute(Count = 2)] ref Single v) => instance.RasterPos2(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2fv")]
        [CLSCompliant(false)]
        public static unsafe void RasterPos2([CountAttribute(Count = 2)] Single* v) => instance.RasterPos2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2i")]
        public static void RasterPos2(Int32 x, Int32 y) => instance.RasterPos2(x, y);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2iv")]
        [CLSCompliant(false)]
        public static void RasterPos2([CountAttribute(Count = 2)] Int32[] v) => instance.RasterPos2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2iv")]
        [CLSCompliant(false)]
        public static void RasterPos2([CountAttribute(Count = 2)] ref Int32 v) => instance.RasterPos2(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2iv")]
        [CLSCompliant(false)]
        public static unsafe void RasterPos2([CountAttribute(Count = 2)] Int32* v) => instance.RasterPos2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2s")]
        public static void RasterPos2(Int16 x, Int16 y) => instance.RasterPos2(x, y);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2sv")]
        [CLSCompliant(false)]
        public static void RasterPos2([CountAttribute(Count = 2)] Int16[] v) => instance.RasterPos2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2sv")]
        [CLSCompliant(false)]
        public static void RasterPos2([CountAttribute(Count = 2)] ref Int16 v) => instance.RasterPos2(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos2sv")]
        [CLSCompliant(false)]
        public static unsafe void RasterPos2([CountAttribute(Count = 2)] Int16* v) => instance.RasterPos2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3d")]
        public static void RasterPos3(Double x, Double y, Double z) => instance.RasterPos3(x, y, z);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3dv")]
        [CLSCompliant(false)]
        public static void RasterPos3([CountAttribute(Count = 3)] Double[] v) => instance.RasterPos3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3dv")]
        [CLSCompliant(false)]
        public static void RasterPos3([CountAttribute(Count = 3)] ref Double v) => instance.RasterPos3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3dv")]
        [CLSCompliant(false)]
        public static unsafe void RasterPos3([CountAttribute(Count = 3)] Double* v) => instance.RasterPos3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3f")]
        public static void RasterPos3(Single x, Single y, Single z) => instance.RasterPos3(x, y, z);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3fv")]
        [CLSCompliant(false)]
        public static void RasterPos3([CountAttribute(Count = 3)] Single[] v) => instance.RasterPos3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3fv")]
        [CLSCompliant(false)]
        public static void RasterPos3([CountAttribute(Count = 3)] ref Single v) => instance.RasterPos3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3fv")]
        [CLSCompliant(false)]
        public static unsafe void RasterPos3([CountAttribute(Count = 3)] Single* v) => instance.RasterPos3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3i")]
        public static void RasterPos3(Int32 x, Int32 y, Int32 z) => instance.RasterPos3(x, y, z);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3iv")]
        [CLSCompliant(false)]
        public static void RasterPos3([CountAttribute(Count = 3)] Int32[] v) => instance.RasterPos3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3iv")]
        [CLSCompliant(false)]
        public static void RasterPos3([CountAttribute(Count = 3)] ref Int32 v) => instance.RasterPos3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3iv")]
        [CLSCompliant(false)]
        public static unsafe void RasterPos3([CountAttribute(Count = 3)] Int32* v) => instance.RasterPos3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3s")]
        public static void RasterPos3(Int16 x, Int16 y, Int16 z) => instance.RasterPos3(x, y, z);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3sv")]
        [CLSCompliant(false)]
        public static void RasterPos3([CountAttribute(Count = 3)] Int16[] v) => instance.RasterPos3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3sv")]
        [CLSCompliant(false)]
        public static void RasterPos3([CountAttribute(Count = 3)] ref Int16 v) => instance.RasterPos3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos3sv")]
        [CLSCompliant(false)]
        public static unsafe void RasterPos3([CountAttribute(Count = 3)] Int16* v) => instance.RasterPos3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="w">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4d")]
        public static void RasterPos4(Double x, Double y, Double z, Double w) => instance.RasterPos4(x, y, z, w);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4dv")]
        [CLSCompliant(false)]
        public static void RasterPos4([CountAttribute(Count = 4)] Double[] v) => instance.RasterPos4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4dv")]
        [CLSCompliant(false)]
        public static void RasterPos4([CountAttribute(Count = 4)] ref Double v) => instance.RasterPos4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4dv")]
        [CLSCompliant(false)]
        public static unsafe void RasterPos4([CountAttribute(Count = 4)] Double* v) => instance.RasterPos4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="w">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4f")]
        public static void RasterPos4(Single x, Single y, Single z, Single w) => instance.RasterPos4(x, y, z, w);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4fv")]
        [CLSCompliant(false)]
        public static void RasterPos4([CountAttribute(Count = 4)] Single[] v) => instance.RasterPos4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4fv")]
        [CLSCompliant(false)]
        public static void RasterPos4([CountAttribute(Count = 4)] ref Single v) => instance.RasterPos4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4fv")]
        [CLSCompliant(false)]
        public static unsafe void RasterPos4([CountAttribute(Count = 4)] Single* v) => instance.RasterPos4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="w">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4i")]
        public static void RasterPos4(Int32 x, Int32 y, Int32 z, Int32 w) => instance.RasterPos4(x, y, z, w);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4iv")]
        [CLSCompliant(false)]
        public static void RasterPos4([CountAttribute(Count = 4)] Int32[] v) => instance.RasterPos4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4iv")]
        [CLSCompliant(false)]
        public static void RasterPos4([CountAttribute(Count = 4)] ref Int32 v) => instance.RasterPos4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4iv")]
        [CLSCompliant(false)]
        public static unsafe void RasterPos4([CountAttribute(Count = 4)] Int32* v) => instance.RasterPos4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        /// <param name="w">
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4s")]
        public static void RasterPos4(Int16 x, Int16 y, Int16 z, Int16 w) => instance.RasterPos4(x, y, z, w);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4sv")]
        [CLSCompliant(false)]
        public static void RasterPos4([CountAttribute(Count = 4)] Int16[] v) => instance.RasterPos4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4sv")]
        [CLSCompliant(false)]
        public static void RasterPos4([CountAttribute(Count = 4)] ref Int16 v) => instance.RasterPos4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify the raster position for pixel operations
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify the , , , and  object coordinates (if present) for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRasterPos4sv")]
        [CLSCompliant(false)]
        public static unsafe void RasterPos4([CountAttribute(Count = 4)] Int16* v) => instance.RasterPos4(v);

        /// <summary>[requires: v1.0]
        /// Select a color buffer source for pixels
        /// </summary>
        /// <param name="src">
        /// Specifies a color buffer. Accepted values are FrontLeft, FrontRight, BackLeft, BackRight, Front, Back, Left, Right, and the constants ColorAttachmenti.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadBuffer")]
        public static void ReadBuffer(OpenToolkit.OpenGL.ReadBufferMode src) => instance.ReadBuffer(src);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glReadnPixels")]
        public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [OutAttribute] IntPtr data) => instance.ReadnPixels(x, y, width, height, format, type, bufSize, data);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glReadnPixels")]
        [CLSCompliant(false)]
        public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct
         => instance.ReadnPixels<T7>(x, y, width, height, format, type, bufSize, data);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glReadnPixels")]
        [CLSCompliant(false)]
        public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct
         => instance.ReadnPixels<T7>(x, y, width, height, format, type, bufSize, data);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glReadnPixels")]
        [CLSCompliant(false)]
        public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct
         => instance.ReadnPixels<T7>(x, y, width, height, format, type, bufSize, data);

        /// <summary>[requires: v4.5 or KHR_robustness|VERSION_4_5]</summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="bufSize"></param>
        /// <param name="data"></param>
        [AutoGenerated(Category = "KHR_robustness|VERSION_4_5", Version = "4.5", EntryPoint = "glReadnPixels")]
        public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, Int32 bufSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct
         => instance.ReadnPixels<T7>(x, y, width, height, format, type, bufSize, ref data);

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [OutAttribute, CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) => instance.ReadPixels(x, y, width, height, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[] pixels)
            where T6 : struct
         => instance.ReadPixels<T6>(x, y, width, height, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,] pixels)
            where T6 : struct
         => instance.ReadPixels<T6>(x, y, width, height, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T6[,,] pixels)
            where T6 : struct
         => instance.ReadPixels<T6>(x, y, width, height, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y">
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height">
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T6 pixels)
            where T6 : struct
         => instance.ReadPixels<T6>(x, y, width, height, format, type, ref pixels);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="x1">
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="y1">
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="x2">
        /// Specify the opposite vertex of the rectangle.
        /// </param>
        /// <param name="y2">
        /// Specify the opposite vertex of the rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectd")]
        public static void Rect(Double x1, Double y1, Double x2, Double y2) => instance.Rect(x1, y1, x2, y2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectdv")]
        [CLSCompliant(false)]
        public static void Rect([CountAttribute(Count = 2)] Double[] v1, [CountAttribute(Count = 2)] Double[] v2) => instance.Rect(v1, v2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectdv")]
        [CLSCompliant(false)]
        public static void Rect([CountAttribute(Count = 2)] ref Double v1, [CountAttribute(Count = 2)] ref Double v2) => instance.Rect(ref v1, ref v2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectdv")]
        [CLSCompliant(false)]
        public static unsafe void Rect([CountAttribute(Count = 2)] Double* v1, [CountAttribute(Count = 2)] Double* v2) => instance.Rect(v1, v2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="x1">
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="y1">
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="x2">
        /// Specify the opposite vertex of the rectangle.
        /// </param>
        /// <param name="y2">
        /// Specify the opposite vertex of the rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectf")]
        public static void Rect(Single x1, Single y1, Single x2, Single y2) => instance.Rect(x1, y1, x2, y2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectfv")]
        [CLSCompliant(false)]
        public static void Rect([CountAttribute(Count = 2)] Single[] v1, [CountAttribute(Count = 2)] Single[] v2) => instance.Rect(v1, v2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectfv")]
        [CLSCompliant(false)]
        public static void Rect([CountAttribute(Count = 2)] ref Single v1, [CountAttribute(Count = 2)] ref Single v2) => instance.Rect(ref v1, ref v2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectfv")]
        [CLSCompliant(false)]
        public static unsafe void Rect([CountAttribute(Count = 2)] Single* v1, [CountAttribute(Count = 2)] Single* v2) => instance.Rect(v1, v2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="x1">
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="y1">
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="x2">
        /// Specify the opposite vertex of the rectangle.
        /// </param>
        /// <param name="y2">
        /// Specify the opposite vertex of the rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRecti")]
        public static void Rect(Int32 x1, Int32 y1, Int32 x2, Int32 y2) => instance.Rect(x1, y1, x2, y2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectiv")]
        [CLSCompliant(false)]
        public static void Rect([CountAttribute(Count = 2)] Int32[] v1, [CountAttribute(Count = 2)] Int32[] v2) => instance.Rect(v1, v2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectiv")]
        [CLSCompliant(false)]
        public static void Rect([CountAttribute(Count = 2)] ref Int32 v1, [CountAttribute(Count = 2)] ref Int32 v2) => instance.Rect(ref v1, ref v2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectiv")]
        [CLSCompliant(false)]
        public static unsafe void Rect([CountAttribute(Count = 2)] Int32* v1, [CountAttribute(Count = 2)] Int32* v2) => instance.Rect(v1, v2);

        /// <summary>[requires: v1.0][deprecated: v3.2]</summary>
        /// <param name="x1"></param>
        /// <param name="y1"></param>
        /// <param name="x2"></param>
        /// <param name="y2"></param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRects")]
        public static void Rects(Int16 x1, Int16 y1, Int16 x2, Int16 y2) => instance.Rects(x1, y1, x2, y2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectsv")]
        [CLSCompliant(false)]
        public static void Rect([CountAttribute(Count = 2)] Int16[] v1, [CountAttribute(Count = 2)] Int16[] v2) => instance.Rect(v1, v2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectsv")]
        [CLSCompliant(false)]
        public static void Rect([CountAttribute(Count = 2)] ref Int16 v1, [CountAttribute(Count = 2)] ref Int16 v2) => instance.Rect(ref v1, ref v2);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Draw a rectangle
        /// </summary>
        /// <param name="v1">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        /// <param name="v2">[length: 2]
        /// Specify one vertex of a rectangle.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRectsv")]
        [CLSCompliant(false)]
        public static unsafe void Rect([CountAttribute(Count = 2)] Int16* v1, [CountAttribute(Count = 2)] Int16* v2) => instance.Rect(v1, v2);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Release resources consumed by the implementation's shader compiler
        /// </summary>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glReleaseShaderCompiler")]
        public static void ReleaseShaderCompiler() => instance.ReleaseShaderCompiler();

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Establish data storage, format and dimensions of a renderbuffer object's image
        /// </summary>
        /// <param name="target">
        /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the renderbuffer, in pixels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the renderbuffer, in pixels.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glRenderbufferStorage")]
        public static void RenderbufferStorage(OpenToolkit.OpenGL.RenderbufferTarget target, OpenToolkit.OpenGL.RenderbufferStorage internalformat, Int32 width, Int32 height) => instance.RenderbufferStorage(target, internalformat, width, height);

        /// <summary>[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]
        /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
        /// </summary>
        /// <param name="target">
        /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
        /// </param>
        /// <param name="samples">
        /// Specifies the number of samples to be used for the renderbuffer object's storage.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format to use for the renderbuffer object's image.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the renderbuffer, in pixels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the renderbuffer, in pixels.
        /// </param>
        [AutoGenerated(Category = "ARB_framebuffer_object|VERSION_3_0", Version = "3.0", EntryPoint = "glRenderbufferStorageMultisample")]
        public static void RenderbufferStorageMultisample(OpenToolkit.OpenGL.RenderbufferTarget target, Int32 samples, OpenToolkit.OpenGL.RenderbufferStorage internalformat, Int32 width, Int32 height) => instance.RenderbufferStorageMultisample(target, samples, internalformat, width, height);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set rasterization mode
        /// </summary>
        /// <param name="mode">
        /// Specifies the rasterization mode. Three values are accepted: Render, Select, and Feedback. The initial value is Render.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRenderMode")]
        public static Int32 RenderMode(OpenToolkit.OpenGL.RenderingMode mode) => instance.RenderMode(mode);

        /// <summary>
        /// Reset histogram table entries to zero
        /// </summary>
        /// <param name="target">
        /// Must be Histogram.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glResetHistogram")]
        public static void ResetHistogram(OpenToolkit.OpenGL.HistogramTargetExt target) => instance.ResetHistogram(target);

        /// <summary>
        /// Reset minmax table entries to initial values
        /// </summary>
        /// <param name="target">
        /// Must be Minmax.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glResetMinmax")]
        public static void ResetMinmax(OpenToolkit.OpenGL.MinmaxTargetExt target) => instance.ResetMinmax(target);

        /// <summary>[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]
        /// Resume transform feedback operations
        /// </summary>
        [AutoGenerated(Category = "ARB_transform_feedback2|VERSION_4_0", Version = "4.0", EntryPoint = "glResumeTransformFeedback")]
        public static void ResumeTransformFeedback() => instance.ResumeTransformFeedback();

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix by a rotation matrix
        /// </summary>
        /// <param name="angle">
        /// Specifies the angle of rotation, in degrees.
        /// </param>
        /// <param name="x">
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        /// <param name="y">
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        /// <param name="z">
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRotated")]
        public static void Rotate(Double angle, Double x, Double y, Double z) => instance.Rotate(angle, x, y, z);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix by a rotation matrix
        /// </summary>
        /// <param name="angle">
        /// Specifies the angle of rotation, in degrees.
        /// </param>
        /// <param name="x">
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        /// <param name="y">
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        /// <param name="z">
        /// Specify the x, y, and z coordinates of a vector, respectively.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glRotatef")]
        public static void Rotate(Single angle, Single x, Single y, Single z) => instance.Rotate(angle, x, y, z);

        /// <summary>[requires: v1.3]
        /// Specify multisample coverage parameters
        /// </summary>
        /// <param name="value">
        /// Specify a single floating-point sample coverage value.  The value is clamped to the range [0 ,1]. The initial value is 1.0.
        /// </param>
        /// <param name="invert">
        /// Specify a single boolean value representing if the coverage masks should be inverted.  True and False are accepted.  The initial value is False.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glSampleCoverage")]
        public static void SampleCoverage(Single value, bool invert) => instance.SampleCoverage(value, invert);

        /// <summary>[requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Set the value of a sub-word of the sample mask
        /// </summary>
        /// <param name="maskNumber">
        /// Specifies which 32-bit sub-word of the sample mask to update.
        /// </param>
        /// <param name="mask">
        /// Specifies the new value of the mask sub-word.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glSampleMaski")]
        [CLSCompliant(false)]
        public static void SampleMask(Int32 maskNumber, Int32 mask) => instance.SampleMask(maskNumber, mask);

        /// <summary>[requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Set the value of a sub-word of the sample mask
        /// </summary>
        /// <param name="maskNumber">
        /// Specifies which 32-bit sub-word of the sample mask to update.
        /// </param>
        /// <param name="mask">
        /// Specifies the new value of the mask sub-word.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glSampleMaski")]
        [CLSCompliant(false)]
        public static void SampleMask(UInt32 maskNumber, UInt32 mask) => instance.SampleMask(maskNumber, mask);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterf")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, Single param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterf")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, Single param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterf")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, Single param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterf")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, Single param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [CountAttribute(Computed = "pname")] Single[] param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [CountAttribute(Computed = "pname")] Single* param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Single[] param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Single* param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [CountAttribute(Computed = "pname")] Single[] param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [CountAttribute(Computed = "pname")] Single* param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Single[] param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Single* param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteri")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, Int32 param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteri")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, Int32 param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteri")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, Int32 param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteri")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, Int32 param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void SamplerParameterI(Int32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [CountAttribute(Computed = "pname")] Int32[] param) => instance.SamplerParameterI(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void SamplerParameterI(Int32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [CountAttribute(Computed = "pname")] ref Int32 param) => instance.SamplerParameterI(sampler, pname, ref param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameterI(Int32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [CountAttribute(Computed = "pname")] Int32* param) => instance.SamplerParameterI(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void SamplerParameterI(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32[] param) => instance.SamplerParameterI(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void SamplerParameterI(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref Int32 param) => instance.SamplerParameterI(sampler, pname, ref param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameterI(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32* param) => instance.SamplerParameterI(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void SamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [CountAttribute(Computed = "pname")] Int32[] param) => instance.SamplerParameterI(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void SamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [CountAttribute(Computed = "pname")] ref Int32 param) => instance.SamplerParameterI(sampler, pname, ref param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [CountAttribute(Computed = "pname")] Int32* param) => instance.SamplerParameterI(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void SamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32[] param) => instance.SamplerParameterI(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static void SamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref Int32 param) => instance.SamplerParameterI(sampler, pname, ref param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIiv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32* param) => instance.SamplerParameterI(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIuiv")]
        [CLSCompliant(false)]
        public static void SamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [CountAttribute(Computed = "pname")] UInt32[] param) => instance.SamplerParameterI(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIuiv")]
        [CLSCompliant(false)]
        public static void SamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [CountAttribute(Computed = "pname")] ref UInt32 param) => instance.SamplerParameterI(sampler, pname, ref param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIuiv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.ArbSamplerObjects pname, [CountAttribute(Computed = "pname")] UInt32* param) => instance.SamplerParameterI(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIuiv")]
        [CLSCompliant(false)]
        public static void SamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] UInt32[] param) => instance.SamplerParameterI(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIuiv")]
        [CLSCompliant(false)]
        public static void SamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] ref UInt32 param) => instance.SamplerParameterI(sampler, pname, ref param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]</summary>
        /// <param name="sampler"></param>
        /// <param name="pname"></param>
        /// <param name="param">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameterIuiv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameterI(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] UInt32* param) => instance.SamplerParameterI(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [CountAttribute(Computed = "pname")] Int32[] param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [CountAttribute(Computed = "pname")] Int32* param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32[] param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(Int32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32* param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [CountAttribute(Computed = "pname")] Int32[] param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [Obsolete("Use SamplerParameterName overload instead")]
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameter pname, [CountAttribute(Computed = "pname")] Int32* param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static void SamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32[] param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]
        /// Set sampler parameters
        /// </summary>
        /// <param name="sampler">
        /// Specifies the sampler object whose parameter to modify.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.
        /// </param>
        /// <param name="param">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ARB_sampler_objects|VERSION_3_3", Version = "3.3", EntryPoint = "glSamplerParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void SamplerParameter(UInt32 sampler, OpenToolkit.OpenGL.SamplerParameterName pname, [CountAttribute(Computed = "pname")] Int32* param) => instance.SamplerParameter(sampler, pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix by a general scaling matrix
        /// </summary>
        /// <param name="x">
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        /// <param name="y">
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        /// <param name="z">
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glScaled")]
        public static void Scale(Double x, Double y, Double z) => instance.Scale(x, y, z);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix by a general scaling matrix
        /// </summary>
        /// <param name="x">
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        /// <param name="y">
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        /// <param name="z">
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glScalef")]
        public static void Scale(Single x, Single y, Single z) => instance.Scale(x, y, z);

        /// <summary>[requires: v1.0]
        /// Define the scissor box
        /// </summary>
        /// <param name="x">
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="y">
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="width">
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height">
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glScissor")]
        public static void Scissor(Int32 x, Int32 y, Int32 width, Int32 height) => instance.Scissor(x, y, width, height);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </param>
        /// <param name="count">
        /// Specifies the number of scissor boxes to modify.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        [CLSCompliant(false)]
        public static void ScissorArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] Int32[] v) => instance.ScissorArray(first, count, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </param>
        /// <param name="count">
        /// Specifies the number of scissor boxes to modify.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        [CLSCompliant(false)]
        public static void ScissorArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] ref Int32 v) => instance.ScissorArray(first, count, ref v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </param>
        /// <param name="count">
        /// Specifies the number of scissor boxes to modify.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        [CLSCompliant(false)]
        public static unsafe void ScissorArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] Int32* v) => instance.ScissorArray(first, count, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </param>
        /// <param name="count">
        /// Specifies the number of scissor boxes to modify.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        [CLSCompliant(false)]
        public static void ScissorArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Int32[] v) => instance.ScissorArray(first, count, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </param>
        /// <param name="count">
        /// Specifies the number of scissor boxes to modify.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        [CLSCompliant(false)]
        public static void ScissorArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] ref Int32 v) => instance.ScissorArray(first, count, ref v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specifies the index of the first viewport whose scissor box to modify.
        /// </param>
        /// <param name="count">
        /// Specifies the number of scissor boxes to modify.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorArrayv")]
        [CLSCompliant(false)]
        public static unsafe void ScissorArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Int32* v) => instance.ScissorArray(first, count, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="left">
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </param>
        /// <param name="bottom">
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </param>
        /// <param name="width">
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </param>
        /// <param name="height">
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexed")]
        [CLSCompliant(false)]
        public static void ScissorIndexed(Int32 index, Int32 left, Int32 bottom, Int32 width, Int32 height) => instance.ScissorIndexed(index, left, bottom, width, height);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="left">
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </param>
        /// <param name="bottom">
        /// Specify the coordinate of the bottom left corner of the scissor box, in pixels.
        /// </param>
        /// <param name="width">
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </param>
        /// <param name="height">
        /// Specify ths dimensions of the scissor box, in pixels.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexed")]
        [CLSCompliant(false)]
        public static void ScissorIndexed(UInt32 index, Int32 left, Int32 bottom, Int32 width, Int32 height) => instance.ScissorIndexed(index, left, bottom, width, height);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="v">[length: 4]
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        [CLSCompliant(false)]
        public static void ScissorIndexed(Int32 index, [CountAttribute(Count = 4)] Int32[] v) => instance.ScissorIndexed(index, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="v">[length: 4]
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        [CLSCompliant(false)]
        public static void ScissorIndexed(Int32 index, [CountAttribute(Count = 4)] ref Int32 v) => instance.ScissorIndexed(index, ref v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="v">[length: 4]
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        [CLSCompliant(false)]
        public static unsafe void ScissorIndexed(Int32 index, [CountAttribute(Count = 4)] Int32* v) => instance.ScissorIndexed(index, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="v">[length: 4]
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        [CLSCompliant(false)]
        public static void ScissorIndexed(UInt32 index, [CountAttribute(Count = 4)] Int32[] v) => instance.ScissorIndexed(index, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="v">[length: 4]
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        [CLSCompliant(false)]
        public static void ScissorIndexed(UInt32 index, [CountAttribute(Count = 4)] ref Int32 v) => instance.ScissorIndexed(index, ref v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Define the scissor box for a specific viewport
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the viewport whose scissor box to modify.
        /// </param>
        /// <param name="v">[length: 4]
        /// For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glScissorIndexedv")]
        [CLSCompliant(false)]
        public static unsafe void ScissorIndexed(UInt32 index, [CountAttribute(Count = 4)] Int32* v) => instance.ScissorIndexed(index, v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3b")]
        [CLSCompliant(false)]
        public static void SecondaryColor3(SByte red, SByte green, SByte blue) => instance.SecondaryColor3(red, green, blue);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] SByte[] v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref SByte v) => instance.SecondaryColor3(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
        [CLSCompliant(false)]
        public static unsafe void SecondaryColor3([CountAttribute(Count = 3)] SByte* v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3d")]
        public static void SecondaryColor3(Double red, Double green, Double blue) => instance.SecondaryColor3(red, green, blue);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] Double[] v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref Double v) => instance.SecondaryColor3(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
        [CLSCompliant(false)]
        public static unsafe void SecondaryColor3([CountAttribute(Count = 3)] Double* v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3f")]
        public static void SecondaryColor3(Single red, Single green, Single blue) => instance.SecondaryColor3(red, green, blue);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] Single[] v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref Single v) => instance.SecondaryColor3(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
        [CLSCompliant(false)]
        public static unsafe void SecondaryColor3([CountAttribute(Count = 3)] Single* v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3i")]
        public static void SecondaryColor3(Int32 red, Int32 green, Int32 blue) => instance.SecondaryColor3(red, green, blue);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] Int32[] v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref Int32 v) => instance.SecondaryColor3(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
        [CLSCompliant(false)]
        public static unsafe void SecondaryColor3([CountAttribute(Count = 3)] Int32* v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3s")]
        public static void SecondaryColor3(Int16 red, Int16 green, Int16 blue) => instance.SecondaryColor3(red, green, blue);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] Int16[] v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref Int16 v) => instance.SecondaryColor3(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
        [CLSCompliant(false)]
        public static unsafe void SecondaryColor3([CountAttribute(Count = 3)] Int16* v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3ub")]
        public static void SecondaryColor3(Byte red, Byte green, Byte blue) => instance.SecondaryColor3(red, green, blue);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] Byte[] v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref Byte v) => instance.SecondaryColor3(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
        [CLSCompliant(false)]
        public static unsafe void SecondaryColor3([CountAttribute(Count = 3)] Byte* v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3ui")]
        [CLSCompliant(false)]
        public static void SecondaryColor3(UInt32 red, UInt32 green, UInt32 blue) => instance.SecondaryColor3(red, green, blue);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] UInt32[] v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref UInt32 v) => instance.SecondaryColor3(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
        [CLSCompliant(false)]
        public static unsafe void SecondaryColor3([CountAttribute(Count = 3)] UInt32* v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="green">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        /// <param name="blue">
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3us")]
        [CLSCompliant(false)]
        public static void SecondaryColor3(UInt16 red, UInt16 green, UInt16 blue) => instance.SecondaryColor3(red, green, blue);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] UInt16[] v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
        [CLSCompliant(false)]
        public static void SecondaryColor3([CountAttribute(Count = 3)] ref UInt16 v) => instance.SecondaryColor3(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Set the current secondary color
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify new red, green, and blue values for the current secondary color.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
        [CLSCompliant(false)]
        public static unsafe void SecondaryColor3([CountAttribute(Count = 3)] UInt16* v) => instance.SecondaryColor3(v);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="color"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glSecondaryColorP3ui")]
        [CLSCompliant(false)]
        public static void SecondaryColorP3(OpenToolkit.OpenGL.PackedPointerType type, Int32 color) => instance.SecondaryColorP3(type, color);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="color"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glSecondaryColorP3ui")]
        [CLSCompliant(false)]
        public static void SecondaryColorP3(OpenToolkit.OpenGL.PackedPointerType type, UInt32 color) => instance.SecondaryColorP3(type, color);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="color">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glSecondaryColorP3uiv")]
        [CLSCompliant(false)]
        public static unsafe void SecondaryColorP3(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] Int32* color) => instance.SecondaryColorP3(type, color);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="color">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glSecondaryColorP3uiv")]
        [CLSCompliant(false)]
        public static unsafe void SecondaryColorP3(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] UInt32* color) => instance.SecondaryColorP3(type, color);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static void SecondaryColorPointer(Int32 size, OpenToolkit.OpenGL.ColorPointerType type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) => instance.SecondaryColorPointer(size, type, stride, pointer);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        [CLSCompliant(false)]
        public static void SecondaryColorPointer<T3>(Int32 size, OpenToolkit.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
            where T3 : struct
         => instance.SecondaryColorPointer<T3>(size, type, stride, pointer);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        [CLSCompliant(false)]
        public static void SecondaryColorPointer<T3>(Int32 size, OpenToolkit.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
            where T3 : struct
         => instance.SecondaryColorPointer<T3>(size, type, stride, pointer);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        [CLSCompliant(false)]
        public static void SecondaryColorPointer<T3>(Int32 size, OpenToolkit.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
            where T3 : struct
         => instance.SecondaryColorPointer<T3>(size, type, stride, pointer);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// Specifies the number of components per color. Must be 3.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static void SecondaryColorPointer<T3>(Int32 size, OpenToolkit.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
            where T3 : struct
         => instance.SecondaryColorPointer<T3>(size, type, stride, ref pointer);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Establish a buffer for selection mode values
        /// </summary>
        /// <param name="size">
        /// Specifies the size of buffer.
        /// </param>
        /// <param name="buffer">[length: size]
        /// Returns the selection data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glSelectBuffer")]
        [CLSCompliant(false)]
        public static void SelectBuffer(Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] Int32[] buffer) => instance.SelectBuffer(size, buffer);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Establish a buffer for selection mode values
        /// </summary>
        /// <param name="size">
        /// Specifies the size of buffer.
        /// </param>
        /// <param name="buffer">[length: size]
        /// Returns the selection data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glSelectBuffer")]
        [CLSCompliant(false)]
        public static void SelectBuffer(Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] out Int32 buffer) => instance.SelectBuffer(size, out buffer);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Establish a buffer for selection mode values
        /// </summary>
        /// <param name="size">
        /// Specifies the size of buffer.
        /// </param>
        /// <param name="buffer">[length: size]
        /// Returns the selection data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glSelectBuffer")]
        [CLSCompliant(false)]
        public static unsafe void SelectBuffer(Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] Int32* buffer) => instance.SelectBuffer(size, buffer);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Establish a buffer for selection mode values
        /// </summary>
        /// <param name="size">
        /// Specifies the size of buffer.
        /// </param>
        /// <param name="buffer">[length: size]
        /// Returns the selection data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glSelectBuffer")]
        [CLSCompliant(false)]
        public static void SelectBuffer(Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] UInt32[] buffer) => instance.SelectBuffer(size, buffer);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Establish a buffer for selection mode values
        /// </summary>
        /// <param name="size">
        /// Specifies the size of buffer.
        /// </param>
        /// <param name="buffer">[length: size]
        /// Returns the selection data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glSelectBuffer")]
        [CLSCompliant(false)]
        public static void SelectBuffer(Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] out UInt32 buffer) => instance.SelectBuffer(size, out buffer);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Establish a buffer for selection mode values
        /// </summary>
        /// <param name="size">
        /// Specifies the size of buffer.
        /// </param>
        /// <param name="buffer">[length: size]
        /// Returns the selection data.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glSelectBuffer")]
        [CLSCompliant(false)]
        public static unsafe void SelectBuffer(Int32 size, [OutAttribute, CountAttribute(Parameter = "size")] UInt32* buffer) => instance.SelectBuffer(size, buffer);

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Separable2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </param>
        /// <param name="height">
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">[length: COMPSIZE(target,format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </param>
        /// <param name="column">[length: COMPSIZE(target,format,type,height)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static void SeparableFilter2D(OpenToolkit.OpenGL.SeparableTargetExt target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "target,format,type,width")] IntPtr row, [CountAttribute(Computed = "target,format,type,height")] IntPtr column) => instance.SeparableFilter2D(target, internalformat, width, height, format, type, row, column);

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Separable2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </param>
        /// <param name="height">
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">[length: COMPSIZE(target,format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </param>
        /// <param name="column">[length: COMPSIZE(target,format,type,height)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        [CLSCompliant(false)]
        public static void SeparableFilter2D<T6, T7>(OpenToolkit.OpenGL.SeparableTargetExt target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] T6[] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] T7[] column)
            where T6 : struct
            where T7 : struct
         => instance.SeparableFilter2D<T6, T7>(target, internalformat, width, height, format, type, row, column);

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Separable2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </param>
        /// <param name="height">
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">[length: COMPSIZE(target,format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </param>
        /// <param name="column">[length: COMPSIZE(target,format,type,height)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        [CLSCompliant(false)]
        public static void SeparableFilter2D<T6, T7>(OpenToolkit.OpenGL.SeparableTargetExt target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] T6[,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] T7[,] column)
            where T6 : struct
            where T7 : struct
         => instance.SeparableFilter2D<T6, T7>(target, internalformat, width, height, format, type, row, column);

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Separable2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </param>
        /// <param name="height">
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">[length: COMPSIZE(target,format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </param>
        /// <param name="column">[length: COMPSIZE(target,format,type,height)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        [CLSCompliant(false)]
        public static void SeparableFilter2D<T6, T7>(OpenToolkit.OpenGL.SeparableTargetExt target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] T6[,,] row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] T7[,,] column)
            where T6 : struct
            where T7 : struct
         => instance.SeparableFilter2D<T6, T7>(target, internalformat, width, height, format, type, row, column);

        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// Must be Separable2D.
        /// </param>
        /// <param name="internalformat">
        /// The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.
        /// </param>
        /// <param name="width">
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </param>
        /// <param name="height">
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </param>
        /// <param name="format">
        /// The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type">
        /// The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.
        /// </param>
        /// <param name="row">[length: COMPSIZE(target,format,type,width)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </param>
        /// <param name="column">[length: COMPSIZE(target,format,type,height)]
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </param>
        [AutoGenerated(Category = "ARB_imaging", Version = "", EntryPoint = "glSeparableFilter2D")]
        public static void SeparableFilter2D<T6, T7>(OpenToolkit.OpenGL.SeparableTargetExt target, OpenToolkit.OpenGL.InternalFormat internalformat, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,width")] ref T6 row, [InAttribute, OutAttribute, CountAttribute(Computed = "target,format,type,height")] ref T7 column)
            where T6 : struct
            where T7 : struct
         => instance.SeparableFilter2D<T6, T7>(target, internalformat, width, height, format, type, ref row, ref column);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Select flat or smooth shading
        /// </summary>
        /// <param name="mode">
        /// Specifies a symbolic value representing a shading technique. Accepted values are Flat and Smooth. The initial value is Smooth.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glShadeModel")]
        public static void ShadeModel(OpenToolkit.OpenGL.ShadingModel mode) => instance.ShadeModel(mode);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] Int32[] shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) => instance.ShaderBinary(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] Int32[] shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] Int32[] shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] Int32[] shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,,] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] Int32[] shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T3 binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, ref binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] ref Int32 shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) => instance.ShaderBinary(count, ref shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] ref Int32 shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, ref shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] ref Int32 shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, ref shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] ref Int32 shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,,] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, ref shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] ref Int32 shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T3 binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, ref shaders, binaryformat, ref binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] Int32* shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) => instance.ShaderBinary(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] Int32* shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] Int32* shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] Int32* shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,,] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] Int32* shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T3 binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, ref binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] UInt32[] shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) => instance.ShaderBinary(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] UInt32[] shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] UInt32[] shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] UInt32[] shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,,] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] UInt32[] shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T3 binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, ref binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) => instance.ShaderBinary(count, ref shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, ref shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, ref shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,,] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, ref shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T3 binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, ref shaders, binaryformat, ref binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, [CountAttribute(Parameter = "count")] UInt32* shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [CountAttribute(Parameter = "length")] IntPtr binary, Int32 length) => instance.ShaderBinary(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] UInt32* shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] UInt32* shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] UInt32* shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] T3[,,] binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, binary, length);

        /// <summary>[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]
        /// Load pre-compiled shader binaries
        /// </summary>
        /// <param name="count">
        /// Specifies the number of shader object handles contained in shaders.
        /// </param>
        /// <param name="shaders">[length: count]
        /// Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
        /// </param>
        /// <param name="binaryformat">
        /// Specifies the format of the shader binaries contained in binary.
        /// </param>
        /// <param name="binary">[length: length]
        /// Specifies the address of an array of bytes containing pre-compiled binary shader code.
        /// </param>
        /// <param name="length">
        /// Specifies the length of the array whose address is given in binary.
        /// </param>
        [AutoGenerated(Category = "ARB_ES2_compatibility|VERSION_4_1", Version = "4.1", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, [CountAttribute(Parameter = "count")] UInt32* shaders, OpenToolkit.OpenGL.BinaryFormat binaryformat, [InAttribute, OutAttribute, CountAttribute(Parameter = "length")] ref T3 binary, Int32 length)
            where T3 : struct
         => instance.ShaderBinary<T3>(count, shaders, binaryformat, ref binary, length);

        /// <summary>[requires: v2.0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static void ShaderSource(Int32 shader, Int32 count, [CountAttribute(Parameter = "count")] String[] @string, [CountAttribute(Parameter = "count")] Int32[] length) => instance.ShaderSource(shader, count, @string, length);

        /// <summary>[requires: v2.0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static void ShaderSource(Int32 shader, Int32 count, [CountAttribute(Parameter = "count")] String[] @string, [CountAttribute(Parameter = "count")] ref Int32 length) => instance.ShaderSource(shader, count, @string, ref length);

        /// <summary>[requires: v2.0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void ShaderSource(Int32 shader, Int32 count, [CountAttribute(Parameter = "count")] String[] @string, [CountAttribute(Parameter = "count")] Int32* length) => instance.ShaderSource(shader, count, @string, length);

        /// <summary>[requires: v2.0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static void ShaderSource(UInt32 shader, Int32 count, [CountAttribute(Parameter = "count")] String[] @string, [CountAttribute(Parameter = "count")] Int32[] length) => instance.ShaderSource(shader, count, @string, length);

        /// <summary>[requires: v2.0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static void ShaderSource(UInt32 shader, Int32 count, [CountAttribute(Parameter = "count")] String[] @string, [CountAttribute(Parameter = "count")] ref Int32 length) => instance.ShaderSource(shader, count, @string, ref length);

        /// <summary>[requires: v2.0]
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count">
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count]
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count]
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void ShaderSource(UInt32 shader, Int32 count, [CountAttribute(Parameter = "count")] String[] @string, [CountAttribute(Parameter = "count")] Int32* length) => instance.ShaderSource(shader, count, @string, length);

        /// <summary>[requires: v4.3 or ARB_shader_storage_buffer_object|VERSION_4_3]
        /// Change an active shader storage block binding
        /// </summary>
        /// <param name="program">
        /// The name of the program containing the block whose binding to change.
        /// </param>
        /// <param name="storageBlockIndex">
        /// The index storage block within the program.
        /// </param>
        /// <param name="storageBlockBinding">
        /// The index storage block binding to associate with the specified storage block.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_storage_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glShaderStorageBlockBinding")]
        [CLSCompliant(false)]
        public static void ShaderStorageBlockBinding(Int32 program, Int32 storageBlockIndex, Int32 storageBlockBinding) => instance.ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);

        /// <summary>[requires: v4.3 or ARB_shader_storage_buffer_object|VERSION_4_3]
        /// Change an active shader storage block binding
        /// </summary>
        /// <param name="program">
        /// The name of the program containing the block whose binding to change.
        /// </param>
        /// <param name="storageBlockIndex">
        /// The index storage block within the program.
        /// </param>
        /// <param name="storageBlockBinding">
        /// The index storage block binding to associate with the specified storage block.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_storage_buffer_object|VERSION_4_3", Version = "4.3", EntryPoint = "glShaderStorageBlockBinding")]
        [CLSCompliant(false)]
        public static void ShaderStorageBlockBinding(UInt32 program, UInt32 storageBlockIndex, UInt32 storageBlockBinding) => instance.ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="shader"></param>
        /// <param name="pEntryPoint"></param>
        /// <param name="numSpecializationConstants"></param>
        /// <param name="pConstantIndex"></param>
        /// <param name="pConstantValue"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glSpecializeShader")]
        [CLSCompliant(false)]
        public static void SpecializeShader(Int32 shader, String pEntryPoint, Int32 numSpecializationConstants, Int32[] pConstantIndex, Int32[] pConstantValue) => instance.SpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="shader"></param>
        /// <param name="pEntryPoint"></param>
        /// <param name="numSpecializationConstants"></param>
        /// <param name="pConstantIndex"></param>
        /// <param name="pConstantValue"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glSpecializeShader")]
        [CLSCompliant(false)]
        public static void SpecializeShader(Int32 shader, String pEntryPoint, Int32 numSpecializationConstants, ref Int32 pConstantIndex, ref Int32 pConstantValue) => instance.SpecializeShader(shader, pEntryPoint, numSpecializationConstants, ref pConstantIndex, ref pConstantValue);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="shader"></param>
        /// <param name="pEntryPoint"></param>
        /// <param name="numSpecializationConstants"></param>
        /// <param name="pConstantIndex"></param>
        /// <param name="pConstantValue"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glSpecializeShader")]
        [CLSCompliant(false)]
        public static unsafe void SpecializeShader(Int32 shader, String pEntryPoint, Int32 numSpecializationConstants, Int32* pConstantIndex, Int32* pConstantValue) => instance.SpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="shader"></param>
        /// <param name="pEntryPoint"></param>
        /// <param name="numSpecializationConstants"></param>
        /// <param name="pConstantIndex"></param>
        /// <param name="pConstantValue"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glSpecializeShader")]
        [CLSCompliant(false)]
        public static void SpecializeShader(UInt32 shader, String pEntryPoint, UInt32 numSpecializationConstants, UInt32[] pConstantIndex, UInt32[] pConstantValue) => instance.SpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="shader"></param>
        /// <param name="pEntryPoint"></param>
        /// <param name="numSpecializationConstants"></param>
        /// <param name="pConstantIndex"></param>
        /// <param name="pConstantValue"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glSpecializeShader")]
        [CLSCompliant(false)]
        public static void SpecializeShader(UInt32 shader, String pEntryPoint, UInt32 numSpecializationConstants, ref UInt32 pConstantIndex, ref UInt32 pConstantValue) => instance.SpecializeShader(shader, pEntryPoint, numSpecializationConstants, ref pConstantIndex, ref pConstantValue);

        /// <summary>[requires: v4.6]</summary>
        /// <param name="shader"></param>
        /// <param name="pEntryPoint"></param>
        /// <param name="numSpecializationConstants"></param>
        /// <param name="pConstantIndex"></param>
        /// <param name="pConstantValue"></param>
        [AutoGenerated(Category = "VERSION_4_6", Version = "4.6", EntryPoint = "glSpecializeShader")]
        [CLSCompliant(false)]
        public static unsafe void SpecializeShader(UInt32 shader, String pEntryPoint, UInt32 numSpecializationConstants, UInt32* pConstantIndex, UInt32* pConstantValue) => instance.SpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);

        /// <summary>[requires: v1.0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenToolkit.OpenGL.StencilFunction func, Int32 @ref, Int32 mask) => instance.StencilFunc(func, @ref, mask);

        /// <summary>[requires: v1.0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenToolkit.OpenGL.StencilFunction func, Int32 @ref, UInt32 mask) => instance.StencilFunc(func, @ref, mask);

        /// <summary>[requires: v2.0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenToolkit.OpenGL.StencilFace face, OpenToolkit.OpenGL.StencilFunction func, Int32 @ref, Int32 mask) => instance.StencilFuncSeparate(face, func, @ref, mask);

        /// <summary>[requires: v2.0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenToolkit.OpenGL.StencilFace face, OpenToolkit.OpenGL.StencilFunction func, Int32 @ref, UInt32 mask) => instance.StencilFuncSeparate(face, func, @ref, mask);

        /// <summary>[requires: v2.0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use StencilFace overload instead")]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenToolkit.OpenGL.Version20 face, OpenToolkit.OpenGL.StencilFunction func, Int32 @ref, Int32 mask) => instance.StencilFuncSeparate(face, func, @ref, mask);

        /// <summary>[requires: v2.0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func">
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref">
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask">
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [Obsolete("Use StencilFace overload instead")]
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenToolkit.OpenGL.Version20 face, OpenToolkit.OpenGL.StencilFunction func, Int32 @ref, UInt32 mask) => instance.StencilFuncSeparate(face, func, @ref, mask);

        /// <summary>[requires: v1.0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilMask")]
        [CLSCompliant(false)]
        public static void StencilMask(Int32 mask) => instance.StencilMask(mask);

        /// <summary>[requires: v1.0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilMask")]
        [CLSCompliant(false)]
        public static void StencilMask(UInt32 mask) => instance.StencilMask(mask);

        /// <summary>[requires: v2.0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenToolkit.OpenGL.StencilFace face, Int32 mask) => instance.StencilMaskSeparate(face, mask);

        /// <summary>[requires: v2.0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask">
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenToolkit.OpenGL.StencilFace face, UInt32 mask) => instance.StencilMaskSeparate(face, mask);

        /// <summary>[requires: v1.0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="fail">
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="zfail">
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="zpass">
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilOp")]
        public static void StencilOp(OpenToolkit.OpenGL.StencilOp fail, OpenToolkit.OpenGL.StencilOp zfail, OpenToolkit.OpenGL.StencilOp zpass) => instance.StencilOp(fail, zfail, zpass);

        /// <summary>[requires: v2.0]
        /// Set front and/or back stencil test actions
        /// </summary>
        /// <param name="face">
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="sfail">
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="dpfail">
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="dppass">
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOpSeparate")]
        public static void StencilOpSeparate(OpenToolkit.OpenGL.StencilFace face, OpenToolkit.OpenGL.StencilOp sfail, OpenToolkit.OpenGL.StencilOp dpfail, OpenToolkit.OpenGL.StencilOp dppass) => instance.StencilOpSeparate(face, sfail, dpfail, dppass);

        /// <summary>[requires: v3.1]
        /// Attach the storage for a buffer object to the active buffer texture
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the operation and must be TextureBuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the data in the store belonging to buffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glTexBuffer")]
        [CLSCompliant(false)]
        public static void TexBuffer(OpenToolkit.OpenGL.TextureBufferTarget target, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 buffer) => instance.TexBuffer(target, internalformat, buffer);

        /// <summary>[requires: v3.1]
        /// Attach the storage for a buffer object to the active buffer texture
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the operation and must be TextureBuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the data in the store belonging to buffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glTexBuffer")]
        [CLSCompliant(false)]
        public static void TexBuffer(OpenToolkit.OpenGL.TextureBufferTarget target, OpenToolkit.OpenGL.SizedInternalFormat internalformat, UInt32 buffer) => instance.TexBuffer(target, internalformat, buffer);

        /// <summary>[requires: v4.3 or ARB_texture_buffer_range|VERSION_4_3]
        /// Bind a range of a buffer's data store to a buffer texture
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the operation and must be TextureBuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the data in the store belonging to buffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset of the start of the range of the buffer's data store to attach.
        /// </param>
        /// <param name="size">
        /// Specifies the size of the range of the buffer's data store to attach.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_buffer_range|VERSION_4_3", Version = "4.3", EntryPoint = "glTexBufferRange")]
        [CLSCompliant(false)]
        public static void TexBufferRange(OpenToolkit.OpenGL.TextureBufferTarget target, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 buffer, IntPtr offset, Int32 size) => instance.TexBufferRange(target, internalformat, buffer, offset, size);

        /// <summary>[requires: v4.3 or ARB_texture_buffer_range|VERSION_4_3]
        /// Bind a range of a buffer's data store to a buffer texture
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the operation and must be TextureBuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the data in the store belonging to buffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset of the start of the range of the buffer's data store to attach.
        /// </param>
        /// <param name="size">
        /// Specifies the size of the range of the buffer's data store to attach.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_buffer_range|VERSION_4_3", Version = "4.3", EntryPoint = "glTexBufferRange")]
        [CLSCompliant(false)]
        public static void TexBufferRange(OpenToolkit.OpenGL.TextureBufferTarget target, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 buffer, IntPtr offset, IntPtr size) => instance.TexBufferRange(target, internalformat, buffer, offset, size);

        /// <summary>[requires: v4.3 or ARB_texture_buffer_range|VERSION_4_3]
        /// Bind a range of a buffer's data store to a buffer texture
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the operation and must be TextureBuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the data in the store belonging to buffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset of the start of the range of the buffer's data store to attach.
        /// </param>
        /// <param name="size">
        /// Specifies the size of the range of the buffer's data store to attach.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_buffer_range|VERSION_4_3", Version = "4.3", EntryPoint = "glTexBufferRange")]
        [CLSCompliant(false)]
        public static void TexBufferRange(OpenToolkit.OpenGL.TextureBufferTarget target, OpenToolkit.OpenGL.SizedInternalFormat internalformat, UInt32 buffer, IntPtr offset, Int32 size) => instance.TexBufferRange(target, internalformat, buffer, offset, size);

        /// <summary>[requires: v4.3 or ARB_texture_buffer_range|VERSION_4_3]
        /// Bind a range of a buffer's data store to a buffer texture
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the operation and must be TextureBuffer.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format of the data in the store belonging to buffer.
        /// </param>
        /// <param name="buffer">
        /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
        /// </param>
        /// <param name="offset">
        /// Specifies the offset of the start of the range of the buffer's data store to attach.
        /// </param>
        /// <param name="size">
        /// Specifies the size of the range of the buffer's data store to attach.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_buffer_range|VERSION_4_3", Version = "4.3", EntryPoint = "glTexBufferRange")]
        [CLSCompliant(false)]
        public static void TexBufferRange(OpenToolkit.OpenGL.TextureBufferTarget target, OpenToolkit.OpenGL.SizedInternalFormat internalformat, UInt32 buffer, IntPtr offset, IntPtr size) => instance.TexBufferRange(target, internalformat, buffer, offset, size);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1d")]
        public static void TexCoord1(Double s) => instance.TexCoord1(s);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 1]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1dv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord1([CountAttribute(Count = 1)] Double* v) => instance.TexCoord1(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1f")]
        public static void TexCoord1(Single s) => instance.TexCoord1(s);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 1]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1fv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord1([CountAttribute(Count = 1)] Single* v) => instance.TexCoord1(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1i")]
        public static void TexCoord1(Int32 s) => instance.TexCoord1(s);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 1]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1iv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord1([CountAttribute(Count = 1)] Int32* v) => instance.TexCoord1(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1s")]
        public static void TexCoord1(Int16 s) => instance.TexCoord1(s);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 1]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord1sv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord1([CountAttribute(Count = 1)] Int16* v) => instance.TexCoord1(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2d")]
        public static void TexCoord2(Double s, Double t) => instance.TexCoord2(s, t);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2dv")]
        [CLSCompliant(false)]
        public static void TexCoord2([CountAttribute(Count = 2)] Double[] v) => instance.TexCoord2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2dv")]
        [CLSCompliant(false)]
        public static void TexCoord2([CountAttribute(Count = 2)] ref Double v) => instance.TexCoord2(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2dv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord2([CountAttribute(Count = 2)] Double* v) => instance.TexCoord2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2f")]
        public static void TexCoord2(Single s, Single t) => instance.TexCoord2(s, t);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2fv")]
        [CLSCompliant(false)]
        public static void TexCoord2([CountAttribute(Count = 2)] Single[] v) => instance.TexCoord2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2fv")]
        [CLSCompliant(false)]
        public static void TexCoord2([CountAttribute(Count = 2)] ref Single v) => instance.TexCoord2(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2fv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord2([CountAttribute(Count = 2)] Single* v) => instance.TexCoord2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2i")]
        public static void TexCoord2(Int32 s, Int32 t) => instance.TexCoord2(s, t);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2iv")]
        [CLSCompliant(false)]
        public static void TexCoord2([CountAttribute(Count = 2)] Int32[] v) => instance.TexCoord2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2iv")]
        [CLSCompliant(false)]
        public static void TexCoord2([CountAttribute(Count = 2)] ref Int32 v) => instance.TexCoord2(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2iv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord2([CountAttribute(Count = 2)] Int32* v) => instance.TexCoord2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2s")]
        public static void TexCoord2(Int16 s, Int16 t) => instance.TexCoord2(s, t);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2sv")]
        [CLSCompliant(false)]
        public static void TexCoord2([CountAttribute(Count = 2)] Int16[] v) => instance.TexCoord2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2sv")]
        [CLSCompliant(false)]
        public static void TexCoord2([CountAttribute(Count = 2)] ref Int16 v) => instance.TexCoord2(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord2sv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord2([CountAttribute(Count = 2)] Int16* v) => instance.TexCoord2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3d")]
        public static void TexCoord3(Double s, Double t, Double r) => instance.TexCoord3(s, t, r);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3dv")]
        [CLSCompliant(false)]
        public static void TexCoord3([CountAttribute(Count = 3)] Double[] v) => instance.TexCoord3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3dv")]
        [CLSCompliant(false)]
        public static void TexCoord3([CountAttribute(Count = 3)] ref Double v) => instance.TexCoord3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3dv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord3([CountAttribute(Count = 3)] Double* v) => instance.TexCoord3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3f")]
        public static void TexCoord3(Single s, Single t, Single r) => instance.TexCoord3(s, t, r);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3fv")]
        [CLSCompliant(false)]
        public static void TexCoord3([CountAttribute(Count = 3)] Single[] v) => instance.TexCoord3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3fv")]
        [CLSCompliant(false)]
        public static void TexCoord3([CountAttribute(Count = 3)] ref Single v) => instance.TexCoord3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3fv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord3([CountAttribute(Count = 3)] Single* v) => instance.TexCoord3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3i")]
        public static void TexCoord3(Int32 s, Int32 t, Int32 r) => instance.TexCoord3(s, t, r);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3iv")]
        [CLSCompliant(false)]
        public static void TexCoord3([CountAttribute(Count = 3)] Int32[] v) => instance.TexCoord3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3iv")]
        [CLSCompliant(false)]
        public static void TexCoord3([CountAttribute(Count = 3)] ref Int32 v) => instance.TexCoord3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3iv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord3([CountAttribute(Count = 3)] Int32* v) => instance.TexCoord3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3s")]
        public static void TexCoord3(Int16 s, Int16 t, Int16 r) => instance.TexCoord3(s, t, r);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3sv")]
        [CLSCompliant(false)]
        public static void TexCoord3([CountAttribute(Count = 3)] Int16[] v) => instance.TexCoord3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3sv")]
        [CLSCompliant(false)]
        public static void TexCoord3([CountAttribute(Count = 3)] ref Int16 v) => instance.TexCoord3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord3sv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord3([CountAttribute(Count = 3)] Int16* v) => instance.TexCoord3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4d")]
        public static void TexCoord4(Double s, Double t, Double r, Double q) => instance.TexCoord4(s, t, r, q);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4dv")]
        [CLSCompliant(false)]
        public static void TexCoord4([CountAttribute(Count = 4)] Double[] v) => instance.TexCoord4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4dv")]
        [CLSCompliant(false)]
        public static void TexCoord4([CountAttribute(Count = 4)] ref Double v) => instance.TexCoord4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4dv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord4([CountAttribute(Count = 4)] Double* v) => instance.TexCoord4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4f")]
        public static void TexCoord4(Single s, Single t, Single r, Single q) => instance.TexCoord4(s, t, r, q);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4fv")]
        [CLSCompliant(false)]
        public static void TexCoord4([CountAttribute(Count = 4)] Single[] v) => instance.TexCoord4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4fv")]
        [CLSCompliant(false)]
        public static void TexCoord4([CountAttribute(Count = 4)] ref Single v) => instance.TexCoord4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4fv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord4([CountAttribute(Count = 4)] Single* v) => instance.TexCoord4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4i")]
        public static void TexCoord4(Int32 s, Int32 t, Int32 r, Int32 q) => instance.TexCoord4(s, t, r, q);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4iv")]
        [CLSCompliant(false)]
        public static void TexCoord4([CountAttribute(Count = 4)] Int32[] v) => instance.TexCoord4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4iv")]
        [CLSCompliant(false)]
        public static void TexCoord4([CountAttribute(Count = 4)] ref Int32 v) => instance.TexCoord4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4iv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord4([CountAttribute(Count = 4)] Int32* v) => instance.TexCoord4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="s">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="t">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="r">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="q">
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4s")]
        public static void TexCoord4(Int16 s, Int16 t, Int16 r, Int16 q) => instance.TexCoord4(s, t, r, q);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4sv")]
        [CLSCompliant(false)]
        public static void TexCoord4([CountAttribute(Count = 4)] Int16[] v) => instance.TexCoord4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4sv")]
        [CLSCompliant(false)]
        public static void TexCoord4([CountAttribute(Count = 4)] ref Int16 v) => instance.TexCoord4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexCoord4sv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoord4([CountAttribute(Count = 4)] Int16* v) => instance.TexCoord4(v);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP1ui")]
        [CLSCompliant(false)]
        public static void TexCoordP1(OpenToolkit.OpenGL.PackedPointerType type, Int32 coords) => instance.TexCoordP1(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP1ui")]
        [CLSCompliant(false)]
        public static void TexCoordP1(OpenToolkit.OpenGL.PackedPointerType type, UInt32 coords) => instance.TexCoordP1(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP1uiv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoordP1(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] Int32* coords) => instance.TexCoordP1(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP1uiv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoordP1(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] UInt32* coords) => instance.TexCoordP1(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP2ui")]
        [CLSCompliant(false)]
        public static void TexCoordP2(OpenToolkit.OpenGL.PackedPointerType type, Int32 coords) => instance.TexCoordP2(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP2ui")]
        [CLSCompliant(false)]
        public static void TexCoordP2(OpenToolkit.OpenGL.PackedPointerType type, UInt32 coords) => instance.TexCoordP2(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP2uiv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoordP2(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] Int32* coords) => instance.TexCoordP2(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP2uiv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoordP2(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] UInt32* coords) => instance.TexCoordP2(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP3ui")]
        [CLSCompliant(false)]
        public static void TexCoordP3(OpenToolkit.OpenGL.PackedPointerType type, Int32 coords) => instance.TexCoordP3(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP3ui")]
        [CLSCompliant(false)]
        public static void TexCoordP3(OpenToolkit.OpenGL.PackedPointerType type, UInt32 coords) => instance.TexCoordP3(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP3uiv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoordP3(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] Int32* coords) => instance.TexCoordP3(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP3uiv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoordP3(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] UInt32* coords) => instance.TexCoordP3(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP4ui")]
        [CLSCompliant(false)]
        public static void TexCoordP4(OpenToolkit.OpenGL.PackedPointerType type, Int32 coords) => instance.TexCoordP4(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP4ui")]
        [CLSCompliant(false)]
        public static void TexCoordP4(OpenToolkit.OpenGL.PackedPointerType type, UInt32 coords) => instance.TexCoordP4(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP4uiv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoordP4(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] Int32* coords) => instance.TexCoordP4(type, coords);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="coords">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glTexCoordP4uiv")]
        [CLSCompliant(false)]
        public static unsafe void TexCoordP4(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] UInt32* coords) => instance.TexCoordP4(type, coords);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer(Int32 size, OpenToolkit.OpenGL.TexCoordPointerType type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) => instance.TexCoordPointer(size, type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        [CLSCompliant(false)]
        public static void TexCoordPointer<T3>(Int32 size, OpenToolkit.OpenGL.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
            where T3 : struct
         => instance.TexCoordPointer<T3>(size, type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        [CLSCompliant(false)]
        public static void TexCoordPointer<T3>(Int32 size, OpenToolkit.OpenGL.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
            where T3 : struct
         => instance.TexCoordPointer<T3>(size, type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        [CLSCompliant(false)]
        public static void TexCoordPointer<T3>(Int32 size, OpenToolkit.OpenGL.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
            where T3 : struct
         => instance.TexCoordPointer<T3>(size, type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        public static void TexCoordPointer<T3>(Int32 size, OpenToolkit.OpenGL.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
            where T3 : struct
         => instance.TexCoordPointer<T3>(size, type, stride, ref pointer);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="param">
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexEnvf")]
        public static void TexEnv(OpenToolkit.OpenGL.TextureEnvTarget target, OpenToolkit.OpenGL.TextureEnvParameter pname, Single param) => instance.TexEnv(target, pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexEnvfv")]
        [CLSCompliant(false)]
        public static void TexEnv(OpenToolkit.OpenGL.TextureEnvTarget target, OpenToolkit.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] Single[] @params) => instance.TexEnv(target, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexEnvfv")]
        [CLSCompliant(false)]
        public static unsafe void TexEnv(OpenToolkit.OpenGL.TextureEnvTarget target, OpenToolkit.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] Single* @params) => instance.TexEnv(target, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="param">
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexEnvi")]
        public static void TexEnv(OpenToolkit.OpenGL.TextureEnvTarget target, OpenToolkit.OpenGL.TextureEnvParameter pname, Int32 param) => instance.TexEnv(target, pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexEnviv")]
        [CLSCompliant(false)]
        public static void TexEnv(OpenToolkit.OpenGL.TextureEnvTarget target, OpenToolkit.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] Int32[] @params) => instance.TexEnv(target, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Set texture environment parameters
        /// </summary>
        /// <param name="target">
        /// Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexEnviv")]
        [CLSCompliant(false)]
        public static unsafe void TexEnv(OpenToolkit.OpenGL.TextureEnvTarget target, OpenToolkit.OpenGL.TextureEnvParameter pname, [CountAttribute(Computed = "pname")] Int32* @params) => instance.TexEnv(target, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]</summary>
        /// <param name="coord"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGend")]
        public static void TexGend(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, Double param) => instance.TexGend(coord, pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGendv")]
        [CLSCompliant(false)]
        public static void TexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] Double[] @params) => instance.TexGen(coord, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGendv")]
        [CLSCompliant(false)]
        public static void TexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] ref Double @params) => instance.TexGen(coord, pname, ref @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGendv")]
        [CLSCompliant(false)]
        public static unsafe void TexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] Double* @params) => instance.TexGen(coord, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="param">
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGenf")]
        public static void TexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, Single param) => instance.TexGen(coord, pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGenfv")]
        [CLSCompliant(false)]
        public static void TexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] Single[] @params) => instance.TexGen(coord, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGenfv")]
        [CLSCompliant(false)]
        public static unsafe void TexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] Single* @params) => instance.TexGen(coord, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="param">
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGeni")]
        public static void TexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, Int32 param) => instance.TexGen(coord, pname, param);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGeniv")]
        [CLSCompliant(false)]
        public static void TexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] Int32[] @params) => instance.TexGen(coord, pname, @params);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Control the generation of texture coordinates
        /// </summary>
        /// <param name="coord">
        /// Specifies a texture coordinate. Must be one of S, T, R, or Q.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexGeniv")]
        [CLSCompliant(false)]
        public static unsafe void TexGen(OpenToolkit.OpenGL.TextureCoordName coord, OpenToolkit.OpenGL.TextureGenParameter pname, [CountAttribute(Computed = "pname")] Int32* @params) => instance.TexGen(coord, pname, @params);

        /// <summary>[requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static void TexImage1D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels) => instance.TexImage1D(target, level, internalformat, width, border, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        [CLSCompliant(false)]
        public static void TexImage1D<T7>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[] pixels)
            where T7 : struct
         => instance.TexImage1D<T7>(target, level, internalformat, width, border, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        [CLSCompliant(false)]
        public static void TexImage1D<T7>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[,] pixels)
            where T7 : struct
         => instance.TexImage1D<T7>(target, level, internalformat, width, border, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        [CLSCompliant(false)]
        public static void TexImage1D<T7>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T7[,,] pixels)
            where T7 : struct
         => instance.TexImage1D<T7>(target, level, internalformat, width, border, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static void TexImage1D<T7>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T7 pixels)
            where T7 : struct
         => instance.TexImage1D<T7>(target, level, internalformat, width, border, format, type, ref pixels);

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) => instance.TexImage2D(target, level, internalformat, width, height, border, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[] pixels)
            where T8 : struct
         => instance.TexImage2D<T8>(target, level, internalformat, width, height, border, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,] pixels)
            where T8 : struct
         => instance.TexImage2D<T8>(target, level, internalformat, width, height, border, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,,] pixels)
            where T8 : struct
         => instance.TexImage2D<T8>(target, level, internalformat, width, height, border, format, type, pixels);

        /// <summary>[requires: v1.0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T8 pixels)
            where T8 : struct
         => instance.TexImage2D<T8>(target, level, internalformat, width, height, border, format, type, ref pixels);

        /// <summary>[requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Establish the data storage, format, dimensions, and number of samples of a multisample texture's image
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the operation. target must be Texture2DMultisample or ProxyTexture2DMultisample.
        /// </param>
        /// <param name="samples">
        /// The number of samples in the multisample texture's image.
        /// </param>
        /// <param name="internalformat">
        /// The internal format to be used to store the multisample texture's image. internalformat must specify a color-renderable, depth-renderable, or stencil-renderable format.
        /// </param>
        /// <param name="width">
        /// The width of the multisample texture's image, in texels.
        /// </param>
        /// <param name="height">
        /// The height of the multisample texture's image, in texels.
        /// </param>
        /// <param name="fixedsamplelocations">
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glTexImage2DMultisample")]
        public static void TexImage2DMultisample(OpenToolkit.OpenGL.TextureTargetMultisample target, Int32 samples, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, bool fixedsamplelocations) => instance.TexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static void TexImage3D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels) => instance.TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        [CLSCompliant(false)]
        public static void TexImage3D<T9>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T9[] pixels)
            where T9 : struct
         => instance.TexImage3D<T9>(target, level, internalformat, width, height, depth, border, format, type, pixels);

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        [CLSCompliant(false)]
        public static void TexImage3D<T9>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T9[,] pixels)
            where T9 : struct
         => instance.TexImage3D<T9>(target, level, internalformat, width, height, depth, border, format, type, pixels);

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        [CLSCompliant(false)]
        public static void TexImage3D<T9>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T9[,,] pixels)
            where T9 : struct
         => instance.TexImage3D<T9>(target, level, internalformat, width, height, depth, border, format, type, pixels);

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
        /// </param>
        /// <param name="border">
        /// This value must be 0.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static void TexImage3D<T9>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] ref T9 pixels)
            where T9 : struct
         => instance.TexImage3D<T9>(target, level, internalformat, width, height, depth, border, format, type, ref pixels);

        /// <summary>[requires: v3.2 or ARB_texture_multisample|VERSION_3_2]
        /// Establish the data storage, format, dimensions, and number of samples of a multisample texture's image
        /// </summary>
        /// <param name="target">
        /// Specifies the target of the operation. target must be Texture2DMultisampleArray or ProxyTexture2DMultisampleArray.
        /// </param>
        /// <param name="samples">
        /// The number of samples in the multisample texture's image.
        /// </param>
        /// <param name="internalformat">
        /// The internal format to be used to store the multisample texture's image. internalformat must specify a color-renderable, depth-renderable, or stencil-renderable format.
        /// </param>
        /// <param name="width">
        /// The width of the multisample texture's image, in texels.
        /// </param>
        /// <param name="height">
        /// The height of the multisample texture's image, in texels.
        /// </param>
        /// <param name="depth">
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </param>
        /// <param name="fixedsamplelocations">
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_multisample|VERSION_3_2", Version = "3.2", EntryPoint = "glTexImage3DMultisample")]
        public static void TexImage3DMultisample(OpenToolkit.OpenGL.TextureTargetMultisample target, Int32 samples, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations) => instance.TexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterf")]
        public static void TexParameter(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.TextureParameterName pname, Single param) => instance.TexParameter(target, pname, param);

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] Single[] @params) => instance.TexParameter(target, pname, @params);

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] Single* @params) => instance.TexParameter(target, pname, @params);

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="param">
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteri")]
        public static void TexParameter(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.TextureParameterName pname, Int32 param) => instance.TexParameter(target, pname, param);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        [CLSCompliant(false)]
        public static void TexParameterI(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] Int32[] @params) => instance.TexParameterI(target, pname, @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        [CLSCompliant(false)]
        public static void TexParameterI(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref Int32 @params) => instance.TexParameterI(target, pname, ref @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        [CLSCompliant(false)]
        public static unsafe void TexParameterI(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] Int32* @params) => instance.TexParameterI(target, pname, @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        [CLSCompliant(false)]
        public static void TexParameterI(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] UInt32[] @params) => instance.TexParameterI(target, pname, @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        [CLSCompliant(false)]
        public static void TexParameterI(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] ref UInt32 @params) => instance.TexParameterI(target, pname, ref @params);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="target"></param>
        /// <param name="pname"></param>
        /// <param name="@params">[length: COMPSIZE(pname)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        [CLSCompliant(false)]
        public static unsafe void TexParameterI(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] UInt32* @params) => instance.TexParameterI(target, pname, @params);

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] Int32[] @params) => instance.TexParameter(target, pname, @params);

        /// <summary>[requires: v1.0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.
        /// </param>
        /// <param name="pname">
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: DepthStencilTextureMode, TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureLodBias, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.  For the vector commands (glTexParameter*v), pname can also be one of TextureBorderColor or TextureSwizzleRgba.
        /// </param>
        /// <param name="@params">[length: COMPSIZE(pname)]
        /// For the scalar commands, specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenToolkit.OpenGL.TextureTarget target, OpenToolkit.OpenGL.TextureParameterName pname, [CountAttribute(Computed = "pname")] Int32* @params) => instance.TexParameter(target, pname, @params);

        /// <summary>[requires: v4.2 or ARB_texture_storage|VERSION_4_2]
        /// Simultaneously specify storage for all levels of a one-dimensional texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be either Texture1D or ProxyTexture1D.
        /// </param>
        /// <param name="levels">
        /// Specify the number of texture levels.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage|VERSION_4_2", Version = "4.2", EntryPoint = "glTexStorage1D")]
        public static void TexStorage1D(OpenToolkit.OpenGL.TextureTarget1d target, Int32 levels, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 width) => instance.TexStorage1D(target, levels, internalformat, width);

        /// <summary>[requires: v4.2 or ARB_texture_storage|VERSION_4_2]
        /// Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, or ProxyTextureCubeMap.
        /// </param>
        /// <param name="levels">
        /// Specify the number of texture levels.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture, in texels.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage|VERSION_4_2", Version = "4.2", EntryPoint = "glTexStorage2D")]
        public static void TexStorage2D(OpenToolkit.OpenGL.TextureTarget2d target, Int32 levels, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 width, Int32 height) => instance.TexStorage2D(target, levels, internalformat, width, height);

        /// <summary>[requires: v4.3 or ARB_texture_storage_multisample|VERSION_4_3]
        /// Specify storage for a two-dimensional multisample texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be Texture2DMultisample or ProxyTexture2DMultisample.
        /// </param>
        /// <param name="samples">
        /// Specify the number of samples in the texture.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture, in texels.
        /// </param>
        /// <param name="fixedsamplelocations">
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage_multisample|VERSION_4_3", Version = "4.3", EntryPoint = "glTexStorage2DMultisample")]
        public static void TexStorage2DMultisample(OpenToolkit.OpenGL.TextureTargetMultisample2d target, Int32 samples, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 width, Int32 height, bool fixedsamplelocations) => instance.TexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);

        /// <summary>[requires: v4.2 or ARB_texture_storage|VERSION_4_2]
        /// Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be one of Texture3D, ProxyTexture3D, Texture2DArray, ProxyTexture2DArray, TextureCubeArray, or ProxyTextureCubeArray.
        /// </param>
        /// <param name="levels">
        /// Specify the number of texture levels.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture, in texels.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture, in texels.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage|VERSION_4_2", Version = "4.2", EntryPoint = "glTexStorage3D")]
        public static void TexStorage3D(OpenToolkit.OpenGL.TextureTarget3d target, Int32 levels, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth) => instance.TexStorage3D(target, levels, internalformat, width, height, depth);

        /// <summary>[requires: v4.3 or ARB_texture_storage_multisample|VERSION_4_3]
        /// Specify storage for a two-dimensional multisample array texture
        /// </summary>
        /// <param name="target">
        /// Specify the target of the operation. target must be Texture2DMultisampleArray or ProxyTexture2DMultisampleMultisample.
        /// </param>
        /// <param name="samples">
        /// Specify the number of samples in the texture.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the sized internal format to be used to store texture image data.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture, in texels.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture, in texels.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture, in layers.
        /// </param>
        /// <param name="fixedsamplelocations">
        /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_storage_multisample|VERSION_4_3", Version = "4.3", EntryPoint = "glTexStorage3DMultisample")]
        public static void TexStorage3DMultisample(OpenToolkit.OpenGL.TextureTargetMultisample3d target, Int32 samples, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations) => instance.TexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);

        /// <summary>[requires: v1.1]
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static void TexSubImage1D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width")] IntPtr pixels) => instance.TexSubImage1D(target, level, xoffset, width, format, type, pixels);

        /// <summary>[requires: v1.1]
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        [CLSCompliant(false)]
        public static void TexSubImage1D<T6>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T6[] pixels)
            where T6 : struct
         => instance.TexSubImage1D<T6>(target, level, xoffset, width, format, type, pixels);

        /// <summary>[requires: v1.1]
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        [CLSCompliant(false)]
        public static void TexSubImage1D<T6>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T6[,] pixels)
            where T6 : struct
         => instance.TexSubImage1D<T6>(target, level, xoffset, width, format, type, pixels);

        /// <summary>[requires: v1.1]
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        [CLSCompliant(false)]
        public static void TexSubImage1D<T6>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] T6[,,] pixels)
            where T6 : struct
         => instance.TexSubImage1D<T6>(target, level, xoffset, width, format, type, pixels);

        /// <summary>[requires: v1.1]
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture1D.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static void TexSubImage1D<T6>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width")] ref T6 pixels)
            where T6 : struct
         => instance.TexSubImage1D<T6>(target, level, xoffset, width, format, type, ref pixels);

        /// <summary>[requires: v1.1]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or Texture1DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height")] IntPtr pixels) => instance.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);

        /// <summary>[requires: v1.1]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or Texture1DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[] pixels)
            where T8 : struct
         => instance.TexSubImage2D<T8>(target, level, xoffset, yoffset, width, height, format, type, pixels);

        /// <summary>[requires: v1.1]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or Texture1DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,] pixels)
            where T8 : struct
         => instance.TexSubImage2D<T8>(target, level, xoffset, yoffset, width, height, format, type, pixels);

        /// <summary>[requires: v1.1]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or Texture1DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] T8[,,] pixels)
            where T8 : struct
         => instance.TexSubImage2D<T8>(target, level, xoffset, yoffset, width, height, format, type, pixels);

        /// <summary>[requires: v1.1]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or Texture1DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height")] ref T8 pixels)
            where T8 : struct
         => instance.TexSubImage2D<T8>(target, level, xoffset, yoffset, width, height, format, type, ref pixels);

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static void TexSubImage3D(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [CountAttribute(Computed = "format,type,width,height,depth")] IntPtr pixels) => instance.TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        [CLSCompliant(false)]
        public static void TexSubImage3D<T10>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[] pixels)
            where T10 : struct
         => instance.TexSubImage3D<T10>(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        [CLSCompliant(false)]
        public static void TexSubImage3D<T10>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[,] pixels)
            where T10 : struct
         => instance.TexSubImage3D<T10>(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        [CLSCompliant(false)]
        public static void TexSubImage3D<T10>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] T10[,,] pixels)
            where T10 : struct
         => instance.TexSubImage3D<T10>(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        /// <summary>[requires: v1.2]
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// Specifies the target texture. Must be Texture3D or Texture2DArray.
        /// </param>
        /// <param name="level">
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset">
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset">
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="zoffset">
        /// Specifies a texel offset in the z direction within the texture array.
        /// </param>
        /// <param name="width">
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height">
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="depth">
        /// Specifies the depth of the texture subimage.
        /// </param>
        /// <param name="format">
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
        /// </param>
        /// <param name="pixels">[length: COMPSIZE(format,type,width,height,depth)]
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static void TexSubImage3D<T10>(OpenToolkit.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute, CountAttribute(Computed = "format,type,width,height,depth")] ref T10 pixels)
            where T10 : struct
         => instance.TexSubImage3D<T10>(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ref pixels);

        /// <summary>[requires: v4.5 or ARB_texture_barrier|VERSION_4_5]</summary>
        [AutoGenerated(Category = "ARB_texture_barrier|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureBarrier")]
        public static void TextureBarrier() => instance.TextureBarrier();

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="internalformat"></param>
        /// <param name="buffer"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureBuffer")]
        [CLSCompliant(false)]
        public static void TextureBuffer(Int32 texture, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 buffer) => instance.TextureBuffer(texture, internalformat, buffer);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="internalformat"></param>
        /// <param name="buffer"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureBuffer")]
        [CLSCompliant(false)]
        public static void TextureBuffer(UInt32 texture, OpenToolkit.OpenGL.SizedInternalFormat internalformat, UInt32 buffer) => instance.TextureBuffer(texture, internalformat, buffer);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="internalformat"></param>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureBufferRange")]
        [CLSCompliant(false)]
        public static void TextureBufferRange(Int32 texture, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 buffer, IntPtr offset, Int32 size) => instance.TextureBufferRange(texture, internalformat, buffer, offset, size);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="internalformat"></param>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureBufferRange")]
        [CLSCompliant(false)]
        public static void TextureBufferRange(Int32 texture, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 buffer, IntPtr offset, IntPtr size) => instance.TextureBufferRange(texture, internalformat, buffer, offset, size);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="internalformat"></param>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureBufferRange")]
        [CLSCompliant(false)]
        public static void TextureBufferRange(UInt32 texture, OpenToolkit.OpenGL.SizedInternalFormat internalformat, UInt32 buffer, IntPtr offset, Int32 size) => instance.TextureBufferRange(texture, internalformat, buffer, offset, size);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="internalformat"></param>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureBufferRange")]
        [CLSCompliant(false)]
        public static void TextureBufferRange(UInt32 texture, OpenToolkit.OpenGL.SizedInternalFormat internalformat, UInt32 buffer, IntPtr offset, IntPtr size) => instance.TextureBufferRange(texture, internalformat, buffer, offset, size);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterf")]
        [CLSCompliant(false)]
        public static void TextureParameter(Int32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Single param) => instance.TextureParameter(texture, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterf")]
        [CLSCompliant(false)]
        public static void TextureParameter(UInt32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Single param) => instance.TextureParameter(texture, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterfv")]
        [CLSCompliant(false)]
        public static void TextureParameter(Int32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Single[] param) => instance.TextureParameter(texture, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void TextureParameter(Int32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Single* param) => instance.TextureParameter(texture, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterfv")]
        [CLSCompliant(false)]
        public static void TextureParameter(UInt32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Single[] param) => instance.TextureParameter(texture, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void TextureParameter(UInt32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Single* param) => instance.TextureParameter(texture, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameteri")]
        [CLSCompliant(false)]
        public static void TextureParameter(Int32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Int32 param) => instance.TextureParameter(texture, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameteri")]
        [CLSCompliant(false)]
        public static void TextureParameter(UInt32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Int32 param) => instance.TextureParameter(texture, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterIiv")]
        [CLSCompliant(false)]
        public static void TextureParameterI(Int32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Int32[] @params) => instance.TextureParameterI(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterIiv")]
        [CLSCompliant(false)]
        public static void TextureParameterI(Int32 texture, OpenToolkit.OpenGL.TextureParameterName pname, ref Int32 @params) => instance.TextureParameterI(texture, pname, ref @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterIiv")]
        [CLSCompliant(false)]
        public static unsafe void TextureParameterI(Int32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Int32* @params) => instance.TextureParameterI(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterIiv")]
        [CLSCompliant(false)]
        public static void TextureParameterI(UInt32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Int32[] @params) => instance.TextureParameterI(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterIiv")]
        [CLSCompliant(false)]
        public static void TextureParameterI(UInt32 texture, OpenToolkit.OpenGL.TextureParameterName pname, ref Int32 @params) => instance.TextureParameterI(texture, pname, ref @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterIiv")]
        [CLSCompliant(false)]
        public static unsafe void TextureParameterI(UInt32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Int32* @params) => instance.TextureParameterI(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterIuiv")]
        [CLSCompliant(false)]
        public static void TextureParameterI(UInt32 texture, OpenToolkit.OpenGL.TextureParameterName pname, UInt32[] @params) => instance.TextureParameterI(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterIuiv")]
        [CLSCompliant(false)]
        public static void TextureParameterI(UInt32 texture, OpenToolkit.OpenGL.TextureParameterName pname, ref UInt32 @params) => instance.TextureParameterI(texture, pname, ref @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="@params"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameterIuiv")]
        [CLSCompliant(false)]
        public static unsafe void TextureParameterI(UInt32 texture, OpenToolkit.OpenGL.TextureParameterName pname, UInt32* @params) => instance.TextureParameterI(texture, pname, @params);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameteriv")]
        [CLSCompliant(false)]
        public static void TextureParameter(Int32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Int32[] param) => instance.TextureParameter(texture, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void TextureParameter(Int32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Int32* param) => instance.TextureParameter(texture, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameteriv")]
        [CLSCompliant(false)]
        public static void TextureParameter(UInt32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Int32[] param) => instance.TextureParameter(texture, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="pname"></param>
        /// <param name="param"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void TextureParameter(UInt32 texture, OpenToolkit.OpenGL.TextureParameterName pname, Int32* param) => instance.TextureParameter(texture, pname, param);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="levels"></param>
        /// <param name="internalformat"></param>
        /// <param name="width"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureStorage1D")]
        [CLSCompliant(false)]
        public static void TextureStorage1D(Int32 texture, Int32 levels, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 width) => instance.TextureStorage1D(texture, levels, internalformat, width);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="levels"></param>
        /// <param name="internalformat"></param>
        /// <param name="width"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureStorage1D")]
        [CLSCompliant(false)]
        public static void TextureStorage1D(UInt32 texture, Int32 levels, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 width) => instance.TextureStorage1D(texture, levels, internalformat, width);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="levels"></param>
        /// <param name="internalformat"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureStorage2D")]
        [CLSCompliant(false)]
        public static void TextureStorage2D(Int32 texture, Int32 levels, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 width, Int32 height) => instance.TextureStorage2D(texture, levels, internalformat, width, height);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="levels"></param>
        /// <param name="internalformat"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureStorage2D")]
        [CLSCompliant(false)]
        public static void TextureStorage2D(UInt32 texture, Int32 levels, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 width, Int32 height) => instance.TextureStorage2D(texture, levels, internalformat, width, height);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="samples"></param>
        /// <param name="internalformat"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="fixedsamplelocations"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureStorage2DMultisample")]
        [CLSCompliant(false)]
        public static void TextureStorage2DMultisample(Int32 texture, Int32 samples, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 width, Int32 height, bool fixedsamplelocations) => instance.TextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="samples"></param>
        /// <param name="internalformat"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="fixedsamplelocations"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureStorage2DMultisample")]
        [CLSCompliant(false)]
        public static void TextureStorage2DMultisample(UInt32 texture, Int32 samples, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 width, Int32 height, bool fixedsamplelocations) => instance.TextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="levels"></param>
        /// <param name="internalformat"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureStorage3D")]
        [CLSCompliant(false)]
        public static void TextureStorage3D(Int32 texture, Int32 levels, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth) => instance.TextureStorage3D(texture, levels, internalformat, width, height, depth);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="levels"></param>
        /// <param name="internalformat"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureStorage3D")]
        [CLSCompliant(false)]
        public static void TextureStorage3D(UInt32 texture, Int32 levels, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth) => instance.TextureStorage3D(texture, levels, internalformat, width, height, depth);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="samples"></param>
        /// <param name="internalformat"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="fixedsamplelocations"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureStorage3DMultisample")]
        [CLSCompliant(false)]
        public static void TextureStorage3DMultisample(Int32 texture, Int32 samples, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations) => instance.TextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="samples"></param>
        /// <param name="internalformat"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="fixedsamplelocations"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureStorage3DMultisample")]
        [CLSCompliant(false)]
        public static void TextureStorage3DMultisample(UInt32 texture, Int32 samples, OpenToolkit.OpenGL.SizedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations) => instance.TextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void TextureSubImage1D(Int32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, IntPtr pixels) => instance.TextureSubImage1D(texture, level, xoffset, width, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void TextureSubImage1D<T6>(Int32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct
         => instance.TextureSubImage1D<T6>(texture, level, xoffset, width, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void TextureSubImage1D<T6>(Int32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct
         => instance.TextureSubImage1D<T6>(texture, level, xoffset, width, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void TextureSubImage1D<T6>(Int32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct
         => instance.TextureSubImage1D<T6>(texture, level, xoffset, width, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void TextureSubImage1D<T6>(Int32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct
         => instance.TextureSubImage1D<T6>(texture, level, xoffset, width, format, type, ref pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void TextureSubImage1D(UInt32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, IntPtr pixels) => instance.TextureSubImage1D(texture, level, xoffset, width, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void TextureSubImage1D<T6>(UInt32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct
         => instance.TextureSubImage1D<T6>(texture, level, xoffset, width, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void TextureSubImage1D<T6>(UInt32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct
         => instance.TextureSubImage1D<T6>(texture, level, xoffset, width, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void TextureSubImage1D<T6>(UInt32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct
         => instance.TextureSubImage1D<T6>(texture, level, xoffset, width, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="width"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage1D")]
        [CLSCompliant(false)]
        public static void TextureSubImage1D<T6>(UInt32 texture, Int32 level, Int32 xoffset, Int32 width, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct
         => instance.TextureSubImage1D<T6>(texture, level, xoffset, width, format, type, ref pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void TextureSubImage2D(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, IntPtr pixels) => instance.TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void TextureSubImage2D<T8>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
         => instance.TextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void TextureSubImage2D<T8>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
         => instance.TextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void TextureSubImage2D<T8>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
         => instance.TextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void TextureSubImage2D<T8>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
         => instance.TextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, type, ref pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void TextureSubImage2D(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, IntPtr pixels) => instance.TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void TextureSubImage2D<T8>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
         => instance.TextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void TextureSubImage2D<T8>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
         => instance.TextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void TextureSubImage2D<T8>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
         => instance.TextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage2D")]
        [CLSCompliant(false)]
        public static void TextureSubImage2D<T8>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
         => instance.TextureSubImage2D<T8>(texture, level, xoffset, yoffset, width, height, format, type, ref pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void TextureSubImage3D(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, IntPtr pixels) => instance.TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void TextureSubImage3D<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[] pixels)
            where T10 : struct
         => instance.TextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void TextureSubImage3D<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[,] pixels)
            where T10 : struct
         => instance.TextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void TextureSubImage3D<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[,,] pixels)
            where T10 : struct
         => instance.TextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void TextureSubImage3D<T10>(Int32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T10 pixels)
            where T10 : struct
         => instance.TextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ref pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void TextureSubImage3D(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, IntPtr pixels) => instance.TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void TextureSubImage3D<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[] pixels)
            where T10 : struct
         => instance.TextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void TextureSubImage3D<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[,] pixels)
            where T10 : struct
         => instance.TextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void TextureSubImage3D<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] T10[,,] pixels)
            where T10 : struct
         => instance.TextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="texture"></param>
        /// <param name="level"></param>
        /// <param name="xoffset"></param>
        /// <param name="yoffset"></param>
        /// <param name="zoffset"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="depth"></param>
        /// <param name="format"></param>
        /// <param name="type"></param>
        /// <param name="pixels"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTextureSubImage3D")]
        [CLSCompliant(false)]
        public static void TextureSubImage3D<T10>(UInt32 texture, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenToolkit.OpenGL.PixelFormat format, OpenToolkit.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T10 pixels)
            where T10 : struct
         => instance.TextureSubImage3D<T10>(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ref pixels);

        /// <summary>[requires: v4.3 or ARB_texture_view|VERSION_4_3]
        /// Initialize a texture as a data alias of another texture's data store
        /// </summary>
        /// <param name="texture">
        /// Specifies the texture object to be initialized as a view.
        /// </param>
        /// <param name="target">
        /// Specifies the target to be used for the newly initialized texture.
        /// </param>
        /// <param name="origtexture">
        /// Specifies the name of a texture object of which to make a view.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format for the newly created view.
        /// </param>
        /// <param name="minlevel">
        /// Specifies lowest level of detail of the view.
        /// </param>
        /// <param name="numlevels">
        /// Specifies the number of levels of detail to include in the view.
        /// </param>
        /// <param name="minlayer">
        /// Specifies the index of the first layer to include in the view.
        /// </param>
        /// <param name="numlayers">
        /// Specifies the number of layers to include in the view.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_view|VERSION_4_3", Version = "4.3", EntryPoint = "glTextureView")]
        [CLSCompliant(false)]
        public static void TextureView(Int32 texture, OpenToolkit.OpenGL.TextureTarget target, Int32 origtexture, OpenToolkit.OpenGL.PixelInternalFormat internalformat, Int32 minlevel, Int32 numlevels, Int32 minlayer, Int32 numlayers) => instance.TextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);

        /// <summary>[requires: v4.3 or ARB_texture_view|VERSION_4_3]
        /// Initialize a texture as a data alias of another texture's data store
        /// </summary>
        /// <param name="texture">
        /// Specifies the texture object to be initialized as a view.
        /// </param>
        /// <param name="target">
        /// Specifies the target to be used for the newly initialized texture.
        /// </param>
        /// <param name="origtexture">
        /// Specifies the name of a texture object of which to make a view.
        /// </param>
        /// <param name="internalformat">
        /// Specifies the internal format for the newly created view.
        /// </param>
        /// <param name="minlevel">
        /// Specifies lowest level of detail of the view.
        /// </param>
        /// <param name="numlevels">
        /// Specifies the number of levels of detail to include in the view.
        /// </param>
        /// <param name="minlayer">
        /// Specifies the index of the first layer to include in the view.
        /// </param>
        /// <param name="numlayers">
        /// Specifies the number of layers to include in the view.
        /// </param>
        [AutoGenerated(Category = "ARB_texture_view|VERSION_4_3", Version = "4.3", EntryPoint = "glTextureView")]
        [CLSCompliant(false)]
        public static void TextureView(UInt32 texture, OpenToolkit.OpenGL.TextureTarget target, UInt32 origtexture, OpenToolkit.OpenGL.PixelInternalFormat internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers) => instance.TextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="index"></param>
        /// <param name="buffer"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTransformFeedbackBufferBase")]
        [CLSCompliant(false)]
        public static void TransformFeedbackBufferBase(Int32 xfb, Int32 index, Int32 buffer) => instance.TransformFeedbackBufferBase(xfb, index, buffer);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="index"></param>
        /// <param name="buffer"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTransformFeedbackBufferBase")]
        [CLSCompliant(false)]
        public static void TransformFeedbackBufferBase(UInt32 xfb, UInt32 index, UInt32 buffer) => instance.TransformFeedbackBufferBase(xfb, index, buffer);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="index"></param>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTransformFeedbackBufferRange")]
        [CLSCompliant(false)]
        public static void TransformFeedbackBufferRange(Int32 xfb, Int32 index, Int32 buffer, IntPtr offset, Int32 size) => instance.TransformFeedbackBufferRange(xfb, index, buffer, offset, size);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="index"></param>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTransformFeedbackBufferRange")]
        [CLSCompliant(false)]
        public static void TransformFeedbackBufferRange(Int32 xfb, Int32 index, Int32 buffer, IntPtr offset, IntPtr size) => instance.TransformFeedbackBufferRange(xfb, index, buffer, offset, size);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="index"></param>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTransformFeedbackBufferRange")]
        [CLSCompliant(false)]
        public static void TransformFeedbackBufferRange(UInt32 xfb, UInt32 index, UInt32 buffer, IntPtr offset, Int32 size) => instance.TransformFeedbackBufferRange(xfb, index, buffer, offset, size);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="xfb"></param>
        /// <param name="index"></param>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glTransformFeedbackBufferRange")]
        [CLSCompliant(false)]
        public static void TransformFeedbackBufferRange(UInt32 xfb, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size) => instance.TransformFeedbackBufferRange(xfb, index, buffer, offset, size);

        /// <summary>[requires: v3.0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="count">
        /// The number of varying variables used for transform feedback.
        /// </param>
        /// <param name="varyings">[length: count]
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </param>
        /// <param name="bufferMode">
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be InterleavedAttribs or SeparateAttribs.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        [CLSCompliant(false)]
        public static void TransformFeedbackVaryings(Int32 program, Int32 count, [CountAttribute(Parameter = "count")] String[] varyings, OpenToolkit.OpenGL.TransformFeedbackMode bufferMode) => instance.TransformFeedbackVaryings(program, count, varyings, bufferMode);

        /// <summary>[requires: v3.0]
        /// Specify values to record in transform feedback buffers
        /// </summary>
        /// <param name="program">
        /// The name of the target program object.
        /// </param>
        /// <param name="count">
        /// The number of varying variables used for transform feedback.
        /// </param>
        /// <param name="varyings">[length: count]
        /// An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
        /// </param>
        /// <param name="bufferMode">
        /// Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be InterleavedAttribs or SeparateAttribs.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        [CLSCompliant(false)]
        public static void TransformFeedbackVaryings(UInt32 program, Int32 count, [CountAttribute(Parameter = "count")] String[] varyings, OpenToolkit.OpenGL.TransformFeedbackMode bufferMode) => instance.TransformFeedbackVaryings(program, count, varyings, bufferMode);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix by a translation matrix
        /// </summary>
        /// <param name="x">
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        /// <param name="y">
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        /// <param name="z">
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTranslated")]
        public static void Translate(Double x, Double y, Double z) => instance.Translate(x, y, z);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Multiply the current matrix by a translation matrix
        /// </summary>
        /// <param name="x">
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        /// <param name="y">
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        /// <param name="z">
        /// Specify the x, y, and z coordinates of a translation vector.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTranslatef")]
        public static void Translate(Single x, Single y, Single z) => instance.Translate(x, y, z);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="x">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform1d")]
        public static void Uniform1(Int32 location, Double x) => instance.Uniform1(location, x);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform1dv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Double[] value) => instance.Uniform1(location, count, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform1dv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] ref Double value) => instance.Uniform1(location, count, ref value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform1dv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Double* value) => instance.Uniform1(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1f")]
        public static void Uniform1(Int32 location, Single v0) => instance.Uniform1(location, v0);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Single[] value) => instance.Uniform1(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] ref Single value) => instance.Uniform1(location, count, ref value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Single* value) => instance.Uniform1(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1i")]
        public static void Uniform1(Int32 location, Int32 v0) => instance.Uniform1(location, v0);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Int32[] value) => instance.Uniform1(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] ref Int32 value) => instance.Uniform1(location, count, ref value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] Int32* value) => instance.Uniform1(location, count, value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1ui")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, UInt32 v0) => instance.Uniform1(location, v0);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] UInt32[] value) => instance.Uniform1(location, count, value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] ref UInt32 value) => instance.Uniform1(location, count, ref value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*1]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform1(Int32 location, Int32 count, [CountAttribute(Parameter = "count*1")] UInt32* value) => instance.Uniform1(location, count, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="x">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="y">
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform2d")]
        public static void Uniform2(Int32 location, Double x, Double y) => instance.Uniform2(location, x, y);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform2dv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Double[] value) => instance.Uniform2(location, count, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform2dv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref Double value) => instance.Uniform2(location, count, ref value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform2dv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Double* value) => instance.Uniform2(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2f")]
        public static void Uniform2(Int32 location, Single v0, Single v1) => instance.Uniform2(location, v0, v1);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single[] value) => instance.Uniform2(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref Single value) => instance.Uniform2(location, count, ref value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Single* value) => instance.Uniform2(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2i")]
        public static void Uniform2(Int32 location, Int32 v0, Int32 v1) => instance.Uniform2(location, v0, v1);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32[] value) => instance.Uniform2(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] Int32* value) => instance.Uniform2(location, count, value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2ui")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, UInt32 v0, UInt32 v1) => instance.Uniform2(location, v0, v1);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt32[] value) => instance.Uniform2(location, count, value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] ref UInt32 value) => instance.Uniform2(location, count, ref value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*2]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform2(Int32 location, Int32 count, [CountAttribute(Parameter = "count*2")] UInt32* value) => instance.Uniform2(location, count, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="x">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="y">
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform3d")]
        public static void Uniform3(Int32 location, Double x, Double y, Double z) => instance.Uniform3(location, x, y, z);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform3dv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Double[] value) => instance.Uniform3(location, count, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform3dv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Double value) => instance.Uniform3(location, count, ref value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform3dv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Double* value) => instance.Uniform3(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3f")]
        public static void Uniform3(Int32 location, Single v0, Single v1, Single v2) => instance.Uniform3(location, v0, v1, v2);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single[] value) => instance.Uniform3(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Single value) => instance.Uniform3(location, count, ref value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Single* value) => instance.Uniform3(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3i")]
        public static void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2) => instance.Uniform3(location, v0, v1, v2);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32[] value) => instance.Uniform3(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref Int32 value) => instance.Uniform3(location, count, ref value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] Int32* value) => instance.Uniform3(location, count, value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3ui")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2) => instance.Uniform3(location, v0, v1, v2);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt32[] value) => instance.Uniform3(location, count, value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] ref UInt32 value) => instance.Uniform3(location, count, ref value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*3]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform3(Int32 location, Int32 count, [CountAttribute(Parameter = "count*3")] UInt32* value) => instance.Uniform3(location, count, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="x">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="y">
        /// For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="w">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform4d")]
        public static void Uniform4(Int32 location, Double x, Double y, Double z, Double w) => instance.Uniform4(location, x, y, z, w);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform4dv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Double[] value) => instance.Uniform4(location, count, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform4dv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Double value) => instance.Uniform4(location, count, ref value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniform4dv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Double* value) => instance.Uniform4(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4f")]
        public static void Uniform4(Int32 location, Single v0, Single v1, Single v2, Single v3) => instance.Uniform4(location, v0, v1, v2, v3);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single[] value) => instance.Uniform4(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Single value) => instance.Uniform4(location, count, ref value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Single* value) => instance.Uniform4(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4i")]
        public static void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3) => instance.Uniform4(location, v0, v1, v2, v3);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32[] value) => instance.Uniform4(location, count, value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref Int32 value) => instance.Uniform4(location, count, ref value);

        /// <summary>[requires: v2.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] Int32* value) => instance.Uniform4(location, count, value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3">
        /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4ui")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3) => instance.Uniform4(location, v0, v1, v2, v3);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt32[] value) => instance.Uniform4(location, count, value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] ref UInt32 value) => instance.Uniform4(location, count, ref value);

        /// <summary>[requires: v3.0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count">
        /// For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
        /// </param>
        /// <param name="value">[length: count*4]
        /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform4(Int32 location, Int32 count, [CountAttribute(Parameter = "count*4")] UInt32* value) => instance.Uniform4(location, count, value);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Assign a binding point to an active uniform block
        /// </summary>
        /// <param name="program">
        /// The name of a program object containing the active uniform block whose binding to assign.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// The index of the active uniform block within program whose binding to assign.
        /// </param>
        /// <param name="uniformBlockBinding">
        /// Specifies the binding point to which to bind the uniform block with index uniformBlockIndex within program.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glUniformBlockBinding")]
        [CLSCompliant(false)]
        public static void UniformBlockBinding(Int32 program, Int32 uniformBlockIndex, Int32 uniformBlockBinding) => instance.UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);

        /// <summary>[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]
        /// Assign a binding point to an active uniform block
        /// </summary>
        /// <param name="program">
        /// The name of a program object containing the active uniform block whose binding to assign.
        /// </param>
        /// <param name="uniformBlockIndex">
        /// The index of the active uniform block within program whose binding to assign.
        /// </param>
        /// <param name="uniformBlockBinding">
        /// Specifies the binding point to which to bind the uniform block with index uniformBlockIndex within program.
        /// </param>
        [AutoGenerated(Category = "ARB_uniform_buffer_object|VERSION_3_1", Version = "3.1", EntryPoint = "glUniformBlockBinding")]
        [CLSCompliant(false)]
        public static void UniformBlockBinding(UInt32 program, UInt32 uniformBlockIndex, UInt32 uniformBlockBinding) => instance.UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Double[] value) => instance.UniformMatrix2(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] ref Double value) => instance.UniformMatrix2(location, count, transpose, ref value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2dv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Double* value) => instance.UniformMatrix2(location, count, transpose, value);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single[] value) => instance.UniformMatrix2(location, count, transpose, value);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] ref Single value) => instance.UniformMatrix2(location, count, transpose, ref value);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*4")] Single* value) => instance.UniformMatrix2(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x3dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double[] value) => instance.UniformMatrix2x3(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x3dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Double value) => instance.UniformMatrix2x3(location, count, transpose, ref value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x3dv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double* value) => instance.UniformMatrix2x3(location, count, transpose, value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single[] value) => instance.UniformMatrix2x3(location, count, transpose, value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Single value) => instance.UniformMatrix2x3(location, count, transpose, ref value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value) => instance.UniformMatrix2x3(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x4dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double[] value) => instance.UniformMatrix2x4(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x4dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Double value) => instance.UniformMatrix2x4(location, count, transpose, ref value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix2x4dv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double* value) => instance.UniformMatrix2x4(location, count, transpose, value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single[] value) => instance.UniformMatrix2x4(location, count, transpose, value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Single value) => instance.UniformMatrix2x4(location, count, transpose, ref value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value) => instance.UniformMatrix2x4(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Double[] value) => instance.UniformMatrix3(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] ref Double value) => instance.UniformMatrix3(location, count, transpose, ref value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3dv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Double* value) => instance.UniformMatrix3(location, count, transpose, value);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single[] value) => instance.UniformMatrix3(location, count, transpose, value);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] ref Single value) => instance.UniformMatrix3(location, count, transpose, ref value);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*9")] Single* value) => instance.UniformMatrix3(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x2dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double[] value) => instance.UniformMatrix3x2(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x2dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Double value) => instance.UniformMatrix3x2(location, count, transpose, ref value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x2dv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Double* value) => instance.UniformMatrix3x2(location, count, transpose, value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single[] value) => instance.UniformMatrix3x2(location, count, transpose, value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] ref Single value) => instance.UniformMatrix3x2(location, count, transpose, ref value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*6]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*6")] Single* value) => instance.UniformMatrix3x2(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x4dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double[] value) => instance.UniformMatrix3x4(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x4dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Double value) => instance.UniformMatrix3x4(location, count, transpose, ref value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix3x4dv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double* value) => instance.UniformMatrix3x4(location, count, transpose, value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single[] value) => instance.UniformMatrix3x4(location, count, transpose, value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Single value) => instance.UniformMatrix3x4(location, count, transpose, ref value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value) => instance.UniformMatrix3x4(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Double[] value) => instance.UniformMatrix4(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] ref Double value) => instance.UniformMatrix4(location, count, transpose, ref value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4dv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Double* value) => instance.UniformMatrix4(location, count, transpose, value);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single[] value) => instance.UniformMatrix4(location, count, transpose, value);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] ref Single value) => instance.UniformMatrix4(location, count, transpose, ref value);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*16")] Single* value) => instance.UniformMatrix4(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x2dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double[] value) => instance.UniformMatrix4x2(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x2dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Double value) => instance.UniformMatrix4x2(location, count, transpose, ref value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x2dv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Double* value) => instance.UniformMatrix4x2(location, count, transpose, value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single[] value) => instance.UniformMatrix4x2(location, count, transpose, value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] ref Single value) => instance.UniformMatrix4x2(location, count, transpose, ref value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*8]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*8")] Single* value) => instance.UniformMatrix4x2(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x3dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double[] value) => instance.UniformMatrix4x3(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x3dv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Double value) => instance.UniformMatrix4x3(location, count, transpose, ref value);

        /// <summary>[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "ARB_gpu_shader_fp64|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformMatrix4x3dv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Double* value) => instance.UniformMatrix4x3(location, count, transpose, value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single[] value) => instance.UniformMatrix4x3(location, count, transpose, value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] ref Single value) => instance.UniformMatrix4x3(location, count, transpose, ref value);

        /// <summary>[requires: v2.1]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*12]</param>
        [AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, [CountAttribute(Parameter = "count*12")] Single* value) => instance.UniformMatrix4x3(location, count, transpose, value);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Load active subroutine uniforms
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="count">
        /// Specifies the number of uniform indices stored in indices.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies the address of an array holding the indices to load into the shader subroutine variables.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformSubroutinesuiv")]
        [CLSCompliant(false)]
        public static void UniformSubroutines(OpenToolkit.OpenGL.ShaderType shadertype, Int32 count, [CountAttribute(Parameter = "count")] Int32[] indices) => instance.UniformSubroutines(shadertype, count, indices);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Load active subroutine uniforms
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="count">
        /// Specifies the number of uniform indices stored in indices.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies the address of an array holding the indices to load into the shader subroutine variables.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformSubroutinesuiv")]
        [CLSCompliant(false)]
        public static void UniformSubroutines(OpenToolkit.OpenGL.ShaderType shadertype, Int32 count, [CountAttribute(Parameter = "count")] ref Int32 indices) => instance.UniformSubroutines(shadertype, count, ref indices);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Load active subroutine uniforms
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="count">
        /// Specifies the number of uniform indices stored in indices.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies the address of an array holding the indices to load into the shader subroutine variables.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformSubroutinesuiv")]
        [CLSCompliant(false)]
        public static unsafe void UniformSubroutines(OpenToolkit.OpenGL.ShaderType shadertype, Int32 count, [CountAttribute(Parameter = "count")] Int32* indices) => instance.UniformSubroutines(shadertype, count, indices);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Load active subroutine uniforms
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="count">
        /// Specifies the number of uniform indices stored in indices.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies the address of an array holding the indices to load into the shader subroutine variables.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformSubroutinesuiv")]
        [CLSCompliant(false)]
        public static void UniformSubroutines(OpenToolkit.OpenGL.ShaderType shadertype, Int32 count, [CountAttribute(Parameter = "count")] UInt32[] indices) => instance.UniformSubroutines(shadertype, count, indices);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Load active subroutine uniforms
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="count">
        /// Specifies the number of uniform indices stored in indices.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies the address of an array holding the indices to load into the shader subroutine variables.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformSubroutinesuiv")]
        [CLSCompliant(false)]
        public static void UniformSubroutines(OpenToolkit.OpenGL.ShaderType shadertype, Int32 count, [CountAttribute(Parameter = "count")] ref UInt32 indices) => instance.UniformSubroutines(shadertype, count, ref indices);

        /// <summary>[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]
        /// Load active subroutine uniforms
        /// </summary>
        /// <param name="shadertype">
        /// Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.
        /// </param>
        /// <param name="count">
        /// Specifies the number of uniform indices stored in indices.
        /// </param>
        /// <param name="indices">[length: count]
        /// Specifies the address of an array holding the indices to load into the shader subroutine variables.
        /// </param>
        [AutoGenerated(Category = "ARB_shader_subroutine|VERSION_4_0", Version = "4.0", EntryPoint = "glUniformSubroutinesuiv")]
        [CLSCompliant(false)]
        public static unsafe void UniformSubroutines(OpenToolkit.OpenGL.ShaderType shadertype, Int32 count, [CountAttribute(Parameter = "count")] UInt32* indices) => instance.UniformSubroutines(shadertype, count, indices);

        /// <summary>[requires: v1.5]</summary>
        /// <param name="target"></param>
        [AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glUnmapBuffer")]
        public static bool UnmapBuffer(OpenToolkit.OpenGL.BufferTarget target) => instance.UnmapBuffer(target);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glUnmapNamedBuffer")]
        [CLSCompliant(false)]
        public static bool UnmapNamedBuffer(Int32 buffer) => instance.UnmapNamedBuffer(buffer);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="buffer"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glUnmapNamedBuffer")]
        [CLSCompliant(false)]
        public static bool UnmapNamedBuffer(UInt32 buffer) => instance.UnmapNamedBuffer(buffer);

        /// <summary>[requires: v2.0]
        /// Installs a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
        [CLSCompliant(false)]
        public static void UseProgram(Int32 program) => instance.UseProgram(program);

        /// <summary>[requires: v2.0]
        /// Installs a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
        [CLSCompliant(false)]
        public static void UseProgram(UInt32 program) => instance.UseProgram(program);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Bind stages of a program object to a program pipeline
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the program pipeline object to which to bind stages from program.
        /// </param>
        /// <param name="stages">
        /// Specifies a set of program stages to bind to the program pipeline object.
        /// </param>
        /// <param name="program">
        /// Specifies the program object containing the shader executables to use in pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glUseProgramStages")]
        [CLSCompliant(false)]
        public static void UseProgramStages(Int32 pipeline, OpenToolkit.OpenGL.ProgramStageMask stages, Int32 program) => instance.UseProgramStages(pipeline, stages, program);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Bind stages of a program object to a program pipeline
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the program pipeline object to which to bind stages from program.
        /// </param>
        /// <param name="stages">
        /// Specifies a set of program stages to bind to the program pipeline object.
        /// </param>
        /// <param name="program">
        /// Specifies the program object containing the shader executables to use in pipeline.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glUseProgramStages")]
        [CLSCompliant(false)]
        public static void UseProgramStages(UInt32 pipeline, OpenToolkit.OpenGL.ProgramStageMask stages, UInt32 program) => instance.UseProgramStages(pipeline, stages, program);

        /// <summary>[requires: v2.0]
        /// Validates a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object to be validated.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
        [CLSCompliant(false)]
        public static void ValidateProgram(Int32 program) => instance.ValidateProgram(program);

        /// <summary>[requires: v2.0]
        /// Validates a program object
        /// </summary>
        /// <param name="program">
        /// Specifies the handle of the program object to be validated.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
        [CLSCompliant(false)]
        public static void ValidateProgram(UInt32 program) => instance.ValidateProgram(program);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Validate a program pipeline object against current GL state
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object to validate.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glValidateProgramPipeline")]
        [CLSCompliant(false)]
        public static void ValidateProgramPipeline(Int32 pipeline) => instance.ValidateProgramPipeline(pipeline);

        /// <summary>[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]
        /// Validate a program pipeline object against current GL state
        /// </summary>
        /// <param name="pipeline">
        /// Specifies the name of a program pipeline object to validate.
        /// </param>
        [AutoGenerated(Category = "ARB_separate_shader_objects|VERSION_4_1", Version = "4.1", EntryPoint = "glValidateProgramPipeline")]
        [CLSCompliant(false)]
        public static void ValidateProgramPipeline(UInt32 pipeline) => instance.ValidateProgramPipeline(pipeline);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2d")]
        public static void Vertex2(Double x, Double y) => instance.Vertex2(x, y);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2dv")]
        [CLSCompliant(false)]
        public static void Vertex2([CountAttribute(Count = 2)] Double[] v) => instance.Vertex2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2dv")]
        [CLSCompliant(false)]
        public static void Vertex2([CountAttribute(Count = 2)] ref Double v) => instance.Vertex2(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2dv")]
        [CLSCompliant(false)]
        public static unsafe void Vertex2([CountAttribute(Count = 2)] Double* v) => instance.Vertex2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2f")]
        public static void Vertex2(Single x, Single y) => instance.Vertex2(x, y);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2fv")]
        [CLSCompliant(false)]
        public static void Vertex2([CountAttribute(Count = 2)] Single[] v) => instance.Vertex2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2fv")]
        [CLSCompliant(false)]
        public static void Vertex2([CountAttribute(Count = 2)] ref Single v) => instance.Vertex2(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2fv")]
        [CLSCompliant(false)]
        public static unsafe void Vertex2([CountAttribute(Count = 2)] Single* v) => instance.Vertex2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2i")]
        public static void Vertex2(Int32 x, Int32 y) => instance.Vertex2(x, y);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2iv")]
        [CLSCompliant(false)]
        public static void Vertex2([CountAttribute(Count = 2)] Int32[] v) => instance.Vertex2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2iv")]
        [CLSCompliant(false)]
        public static void Vertex2([CountAttribute(Count = 2)] ref Int32 v) => instance.Vertex2(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2iv")]
        [CLSCompliant(false)]
        public static unsafe void Vertex2([CountAttribute(Count = 2)] Int32* v) => instance.Vertex2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2s")]
        public static void Vertex2(Int16 x, Int16 y) => instance.Vertex2(x, y);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2sv")]
        [CLSCompliant(false)]
        public static void Vertex2([CountAttribute(Count = 2)] Int16[] v) => instance.Vertex2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2sv")]
        [CLSCompliant(false)]
        public static void Vertex2([CountAttribute(Count = 2)] ref Int16 v) => instance.Vertex2(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex2sv")]
        [CLSCompliant(false)]
        public static unsafe void Vertex2([CountAttribute(Count = 2)] Int16* v) => instance.Vertex2(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3d")]
        public static void Vertex3(Double x, Double y, Double z) => instance.Vertex3(x, y, z);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3dv")]
        [CLSCompliant(false)]
        public static void Vertex3([CountAttribute(Count = 3)] Double[] v) => instance.Vertex3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3dv")]
        [CLSCompliant(false)]
        public static void Vertex3([CountAttribute(Count = 3)] ref Double v) => instance.Vertex3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3dv")]
        [CLSCompliant(false)]
        public static unsafe void Vertex3([CountAttribute(Count = 3)] Double* v) => instance.Vertex3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3f")]
        public static void Vertex3(Single x, Single y, Single z) => instance.Vertex3(x, y, z);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3fv")]
        [CLSCompliant(false)]
        public static void Vertex3([CountAttribute(Count = 3)] Single[] v) => instance.Vertex3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3fv")]
        [CLSCompliant(false)]
        public static void Vertex3([CountAttribute(Count = 3)] ref Single v) => instance.Vertex3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3fv")]
        [CLSCompliant(false)]
        public static unsafe void Vertex3([CountAttribute(Count = 3)] Single* v) => instance.Vertex3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3i")]
        public static void Vertex3(Int32 x, Int32 y, Int32 z) => instance.Vertex3(x, y, z);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3iv")]
        [CLSCompliant(false)]
        public static void Vertex3([CountAttribute(Count = 3)] Int32[] v) => instance.Vertex3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3iv")]
        [CLSCompliant(false)]
        public static void Vertex3([CountAttribute(Count = 3)] ref Int32 v) => instance.Vertex3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3iv")]
        [CLSCompliant(false)]
        public static unsafe void Vertex3([CountAttribute(Count = 3)] Int32* v) => instance.Vertex3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3s")]
        public static void Vertex3(Int16 x, Int16 y, Int16 z) => instance.Vertex3(x, y, z);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3sv")]
        [CLSCompliant(false)]
        public static void Vertex3([CountAttribute(Count = 3)] Int16[] v) => instance.Vertex3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3sv")]
        [CLSCompliant(false)]
        public static void Vertex3([CountAttribute(Count = 3)] ref Int16 v) => instance.Vertex3(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex3sv")]
        [CLSCompliant(false)]
        public static unsafe void Vertex3([CountAttribute(Count = 3)] Int16* v) => instance.Vertex3(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="w">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4d")]
        public static void Vertex4(Double x, Double y, Double z, Double w) => instance.Vertex4(x, y, z, w);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4dv")]
        [CLSCompliant(false)]
        public static void Vertex4([CountAttribute(Count = 4)] Double[] v) => instance.Vertex4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4dv")]
        [CLSCompliant(false)]
        public static void Vertex4([CountAttribute(Count = 4)] ref Double v) => instance.Vertex4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4dv")]
        [CLSCompliant(false)]
        public static unsafe void Vertex4([CountAttribute(Count = 4)] Double* v) => instance.Vertex4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="w">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4f")]
        public static void Vertex4(Single x, Single y, Single z, Single w) => instance.Vertex4(x, y, z, w);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4fv")]
        [CLSCompliant(false)]
        public static void Vertex4([CountAttribute(Count = 4)] Single[] v) => instance.Vertex4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4fv")]
        [CLSCompliant(false)]
        public static void Vertex4([CountAttribute(Count = 4)] ref Single v) => instance.Vertex4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4fv")]
        [CLSCompliant(false)]
        public static unsafe void Vertex4([CountAttribute(Count = 4)] Single* v) => instance.Vertex4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="w">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4i")]
        public static void Vertex4(Int32 x, Int32 y, Int32 z, Int32 w) => instance.Vertex4(x, y, z, w);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4iv")]
        [CLSCompliant(false)]
        public static void Vertex4([CountAttribute(Count = 4)] Int32[] v) => instance.Vertex4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4iv")]
        [CLSCompliant(false)]
        public static void Vertex4([CountAttribute(Count = 4)] ref Int32 v) => instance.Vertex4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4iv")]
        [CLSCompliant(false)]
        public static unsafe void Vertex4([CountAttribute(Count = 4)] Int32* v) => instance.Vertex4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="x">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="y">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="z">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        /// <param name="w">
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4s")]
        public static void Vertex4(Int16 x, Int16 y, Int16 z, Int16 w) => instance.Vertex4(x, y, z, w);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4sv")]
        [CLSCompliant(false)]
        public static void Vertex4([CountAttribute(Count = 4)] Int16[] v) => instance.Vertex4(v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4sv")]
        [CLSCompliant(false)]
        public static void Vertex4([CountAttribute(Count = 4)] ref Int16 v) => instance.Vertex4(ref v);

        /// <summary>[requires: v1.0][deprecated: v3.2]
        /// Specify a vertex
        /// </summary>
        /// <param name="v">[length: 4]
        /// Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glVertex4sv")]
        [CLSCompliant(false)]
        public static unsafe void Vertex4([CountAttribute(Count = 4)] Int16* v) => instance.Vertex4(v);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="attribindex"></param>
        /// <param name="bindingindex"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayAttribBinding")]
        [CLSCompliant(false)]
        public static void VertexArrayAttribBinding(Int32 vaobj, Int32 attribindex, Int32 bindingindex) => instance.VertexArrayAttribBinding(vaobj, attribindex, bindingindex);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="attribindex"></param>
        /// <param name="bindingindex"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayAttribBinding")]
        [CLSCompliant(false)]
        public static void VertexArrayAttribBinding(UInt32 vaobj, UInt32 attribindex, UInt32 bindingindex) => instance.VertexArrayAttribBinding(vaobj, attribindex, bindingindex);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="attribindex"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="relativeoffset"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayAttribFormat")]
        [CLSCompliant(false)]
        public static void VertexArrayAttribFormat(Int32 vaobj, Int32 attribindex, Int32 size, OpenToolkit.OpenGL.VertexAttribType type, bool normalized, Int32 relativeoffset) => instance.VertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="attribindex"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="relativeoffset"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayAttribFormat")]
        [CLSCompliant(false)]
        public static void VertexArrayAttribFormat(UInt32 vaobj, UInt32 attribindex, Int32 size, OpenToolkit.OpenGL.VertexAttribType type, bool normalized, UInt32 relativeoffset) => instance.VertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="attribindex"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="relativeoffset"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayAttribIFormat")]
        [CLSCompliant(false)]
        public static void VertexArrayAttribIFormat(Int32 vaobj, Int32 attribindex, Int32 size, OpenToolkit.OpenGL.VertexAttribType type, Int32 relativeoffset) => instance.VertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="attribindex"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="relativeoffset"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayAttribIFormat")]
        [CLSCompliant(false)]
        public static void VertexArrayAttribIFormat(UInt32 vaobj, UInt32 attribindex, Int32 size, OpenToolkit.OpenGL.VertexAttribType type, UInt32 relativeoffset) => instance.VertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="attribindex"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="relativeoffset"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayAttribLFormat")]
        [CLSCompliant(false)]
        public static void VertexArrayAttribLFormat(Int32 vaobj, Int32 attribindex, Int32 size, OpenToolkit.OpenGL.VertexAttribType type, Int32 relativeoffset) => instance.VertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="attribindex"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="relativeoffset"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayAttribLFormat")]
        [CLSCompliant(false)]
        public static void VertexArrayAttribLFormat(UInt32 vaobj, UInt32 attribindex, Int32 size, OpenToolkit.OpenGL.VertexAttribType type, UInt32 relativeoffset) => instance.VertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="bindingindex"></param>
        /// <param name="divisor"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayBindingDivisor")]
        [CLSCompliant(false)]
        public static void VertexArrayBindingDivisor(Int32 vaobj, Int32 bindingindex, Int32 divisor) => instance.VertexArrayBindingDivisor(vaobj, bindingindex, divisor);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="bindingindex"></param>
        /// <param name="divisor"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayBindingDivisor")]
        [CLSCompliant(false)]
        public static void VertexArrayBindingDivisor(UInt32 vaobj, UInt32 bindingindex, UInt32 divisor) => instance.VertexArrayBindingDivisor(vaobj, bindingindex, divisor);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="buffer"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayElementBuffer")]
        [CLSCompliant(false)]
        public static void VertexArrayElementBuffer(Int32 vaobj, Int32 buffer) => instance.VertexArrayElementBuffer(vaobj, buffer);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="buffer"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayElementBuffer")]
        [CLSCompliant(false)]
        public static void VertexArrayElementBuffer(UInt32 vaobj, UInt32 buffer) => instance.VertexArrayElementBuffer(vaobj, buffer);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="bindingindex"></param>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="stride"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayVertexBuffer")]
        [CLSCompliant(false)]
        public static void VertexArrayVertexBuffer(Int32 vaobj, Int32 bindingindex, Int32 buffer, IntPtr offset, Int32 stride) => instance.VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="bindingindex"></param>
        /// <param name="buffer"></param>
        /// <param name="offset"></param>
        /// <param name="stride"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayVertexBuffer")]
        [CLSCompliant(false)]
        public static void VertexArrayVertexBuffer(UInt32 vaobj, UInt32 bindingindex, UInt32 buffer, IntPtr offset, Int32 stride) => instance.VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="first"></param>
        /// <param name="count"></param>
        /// <param name="buffers"></param>
        /// <param name="offsets"></param>
        /// <param name="strides"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayVertexBuffers")]
        [CLSCompliant(false)]
        public static void VertexArrayVertexBuffers(Int32 vaobj, Int32 first, Int32 count, Int32[] buffers, IntPtr[] offsets, Int32[] strides) => instance.VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="first"></param>
        /// <param name="count"></param>
        /// <param name="buffers"></param>
        /// <param name="offsets"></param>
        /// <param name="strides"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayVertexBuffers")]
        [CLSCompliant(false)]
        public static void VertexArrayVertexBuffers(Int32 vaobj, Int32 first, Int32 count, ref Int32 buffers, ref IntPtr offsets, ref Int32 strides) => instance.VertexArrayVertexBuffers(vaobj, first, count, ref buffers, ref offsets, ref strides);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="first"></param>
        /// <param name="count"></param>
        /// <param name="buffers"></param>
        /// <param name="offsets"></param>
        /// <param name="strides"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayVertexBuffers")]
        [CLSCompliant(false)]
        public static unsafe void VertexArrayVertexBuffers(Int32 vaobj, Int32 first, Int32 count, Int32* buffers, IntPtr* offsets, Int32* strides) => instance.VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="first"></param>
        /// <param name="count"></param>
        /// <param name="buffers"></param>
        /// <param name="offsets"></param>
        /// <param name="strides"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayVertexBuffers")]
        [CLSCompliant(false)]
        public static void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, Int32 count, UInt32[] buffers, IntPtr[] offsets, Int32[] strides) => instance.VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="first"></param>
        /// <param name="count"></param>
        /// <param name="buffers"></param>
        /// <param name="offsets"></param>
        /// <param name="strides"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayVertexBuffers")]
        [CLSCompliant(false)]
        public static void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, Int32 count, ref UInt32 buffers, ref IntPtr offsets, ref Int32 strides) => instance.VertexArrayVertexBuffers(vaobj, first, count, ref buffers, ref offsets, ref strides);

        /// <summary>[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]</summary>
        /// <param name="vaobj"></param>
        /// <param name="first"></param>
        /// <param name="count"></param>
        /// <param name="buffers"></param>
        /// <param name="offsets"></param>
        /// <param name="strides"></param>
        [AutoGenerated(Category = "ARB_direct_state_access|VERSION_4_5", Version = "4.5", EntryPoint = "glVertexArrayVertexBuffers")]
        [CLSCompliant(false)]
        public static unsafe void VertexArrayVertexBuffers(UInt32 vaobj, UInt32 first, Int32 count, UInt32* buffers, IntPtr* offsets, Int32* strides) => instance.VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1d")]
        [CLSCompliant(false)]
        public static void VertexAttrib1(Int32 index, Double x) => instance.VertexAttrib1(index, x);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1d")]
        [CLSCompliant(false)]
        public static void VertexAttrib1(UInt32 index, Double x) => instance.VertexAttrib1(index, x);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(Int32 index, [CountAttribute(Count = 1)] Double* v) => instance.VertexAttrib1(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(UInt32 index, [CountAttribute(Count = 1)] Double* v) => instance.VertexAttrib1(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        [CLSCompliant(false)]
        public static void VertexAttrib1(Int32 index, Single x) => instance.VertexAttrib1(index, x);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        [CLSCompliant(false)]
        public static void VertexAttrib1(UInt32 index, Single x) => instance.VertexAttrib1(index, x);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(Int32 index, [CountAttribute(Count = 1)] Single* v) => instance.VertexAttrib1(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(UInt32 index, [CountAttribute(Count = 1)] Single* v) => instance.VertexAttrib1(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1s")]
        [CLSCompliant(false)]
        public static void VertexAttrib1(Int32 index, Int16 x) => instance.VertexAttrib1(index, x);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1s")]
        [CLSCompliant(false)]
        public static void VertexAttrib1(UInt32 index, Int16 x) => instance.VertexAttrib1(index, x);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(Int32 index, [CountAttribute(Count = 1)] Int16* v) => instance.VertexAttrib1(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(UInt32 index, [CountAttribute(Count = 1)] Int16* v) => instance.VertexAttrib1(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2d")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, Double x, Double y) => instance.VertexAttrib2(index, x, y);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2d")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, Double x, Double y) => instance.VertexAttrib2(index, x, y);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, [CountAttribute(Count = 2)] Double[] v) => instance.VertexAttrib2(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, [CountAttribute(Count = 2)] ref Double v) => instance.VertexAttrib2(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib2(Int32 index, [CountAttribute(Count = 2)] Double* v) => instance.VertexAttrib2(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, [CountAttribute(Count = 2)] Double[] v) => instance.VertexAttrib2(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, [CountAttribute(Count = 2)] ref Double v) => instance.VertexAttrib2(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib2(UInt32 index, [CountAttribute(Count = 2)] Double* v) => instance.VertexAttrib2(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, Single x, Single y) => instance.VertexAttrib2(index, x, y);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, Single x, Single y) => instance.VertexAttrib2(index, x, y);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, [CountAttribute(Count = 2)] Single[] v) => instance.VertexAttrib2(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, [CountAttribute(Count = 2)] ref Single v) => instance.VertexAttrib2(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib2(Int32 index, [CountAttribute(Count = 2)] Single* v) => instance.VertexAttrib2(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, [CountAttribute(Count = 2)] Single[] v) => instance.VertexAttrib2(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, [CountAttribute(Count = 2)] ref Single v) => instance.VertexAttrib2(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib2(UInt32 index, [CountAttribute(Count = 2)] Single* v) => instance.VertexAttrib2(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2s")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, Int16 x, Int16 y) => instance.VertexAttrib2(index, x, y);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2s")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, Int16 x, Int16 y) => instance.VertexAttrib2(index, x, y);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, [CountAttribute(Count = 2)] Int16[] v) => instance.VertexAttrib2(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, [CountAttribute(Count = 2)] ref Int16 v) => instance.VertexAttrib2(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib2(Int32 index, [CountAttribute(Count = 2)] Int16* v) => instance.VertexAttrib2(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, [CountAttribute(Count = 2)] Int16[] v) => instance.VertexAttrib2(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, [CountAttribute(Count = 2)] ref Int16 v) => instance.VertexAttrib2(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib2(UInt32 index, [CountAttribute(Count = 2)] Int16* v) => instance.VertexAttrib2(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3d")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, Double x, Double y, Double z) => instance.VertexAttrib3(index, x, y, z);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3d")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, Double x, Double y, Double z) => instance.VertexAttrib3(index, x, y, z);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, [CountAttribute(Count = 3)] Double[] v) => instance.VertexAttrib3(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, [CountAttribute(Count = 3)] ref Double v) => instance.VertexAttrib3(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib3(Int32 index, [CountAttribute(Count = 3)] Double* v) => instance.VertexAttrib3(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, [CountAttribute(Count = 3)] Double[] v) => instance.VertexAttrib3(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, [CountAttribute(Count = 3)] ref Double v) => instance.VertexAttrib3(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib3(UInt32 index, [CountAttribute(Count = 3)] Double* v) => instance.VertexAttrib3(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, Single x, Single y, Single z) => instance.VertexAttrib3(index, x, y, z);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, Single x, Single y, Single z) => instance.VertexAttrib3(index, x, y, z);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, [CountAttribute(Count = 3)] Single[] v) => instance.VertexAttrib3(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, [CountAttribute(Count = 3)] ref Single v) => instance.VertexAttrib3(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib3(Int32 index, [CountAttribute(Count = 3)] Single* v) => instance.VertexAttrib3(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, [CountAttribute(Count = 3)] Single[] v) => instance.VertexAttrib3(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, [CountAttribute(Count = 3)] ref Single v) => instance.VertexAttrib3(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib3(UInt32 index, [CountAttribute(Count = 3)] Single* v) => instance.VertexAttrib3(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3s")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, Int16 x, Int16 y, Int16 z) => instance.VertexAttrib3(index, x, y, z);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3s")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, Int16 x, Int16 y, Int16 z) => instance.VertexAttrib3(index, x, y, z);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, [CountAttribute(Count = 3)] Int16[] v) => instance.VertexAttrib3(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, [CountAttribute(Count = 3)] ref Int16 v) => instance.VertexAttrib3(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib3(Int32 index, [CountAttribute(Count = 3)] Int16* v) => instance.VertexAttrib3(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, [CountAttribute(Count = 3)] Int16[] v) => instance.VertexAttrib3(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, [CountAttribute(Count = 3)] ref Int16 v) => instance.VertexAttrib3(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib3(UInt32 index, [CountAttribute(Count = 3)] Int16* v) => instance.VertexAttrib3(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] SByte[] v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] ref SByte v) => instance.VertexAttrib4(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] SByte* v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4d")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, Double x, Double y, Double z, Double w) => instance.VertexAttrib4(index, x, y, z, w);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4d")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, Double x, Double y, Double z, Double w) => instance.VertexAttrib4(index, x, y, z, w);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] Double[] v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] ref Double v) => instance.VertexAttrib4(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] Double* v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] Double[] v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] ref Double v) => instance.VertexAttrib4(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] Double* v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w) => instance.VertexAttrib4(index, x, y, z, w);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w) => instance.VertexAttrib4(index, x, y, z, w);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] Single[] v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] ref Single v) => instance.VertexAttrib4(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] Single* v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] Single[] v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] ref Single v) => instance.VertexAttrib4(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] Single* v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] Int32[] v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] ref Int32 v) => instance.VertexAttrib4(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] Int32* v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] Int32[] v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] ref Int32 v) => instance.VertexAttrib4(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] Int32* v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] SByte[] v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] ref SByte v) => instance.VertexAttrib4N(index, ref v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] SByte* v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(Int32 index, [CountAttribute(Count = 4)] Int32[] v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(Int32 index, [CountAttribute(Count = 4)] ref Int32 v) => instance.VertexAttrib4N(index, ref v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4N(Int32 index, [CountAttribute(Count = 4)] Int32* v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] Int32[] v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] ref Int32 v) => instance.VertexAttrib4N(index, ref v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] Int32* v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(Int32 index, [CountAttribute(Count = 4)] Int16[] v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(Int32 index, [CountAttribute(Count = 4)] ref Int16 v) => instance.VertexAttrib4N(index, ref v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4N(Int32 index, [CountAttribute(Count = 4)] Int16* v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] Int16[] v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] ref Int16 v) => instance.VertexAttrib4N(index, ref v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] Int16* v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        /// <param name="w"></param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nub")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(Int32 index, Byte x, Byte y, Byte z, Byte w) => instance.VertexAttrib4N(index, x, y, z, w);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        /// <param name="w"></param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nub")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(UInt32 index, Byte x, Byte y, Byte z, Byte w) => instance.VertexAttrib4N(index, x, y, z, w);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(Int32 index, [CountAttribute(Count = 4)] Byte[] v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(Int32 index, [CountAttribute(Count = 4)] ref Byte v) => instance.VertexAttrib4N(index, ref v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4N(Int32 index, [CountAttribute(Count = 4)] Byte* v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] Byte[] v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] ref Byte v) => instance.VertexAttrib4N(index, ref v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] Byte* v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] UInt32[] v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] ref UInt32 v) => instance.VertexAttrib4N(index, ref v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] UInt32* v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] UInt16[] v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] ref UInt16 v) => instance.VertexAttrib4N(index, ref v);

        /// <summary>[requires: v2.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4N(UInt32 index, [CountAttribute(Count = 4)] UInt16* v) => instance.VertexAttrib4N(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4s")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w) => instance.VertexAttrib4(index, x, y, z, w);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w">
        /// For the scalar commands, specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4s")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w) => instance.VertexAttrib4(index, x, y, z, w);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] Int16[] v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] ref Int16 v) => instance.VertexAttrib4(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] Int16* v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] Int16[] v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] ref Int16 v) => instance.VertexAttrib4(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] Int16* v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] Byte[] v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] ref Byte v) => instance.VertexAttrib4(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(Int32 index, [CountAttribute(Count = 4)] Byte* v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] Byte[] v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] ref Byte v) => instance.VertexAttrib4(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] Byte* v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] UInt32[] v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] ref UInt32 v) => instance.VertexAttrib4(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] UInt32* v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] UInt16[] v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] ref UInt16 v) => instance.VertexAttrib4(index, ref v);

        /// <summary>[requires: v2.0]
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4]
        /// For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(UInt32 index, [CountAttribute(Count = 4)] UInt16* v) => instance.VertexAttrib4(index, v);

        /// <summary>[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Associate a vertex attribute and a vertex buffer binding
        /// </summary>
        /// <param name="attribindex">
        /// The index of the attribute to associate with a vertex buffer binding.
        /// </param>
        /// <param name="bindingindex">
        /// The index of the vertex buffer binding with which to associate the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribBinding")]
        [CLSCompliant(false)]
        public static void VertexAttribBinding(Int32 attribindex, Int32 bindingindex) => instance.VertexAttribBinding(attribindex, bindingindex);

        /// <summary>[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Associate a vertex attribute and a vertex buffer binding
        /// </summary>
        /// <param name="attribindex">
        /// The index of the attribute to associate with a vertex buffer binding.
        /// </param>
        /// <param name="bindingindex">
        /// The index of the vertex buffer binding with which to associate the generic vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribBinding")]
        [CLSCompliant(false)]
        public static void VertexAttribBinding(UInt32 attribindex, UInt32 bindingindex) => instance.VertexAttribBinding(attribindex, bindingindex);

        /// <summary>[requires: v3.3]
        /// Modify the rate at which generic vertex attributes advance during instanced rendering
        /// </summary>
        /// <param name="index">
        /// Specify the index of the generic vertex attribute.
        /// </param>
        /// <param name="divisor">
        /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribDivisor")]
        [CLSCompliant(false)]
        public static void VertexAttribDivisor(Int32 index, Int32 divisor) => instance.VertexAttribDivisor(index, divisor);

        /// <summary>[requires: v3.3]
        /// Modify the rate at which generic vertex attributes advance during instanced rendering
        /// </summary>
        /// <param name="index">
        /// Specify the index of the generic vertex attribute.
        /// </param>
        /// <param name="divisor">
        /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
        /// </param>
        [AutoGenerated(Category = "VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribDivisor")]
        [CLSCompliant(false)]
        public static void VertexAttribDivisor(UInt32 index, UInt32 divisor) => instance.VertexAttribDivisor(index, divisor);

        /// <summary>[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Specify the organization of vertex arrays
        /// </summary>
        /// <param name="attribindex">
        /// The generic vertex attribute array being described.
        /// </param>
        /// <param name="size">
        /// The number of values per vertex that are stored in the array.
        /// </param>
        /// <param name="type">
        /// The type of the data stored in the array.
        /// </param>
        /// <param name="normalized">
        /// The distance between elements within the buffer.
        /// </param>
        /// <param name="relativeoffset">
        /// The distance between elements within the buffer.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribFormat")]
        [CLSCompliant(false)]
        public static void VertexAttribFormat(Int32 attribindex, Int32 size, OpenToolkit.OpenGL.VertexAttribType type, bool normalized, Int32 relativeoffset) => instance.VertexAttribFormat(attribindex, size, type, normalized, relativeoffset);

        /// <summary>[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Specify the organization of vertex arrays
        /// </summary>
        /// <param name="attribindex">
        /// The generic vertex attribute array being described.
        /// </param>
        /// <param name="size">
        /// The number of values per vertex that are stored in the array.
        /// </param>
        /// <param name="type">
        /// The type of the data stored in the array.
        /// </param>
        /// <param name="normalized">
        /// The distance between elements within the buffer.
        /// </param>
        /// <param name="relativeoffset">
        /// The distance between elements within the buffer.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribFormat")]
        [CLSCompliant(false)]
        public static void VertexAttribFormat(UInt32 attribindex, Int32 size, OpenToolkit.OpenGL.VertexAttribType type, bool normalized, UInt32 relativeoffset) => instance.VertexAttribFormat(attribindex, size, type, normalized, relativeoffset);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1i")]
        [CLSCompliant(false)]
        public static void VertexAttribI1(Int32 index, Int32 x) => instance.VertexAttribI1(index, x);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1i")]
        [CLSCompliant(false)]
        public static void VertexAttribI1(UInt32 index, Int32 x) => instance.VertexAttribI1(index, x);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 1]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI1(Int32 index, [CountAttribute(Count = 1)] Int32* v) => instance.VertexAttribI1(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 1]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI1(UInt32 index, [CountAttribute(Count = 1)] Int32* v) => instance.VertexAttribI1(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1ui")]
        [CLSCompliant(false)]
        public static void VertexAttribI1(UInt32 index, UInt32 x) => instance.VertexAttribI1(index, x);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 1]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI1(UInt32 index, [CountAttribute(Count = 1)] UInt32* v) => instance.VertexAttribI1(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2i")]
        [CLSCompliant(false)]
        public static void VertexAttribI2(Int32 index, Int32 x, Int32 y) => instance.VertexAttribI2(index, x, y);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2i")]
        [CLSCompliant(false)]
        public static void VertexAttribI2(UInt32 index, Int32 x, Int32 y) => instance.VertexAttribI2(index, x, y);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 2]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI2(Int32 index, [CountAttribute(Count = 2)] Int32[] v) => instance.VertexAttribI2(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 2]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI2(Int32 index, [CountAttribute(Count = 2)] ref Int32 v) => instance.VertexAttribI2(index, ref v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 2]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI2(Int32 index, [CountAttribute(Count = 2)] Int32* v) => instance.VertexAttribI2(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 2]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI2(UInt32 index, [CountAttribute(Count = 2)] Int32[] v) => instance.VertexAttribI2(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 2]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI2(UInt32 index, [CountAttribute(Count = 2)] ref Int32 v) => instance.VertexAttribI2(index, ref v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 2]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI2(UInt32 index, [CountAttribute(Count = 2)] Int32* v) => instance.VertexAttribI2(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2ui")]
        [CLSCompliant(false)]
        public static void VertexAttribI2(UInt32 index, UInt32 x, UInt32 y) => instance.VertexAttribI2(index, x, y);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 2]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        [CLSCompliant(false)]
        public static void VertexAttribI2(UInt32 index, [CountAttribute(Count = 2)] UInt32[] v) => instance.VertexAttribI2(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 2]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        [CLSCompliant(false)]
        public static void VertexAttribI2(UInt32 index, [CountAttribute(Count = 2)] ref UInt32 v) => instance.VertexAttribI2(index, ref v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 2]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI2(UInt32 index, [CountAttribute(Count = 2)] UInt32* v) => instance.VertexAttribI2(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3i")]
        [CLSCompliant(false)]
        public static void VertexAttribI3(Int32 index, Int32 x, Int32 y, Int32 z) => instance.VertexAttribI3(index, x, y, z);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3i")]
        [CLSCompliant(false)]
        public static void VertexAttribI3(UInt32 index, Int32 x, Int32 y, Int32 z) => instance.VertexAttribI3(index, x, y, z);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 3]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI3(Int32 index, [CountAttribute(Count = 3)] Int32[] v) => instance.VertexAttribI3(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 3]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI3(Int32 index, [CountAttribute(Count = 3)] ref Int32 v) => instance.VertexAttribI3(index, ref v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 3]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI3(Int32 index, [CountAttribute(Count = 3)] Int32* v) => instance.VertexAttribI3(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 3]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI3(UInt32 index, [CountAttribute(Count = 3)] Int32[] v) => instance.VertexAttribI3(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 3]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI3(UInt32 index, [CountAttribute(Count = 3)] ref Int32 v) => instance.VertexAttribI3(index, ref v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 3]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI3(UInt32 index, [CountAttribute(Count = 3)] Int32* v) => instance.VertexAttribI3(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3ui")]
        [CLSCompliant(false)]
        public static void VertexAttribI3(UInt32 index, UInt32 x, UInt32 y, UInt32 z) => instance.VertexAttribI3(index, x, y, z);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 3]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        [CLSCompliant(false)]
        public static void VertexAttribI3(UInt32 index, [CountAttribute(Count = 3)] UInt32[] v) => instance.VertexAttribI3(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 3]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        [CLSCompliant(false)]
        public static void VertexAttribI3(UInt32 index, [CountAttribute(Count = 3)] ref UInt32 v) => instance.VertexAttribI3(index, ref v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 3]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI3(UInt32 index, [CountAttribute(Count = 3)] UInt32* v) => instance.VertexAttribI3(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] SByte[] v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] ref SByte v) => instance.VertexAttribI4(index, ref v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] SByte* v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        /// <param name="w"></param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w) => instance.VertexAttribI4(index, x, y, z, w);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        /// <param name="w"></param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w) => instance.VertexAttribI4(index, x, y, z, w);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(Int32 index, [CountAttribute(Count = 4)] Int32[] v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(Int32 index, [CountAttribute(Count = 4)] ref Int32 v) => instance.VertexAttribI4(index, ref v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI4(Int32 index, [CountAttribute(Count = 4)] Int32* v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] Int32[] v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] ref Int32 v) => instance.VertexAttribI4(index, ref v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] Int32* v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(Int32 index, [CountAttribute(Count = 4)] Int16[] v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(Int32 index, [CountAttribute(Count = 4)] ref Int16 v) => instance.VertexAttribI4(index, ref v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI4(Int32 index, [CountAttribute(Count = 4)] Int16* v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] Int16[] v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] ref Int16 v) => instance.VertexAttribI4(index, ref v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] Int16* v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(Int32 index, [CountAttribute(Count = 4)] Byte[] v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(Int32 index, [CountAttribute(Count = 4)] ref Byte v) => instance.VertexAttribI4(index, ref v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI4(Int32 index, [CountAttribute(Count = 4)] Byte* v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] Byte[] v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] ref Byte v) => instance.VertexAttribI4(index, ref v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] Byte* v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        /// <param name="w"></param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ui")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w) => instance.VertexAttribI4(index, x, y, z, w);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] UInt32[] v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] ref UInt32 v) => instance.VertexAttribI4(index, ref v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] UInt32* v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] UInt16[] v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        [CLSCompliant(false)]
        public static void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] ref UInt16 v) => instance.VertexAttribI4(index, ref v);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribI4(UInt32 index, [CountAttribute(Count = 4)] UInt16* v) => instance.VertexAttribI4(index, v);

        /// <summary>[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]</summary>
        /// <param name="attribindex"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="relativeoffset"></param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribIFormat")]
        [CLSCompliant(false)]
        public static void VertexAttribIFormat(Int32 attribindex, Int32 size, OpenToolkit.OpenGL.VertexAttribIntegerType type, Int32 relativeoffset) => instance.VertexAttribIFormat(attribindex, size, type, relativeoffset);

        /// <summary>[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]</summary>
        /// <param name="attribindex"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="relativeoffset"></param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribIFormat")]
        [CLSCompliant(false)]
        public static void VertexAttribIFormat(UInt32 attribindex, Int32 size, OpenToolkit.OpenGL.VertexAttribIntegerType type, UInt32 relativeoffset) => instance.VertexAttribIFormat(attribindex, size, type, relativeoffset);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIntegerType type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) => instance.VertexAttribIPointer(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[] pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,] pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,,] pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T4 pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, ref pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [Obsolete("Use VertexAttribIntegerType overload instead")]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIPointerType type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) => instance.VertexAttribIPointer(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [Obsolete("Use VertexAttribIntegerType overload instead")]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[] pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [Obsolete("Use VertexAttribIntegerType overload instead")]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,] pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [Obsolete("Use VertexAttribIntegerType overload instead")]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,,] pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [Obsolete("Use VertexAttribIntegerType overload instead")]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T4 pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, ref pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIntegerType type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) => instance.VertexAttribIPointer(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[] pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,] pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,,] pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIntegerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T4 pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, ref pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [Obsolete("Use VertexAttribIntegerType overload instead")]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIPointerType type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) => instance.VertexAttribIPointer(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [Obsolete("Use VertexAttribIntegerType overload instead")]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[] pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [Obsolete("Use VertexAttribIntegerType overload instead")]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,] pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [Obsolete("Use VertexAttribIntegerType overload instead")]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T4[,,] pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v3.0]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]</param>
        [Obsolete("Use VertexAttribIntegerType overload instead")]
        [AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T4 pointer)
            where T4 : struct
         => instance.VertexAttribIPointer<T4>(index, size, type, stride, ref pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL1d")]
        [CLSCompliant(false)]
        public static void VertexAttribL1(Int32 index, Double x) => instance.VertexAttribL1(index, x);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL1d")]
        [CLSCompliant(false)]
        public static void VertexAttribL1(UInt32 index, Double x) => instance.VertexAttribL1(index, x);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL1dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribL1(Int32 index, [CountAttribute(Count = 1)] Double* v) => instance.VertexAttribL1(index, v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL1dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribL1(UInt32 index, [CountAttribute(Count = 1)] Double* v) => instance.VertexAttribL1(index, v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2d")]
        [CLSCompliant(false)]
        public static void VertexAttribL2(Int32 index, Double x, Double y) => instance.VertexAttribL2(index, x, y);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2d")]
        [CLSCompliant(false)]
        public static void VertexAttribL2(UInt32 index, Double x, Double y) => instance.VertexAttribL2(index, x, y);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 2]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
        [CLSCompliant(false)]
        public static void VertexAttribL2(Int32 index, [CountAttribute(Count = 2)] Double[] v) => instance.VertexAttribL2(index, v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 2]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
        [CLSCompliant(false)]
        public static void VertexAttribL2(Int32 index, [CountAttribute(Count = 2)] ref Double v) => instance.VertexAttribL2(index, ref v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 2]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribL2(Int32 index, [CountAttribute(Count = 2)] Double* v) => instance.VertexAttribL2(index, v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 2]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
        [CLSCompliant(false)]
        public static void VertexAttribL2(UInt32 index, [CountAttribute(Count = 2)] Double[] v) => instance.VertexAttribL2(index, v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 2]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
        [CLSCompliant(false)]
        public static void VertexAttribL2(UInt32 index, [CountAttribute(Count = 2)] ref Double v) => instance.VertexAttribL2(index, ref v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 2]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribL2(UInt32 index, [CountAttribute(Count = 2)] Double* v) => instance.VertexAttribL2(index, v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3d")]
        [CLSCompliant(false)]
        public static void VertexAttribL3(Int32 index, Double x, Double y, Double z) => instance.VertexAttribL3(index, x, y, z);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3d")]
        [CLSCompliant(false)]
        public static void VertexAttribL3(UInt32 index, Double x, Double y, Double z) => instance.VertexAttribL3(index, x, y, z);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 3]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
        [CLSCompliant(false)]
        public static void VertexAttribL3(Int32 index, [CountAttribute(Count = 3)] Double[] v) => instance.VertexAttribL3(index, v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 3]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
        [CLSCompliant(false)]
        public static void VertexAttribL3(Int32 index, [CountAttribute(Count = 3)] ref Double v) => instance.VertexAttribL3(index, ref v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 3]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribL3(Int32 index, [CountAttribute(Count = 3)] Double* v) => instance.VertexAttribL3(index, v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 3]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
        [CLSCompliant(false)]
        public static void VertexAttribL3(UInt32 index, [CountAttribute(Count = 3)] Double[] v) => instance.VertexAttribL3(index, v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 3]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
        [CLSCompliant(false)]
        public static void VertexAttribL3(UInt32 index, [CountAttribute(Count = 3)] ref Double v) => instance.VertexAttribL3(index, ref v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 3]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribL3(UInt32 index, [CountAttribute(Count = 3)] Double* v) => instance.VertexAttribL3(index, v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        /// <param name="w"></param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4d")]
        [CLSCompliant(false)]
        public static void VertexAttribL4(Int32 index, Double x, Double y, Double z, Double w) => instance.VertexAttribL4(index, x, y, z, w);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="z"></param>
        /// <param name="w"></param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4d")]
        [CLSCompliant(false)]
        public static void VertexAttribL4(UInt32 index, Double x, Double y, Double z, Double w) => instance.VertexAttribL4(index, x, y, z, w);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
        [CLSCompliant(false)]
        public static void VertexAttribL4(Int32 index, [CountAttribute(Count = 4)] Double[] v) => instance.VertexAttribL4(index, v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
        [CLSCompliant(false)]
        public static void VertexAttribL4(Int32 index, [CountAttribute(Count = 4)] ref Double v) => instance.VertexAttribL4(index, ref v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribL4(Int32 index, [CountAttribute(Count = 4)] Double* v) => instance.VertexAttribL4(index, v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
        [CLSCompliant(false)]
        public static void VertexAttribL4(UInt32 index, [CountAttribute(Count = 4)] Double[] v) => instance.VertexAttribL4(index, v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
        [CLSCompliant(false)]
        public static void VertexAttribL4(UInt32 index, [CountAttribute(Count = 4)] ref Double v) => instance.VertexAttribL4(index, ref v);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="v">[length: 4]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribL4(UInt32 index, [CountAttribute(Count = 4)] Double* v) => instance.VertexAttribL4(index, v);

        /// <summary>[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]</summary>
        /// <param name="attribindex"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="relativeoffset"></param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribLFormat")]
        [CLSCompliant(false)]
        public static void VertexAttribLFormat(Int32 attribindex, Int32 size, OpenToolkit.OpenGL.VertexAttribDoubleType type, Int32 relativeoffset) => instance.VertexAttribLFormat(attribindex, size, type, relativeoffset);

        /// <summary>[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]</summary>
        /// <param name="attribindex"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="relativeoffset"></param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexAttribLFormat")]
        [CLSCompliant(false)]
        public static void VertexAttribLFormat(UInt32 attribindex, Int32 size, OpenToolkit.OpenGL.VertexAttribDoubleType type, UInt32 relativeoffset) => instance.VertexAttribLFormat(attribindex, size, type, relativeoffset);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDoubleType type, Int32 stride, [CountAttribute(Parameter = "size")] IntPtr pointer) => instance.VertexAttribLPointer(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T4[] pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T4[,] pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T4[,,] pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T4 pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, ref pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [Obsolete("Use VertexAttribDoubleType overload instead")]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDPointerType type, Int32 stride, [CountAttribute(Parameter = "size")] IntPtr pointer) => instance.VertexAttribLPointer(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [Obsolete("Use VertexAttribDoubleType overload instead")]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T4[] pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [Obsolete("Use VertexAttribDoubleType overload instead")]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T4[,] pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [Obsolete("Use VertexAttribDoubleType overload instead")]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T4[,,] pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [Obsolete("Use VertexAttribDoubleType overload instead")]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T4 pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, ref pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDoubleType type, Int32 stride, [CountAttribute(Parameter = "size")] IntPtr pointer) => instance.VertexAttribLPointer(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T4[] pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T4[,] pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T4[,,] pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDoubleType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T4 pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, ref pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [Obsolete("Use VertexAttribDoubleType overload instead")]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDPointerType type, Int32 stride, [CountAttribute(Parameter = "size")] IntPtr pointer) => instance.VertexAttribLPointer(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [Obsolete("Use VertexAttribDoubleType overload instead")]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T4[] pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [Obsolete("Use VertexAttribDoubleType overload instead")]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T4[,] pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [Obsolete("Use VertexAttribDoubleType overload instead")]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] T4[,,] pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, pointer);

        /// <summary>[requires: v4.1 or ARB_vertex_attrib_64bit|VERSION_4_1]</summary>
        /// <param name="index"></param>
        /// <param name="size"></param>
        /// <param name="type"></param>
        /// <param name="stride"></param>
        /// <param name="pointer">[length: size]</param>
        [Obsolete("Use VertexAttribDoubleType overload instead")]
        [AutoGenerated(Category = "ARB_vertex_attrib_64bit|VERSION_4_1", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribLPointer<T4>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Parameter = "size")] ref T4 pointer)
            where T4 : struct
         => instance.VertexAttribLPointer<T4>(index, size, type, stride, ref pointer);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP1ui")]
        [CLSCompliant(false)]
        public static void VertexAttribP1(Int32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, Int32 value) => instance.VertexAttribP1(index, type, normalized, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP1ui")]
        [CLSCompliant(false)]
        public static void VertexAttribP1(UInt32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, UInt32 value) => instance.VertexAttribP1(index, type, normalized, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP1uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribP1(Int32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] Int32* value) => instance.VertexAttribP1(index, type, normalized, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP1uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribP1(UInt32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] UInt32* value) => instance.VertexAttribP1(index, type, normalized, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP2ui")]
        [CLSCompliant(false)]
        public static void VertexAttribP2(Int32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, Int32 value) => instance.VertexAttribP2(index, type, normalized, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP2ui")]
        [CLSCompliant(false)]
        public static void VertexAttribP2(UInt32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, UInt32 value) => instance.VertexAttribP2(index, type, normalized, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP2uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribP2(Int32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] Int32* value) => instance.VertexAttribP2(index, type, normalized, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP2uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribP2(UInt32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] UInt32* value) => instance.VertexAttribP2(index, type, normalized, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP3ui")]
        [CLSCompliant(false)]
        public static void VertexAttribP3(Int32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, Int32 value) => instance.VertexAttribP3(index, type, normalized, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP3ui")]
        [CLSCompliant(false)]
        public static void VertexAttribP3(UInt32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, UInt32 value) => instance.VertexAttribP3(index, type, normalized, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP3uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribP3(Int32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] Int32* value) => instance.VertexAttribP3(index, type, normalized, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP3uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribP3(UInt32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] UInt32* value) => instance.VertexAttribP3(index, type, normalized, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP4ui")]
        [CLSCompliant(false)]
        public static void VertexAttribP4(Int32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, Int32 value) => instance.VertexAttribP4(index, type, normalized, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP4ui")]
        [CLSCompliant(false)]
        public static void VertexAttribP4(UInt32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, UInt32 value) => instance.VertexAttribP4(index, type, normalized, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP4uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribP4(Int32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] Int32* value) => instance.VertexAttribP4(index, type, normalized, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="index"></param>
        /// <param name="type"></param>
        /// <param name="normalized"></param>
        /// <param name="value">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexAttribP4uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribP4(UInt32 index, OpenToolkit.OpenGL.PackedPointerType type, bool normalized, [CountAttribute(Count = 1)] UInt32* value) => instance.VertexAttribP4(index, type, normalized, value);

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) => instance.VertexAttribPointer(index, size, type, normalized, stride, pointer);

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T5[] pointer)
            where T5 : struct
         => instance.VertexAttribPointer<T5>(index, size, type, normalized, stride, pointer);

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T5[,] pointer)
            where T5 : struct
         => instance.VertexAttribPointer<T5>(index, size, type, normalized, stride, pointer);

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T5[,,] pointer)
            where T5 : struct
         => instance.VertexAttribPointer<T5>(index, size, type, normalized, stride, pointer);

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T5 pointer)
            where T5 : struct
         => instance.VertexAttribPointer<T5>(index, size, type, normalized, stride, ref pointer);

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) => instance.VertexAttribPointer(index, size, type, normalized, stride, pointer);

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T5[] pointer)
            where T5 : struct
         => instance.VertexAttribPointer<T5>(index, size, type, normalized, stride, pointer);

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T5[,] pointer)
            where T5 : struct
         => instance.VertexAttribPointer<T5>(index, size, type, normalized, stride, pointer);

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T5[,,] pointer)
            where T5 : struct
         => instance.VertexAttribPointer<T5>(index, size, type, normalized, stride, pointer);

        /// <summary>[requires: v2.0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size">
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.
        /// </param>
        /// <param name="normalized">
        /// For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenToolkit.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T5 pointer)
            where T5 : struct
         => instance.VertexAttribPointer<T5>(index, size, type, normalized, stride, ref pointer);

        /// <summary>[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Modify the rate at which generic vertex attributes advance
        /// </summary>
        /// <param name="bindingindex">
        /// The index of the binding whose divisor to modify.
        /// </param>
        /// <param name="divisor">
        /// The new value for the instance step rate to apply.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexBindingDivisor")]
        [CLSCompliant(false)]
        public static void VertexBindingDivisor(Int32 bindingindex, Int32 divisor) => instance.VertexBindingDivisor(bindingindex, divisor);

        /// <summary>[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]
        /// Modify the rate at which generic vertex attributes advance
        /// </summary>
        /// <param name="bindingindex">
        /// The index of the binding whose divisor to modify.
        /// </param>
        /// <param name="divisor">
        /// The new value for the instance step rate to apply.
        /// </param>
        [AutoGenerated(Category = "ARB_vertex_attrib_binding|VERSION_4_3", Version = "4.3", EntryPoint = "glVertexBindingDivisor")]
        [CLSCompliant(false)]
        public static void VertexBindingDivisor(UInt32 bindingindex, UInt32 divisor) => instance.VertexBindingDivisor(bindingindex, divisor);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP2ui")]
        [CLSCompliant(false)]
        public static void VertexP2(OpenToolkit.OpenGL.PackedPointerType type, Int32 value) => instance.VertexP2(type, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP2ui")]
        [CLSCompliant(false)]
        public static void VertexP2(OpenToolkit.OpenGL.PackedPointerType type, UInt32 value) => instance.VertexP2(type, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="value">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP2uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexP2(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] Int32* value) => instance.VertexP2(type, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="value">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP2uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexP2(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] UInt32* value) => instance.VertexP2(type, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP3ui")]
        [CLSCompliant(false)]
        public static void VertexP3(OpenToolkit.OpenGL.PackedPointerType type, Int32 value) => instance.VertexP3(type, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP3ui")]
        [CLSCompliant(false)]
        public static void VertexP3(OpenToolkit.OpenGL.PackedPointerType type, UInt32 value) => instance.VertexP3(type, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="value">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP3uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexP3(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] Int32* value) => instance.VertexP3(type, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="value">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP3uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexP3(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] UInt32* value) => instance.VertexP3(type, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP4ui")]
        [CLSCompliant(false)]
        public static void VertexP4(OpenToolkit.OpenGL.PackedPointerType type, Int32 value) => instance.VertexP4(type, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="value"></param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP4ui")]
        [CLSCompliant(false)]
        public static void VertexP4(OpenToolkit.OpenGL.PackedPointerType type, UInt32 value) => instance.VertexP4(type, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="value">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP4uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexP4(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] Int32* value) => instance.VertexP4(type, value);

        /// <summary>[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]</summary>
        /// <param name="type"></param>
        /// <param name="value">[length: 1]</param>
        [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev|VERSION_3_3", Version = "3.3", EntryPoint = "glVertexP4uiv")]
        [CLSCompliant(false)]
        public static unsafe void VertexP4(OpenToolkit.OpenGL.PackedPointerType type, [CountAttribute(Count = 1)] UInt32* value) => instance.VertexP4(type, value);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glVertexPointer")]
        public static void VertexPointer(Int32 size, OpenToolkit.OpenGL.VertexPointerType type, Int32 stride, [CountAttribute(Computed = "size,type,stride")] IntPtr pointer) => instance.VertexPointer(size, type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glVertexPointer")]
        [CLSCompliant(false)]
        public static void VertexPointer<T3>(Int32 size, OpenToolkit.OpenGL.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[] pointer)
            where T3 : struct
         => instance.VertexPointer<T3>(size, type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glVertexPointer")]
        [CLSCompliant(false)]
        public static void VertexPointer<T3>(Int32 size, OpenToolkit.OpenGL.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,] pointer)
            where T3 : struct
         => instance.VertexPointer<T3>(size, type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glVertexPointer")]
        [CLSCompliant(false)]
        public static void VertexPointer<T3>(Int32 size, OpenToolkit.OpenGL.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] T3[,,] pointer)
            where T3 : struct
         => instance.VertexPointer<T3>(size, type, stride, pointer);

        /// <summary>[requires: v1.1][deprecated: v3.2]
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type">
        /// Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.
        /// </param>
        /// <param name="stride">
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: COMPSIZE(size,type,stride)]
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glVertexPointer")]
        public static void VertexPointer<T3>(Int32 size, OpenToolkit.OpenGL.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute, CountAttribute(Computed = "size,type,stride")] ref T3 pointer)
            where T3 : struct
         => instance.VertexPointer<T3>(size, type, stride, ref pointer);

        /// <summary>[requires: v1.0]
        /// Set the viewport
        /// </summary>
        /// <param name="x">
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="y">
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="width">
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height">
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glViewport")]
        public static void Viewport(Int32 x, Int32 y, Int32 width, Int32 height) => instance.Viewport(x, y, width, height);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="count">
        /// Specify the number of viewports to set.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specify the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        [CLSCompliant(false)]
        public static void ViewportArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] Single[] v) => instance.ViewportArray(first, count, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="count">
        /// Specify the number of viewports to set.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specify the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        [CLSCompliant(false)]
        public static void ViewportArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] ref Single v) => instance.ViewportArray(first, count, ref v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="count">
        /// Specify the number of viewports to set.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specify the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        [CLSCompliant(false)]
        public static unsafe void ViewportArray(Int32 first, Int32 count, [CountAttribute(Computed = "count")] Single* v) => instance.ViewportArray(first, count, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="count">
        /// Specify the number of viewports to set.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specify the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        [CLSCompliant(false)]
        public static void ViewportArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Single[] v) => instance.ViewportArray(first, count, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="count">
        /// Specify the number of viewports to set.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specify the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        [CLSCompliant(false)]
        public static void ViewportArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] ref Single v) => instance.ViewportArray(first, count, ref v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set multiple viewports
        /// </summary>
        /// <param name="first">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="count">
        /// Specify the number of viewports to set.
        /// </param>
        /// <param name="v">[length: COMPSIZE(count)]
        /// Specify the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportArrayv")]
        [CLSCompliant(false)]
        public static unsafe void ViewportArray(UInt32 first, Int32 count, [CountAttribute(Computed = "count")] Single* v) => instance.ViewportArray(first, count, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="x">
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="y">
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="w">
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="h">
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedf")]
        [CLSCompliant(false)]
        public static void ViewportIndexed(Int32 index, Single x, Single y, Single w, Single h) => instance.ViewportIndexed(index, x, y, w, h);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="x">
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="y">
        /// For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="w">
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="h">
        /// For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedf")]
        [CLSCompliant(false)]
        public static void ViewportIndexed(UInt32 index, Single x, Single y, Single w, Single h) => instance.ViewportIndexed(index, x, y, w, h);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="v">[length: 4]
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        [CLSCompliant(false)]
        public static void ViewportIndexed(Int32 index, [CountAttribute(Count = 4)] Single[] v) => instance.ViewportIndexed(index, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="v">[length: 4]
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        [CLSCompliant(false)]
        public static void ViewportIndexed(Int32 index, [CountAttribute(Count = 4)] ref Single v) => instance.ViewportIndexed(index, ref v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="v">[length: 4]
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        [CLSCompliant(false)]
        public static unsafe void ViewportIndexed(Int32 index, [CountAttribute(Count = 4)] Single* v) => instance.ViewportIndexed(index, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="v">[length: 4]
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        [CLSCompliant(false)]
        public static void ViewportIndexed(UInt32 index, [CountAttribute(Count = 4)] Single[] v) => instance.ViewportIndexed(index, v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="v">[length: 4]
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        [CLSCompliant(false)]
        public static void ViewportIndexed(UInt32 index, [CountAttribute(Count = 4)] ref Single v) => instance.ViewportIndexed(index, ref v);

        /// <summary>[requires: v4.1 or ARB_viewport_array|VERSION_4_1]
        /// Set a specified viewport
        /// </summary>
        /// <param name="index">
        /// Specify the first viewport to set.
        /// </param>
        /// <param name="v">[length: 4]
        /// For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.
        /// </param>
        [AutoGenerated(Category = "ARB_viewport_array|VERSION_4_1", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
        [CLSCompliant(false)]
        public static unsafe void ViewportIndexed(UInt32 index, [CountAttribute(Count = 4)] Single* v) => instance.ViewportIndexed(index, v);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be zero.
        /// </param>
        /// <param name="timeout">
        /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
        /// </param>
        [Obsolete("Use WaitSyncFlags overload instead")]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glWaitSync")]
        [CLSCompliant(false)]
        public static void WaitSync(IntPtr sync, Int32 flags, Int64 timeout) => instance.WaitSync(sync, flags, timeout);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be zero.
        /// </param>
        /// <param name="timeout">
        /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
        /// </param>
        [Obsolete("Use WaitSyncFlags overload instead")]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glWaitSync")]
        [CLSCompliant(false)]
        public static void WaitSync(IntPtr sync, Int32 flags, UInt64 timeout) => instance.WaitSync(sync, flags, timeout);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be zero.
        /// </param>
        /// <param name="timeout">
        /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
        /// </param>
        [Obsolete("Use WaitSyncFlags overload instead")]
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glWaitSync")]
        [CLSCompliant(false)]
        public static void WaitSync(IntPtr sync, UInt32 flags, UInt64 timeout) => instance.WaitSync(sync, flags, timeout);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be zero.
        /// </param>
        /// <param name="timeout">
        /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glWaitSync")]
        [CLSCompliant(false)]
        public static void WaitSync(IntPtr sync, OpenToolkit.OpenGL.WaitSyncFlags flags, Int64 timeout) => instance.WaitSync(sync, flags, timeout);

        /// <summary>[requires: v3.2 or ARB_sync|VERSION_3_2]
        /// Instruct the GL server to block until the specified sync object becomes signaled
        /// </summary>
        /// <param name="sync">
        /// Specifies the sync object whose status to wait on.
        /// </param>
        /// <param name="flags">
        /// A bitfield controlling the command flushing behavior. flags may be zero.
        /// </param>
        /// <param name="timeout">
        /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
        /// </param>
        [AutoGenerated(Category = "ARB_sync|VERSION_3_2", Version = "3.2", EntryPoint = "glWaitSync")]
        [CLSCompliant(false)]
        public static void WaitSync(IntPtr sync, OpenToolkit.OpenGL.WaitSyncFlags flags, UInt64 timeout) => instance.WaitSync(sync, flags, timeout);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2d")]
        public static void WindowPos2(Double x, Double y) => instance.WindowPos2(x, y);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2dv")]
        [CLSCompliant(false)]
        public static void WindowPos2([CountAttribute(Count = 2)] Double[] v) => instance.WindowPos2(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2dv")]
        [CLSCompliant(false)]
        public static void WindowPos2([CountAttribute(Count = 2)] ref Double v) => instance.WindowPos2(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2dv")]
        [CLSCompliant(false)]
        public static unsafe void WindowPos2([CountAttribute(Count = 2)] Double* v) => instance.WindowPos2(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2f")]
        public static void WindowPos2(Single x, Single y) => instance.WindowPos2(x, y);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2fv")]
        [CLSCompliant(false)]
        public static void WindowPos2([CountAttribute(Count = 2)] Single[] v) => instance.WindowPos2(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2fv")]
        [CLSCompliant(false)]
        public static void WindowPos2([CountAttribute(Count = 2)] ref Single v) => instance.WindowPos2(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2fv")]
        [CLSCompliant(false)]
        public static unsafe void WindowPos2([CountAttribute(Count = 2)] Single* v) => instance.WindowPos2(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2i")]
        public static void WindowPos2(Int32 x, Int32 y) => instance.WindowPos2(x, y);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2iv")]
        [CLSCompliant(false)]
        public static void WindowPos2([CountAttribute(Count = 2)] Int32[] v) => instance.WindowPos2(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2iv")]
        [CLSCompliant(false)]
        public static void WindowPos2([CountAttribute(Count = 2)] ref Int32 v) => instance.WindowPos2(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2iv")]
        [CLSCompliant(false)]
        public static unsafe void WindowPos2([CountAttribute(Count = 2)] Int32* v) => instance.WindowPos2(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2s")]
        public static void WindowPos2(Int16 x, Int16 y) => instance.WindowPos2(x, y);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2sv")]
        [CLSCompliant(false)]
        public static void WindowPos2([CountAttribute(Count = 2)] Int16[] v) => instance.WindowPos2(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2sv")]
        [CLSCompliant(false)]
        public static void WindowPos2([CountAttribute(Count = 2)] ref Int16 v) => instance.WindowPos2(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 2]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos2sv")]
        [CLSCompliant(false)]
        public static unsafe void WindowPos2([CountAttribute(Count = 2)] Int16* v) => instance.WindowPos2(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3d")]
        public static void WindowPos3(Double x, Double y, Double z) => instance.WindowPos3(x, y, z);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3dv")]
        [CLSCompliant(false)]
        public static void WindowPos3([CountAttribute(Count = 3)] Double[] v) => instance.WindowPos3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3dv")]
        [CLSCompliant(false)]
        public static void WindowPos3([CountAttribute(Count = 3)] ref Double v) => instance.WindowPos3(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3dv")]
        [CLSCompliant(false)]
        public static unsafe void WindowPos3([CountAttribute(Count = 3)] Double* v) => instance.WindowPos3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3f")]
        public static void WindowPos3(Single x, Single y, Single z) => instance.WindowPos3(x, y, z);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3fv")]
        [CLSCompliant(false)]
        public static void WindowPos3([CountAttribute(Count = 3)] Single[] v) => instance.WindowPos3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3fv")]
        [CLSCompliant(false)]
        public static void WindowPos3([CountAttribute(Count = 3)] ref Single v) => instance.WindowPos3(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3fv")]
        [CLSCompliant(false)]
        public static unsafe void WindowPos3([CountAttribute(Count = 3)] Single* v) => instance.WindowPos3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3i")]
        public static void WindowPos3(Int32 x, Int32 y, Int32 z) => instance.WindowPos3(x, y, z);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3iv")]
        [CLSCompliant(false)]
        public static void WindowPos3([CountAttribute(Count = 3)] Int32[] v) => instance.WindowPos3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3iv")]
        [CLSCompliant(false)]
        public static void WindowPos3([CountAttribute(Count = 3)] ref Int32 v) => instance.WindowPos3(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3iv")]
        [CLSCompliant(false)]
        public static unsafe void WindowPos3([CountAttribute(Count = 3)] Int32* v) => instance.WindowPos3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="y">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        /// <param name="z">
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3s")]
        public static void WindowPos3(Int16 x, Int16 y, Int16 z) => instance.WindowPos3(x, y, z);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3sv")]
        [CLSCompliant(false)]
        public static void WindowPos3([CountAttribute(Count = 3)] Int16[] v) => instance.WindowPos3(v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3sv")]
        [CLSCompliant(false)]
        public static void WindowPos3([CountAttribute(Count = 3)] ref Int16 v) => instance.WindowPos3(ref v);

        /// <summary>[requires: v1.4][deprecated: v3.2]
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="v">[length: 3]
        /// Specify the , ,  coordinates for the raster position.
        /// </param>
        [AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glWindowPos3sv")]
        [CLSCompliant(false)]
        public static unsafe void WindowPos3([CountAttribute(Count = 3)] Int16* v) => instance.WindowPos3(v);
    }
}
