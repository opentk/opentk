// This file is auto generated, do not edit.
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using OpenTK.Mathematics;
using OpenTK.Graphics;

namespace OpenTK.Graphics.OpenGL.Compatibility
{
#pragma warning disable CS0419 // Ambiguous reference in cref attribute
    public static unsafe partial class GL
    {
        /// <inheritdoc cref="TexParameterfv(TextureTarget, TextureParameterName, float*)"/>
        public static unsafe void TexParameterf(TextureTarget target, TextureParameterName pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                TexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterfv(TextureTarget, TextureParameterName, float*)"/>
        public static unsafe void TexParameterf(TextureTarget target, TextureParameterName pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                TexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterfv(TextureTarget, TextureParameterName, float*)"/>
        public static unsafe void TexParameterf(TextureTarget target, TextureParameterName pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                TexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameteriv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameteri(TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameteriv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameteri(TextureTarget target, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameteriv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameteri(TextureTarget target, TextureParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                TexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexImage1D(TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage1D(TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexImage1D(target, level, internalformat, width, border, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexImage1D(TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage1D(target, level, internalformat, width, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage1D(TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage1D(target, level, internalformat, width, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage1D(TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexImage1D(target, level, internalformat, width, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage2D(TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexImage2D(TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage2D(TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage2D(TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="ReadPixels(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            ReadPixels(x, y, width, height, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="ReadPixels(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ReadPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, Span<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                ReadPixels(x, y, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="ReadPixels(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ReadPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                ReadPixels(x, y, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="ReadPixels(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ReadPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                ReadPixels(x, y, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleanv(GetPName, bool*)"/>
        public static unsafe void GetBoolean(GetPName pname, Span<bool> data)
        {
            fixed (bool* data_ptr = data)
            {
                GetBooleanv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleanv(GetPName, bool*)"/>
        public static unsafe void GetBoolean(GetPName pname, bool[] data)
        {
            fixed (bool* data_ptr = data)
            {
                GetBooleanv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleanv(GetPName, bool*)"/>
        public static unsafe void GetBoolean(GetPName pname, ref bool data)
        {
            fixed (bool* data_ptr = &data)
            {
                GetBooleanv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublev(GetPName, double*)"/>
        public static unsafe void GetDouble(GetPName pname, Span<double> data)
        {
            fixed (double* data_ptr = data)
            {
                GetDoublev(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublev(GetPName, double*)"/>
        public static unsafe void GetDouble(GetPName pname, double[] data)
        {
            fixed (double* data_ptr = data)
            {
                GetDoublev(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublev(GetPName, double*)"/>
        public static unsafe void GetDouble(GetPName pname, ref double data)
        {
            fixed (double* data_ptr = &data)
            {
                GetDoublev(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloatv(GetPName, float*)"/>
        public static unsafe void GetFloat(GetPName pname, Span<float> data)
        {
            fixed (float* data_ptr = data)
            {
                GetFloatv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloatv(GetPName, float*)"/>
        public static unsafe void GetFloat(GetPName pname, float[] data)
        {
            fixed (float* data_ptr = data)
            {
                GetFloatv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloatv(GetPName, float*)"/>
        public static unsafe void GetFloat(GetPName pname, ref float data)
        {
            fixed (float* data_ptr = &data)
            {
                GetFloatv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegerv(GetPName, int*)"/>
        public static unsafe void GetInteger(GetPName pname, Span<int> data)
        {
            fixed (int* data_ptr = data)
            {
                GetIntegerv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegerv(GetPName, int*)"/>
        public static unsafe void GetInteger(GetPName pname, int[] data)
        {
            fixed (int* data_ptr = data)
            {
                GetIntegerv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegerv(GetPName, int*)"/>
        public static unsafe void GetInteger(GetPName pname, ref int data)
        {
            fixed (int* data_ptr = &data)
            {
                GetIntegerv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetString(StringName)"/>
        public static unsafe string? GetString(StringName name)
        {
            byte* returnValue;
            string? returnValue_str;
            returnValue = GetString_(name);
            returnValue_str = Marshal.PtrToStringAnsi((IntPtr)returnValue);
            return returnValue_str;
        }
        /// <inheritdoc cref="GetTexImage(TextureTarget, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetTexImage(target, level, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="GetTexImage(TextureTarget, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void GetTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, Span<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetTexImage(target, level, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTexImage(TextureTarget, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void GetTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetTexImage(target, level, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTexImage(TextureTarget, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void GetTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetTexImage(target, level, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterfv(TextureTarget, GetTextureParameter, float*)"/>
        public static unsafe void GetTexParameterf(TextureTarget target, GetTextureParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterfv(TextureTarget, GetTextureParameter, float*)"/>
        public static unsafe void GetTexParameterf(TextureTarget target, GetTextureParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterfv(TextureTarget, GetTextureParameter, float*)"/>
        public static unsafe void GetTexParameterf(TextureTarget target, GetTextureParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameteriv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameteri(TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameteriv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameteri(TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameteriv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameteri(TextureTarget target, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameterfv(TextureTarget, int, GetTextureParameter, float*)"/>
        public static unsafe void GetTexLevelParameterf(TextureTarget target, int level, GetTextureParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexLevelParameterfv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameterfv(TextureTarget, int, GetTextureParameter, float*)"/>
        public static unsafe void GetTexLevelParameterf(TextureTarget target, int level, GetTextureParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexLevelParameterfv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameterfv(TextureTarget, int, GetTextureParameter, float*)"/>
        public static unsafe void GetTexLevelParameterf(TextureTarget target, int level, GetTextureParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTexLevelParameterfv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameteriv(TextureTarget, int, GetTextureParameter, int*)"/>
        public static unsafe void GetTexLevelParameteri(TextureTarget target, int level, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexLevelParameteriv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameteriv(TextureTarget, int, GetTextureParameter, int*)"/>
        public static unsafe void GetTexLevelParameteri(TextureTarget target, int level, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexLevelParameteriv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameteriv(TextureTarget, int, GetTextureParameter, int*)"/>
        public static unsafe void GetTexLevelParameteri(TextureTarget target, int level, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTexLevelParameteriv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="CallLists(int, ListNameType, void*)"/>
        public static unsafe void CallLists(int n, ListNameType type, IntPtr lists)
        {
            void* lists_vptr = (void*)lists;
            CallLists(n, type, lists_vptr);
        }
        /// <inheritdoc cref="CallLists(int, ListNameType, void*)"/>
        public static unsafe void CallLists<T1>(int n, ListNameType type, ReadOnlySpan<T1> lists)
            where T1 : unmanaged
        {
            fixed (void* lists_ptr = lists)
            {
                CallLists(n, type, lists_ptr);
            }
        }
        /// <inheritdoc cref="CallLists(int, ListNameType, void*)"/>
        public static unsafe void CallLists<T1>(int n, ListNameType type, T1[] lists)
            where T1 : unmanaged
        {
            fixed (void* lists_ptr = lists)
            {
                CallLists(n, type, lists_ptr);
            }
        }
        /// <inheritdoc cref="CallLists(int, ListNameType, void*)"/>
        public static unsafe void CallLists<T1>(int n, ListNameType type, in T1 lists)
            where T1 : unmanaged
        {
            fixed (void* lists_ptr = &lists)
            {
                CallLists(n, type, lists_ptr);
            }
        }
        /// <inheritdoc cref="Bitmap(int, int, float, float, float, float, byte*)"/>
        public static unsafe void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, ReadOnlySpan<byte> bitmap)
        {
            fixed (byte* bitmap_ptr = bitmap)
            {
                Bitmap(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
            }
        }
        /// <inheritdoc cref="Bitmap(int, int, float, float, float, float, byte*)"/>
        public static unsafe void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap)
        {
            fixed (byte* bitmap_ptr = bitmap)
            {
                Bitmap(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
            }
        }
        /// <inheritdoc cref="Bitmap(int, int, float, float, float, float, byte*)"/>
        public static unsafe void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, in byte bitmap)
        {
            fixed (byte* bitmap_ptr = &bitmap)
            {
                Bitmap(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
            }
        }
        /// <inheritdoc cref="Color3b(sbyte, sbyte, sbyte)"/>
        public static unsafe void Color3(sbyte red, sbyte green, sbyte blue)
        {
            Color3b(red, green, blue);
        }
        /// <inheritdoc cref="Color3bv(sbyte*)"/>
        public static unsafe void Color3(ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                Color3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3bv(sbyte*)"/>
        public static unsafe void Color3(sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                Color3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3bv(sbyte*)"/>
        public static unsafe void Color3(in sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                Color3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3dv(double*)"/>
        public static unsafe void Color3d(in Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                Color3dv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3fv(float*)"/>
        public static unsafe void Color3f(in Color3<Rgb> v)
        {
            fixed (Color3<Rgb>* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Color3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3iv(int*)"/>
        public static unsafe void Color3i(in Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                Color3iv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3s(short, short, short)"/>
        public static unsafe void Color3(short red, short green, short blue)
        {
            Color3s(red, green, blue);
        }
        /// <inheritdoc cref="Color3sv(short*)"/>
        public static unsafe void Color3(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                Color3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3sv(short*)"/>
        public static unsafe void Color3(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                Color3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3sv(short*)"/>
        public static unsafe void Color3(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                Color3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3ub(byte, byte, byte)"/>
        public static unsafe void Color3(byte red, byte green, byte blue)
        {
            Color3ub(red, green, blue);
        }
        /// <inheritdoc cref="Color3ubv(byte*)"/>
        public static unsafe void Color3(ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v)
            {
                Color3ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3ubv(byte*)"/>
        public static unsafe void Color3(byte[] v)
        {
            fixed (byte* v_ptr = v)
            {
                Color3ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3ubv(byte*)"/>
        public static unsafe void Color3(in byte v)
        {
            fixed (byte* v_ptr = &v)
            {
                Color3ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3uiv(uint*)"/>
        public static unsafe void Color3ui(ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                Color3uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3uiv(uint*)"/>
        public static unsafe void Color3ui(uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                Color3uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3uiv(uint*)"/>
        public static unsafe void Color3ui(in uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                Color3uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3us(ushort, ushort, ushort)"/>
        public static unsafe void Color3(ushort red, ushort green, ushort blue)
        {
            Color3us(red, green, blue);
        }
        /// <inheritdoc cref="Color3usv(ushort*)"/>
        public static unsafe void Color3(ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v)
            {
                Color3usv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3usv(ushort*)"/>
        public static unsafe void Color3(ushort[] v)
        {
            fixed (ushort* v_ptr = v)
            {
                Color3usv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3usv(ushort*)"/>
        public static unsafe void Color3(in ushort v)
        {
            fixed (ushort* v_ptr = &v)
            {
                Color3usv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4b(sbyte, sbyte, sbyte, sbyte)"/>
        public static unsafe void Color4(sbyte red, sbyte green, sbyte blue, sbyte alpha)
        {
            Color4b(red, green, blue, alpha);
        }
        /// <inheritdoc cref="Color4bv(sbyte*)"/>
        public static unsafe void Color4(ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                Color4bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4bv(sbyte*)"/>
        public static unsafe void Color4(sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                Color4bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4bv(sbyte*)"/>
        public static unsafe void Color4(in sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                Color4bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4dv(double*)"/>
        public static unsafe void Color4d(in Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                Color4dv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4fv(float*)"/>
        public static unsafe void Color4f(in Color4<Rgba> v)
        {
            fixed (Color4<Rgba>* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Color4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4iv(int*)"/>
        public static unsafe void Color4i(in Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                Color4iv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4s(short, short, short, short)"/>
        public static unsafe void Color4(short red, short green, short blue, short alpha)
        {
            Color4s(red, green, blue, alpha);
        }
        /// <inheritdoc cref="Color4sv(short*)"/>
        public static unsafe void Color4(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                Color4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4sv(short*)"/>
        public static unsafe void Color4(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                Color4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4sv(short*)"/>
        public static unsafe void Color4(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                Color4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4ub(byte, byte, byte, byte)"/>
        public static unsafe void Color4(byte red, byte green, byte blue, byte alpha)
        {
            Color4ub(red, green, blue, alpha);
        }
        /// <inheritdoc cref="Color4ubv(byte*)"/>
        public static unsafe void Color4(ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v)
            {
                Color4ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4ubv(byte*)"/>
        public static unsafe void Color4(byte[] v)
        {
            fixed (byte* v_ptr = v)
            {
                Color4ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4ubv(byte*)"/>
        public static unsafe void Color4(in byte v)
        {
            fixed (byte* v_ptr = &v)
            {
                Color4ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4uiv(uint*)"/>
        public static unsafe void Color4ui(ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                Color4uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4uiv(uint*)"/>
        public static unsafe void Color4ui(uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                Color4uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4uiv(uint*)"/>
        public static unsafe void Color4ui(in uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                Color4uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4us(ushort, ushort, ushort, ushort)"/>
        public static unsafe void Color4(ushort red, ushort green, ushort blue, ushort alpha)
        {
            Color4us(red, green, blue, alpha);
        }
        /// <inheritdoc cref="Color4usv(ushort*)"/>
        public static unsafe void Color4(ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v)
            {
                Color4usv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4usv(ushort*)"/>
        public static unsafe void Color4(ushort[] v)
        {
            fixed (ushort* v_ptr = v)
            {
                Color4usv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4usv(ushort*)"/>
        public static unsafe void Color4(in ushort v)
        {
            fixed (ushort* v_ptr = &v)
            {
                Color4usv(v_ptr);
            }
        }
        /// <inheritdoc cref="EdgeFlagv(bool*)"/>
        public static unsafe void EdgeFlag(ReadOnlySpan<bool> flag)
        {
            fixed (bool* flag_ptr = flag)
            {
                EdgeFlagv(flag_ptr);
            }
        }
        /// <inheritdoc cref="EdgeFlagv(bool*)"/>
        public static unsafe void EdgeFlag(bool[] flag)
        {
            fixed (bool* flag_ptr = flag)
            {
                EdgeFlagv(flag_ptr);
            }
        }
        /// <inheritdoc cref="EdgeFlagv(bool*)"/>
        public static unsafe void EdgeFlag(in bool flag)
        {
            fixed (bool* flag_ptr = &flag)
            {
                EdgeFlagv(flag_ptr);
            }
        }
        /// <inheritdoc cref="Indexdv(double*)"/>
        public static unsafe void Indexd(ReadOnlySpan<double> c)
        {
            fixed (double* c_ptr = c)
            {
                Indexdv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexdv(double*)"/>
        public static unsafe void Indexd(double[] c)
        {
            fixed (double* c_ptr = c)
            {
                Indexdv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexdv(double*)"/>
        public static unsafe void Indexd(in double c)
        {
            fixed (double* c_ptr = &c)
            {
                Indexdv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexfv(float*)"/>
        public static unsafe void Indexf(ReadOnlySpan<float> c)
        {
            fixed (float* c_ptr = c)
            {
                Indexfv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexfv(float*)"/>
        public static unsafe void Indexf(float[] c)
        {
            fixed (float* c_ptr = c)
            {
                Indexfv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexfv(float*)"/>
        public static unsafe void Indexf(in float c)
        {
            fixed (float* c_ptr = &c)
            {
                Indexfv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexiv(int*)"/>
        public static unsafe void Indexi(ReadOnlySpan<int> c)
        {
            fixed (int* c_ptr = c)
            {
                Indexiv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexiv(int*)"/>
        public static unsafe void Indexi(int[] c)
        {
            fixed (int* c_ptr = c)
            {
                Indexiv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexiv(int*)"/>
        public static unsafe void Indexi(in int c)
        {
            fixed (int* c_ptr = &c)
            {
                Indexiv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexs(short)"/>
        public static unsafe void Index(short c)
        {
            Indexs(c);
        }
        /// <inheritdoc cref="Indexsv(short*)"/>
        public static unsafe void Index(ReadOnlySpan<short> c)
        {
            fixed (short* c_ptr = c)
            {
                Indexsv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexsv(short*)"/>
        public static unsafe void Index(short[] c)
        {
            fixed (short* c_ptr = c)
            {
                Indexsv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexsv(short*)"/>
        public static unsafe void Index(in short c)
        {
            fixed (short* c_ptr = &c)
            {
                Indexsv(c_ptr);
            }
        }
        /// <inheritdoc cref="Normal3b(sbyte, sbyte, sbyte)"/>
        public static unsafe void Normal3(sbyte nx, sbyte ny, sbyte nz)
        {
            Normal3b(nx, ny, nz);
        }
        /// <inheritdoc cref="Normal3bv(sbyte*)"/>
        public static unsafe void Normal3(ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                Normal3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3bv(sbyte*)"/>
        public static unsafe void Normal3(sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                Normal3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3bv(sbyte*)"/>
        public static unsafe void Normal3(in sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                Normal3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3dv(double*)"/>
        public static unsafe void Normal3d(in Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                Normal3dv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3fv(float*)"/>
        public static unsafe void Normal3f(in Vector3 v)
        {
            fixed (Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Normal3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3fv(float*)"/>
        public static unsafe void Normal3f(in System.Numerics.Vector3 v)
        {
            fixed (System.Numerics.Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Normal3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3fv(float*)"/>
        public static unsafe void Normal3f(ReadOnlySpan<System.Numerics.Vector3> v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Normal3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3fv(float*)"/>
        public static unsafe void Normal3f(System.Numerics.Vector3[] v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Normal3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3iv(int*)"/>
        public static unsafe void Normal3i(in Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                Normal3iv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3s(short, short, short)"/>
        public static unsafe void Normal3(short nx, short ny, short nz)
        {
            Normal3s(nx, ny, nz);
        }
        /// <inheritdoc cref="Normal3sv(short*)"/>
        public static unsafe void Normal3(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                Normal3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3sv(short*)"/>
        public static unsafe void Normal3(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                Normal3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3sv(short*)"/>
        public static unsafe void Normal3(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                Normal3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2dv(double*)"/>
        public static unsafe void RasterPos2d(in Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                RasterPos2dv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2fv(float*)"/>
        public static unsafe void RasterPos2f(in Vector2 v)
        {
            fixed (Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2fv(float*)"/>
        public static unsafe void RasterPos2f(in System.Numerics.Vector2 v)
        {
            fixed (System.Numerics.Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2fv(float*)"/>
        public static unsafe void RasterPos2f(ReadOnlySpan<System.Numerics.Vector2> v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2fv(float*)"/>
        public static unsafe void RasterPos2f(System.Numerics.Vector2[] v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2iv(int*)"/>
        public static unsafe void RasterPos2i(in Vector2i v)
        {
            fixed (Vector2i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                RasterPos2iv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2s(short, short)"/>
        public static unsafe void RasterPos2(short x, short y)
        {
            RasterPos2s(x, y);
        }
        /// <inheritdoc cref="RasterPos2sv(short*)"/>
        public static unsafe void RasterPos2(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                RasterPos2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2sv(short*)"/>
        public static unsafe void RasterPos2(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                RasterPos2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2sv(short*)"/>
        public static unsafe void RasterPos2(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                RasterPos2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3dv(double*)"/>
        public static unsafe void RasterPos3d(in Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                RasterPos3dv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3fv(float*)"/>
        public static unsafe void RasterPos3f(in Vector3 v)
        {
            fixed (Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3fv(float*)"/>
        public static unsafe void RasterPos3f(in System.Numerics.Vector3 v)
        {
            fixed (System.Numerics.Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3fv(float*)"/>
        public static unsafe void RasterPos3f(ReadOnlySpan<System.Numerics.Vector3> v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3fv(float*)"/>
        public static unsafe void RasterPos3f(System.Numerics.Vector3[] v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3iv(int*)"/>
        public static unsafe void RasterPos3i(in Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                RasterPos3iv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3s(short, short, short)"/>
        public static unsafe void RasterPos3(short x, short y, short z)
        {
            RasterPos3s(x, y, z);
        }
        /// <inheritdoc cref="RasterPos3sv(short*)"/>
        public static unsafe void RasterPos3(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                RasterPos3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3sv(short*)"/>
        public static unsafe void RasterPos3(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                RasterPos3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3sv(short*)"/>
        public static unsafe void RasterPos3(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                RasterPos3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4dv(double*)"/>
        public static unsafe void RasterPos4d(in Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                RasterPos4dv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4fv(float*)"/>
        public static unsafe void RasterPos4f(in Vector4 v)
        {
            fixed (Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4fv(float*)"/>
        public static unsafe void RasterPos4f(in System.Numerics.Vector4 v)
        {
            fixed (System.Numerics.Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4fv(float*)"/>
        public static unsafe void RasterPos4f(ReadOnlySpan<System.Numerics.Vector4> v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4fv(float*)"/>
        public static unsafe void RasterPos4f(System.Numerics.Vector4[] v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4iv(int*)"/>
        public static unsafe void RasterPos4i(in Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                RasterPos4iv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4s(short, short, short, short)"/>
        public static unsafe void RasterPos4(short x, short y, short z, short w)
        {
            RasterPos4s(x, y, z, w);
        }
        /// <inheritdoc cref="RasterPos4sv(short*)"/>
        public static unsafe void RasterPos4(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                RasterPos4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4sv(short*)"/>
        public static unsafe void RasterPos4(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                RasterPos4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4sv(short*)"/>
        public static unsafe void RasterPos4(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                RasterPos4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Rectdv(double*, double*)"/>
        public static unsafe void Rectd(ReadOnlySpan<double> v1, ReadOnlySpan<double> v2)
        {
            fixed (double* v1_ptr = v1)
            {
                fixed (double* v2_ptr = v2)
                {
                    Rectdv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectdv(double*, double*)"/>
        public static unsafe void Rectd(double[] v1, double[] v2)
        {
            fixed (double* v1_ptr = v1)
            {
                fixed (double* v2_ptr = v2)
                {
                    Rectdv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectdv(double*, double*)"/>
        public static unsafe void Rectd(in double v1, in double v2)
        {
            fixed (double* v1_ptr = &v1)
            fixed (double* v2_ptr = &v2)
            {
                Rectdv(v1_ptr, v2_ptr);
            }
        }
        /// <inheritdoc cref="Rectfv(float*, float*)"/>
        public static unsafe void Rectf(ReadOnlySpan<float> v1, ReadOnlySpan<float> v2)
        {
            fixed (float* v1_ptr = v1)
            {
                fixed (float* v2_ptr = v2)
                {
                    Rectfv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectfv(float*, float*)"/>
        public static unsafe void Rectf(float[] v1, float[] v2)
        {
            fixed (float* v1_ptr = v1)
            {
                fixed (float* v2_ptr = v2)
                {
                    Rectfv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectfv(float*, float*)"/>
        public static unsafe void Rectf(in float v1, in float v2)
        {
            fixed (float* v1_ptr = &v1)
            fixed (float* v2_ptr = &v2)
            {
                Rectfv(v1_ptr, v2_ptr);
            }
        }
        /// <inheritdoc cref="Rectiv(int*, int*)"/>
        public static unsafe void Recti(ReadOnlySpan<int> v1, ReadOnlySpan<int> v2)
        {
            fixed (int* v1_ptr = v1)
            {
                fixed (int* v2_ptr = v2)
                {
                    Rectiv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectiv(int*, int*)"/>
        public static unsafe void Recti(int[] v1, int[] v2)
        {
            fixed (int* v1_ptr = v1)
            {
                fixed (int* v2_ptr = v2)
                {
                    Rectiv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectiv(int*, int*)"/>
        public static unsafe void Recti(in int v1, in int v2)
        {
            fixed (int* v1_ptr = &v1)
            fixed (int* v2_ptr = &v2)
            {
                Rectiv(v1_ptr, v2_ptr);
            }
        }
        /// <inheritdoc cref="Rectsv(short*, short*)"/>
        public static unsafe void Rect(ReadOnlySpan<short> v1, ReadOnlySpan<short> v2)
        {
            fixed (short* v1_ptr = v1)
            {
                fixed (short* v2_ptr = v2)
                {
                    Rectsv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectsv(short*, short*)"/>
        public static unsafe void Rect(short[] v1, short[] v2)
        {
            fixed (short* v1_ptr = v1)
            {
                fixed (short* v2_ptr = v2)
                {
                    Rectsv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectsv(short*, short*)"/>
        public static unsafe void Rect(in short v1, in short v2)
        {
            fixed (short* v1_ptr = &v1)
            fixed (short* v2_ptr = &v2)
            {
                Rectsv(v1_ptr, v2_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord1dv(double*)"/>
        public static unsafe void TexCoord1d(in double v)
        {
            fixed (double* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                TexCoord1dv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord1fv(float*)"/>
        public static unsafe void TexCoord1f(in float v)
        {
            fixed (float* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord1fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord1iv(int*)"/>
        public static unsafe void TexCoord1i(in int v)
        {
            fixed (int* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                TexCoord1iv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord1s(short)"/>
        public static unsafe void TexCoord1(short s)
        {
            TexCoord1s(s);
        }
        /// <inheritdoc cref="TexCoord1sv(short*)"/>
        public static unsafe void TexCoord1(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                TexCoord1sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord1sv(short*)"/>
        public static unsafe void TexCoord1(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                TexCoord1sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord1sv(short*)"/>
        public static unsafe void TexCoord1(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                TexCoord1sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2dv(double*)"/>
        public static unsafe void TexCoord2d(in Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                TexCoord2dv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2fv(float*)"/>
        public static unsafe void TexCoord2f(in Vector2 v)
        {
            fixed (Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2fv(float*)"/>
        public static unsafe void TexCoord2f(in System.Numerics.Vector2 v)
        {
            fixed (System.Numerics.Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2fv(float*)"/>
        public static unsafe void TexCoord2f(ReadOnlySpan<System.Numerics.Vector2> v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2fv(float*)"/>
        public static unsafe void TexCoord2f(System.Numerics.Vector2[] v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2iv(int*)"/>
        public static unsafe void TexCoord2i(in Vector2i v)
        {
            fixed (Vector2i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                TexCoord2iv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2s(short, short)"/>
        public static unsafe void TexCoord2(short s, short t)
        {
            TexCoord2s(s, t);
        }
        /// <inheritdoc cref="TexCoord2sv(short*)"/>
        public static unsafe void TexCoord2(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                TexCoord2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2sv(short*)"/>
        public static unsafe void TexCoord2(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                TexCoord2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2sv(short*)"/>
        public static unsafe void TexCoord2(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                TexCoord2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3dv(double*)"/>
        public static unsafe void TexCoord3d(in Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                TexCoord3dv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3fv(float*)"/>
        public static unsafe void TexCoord3f(in Vector3 v)
        {
            fixed (Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3fv(float*)"/>
        public static unsafe void TexCoord3f(in System.Numerics.Vector3 v)
        {
            fixed (System.Numerics.Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3fv(float*)"/>
        public static unsafe void TexCoord3f(ReadOnlySpan<System.Numerics.Vector3> v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3fv(float*)"/>
        public static unsafe void TexCoord3f(System.Numerics.Vector3[] v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3iv(int*)"/>
        public static unsafe void TexCoord3i(in Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                TexCoord3iv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3s(short, short, short)"/>
        public static unsafe void TexCoord3(short s, short t, short r)
        {
            TexCoord3s(s, t, r);
        }
        /// <inheritdoc cref="TexCoord3sv(short*)"/>
        public static unsafe void TexCoord3(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                TexCoord3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3sv(short*)"/>
        public static unsafe void TexCoord3(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                TexCoord3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3sv(short*)"/>
        public static unsafe void TexCoord3(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                TexCoord3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4dv(double*)"/>
        public static unsafe void TexCoord4d(in Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                TexCoord4dv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4fv(float*)"/>
        public static unsafe void TexCoord4f(in Vector4 v)
        {
            fixed (Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4fv(float*)"/>
        public static unsafe void TexCoord4f(in System.Numerics.Vector4 v)
        {
            fixed (System.Numerics.Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4fv(float*)"/>
        public static unsafe void TexCoord4f(ReadOnlySpan<System.Numerics.Vector4> v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4fv(float*)"/>
        public static unsafe void TexCoord4f(System.Numerics.Vector4[] v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4iv(int*)"/>
        public static unsafe void TexCoord4i(in Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                TexCoord4iv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4s(short, short, short, short)"/>
        public static unsafe void TexCoord4(short s, short t, short r, short q)
        {
            TexCoord4s(s, t, r, q);
        }
        /// <inheritdoc cref="TexCoord4sv(short*)"/>
        public static unsafe void TexCoord4(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                TexCoord4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4sv(short*)"/>
        public static unsafe void TexCoord4(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                TexCoord4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4sv(short*)"/>
        public static unsafe void TexCoord4(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                TexCoord4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2dv(double*)"/>
        public static unsafe void Vertex2d(in Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                Vertex2dv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2fv(float*)"/>
        public static unsafe void Vertex2f(in Vector2 v)
        {
            fixed (Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2fv(float*)"/>
        public static unsafe void Vertex2f(in System.Numerics.Vector2 v)
        {
            fixed (System.Numerics.Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2fv(float*)"/>
        public static unsafe void Vertex2f(ReadOnlySpan<System.Numerics.Vector2> v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2fv(float*)"/>
        public static unsafe void Vertex2f(System.Numerics.Vector2[] v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2iv(int*)"/>
        public static unsafe void Vertex2i(in Vector2i v)
        {
            fixed (Vector2i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                Vertex2iv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2s(short, short)"/>
        public static unsafe void Vertex2(short x, short y)
        {
            Vertex2s(x, y);
        }
        /// <inheritdoc cref="Vertex2sv(short*)"/>
        public static unsafe void Vertex2(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                Vertex2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2sv(short*)"/>
        public static unsafe void Vertex2(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                Vertex2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2sv(short*)"/>
        public static unsafe void Vertex2(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                Vertex2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3dv(double*)"/>
        public static unsafe void Vertex3d(in Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                Vertex3dv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3fv(float*)"/>
        public static unsafe void Vertex3f(in Vector3 v)
        {
            fixed (Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3fv(float*)"/>
        public static unsafe void Vertex3f(in System.Numerics.Vector3 v)
        {
            fixed (System.Numerics.Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3fv(float*)"/>
        public static unsafe void Vertex3f(ReadOnlySpan<System.Numerics.Vector3> v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3fv(float*)"/>
        public static unsafe void Vertex3f(System.Numerics.Vector3[] v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3iv(int*)"/>
        public static unsafe void Vertex3i(in Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                Vertex3iv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3s(short, short, short)"/>
        public static unsafe void Vertex3(short x, short y, short z)
        {
            Vertex3s(x, y, z);
        }
        /// <inheritdoc cref="Vertex3sv(short*)"/>
        public static unsafe void Vertex3(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                Vertex3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3sv(short*)"/>
        public static unsafe void Vertex3(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                Vertex3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3sv(short*)"/>
        public static unsafe void Vertex3(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                Vertex3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4dv(double*)"/>
        public static unsafe void Vertex4d(in Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                Vertex4dv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4fv(float*)"/>
        public static unsafe void Vertex4f(in Vector4 v)
        {
            fixed (Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4fv(float*)"/>
        public static unsafe void Vertex4f(in System.Numerics.Vector4 v)
        {
            fixed (System.Numerics.Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4fv(float*)"/>
        public static unsafe void Vertex4f(ReadOnlySpan<System.Numerics.Vector4> v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4fv(float*)"/>
        public static unsafe void Vertex4f(System.Numerics.Vector4[] v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4iv(int*)"/>
        public static unsafe void Vertex4i(in Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                Vertex4iv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4s(short, short, short, short)"/>
        public static unsafe void Vertex4(short x, short y, short z, short w)
        {
            Vertex4s(x, y, z, w);
        }
        /// <inheritdoc cref="Vertex4sv(short*)"/>
        public static unsafe void Vertex4(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                Vertex4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4sv(short*)"/>
        public static unsafe void Vertex4(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                Vertex4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4sv(short*)"/>
        public static unsafe void Vertex4(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                Vertex4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="ClipPlane(ClipPlaneName, double*)"/>
        public static unsafe void ClipPlane(ClipPlaneName plane, ReadOnlySpan<double> equation)
        {
            fixed (double* equation_ptr = equation)
            {
                ClipPlane(plane, equation_ptr);
            }
        }
        /// <inheritdoc cref="ClipPlane(ClipPlaneName, double*)"/>
        public static unsafe void ClipPlane(ClipPlaneName plane, double[] equation)
        {
            fixed (double* equation_ptr = equation)
            {
                ClipPlane(plane, equation_ptr);
            }
        }
        /// <inheritdoc cref="ClipPlane(ClipPlaneName, double*)"/>
        public static unsafe void ClipPlane(ClipPlaneName plane, in double equation)
        {
            fixed (double* equation_ptr = &equation)
            {
                ClipPlane(plane, equation_ptr);
            }
        }
        /// <inheritdoc cref="Fogfv(FogParameter, float*)"/>
        public static unsafe void Fogf(FogParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                Fogfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Fogfv(FogParameter, float*)"/>
        public static unsafe void Fogf(FogParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                Fogfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Fogfv(FogParameter, float*)"/>
        public static unsafe void Fogf(FogParameter pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                Fogfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Fogiv(FogParameter, int*)"/>
        public static unsafe void Fogi(FogParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                Fogiv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Fogiv(FogParameter, int*)"/>
        public static unsafe void Fogi(FogParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                Fogiv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Fogiv(FogParameter, int*)"/>
        public static unsafe void Fogi(FogParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                Fogiv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Lightfv(LightName, LightParameter, float*)"/>
        public static unsafe void Lightf(LightName light, LightParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                Lightfv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Lightfv(LightName, LightParameter, float*)"/>
        public static unsafe void Lightf(LightName light, LightParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                Lightfv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Lightfv(LightName, LightParameter, float*)"/>
        public static unsafe void Lightf(LightName light, LightParameter pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                Lightfv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Lightiv(LightName, LightParameter, int*)"/>
        public static unsafe void Lighti(LightName light, LightParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                Lightiv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Lightiv(LightName, LightParameter, int*)"/>
        public static unsafe void Lighti(LightName light, LightParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                Lightiv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Lightiv(LightName, LightParameter, int*)"/>
        public static unsafe void Lighti(LightName light, LightParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                Lightiv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="LightModelfv(LightModelParameter, float*)"/>
        public static unsafe void LightModelf(LightModelParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                LightModelfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="LightModelfv(LightModelParameter, float*)"/>
        public static unsafe void LightModelf(LightModelParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                LightModelfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="LightModelfv(LightModelParameter, float*)"/>
        public static unsafe void LightModelf(LightModelParameter pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                LightModelfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="LightModeliv(LightModelParameter, int*)"/>
        public static unsafe void LightModeli(LightModelParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                LightModeliv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="LightModeliv(LightModelParameter, int*)"/>
        public static unsafe void LightModeli(LightModelParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                LightModeliv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="LightModeliv(LightModelParameter, int*)"/>
        public static unsafe void LightModeli(LightModelParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                LightModeliv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Materialfv(TriangleFace, MaterialParameter, float*)"/>
        public static unsafe void Materialf(TriangleFace face, MaterialParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                Materialfv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Materialfv(TriangleFace, MaterialParameter, float*)"/>
        public static unsafe void Materialf(TriangleFace face, MaterialParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                Materialfv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Materialfv(TriangleFace, MaterialParameter, float*)"/>
        public static unsafe void Materialf(TriangleFace face, MaterialParameter pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                Materialfv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Materialiv(TriangleFace, MaterialParameter, int*)"/>
        public static unsafe void Materiali(TriangleFace face, MaterialParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                Materialiv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Materialiv(TriangleFace, MaterialParameter, int*)"/>
        public static unsafe void Materiali(TriangleFace face, MaterialParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                Materialiv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Materialiv(TriangleFace, MaterialParameter, int*)"/>
        public static unsafe void Materiali(TriangleFace face, MaterialParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                Materialiv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PolygonStipple(byte*)"/>
        public static unsafe void PolygonStipple(ReadOnlySpan<byte> mask)
        {
            fixed (byte* mask_ptr = mask)
            {
                PolygonStipple(mask_ptr);
            }
        }
        /// <inheritdoc cref="PolygonStipple(byte*)"/>
        public static unsafe void PolygonStipple(byte[] mask)
        {
            fixed (byte* mask_ptr = mask)
            {
                PolygonStipple(mask_ptr);
            }
        }
        /// <inheritdoc cref="PolygonStipple(byte*)"/>
        public static unsafe void PolygonStipple(in byte mask)
        {
            fixed (byte* mask_ptr = &mask)
            {
                PolygonStipple(mask_ptr);
            }
        }
        /// <inheritdoc cref="TexEnvfv(TextureEnvTarget, TextureEnvParameter, float*)"/>
        public static unsafe void TexEnvf(TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                TexEnvfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexEnvfv(TextureEnvTarget, TextureEnvParameter, float*)"/>
        public static unsafe void TexEnvf(TextureEnvTarget target, TextureEnvParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                TexEnvfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexEnvfv(TextureEnvTarget, TextureEnvParameter, float*)"/>
        public static unsafe void TexEnvf(TextureEnvTarget target, TextureEnvParameter pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                TexEnvfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexEnviv(TextureEnvTarget, TextureEnvParameter, int*)"/>
        public static unsafe void TexEnvi(TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexEnviv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexEnviv(TextureEnvTarget, TextureEnvParameter, int*)"/>
        public static unsafe void TexEnvi(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexEnviv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexEnviv(TextureEnvTarget, TextureEnvParameter, int*)"/>
        public static unsafe void TexEnvi(TextureEnvTarget target, TextureEnvParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                TexEnviv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGendv(TextureCoordName, TextureGenParameter, double*)"/>
        public static unsafe void TexGend(TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<double> parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                TexGendv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGendv(TextureCoordName, TextureGenParameter, double*)"/>
        public static unsafe void TexGend(TextureCoordName coord, TextureGenParameter pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                TexGendv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGendv(TextureCoordName, TextureGenParameter, double*)"/>
        public static unsafe void TexGend(TextureCoordName coord, TextureGenParameter pname, in double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                TexGendv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGenfv(TextureCoordName, TextureGenParameter, float*)"/>
        public static unsafe void TexGenf(TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                TexGenfv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGenfv(TextureCoordName, TextureGenParameter, float*)"/>
        public static unsafe void TexGenf(TextureCoordName coord, TextureGenParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                TexGenfv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGenfv(TextureCoordName, TextureGenParameter, float*)"/>
        public static unsafe void TexGenf(TextureCoordName coord, TextureGenParameter pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                TexGenfv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGeniv(TextureCoordName, TextureGenParameter, int*)"/>
        public static unsafe void TexGeni(TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexGeniv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGeniv(TextureCoordName, TextureGenParameter, int*)"/>
        public static unsafe void TexGeni(TextureCoordName coord, TextureGenParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexGeniv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGeniv(TextureCoordName, TextureGenParameter, int*)"/>
        public static unsafe void TexGeni(TextureCoordName coord, TextureGenParameter pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                TexGeniv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="FeedbackBuffer(int, FeedbackType, float*)"/>
        public static unsafe void FeedbackBuffer(FeedbackType type, Span<float> buffer)
        {
            int size = (int)(buffer.Length);
            fixed (float* buffer_ptr = buffer)
            {
                FeedbackBuffer(size, type, buffer_ptr);
            }
        }
        /// <inheritdoc cref="FeedbackBuffer(int, FeedbackType, float*)"/>
        public static unsafe void FeedbackBuffer(FeedbackType type, float[] buffer)
        {
            int size = (int)(buffer.Length);
            fixed (float* buffer_ptr = buffer)
            {
                FeedbackBuffer(size, type, buffer_ptr);
            }
        }
        /// <inheritdoc cref="FeedbackBuffer(int, FeedbackType, float*)"/>
        public static unsafe void FeedbackBuffer(int size, FeedbackType type, ref float buffer)
        {
            fixed (float* buffer_ptr = &buffer)
            {
                FeedbackBuffer(size, type, buffer_ptr);
            }
        }
        /// <inheritdoc cref="SelectBuffer(int, uint*)"/>
        public static unsafe void SelectBuffer(Span<uint> buffer)
        {
            int size = (int)(buffer.Length);
            fixed (uint* buffer_ptr = buffer)
            {
                SelectBuffer(size, buffer_ptr);
            }
        }
        /// <inheritdoc cref="SelectBuffer(int, uint*)"/>
        public static unsafe void SelectBuffer(uint[] buffer)
        {
            int size = (int)(buffer.Length);
            fixed (uint* buffer_ptr = buffer)
            {
                SelectBuffer(size, buffer_ptr);
            }
        }
        /// <inheritdoc cref="SelectBuffer(int, uint*)"/>
        public static unsafe void SelectBuffer(int size, ref uint buffer)
        {
            fixed (uint* buffer_ptr = &buffer)
            {
                SelectBuffer(size, buffer_ptr);
            }
        }
        /// <inheritdoc cref="Map1d(MapTarget, double, double, int, int, double*)"/>
        public static unsafe void Map1d(MapTarget target, double u1, double u2, int stride, int order, ReadOnlySpan<double> points)
        {
            fixed (double* points_ptr = points)
            {
                Map1d(target, u1, u2, stride, order, points_ptr);
            }
        }
        /// <inheritdoc cref="Map1d(MapTarget, double, double, int, int, double*)"/>
        public static unsafe void Map1d(MapTarget target, double u1, double u2, int stride, int order, double[] points)
        {
            fixed (double* points_ptr = points)
            {
                Map1d(target, u1, u2, stride, order, points_ptr);
            }
        }
        /// <inheritdoc cref="Map1d(MapTarget, double, double, int, int, double*)"/>
        public static unsafe void Map1d(MapTarget target, double u1, double u2, int stride, int order, in double points)
        {
            fixed (double* points_ptr = &points)
            {
                Map1d(target, u1, u2, stride, order, points_ptr);
            }
        }
        /// <inheritdoc cref="Map1f(MapTarget, float, float, int, int, float*)"/>
        public static unsafe void Map1f(MapTarget target, float u1, float u2, int stride, int order, ReadOnlySpan<float> points)
        {
            fixed (float* points_ptr = points)
            {
                Map1f(target, u1, u2, stride, order, points_ptr);
            }
        }
        /// <inheritdoc cref="Map1f(MapTarget, float, float, int, int, float*)"/>
        public static unsafe void Map1f(MapTarget target, float u1, float u2, int stride, int order, float[] points)
        {
            fixed (float* points_ptr = points)
            {
                Map1f(target, u1, u2, stride, order, points_ptr);
            }
        }
        /// <inheritdoc cref="Map1f(MapTarget, float, float, int, int, float*)"/>
        public static unsafe void Map1f(MapTarget target, float u1, float u2, int stride, int order, in float points)
        {
            fixed (float* points_ptr = &points)
            {
                Map1f(target, u1, u2, stride, order, points_ptr);
            }
        }
        /// <inheritdoc cref="Map2d(MapTarget, double, double, int, int, double, double, int, int, double*)"/>
        public static unsafe void Map2d(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ReadOnlySpan<double> points)
        {
            fixed (double* points_ptr = points)
            {
                Map2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
            }
        }
        /// <inheritdoc cref="Map2d(MapTarget, double, double, int, int, double, double, int, int, double*)"/>
        public static unsafe void Map2d(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points)
        {
            fixed (double* points_ptr = points)
            {
                Map2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
            }
        }
        /// <inheritdoc cref="Map2d(MapTarget, double, double, int, int, double, double, int, int, double*)"/>
        public static unsafe void Map2d(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, in double points)
        {
            fixed (double* points_ptr = &points)
            {
                Map2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
            }
        }
        /// <inheritdoc cref="Map2f(MapTarget, float, float, int, int, float, float, int, int, float*)"/>
        public static unsafe void Map2f(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ReadOnlySpan<float> points)
        {
            fixed (float* points_ptr = points)
            {
                Map2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
            }
        }
        /// <inheritdoc cref="Map2f(MapTarget, float, float, int, int, float, float, int, int, float*)"/>
        public static unsafe void Map2f(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points)
        {
            fixed (float* points_ptr = points)
            {
                Map2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
            }
        }
        /// <inheritdoc cref="Map2f(MapTarget, float, float, int, int, float, float, int, int, float*)"/>
        public static unsafe void Map2f(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, in float points)
        {
            fixed (float* points_ptr = &points)
            {
                Map2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
            }
        }
        /// <inheritdoc cref="EvalCoord1dv(double*)"/>
        public static unsafe void EvalCoord1d(in double u)
        {
            fixed (double* tmp_u = &u)
            {
                double* u_ptr = (double*)tmp_u;
                EvalCoord1dv(u_ptr);
            }
        }
        /// <inheritdoc cref="EvalCoord1fv(float*)"/>
        public static unsafe void EvalCoord1f(in float u)
        {
            fixed (float* tmp_u = &u)
            {
                float* u_ptr = (float*)tmp_u;
                EvalCoord1fv(u_ptr);
            }
        }
        /// <inheritdoc cref="EvalCoord2dv(double*)"/>
        public static unsafe void EvalCoord2d(in Vector2d u)
        {
            fixed (Vector2d* tmp_u = &u)
            {
                double* u_ptr = (double*)tmp_u;
                EvalCoord2dv(u_ptr);
            }
        }
        /// <inheritdoc cref="EvalCoord2fv(float*)"/>
        public static unsafe void EvalCoord2f(in Vector2 u)
        {
            fixed (Vector2* tmp_u = &u)
            {
                float* u_ptr = (float*)tmp_u;
                EvalCoord2fv(u_ptr);
            }
        }
        /// <inheritdoc cref="EvalCoord2fv(float*)"/>
        public static unsafe void EvalCoord2f(in System.Numerics.Vector2 u)
        {
            fixed (System.Numerics.Vector2* tmp_u = &u)
            {
                float* u_ptr = (float*)tmp_u;
                EvalCoord2fv(u_ptr);
            }
        }
        /// <inheritdoc cref="EvalCoord2fv(float*)"/>
        public static unsafe void EvalCoord2f(ReadOnlySpan<System.Numerics.Vector2> u)
        {
            fixed (System.Numerics.Vector2* tmp_u = u)
            {
                float* u_ptr = (float*)tmp_u;
                EvalCoord2fv(u_ptr);
            }
        }
        /// <inheritdoc cref="EvalCoord2fv(float*)"/>
        public static unsafe void EvalCoord2f(System.Numerics.Vector2[] u)
        {
            fixed (System.Numerics.Vector2* tmp_u = u)
            {
                float* u_ptr = (float*)tmp_u;
                EvalCoord2fv(u_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapfv(PixelMap, int, float*)"/>
        public static unsafe void PixelMapf(PixelMap map, ReadOnlySpan<float> values)
        {
            int mapsize = (int)(values.Length);
            fixed (float* values_ptr = values)
            {
                PixelMapfv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapfv(PixelMap, int, float*)"/>
        public static unsafe void PixelMapf(PixelMap map, float[] values)
        {
            int mapsize = (int)(values.Length);
            fixed (float* values_ptr = values)
            {
                PixelMapfv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapfv(PixelMap, int, float*)"/>
        public static unsafe void PixelMapf(PixelMap map, int mapsize, in float values)
        {
            fixed (float* values_ptr = &values)
            {
                PixelMapfv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapuiv(PixelMap, int, uint*)"/>
        public static unsafe void PixelMapui(PixelMap map, ReadOnlySpan<uint> values)
        {
            int mapsize = (int)(values.Length);
            fixed (uint* values_ptr = values)
            {
                PixelMapuiv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapuiv(PixelMap, int, uint*)"/>
        public static unsafe void PixelMapui(PixelMap map, uint[] values)
        {
            int mapsize = (int)(values.Length);
            fixed (uint* values_ptr = values)
            {
                PixelMapuiv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapuiv(PixelMap, int, uint*)"/>
        public static unsafe void PixelMapui(PixelMap map, int mapsize, in uint values)
        {
            fixed (uint* values_ptr = &values)
            {
                PixelMapuiv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapusv(PixelMap, int, ushort*)"/>
        public static unsafe void PixelMap(PixelMap map, ReadOnlySpan<ushort> values)
        {
            int mapsize = (int)(values.Length);
            fixed (ushort* values_ptr = values)
            {
                PixelMapusv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapusv(PixelMap, int, ushort*)"/>
        public static unsafe void PixelMap(PixelMap map, ushort[] values)
        {
            int mapsize = (int)(values.Length);
            fixed (ushort* values_ptr = values)
            {
                PixelMapusv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapusv(PixelMap, int, ushort*)"/>
        public static unsafe void PixelMap(PixelMap map, int mapsize, in ushort values)
        {
            fixed (ushort* values_ptr = &values)
            {
                PixelMapusv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="DrawPixels(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void DrawPixels(int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            DrawPixels(width, height, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="DrawPixels(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void DrawPixels<T1>(int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                DrawPixels(width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="DrawPixels(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void DrawPixels<T1>(int width, int height, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                DrawPixels(width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="DrawPixels(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void DrawPixels<T1>(int width, int height, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                DrawPixels(width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetClipPlane(ClipPlaneName, double*)"/>
        public static unsafe void GetClipPlane(ClipPlaneName plane, Span<double> equation)
        {
            fixed (double* equation_ptr = equation)
            {
                GetClipPlane(plane, equation_ptr);
            }
        }
        /// <inheritdoc cref="GetClipPlane(ClipPlaneName, double*)"/>
        public static unsafe void GetClipPlane(ClipPlaneName plane, double[] equation)
        {
            fixed (double* equation_ptr = equation)
            {
                GetClipPlane(plane, equation_ptr);
            }
        }
        /// <inheritdoc cref="GetClipPlane(ClipPlaneName, double*)"/>
        public static unsafe void GetClipPlane(ClipPlaneName plane, ref double equation)
        {
            fixed (double* equation_ptr = &equation)
            {
                GetClipPlane(plane, equation_ptr);
            }
        }
        /// <inheritdoc cref="GetLightfv(LightName, LightParameter, float*)"/>
        public static unsafe void GetLightf(LightName light, LightParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetLightfv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetLightfv(LightName, LightParameter, float*)"/>
        public static unsafe void GetLightf(LightName light, LightParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetLightfv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetLightfv(LightName, LightParameter, float*)"/>
        public static unsafe void GetLightf(LightName light, LightParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetLightfv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetLightiv(LightName, LightParameter, int*)"/>
        public static unsafe void GetLighti(LightName light, LightParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetLightiv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetLightiv(LightName, LightParameter, int*)"/>
        public static unsafe void GetLighti(LightName light, LightParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetLightiv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetLightiv(LightName, LightParameter, int*)"/>
        public static unsafe void GetLighti(LightName light, LightParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetLightiv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetMapdv(MapTarget, GetMapQuery, double*)"/>
        public static unsafe void GetMapd(MapTarget target, GetMapQuery query, Span<double> v)
        {
            fixed (double* v_ptr = v)
            {
                GetMapdv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapdv(MapTarget, GetMapQuery, double*)"/>
        public static unsafe void GetMapd(MapTarget target, GetMapQuery query, double[] v)
        {
            fixed (double* v_ptr = v)
            {
                GetMapdv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapdv(MapTarget, GetMapQuery, double*)"/>
        public static unsafe void GetMapd(MapTarget target, GetMapQuery query, ref double v)
        {
            fixed (double* v_ptr = &v)
            {
                GetMapdv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapfv(MapTarget, GetMapQuery, float*)"/>
        public static unsafe void GetMapf(MapTarget target, GetMapQuery query, Span<float> v)
        {
            fixed (float* v_ptr = v)
            {
                GetMapfv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapfv(MapTarget, GetMapQuery, float*)"/>
        public static unsafe void GetMapf(MapTarget target, GetMapQuery query, float[] v)
        {
            fixed (float* v_ptr = v)
            {
                GetMapfv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapfv(MapTarget, GetMapQuery, float*)"/>
        public static unsafe void GetMapf(MapTarget target, GetMapQuery query, ref float v)
        {
            fixed (float* v_ptr = &v)
            {
                GetMapfv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapiv(MapTarget, GetMapQuery, int*)"/>
        public static unsafe void GetMapi(MapTarget target, GetMapQuery query, Span<int> v)
        {
            fixed (int* v_ptr = v)
            {
                GetMapiv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapiv(MapTarget, GetMapQuery, int*)"/>
        public static unsafe void GetMapi(MapTarget target, GetMapQuery query, int[] v)
        {
            fixed (int* v_ptr = v)
            {
                GetMapiv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapiv(MapTarget, GetMapQuery, int*)"/>
        public static unsafe void GetMapi(MapTarget target, GetMapQuery query, ref int v)
        {
            fixed (int* v_ptr = &v)
            {
                GetMapiv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMaterialfv(TriangleFace, MaterialParameter, float*)"/>
        public static unsafe void GetMaterialf(TriangleFace face, MaterialParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetMaterialfv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetMaterialfv(TriangleFace, MaterialParameter, float*)"/>
        public static unsafe void GetMaterialf(TriangleFace face, MaterialParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetMaterialfv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetMaterialfv(TriangleFace, MaterialParameter, float*)"/>
        public static unsafe void GetMaterialf(TriangleFace face, MaterialParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetMaterialfv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetMaterialiv(TriangleFace, MaterialParameter, int*)"/>
        public static unsafe void GetMateriali(TriangleFace face, MaterialParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetMaterialiv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetMaterialiv(TriangleFace, MaterialParameter, int*)"/>
        public static unsafe void GetMateriali(TriangleFace face, MaterialParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetMaterialiv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetMaterialiv(TriangleFace, MaterialParameter, int*)"/>
        public static unsafe void GetMateriali(TriangleFace face, MaterialParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetMaterialiv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapfv(PixelMap, float*)"/>
        public static unsafe void GetPixelMapf(PixelMap map, Span<float> values)
        {
            fixed (float* values_ptr = values)
            {
                GetPixelMapfv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapfv(PixelMap, float*)"/>
        public static unsafe void GetPixelMapf(PixelMap map, float[] values)
        {
            fixed (float* values_ptr = values)
            {
                GetPixelMapfv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapfv(PixelMap, float*)"/>
        public static unsafe void GetPixelMapf(PixelMap map, ref float values)
        {
            fixed (float* values_ptr = &values)
            {
                GetPixelMapfv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapuiv(PixelMap, uint*)"/>
        public static unsafe void GetPixelMapui(PixelMap map, Span<uint> values)
        {
            fixed (uint* values_ptr = values)
            {
                GetPixelMapuiv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapuiv(PixelMap, uint*)"/>
        public static unsafe void GetPixelMapui(PixelMap map, uint[] values)
        {
            fixed (uint* values_ptr = values)
            {
                GetPixelMapuiv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapuiv(PixelMap, uint*)"/>
        public static unsafe void GetPixelMapui(PixelMap map, ref uint values)
        {
            fixed (uint* values_ptr = &values)
            {
                GetPixelMapuiv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapusv(PixelMap, ushort*)"/>
        public static unsafe void GetPixelMap(PixelMap map, Span<ushort> values)
        {
            fixed (ushort* values_ptr = values)
            {
                GetPixelMapusv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapusv(PixelMap, ushort*)"/>
        public static unsafe void GetPixelMap(PixelMap map, ushort[] values)
        {
            fixed (ushort* values_ptr = values)
            {
                GetPixelMapusv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapusv(PixelMap, ushort*)"/>
        public static unsafe void GetPixelMap(PixelMap map, ref ushort values)
        {
            fixed (ushort* values_ptr = &values)
            {
                GetPixelMapusv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPolygonStipple(byte*)"/>
        public static unsafe void GetPolygonStipple(Span<byte> mask)
        {
            fixed (byte* mask_ptr = mask)
            {
                GetPolygonStipple(mask_ptr);
            }
        }
        /// <inheritdoc cref="GetPolygonStipple(byte*)"/>
        public static unsafe void GetPolygonStipple(byte[] mask)
        {
            fixed (byte* mask_ptr = mask)
            {
                GetPolygonStipple(mask_ptr);
            }
        }
        /// <inheritdoc cref="GetPolygonStipple(byte*)"/>
        public static unsafe void GetPolygonStipple(ref byte mask)
        {
            fixed (byte* mask_ptr = &mask)
            {
                GetPolygonStipple(mask_ptr);
            }
        }
        /// <inheritdoc cref="GetTexEnvfv(TextureEnvTarget, TextureEnvParameter, float*)"/>
        public static unsafe void GetTexEnvf(TextureEnvTarget target, TextureEnvParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexEnvfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexEnvfv(TextureEnvTarget, TextureEnvParameter, float*)"/>
        public static unsafe void GetTexEnvf(TextureEnvTarget target, TextureEnvParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexEnvfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexEnvfv(TextureEnvTarget, TextureEnvParameter, float*)"/>
        public static unsafe void GetTexEnvf(TextureEnvTarget target, TextureEnvParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTexEnvfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexEnviv(TextureEnvTarget, TextureEnvParameter, int*)"/>
        public static unsafe void GetTexEnvi(TextureEnvTarget target, TextureEnvParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexEnviv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexEnviv(TextureEnvTarget, TextureEnvParameter, int*)"/>
        public static unsafe void GetTexEnvi(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexEnviv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexEnviv(TextureEnvTarget, TextureEnvParameter, int*)"/>
        public static unsafe void GetTexEnvi(TextureEnvTarget target, TextureEnvParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTexEnviv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGendv(TextureCoordName, TextureGenParameter, double*)"/>
        public static unsafe void GetTexGend(TextureCoordName coord, TextureGenParameter pname, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetTexGendv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGendv(TextureCoordName, TextureGenParameter, double*)"/>
        public static unsafe void GetTexGend(TextureCoordName coord, TextureGenParameter pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetTexGendv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGendv(TextureCoordName, TextureGenParameter, double*)"/>
        public static unsafe void GetTexGend(TextureCoordName coord, TextureGenParameter pname, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                GetTexGendv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGenfv(TextureCoordName, TextureGenParameter, float*)"/>
        public static unsafe void GetTexGenf(TextureCoordName coord, TextureGenParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexGenfv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGenfv(TextureCoordName, TextureGenParameter, float*)"/>
        public static unsafe void GetTexGenf(TextureCoordName coord, TextureGenParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexGenfv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGenfv(TextureCoordName, TextureGenParameter, float*)"/>
        public static unsafe void GetTexGenf(TextureCoordName coord, TextureGenParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTexGenfv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGeniv(TextureCoordName, TextureGenParameter, int*)"/>
        public static unsafe void GetTexGeni(TextureCoordName coord, TextureGenParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexGeniv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGeniv(TextureCoordName, TextureGenParameter, int*)"/>
        public static unsafe void GetTexGeni(TextureCoordName coord, TextureGenParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexGeniv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGeniv(TextureCoordName, TextureGenParameter, int*)"/>
        public static unsafe void GetTexGeni(TextureCoordName coord, TextureGenParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTexGeniv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="LoadMatrixf(float*)"/>
        public static unsafe void LoadMatrixf(ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m)
            {
                LoadMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadMatrixf(float*)"/>
        public static unsafe void LoadMatrixf(float[] m)
        {
            fixed (float* m_ptr = m)
            {
                LoadMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadMatrixf(float*)"/>
        public static unsafe void LoadMatrixf(in float m)
        {
            fixed (float* m_ptr = &m)
            {
                LoadMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadMatrixd(double*)"/>
        public static unsafe void LoadMatrixd(ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m)
            {
                LoadMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadMatrixd(double*)"/>
        public static unsafe void LoadMatrixd(double[] m)
        {
            fixed (double* m_ptr = m)
            {
                LoadMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadMatrixd(double*)"/>
        public static unsafe void LoadMatrixd(in double m)
        {
            fixed (double* m_ptr = &m)
            {
                LoadMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="MultMatrixf(float*)"/>
        public static unsafe void MultMatrixf(ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m)
            {
                MultMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="MultMatrixf(float*)"/>
        public static unsafe void MultMatrixf(float[] m)
        {
            fixed (float* m_ptr = m)
            {
                MultMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="MultMatrixf(float*)"/>
        public static unsafe void MultMatrixf(in float m)
        {
            fixed (float* m_ptr = &m)
            {
                MultMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="MultMatrixd(double*)"/>
        public static unsafe void MultMatrixd(ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m)
            {
                MultMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="MultMatrixd(double*)"/>
        public static unsafe void MultMatrixd(double[] m)
        {
            fixed (double* m_ptr = m)
            {
                MultMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="MultMatrixd(double*)"/>
        public static unsafe void MultMatrixd(in double m)
        {
            fixed (double* m_ptr = &m)
            {
                MultMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="DrawElements(PrimitiveType, int, DrawElementsType, void*)"/>
        public static unsafe void DrawElements(PrimitiveType mode, int count, DrawElementsType type, nint offset)
        {
            void* indices = (void*)offset;
            DrawElements(mode, count, type, indices);
        }
        /// <inheritdoc cref="GetPointerv(GetPointervPName, void**)"/>
        public static unsafe void GetPointer(GetPointervPName pname, void** parameters)
        {
            GetPointerv(pname, parameters);
        }
        /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexSubImage1D(target, level, xoffset, width, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage1D(target, level, xoffset, width, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage1D(target, level, xoffset, width, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexSubImage1D(target, level, xoffset, width, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTextures(int, int*)"/>
        public static unsafe void DeleteTexture(in int texture)
        {
            int n = 1;
            fixed(int* textures_handle = &texture)
            {
                DeleteTextures(n, textures_handle);
            }
        }
        /// <inheritdoc cref="DeleteTextures(int, int*)"/>
        public static unsafe void DeleteTextures(ReadOnlySpan<int> textures)
        {
            int n = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                DeleteTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTextures(int, int*)"/>
        public static unsafe void DeleteTextures(int[] textures)
        {
            int n = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                DeleteTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTextures(int, int*)"/>
        public static unsafe void DeleteTextures(int n, in int textures)
        {
            fixed (int* textures_ptr = &textures)
            {
                DeleteTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="GenTextures(int, int*)"/>
        public static unsafe int GenTexture()
        {
            int texture;
            int n = 1;
            Unsafe.SkipInit(out texture);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* textures_handle = (int*)Unsafe.AsPointer(ref texture);
            GenTextures(n, textures_handle);
            return texture;
        }
        /// <inheritdoc cref="GenTextures(int, int*)"/>
        public static unsafe void GenTexture(out int texture)
        {
            int n = 1;
            Unsafe.SkipInit(out texture);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* textures_handle = (int*)Unsafe.AsPointer(ref texture);
            GenTextures(n, textures_handle);
        }
        /// <inheritdoc cref="GenTextures(int, int*)"/>
        public static unsafe void GenTextures(Span<int> textures)
        {
            int n = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                GenTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="GenTextures(int, int*)"/>
        public static unsafe void GenTextures(int[] textures)
        {
            int n = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                GenTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="GenTextures(int, int*)"/>
        public static unsafe void GenTextures(int n, ref int textures)
        {
            fixed (int* textures_ptr = &textures)
            {
                GenTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="ColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void ColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            ColorPointer(size, type, stride, pointer_vptr);
        }
        /// <inheritdoc cref="ColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void ColorPointer<T1>(int size, ColorPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                ColorPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="ColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void ColorPointer<T1>(int size, ColorPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                ColorPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="ColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void ColorPointer<T1>(int size, ColorPointerType type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                ColorPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="EdgeFlagPointer(int, void*)"/>
        public static unsafe void EdgeFlagPointer(int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            EdgeFlagPointer(stride, pointer_vptr);
        }
        /// <inheritdoc cref="EdgeFlagPointer(int, void*)"/>
        public static unsafe void EdgeFlagPointer<T1>(int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                EdgeFlagPointer(stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="EdgeFlagPointer(int, void*)"/>
        public static unsafe void EdgeFlagPointer<T1>(int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                EdgeFlagPointer(stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="EdgeFlagPointer(int, void*)"/>
        public static unsafe void EdgeFlagPointer<T1>(int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                EdgeFlagPointer(stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="IndexPointer(IndexPointerType, int, void*)"/>
        public static unsafe void IndexPointer(IndexPointerType type, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            IndexPointer(type, stride, pointer_vptr);
        }
        /// <inheritdoc cref="IndexPointer(IndexPointerType, int, void*)"/>
        public static unsafe void IndexPointer<T1>(IndexPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                IndexPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="IndexPointer(IndexPointerType, int, void*)"/>
        public static unsafe void IndexPointer<T1>(IndexPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                IndexPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="IndexPointer(IndexPointerType, int, void*)"/>
        public static unsafe void IndexPointer<T1>(IndexPointerType type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                IndexPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="InterleavedArrays(InterleavedArrayFormat, int, void*)"/>
        public static unsafe void InterleavedArrays(InterleavedArrayFormat format, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            InterleavedArrays(format, stride, pointer_vptr);
        }
        /// <inheritdoc cref="InterleavedArrays(InterleavedArrayFormat, int, void*)"/>
        public static unsafe void InterleavedArrays<T1>(InterleavedArrayFormat format, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                InterleavedArrays(format, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="InterleavedArrays(InterleavedArrayFormat, int, void*)"/>
        public static unsafe void InterleavedArrays<T1>(InterleavedArrayFormat format, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                InterleavedArrays(format, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="InterleavedArrays(InterleavedArrayFormat, int, void*)"/>
        public static unsafe void InterleavedArrays<T1>(InterleavedArrayFormat format, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                InterleavedArrays(format, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="NormalPointer(NormalPointerType, int, void*)"/>
        public static unsafe void NormalPointer(NormalPointerType type, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            NormalPointer(type, stride, pointer_vptr);
        }
        /// <inheritdoc cref="NormalPointer(NormalPointerType, int, void*)"/>
        public static unsafe void NormalPointer<T1>(NormalPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                NormalPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="NormalPointer(NormalPointerType, int, void*)"/>
        public static unsafe void NormalPointer<T1>(NormalPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                NormalPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="NormalPointer(NormalPointerType, int, void*)"/>
        public static unsafe void NormalPointer<T1>(NormalPointerType type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                NormalPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordPointer(int, TexCoordPointerType, int, void*)"/>
        public static unsafe void TexCoordPointer(int size, TexCoordPointerType type, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            TexCoordPointer(size, type, stride, pointer_vptr);
        }
        /// <inheritdoc cref="TexCoordPointer(int, TexCoordPointerType, int, void*)"/>
        public static unsafe void TexCoordPointer<T1>(int size, TexCoordPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                TexCoordPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordPointer(int, TexCoordPointerType, int, void*)"/>
        public static unsafe void TexCoordPointer<T1>(int size, TexCoordPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                TexCoordPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordPointer(int, TexCoordPointerType, int, void*)"/>
        public static unsafe void TexCoordPointer<T1>(int size, TexCoordPointerType type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                TexCoordPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="VertexPointer(int, VertexPointerType, int, void*)"/>
        public static unsafe void VertexPointer(int size, VertexPointerType type, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            VertexPointer(size, type, stride, pointer_vptr);
        }
        /// <inheritdoc cref="VertexPointer(int, VertexPointerType, int, void*)"/>
        public static unsafe void VertexPointer<T1>(int size, VertexPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                VertexPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="VertexPointer(int, VertexPointerType, int, void*)"/>
        public static unsafe void VertexPointer<T1>(int size, VertexPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                VertexPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="VertexPointer(int, VertexPointerType, int, void*)"/>
        public static unsafe void VertexPointer<T1>(int size, VertexPointerType type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                VertexPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="AreTexturesResident(int, int*, bool*)"/>
        public static unsafe bool AreTexturesResident(int n, ReadOnlySpan<int> textures, Span<bool> residences)
        {
            bool returnValue;
            fixed (int* textures_ptr = textures)
            {
                fixed (bool* residences_ptr = residences)
                {
                    returnValue = AreTexturesResident(n, textures_ptr, residences_ptr);
                }
            }
            return returnValue;
        }
        /// <inheritdoc cref="AreTexturesResident(int, int*, bool*)"/>
        public static unsafe bool AreTexturesResident(int n, int[] textures, bool[] residences)
        {
            bool returnValue;
            fixed (int* textures_ptr = textures)
            {
                fixed (bool* residences_ptr = residences)
                {
                    returnValue = AreTexturesResident(n, textures_ptr, residences_ptr);
                }
            }
            return returnValue;
        }
        /// <inheritdoc cref="AreTexturesResident(int, int*, bool*)"/>
        public static unsafe bool AreTexturesResident(int n, in int textures, ref bool residences)
        {
            bool returnValue;
            fixed (int* textures_ptr = &textures)
            fixed (bool* residences_ptr = &residences)
            {
                returnValue = AreTexturesResident(n, textures_ptr, residences_ptr);
            }
            return returnValue;
        }
        /// <inheritdoc cref="PrioritizeTextures(int, int*, float*)"/>
        public static unsafe void PrioritizeTextures(int n, ReadOnlySpan<int> textures, ReadOnlySpan<float> priorities)
        {
            fixed (int* textures_ptr = textures)
            {
                fixed (float* priorities_ptr = priorities)
                {
                    PrioritizeTextures(n, textures_ptr, priorities_ptr);
                }
            }
        }
        /// <inheritdoc cref="PrioritizeTextures(int, int*, float*)"/>
        public static unsafe void PrioritizeTextures(int n, int[] textures, float[] priorities)
        {
            fixed (int* textures_ptr = textures)
            {
                fixed (float* priorities_ptr = priorities)
                {
                    PrioritizeTextures(n, textures_ptr, priorities_ptr);
                }
            }
        }
        /// <inheritdoc cref="PrioritizeTextures(int, int*, float*)"/>
        public static unsafe void PrioritizeTextures(int n, in int textures, in float priorities)
        {
            fixed (int* textures_ptr = &textures)
            fixed (float* priorities_ptr = &priorities)
            {
                PrioritizeTextures(n, textures_ptr, priorities_ptr);
            }
        }
        /// <inheritdoc cref="Indexub(byte)"/>
        public static unsafe void Index(byte c)
        {
            Indexub(c);
        }
        /// <inheritdoc cref="Indexubv(byte*)"/>
        public static unsafe void Index(ReadOnlySpan<byte> c)
        {
            fixed (byte* c_ptr = c)
            {
                Indexubv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexubv(byte*)"/>
        public static unsafe void Index(byte[] c)
        {
            fixed (byte* c_ptr = c)
            {
                Indexubv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexubv(byte*)"/>
        public static unsafe void Index(in byte c)
        {
            fixed (byte* c_ptr = &c)
            {
                Indexubv(c_ptr);
            }
        }
        /// <inheritdoc cref="DrawRangeElements(PrimitiveType, uint, uint, int, DrawElementsType, void*)"/>
        public static unsafe void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint offset)
        {
            void* indices = (void*)offset;
            DrawRangeElements(mode, start, end, count, type, indices);
        }
        /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
        public static unsafe void GetCompressedTexImage(TextureTarget target, int level, IntPtr img)
        {
            void* img_vptr = (void*)img;
            GetCompressedTexImage(target, level, img_vptr);
        }
        /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
        public static unsafe void GetCompressedTexImage<T1>(TextureTarget target, int level, Span<T1> img)
            where T1 : unmanaged
        {
            fixed (void* img_ptr = img)
            {
                GetCompressedTexImage(target, level, img_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
        public static unsafe void GetCompressedTexImage<T1>(TextureTarget target, int level, T1[] img)
            where T1 : unmanaged
        {
            fixed (void* img_ptr = img)
            {
                GetCompressedTexImage(target, level, img_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
        public static unsafe void GetCompressedTexImage<T1>(TextureTarget target, int level, ref T1 img)
            where T1 : unmanaged
        {
            fixed (void* img_ptr = &img)
            {
                GetCompressedTexImage(target, level, img_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord1dv(TextureUnit, double*)"/>
        public static unsafe void MultiTexCoord1d(TextureUnit target, in double v)
        {
            fixed (double* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                MultiTexCoord1dv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord1fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord1f(TextureUnit target, in float v)
        {
            fixed (float* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord1fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord1iv(TextureUnit, int*)"/>
        public static unsafe void MultiTexCoord1i(TextureUnit target, in int v)
        {
            fixed (int* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                MultiTexCoord1iv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord1s(TextureUnit, short)"/>
        public static unsafe void MultiTexCoord1(TextureUnit target, short s)
        {
            MultiTexCoord1s(target, s);
        }
        /// <inheritdoc cref="MultiTexCoord1sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord1(TextureUnit target, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                MultiTexCoord1sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord1sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord1(TextureUnit target, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                MultiTexCoord1sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord1sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord1(TextureUnit target, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                MultiTexCoord1sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2dv(TextureUnit, double*)"/>
        public static unsafe void MultiTexCoord2d(TextureUnit target, in Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                MultiTexCoord2dv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord2f(TextureUnit target, in Vector2 v)
        {
            fixed (Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord2fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord2f(TextureUnit target, in System.Numerics.Vector2 v)
        {
            fixed (System.Numerics.Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord2fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord2f(TextureUnit target, ReadOnlySpan<System.Numerics.Vector2> v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord2fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord2f(TextureUnit target, System.Numerics.Vector2[] v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord2fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2iv(TextureUnit, int*)"/>
        public static unsafe void MultiTexCoord2i(TextureUnit target, in Vector2i v)
        {
            fixed (Vector2i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                MultiTexCoord2iv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2s(TextureUnit, short, short)"/>
        public static unsafe void MultiTexCoord2(TextureUnit target, short s, short t)
        {
            MultiTexCoord2s(target, s, t);
        }
        /// <inheritdoc cref="MultiTexCoord2sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord2(TextureUnit target, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                MultiTexCoord2sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord2(TextureUnit target, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                MultiTexCoord2sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord2(TextureUnit target, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                MultiTexCoord2sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3dv(TextureUnit, double*)"/>
        public static unsafe void MultiTexCoord3d(TextureUnit target, in Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                MultiTexCoord3dv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord3f(TextureUnit target, in Vector3 v)
        {
            fixed (Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord3fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord3f(TextureUnit target, in System.Numerics.Vector3 v)
        {
            fixed (System.Numerics.Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord3fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord3f(TextureUnit target, ReadOnlySpan<System.Numerics.Vector3> v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord3fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord3f(TextureUnit target, System.Numerics.Vector3[] v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord3fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3iv(TextureUnit, int*)"/>
        public static unsafe void MultiTexCoord3i(TextureUnit target, in Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                MultiTexCoord3iv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3s(TextureUnit, short, short, short)"/>
        public static unsafe void MultiTexCoord3(TextureUnit target, short s, short t, short r)
        {
            MultiTexCoord3s(target, s, t, r);
        }
        /// <inheritdoc cref="MultiTexCoord3sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord3(TextureUnit target, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                MultiTexCoord3sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord3(TextureUnit target, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                MultiTexCoord3sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord3(TextureUnit target, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                MultiTexCoord3sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4dv(TextureUnit, double*)"/>
        public static unsafe void MultiTexCoord4d(TextureUnit target, in Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                MultiTexCoord4dv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord4f(TextureUnit target, in Vector4 v)
        {
            fixed (Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord4fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord4f(TextureUnit target, in System.Numerics.Vector4 v)
        {
            fixed (System.Numerics.Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord4fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord4f(TextureUnit target, ReadOnlySpan<System.Numerics.Vector4> v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord4fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord4f(TextureUnit target, System.Numerics.Vector4[] v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord4fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4iv(TextureUnit, int*)"/>
        public static unsafe void MultiTexCoord4i(TextureUnit target, in Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                MultiTexCoord4iv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4s(TextureUnit, short, short, short, short)"/>
        public static unsafe void MultiTexCoord4(TextureUnit target, short s, short t, short r, short q)
        {
            MultiTexCoord4s(target, s, t, r, q);
        }
        /// <inheritdoc cref="MultiTexCoord4sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord4(TextureUnit target, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                MultiTexCoord4sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord4(TextureUnit target, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                MultiTexCoord4sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord4(TextureUnit target, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                MultiTexCoord4sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="LoadTransposeMatrixf(float*)"/>
        public static unsafe void LoadTransposeMatrixf(ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m)
            {
                LoadTransposeMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadTransposeMatrixf(float*)"/>
        public static unsafe void LoadTransposeMatrixf(float[] m)
        {
            fixed (float* m_ptr = m)
            {
                LoadTransposeMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadTransposeMatrixf(float*)"/>
        public static unsafe void LoadTransposeMatrixf(in float m)
        {
            fixed (float* m_ptr = &m)
            {
                LoadTransposeMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadTransposeMatrixd(double*)"/>
        public static unsafe void LoadTransposeMatrixd(ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m)
            {
                LoadTransposeMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadTransposeMatrixd(double*)"/>
        public static unsafe void LoadTransposeMatrixd(double[] m)
        {
            fixed (double* m_ptr = m)
            {
                LoadTransposeMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadTransposeMatrixd(double*)"/>
        public static unsafe void LoadTransposeMatrixd(in double m)
        {
            fixed (double* m_ptr = &m)
            {
                LoadTransposeMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="MultTransposeMatrixf(float*)"/>
        public static unsafe void MultTransposeMatrixf(ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m)
            {
                MultTransposeMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="MultTransposeMatrixf(float*)"/>
        public static unsafe void MultTransposeMatrixf(float[] m)
        {
            fixed (float* m_ptr = m)
            {
                MultTransposeMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="MultTransposeMatrixf(float*)"/>
        public static unsafe void MultTransposeMatrixf(in float m)
        {
            fixed (float* m_ptr = &m)
            {
                MultTransposeMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="MultTransposeMatrixd(double*)"/>
        public static unsafe void MultTransposeMatrixd(ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m)
            {
                MultTransposeMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="MultTransposeMatrixd(double*)"/>
        public static unsafe void MultTransposeMatrixd(double[] m)
        {
            fixed (double* m_ptr = m)
            {
                MultTransposeMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="MultTransposeMatrixd(double*)"/>
        public static unsafe void MultTransposeMatrixd(in double m)
        {
            fixed (double* m_ptr = &m)
            {
                MultTransposeMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="MultiDrawArrays(PrimitiveType, int*, int*, int)"/>
        public static unsafe void MultiDrawArrays(PrimitiveType mode, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int drawcount)
        {
            fixed (int* first_ptr = first)
            {
                fixed (int* count_ptr = count)
                {
                    MultiDrawArrays(mode, first_ptr, count_ptr, drawcount);
                }
            }
        }
        /// <inheritdoc cref="MultiDrawArrays(PrimitiveType, int*, int*, int)"/>
        public static unsafe void MultiDrawArrays(PrimitiveType mode, int[] first, int[] count, int drawcount)
        {
            fixed (int* first_ptr = first)
            {
                fixed (int* count_ptr = count)
                {
                    MultiDrawArrays(mode, first_ptr, count_ptr, drawcount);
                }
            }
        }
        /// <inheritdoc cref="MultiDrawArrays(PrimitiveType, int*, int*, int)"/>
        public static unsafe void MultiDrawArrays(PrimitiveType mode, in int first, in int count, int drawcount)
        {
            fixed (int* first_ptr = &first)
            fixed (int* count_ptr = &count)
            {
                MultiDrawArrays(mode, first_ptr, count_ptr, drawcount);
            }
        }
        /// <inheritdoc cref="MultiDrawElements(PrimitiveType, int*, DrawElementsType, void**, int)"/>
        public static unsafe void MultiDrawElements(PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int drawcount)
        {
            fixed (int* count_ptr = count)
            {
                MultiDrawElements(mode, count_ptr, type, indices, drawcount);
            }
        }
        /// <inheritdoc cref="MultiDrawElements(PrimitiveType, int*, DrawElementsType, void**, int)"/>
        public static unsafe void MultiDrawElements(PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int drawcount)
        {
            fixed (int* count_ptr = count)
            {
                MultiDrawElements(mode, count_ptr, type, indices, drawcount);
            }
        }
        /// <inheritdoc cref="MultiDrawElements(PrimitiveType, int*, DrawElementsType, void**, int)"/>
        public static unsafe void MultiDrawElements(PrimitiveType mode, in int count, DrawElementsType type, void** indices, int drawcount)
        {
            fixed (int* count_ptr = &count)
            {
                MultiDrawElements(mode, count_ptr, type, indices, drawcount);
            }
        }
        /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
        public static unsafe void PointParameterf(PointParameterNameARB pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                PointParameterfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
        public static unsafe void PointParameterf(PointParameterNameARB pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                PointParameterfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
        public static unsafe void PointParameterf(PointParameterNameARB pname, in float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                PointParameterfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PointParameteriv(PointParameterNameARB, int*)"/>
        public static unsafe void PointParameteri(PointParameterNameARB pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                PointParameteriv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PointParameteriv(PointParameterNameARB, int*)"/>
        public static unsafe void PointParameteri(PointParameterNameARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                PointParameteriv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PointParameteriv(PointParameterNameARB, int*)"/>
        public static unsafe void PointParameteri(PointParameterNameARB pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                PointParameteriv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="FogCoordfv(float*)"/>
        public static unsafe void FogCoordf(ReadOnlySpan<float> coord)
        {
            fixed (float* coord_ptr = coord)
            {
                FogCoordfv(coord_ptr);
            }
        }
        /// <inheritdoc cref="FogCoordfv(float*)"/>
        public static unsafe void FogCoordf(float[] coord)
        {
            fixed (float* coord_ptr = coord)
            {
                FogCoordfv(coord_ptr);
            }
        }
        /// <inheritdoc cref="FogCoordfv(float*)"/>
        public static unsafe void FogCoordf(in float coord)
        {
            fixed (float* coord_ptr = &coord)
            {
                FogCoordfv(coord_ptr);
            }
        }
        /// <inheritdoc cref="FogCoorddv(double*)"/>
        public static unsafe void FogCoordd(ReadOnlySpan<double> coord)
        {
            fixed (double* coord_ptr = coord)
            {
                FogCoorddv(coord_ptr);
            }
        }
        /// <inheritdoc cref="FogCoorddv(double*)"/>
        public static unsafe void FogCoordd(double[] coord)
        {
            fixed (double* coord_ptr = coord)
            {
                FogCoorddv(coord_ptr);
            }
        }
        /// <inheritdoc cref="FogCoorddv(double*)"/>
        public static unsafe void FogCoordd(in double coord)
        {
            fixed (double* coord_ptr = &coord)
            {
                FogCoorddv(coord_ptr);
            }
        }
        /// <inheritdoc cref="FogCoordPointer(FogPointerTypeEXT, int, void*)"/>
        public static unsafe void FogCoordPointer(FogPointerTypeEXT type, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            FogCoordPointer(type, stride, pointer_vptr);
        }
        /// <inheritdoc cref="FogCoordPointer(FogPointerTypeEXT, int, void*)"/>
        public static unsafe void FogCoordPointer<T1>(FogPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                FogCoordPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="FogCoordPointer(FogPointerTypeEXT, int, void*)"/>
        public static unsafe void FogCoordPointer<T1>(FogPointerTypeEXT type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                FogCoordPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="FogCoordPointer(FogPointerTypeEXT, int, void*)"/>
        public static unsafe void FogCoordPointer<T1>(FogPointerTypeEXT type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                FogCoordPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3b(sbyte, sbyte, sbyte)"/>
        public static unsafe void SecondaryColor3(sbyte red, sbyte green, sbyte blue)
        {
            SecondaryColor3b(red, green, blue);
        }
        /// <inheritdoc cref="SecondaryColor3bv(sbyte*)"/>
        public static unsafe void SecondaryColor3(ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                SecondaryColor3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3bv(sbyte*)"/>
        public static unsafe void SecondaryColor3(sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                SecondaryColor3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3bv(sbyte*)"/>
        public static unsafe void SecondaryColor3(in sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                SecondaryColor3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3dv(double*)"/>
        public static unsafe void SecondaryColor3d(in Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                SecondaryColor3dv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3fv(float*)"/>
        public static unsafe void SecondaryColor3f(in Color3<Rgb> v)
        {
            fixed (Color3<Rgb>* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                SecondaryColor3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3iv(int*)"/>
        public static unsafe void SecondaryColor3i(in Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                SecondaryColor3iv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3s(short, short, short)"/>
        public static unsafe void SecondaryColor3(short red, short green, short blue)
        {
            SecondaryColor3s(red, green, blue);
        }
        /// <inheritdoc cref="SecondaryColor3sv(short*)"/>
        public static unsafe void SecondaryColor3(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                SecondaryColor3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3sv(short*)"/>
        public static unsafe void SecondaryColor3(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                SecondaryColor3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3sv(short*)"/>
        public static unsafe void SecondaryColor3(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                SecondaryColor3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3ub(byte, byte, byte)"/>
        public static unsafe void SecondaryColor3(byte red, byte green, byte blue)
        {
            SecondaryColor3ub(red, green, blue);
        }
        /// <inheritdoc cref="SecondaryColor3ubv(byte*)"/>
        public static unsafe void SecondaryColor3(ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v)
            {
                SecondaryColor3ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3ubv(byte*)"/>
        public static unsafe void SecondaryColor3(byte[] v)
        {
            fixed (byte* v_ptr = v)
            {
                SecondaryColor3ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3ubv(byte*)"/>
        public static unsafe void SecondaryColor3(in byte v)
        {
            fixed (byte* v_ptr = &v)
            {
                SecondaryColor3ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3uiv(uint*)"/>
        public static unsafe void SecondaryColor3ui(ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                SecondaryColor3uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3uiv(uint*)"/>
        public static unsafe void SecondaryColor3ui(uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                SecondaryColor3uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3uiv(uint*)"/>
        public static unsafe void SecondaryColor3ui(in uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                SecondaryColor3uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3us(ushort, ushort, ushort)"/>
        public static unsafe void SecondaryColor3(ushort red, ushort green, ushort blue)
        {
            SecondaryColor3us(red, green, blue);
        }
        /// <inheritdoc cref="SecondaryColor3usv(ushort*)"/>
        public static unsafe void SecondaryColor3(ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v)
            {
                SecondaryColor3usv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3usv(ushort*)"/>
        public static unsafe void SecondaryColor3(ushort[] v)
        {
            fixed (ushort* v_ptr = v)
            {
                SecondaryColor3usv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3usv(ushort*)"/>
        public static unsafe void SecondaryColor3(in ushort v)
        {
            fixed (ushort* v_ptr = &v)
            {
                SecondaryColor3usv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void SecondaryColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            SecondaryColorPointer(size, type, stride, pointer_vptr);
        }
        /// <inheritdoc cref="SecondaryColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void SecondaryColorPointer<T1>(int size, ColorPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                SecondaryColorPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void SecondaryColorPointer<T1>(int size, ColorPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                SecondaryColorPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void SecondaryColorPointer<T1>(int size, ColorPointerType type, int stride, in T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                SecondaryColorPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2dv(double*)"/>
        public static unsafe void WindowPos2d(in Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                WindowPos2dv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2fv(float*)"/>
        public static unsafe void WindowPos2f(in Vector2 v)
        {
            fixed (Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2fv(float*)"/>
        public static unsafe void WindowPos2f(in System.Numerics.Vector2 v)
        {
            fixed (System.Numerics.Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2fv(float*)"/>
        public static unsafe void WindowPos2f(ReadOnlySpan<System.Numerics.Vector2> v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2fv(float*)"/>
        public static unsafe void WindowPos2f(System.Numerics.Vector2[] v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2iv(int*)"/>
        public static unsafe void WindowPos2i(in Vector2i v)
        {
            fixed (Vector2i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                WindowPos2iv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2s(short, short)"/>
        public static unsafe void WindowPos2(short x, short y)
        {
            WindowPos2s(x, y);
        }
        /// <inheritdoc cref="WindowPos2sv(short*)"/>
        public static unsafe void WindowPos2(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                WindowPos2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2sv(short*)"/>
        public static unsafe void WindowPos2(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                WindowPos2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2sv(short*)"/>
        public static unsafe void WindowPos2(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                WindowPos2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3dv(double*)"/>
        public static unsafe void WindowPos3d(in Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                WindowPos3dv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3fv(float*)"/>
        public static unsafe void WindowPos3f(in Vector3 v)
        {
            fixed (Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3fv(float*)"/>
        public static unsafe void WindowPos3f(in System.Numerics.Vector3 v)
        {
            fixed (System.Numerics.Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3fv(float*)"/>
        public static unsafe void WindowPos3f(ReadOnlySpan<System.Numerics.Vector3> v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3fv(float*)"/>
        public static unsafe void WindowPos3f(System.Numerics.Vector3[] v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3iv(int*)"/>
        public static unsafe void WindowPos3i(in Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                WindowPos3iv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3s(short, short, short)"/>
        public static unsafe void WindowPos3(short x, short y, short z)
        {
            WindowPos3s(x, y, z);
        }
        /// <inheritdoc cref="WindowPos3sv(short*)"/>
        public static unsafe void WindowPos3(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                WindowPos3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3sv(short*)"/>
        public static unsafe void WindowPos3(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                WindowPos3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3sv(short*)"/>
        public static unsafe void WindowPos3(in short v)
        {
            fixed (short* v_ptr = &v)
            {
                WindowPos3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="GenQueries(int, int*)"/>
        public static unsafe int GenQuery()
        {
            int id;
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            GenQueries(n, ids_handle);
            return id;
        }
        /// <inheritdoc cref="GenQueries(int, int*)"/>
        public static unsafe void GenQuery(out int id)
        {
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            GenQueries(n, ids_handle);
        }
        /// <inheritdoc cref="GenQueries(int, int*)"/>
        public static unsafe void GenQueries(Span<int> ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                GenQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenQueries(int, int*)"/>
        public static unsafe void GenQueries(int[] ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                GenQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenQueries(int, int*)"/>
        public static unsafe void GenQueries(int n, ref int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                GenQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteQueries(int, int*)"/>
        public static unsafe void DeleteQuery(in int id)
        {
            int n = 1;
            fixed(int* ids_handle = &id)
            {
                DeleteQueries(n, ids_handle);
            }
        }
        /// <inheritdoc cref="DeleteQueries(int, int*)"/>
        public static unsafe void DeleteQueries(ReadOnlySpan<int> ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                DeleteQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteQueries(int, int*)"/>
        public static unsafe void DeleteQueries(int[] ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                DeleteQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteQueries(int, int*)"/>
        public static unsafe void DeleteQueries(int n, in int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                DeleteQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryiv(QueryTarget, QueryParameterName, int*)"/>
        public static unsafe void GetQueryi(QueryTarget target, QueryParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryiv(QueryTarget, QueryParameterName, int*)"/>
        public static unsafe void GetQueryi(QueryTarget target, QueryParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryiv(QueryTarget, QueryParameterName, int*)"/>
        public static unsafe void GetQueryi(QueryTarget target, QueryParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetQueryiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectiv(int, QueryObjectParameterName, int*)"/>
        public static unsafe void GetQueryObjecti(int id, QueryObjectParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryObjectiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectiv(int, QueryObjectParameterName, int*)"/>
        public static unsafe void GetQueryObjecti(int id, QueryObjectParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryObjectiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectiv(int, QueryObjectParameterName, int*)"/>
        public static unsafe void GetQueryObjecti(int id, QueryObjectParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetQueryObjectiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectuiv(int, QueryObjectParameterName, uint*)"/>
        public static unsafe void GetQueryObjectui(int id, QueryObjectParameterName pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetQueryObjectuiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectuiv(int, QueryObjectParameterName, uint*)"/>
        public static unsafe void GetQueryObjectui(int id, QueryObjectParameterName pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetQueryObjectuiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectuiv(int, QueryObjectParameterName, uint*)"/>
        public static unsafe void GetQueryObjectui(int id, QueryObjectParameterName pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetQueryObjectuiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="DeleteBuffers(int, int*)"/>
        public static unsafe void DeleteBuffer(in int buffer)
        {
            int n = 1;
            fixed(int* buffers_handle = &buffer)
            {
                DeleteBuffers(n, buffers_handle);
            }
        }
        /// <inheritdoc cref="DeleteBuffers(int, int*)"/>
        public static unsafe void DeleteBuffers(ReadOnlySpan<int> buffers)
        {
            int n = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                DeleteBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteBuffers(int, int*)"/>
        public static unsafe void DeleteBuffers(int[] buffers)
        {
            int n = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                DeleteBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteBuffers(int, int*)"/>
        public static unsafe void DeleteBuffers(int n, in int buffers)
        {
            fixed (int* buffers_ptr = &buffers)
            {
                DeleteBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="GenBuffers(int, int*)"/>
        public static unsafe int GenBuffer()
        {
            int buffer;
            int n = 1;
            Unsafe.SkipInit(out buffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* buffers_handle = (int*)Unsafe.AsPointer(ref buffer);
            GenBuffers(n, buffers_handle);
            return buffer;
        }
        /// <inheritdoc cref="GenBuffers(int, int*)"/>
        public static unsafe void GenBuffer(out int buffer)
        {
            int n = 1;
            Unsafe.SkipInit(out buffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* buffers_handle = (int*)Unsafe.AsPointer(ref buffer);
            GenBuffers(n, buffers_handle);
        }
        /// <inheritdoc cref="GenBuffers(int, int*)"/>
        public static unsafe void GenBuffers(Span<int> buffers)
        {
            int n = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                GenBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="GenBuffers(int, int*)"/>
        public static unsafe void GenBuffers(int[] buffers)
        {
            int n = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                GenBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="GenBuffers(int, int*)"/>
        public static unsafe void GenBuffers(int n, ref int buffers)
        {
            fixed (int* buffers_ptr = &buffers)
            {
                GenBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="BufferData(BufferTargetARB, nint, void*, BufferUsageARB)"/>
        public static unsafe void BufferData(BufferTargetARB target, nint size, IntPtr data, BufferUsageARB usage)
        {
            void* data_vptr = (void*)data;
            BufferData(target, size, data_vptr, usage);
        }
        /// <inheritdoc cref="BufferData(BufferTargetARB, nint, void*, BufferUsageARB)"/>
        public static unsafe void BufferData<T1>(BufferTargetARB target, ReadOnlySpan<T1> data, BufferUsageARB usage)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                BufferData(target, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="BufferData(BufferTargetARB, nint, void*, BufferUsageARB)"/>
        public static unsafe void BufferData<T1>(BufferTargetARB target, T1[] data, BufferUsageARB usage)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                BufferData(target, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="BufferData(BufferTargetARB, nint, void*, BufferUsageARB)"/>
        public static unsafe void BufferData<T1>(BufferTargetARB target, nint size, in T1 data, BufferUsageARB usage)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                BufferData(target, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="BufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void BufferSubData(BufferTargetARB target, IntPtr offset, nint size, IntPtr data)
        {
            void* data_vptr = (void*)data;
            BufferSubData(target, offset, size, data_vptr);
        }
        /// <inheritdoc cref="BufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void BufferSubData<T1>(BufferTargetARB target, IntPtr offset, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                BufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="BufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void BufferSubData<T1>(BufferTargetARB target, IntPtr offset, T1[] data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                BufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="BufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void BufferSubData<T1>(BufferTargetARB target, IntPtr offset, nint size, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                BufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void GetBufferSubData(BufferTargetARB target, IntPtr offset, nint size, IntPtr data)
        {
            void* data_vptr = (void*)data;
            GetBufferSubData(target, offset, size, data_vptr);
        }
        /// <inheritdoc cref="GetBufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void GetBufferSubData<T1>(BufferTargetARB target, IntPtr offset, Span<T1> data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                GetBufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void GetBufferSubData<T1>(BufferTargetARB target, IntPtr offset, T1[] data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                GetBufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
        public static unsafe void GetBufferSubData<T1>(BufferTargetARB target, IntPtr offset, nint size, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                GetBufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteriv(BufferTargetARB, BufferPNameARB, int*)"/>
        public static unsafe void GetBufferParameteri(BufferTargetARB target, BufferPNameARB pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetBufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteriv(BufferTargetARB, BufferPNameARB, int*)"/>
        public static unsafe void GetBufferParameteri(BufferTargetARB target, BufferPNameARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetBufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteriv(BufferTargetARB, BufferPNameARB, int*)"/>
        public static unsafe void GetBufferParameteri(BufferTargetARB target, BufferPNameARB pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetBufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferPointerv(BufferTargetARB, BufferPointerNameARB, void**)"/>
        public static unsafe void GetBufferPointer(BufferTargetARB target, BufferPointerNameARB pname, void** parameters)
        {
            GetBufferPointerv(target, pname, parameters);
        }
        /// <inheritdoc cref="DrawBuffers(int, DrawBufferMode*)"/>
        public static unsafe void DrawBuffers(ReadOnlySpan<DrawBufferMode> bufs)
        {
            int n = (int)(bufs.Length);
            fixed (DrawBufferMode* bufs_ptr = bufs)
            {
                DrawBuffers(n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="DrawBuffers(int, DrawBufferMode*)"/>
        public static unsafe void DrawBuffers(DrawBufferMode[] bufs)
        {
            int n = (int)(bufs.Length);
            fixed (DrawBufferMode* bufs_ptr = bufs)
            {
                DrawBuffers(n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="DrawBuffers(int, DrawBufferMode*)"/>
        public static unsafe void DrawBuffers(int n, in DrawBufferMode bufs)
        {
            fixed (DrawBufferMode* bufs_ptr = &bufs)
            {
                DrawBuffers(n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="BindAttribLocation(int, uint, byte*)"/>
        public static unsafe void BindAttribLocation(int program, uint index, string name)
        {
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            BindAttribLocation(program, index, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
        }
        /// <inheritdoc cref="GetActiveAttrib(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe string GetActiveAttrib(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<AttributeType> type)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveAttrib(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe void GetActiveAttrib(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<AttributeType> type, out string name)
        {
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetActiveAttrib(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe string GetActiveAttrib(int program, uint index, int bufSize, int[] length, int[] size, AttributeType[] type)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveAttrib(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe void GetActiveAttrib(int program, uint index, int bufSize, int[] length, int[] size, AttributeType[] type, out string name)
        {
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetActiveAttrib(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe string GetActiveAttrib(int program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type)
        {
            string name;
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (AttributeType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveAttrib(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe void GetActiveAttrib(int program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type, out string name)
        {
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (AttributeType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniform(int, uint, int, int*, int*, UniformType*, byte*)"/>
        public static unsafe string GetActiveUniform(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<UniformType> type)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (UniformType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveUniform(int, uint, int, int*, int*, UniformType*, byte*)"/>
        public static unsafe void GetActiveUniform(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<UniformType> type, out string name)
        {
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (UniformType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetActiveUniform(int, uint, int, int*, int*, UniformType*, byte*)"/>
        public static unsafe string GetActiveUniform(int program, uint index, int bufSize, int[] length, int[] size, UniformType[] type)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (UniformType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveUniform(int, uint, int, int*, int*, UniformType*, byte*)"/>
        public static unsafe void GetActiveUniform(int program, uint index, int bufSize, int[] length, int[] size, UniformType[] type, out string name)
        {
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (UniformType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetActiveUniform(int, uint, int, int*, int*, UniformType*, byte*)"/>
        public static unsafe string GetActiveUniform(int program, uint index, int bufSize, ref int length, ref int size, ref UniformType type)
        {
            string name;
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (UniformType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveUniform(int, uint, int, int*, int*, UniformType*, byte*)"/>
        public static unsafe void GetActiveUniform(int program, uint index, int bufSize, ref int length, ref int size, ref UniformType type, out string name)
        {
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (UniformType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetAttachedShaders(int, int, int*, int*)"/>
        public static unsafe void GetAttachedShaders(int program, Span<int> count, Span<int> shaders)
        {
            fixed (int* count_ptr = count)
            {
                int maxCount = (int)(shaders.Length);
                fixed (int* shaders_ptr = shaders)
                {
                    GetAttachedShaders(program, maxCount, count_ptr, shaders_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetAttachedShaders(int, int, int*, int*)"/>
        public static unsafe void GetAttachedShaders(int program, int[] count, int[] shaders)
        {
            fixed (int* count_ptr = count)
            {
                int maxCount = (int)(shaders.Length);
                fixed (int* shaders_ptr = shaders)
                {
                    GetAttachedShaders(program, maxCount, count_ptr, shaders_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetAttachedShaders(int, int, int*, int*)"/>
        public static unsafe void GetAttachedShaders(int program, int maxCount, ref int count, ref int shaders)
        {
            fixed (int* count_ptr = &count)
            fixed (int* shaders_ptr = &shaders)
            {
                GetAttachedShaders(program, maxCount, count_ptr, shaders_ptr);
            }
        }
        /// <inheritdoc cref="GetAttribLocation(int, byte*)"/>
        public static unsafe int GetAttribLocation(int program, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetAttribLocation(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetProgramiv(int, ProgramPropertyARB, int*)"/>
        public static unsafe void GetProgrami(int program, ProgramPropertyARB pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramiv(program, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramiv(int, ProgramPropertyARB, int*)"/>
        public static unsafe void GetProgrami(int program, ProgramPropertyARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramiv(program, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramiv(int, ProgramPropertyARB, int*)"/>
        public static unsafe void GetProgrami(int program, ProgramPropertyARB pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetProgramiv(program, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetProgramInfoLog(int program, int bufSize, Span<int> length)
        {
            string infoLog;
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramInfoLog(program, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetProgramInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetProgramInfoLog(int program, int bufSize, Span<int> length, out string infoLog)
        {
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramInfoLog(program, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetProgramInfoLog(int program, int bufSize, int[] length)
        {
            string infoLog;
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramInfoLog(program, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetProgramInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetProgramInfoLog(int program, int bufSize, int[] length, out string infoLog)
        {
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramInfoLog(program, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetProgramInfoLog(int program, int bufSize, ref int length)
        {
            string infoLog;
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramInfoLog(program, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetProgramInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetProgramInfoLog(int program, int bufSize, ref int length, out string infoLog)
        {
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramInfoLog(program, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderiv(int, ShaderParameterName, int*)"/>
        public static unsafe void GetShaderi(int shader, ShaderParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetShaderiv(shader, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderiv(int, ShaderParameterName, int*)"/>
        public static unsafe void GetShaderi(int shader, ShaderParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetShaderiv(shader, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderiv(int, ShaderParameterName, int*)"/>
        public static unsafe void GetShaderi(int shader, ShaderParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetShaderiv(shader, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetShaderInfoLog(int shader, int bufSize, Span<int> length)
        {
            string infoLog;
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderInfoLog(shader, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetShaderInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetShaderInfoLog(int shader, int bufSize, Span<int> length, out string infoLog)
        {
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderInfoLog(shader, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetShaderInfoLog(int shader, int bufSize, int[] length)
        {
            string infoLog;
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderInfoLog(shader, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetShaderInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetShaderInfoLog(int shader, int bufSize, int[] length, out string infoLog)
        {
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderInfoLog(shader, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetShaderInfoLog(int shader, int bufSize, ref int length)
        {
            string infoLog;
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderInfoLog(shader, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetShaderInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetShaderInfoLog(int shader, int bufSize, ref int length, out string infoLog)
        {
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderInfoLog(shader, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderSource(int, int, int*, byte*)"/>
        public static unsafe string GetShaderSource(int shader, int bufSize, Span<int> length)
        {
            string source;
            fixed (int* length_ptr = length)
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderSource(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
            return source;
        }
        /// <inheritdoc cref="GetShaderSource(int, int, int*, byte*)"/>
        public static unsafe void GetShaderSource(int shader, int bufSize, Span<int> length, out string source)
        {
            fixed (int* length_ptr = length)
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderSource(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderSource(int, int, int*, byte*)"/>
        public static unsafe string GetShaderSource(int shader, int bufSize, int[] length)
        {
            string source;
            fixed (int* length_ptr = length)
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderSource(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
            return source;
        }
        /// <inheritdoc cref="GetShaderSource(int, int, int*, byte*)"/>
        public static unsafe void GetShaderSource(int shader, int bufSize, int[] length, out string source)
        {
            fixed (int* length_ptr = length)
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderSource(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderSource(int, int, int*, byte*)"/>
        public static unsafe string GetShaderSource(int shader, int bufSize, ref int length)
        {
            string source;
            fixed (int* length_ptr = &length)
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderSource(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
            return source;
        }
        /// <inheritdoc cref="GetShaderSource(int, int, int*, byte*)"/>
        public static unsafe void GetShaderSource(int shader, int bufSize, ref int length, out string source)
        {
            fixed (int* length_ptr = &length)
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderSource(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformLocation(int, byte*)"/>
        public static unsafe int GetUniformLocation(int program, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetUniformLocation(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetUniformfv(int, int, float*)"/>
        public static unsafe void GetUniformf(int program, int location, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetUniformfv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformfv(int, int, float*)"/>
        public static unsafe void GetUniformf(int program, int location, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetUniformfv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformfv(int, int, float*)"/>
        public static unsafe void GetUniformf(int program, int location, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetUniformfv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformiv(int, int, int*)"/>
        public static unsafe void GetUniformi(int program, int location, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetUniformiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformiv(int, int, int*)"/>
        public static unsafe void GetUniformi(int program, int location, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetUniformiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformiv(int, int, int*)"/>
        public static unsafe void GetUniformi(int program, int location, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetUniformiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribPropertyARB, double*)"/>
        public static unsafe void GetVertexAttribd(uint index, VertexAttribPropertyARB pname, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetVertexAttribdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribPropertyARB, double*)"/>
        public static unsafe void GetVertexAttribd(uint index, VertexAttribPropertyARB pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetVertexAttribdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribPropertyARB, double*)"/>
        public static unsafe void GetVertexAttribd(uint index, VertexAttribPropertyARB pname, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                GetVertexAttribdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribPropertyARB, float*)"/>
        public static unsafe void GetVertexAttribf(uint index, VertexAttribPropertyARB pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetVertexAttribfv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribPropertyARB, float*)"/>
        public static unsafe void GetVertexAttribf(uint index, VertexAttribPropertyARB pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetVertexAttribfv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribPropertyARB, float*)"/>
        public static unsafe void GetVertexAttribf(uint index, VertexAttribPropertyARB pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetVertexAttribfv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribPropertyARB, int*)"/>
        public static unsafe void GetVertexAttribi(uint index, VertexAttribPropertyARB pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetVertexAttribiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribPropertyARB, int*)"/>
        public static unsafe void GetVertexAttribi(uint index, VertexAttribPropertyARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetVertexAttribiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribPropertyARB, int*)"/>
        public static unsafe void GetVertexAttribi(uint index, VertexAttribPropertyARB pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetVertexAttribiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribPointerv(uint, VertexAttribPointerPropertyARB, void**)"/>
        public static unsafe void GetVertexAttribPointer(uint index, VertexAttribPointerPropertyARB pname, void** pointer)
        {
            GetVertexAttribPointerv(index, pname, pointer);
        }
        /// <inheritdoc cref="ShaderSource(int, int, byte**, int*)"/>
        public static unsafe void ShaderSource(int shader, int count, byte** str, ReadOnlySpan<int> length)
        {
            fixed (int* length_ptr = length)
            {
                ShaderSource(shader, count, str, length_ptr);
            }
        }
        /// <inheritdoc cref="ShaderSource(int, int, byte**, int*)"/>
        public static unsafe void ShaderSource(int shader, int count, byte** str, int[] length)
        {
            fixed (int* length_ptr = length)
            {
                ShaderSource(shader, count, str, length_ptr);
            }
        }
        /// <inheritdoc cref="ShaderSource(int, int, byte**, int*)"/>
        public static unsafe void ShaderSource(int shader, int count, byte** str, in int length)
        {
            fixed (int* length_ptr = &length)
            {
                ShaderSource(shader, count, str, length_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1fv(int, int, float*)"/>
        public static unsafe void Uniform1f(int location, int count, in float value)
        {
            fixed (float* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform1fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1fv(int, int, float*)"/>
        public static unsafe void Uniform1f(int location, int count, ReadOnlySpan<float> value)
        {
            fixed (float* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform1fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1fv(int, int, float*)"/>
        public static unsafe void Uniform1f(int location, int count, float[] value)
        {
            fixed (float* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform1fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, in Vector2 value)
        {
            fixed (Vector2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, ReadOnlySpan<Vector2> value)
        {
            fixed (Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, Vector2[] value)
        {
            fixed (Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, in System.Numerics.Vector2 value)
        {
            fixed (System.Numerics.Vector2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
        {
            fixed (System.Numerics.Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, System.Numerics.Vector2[] value)
        {
            fixed (System.Numerics.Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, in Vector3 value)
        {
            fixed (Vector3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, ReadOnlySpan<Vector3> value)
        {
            fixed (Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, Vector3[] value)
        {
            fixed (Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, in System.Numerics.Vector3 value)
        {
            fixed (System.Numerics.Vector3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
        {
            fixed (System.Numerics.Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, System.Numerics.Vector3[] value)
        {
            fixed (System.Numerics.Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, in Vector4 value)
        {
            fixed (Vector4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, ReadOnlySpan<Vector4> value)
        {
            fixed (Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, Vector4[] value)
        {
            fixed (Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, in System.Numerics.Vector4 value)
        {
            fixed (System.Numerics.Vector4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
        {
            fixed (System.Numerics.Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, System.Numerics.Vector4[] value)
        {
            fixed (System.Numerics.Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1iv(int, int, int*)"/>
        public static unsafe void Uniform1i(int location, int count, in int value)
        {
            fixed (int* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform1iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1iv(int, int, int*)"/>
        public static unsafe void Uniform1i(int location, int count, ReadOnlySpan<int> value)
        {
            fixed (int* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform1iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1iv(int, int, int*)"/>
        public static unsafe void Uniform1i(int location, int count, int[] value)
        {
            fixed (int* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform1iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2iv(int, int, int*)"/>
        public static unsafe void Uniform2i(int location, int count, in Vector2i value)
        {
            fixed (Vector2i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform2iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2iv(int, int, int*)"/>
        public static unsafe void Uniform2i(int location, int count, ReadOnlySpan<Vector2i> value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform2iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2iv(int, int, int*)"/>
        public static unsafe void Uniform2i(int location, int count, Vector2i[] value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform2iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3iv(int, int, int*)"/>
        public static unsafe void Uniform3i(int location, int count, in Vector3i value)
        {
            fixed (Vector3i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform3iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3iv(int, int, int*)"/>
        public static unsafe void Uniform3i(int location, int count, ReadOnlySpan<Vector3i> value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform3iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3iv(int, int, int*)"/>
        public static unsafe void Uniform3i(int location, int count, Vector3i[] value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform3iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4iv(int, int, int*)"/>
        public static unsafe void Uniform4i(int location, int count, in Vector4i value)
        {
            fixed (Vector4i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform4iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4iv(int, int, int*)"/>
        public static unsafe void Uniform4i(int location, int count, ReadOnlySpan<Vector4i> value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform4iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4iv(int, int, int*)"/>
        public static unsafe void Uniform4i(int location, int count, Vector4i[] value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform4iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2f(int location, int count, bool transpose, in Matrix2 value)
        {
            fixed (Matrix2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2f(int location, int count, bool transpose, ReadOnlySpan<Matrix2> value)
        {
            fixed (Matrix2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2f(int location, int count, bool transpose, Matrix2[] value)
        {
            fixed (Matrix2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3f(int location, int count, bool transpose, in Matrix3 value)
        {
            fixed (Matrix3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3f(int location, int count, bool transpose, ReadOnlySpan<Matrix3> value)
        {
            fixed (Matrix3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3f(int location, int count, bool transpose, Matrix3[] value)
        {
            fixed (Matrix3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, in Matrix4 value)
        {
            fixed (Matrix4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, ReadOnlySpan<Matrix4> value)
        {
            fixed (Matrix4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, Matrix4[] value)
        {
            fixed (Matrix4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, in System.Numerics.Matrix4x4 value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix4x4> value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, System.Numerics.Matrix4x4[] value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib1dv(uint, double*)"/>
        public static unsafe void VertexAttrib1d(uint index, in double v)
        {
            fixed (double* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttrib1dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib1fv(uint, float*)"/>
        public static unsafe void VertexAttrib1f(uint index, in float v)
        {
            fixed (float* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib1fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib1s(uint, short)"/>
        public static unsafe void VertexAttrib1(uint index, short x)
        {
            VertexAttrib1s(index, x);
        }
        /// <inheritdoc cref="VertexAttrib1sv(uint, short*)"/>
        public static unsafe void VertexAttrib1(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib1sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib1sv(uint, short*)"/>
        public static unsafe void VertexAttrib1(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib1sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib1sv(uint, short*)"/>
        public static unsafe void VertexAttrib1(uint index, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttrib1sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2dv(uint, double*)"/>
        public static unsafe void VertexAttrib2d(uint index, in Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttrib2dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
        public static unsafe void VertexAttrib2f(uint index, in Vector2 v)
        {
            fixed (Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib2fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
        public static unsafe void VertexAttrib2f(uint index, in System.Numerics.Vector2 v)
        {
            fixed (System.Numerics.Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib2fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
        public static unsafe void VertexAttrib2f(uint index, ReadOnlySpan<System.Numerics.Vector2> v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib2fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
        public static unsafe void VertexAttrib2f(uint index, System.Numerics.Vector2[] v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib2fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2s(uint, short, short)"/>
        public static unsafe void VertexAttrib2(uint index, short x, short y)
        {
            VertexAttrib2s(index, x, y);
        }
        /// <inheritdoc cref="VertexAttrib2sv(uint, short*)"/>
        public static unsafe void VertexAttrib2(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib2sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2sv(uint, short*)"/>
        public static unsafe void VertexAttrib2(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib2sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2sv(uint, short*)"/>
        public static unsafe void VertexAttrib2(uint index, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttrib2sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3dv(uint, double*)"/>
        public static unsafe void VertexAttrib3d(uint index, in Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttrib3dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
        public static unsafe void VertexAttrib3f(uint index, in Vector3 v)
        {
            fixed (Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib3fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
        public static unsafe void VertexAttrib3f(uint index, in System.Numerics.Vector3 v)
        {
            fixed (System.Numerics.Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib3fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
        public static unsafe void VertexAttrib3f(uint index, ReadOnlySpan<System.Numerics.Vector3> v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib3fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
        public static unsafe void VertexAttrib3f(uint index, System.Numerics.Vector3[] v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib3fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3s(uint, short, short, short)"/>
        public static unsafe void VertexAttrib3(uint index, short x, short y, short z)
        {
            VertexAttrib3s(index, x, y, z);
        }
        /// <inheritdoc cref="VertexAttrib3sv(uint, short*)"/>
        public static unsafe void VertexAttrib3(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib3sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3sv(uint, short*)"/>
        public static unsafe void VertexAttrib3(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib3sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3sv(uint, short*)"/>
        public static unsafe void VertexAttrib3(uint index, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttrib3sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nbv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4N(uint index, ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttrib4Nbv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nbv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4N(uint index, sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttrib4Nbv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nbv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4N(uint index, in sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                VertexAttrib4Nbv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Niv(uint, int*)"/>
        public static unsafe void VertexAttrib4Ni(uint index, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v)
            {
                VertexAttrib4Niv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Niv(uint, int*)"/>
        public static unsafe void VertexAttrib4Ni(uint index, int[] v)
        {
            fixed (int* v_ptr = v)
            {
                VertexAttrib4Niv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Niv(uint, int*)"/>
        public static unsafe void VertexAttrib4Ni(uint index, in int v)
        {
            fixed (int* v_ptr = &v)
            {
                VertexAttrib4Niv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nsv(uint, short*)"/>
        public static unsafe void VertexAttrib4N(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib4Nsv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nsv(uint, short*)"/>
        public static unsafe void VertexAttrib4N(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib4Nsv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nsv(uint, short*)"/>
        public static unsafe void VertexAttrib4N(uint index, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttrib4Nsv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nub(uint, byte, byte, byte, byte)"/>
        public static unsafe void VertexAttrib4N(uint index, byte x, byte y, byte z, byte w)
        {
            VertexAttrib4Nub(index, x, y, z, w);
        }
        /// <inheritdoc cref="VertexAttrib4Nubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4N(uint index, ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttrib4Nubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4N(uint index, byte[] v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttrib4Nubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4N(uint index, in byte v)
        {
            fixed (byte* v_ptr = &v)
            {
                VertexAttrib4Nubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nuiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4Nui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttrib4Nuiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nuiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4Nui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttrib4Nuiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nuiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4Nui(uint index, in uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttrib4Nuiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nusv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4N(uint index, ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttrib4Nusv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nusv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4N(uint index, ushort[] v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttrib4Nusv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nusv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4N(uint index, in ushort v)
        {
            fixed (ushort* v_ptr = &v)
            {
                VertexAttrib4Nusv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4(uint index, ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttrib4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4(uint index, sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttrib4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4(uint index, in sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                VertexAttrib4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4dv(uint, double*)"/>
        public static unsafe void VertexAttrib4d(uint index, in Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttrib4dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
        public static unsafe void VertexAttrib4f(uint index, in Vector4 v)
        {
            fixed (Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib4fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
        public static unsafe void VertexAttrib4f(uint index, in System.Numerics.Vector4 v)
        {
            fixed (System.Numerics.Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib4fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
        public static unsafe void VertexAttrib4f(uint index, ReadOnlySpan<System.Numerics.Vector4> v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib4fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
        public static unsafe void VertexAttrib4f(uint index, System.Numerics.Vector4[] v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib4fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4iv(uint, int*)"/>
        public static unsafe void VertexAttrib4i(uint index, in Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                VertexAttrib4iv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4s(uint, short, short, short, short)"/>
        public static unsafe void VertexAttrib4(uint index, short x, short y, short z, short w)
        {
            VertexAttrib4s(index, x, y, z, w);
        }
        /// <inheritdoc cref="VertexAttrib4sv(uint, short*)"/>
        public static unsafe void VertexAttrib4(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4sv(uint, short*)"/>
        public static unsafe void VertexAttrib4(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4sv(uint, short*)"/>
        public static unsafe void VertexAttrib4(uint index, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttrib4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4ubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4(uint index, ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttrib4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4ubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4(uint index, byte[] v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttrib4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4ubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4(uint index, in byte v)
        {
            fixed (byte* v_ptr = &v)
            {
                VertexAttrib4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4uiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4ui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttrib4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4uiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4ui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttrib4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4uiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4ui(uint index, in uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttrib4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4usv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4(uint index, ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttrib4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4usv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4(uint index, ushort[] v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttrib4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4usv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4(uint index, in ushort v)
        {
            fixed (ushort* v_ptr = &v)
            {
                VertexAttrib4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribPointer(uint, int, VertexAttribPointerType, bool, int, void*)"/>
        public static unsafe void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, nint offset)
        {
            void* pointer = (void*)offset;
            VertexAttribPointer(index, size, type, normalized, stride, pointer);
        }
        /// <inheritdoc cref="UniformMatrix2x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x3f(int location, int count, bool transpose, in Matrix2x3 value)
        {
            fixed (Matrix2x3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x3f(int location, int count, bool transpose, ReadOnlySpan<Matrix2x3> value)
        {
            fixed (Matrix2x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x3f(int location, int count, bool transpose, Matrix2x3[] value)
        {
            fixed (Matrix2x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, in Matrix3x2 value)
        {
            fixed (Matrix3x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, ReadOnlySpan<Matrix3x2> value)
        {
            fixed (Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, Matrix3x2[] value)
        {
            fixed (Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, in System.Numerics.Matrix3x2 value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix3x2> value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, System.Numerics.Matrix3x2[] value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x4f(int location, int count, bool transpose, in Matrix2x4 value)
        {
            fixed (Matrix2x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x4f(int location, int count, bool transpose, ReadOnlySpan<Matrix2x4> value)
        {
            fixed (Matrix2x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x4f(int location, int count, bool transpose, Matrix2x4[] value)
        {
            fixed (Matrix2x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x2f(int location, int count, bool transpose, in Matrix4x2 value)
        {
            fixed (Matrix4x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x2f(int location, int count, bool transpose, ReadOnlySpan<Matrix4x2> value)
        {
            fixed (Matrix4x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x2f(int location, int count, bool transpose, Matrix4x2[] value)
        {
            fixed (Matrix4x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x4f(int location, int count, bool transpose, in Matrix3x4 value)
        {
            fixed (Matrix3x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x4f(int location, int count, bool transpose, ReadOnlySpan<Matrix3x4> value)
        {
            fixed (Matrix3x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x4f(int location, int count, bool transpose, Matrix3x4[] value)
        {
            fixed (Matrix3x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x3f(int location, int count, bool transpose, in Matrix4x3 value)
        {
            fixed (Matrix4x3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x3f(int location, int count, bool transpose, ReadOnlySpan<Matrix4x3> value)
        {
            fixed (Matrix4x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x3f(int location, int count, bool transpose, Matrix4x3[] value)
        {
            fixed (Matrix4x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleani_v(BufferTargetARB, uint, bool*)"/>
        public static unsafe void GetBoolean(BufferTargetARB target, uint index, Span<bool> data)
        {
            fixed (bool* data_ptr = data)
            {
                GetBooleani_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleani_v(BufferTargetARB, uint, bool*)"/>
        public static unsafe void GetBoolean(BufferTargetARB target, uint index, bool[] data)
        {
            fixed (bool* data_ptr = data)
            {
                GetBooleani_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleani_v(BufferTargetARB, uint, bool*)"/>
        public static unsafe void GetBoolean(BufferTargetARB target, uint index, ref bool data)
        {
            fixed (bool* data_ptr = &data)
            {
                GetBooleani_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
        public static unsafe void GetInteger(GetPName target, uint index, Span<int> data)
        {
            fixed (int* data_ptr = data)
            {
                GetIntegeri_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
        public static unsafe void GetInteger(GetPName target, uint index, int[] data)
        {
            fixed (int* data_ptr = data)
            {
                GetIntegeri_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
        public static unsafe void GetInteger(GetPName target, uint index, ref int data)
        {
            fixed (int* data_ptr = &data)
            {
                GetIntegeri_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe string GetTransformFeedbackVarying(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<AttributeType> type)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }
        /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe void GetTransformFeedbackVarying(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<AttributeType> type, out string name)
        {
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe string GetTransformFeedbackVarying(int program, uint index, int bufSize, int[] length, int[] size, AttributeType[] type)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
            return name;
        }
        /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe void GetTransformFeedbackVarying(int program, uint index, int bufSize, int[] length, int[] size, AttributeType[] type, out string name)
        {
            fixed (int* length_ptr = length)
            {
                fixed (int* size_ptr = size)
                {
                    fixed (AttributeType* type_ptr = type)
                    {
                        var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                        name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe string GetTransformFeedbackVarying(int program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type)
        {
            string name;
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (AttributeType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe void GetTransformFeedbackVarying(int program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type, out string name)
        {
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (AttributeType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribIPointer(uint, int, VertexAttribIType, int, void*)"/>
        public static unsafe void VertexAttribIPointer(uint index, int size, VertexAttribIType type, int stride, nint offset)
        {
            void* pointer = (void*)offset;
            VertexAttribIPointer(index, size, type, stride, pointer);
        }
        /// <inheritdoc cref="GetVertexAttribIiv(uint, VertexAttribEnum, int*)"/>
        public static unsafe void GetVertexAttribIi(uint index, VertexAttribEnum pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetVertexAttribIiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribIiv(uint, VertexAttribEnum, int*)"/>
        public static unsafe void GetVertexAttribIi(uint index, VertexAttribEnum pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetVertexAttribIiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribIiv(uint, VertexAttribEnum, int*)"/>
        public static unsafe void GetVertexAttribIi(uint index, VertexAttribEnum pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetVertexAttribIiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribIuiv(uint, VertexAttribEnum, uint*)"/>
        public static unsafe void GetVertexAttribIui(uint index, VertexAttribEnum pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetVertexAttribIuiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribIuiv(uint, VertexAttribEnum, uint*)"/>
        public static unsafe void GetVertexAttribIui(uint index, VertexAttribEnum pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetVertexAttribIuiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribIuiv(uint, VertexAttribEnum, uint*)"/>
        public static unsafe void GetVertexAttribIui(uint index, VertexAttribEnum pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetVertexAttribIuiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI1iv(uint, int*)"/>
        public static unsafe void VertexAttribI1i(uint index, in int v)
        {
            fixed (int* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                VertexAttribI1iv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI2iv(uint, int*)"/>
        public static unsafe void VertexAttribI2i(uint index, in Vector2i v)
        {
            fixed (Vector2i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                VertexAttribI2iv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI3iv(uint, int*)"/>
        public static unsafe void VertexAttribI3i(uint index, in Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                VertexAttribI3iv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4iv(uint, int*)"/>
        public static unsafe void VertexAttribI4i(uint index, in Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                VertexAttribI4iv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI1uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI1ui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI1uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI1uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI1ui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI1uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI1uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI1ui(uint index, in uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttribI1uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI2uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI2ui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI2uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI2uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI2ui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI2uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI2uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI2ui(uint index, in uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttribI2uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI3uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI3ui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI3uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI3uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI3ui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI3uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI3uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI3ui(uint index, in uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttribI3uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI4ui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI4ui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI4ui(uint index, in uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttribI4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttribI4(uint index, ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttribI4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttribI4(uint index, sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttribI4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttribI4(uint index, in sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                VertexAttribI4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4sv(uint, short*)"/>
        public static unsafe void VertexAttribI4(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttribI4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4sv(uint, short*)"/>
        public static unsafe void VertexAttribI4(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttribI4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4sv(uint, short*)"/>
        public static unsafe void VertexAttribI4(uint index, in short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttribI4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4ubv(uint, byte*)"/>
        public static unsafe void VertexAttribI4(uint index, ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttribI4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4ubv(uint, byte*)"/>
        public static unsafe void VertexAttribI4(uint index, byte[] v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttribI4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4ubv(uint, byte*)"/>
        public static unsafe void VertexAttribI4(uint index, in byte v)
        {
            fixed (byte* v_ptr = &v)
            {
                VertexAttribI4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4usv(uint, ushort*)"/>
        public static unsafe void VertexAttribI4(uint index, ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttribI4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4usv(uint, ushort*)"/>
        public static unsafe void VertexAttribI4(uint index, ushort[] v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttribI4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4usv(uint, ushort*)"/>
        public static unsafe void VertexAttribI4(uint index, in ushort v)
        {
            fixed (ushort* v_ptr = &v)
            {
                VertexAttribI4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformuiv(int, int, uint*)"/>
        public static unsafe void GetUniformui(int program, int location, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetUniformuiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformuiv(int, int, uint*)"/>
        public static unsafe void GetUniformui(int program, int location, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetUniformuiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformuiv(int, int, uint*)"/>
        public static unsafe void GetUniformui(int program, int location, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetUniformuiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="BindFragDataLocation(int, uint, byte*)"/>
        public static unsafe void BindFragDataLocation(int program, uint color, string name)
        {
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            BindFragDataLocation(program, color, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
        }
        /// <inheritdoc cref="GetFragDataLocation(int, byte*)"/>
        public static unsafe int GetFragDataLocation(int program, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetFragDataLocation(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="Uniform1uiv(int, int, uint*)"/>
        public static unsafe void Uniform1ui(int location, int count, in uint value)
        {
            fixed (uint* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform1uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1uiv(int, int, uint*)"/>
        public static unsafe void Uniform1ui(int location, int count, ReadOnlySpan<uint> value)
        {
            fixed (uint* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform1uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1uiv(int, int, uint*)"/>
        public static unsafe void Uniform1ui(int location, int count, uint[] value)
        {
            fixed (uint* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform1uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2uiv(int, int, uint*)"/>
        public static unsafe void Uniform2ui(int location, int count, in Vector2i value)
        {
            fixed (Vector2i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform2uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2uiv(int, int, uint*)"/>
        public static unsafe void Uniform2ui(int location, int count, ReadOnlySpan<Vector2i> value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform2uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2uiv(int, int, uint*)"/>
        public static unsafe void Uniform2ui(int location, int count, Vector2i[] value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform2uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3uiv(int, int, uint*)"/>
        public static unsafe void Uniform3ui(int location, int count, in Vector3i value)
        {
            fixed (Vector3i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform3uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3uiv(int, int, uint*)"/>
        public static unsafe void Uniform3ui(int location, int count, ReadOnlySpan<Vector3i> value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform3uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3uiv(int, int, uint*)"/>
        public static unsafe void Uniform3ui(int location, int count, Vector3i[] value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform3uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4uiv(int, int, uint*)"/>
        public static unsafe void Uniform4ui(int location, int count, in Vector4i value)
        {
            fixed (Vector4i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform4uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4uiv(int, int, uint*)"/>
        public static unsafe void Uniform4ui(int location, int count, ReadOnlySpan<Vector4i> value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform4uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4uiv(int, int, uint*)"/>
        public static unsafe void Uniform4ui(int location, int count, Vector4i[] value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform4uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIiv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameterIi(TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIiv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameterIi(TextureTarget target, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIiv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameterIi(TextureTarget target, TextureParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                TexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIuiv(TextureTarget, TextureParameterName, uint*)"/>
        public static unsafe void TexParameterIui(TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                TexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIuiv(TextureTarget, TextureParameterName, uint*)"/>
        public static unsafe void TexParameterIui(TextureTarget target, TextureParameterName pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                TexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIuiv(TextureTarget, TextureParameterName, uint*)"/>
        public static unsafe void TexParameterIui(TextureTarget target, TextureParameterName pname, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                TexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIiv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameterIi(TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIiv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameterIi(TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIiv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameterIi(TextureTarget target, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIuiv(TextureTarget, GetTextureParameter, uint*)"/>
        public static unsafe void GetTexParameterIui(TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetTexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIuiv(TextureTarget, GetTextureParameter, uint*)"/>
        public static unsafe void GetTexParameterIui(TextureTarget target, GetTextureParameter pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetTexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIuiv(TextureTarget, GetTextureParameter, uint*)"/>
        public static unsafe void GetTexParameterIui(TextureTarget target, GetTextureParameter pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetTexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferiv(Buffer, int, int*)"/>
        public static unsafe void ClearBufferi(Buffer buffer, int drawbuffer, ReadOnlySpan<int> value)
        {
            fixed (int* value_ptr = value)
            {
                ClearBufferiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferiv(Buffer, int, int*)"/>
        public static unsafe void ClearBufferi(Buffer buffer, int drawbuffer, int[] value)
        {
            fixed (int* value_ptr = value)
            {
                ClearBufferiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferiv(Buffer, int, int*)"/>
        public static unsafe void ClearBufferi(Buffer buffer, int drawbuffer, in int value)
        {
            fixed (int* value_ptr = &value)
            {
                ClearBufferiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferuiv(Buffer, int, uint*)"/>
        public static unsafe void ClearBufferui(Buffer buffer, int drawbuffer, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                ClearBufferuiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferuiv(Buffer, int, uint*)"/>
        public static unsafe void ClearBufferui(Buffer buffer, int drawbuffer, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                ClearBufferuiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferuiv(Buffer, int, uint*)"/>
        public static unsafe void ClearBufferui(Buffer buffer, int drawbuffer, in uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                ClearBufferuiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferfv(Buffer, int, float*)"/>
        public static unsafe void ClearBufferf(Buffer buffer, int drawbuffer, ReadOnlySpan<float> value)
        {
            fixed (float* value_ptr = value)
            {
                ClearBufferfv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferfv(Buffer, int, float*)"/>
        public static unsafe void ClearBufferf(Buffer buffer, int drawbuffer, float[] value)
        {
            fixed (float* value_ptr = value)
            {
                ClearBufferfv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferfv(Buffer, int, float*)"/>
        public static unsafe void ClearBufferf(Buffer buffer, int drawbuffer, in float value)
        {
            fixed (float* value_ptr = &value)
            {
                ClearBufferfv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferfi(Buffer, int, float, int)"/>
        public static unsafe void ClearBuffer(Buffer buffer, int drawbuffer, float depth, int stencil)
        {
            ClearBufferfi(buffer, drawbuffer, depth, stencil);
        }
        /// <inheritdoc cref="GetStringi(StringName, uint)"/>
        public static unsafe string? GetStringi(StringName name, uint index)
        {
            byte* returnValue;
            string? returnValue_str;
            returnValue = GetStringi_(name, index);
            returnValue_str = Marshal.PtrToStringAnsi((IntPtr)returnValue);
            return returnValue_str;
        }
        /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
        public static unsafe void DeleteRenderbuffer(in int renderbuffer)
        {
            int n = 1;
            fixed(int* renderbuffers_handle = &renderbuffer)
            {
                DeleteRenderbuffers(n, renderbuffers_handle);
            }
        }
        /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
        public static unsafe void DeleteRenderbuffers(ReadOnlySpan<int> renderbuffers)
        {
            int n = (int)(renderbuffers.Length);
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                DeleteRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
        public static unsafe void DeleteRenderbuffers(int[] renderbuffers)
        {
            int n = (int)(renderbuffers.Length);
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                DeleteRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
        public static unsafe void DeleteRenderbuffers(int n, in int renderbuffers)
        {
            fixed (int* renderbuffers_ptr = &renderbuffers)
            {
                DeleteRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
        public static unsafe int GenRenderbuffer()
        {
            int renderbuffer;
            int n = 1;
            Unsafe.SkipInit(out renderbuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
            GenRenderbuffers(n, renderbuffers_handle);
            return renderbuffer;
        }
        /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
        public static unsafe void GenRenderbuffer(out int renderbuffer)
        {
            int n = 1;
            Unsafe.SkipInit(out renderbuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
            GenRenderbuffers(n, renderbuffers_handle);
        }
        /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
        public static unsafe void GenRenderbuffers(Span<int> renderbuffers)
        {
            int n = (int)(renderbuffers.Length);
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                GenRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
        public static unsafe void GenRenderbuffers(int[] renderbuffers)
        {
            int n = (int)(renderbuffers.Length);
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                GenRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
        public static unsafe void GenRenderbuffers(int n, ref int renderbuffers)
        {
            fixed (int* renderbuffers_ptr = &renderbuffers)
            {
                GenRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
        public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetRenderbufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
        public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetRenderbufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
        public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetRenderbufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
        public static unsafe void DeleteFramebuffer(in int framebuffer)
        {
            int n = 1;
            fixed(int* framebuffers_handle = &framebuffer)
            {
                DeleteFramebuffers(n, framebuffers_handle);
            }
        }
        /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
        public static unsafe void DeleteFramebuffers(ReadOnlySpan<int> framebuffers)
        {
            int n = (int)(framebuffers.Length);
            fixed (int* framebuffers_ptr = framebuffers)
            {
                DeleteFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
        public static unsafe void DeleteFramebuffers(int[] framebuffers)
        {
            int n = (int)(framebuffers.Length);
            fixed (int* framebuffers_ptr = framebuffers)
            {
                DeleteFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
        public static unsafe void DeleteFramebuffers(int n, in int framebuffers)
        {
            fixed (int* framebuffers_ptr = &framebuffers)
            {
                DeleteFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
        public static unsafe int GenFramebuffer()
        {
            int framebuffer;
            int n = 1;
            Unsafe.SkipInit(out framebuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
            GenFramebuffers(n, framebuffers_handle);
            return framebuffer;
        }
        /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
        public static unsafe void GenFramebuffer(out int framebuffer)
        {
            int n = 1;
            Unsafe.SkipInit(out framebuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
            GenFramebuffers(n, framebuffers_handle);
        }
        /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
        public static unsafe void GenFramebuffers(Span<int> framebuffers)
        {
            int n = (int)(framebuffers.Length);
            fixed (int* framebuffers_ptr = framebuffers)
            {
                GenFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
        public static unsafe void GenFramebuffers(int[] framebuffers)
        {
            int n = (int)(framebuffers.Length);
            fixed (int* framebuffers_ptr = framebuffers)
            {
                GenFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
        public static unsafe void GenFramebuffers(int n, ref int framebuffers)
        {
            fixed (int* framebuffers_ptr = &framebuffers)
            {
                GenFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
        public static unsafe void DeleteVertexArray(in int array)
        {
            int n = 1;
            fixed(int* arrays_handle = &array)
            {
                DeleteVertexArrays(n, arrays_handle);
            }
        }
        /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
        public static unsafe void DeleteVertexArrays(ReadOnlySpan<int> arrays)
        {
            int n = (int)(arrays.Length);
            fixed (int* arrays_ptr = arrays)
            {
                DeleteVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
        public static unsafe void DeleteVertexArrays(int[] arrays)
        {
            int n = (int)(arrays.Length);
            fixed (int* arrays_ptr = arrays)
            {
                DeleteVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
        public static unsafe void DeleteVertexArrays(int n, in int arrays)
        {
            fixed (int* arrays_ptr = &arrays)
            {
                DeleteVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
        public static unsafe int GenVertexArray()
        {
            int array;
            int n = 1;
            Unsafe.SkipInit(out array);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
            GenVertexArrays(n, arrays_handle);
            return array;
        }
        /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
        public static unsafe void GenVertexArray(out int array)
        {
            int n = 1;
            Unsafe.SkipInit(out array);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
            GenVertexArrays(n, arrays_handle);
        }
        /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
        public static unsafe void GenVertexArrays(Span<int> arrays)
        {
            int n = (int)(arrays.Length);
            fixed (int* arrays_ptr = arrays)
            {
                GenVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
        public static unsafe void GenVertexArrays(int[] arrays)
        {
            int n = (int)(arrays.Length);
            fixed (int* arrays_ptr = arrays)
            {
                GenVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
        public static unsafe void GenVertexArrays(int n, ref int arrays)
        {
            fixed (int* arrays_ptr = &arrays)
            {
                GenVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="DrawElementsInstanced(PrimitiveType, int, DrawElementsType, void*, int)"/>
        public static unsafe void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount)
        {
            void* indices = (void*)offset;
            DrawElementsInstanced(mode, count, type, indices, instancecount);
        }
        /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
        public static unsafe void GetUniformIndices(int program, int uniformCount, byte** uniformNames, Span<uint> uniformIndices)
        {
            fixed (uint* uniformIndices_ptr = uniformIndices)
            {
                GetUniformIndices(program, uniformCount, uniformNames, uniformIndices_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
        public static unsafe void GetUniformIndices(int program, int uniformCount, byte** uniformNames, uint[] uniformIndices)
        {
            fixed (uint* uniformIndices_ptr = uniformIndices)
            {
                GetUniformIndices(program, uniformCount, uniformNames, uniformIndices_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
        public static unsafe void GetUniformIndices(int program, int uniformCount, byte** uniformNames, ref uint uniformIndices)
        {
            fixed (uint* uniformIndices_ptr = &uniformIndices)
            {
                GetUniformIndices(program, uniformCount, uniformNames, uniformIndices_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
        public static unsafe void GetActiveUniformsi(int program, ReadOnlySpan<uint> uniformIndices, UniformPName pname, Span<int> parameters)
        {
            int uniformCount = (int)(uniformIndices.Length);
            fixed (uint* uniformIndices_ptr = uniformIndices)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
        public static unsafe void GetActiveUniformsi(int program, uint[] uniformIndices, UniformPName pname, int[] parameters)
        {
            int uniformCount = (int)(uniformIndices.Length);
            fixed (uint* uniformIndices_ptr = uniformIndices)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
        public static unsafe void GetActiveUniformsi(int program, int uniformCount, in uint uniformIndices, UniformPName pname, ref int parameters)
        {
            fixed (uint* uniformIndices_ptr = &uniformIndices)
            fixed (int* parameters_ptr = &parameters)
            {
                GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveUniformName(int program, uint uniformIndex, int bufSize, Span<int> length)
        {
            string uniformName;
            fixed (int* length_ptr = length)
            {
                var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
            }
            return uniformName;
        }
        /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveUniformName(int program, uint uniformIndex, int bufSize, Span<int> length, out string uniformName)
        {
            fixed (int* length_ptr = length)
            {
                var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveUniformName(int program, uint uniformIndex, int bufSize, int[] length)
        {
            string uniformName;
            fixed (int* length_ptr = length)
            {
                var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
            }
            return uniformName;
        }
        /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveUniformName(int program, uint uniformIndex, int bufSize, int[] length, out string uniformName)
        {
            fixed (int* length_ptr = length)
            {
                var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveUniformName(int program, uint uniformIndex, int bufSize, ref int length)
        {
            string uniformName;
            fixed (int* length_ptr = &length)
            {
                var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
            }
            return uniformName;
        }
        /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveUniformName(int program, uint uniformIndex, int bufSize, ref int length, out string uniformName)
        {
            fixed (int* length_ptr = &length)
            {
                var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformBlockIndex(int, byte*)"/>
        public static unsafe uint GetUniformBlockIndex(int program, string uniformBlockName)
        {
            uint returnValue;
            byte* uniformBlockName_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(uniformBlockName);
            returnValue = GetUniformBlockIndex(program, uniformBlockName_ptr);
            Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
        public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
        public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
        public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, Span<int> length)
        {
            string uniformBlockName;
            fixed (int* length_ptr = length)
            {
                var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            }
            return uniformBlockName;
        }
        /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, Span<int> length, out string uniformBlockName)
        {
            fixed (int* length_ptr = length)
            {
                var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, int[] length)
        {
            string uniformBlockName;
            fixed (int* length_ptr = length)
            {
                var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            }
            return uniformBlockName;
        }
        /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, int[] length, out string uniformBlockName)
        {
            fixed (int* length_ptr = length)
            {
                var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, ref int length)
        {
            string uniformBlockName;
            fixed (int* length_ptr = &length)
            {
                var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            }
            return uniformBlockName;
        }
        /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, ref int length, out string uniformBlockName)
        {
            fixed (int* length_ptr = &length)
            {
                var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            }
        }
        /// <inheritdoc cref="DrawElementsBaseVertex(PrimitiveType, int, DrawElementsType, void*, int)"/>
        public static unsafe void DrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint offset, int basevertex)
        {
            void* indices = (void*)offset;
            DrawElementsBaseVertex(mode, count, type, indices, basevertex);
        }
        /// <inheritdoc cref="DrawRangeElementsBaseVertex(PrimitiveType, uint, uint, int, DrawElementsType, void*, int)"/>
        public static unsafe void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint offset, int basevertex)
        {
            void* indices = (void*)offset;
            DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
        }
        /// <inheritdoc cref="DrawElementsInstancedBaseVertex(PrimitiveType, int, DrawElementsType, void*, int, int)"/>
        public static unsafe void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, int basevertex)
        {
            void* indices = (void*)offset;
            DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
        }
        /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
        public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int drawcount, ReadOnlySpan<int> basevertex)
        {
            fixed (int* count_ptr = count)
            {
                fixed (int* basevertex_ptr = basevertex)
                {
                    MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                }
            }
        }
        /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
        public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int drawcount, int[] basevertex)
        {
            fixed (int* count_ptr = count)
            {
                fixed (int* basevertex_ptr = basevertex)
                {
                    MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                }
            }
        }
        /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
        public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, in int count, DrawElementsType type, void** indices, int drawcount, in int basevertex)
        {
            fixed (int* count_ptr = &count)
            fixed (int* basevertex_ptr = &basevertex)
            {
                MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
        public static unsafe void GetInteger64(GetPName pname, Span<long> data)
        {
            fixed (long* data_ptr = data)
            {
                GetInteger64v(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
        public static unsafe void GetInteger64(GetPName pname, long[] data)
        {
            fixed (long* data_ptr = data)
            {
                GetInteger64v(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
        public static unsafe void GetInteger64(GetPName pname, ref long data)
        {
            fixed (long* data_ptr = &data)
            {
                GetInteger64v(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
        public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, Span<int> length, Span<int> values)
        {
            fixed (int* length_ptr = length)
            {
                int count = (int)(values.Length);
                fixed (int* values_ptr = values)
                {
                    GetSynciv(sync, pname, count, length_ptr, values_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
        public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, int[] length, int[] values)
        {
            fixed (int* length_ptr = length)
            {
                int count = (int)(values.Length);
                fixed (int* values_ptr = values)
                {
                    GetSynciv(sync, pname, count, length_ptr, values_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
        public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, int count, ref int length, ref int values)
        {
            fixed (int* length_ptr = &length)
            fixed (int* values_ptr = &values)
            {
                GetSynciv(sync, pname, count, length_ptr, values_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64i_v(GetPName, uint, long*)"/>
        public static unsafe void GetInteger64(GetPName target, uint index, Span<long> data)
        {
            fixed (long* data_ptr = data)
            {
                GetInteger64i_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64i_v(GetPName, uint, long*)"/>
        public static unsafe void GetInteger64(GetPName target, uint index, long[] data)
        {
            fixed (long* data_ptr = data)
            {
                GetInteger64i_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64i_v(GetPName, uint, long*)"/>
        public static unsafe void GetInteger64(GetPName target, uint index, ref long data)
        {
            fixed (long* data_ptr = &data)
            {
                GetInteger64i_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteri64v(BufferTargetARB, BufferPNameARB, long*)"/>
        public static unsafe void GetBufferParameteri64(BufferTargetARB target, BufferPNameARB pname, Span<long> parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetBufferParameteri64v(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteri64v(BufferTargetARB, BufferPNameARB, long*)"/>
        public static unsafe void GetBufferParameteri64(BufferTargetARB target, BufferPNameARB pname, long[] parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetBufferParameteri64v(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteri64v(BufferTargetARB, BufferPNameARB, long*)"/>
        public static unsafe void GetBufferParameteri64(BufferTargetARB target, BufferPNameARB pname, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters)
            {
                GetBufferParameteri64v(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
        public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, Span<float> val)
        {
            fixed (float* val_ptr = val)
            {
                GetMultisamplefv(pname, index, val_ptr);
            }
        }
        /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
        public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, float[] val)
        {
            fixed (float* val_ptr = val)
            {
                GetMultisamplefv(pname, index, val_ptr);
            }
        }
        /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
        public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, ref float val)
        {
            fixed (float* val_ptr = &val)
            {
                GetMultisamplefv(pname, index, val_ptr);
            }
        }
        /// <inheritdoc cref="BindFragDataLocationIndexed(int, uint, uint, byte*)"/>
        public static unsafe void BindFragDataLocationIndexed(int program, uint colorNumber, uint index, string name)
        {
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            BindFragDataLocationIndexed(program, colorNumber, index, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
        }
        /// <inheritdoc cref="GetFragDataIndex(int, byte*)"/>
        public static unsafe int GetFragDataIndex(int program, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetFragDataIndex(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GenSamplers(int, int*)"/>
        public static unsafe int GenSampler()
        {
            int sampler;
            int count = 1;
            Unsafe.SkipInit(out sampler);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
            GenSamplers(count, samplers_handle);
            return sampler;
        }
        /// <inheritdoc cref="GenSamplers(int, int*)"/>
        public static unsafe void GenSampler(out int sampler)
        {
            int count = 1;
            Unsafe.SkipInit(out sampler);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
            GenSamplers(count, samplers_handle);
        }
        /// <inheritdoc cref="GenSamplers(int, int*)"/>
        public static unsafe void GenSamplers(Span<int> samplers)
        {
            int count = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                GenSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="GenSamplers(int, int*)"/>
        public static unsafe void GenSamplers(int[] samplers)
        {
            int count = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                GenSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="GenSamplers(int, int*)"/>
        public static unsafe void GenSamplers(int count, ref int samplers)
        {
            fixed (int* samplers_ptr = &samplers)
            {
                GenSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
        public static unsafe void DeleteSampler(in int sampler)
        {
            int count = 1;
            fixed(int* samplers_handle = &sampler)
            {
                DeleteSamplers(count, samplers_handle);
            }
        }
        /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
        public static unsafe void DeleteSamplers(ReadOnlySpan<int> samplers)
        {
            int count = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                DeleteSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
        public static unsafe void DeleteSamplers(int[] samplers)
        {
            int count = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                DeleteSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
        public static unsafe void DeleteSamplers(int count, in int samplers)
        {
            fixed (int* samplers_ptr = &samplers)
            {
                DeleteSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param)
            {
                SamplerParameteriv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, int[] param)
        {
            fixed (int* param_ptr = param)
            {
                SamplerParameteriv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, in int param)
        {
            fixed (int* param_ptr = &param)
            {
                SamplerParameteriv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, ReadOnlySpan<float> param)
        {
            fixed (float* param_ptr = param)
            {
                SamplerParameterfv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, float[] param)
        {
            fixed (float* param_ptr = param)
            {
                SamplerParameterfv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, in float param)
        {
            fixed (float* param_ptr = &param)
            {
                SamplerParameterfv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param)
            {
                SamplerParameterIiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, int[] param)
        {
            fixed (int* param_ptr = param)
            {
                SamplerParameterIiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, in int param)
        {
            fixed (int* param_ptr = &param)
            {
                SamplerParameterIiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, ReadOnlySpan<uint> param)
        {
            fixed (uint* param_ptr = param)
            {
                SamplerParameterIuiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, uint[] param)
        {
            fixed (uint* param_ptr = param)
            {
                SamplerParameterIuiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, in uint param)
        {
            fixed (uint* param_ptr = &param)
            {
                SamplerParameterIuiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetSamplerParameteriv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetSamplerParameteriv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetSamplerParameteriv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetSamplerParameterIiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetSamplerParameterIiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetSamplerParameterIiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetSamplerParameterfv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetSamplerParameterfv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetSamplerParameterfv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
        public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, Span<long> parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetQueryObjecti64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
        public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, long[] parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetQueryObjecti64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
        public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters)
            {
                GetQueryObjecti64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
        public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, Span<ulong> parameters)
        {
            fixed (ulong* parameters_ptr = parameters)
            {
                GetQueryObjectui64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
        public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, ulong[] parameters)
        {
            fixed (ulong* parameters_ptr = parameters)
            {
                GetQueryObjectui64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
        public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, ref ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters)
            {
                GetQueryObjectui64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP1uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP1uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP1uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP1uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP1uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexAttribP1uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP2uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP2uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP2uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP2uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP2uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexAttribP2uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP3uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP3uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP3uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP3uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP3uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexAttribP3uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP4uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP4uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP4uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexAttribP4uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP4uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexAttribP4uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexP2uiv(VertexPointerType, uint*)"/>
        public static unsafe void VertexP2ui(VertexPointerType type, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexP2uiv(type, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexP2uiv(VertexPointerType, uint*)"/>
        public static unsafe void VertexP2ui(VertexPointerType type, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexP2uiv(type, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexP2uiv(VertexPointerType, uint*)"/>
        public static unsafe void VertexP2ui(VertexPointerType type, in uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexP2uiv(type, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexP3uiv(VertexPointerType, uint*)"/>
        public static unsafe void VertexP3ui(VertexPointerType type, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexP3uiv(type, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexP3uiv(VertexPointerType, uint*)"/>
        public static unsafe void VertexP3ui(VertexPointerType type, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexP3uiv(type, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexP3uiv(VertexPointerType, uint*)"/>
        public static unsafe void VertexP3ui(VertexPointerType type, in uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexP3uiv(type, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexP4uiv(VertexPointerType, uint*)"/>
        public static unsafe void VertexP4ui(VertexPointerType type, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexP4uiv(type, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexP4uiv(VertexPointerType, uint*)"/>
        public static unsafe void VertexP4ui(VertexPointerType type, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                VertexP4uiv(type, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexP4uiv(VertexPointerType, uint*)"/>
        public static unsafe void VertexP4ui(VertexPointerType type, in uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexP4uiv(type, value_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP1uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP1ui(TexCoordPointerType type, ReadOnlySpan<uint> coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                TexCoordP1uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP1uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP1ui(TexCoordPointerType type, uint[] coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                TexCoordP1uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP1uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP1ui(TexCoordPointerType type, in uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                TexCoordP1uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP2uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP2ui(TexCoordPointerType type, ReadOnlySpan<uint> coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                TexCoordP2uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP2uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP2ui(TexCoordPointerType type, uint[] coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                TexCoordP2uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP2uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP2ui(TexCoordPointerType type, in uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                TexCoordP2uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP3uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP3ui(TexCoordPointerType type, ReadOnlySpan<uint> coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                TexCoordP3uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP3uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP3ui(TexCoordPointerType type, uint[] coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                TexCoordP3uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP3uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP3ui(TexCoordPointerType type, in uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                TexCoordP3uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP4uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP4ui(TexCoordPointerType type, ReadOnlySpan<uint> coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                TexCoordP4uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP4uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP4ui(TexCoordPointerType type, uint[] coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                TexCoordP4uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP4uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP4ui(TexCoordPointerType type, in uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                TexCoordP4uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP1uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, ReadOnlySpan<uint> coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                MultiTexCoordP1uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP1uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, uint[] coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                MultiTexCoordP1uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP1uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, in uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                MultiTexCoordP1uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP2uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, ReadOnlySpan<uint> coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                MultiTexCoordP2uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP2uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, uint[] coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                MultiTexCoordP2uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP2uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, in uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                MultiTexCoordP2uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP3uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, ReadOnlySpan<uint> coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                MultiTexCoordP3uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP3uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, uint[] coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                MultiTexCoordP3uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP3uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, in uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                MultiTexCoordP3uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP4uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, ReadOnlySpan<uint> coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                MultiTexCoordP4uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP4uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, uint[] coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                MultiTexCoordP4uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP4uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, in uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                MultiTexCoordP4uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="NormalP3uiv(NormalPointerType, uint*)"/>
        public static unsafe void NormalP3ui(NormalPointerType type, ReadOnlySpan<uint> coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                NormalP3uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="NormalP3uiv(NormalPointerType, uint*)"/>
        public static unsafe void NormalP3ui(NormalPointerType type, uint[] coords)
        {
            fixed (uint* coords_ptr = coords)
            {
                NormalP3uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="NormalP3uiv(NormalPointerType, uint*)"/>
        public static unsafe void NormalP3ui(NormalPointerType type, in uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                NormalP3uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="ColorP3uiv(ColorPointerType, uint*)"/>
        public static unsafe void ColorP3ui(ColorPointerType type, ReadOnlySpan<uint> color)
        {
            fixed (uint* color_ptr = color)
            {
                ColorP3uiv(type, color_ptr);
            }
        }
        /// <inheritdoc cref="ColorP3uiv(ColorPointerType, uint*)"/>
        public static unsafe void ColorP3ui(ColorPointerType type, uint[] color)
        {
            fixed (uint* color_ptr = color)
            {
                ColorP3uiv(type, color_ptr);
            }
        }
        /// <inheritdoc cref="ColorP3uiv(ColorPointerType, uint*)"/>
        public static unsafe void ColorP3ui(ColorPointerType type, in uint color)
        {
            fixed (uint* color_ptr = &color)
            {
                ColorP3uiv(type, color_ptr);
            }
        }
        /// <inheritdoc cref="ColorP4uiv(ColorPointerType, uint*)"/>
        public static unsafe void ColorP4ui(ColorPointerType type, ReadOnlySpan<uint> color)
        {
            fixed (uint* color_ptr = color)
            {
                ColorP4uiv(type, color_ptr);
            }
        }
        /// <inheritdoc cref="ColorP4uiv(ColorPointerType, uint*)"/>
        public static unsafe void ColorP4ui(ColorPointerType type, uint[] color)
        {
            fixed (uint* color_ptr = color)
            {
                ColorP4uiv(type, color_ptr);
            }
        }
        /// <inheritdoc cref="ColorP4uiv(ColorPointerType, uint*)"/>
        public static unsafe void ColorP4ui(ColorPointerType type, in uint color)
        {
            fixed (uint* color_ptr = &color)
            {
                ColorP4uiv(type, color_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColorP3uiv(ColorPointerType, uint*)"/>
        public static unsafe void SecondaryColorP3ui(ColorPointerType type, ReadOnlySpan<uint> color)
        {
            fixed (uint* color_ptr = color)
            {
                SecondaryColorP3uiv(type, color_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColorP3uiv(ColorPointerType, uint*)"/>
        public static unsafe void SecondaryColorP3ui(ColorPointerType type, uint[] color)
        {
            fixed (uint* color_ptr = color)
            {
                SecondaryColorP3uiv(type, color_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColorP3uiv(ColorPointerType, uint*)"/>
        public static unsafe void SecondaryColorP3ui(ColorPointerType type, in uint color)
        {
            fixed (uint* color_ptr = &color)
            {
                SecondaryColorP3uiv(type, color_ptr);
            }
        }
        /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
        public static unsafe void DrawArraysIndirect(PrimitiveType mode, IntPtr indirect)
        {
            void* indirect_vptr = (void*)indirect;
            DrawArraysIndirect(mode, indirect_vptr);
        }
        /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
        public static unsafe void DrawArraysIndirect<T1>(PrimitiveType mode, in T1 indirect)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                DrawArraysIndirect(mode, indirect_ptr);
            }
        }
        /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
        public static unsafe void DrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect)
        {
            void* indirect_vptr = (void*)indirect;
            DrawElementsIndirect(mode, type, indirect_vptr);
        }
        /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
        public static unsafe void DrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                DrawElementsIndirect(mode, type, indirect_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
        public static unsafe void Uniform1d(int location, int count, in double value)
        {
            fixed (double* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform1dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
        public static unsafe void Uniform1d(int location, int count, ReadOnlySpan<double> value)
        {
            fixed (double* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform1dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
        public static unsafe void Uniform1d(int location, int count, double[] value)
        {
            fixed (double* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform1dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
        public static unsafe void Uniform2d(int location, int count, in Vector2d value)
        {
            fixed (Vector2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform2dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
        public static unsafe void Uniform2d(int location, int count, ReadOnlySpan<Vector2d> value)
        {
            fixed (Vector2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform2dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
        public static unsafe void Uniform2d(int location, int count, Vector2d[] value)
        {
            fixed (Vector2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform2dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
        public static unsafe void Uniform3d(int location, int count, in Vector3d value)
        {
            fixed (Vector3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform3dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
        public static unsafe void Uniform3d(int location, int count, ReadOnlySpan<Vector3d> value)
        {
            fixed (Vector3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform3dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
        public static unsafe void Uniform3d(int location, int count, Vector3d[] value)
        {
            fixed (Vector3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform3dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
        public static unsafe void Uniform4d(int location, int count, in Vector4d value)
        {
            fixed (Vector4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform4dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
        public static unsafe void Uniform4d(int location, int count, ReadOnlySpan<Vector4d> value)
        {
            fixed (Vector4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform4dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
        public static unsafe void Uniform4d(int location, int count, Vector4d[] value)
        {
            fixed (Vector4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform4dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2d(int location, int count, bool transpose, in Matrix2d value)
        {
            fixed (Matrix2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2d(int location, int count, bool transpose, ReadOnlySpan<Matrix2d> value)
        {
            fixed (Matrix2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2d(int location, int count, bool transpose, Matrix2d[] value)
        {
            fixed (Matrix2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3d(int location, int count, bool transpose, in Matrix3d value)
        {
            fixed (Matrix3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3d(int location, int count, bool transpose, ReadOnlySpan<Matrix3d> value)
        {
            fixed (Matrix3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3d(int location, int count, bool transpose, Matrix3d[] value)
        {
            fixed (Matrix3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4d(int location, int count, bool transpose, in Matrix4d value)
        {
            fixed (Matrix4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4d(int location, int count, bool transpose, ReadOnlySpan<Matrix4d> value)
        {
            fixed (Matrix4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4d(int location, int count, bool transpose, Matrix4d[] value)
        {
            fixed (Matrix4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, in Matrix2x3d value)
        {
            fixed (Matrix2x3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, ReadOnlySpan<Matrix2x3d> value)
        {
            fixed (Matrix2x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, Matrix2x3d[] value)
        {
            fixed (Matrix2x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, in Matrix2x4d value)
        {
            fixed (Matrix2x4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, ReadOnlySpan<Matrix2x4d> value)
        {
            fixed (Matrix2x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, Matrix2x4d[] value)
        {
            fixed (Matrix2x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, in Matrix3x2d value)
        {
            fixed (Matrix3x2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, ReadOnlySpan<Matrix3x2d> value)
        {
            fixed (Matrix3x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, Matrix3x2d[] value)
        {
            fixed (Matrix3x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, in Matrix3x4d value)
        {
            fixed (Matrix3x4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, ReadOnlySpan<Matrix3x4d> value)
        {
            fixed (Matrix3x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, Matrix3x4d[] value)
        {
            fixed (Matrix3x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, in Matrix4x2d value)
        {
            fixed (Matrix4x2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, ReadOnlySpan<Matrix4x2d> value)
        {
            fixed (Matrix4x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, Matrix4x2d[] value)
        {
            fixed (Matrix4x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, in Matrix4x3d value)
        {
            fixed (Matrix4x3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, ReadOnlySpan<Matrix4x3d> value)
        {
            fixed (Matrix4x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, Matrix4x3d[] value)
        {
            fixed (Matrix4x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
        public static unsafe void GetUniformd(int program, int location, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetUniformdv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
        public static unsafe void GetUniformd(int program, int location, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetUniformdv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
        public static unsafe void GetUniformd(int program, int location, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                GetUniformdv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSubroutineUniformLocation(int, ShaderType, byte*)"/>
        public static unsafe int GetSubroutineUniformLocation(int program, ShaderType shadertype, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetSubroutineUniformLocation(program, shadertype, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetSubroutineIndex(int, ShaderType, byte*)"/>
        public static unsafe uint GetSubroutineIndex(int program, ShaderType shadertype, string name)
        {
            uint returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetSubroutineIndex(program, shadertype, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
        public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, Span<int> values)
        {
            fixed (int* values_ptr = values)
            {
                GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
        public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, int[] values)
        {
            fixed (int* values_ptr = values)
            {
                GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
        public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, ref int values)
        {
            fixed (int* values_ptr = &values)
            {
                GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length, out string name)
        {
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, int[] length)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, int[] length, out string name)
        {
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, ref int length)
        {
            string name;
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, ref int length, out string name)
        {
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length, out string name)
        {
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, int[] length)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, int[] length, out string name)
        {
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, ref int length)
        {
            string name;
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, ref int length, out string name)
        {
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
        public static unsafe void UniformSubroutinesui(ShaderType shadertype, ReadOnlySpan<uint> indices)
        {
            int count = (int)(indices.Length);
            fixed (uint* indices_ptr = indices)
            {
                UniformSubroutinesuiv(shadertype, count, indices_ptr);
            }
        }
        /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
        public static unsafe void UniformSubroutinesui(ShaderType shadertype, uint[] indices)
        {
            int count = (int)(indices.Length);
            fixed (uint* indices_ptr = indices)
            {
                UniformSubroutinesuiv(shadertype, count, indices_ptr);
            }
        }
        /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
        public static unsafe void UniformSubroutinesui(ShaderType shadertype, int count, in uint indices)
        {
            fixed (uint* indices_ptr = &indices)
            {
                UniformSubroutinesuiv(shadertype, count, indices_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
        public static unsafe void GetUniformSubroutineui(ShaderType shadertype, int location, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
        public static unsafe void GetUniformSubroutineui(ShaderType shadertype, int location, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
        public static unsafe void GetUniformSubroutineui(ShaderType shadertype, int location, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
        public static unsafe void GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname, Span<int> values)
        {
            fixed (int* values_ptr = values)
            {
                GetProgramStageiv(program, shadertype, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
        public static unsafe void GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname, int[] values)
        {
            fixed (int* values_ptr = values)
            {
                GetProgramStageiv(program, shadertype, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
        public static unsafe void GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname, ref int values)
        {
            fixed (int* values_ptr = &values)
            {
                GetProgramStageiv(program, shadertype, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
        public static unsafe void PatchParameterf(PatchParameterName pname, ReadOnlySpan<float> values)
        {
            fixed (float* values_ptr = values)
            {
                PatchParameterfv(pname, values_ptr);
            }
        }
        /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
        public static unsafe void PatchParameterf(PatchParameterName pname, float[] values)
        {
            fixed (float* values_ptr = values)
            {
                PatchParameterfv(pname, values_ptr);
            }
        }
        /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
        public static unsafe void PatchParameterf(PatchParameterName pname, in float values)
        {
            fixed (float* values_ptr = &values)
            {
                PatchParameterfv(pname, values_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
        public static unsafe void DeleteTransformFeedback(in int id)
        {
            int n = 1;
            fixed(int* ids_handle = &id)
            {
                DeleteTransformFeedbacks(n, ids_handle);
            }
        }
        /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
        public static unsafe void DeleteTransformFeedbacks(ReadOnlySpan<int> ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                DeleteTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
        public static unsafe void DeleteTransformFeedbacks(int[] ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                DeleteTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
        public static unsafe void DeleteTransformFeedbacks(int n, in int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                DeleteTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
        public static unsafe int GenTransformFeedback()
        {
            int id;
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            GenTransformFeedbacks(n, ids_handle);
            return id;
        }
        /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
        public static unsafe void GenTransformFeedback(out int id)
        {
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            GenTransformFeedbacks(n, ids_handle);
        }
        /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
        public static unsafe void GenTransformFeedbacks(Span<int> ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                GenTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
        public static unsafe void GenTransformFeedbacks(int[] ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                GenTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
        public static unsafe void GenTransformFeedbacks(int n, ref int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                GenTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
        public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryIndexediv(target, index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
        public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryIndexediv(target, index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
        public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetQueryIndexediv(target, index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary(ReadOnlySpan<int> shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
        {
            int count = (int)(shaders.Length);
            fixed (int* shaders_ptr = shaders)
            {
                void* binary_vptr = (void*)binary;
                ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary(int[] shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
        {
            int count = (int)(shaders.Length);
            fixed (int* shaders_ptr = shaders)
            {
                void* binary_vptr = (void*)binary;
                ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary(int count, in int shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
        {
            fixed (int* shaders_ptr = &shaders)
            {
                void* binary_vptr = (void*)binary;
                ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary<T1>(ReadOnlySpan<int> shaders, ShaderBinaryFormat binaryFormat, ReadOnlySpan<T1> binary)
            where T1 : unmanaged
        {
            int count = (int)(shaders.Length);
            fixed (int* shaders_ptr = shaders)
            {
                int length = (int)(binary.Length * sizeof(T1));
                fixed (void* binary_ptr = binary)
                {
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
                }
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary<T1>(int[] shaders, ShaderBinaryFormat binaryFormat, T1[] binary)
            where T1 : unmanaged
        {
            int count = (int)(shaders.Length);
            fixed (int* shaders_ptr = shaders)
            {
                int length = (int)(binary.Length * sizeof(T1));
                fixed (void* binary_ptr = binary)
                {
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
                }
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary<T1>(int count, in int shaders, ShaderBinaryFormat binaryFormat, in T1 binary, int length)
            where T1 : unmanaged
        {
            fixed (int* shaders_ptr = &shaders)
            fixed (void* binary_ptr = &binary)
            {
                ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
            }
        }
        /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
        public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, Span<int> range, Span<int> precision)
        {
            fixed (int* range_ptr = range)
            {
                fixed (int* precision_ptr = precision)
                {
                    GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
        public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, int[] range, int[] precision)
        {
            fixed (int* range_ptr = range)
            {
                fixed (int* precision_ptr = precision)
                {
                    GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
        public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, ref int range, ref int precision)
        {
            fixed (int* range_ptr = &range)
            fixed (int* precision_ptr = &precision)
            {
                GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary(int program, int bufSize, Span<int> length, Span<All> binaryFormat, IntPtr binary)
        {
            fixed (int* length_ptr = length)
            {
                fixed (All* binaryFormat_ptr = binaryFormat)
                {
                    void* binary_vptr = (void*)binary;
                    GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
                }
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary(int program, int bufSize, int[] length, All[] binaryFormat, IntPtr binary)
        {
            fixed (int* length_ptr = length)
            {
                fixed (All* binaryFormat_ptr = binaryFormat)
                {
                    void* binary_vptr = (void*)binary;
                    GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
                }
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary(int program, int bufSize, ref int length, ref All binaryFormat, IntPtr binary)
        {
            fixed (int* length_ptr = &length)
            fixed (All* binaryFormat_ptr = &binaryFormat)
            {
                void* binary_vptr = (void*)binary;
                GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary<T1>(int program, Span<int> length, Span<All> binaryFormat, Span<T1> binary)
            where T1 : unmanaged
        {
            fixed (int* length_ptr = length)
            {
                fixed (All* binaryFormat_ptr = binaryFormat)
                {
                    int bufSize = (int)(binary.Length * sizeof(T1));
                    fixed (void* binary_ptr = binary)
                    {
                        GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary<T1>(int program, int[] length, All[] binaryFormat, T1[] binary)
            where T1 : unmanaged
        {
            fixed (int* length_ptr = length)
            {
                fixed (All* binaryFormat_ptr = binaryFormat)
                {
                    int bufSize = (int)(binary.Length * sizeof(T1));
                    fixed (void* binary_ptr = binary)
                    {
                        GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary<T1>(int program, int bufSize, ref int length, ref All binaryFormat, ref T1 binary)
            where T1 : unmanaged
        {
            fixed (int* length_ptr = &length)
            fixed (All* binaryFormat_ptr = &binaryFormat)
            fixed (void* binary_ptr = &binary)
            {
                GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
            }
        }
        /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
        public static unsafe void ProgramBinary(int program, All binaryFormat, IntPtr binary, int length)
        {
            void* binary_vptr = (void*)binary;
            ProgramBinary(program, binaryFormat, binary_vptr, length);
        }
        /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
        public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, ReadOnlySpan<T1> binary)
            where T1 : unmanaged
        {
            int length = (int)(binary.Length * sizeof(T1));
            fixed (void* binary_ptr = binary)
            {
                ProgramBinary(program, binaryFormat, binary_ptr, length);
            }
        }
        /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
        public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, T1[] binary)
            where T1 : unmanaged
        {
            int length = (int)(binary.Length * sizeof(T1));
            fixed (void* binary_ptr = binary)
            {
                ProgramBinary(program, binaryFormat, binary_ptr, length);
            }
        }
        /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
        public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, in T1 binary, int length)
            where T1 : unmanaged
        {
            fixed (void* binary_ptr = &binary)
            {
                ProgramBinary(program, binaryFormat, binary_ptr, length);
            }
        }
        /// <inheritdoc cref="CreateShaderProgramv(ShaderType, int, byte**)"/>
        public static unsafe int CreateShaderProgram(ShaderType type, int count, byte** strings)
        {
            int returnValue;
            returnValue = CreateShaderProgramv(type, count, strings);
            return returnValue;
        }
        /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
        public static unsafe void DeleteProgramPipeline(in int pipeline)
        {
            int n = 1;
            fixed(int* pipelines_handle = &pipeline)
            {
                DeleteProgramPipelines(n, pipelines_handle);
            }
        }
        /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
        public static unsafe void DeleteProgramPipelines(ReadOnlySpan<int> pipelines)
        {
            int n = (int)(pipelines.Length);
            fixed (int* pipelines_ptr = pipelines)
            {
                DeleteProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
        public static unsafe void DeleteProgramPipelines(int[] pipelines)
        {
            int n = (int)(pipelines.Length);
            fixed (int* pipelines_ptr = pipelines)
            {
                DeleteProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
        public static unsafe void DeleteProgramPipelines(int n, in int pipelines)
        {
            fixed (int* pipelines_ptr = &pipelines)
            {
                DeleteProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
        public static unsafe int GenProgramPipeline()
        {
            int pipeline;
            int n = 1;
            Unsafe.SkipInit(out pipeline);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
            GenProgramPipelines(n, pipelines_handle);
            return pipeline;
        }
        /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
        public static unsafe void GenProgramPipeline(out int pipeline)
        {
            int n = 1;
            Unsafe.SkipInit(out pipeline);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
            GenProgramPipelines(n, pipelines_handle);
        }
        /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
        public static unsafe void GenProgramPipelines(Span<int> pipelines)
        {
            int n = (int)(pipelines.Length);
            fixed (int* pipelines_ptr = pipelines)
            {
                GenProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
        public static unsafe void GenProgramPipelines(int[] pipelines)
        {
            int n = (int)(pipelines.Length);
            fixed (int* pipelines_ptr = pipelines)
            {
                GenProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
        public static unsafe void GenProgramPipelines(int n, ref int pipelines)
        {
            fixed (int* pipelines_ptr = &pipelines)
            {
                GenProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
        public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramPipelineiv(pipeline, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
        public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramPipelineiv(pipeline, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
        public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetProgramPipelineiv(pipeline, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform1iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform1i(int program, int location, int count, in int value)
        {
            fixed (int* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform1iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform1fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform1f(int program, int location, int count, in float value)
        {
            fixed (float* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform1fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform1dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform1d(int program, int location, int count, in double value)
        {
            fixed (double* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform1dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform1uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform1ui(int program, int location, int count, in uint value)
        {
            fixed (uint* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform1uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform2i(int program, int location, int count, in Vector2i value)
        {
            fixed (Vector2i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform2iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform2i(int program, int location, int count, ReadOnlySpan<Vector2i> value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform2iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform2i(int program, int location, int count, Vector2i[] value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform2iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, in Vector2 value)
        {
            fixed (Vector2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, ReadOnlySpan<Vector2> value)
        {
            fixed (Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, Vector2[] value)
        {
            fixed (Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, in System.Numerics.Vector2 value)
        {
            fixed (System.Numerics.Vector2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
        {
            fixed (System.Numerics.Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, System.Numerics.Vector2[] value)
        {
            fixed (System.Numerics.Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform2d(int program, int location, int count, in Vector2d value)
        {
            fixed (Vector2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform2dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform2d(int program, int location, int count, ReadOnlySpan<Vector2d> value)
        {
            fixed (Vector2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform2dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform2d(int program, int location, int count, Vector2d[] value)
        {
            fixed (Vector2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform2dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform2ui(int program, int location, int count, in Vector2i value)
        {
            fixed (Vector2i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform2uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform2ui(int program, int location, int count, ReadOnlySpan<Vector2i> value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform2uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform2ui(int program, int location, int count, Vector2i[] value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform2uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform3i(int program, int location, int count, in Vector3i value)
        {
            fixed (Vector3i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform3iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform3i(int program, int location, int count, ReadOnlySpan<Vector3i> value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform3iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform3i(int program, int location, int count, Vector3i[] value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform3iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, in Vector3 value)
        {
            fixed (Vector3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, ReadOnlySpan<Vector3> value)
        {
            fixed (Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, Vector3[] value)
        {
            fixed (Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, in System.Numerics.Vector3 value)
        {
            fixed (System.Numerics.Vector3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
        {
            fixed (System.Numerics.Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, System.Numerics.Vector3[] value)
        {
            fixed (System.Numerics.Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform3d(int program, int location, int count, in Vector3d value)
        {
            fixed (Vector3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform3dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform3d(int program, int location, int count, ReadOnlySpan<Vector3d> value)
        {
            fixed (Vector3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform3dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform3d(int program, int location, int count, Vector3d[] value)
        {
            fixed (Vector3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform3dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform3ui(int program, int location, int count, in Vector3i value)
        {
            fixed (Vector3i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform3uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform3ui(int program, int location, int count, ReadOnlySpan<Vector3i> value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform3uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform3ui(int program, int location, int count, Vector3i[] value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform3uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform4i(int program, int location, int count, in Vector4i value)
        {
            fixed (Vector4i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform4iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform4i(int program, int location, int count, ReadOnlySpan<Vector4i> value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform4iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform4i(int program, int location, int count, Vector4i[] value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform4iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, in Vector4 value)
        {
            fixed (Vector4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, ReadOnlySpan<Vector4> value)
        {
            fixed (Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, Vector4[] value)
        {
            fixed (Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, in System.Numerics.Vector4 value)
        {
            fixed (System.Numerics.Vector4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
        {
            fixed (System.Numerics.Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, System.Numerics.Vector4[] value)
        {
            fixed (System.Numerics.Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform4d(int program, int location, int count, in Vector4d value)
        {
            fixed (Vector4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform4dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform4d(int program, int location, int count, ReadOnlySpan<Vector4d> value)
        {
            fixed (Vector4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform4dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform4d(int program, int location, int count, Vector4d[] value)
        {
            fixed (Vector4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform4dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform4ui(int program, int location, int count, in Vector4i value)
        {
            fixed (Vector4i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform4uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform4ui(int program, int location, int count, ReadOnlySpan<Vector4i> value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform4uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform4ui(int program, int location, int count, Vector4i[] value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform4uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, in Matrix2 value)
        {
            fixed (Matrix2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2> value)
        {
            fixed (Matrix2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, Matrix2[] value)
        {
            fixed (Matrix2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, in Matrix3 value)
        {
            fixed (Matrix3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3> value)
        {
            fixed (Matrix3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, Matrix3[] value)
        {
            fixed (Matrix3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, in Matrix4 value)
        {
            fixed (Matrix4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4> value)
        {
            fixed (Matrix4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, Matrix4[] value)
        {
            fixed (Matrix4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, in System.Numerics.Matrix4x4 value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix4x4> value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, System.Numerics.Matrix4x4[] value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, in Matrix2d value)
        {
            fixed (Matrix2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2d> value)
        {
            fixed (Matrix2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, Matrix2d[] value)
        {
            fixed (Matrix2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, in Matrix3d value)
        {
            fixed (Matrix3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3d> value)
        {
            fixed (Matrix3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, Matrix3d[] value)
        {
            fixed (Matrix3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, in Matrix4d value)
        {
            fixed (Matrix4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4d> value)
        {
            fixed (Matrix4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, Matrix4d[] value)
        {
            fixed (Matrix4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, in Matrix2x3 value)
        {
            fixed (Matrix2x3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3> value)
        {
            fixed (Matrix2x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, Matrix2x3[] value)
        {
            fixed (Matrix2x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, in Matrix3x2 value)
        {
            fixed (Matrix3x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2> value)
        {
            fixed (Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, Matrix3x2[] value)
        {
            fixed (Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, in System.Numerics.Matrix3x2 value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix3x2> value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, System.Numerics.Matrix3x2[] value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, in Matrix2x4 value)
        {
            fixed (Matrix2x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4> value)
        {
            fixed (Matrix2x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, Matrix2x4[] value)
        {
            fixed (Matrix2x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, in Matrix4x2 value)
        {
            fixed (Matrix4x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2> value)
        {
            fixed (Matrix4x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, Matrix4x2[] value)
        {
            fixed (Matrix4x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, in Matrix3x4 value)
        {
            fixed (Matrix3x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4> value)
        {
            fixed (Matrix3x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, Matrix3x4[] value)
        {
            fixed (Matrix3x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, in Matrix4x3 value)
        {
            fixed (Matrix4x3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3> value)
        {
            fixed (Matrix4x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, Matrix4x3[] value)
        {
            fixed (Matrix4x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, in Matrix2x3d value)
        {
            fixed (Matrix2x3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3d> value)
        {
            fixed (Matrix2x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, Matrix2x3d[] value)
        {
            fixed (Matrix2x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, in Matrix3x2d value)
        {
            fixed (Matrix3x2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2d> value)
        {
            fixed (Matrix3x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, Matrix3x2d[] value)
        {
            fixed (Matrix3x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, in Matrix2x4d value)
        {
            fixed (Matrix2x4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4d> value)
        {
            fixed (Matrix2x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, Matrix2x4d[] value)
        {
            fixed (Matrix2x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, in Matrix4x2d value)
        {
            fixed (Matrix4x2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2d> value)
        {
            fixed (Matrix4x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, Matrix4x2d[] value)
        {
            fixed (Matrix4x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, in Matrix3x4d value)
        {
            fixed (Matrix3x4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4d> value)
        {
            fixed (Matrix3x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, Matrix3x4d[] value)
        {
            fixed (Matrix3x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, in Matrix4x3d value)
        {
            fixed (Matrix4x3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3d> value)
        {
            fixed (Matrix4x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, Matrix4x3d[] value)
        {
            fixed (Matrix4x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, Span<int> length)
        {
            string infoLog;
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, Span<int> length, out string infoLog)
        {
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, int[] length)
        {
            string infoLog;
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, int[] length, out string infoLog)
        {
            fixed (int* length_ptr = length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, ref int length)
        {
            string infoLog;
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, ref int length, out string infoLog)
        {
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribL1dv(uint, double*)"/>
        public static unsafe void VertexAttribL1d(uint index, in double v)
        {
            fixed (double* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttribL1dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribL2dv(uint, double*)"/>
        public static unsafe void VertexAttribL2d(uint index, in Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttribL2dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribL3dv(uint, double*)"/>
        public static unsafe void VertexAttribL3d(uint index, in Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttribL3dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribL4dv(uint, double*)"/>
        public static unsafe void VertexAttribL4d(uint index, in Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttribL4dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribLPointer(uint, int, VertexAttribLType, int, void*)"/>
        public static unsafe void VertexAttribLPointer(uint index, int size, VertexAttribLType type, int stride, nint offset)
        {
            void* pointer = (void*)offset;
            VertexAttribLPointer(index, size, type, stride, pointer);
        }
        /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
        public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetVertexAttribLdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
        public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetVertexAttribLdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
        public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                GetVertexAttribLdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
        public static unsafe void ViewportArray(uint first, int count, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v)
            {
                ViewportArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
        public static unsafe void ViewportArray(uint first, int count, float[] v)
        {
            fixed (float* v_ptr = v)
            {
                ViewportArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
        public static unsafe void ViewportArray(uint first, int count, in float v)
        {
            fixed (float* v_ptr = &v)
            {
                ViewportArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
        public static unsafe void ViewportIndexedf(uint index, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v)
            {
                ViewportIndexedfv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
        public static unsafe void ViewportIndexedf(uint index, float[] v)
        {
            fixed (float* v_ptr = v)
            {
                ViewportIndexedfv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
        public static unsafe void ViewportIndexedf(uint index, in float v)
        {
            fixed (float* v_ptr = &v)
            {
                ViewportIndexedfv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
        public static unsafe void ScissorArray(uint first, int count, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v)
            {
                ScissorArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
        public static unsafe void ScissorArray(uint first, int count, int[] v)
        {
            fixed (int* v_ptr = v)
            {
                ScissorArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
        public static unsafe void ScissorArray(uint first, int count, in int v)
        {
            fixed (int* v_ptr = &v)
            {
                ScissorArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
        public static unsafe void ScissorIndexed(uint index, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v)
            {
                ScissorIndexedv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
        public static unsafe void ScissorIndexed(uint index, int[] v)
        {
            fixed (int* v_ptr = v)
            {
                ScissorIndexedv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
        public static unsafe void ScissorIndexed(uint index, in int v)
        {
            fixed (int* v_ptr = &v)
            {
                ScissorIndexedv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
        public static unsafe void DepthRangeArray(uint first, int count, ReadOnlySpan<double> v)
        {
            fixed (double* v_ptr = v)
            {
                DepthRangeArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
        public static unsafe void DepthRangeArray(uint first, int count, double[] v)
        {
            fixed (double* v_ptr = v)
            {
                DepthRangeArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
        public static unsafe void DepthRangeArray(uint first, int count, in double v)
        {
            fixed (double* v_ptr = &v)
            {
                DepthRangeArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
        public static unsafe void GetFloat(GetPName target, uint index, Span<float> data)
        {
            fixed (float* data_ptr = data)
            {
                GetFloati_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
        public static unsafe void GetFloat(GetPName target, uint index, float[] data)
        {
            fixed (float* data_ptr = data)
            {
                GetFloati_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
        public static unsafe void GetFloat(GetPName target, uint index, ref float data)
        {
            fixed (float* data_ptr = &data)
            {
                GetFloati_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
        public static unsafe void GetDouble(GetPName target, uint index, Span<double> data)
        {
            fixed (double* data_ptr = data)
            {
                GetDoublei_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
        public static unsafe void GetDouble(GetPName target, uint index, double[] data)
        {
            fixed (double* data_ptr = data)
            {
                GetDoublei_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
        public static unsafe void GetDouble(GetPName target, uint index, ref double data)
        {
            fixed (double* data_ptr = &data)
            {
                GetDoublei_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="DrawElementsInstancedBaseInstance(PrimitiveType, int, DrawElementsType, void*, int, uint)"/>
        public static unsafe void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, uint baseinstance)
        {
            void* indices = (void*)offset;
            DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
        }
        /// <inheritdoc cref="DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType, int, DrawElementsType, void*, int, int, uint)"/>
        public static unsafe void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, int basevertex, uint baseinstance)
        {
            void* indices = (void*)offset;
            DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }
        /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
        public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, Span<int> parameters)
        {
            int count = (int)(parameters.Length);
            fixed (int* parameters_ptr = parameters)
            {
                GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
        public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int[] parameters)
        {
            int count = (int)(parameters.Length);
            fixed (int* parameters_ptr = parameters)
            {
                GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
        public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
        public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
        public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
        public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearBufferData(target, internalformat, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearBufferData(target, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearBufferData(target, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearBufferData(target, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearBufferSubData(target, internalformat, offset, size, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferSubData<T1>(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferSubData<T1>(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferSubData<T1>(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetFramebufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetFramebufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetFramebufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
        public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, Span<long> parameters)
        {
            int count = (int)(parameters.Length);
            fixed (long* parameters_ptr = parameters)
            {
                GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
        public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, long[] parameters)
        {
            int count = (int)(parameters.Length);
            fixed (long* parameters_ptr = parameters)
            {
                GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
        public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters)
            {
                GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
        public static unsafe void InvalidateFramebuffer(FramebufferTarget target, ReadOnlySpan<InvalidateFramebufferAttachment> attachments)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateFramebuffer(target, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
        public static unsafe void InvalidateFramebuffer(FramebufferTarget target, InvalidateFramebufferAttachment[] attachments)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateFramebuffer(target, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
        public static unsafe void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, in InvalidateFramebufferAttachment attachments)
        {
            fixed (InvalidateFramebufferAttachment* attachments_ptr = &attachments)
            {
                InvalidateFramebuffer(target, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, ReadOnlySpan<InvalidateFramebufferAttachment> attachments, int x, int y, int width, int height)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, InvalidateFramebufferAttachment[] attachments, int x, int y, int width, int height)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, in InvalidateFramebufferAttachment attachments, int x, int y, int width, int height)
        {
            fixed (InvalidateFramebufferAttachment* attachments_ptr = &attachments)
            {
                InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
        public static unsafe void MultiDrawArraysIndirect(PrimitiveType mode, IntPtr indirect, int drawcount, int stride)
        {
            void* indirect_vptr = (void*)indirect;
            MultiDrawArraysIndirect(mode, indirect_vptr, drawcount, stride);
        }
        /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
        public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, ReadOnlySpan<T1> indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
        public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, T1[] indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
        public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, in T1 indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
        public static unsafe void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawcount, int stride)
        {
            void* indirect_vptr = (void*)indirect;
            MultiDrawElementsIndirect(mode, type, indirect_vptr, drawcount, stride);
        }
        /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
        public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
        public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, T1[] indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
        public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
        public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
        public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
        public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramResourceIndex(int, ProgramInterface, byte*)"/>
        public static unsafe uint GetProgramResourceIndex(int program, ProgramInterface programInterface, string name)
        {
            uint returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetProgramResourceIndex(program, programInterface, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
        public static unsafe string GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, Span<int> length)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
        public static unsafe void GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, Span<int> length, out string name)
        {
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
        public static unsafe string GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, int[] length)
        {
            string name;
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
        public static unsafe void GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, int[] length, out string name)
        {
            fixed (int* length_ptr = length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
        public static unsafe string GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, ref int length)
        {
            string name;
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
        public static unsafe void GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, ref int length, out string name)
        {
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
        public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, ReadOnlySpan<ProgramResourceProperty> props, Span<int> length, Span<int> parameters)
        {
            int propCount = (int)(props.Length);
            fixed (ProgramResourceProperty* props_ptr = props)
            {
                fixed (int* length_ptr = length)
                {
                    int count = (int)(parameters.Length);
                    fixed (int* parameters_ptr = parameters)
                    {
                        GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
        public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, ProgramResourceProperty[] props, int[] length, int[] parameters)
        {
            int propCount = (int)(props.Length);
            fixed (ProgramResourceProperty* props_ptr = props)
            {
                fixed (int* length_ptr = length)
                {
                    int count = (int)(parameters.Length);
                    fixed (int* parameters_ptr = parameters)
                    {
                        GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
        public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, int propCount, in ProgramResourceProperty props, int count, ref int length, ref int parameters)
        {
            fixed (ProgramResourceProperty* props_ptr = &props)
            fixed (int* length_ptr = &length)
            fixed (int* parameters_ptr = &parameters)
            {
                GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramResourceLocation(int, ProgramInterface, byte*)"/>
        public static unsafe int GetProgramResourceLocation(int program, ProgramInterface programInterface, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetProgramResourceLocation(program, programInterface, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetProgramResourceLocationIndex(int, ProgramInterface, byte*)"/>
        public static unsafe int GetProgramResourceLocationIndex(int program, ProgramInterface programInterface, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetProgramResourceLocationIndex(program, programInterface, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
        public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, ReadOnlySpan<uint> ids, bool enabled)
        {
            int count = (int)(ids.Length);
            fixed (uint* ids_ptr = ids)
            {
                DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
            }
        }
        /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
        public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, uint[] ids, bool enabled)
        {
            int count = (int)(ids.Length);
            fixed (uint* ids_ptr = ids)
            {
                DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
            }
        }
        /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
        public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, in uint ids, bool enabled)
        {
            fixed (uint* ids_ptr = &ids)
            {
                DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
            }
        }
        /// <inheritdoc cref="DebugMessageInsert(DebugSource, DebugType, uint, DebugSeverity, int, byte*)"/>
        public static unsafe void DebugMessageInsert(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
        {
            byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
            DebugMessageInsert(source, type, id, severity, length, buf_ptr);
            Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
        }
        /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
        public static unsafe void DebugMessageCallback(GLDebugProc callback, IntPtr userParam)
        {
            void* userParam_vptr = (void*)userParam;
            IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
            DebugMessageCallback(callback_ptr, userParam_vptr);
        }
        /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
        public static unsafe void DebugMessageCallback<T1>(GLDebugProc callback, in T1 userParam)
            where T1 : unmanaged
        {
            fixed (void* userParam_ptr = &userParam)
            {
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallback(callback_ptr, userParam_ptr);
            }
        }
        /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
        public static unsafe uint GetDebugMessageLog(uint count, int bufSize, Span<DebugSource> sources, Span<DebugType> types, Span<uint> ids, Span<DebugSeverity> severities, Span<int> lengths, out string messageLog)
        {
            uint returnValue;
            fixed (DebugSource* sources_ptr = sources)
            {
                fixed (DebugType* types_ptr = types)
                {
                    fixed (uint* ids_ptr = ids)
                    {
                        fixed (DebugSeverity* severities_ptr = severities)
                        {
                            fixed (int* lengths_ptr = lengths)
                            {
                                var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                            }
                        }
                    }
                }
            }
            return returnValue;
        }
        /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
        public static unsafe uint GetDebugMessageLog(uint count, int bufSize, DebugSource[] sources, DebugType[] types, uint[] ids, DebugSeverity[] severities, int[] lengths, out string messageLog)
        {
            uint returnValue;
            fixed (DebugSource* sources_ptr = sources)
            {
                fixed (DebugType* types_ptr = types)
                {
                    fixed (uint* ids_ptr = ids)
                    {
                        fixed (DebugSeverity* severities_ptr = severities)
                        {
                            fixed (int* lengths_ptr = lengths)
                            {
                                var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                            }
                        }
                    }
                }
            }
            return returnValue;
        }
        /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
        public static unsafe uint GetDebugMessageLog(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, out string messageLog)
        {
            uint returnValue;
            fixed (DebugSource* sources_ptr = &sources)
            fixed (DebugType* types_ptr = &types)
            fixed (uint* ids_ptr = &ids)
            fixed (DebugSeverity* severities_ptr = &severities)
            fixed (int* lengths_ptr = &lengths)
            {
                var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
            }
            return returnValue;
        }
        /// <inheritdoc cref="PushDebugGroup(DebugSource, uint, int, byte*)"/>
        public static unsafe void PushDebugGroup(DebugSource source, uint id, int length, string message)
        {
            byte* message_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(message);
            PushDebugGroup(source, id, length, message_ptr);
            Marshal.FreeCoTaskMem((IntPtr)message_ptr);
        }
        /// <inheritdoc cref="ObjectLabel(ObjectIdentifier, uint, int, byte*)"/>
        public static unsafe void ObjectLabel(ObjectIdentifier identifier, uint name, int length, string label)
        {
            byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
            ObjectLabel(identifier, name, length, label_ptr);
            Marshal.FreeCoTaskMem((IntPtr)label_ptr);
        }
        /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
        public static unsafe string GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, Span<int> length)
        {
            string label;
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
        public static unsafe void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, Span<int> length, out string label)
        {
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
        public static unsafe string GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, int[] length)
        {
            string label;
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
        public static unsafe void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, int[] length, out string label)
        {
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
        public static unsafe string GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, ref int length)
        {
            string label;
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
        public static unsafe void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, ref int length, out string label)
        {
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
        public static unsafe void ObjectPtrLabel(IntPtr ptr, int length, string label)
        {
            byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
            void* ptr_vptr = (void*)ptr;
            ObjectPtrLabel(ptr_vptr, length, label_ptr);
            Marshal.FreeCoTaskMem((IntPtr)label_ptr);
        }
        /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
        public static unsafe void ObjectPtrLabel<T1>(in T1 ptr, int length, string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                ObjectPtrLabel(ptr_ptr, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel(IntPtr ptr, int bufSize, Span<int> length)
        {
            string label;
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                void* ptr_vptr = (void*)ptr;
                GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, Span<int> length, out string label)
        {
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                void* ptr_vptr = (void*)ptr;
                GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel(IntPtr ptr, int bufSize, int[] length)
        {
            string label;
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                void* ptr_vptr = (void*)ptr;
                GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, int[] length, out string label)
        {
            fixed (int* length_ptr = length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                void* ptr_vptr = (void*)ptr;
                GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel(IntPtr ptr, int bufSize, ref int length)
        {
            string label;
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                void* ptr_vptr = (void*)ptr;
                GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, ref int length, out string label)
        {
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                void* ptr_vptr = (void*)ptr;
                GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, Span<int> length)
            where T1 : unmanaged
        {
            string label;
            fixed (void* ptr_ptr = &ptr)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, Span<int> length, out string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, int[] length)
            where T1 : unmanaged
        {
            string label;
            fixed (void* ptr_ptr = &ptr)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, int[] length, out string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, ref int length)
            where T1 : unmanaged
        {
            string label;
            fixed (void* ptr_ptr = &ptr)
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, ref int length, out string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr)
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
        public static unsafe void BufferStorage(BufferStorageTarget target, nint size, IntPtr data, BufferStorageMask flags)
        {
            void* data_vptr = (void*)data;
            BufferStorage(target, size, data_vptr, flags);
        }
        /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
        public static unsafe void BufferStorage<T1>(BufferStorageTarget target, ReadOnlySpan<T1> data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                BufferStorage(target, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
        public static unsafe void BufferStorage<T1>(BufferStorageTarget target, T1[] data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                BufferStorage(target, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
        public static unsafe void BufferStorage<T1>(BufferStorageTarget target, nint size, in T1 data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                BufferStorage(target, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexImage(int texture, int level, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearTexImage(texture, level, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearTexImage(texture, level, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearTexImage(texture, level, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearTexImage(texture, level, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="BindBuffersBase(BufferTargetARB, uint, int, int*)"/>
        public static unsafe void BindBuffersBase(BufferTargetARB target, uint first, ReadOnlySpan<int> buffers)
        {
            int count = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                BindBuffersBase(target, first, count, buffers_ptr);
            }
        }
        /// <inheritdoc cref="BindBuffersBase(BufferTargetARB, uint, int, int*)"/>
        public static unsafe void BindBuffersBase(BufferTargetARB target, uint first, int[] buffers)
        {
            int count = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                BindBuffersBase(target, first, count, buffers_ptr);
            }
        }
        /// <inheritdoc cref="BindBuffersBase(BufferTargetARB, uint, int, int*)"/>
        public static unsafe void BindBuffersBase(BufferTargetARB target, uint first, int count, in int buffers)
        {
            fixed (int* buffers_ptr = &buffers)
            {
                BindBuffersBase(target, first, count, buffers_ptr);
            }
        }
        /// <inheritdoc cref="BindBuffersRange(BufferTargetARB, uint, int, int*, IntPtr*, nint*)"/>
        public static unsafe void BindBuffersRange(BufferTargetARB target, uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<nint> sizes)
        {
            fixed (int* buffers_ptr = buffers)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (nint* sizes_ptr = sizes)
                    {
                        BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="BindBuffersRange(BufferTargetARB, uint, int, int*, IntPtr*, nint*)"/>
        public static unsafe void BindBuffersRange(BufferTargetARB target, uint first, int count, int[] buffers, IntPtr[] offsets, nint[] sizes)
        {
            fixed (int* buffers_ptr = buffers)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (nint* sizes_ptr = sizes)
                    {
                        BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="BindBuffersRange(BufferTargetARB, uint, int, int*, IntPtr*, nint*)"/>
        public static unsafe void BindBuffersRange(BufferTargetARB target, uint first, int count, in int buffers, in IntPtr offsets, in nint sizes)
        {
            fixed (int* buffers_ptr = &buffers)
            fixed (IntPtr* offsets_ptr = &offsets)
            fixed (nint* sizes_ptr = &sizes)
            {
                BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
            }
        }
        /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
        public static unsafe void BindTextures(uint first, ReadOnlySpan<int> textures)
        {
            int count = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                BindTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
        public static unsafe void BindTextures(uint first, int[] textures)
        {
            int count = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                BindTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
        public static unsafe void BindTextures(uint first, int count, in int textures)
        {
            fixed (int* textures_ptr = &textures)
            {
                BindTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
        public static unsafe void BindSamplers(uint first, ReadOnlySpan<int> samplers)
        {
            int count = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                BindSamplers(first, count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
        public static unsafe void BindSamplers(uint first, int[] samplers)
        {
            int count = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                BindSamplers(first, count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
        public static unsafe void BindSamplers(uint first, int count, in int samplers)
        {
            fixed (int* samplers_ptr = &samplers)
            {
                BindSamplers(first, count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
        public static unsafe void BindImageTextures(uint first, ReadOnlySpan<int> textures)
        {
            int count = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                BindImageTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
        public static unsafe void BindImageTextures(uint first, int[] textures)
        {
            int count = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                BindImageTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
        public static unsafe void BindImageTextures(uint first, int count, in int textures)
        {
            fixed (int* textures_ptr = &textures)
            {
                BindImageTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void BindVertexBuffers(uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<int> strides)
        {
            fixed (int* buffers_ptr = buffers)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (int* strides_ptr = strides)
                    {
                        BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void BindVertexBuffers(uint first, int count, int[] buffers, IntPtr[] offsets, int[] strides)
        {
            fixed (int* buffers_ptr = buffers)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (int* strides_ptr = strides)
                    {
                        BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void BindVertexBuffers(uint first, int count, in int buffers, in IntPtr offsets, in int strides)
        {
            fixed (int* buffers_ptr = &buffers)
            fixed (IntPtr* offsets_ptr = &offsets)
            fixed (int* strides_ptr = &strides)
            {
                BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
            }
        }
        /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
        public static unsafe int CreateTransformFeedback()
        {
            int id;
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            CreateTransformFeedbacks(n, ids_handle);
            return id;
        }
        /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
        public static unsafe void CreateTransformFeedback(out int id)
        {
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            CreateTransformFeedbacks(n, ids_handle);
        }
        /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
        public static unsafe void CreateTransformFeedbacks(Span<int> ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                CreateTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
        public static unsafe void CreateTransformFeedbacks(int[] ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                CreateTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
        public static unsafe void CreateTransformFeedbacks(int n, ref int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                CreateTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbackiv(int, TransformFeedbackPName, int*)"/>
        public static unsafe void GetTransformFeedbacki(int xfb, TransformFeedbackPName pname, ref int param)
        {
            fixed (int* param_ptr = &param)
            {
                GetTransformFeedbackiv(xfb, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbacki_v(int, TransformFeedbackPName, uint, int*)"/>
        public static unsafe void GetTransformFeedback(int xfb, TransformFeedbackPName pname, uint index, ref int param)
        {
            fixed (int* param_ptr = &param)
            {
                GetTransformFeedbacki_v(xfb, pname, index, param_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbacki64_v(int, TransformFeedbackPName, uint, long*)"/>
        public static unsafe void GetTransformFeedbacki64_(int xfb, TransformFeedbackPName pname, uint index, ref long param)
        {
            fixed (long* param_ptr = &param)
            {
                GetTransformFeedbacki64_v(xfb, pname, index, param_ptr);
            }
        }
        /// <inheritdoc cref="CreateBuffers(int, int*)"/>
        public static unsafe int CreateBuffer()
        {
            int buffer;
            int n = 1;
            Unsafe.SkipInit(out buffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* buffers_handle = (int*)Unsafe.AsPointer(ref buffer);
            CreateBuffers(n, buffers_handle);
            return buffer;
        }
        /// <inheritdoc cref="CreateBuffers(int, int*)"/>
        public static unsafe void CreateBuffer(out int buffer)
        {
            int n = 1;
            Unsafe.SkipInit(out buffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* buffers_handle = (int*)Unsafe.AsPointer(ref buffer);
            CreateBuffers(n, buffers_handle);
        }
        /// <inheritdoc cref="CreateBuffers(int, int*)"/>
        public static unsafe void CreateBuffers(Span<int> buffers)
        {
            int n = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                CreateBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateBuffers(int, int*)"/>
        public static unsafe void CreateBuffers(int[] buffers)
        {
            int n = (int)(buffers.Length);
            fixed (int* buffers_ptr = buffers)
            {
                CreateBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateBuffers(int, int*)"/>
        public static unsafe void CreateBuffers(int n, ref int buffers)
        {
            fixed (int* buffers_ptr = &buffers)
            {
                CreateBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
        public static unsafe void NamedBufferStorage(int buffer, nint size, IntPtr data, BufferStorageMask flags)
        {
            void* data_vptr = (void*)data;
            NamedBufferStorage(buffer, size, data_vptr, flags);
        }
        /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
        public static unsafe void NamedBufferStorage<T1>(int buffer, ReadOnlySpan<T1> data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                NamedBufferStorage(buffer, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
        public static unsafe void NamedBufferStorage<T1>(int buffer, T1[] data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                NamedBufferStorage(buffer, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
        public static unsafe void NamedBufferStorage<T1>(int buffer, nint size, in T1 data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                NamedBufferStorage(buffer, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
        public static unsafe void NamedBufferData(int buffer, nint size, IntPtr data, VertexBufferObjectUsage usage)
        {
            void* data_vptr = (void*)data;
            NamedBufferData(buffer, size, data_vptr, usage);
        }
        /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
        public static unsafe void NamedBufferData<T1>(int buffer, ReadOnlySpan<T1> data, VertexBufferObjectUsage usage)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                NamedBufferData(buffer, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
        public static unsafe void NamedBufferData<T1>(int buffer, T1[] data, VertexBufferObjectUsage usage)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                NamedBufferData(buffer, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
        public static unsafe void NamedBufferData<T1>(int buffer, nint size, in T1 data, VertexBufferObjectUsage usage)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                NamedBufferData(buffer, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void NamedBufferSubData(int buffer, IntPtr offset, nint size, IntPtr data)
        {
            void* data_vptr = (void*)data;
            NamedBufferSubData(buffer, offset, size, data_vptr);
        }
        /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                NamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, T1[] data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                NamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                NamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferData(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearNamedBufferData(buffer, internalformat, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferSubData(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferParameteriv(int, BufferPNameARB, int*)"/>
        public static unsafe void GetNamedBufferParameteri(int buffer, BufferPNameARB pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetNamedBufferParameteriv(buffer, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferParameteri64v(int, BufferPNameARB, long*)"/>
        public static unsafe void GetNamedBufferParameteri64(int buffer, BufferPNameARB pname, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters)
            {
                GetNamedBufferParameteri64v(buffer, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferPointerv(int, BufferPointerNameARB, void**)"/>
        public static unsafe void GetNamedBufferPointer(int buffer, BufferPointerNameARB pname, void** parameters)
        {
            GetNamedBufferPointerv(buffer, pname, parameters);
        }
        /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void GetNamedBufferSubData(int buffer, IntPtr offset, nint size, IntPtr data)
        {
            void* data_vptr = (void*)data;
            GetNamedBufferSubData(buffer, offset, size, data_vptr);
        }
        /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, Span<T1> data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                GetNamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, T1[] data)
            where T1 : unmanaged
        {
            nint size = (nint)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                GetNamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                GetNamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
        public static unsafe int CreateFramebuffer()
        {
            int framebuffer;
            int n = 1;
            Unsafe.SkipInit(out framebuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
            CreateFramebuffers(n, framebuffers_handle);
            return framebuffer;
        }
        /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
        public static unsafe void CreateFramebuffer(out int framebuffer)
        {
            int n = 1;
            Unsafe.SkipInit(out framebuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
            CreateFramebuffers(n, framebuffers_handle);
        }
        /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
        public static unsafe void CreateFramebuffers(Span<int> framebuffers)
        {
            int n = (int)(framebuffers.Length);
            fixed (int* framebuffers_ptr = framebuffers)
            {
                CreateFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
        public static unsafe void CreateFramebuffers(int[] framebuffers)
        {
            int n = (int)(framebuffers.Length);
            fixed (int* framebuffers_ptr = framebuffers)
            {
                CreateFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
        public static unsafe void CreateFramebuffers(int n, ref int framebuffers)
        {
            fixed (int* framebuffers_ptr = &framebuffers)
            {
                CreateFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
        public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, ReadOnlySpan<ColorBuffer> bufs)
        {
            int n = (int)(bufs.Length);
            fixed (ColorBuffer* bufs_ptr = bufs)
            {
                NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
        public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, ColorBuffer[] bufs)
        {
            int n = (int)(bufs.Length);
            fixed (ColorBuffer* bufs_ptr = bufs)
            {
                NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
        public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, int n, in ColorBuffer bufs)
        {
            fixed (ColorBuffer* bufs_ptr = &bufs)
            {
                NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
        public static unsafe void InvalidateNamedFramebufferData(int framebuffer, ReadOnlySpan<FramebufferAttachment> attachments)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (FramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
        public static unsafe void InvalidateNamedFramebufferData(int framebuffer, FramebufferAttachment[] attachments)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (FramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
        public static unsafe void InvalidateNamedFramebufferData(int framebuffer, int numAttachments, in FramebufferAttachment attachments)
        {
            fixed (FramebufferAttachment* attachments_ptr = &attachments)
            {
                InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, ReadOnlySpan<FramebufferAttachment> attachments, int x, int y, int width, int height)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (FramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, FramebufferAttachment[] attachments, int x, int y, int width, int height)
        {
            int numAttachments = (int)(attachments.Length);
            fixed (FramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, int numAttachments, in FramebufferAttachment attachments, int x, int y, int width, int height)
        {
            fixed (FramebufferAttachment* attachments_ptr = &attachments)
            {
                InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
        public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<int> value)
        {
            fixed (int* value_ptr = value)
            {
                ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
        public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, int[] value)
        {
            fixed (int* value_ptr = value)
            {
                ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
        public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, in int value)
        {
            fixed (int* value_ptr = &value)
            {
                ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
        public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
        public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
        public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, in uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
        public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<float> value)
        {
            fixed (float* value_ptr = value)
            {
                ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
        public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, float[] value)
        {
            fixed (float* value_ptr = value)
            {
                ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
        public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, in float value)
        {
            fixed (float* value_ptr = &value)
            {
                ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferfi(int, Buffer, int, float, int)"/>
        public static unsafe void ClearNamedFramebuffer(int framebuffer, Buffer buffer, int drawbuffer, float depth, int stencil)
        {
            ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
        }
        /// <inheritdoc cref="GetNamedFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
        public static unsafe void GetNamedFramebufferParameteri(int framebuffer, GetFramebufferParameter pname, ref int param)
        {
            fixed (int* param_ptr = &param)
            {
                GetNamedFramebufferParameteriv(framebuffer, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedFramebufferAttachmentParameteriv(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetNamedFramebufferAttachmentParameteri(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
        public static unsafe int CreateRenderbuffer()
        {
            int renderbuffer;
            int n = 1;
            Unsafe.SkipInit(out renderbuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
            CreateRenderbuffers(n, renderbuffers_handle);
            return renderbuffer;
        }
        /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
        public static unsafe void CreateRenderbuffer(out int renderbuffer)
        {
            int n = 1;
            Unsafe.SkipInit(out renderbuffer);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
            CreateRenderbuffers(n, renderbuffers_handle);
        }
        /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
        public static unsafe void CreateRenderbuffers(Span<int> renderbuffers)
        {
            int n = (int)(renderbuffers.Length);
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                CreateRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
        public static unsafe void CreateRenderbuffers(int[] renderbuffers)
        {
            int n = (int)(renderbuffers.Length);
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                CreateRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
        public static unsafe void CreateRenderbuffers(int n, ref int renderbuffers)
        {
            fixed (int* renderbuffers_ptr = &renderbuffers)
            {
                CreateRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedRenderbufferParameteriv(int, RenderbufferParameterName, int*)"/>
        public static unsafe void GetNamedRenderbufferParameteri(int renderbuffer, RenderbufferParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetNamedRenderbufferParameteriv(renderbuffer, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
        public static unsafe int CreateTexture(TextureTarget target)
        {
            int texture;
            int n = 1;
            Unsafe.SkipInit(out texture);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* textures_handle = (int*)Unsafe.AsPointer(ref texture);
            CreateTextures(target, n, textures_handle);
            return texture;
        }
        /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
        public static unsafe void CreateTexture(TextureTarget target, out int texture)
        {
            int n = 1;
            Unsafe.SkipInit(out texture);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* textures_handle = (int*)Unsafe.AsPointer(ref texture);
            CreateTextures(target, n, textures_handle);
        }
        /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
        public static unsafe void CreateTextures(TextureTarget target, Span<int> textures)
        {
            int n = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                CreateTextures(target, n, textures_ptr);
            }
        }
        /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
        public static unsafe void CreateTextures(TextureTarget target, int[] textures)
        {
            int n = (int)(textures.Length);
            fixed (int* textures_ptr = textures)
            {
                CreateTextures(target, n, textures_ptr);
            }
        }
        /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
        public static unsafe void CreateTextures(TextureTarget target, int n, ref int textures)
        {
            fixed (int* textures_ptr = &textures)
            {
                CreateTextures(target, n, textures_ptr);
            }
        }
        /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage1D(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage1D<T1>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage1D(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, T1[] data)
            where T1 : unmanaged
        {
            int imageSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, in T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
        public static unsafe void TextureParameterf(int texture, TextureParameterName pname, ReadOnlySpan<float> param)
        {
            fixed (float* param_ptr = param)
            {
                TextureParameterfv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
        public static unsafe void TextureParameterf(int texture, TextureParameterName pname, float[] param)
        {
            fixed (float* param_ptr = param)
            {
                TextureParameterfv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
        public static unsafe void TextureParameterf(int texture, TextureParameterName pname, in float param)
        {
            fixed (float* param_ptr = &param)
            {
                TextureParameterfv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TextureParameterIiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TextureParameterIiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, in int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                TextureParameterIiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
        public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, ReadOnlySpan<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                TextureParameterIuiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
        public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                TextureParameterIuiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
        public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, in uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                TextureParameterIuiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameteri(int texture, TextureParameterName pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param)
            {
                TextureParameteriv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameteri(int texture, TextureParameterName pname, int[] param)
        {
            fixed (int* param_ptr = param)
            {
                TextureParameteriv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameteri(int texture, TextureParameterName pname, in int param)
        {
            fixed (int* param_ptr = &param)
            {
                TextureParameteriv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureImage(int texture, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetTextureImage(texture, level, format, type, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, Span<T1> pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureImage(int texture, int level, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetCompressedTextureImage(texture, level, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, Span<T1> pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, T1[] pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureLevelParameterfv(int, int, GetTextureParameter, float*)"/>
        public static unsafe void GetTextureLevelParameterf(int texture, int level, GetTextureParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTextureLevelParameterfv(texture, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureLevelParameteriv(int, int, GetTextureParameter, int*)"/>
        public static unsafe void GetTextureLevelParameteri(int texture, int level, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTextureLevelParameteriv(texture, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameterfv(int, GetTextureParameter, float*)"/>
        public static unsafe void GetTextureParameterf(int texture, GetTextureParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTextureParameterfv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameterIiv(int, GetTextureParameter, int*)"/>
        public static unsafe void GetTextureParameterIi(int texture, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTextureParameterIiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameterIuiv(int, GetTextureParameter, uint*)"/>
        public static unsafe void GetTextureParameterIui(int texture, GetTextureParameter pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetTextureParameterIuiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameteriv(int, GetTextureParameter, int*)"/>
        public static unsafe void GetTextureParameteri(int texture, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTextureParameteriv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
        public static unsafe int CreateVertexArray()
        {
            int array;
            int n = 1;
            Unsafe.SkipInit(out array);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
            CreateVertexArrays(n, arrays_handle);
            return array;
        }
        /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
        public static unsafe void CreateVertexArray(out int array)
        {
            int n = 1;
            Unsafe.SkipInit(out array);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
            CreateVertexArrays(n, arrays_handle);
        }
        /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
        public static unsafe void CreateVertexArrays(Span<int> arrays)
        {
            int n = (int)(arrays.Length);
            fixed (int* arrays_ptr = arrays)
            {
                CreateVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
        public static unsafe void CreateVertexArrays(int[] arrays)
        {
            int n = (int)(arrays.Length);
            fixed (int* arrays_ptr = arrays)
            {
                CreateVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
        public static unsafe void CreateVertexArrays(int n, ref int arrays)
        {
            fixed (int* arrays_ptr = &arrays)
            {
                CreateVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<int> strides)
        {
            fixed (int* buffers_ptr = buffers)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (int* strides_ptr = strides)
                    {
                        VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, int[] buffers, IntPtr[] offsets, int[] strides)
        {
            fixed (int* buffers_ptr = buffers)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (int* strides_ptr = strides)
                    {
                        VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, in int buffers, in IntPtr offsets, in int strides)
        {
            fixed (int* buffers_ptr = &buffers)
            fixed (IntPtr* offsets_ptr = &offsets)
            fixed (int* strides_ptr = &strides)
            {
                VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexArrayiv(int, VertexArrayPName, int*)"/>
        public static unsafe void GetVertexArrayi(int vaobj, VertexArrayPName pname, ref int param)
        {
            fixed (int* param_ptr = &param)
            {
                GetVertexArrayiv(vaobj, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexArrayIndexediv(int, uint, VertexArrayPName, int*)"/>
        public static unsafe void GetVertexArrayIndexedi(int vaobj, uint index, VertexArrayPName pname, ref int param)
        {
            fixed (int* param_ptr = &param)
            {
                GetVertexArrayIndexediv(vaobj, index, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexArrayIndexed64iv(int, uint, VertexArrayPName, long*)"/>
        public static unsafe void GetVertexArrayIndexed64i(int vaobj, uint index, VertexArrayPName pname, ref Vector4i param)
        {
            fixed (Vector4i* tmp_param = &param)
            {
                long* param_ptr = (long*)tmp_param;
                GetVertexArrayIndexed64iv(vaobj, index, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="CreateSamplers(int, int*)"/>
        public static unsafe int CreateSampler()
        {
            int sampler;
            int n = 1;
            Unsafe.SkipInit(out sampler);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
            CreateSamplers(n, samplers_handle);
            return sampler;
        }
        /// <inheritdoc cref="CreateSamplers(int, int*)"/>
        public static unsafe void CreateSampler(out int sampler)
        {
            int n = 1;
            Unsafe.SkipInit(out sampler);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
            CreateSamplers(n, samplers_handle);
        }
        /// <inheritdoc cref="CreateSamplers(int, int*)"/>
        public static unsafe void CreateSamplers(Span<int> samplers)
        {
            int n = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                CreateSamplers(n, samplers_ptr);
            }
        }
        /// <inheritdoc cref="CreateSamplers(int, int*)"/>
        public static unsafe void CreateSamplers(int[] samplers)
        {
            int n = (int)(samplers.Length);
            fixed (int* samplers_ptr = samplers)
            {
                CreateSamplers(n, samplers_ptr);
            }
        }
        /// <inheritdoc cref="CreateSamplers(int, int*)"/>
        public static unsafe void CreateSamplers(int n, ref int samplers)
        {
            fixed (int* samplers_ptr = &samplers)
            {
                CreateSamplers(n, samplers_ptr);
            }
        }
        /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
        public static unsafe int CreateProgramPipeline()
        {
            int pipeline;
            int n = 1;
            Unsafe.SkipInit(out pipeline);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
            CreateProgramPipelines(n, pipelines_handle);
            return pipeline;
        }
        /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
        public static unsafe void CreateProgramPipeline(out int pipeline)
        {
            int n = 1;
            Unsafe.SkipInit(out pipeline);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
            CreateProgramPipelines(n, pipelines_handle);
        }
        /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
        public static unsafe void CreateProgramPipelines(Span<int> pipelines)
        {
            int n = (int)(pipelines.Length);
            fixed (int* pipelines_ptr = pipelines)
            {
                CreateProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
        public static unsafe void CreateProgramPipelines(int[] pipelines)
        {
            int n = (int)(pipelines.Length);
            fixed (int* pipelines_ptr = pipelines)
            {
                CreateProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
        public static unsafe void CreateProgramPipelines(int n, ref int pipelines)
        {
            fixed (int* pipelines_ptr = &pipelines)
            {
                CreateProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
        public static unsafe int CreateQuery(QueryTarget target)
        {
            int id;
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            CreateQueries(target, n, ids_handle);
            return id;
        }
        /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
        public static unsafe void CreateQuery(QueryTarget target, out int id)
        {
            int n = 1;
            Unsafe.SkipInit(out id);
            // FIXME: This could be a problem for the overloads that take an out parameter
            // as this parameter could *potentially* move while inside of this function
            // which would mean that the new value never gets written to the out parameter.
            // Making for a nasty bug.
            // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
            // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
            // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
            // - 2021-05-18
            int* ids_handle = (int*)Unsafe.AsPointer(ref id);
            CreateQueries(target, n, ids_handle);
        }
        /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
        public static unsafe void CreateQueries(QueryTarget target, Span<int> ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                CreateQueries(target, n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
        public static unsafe void CreateQueries(QueryTarget target, int[] ids)
        {
            int n = (int)(ids.Length);
            fixed (int* ids_ptr = ids)
            {
                CreateQueries(target, n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
        public static unsafe void CreateQueries(QueryTarget target, int n, ref int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                CreateQueries(target, n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryBufferObjecti64v(int, int, QueryObjectParameterName, IntPtr)"/>
        public static unsafe void GetQueryBufferObjecti64(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
        {
            GetQueryBufferObjecti64v(id, buffer, pname, offset);
        }
        /// <inheritdoc cref="GetQueryBufferObjectiv(int, int, QueryObjectParameterName, IntPtr)"/>
        public static unsafe void GetQueryBufferObjecti(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
        {
            GetQueryBufferObjectiv(id, buffer, pname, offset);
        }
        /// <inheritdoc cref="GetQueryBufferObjectui64v(int, int, QueryObjectParameterName, IntPtr)"/>
        public static unsafe void GetQueryBufferObjectui64(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
        {
            GetQueryBufferObjectui64v(id, buffer, pname, offset);
        }
        /// <inheritdoc cref="GetQueryBufferObjectuiv(int, int, QueryObjectParameterName, IntPtr)"/>
        public static unsafe void GetQueryBufferObjectui(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
        {
            GetQueryBufferObjectuiv(id, buffer, pname, offset);
        }
        /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, Span<T1> pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, Span<T1> pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, T1[] pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
        public static unsafe void GetnCompressedTexImage(TextureTarget target, int lod, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetnCompressedTexImage(target, lod, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
        public static unsafe void GetnCompressedTexImage<T1>(TextureTarget target, int lod, Span<T1> pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetnCompressedTexImage(target, lod, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
        public static unsafe void GetnCompressedTexImage<T1>(TextureTarget target, int lod, T1[] pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetnCompressedTexImage(target, lod, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
        public static unsafe void GetnCompressedTexImage<T1>(TextureTarget target, int lod, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetnCompressedTexImage(target, lod, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetnTexImage(target, level, format, type, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, Span<T1> pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetnTexImage(target, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            int bufSize = (int)(pixels.Length * sizeof(T1));
            fixed (void* pixels_ptr = pixels)
            {
                GetnTexImage(target, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetnTexImage(target, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformdv(int, int, int, double*)"/>
        public static unsafe void GetnUniformd(int program, int location, Span<double> parameters)
        {
            int bufSize = (int)(parameters.Length * 8);
            fixed (double* parameters_ptr = parameters)
            {
                GetnUniformdv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformdv(int, int, int, double*)"/>
        public static unsafe void GetnUniformd(int program, int location, double[] parameters)
        {
            int bufSize = (int)(parameters.Length * 8);
            fixed (double* parameters_ptr = parameters)
            {
                GetnUniformdv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformdv(int, int, int, double*)"/>
        public static unsafe void GetnUniformd(int program, int location, int bufSize, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                GetnUniformdv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
        public static unsafe void GetnUniformf(int program, int location, Span<float> parameters)
        {
            int bufSize = (int)(parameters.Length * 4);
            fixed (float* parameters_ptr = parameters)
            {
                GetnUniformfv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
        public static unsafe void GetnUniformf(int program, int location, float[] parameters)
        {
            int bufSize = (int)(parameters.Length * 4);
            fixed (float* parameters_ptr = parameters)
            {
                GetnUniformfv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
        public static unsafe void GetnUniformf(int program, int location, int bufSize, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetnUniformfv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
        public static unsafe void GetnUniformi(int program, int location, Span<int> parameters)
        {
            int bufSize = (int)(parameters.Length * 4);
            fixed (int* parameters_ptr = parameters)
            {
                GetnUniformiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
        public static unsafe void GetnUniformi(int program, int location, int[] parameters)
        {
            int bufSize = (int)(parameters.Length * 4);
            fixed (int* parameters_ptr = parameters)
            {
                GetnUniformiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
        public static unsafe void GetnUniformi(int program, int location, int bufSize, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetnUniformiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
        public static unsafe void GetnUniformui(int program, int location, Span<uint> parameters)
        {
            int bufSize = (int)(parameters.Length * 4);
            fixed (uint* parameters_ptr = parameters)
            {
                GetnUniformuiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
        public static unsafe void GetnUniformui(int program, int location, uint[] parameters)
        {
            int bufSize = (int)(parameters.Length * 4);
            fixed (uint* parameters_ptr = parameters)
            {
                GetnUniformuiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
        public static unsafe void GetnUniformui(int program, int location, int bufSize, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetnUniformuiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void ReadnPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ReadnPixels(x, y, width, height, format, type, bufSize, data_vptr);
        }
        /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, Span<T1> data)
            where T1 : unmanaged
        {
            int bufSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }
        /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            int bufSize = (int)(data.Length * sizeof(T1));
            fixed (void* data_ptr = data)
            {
                ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }
        /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }
        /// <inheritdoc cref="GetnMapdv(MapTarget, MapQuery, int, double*)"/>
        public static unsafe void GetnMapd(MapTarget target, MapQuery query, int bufSize, Span<double> v)
        {
            fixed (double* v_ptr = v)
            {
                GetnMapdv(target, query, bufSize, v_ptr);
            }
        }
        /// <inheritdoc cref="GetnMapdv(MapTarget, MapQuery, int, double*)"/>
        public static unsafe void GetnMapd(MapTarget target, MapQuery query, int bufSize, double[] v)
        {
            fixed (double* v_ptr = v)
            {
                GetnMapdv(target, query, bufSize, v_ptr);
            }
        }
        /// <inheritdoc cref="GetnMapdv(MapTarget, MapQuery, int, double*)"/>
        public static unsafe void GetnMapd(MapTarget target, MapQuery query, int bufSize, ref double v)
        {
            fixed (double* v_ptr = &v)
            {
                GetnMapdv(target, query, bufSize, v_ptr);
            }
        }
        /// <inheritdoc cref="GetnMapfv(MapTarget, MapQuery, int, float*)"/>
        public static unsafe void GetnMapf(MapTarget target, MapQuery query, int bufSize, ref float v)
        {
            fixed (float* v_ptr = &v)
            {
                GetnMapfv(target, query, bufSize, v_ptr);
            }
        }
        /// <inheritdoc cref="GetnMapiv(MapTarget, MapQuery, int, int*)"/>
        public static unsafe void GetnMapi(MapTarget target, MapQuery query, int bufSize, ref int v)
        {
            fixed (int* v_ptr = &v)
            {
                GetnMapiv(target, query, bufSize, v_ptr);
            }
        }
        /// <inheritdoc cref="GetnPixelMapfv(PixelMap, int, float*)"/>
        public static unsafe void GetnPixelMapf(PixelMap map, int bufSize, Span<float> values)
        {
            fixed (float* values_ptr = values)
            {
                GetnPixelMapfv(map, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnPixelMapfv(PixelMap, int, float*)"/>
        public static unsafe void GetnPixelMapf(PixelMap map, int bufSize, float[] values)
        {
            fixed (float* values_ptr = values)
            {
                GetnPixelMapfv(map, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnPixelMapfv(PixelMap, int, float*)"/>
        public static unsafe void GetnPixelMapf(PixelMap map, int bufSize, ref float values)
        {
            fixed (float* values_ptr = &values)
            {
                GetnPixelMapfv(map, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnPixelMapuiv(PixelMap, int, uint*)"/>
        public static unsafe void GetnPixelMapui(PixelMap map, int bufSize, ref uint values)
        {
            fixed (uint* values_ptr = &values)
            {
                GetnPixelMapuiv(map, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnPixelMapusv(PixelMap, int, ushort*)"/>
        public static unsafe void GetnPixelMap(PixelMap map, int bufSize, ref ushort values)
        {
            fixed (ushort* values_ptr = &values)
            {
                GetnPixelMapusv(map, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnPolygonStipple(int, byte*)"/>
        public static unsafe void GetnPolygonStipple(Span<byte> pattern)
        {
            int bufSize = (int)(pattern.Length);
            fixed (byte* pattern_ptr = pattern)
            {
                GetnPolygonStipple(bufSize, pattern_ptr);
            }
        }
        /// <inheritdoc cref="GetnPolygonStipple(int, byte*)"/>
        public static unsafe void GetnPolygonStipple(byte[] pattern)
        {
            int bufSize = (int)(pattern.Length);
            fixed (byte* pattern_ptr = pattern)
            {
                GetnPolygonStipple(bufSize, pattern_ptr);
            }
        }
        /// <inheritdoc cref="GetnPolygonStipple(int, byte*)"/>
        public static unsafe void GetnPolygonStipple(int bufSize, ref byte pattern)
        {
            fixed (byte* pattern_ptr = &pattern)
            {
                GetnPolygonStipple(bufSize, pattern_ptr);
            }
        }
        /// <inheritdoc cref="GetnColorTable(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnColorTable(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr table)
        {
            void* table_vptr = (void*)table;
            GetnColorTable(target, format, type, bufSize, table_vptr);
        }
        /// <inheritdoc cref="GetnColorTable(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, Span<T1> table)
            where T1 : unmanaged
        {
            int bufSize = (int)(table.Length * sizeof(T1));
            fixed (void* table_ptr = table)
            {
                GetnColorTable(target, format, type, bufSize, table_ptr);
            }
        }
        /// <inheritdoc cref="GetnColorTable(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, T1[] table)
            where T1 : unmanaged
        {
            int bufSize = (int)(table.Length * sizeof(T1));
            fixed (void* table_ptr = table)
            {
                GetnColorTable(target, format, type, bufSize, table_ptr);
            }
        }
        /// <inheritdoc cref="GetnColorTable(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, ref T1 table)
            where T1 : unmanaged
        {
            fixed (void* table_ptr = &table)
            {
                GetnColorTable(target, format, type, bufSize, table_ptr);
            }
        }
        /// <inheritdoc cref="GetnConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr image)
        {
            void* image_vptr = (void*)image;
            GetnConvolutionFilter(target, format, type, bufSize, image_vptr);
        }
        /// <inheritdoc cref="GetnConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, Span<T1> image)
            where T1 : unmanaged
        {
            int bufSize = (int)(image.Length * sizeof(T1));
            fixed (void* image_ptr = image)
            {
                GetnConvolutionFilter(target, format, type, bufSize, image_ptr);
            }
        }
        /// <inheritdoc cref="GetnConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, T1[] image)
            where T1 : unmanaged
        {
            int bufSize = (int)(image.Length * sizeof(T1));
            fixed (void* image_ptr = image)
            {
                GetnConvolutionFilter(target, format, type, bufSize, image_ptr);
            }
        }
        /// <inheritdoc cref="GetnConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, ref T1 image)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = &image)
            {
                GetnConvolutionFilter(target, format, type, bufSize, image_ptr);
            }
        }
        /// <inheritdoc cref="GetnSeparableFilter(SeparableTarget, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
        public static unsafe void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span)
        {
            void* row_vptr = (void*)row;
            void* column_vptr = (void*)column;
            void* span_vptr = (void*)span;
            GetnSeparableFilter(target, format, type, rowBufSize, row_vptr, columnBufSize, column_vptr, span_vptr);
        }
        /// <inheritdoc cref="GetnSeparableFilter(SeparableTarget, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
        public static unsafe void GetnSeparableFilter<T1, T2, T3>(SeparableTarget target, PixelFormat format, PixelType type, Span<T3> row, Span<T2> column, Span<T1> span)
            where T1 : unmanaged
            where T2 : unmanaged
            where T3 : unmanaged
        {
            int rowBufSize = (int)(row.Length * sizeof(T3));
            fixed (void* row_ptr = row)
            {
                int columnBufSize = (int)(column.Length * sizeof(T2));
                fixed (void* column_ptr = column)
                {
                    fixed (void* span_ptr = span)
                    {
                        GetnSeparableFilter(target, format, type, rowBufSize, row_ptr, columnBufSize, column_ptr, span_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetnSeparableFilter(SeparableTarget, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
        public static unsafe void GetnSeparableFilter<T1, T2, T3>(SeparableTarget target, PixelFormat format, PixelType type, T3[] row, T2[] column, T1[] span)
            where T1 : unmanaged
            where T2 : unmanaged
            where T3 : unmanaged
        {
            int rowBufSize = (int)(row.Length * sizeof(T3));
            fixed (void* row_ptr = row)
            {
                int columnBufSize = (int)(column.Length * sizeof(T2));
                fixed (void* column_ptr = column)
                {
                    fixed (void* span_ptr = span)
                    {
                        GetnSeparableFilter(target, format, type, rowBufSize, row_ptr, columnBufSize, column_ptr, span_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetnSeparableFilter(SeparableTarget, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
        public static unsafe void GetnSeparableFilter<T1, T2, T3>(SeparableTarget target, PixelFormat format, PixelType type, int rowBufSize, ref T1 row, int columnBufSize, ref T2 column, ref T3 span)
            where T1 : unmanaged
            where T2 : unmanaged
            where T3 : unmanaged
        {
            fixed (void* row_ptr = &row)
            fixed (void* column_ptr = &column)
            fixed (void* span_ptr = &span)
            {
                GetnSeparableFilter(target, format, type, rowBufSize, row_ptr, columnBufSize, column_ptr, span_ptr);
            }
        }
        /// <inheritdoc cref="GetnHistogram(HistogramTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnHistogram(HistogramTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
        {
            void* values_vptr = (void*)values;
            GetnHistogram(target, reset, format, type, bufSize, values_vptr);
        }
        /// <inheritdoc cref="GetnHistogram(HistogramTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnHistogram<T1>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
            where T1 : unmanaged
        {
            int bufSize = (int)(values.Length * sizeof(T1));
            fixed (void* values_ptr = values)
            {
                GetnHistogram(target, reset, format, type, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnHistogram(HistogramTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnHistogram<T1>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, T1[] values)
            where T1 : unmanaged
        {
            int bufSize = (int)(values.Length * sizeof(T1));
            fixed (void* values_ptr = values)
            {
                GetnHistogram(target, reset, format, type, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnHistogram(HistogramTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnHistogram<T1>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, ref T1 values)
            where T1 : unmanaged
        {
            fixed (void* values_ptr = &values)
            {
                GetnHistogram(target, reset, format, type, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnMinmax(MinmaxTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnMinmax(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
        {
            void* values_vptr = (void*)values;
            GetnMinmax(target, reset, format, type, bufSize, values_vptr);
        }
        /// <inheritdoc cref="GetnMinmax(MinmaxTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnMinmax<T1>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
            where T1 : unmanaged
        {
            int bufSize = (int)(values.Length * sizeof(T1));
            fixed (void* values_ptr = values)
            {
                GetnMinmax(target, reset, format, type, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnMinmax(MinmaxTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnMinmax<T1>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, T1[] values)
            where T1 : unmanaged
        {
            int bufSize = (int)(values.Length * sizeof(T1));
            fixed (void* values_ptr = values)
            {
                GetnMinmax(target, reset, format, type, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnMinmax(MinmaxTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnMinmax<T1>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, ref T1 values)
            where T1 : unmanaged
        {
            fixed (void* values_ptr = &values)
            {
                GetnMinmax(target, reset, format, type, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="SpecializeShader(int, byte*, uint, uint*, uint*)"/>
        public static unsafe void SpecializeShader(int shader, string pEntryPoint, uint numSpecializationConstants, ReadOnlySpan<uint> pConstantIndex, ReadOnlySpan<uint> pConstantValue)
        {
            fixed (uint* pConstantIndex_ptr = pConstantIndex)
            {
                fixed (uint* pConstantValue_ptr = pConstantValue)
                {
                    byte* pEntryPoint_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(pEntryPoint);
                    SpecializeShader(shader, pEntryPoint_ptr, numSpecializationConstants, pConstantIndex_ptr, pConstantValue_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)pEntryPoint_ptr);
                }
            }
        }
        /// <inheritdoc cref="SpecializeShader(int, byte*, uint, uint*, uint*)"/>
        public static unsafe void SpecializeShader(int shader, string pEntryPoint, uint numSpecializationConstants, uint[] pConstantIndex, uint[] pConstantValue)
        {
            fixed (uint* pConstantIndex_ptr = pConstantIndex)
            {
                fixed (uint* pConstantValue_ptr = pConstantValue)
                {
                    byte* pEntryPoint_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(pEntryPoint);
                    SpecializeShader(shader, pEntryPoint_ptr, numSpecializationConstants, pConstantIndex_ptr, pConstantValue_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)pEntryPoint_ptr);
                }
            }
        }
        /// <inheritdoc cref="SpecializeShader(int, byte*, uint, uint*, uint*)"/>
        public static unsafe void SpecializeShader(int shader, string pEntryPoint, uint numSpecializationConstants, in uint pConstantIndex, in uint pConstantValue)
        {
            fixed (uint* pConstantIndex_ptr = &pConstantIndex)
            fixed (uint* pConstantValue_ptr = &pConstantValue)
            {
                byte* pEntryPoint_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(pEntryPoint);
                SpecializeShader(shader, pEntryPoint_ptr, numSpecializationConstants, pConstantIndex_ptr, pConstantValue_ptr);
                Marshal.FreeCoTaskMem((IntPtr)pEntryPoint_ptr);
            }
        }
        /// <inheritdoc cref="MultiDrawArraysIndirectCount(PrimitiveType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawArraysIndirectCount(PrimitiveType mode, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            void* indirect_vptr = (void*)indirect;
            MultiDrawArraysIndirectCount(mode, indirect_vptr, drawcount, maxdrawcount, stride);
        }
        /// <inheritdoc cref="MultiDrawArraysIndirectCount(PrimitiveType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawArraysIndirectCount<T1>(PrimitiveType mode, in T1 indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                MultiDrawArraysIndirectCount(mode, indirect_ptr, drawcount, maxdrawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsIndirectCount(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawElementsIndirectCount(PrimitiveType mode, DrawElementsType type, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            void* indirect_vptr = (void*)indirect;
            MultiDrawElementsIndirectCount(mode, type, indirect_vptr, drawcount, maxdrawcount, stride);
        }
        /// <inheritdoc cref="MultiDrawElementsIndirectCount(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawElementsIndirectCount<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                MultiDrawElementsIndirectCount(mode, type, indirect_ptr, drawcount, maxdrawcount, stride);
            }
        }
        public static unsafe partial class _3DFX
        {
        }
        public static unsafe partial class AMD
        {
            /// <inheritdoc cref="DebugMessageEnable(All, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageEnable(All category, DebugSeverity severity, ReadOnlySpan<uint> ids, bool enabled)
            {
                int count = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageEnable(category, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageEnable(All, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageEnable(All category, DebugSeverity severity, uint[] ids, bool enabled)
            {
                int count = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageEnable(category, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageEnable(All, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageEnable(All category, DebugSeverity severity, int count, in uint ids, bool enabled)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    DebugMessageEnable(category, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageInsert(All, DebugSeverity, uint, int, byte*)"/>
            public static unsafe void DebugMessageInsert(All category, DebugSeverity severity, uint id, int length, string buf)
            {
                byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
                DebugMessageInsert(category, severity, id, length, buf_ptr);
                Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
            }
            /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallback(GLDebugProcAMD callback, IntPtr userParam)
            {
                void* userParam_vptr = (void*)userParam;
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallback(callback_ptr, userParam_vptr);
            }
            /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallback<T1>(GLDebugProcAMD callback, ref T1 userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = &userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallback(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="GetDebugMessageLog(uint, int, All*, DebugSeverity*, uint*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, Span<All> categories, Span<DebugSeverity> severities, Span<uint> ids, Span<int> lengths, out string message)
            {
                uint returnValue;
                fixed (All* categories_ptr = categories)
                {
                    fixed (DebugSeverity* severities_ptr = severities)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (int* lengths_ptr = lengths)
                            {
                                var message_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = GetDebugMessageLog(count, bufSize, categories_ptr, severities_ptr, ids_ptr, lengths_ptr, message_ptr);
                                message = Marshal.PtrToStringUTF8((IntPtr)message_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)message_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLog(uint, int, All*, DebugSeverity*, uint*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, All[] categories, DebugSeverity[] severities, uint[] ids, int[] lengths, out string message)
            {
                uint returnValue;
                fixed (All* categories_ptr = categories)
                {
                    fixed (DebugSeverity* severities_ptr = severities)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (int* lengths_ptr = lengths)
                            {
                                var message_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = GetDebugMessageLog(count, bufSize, categories_ptr, severities_ptr, ids_ptr, lengths_ptr, message_ptr);
                                message = Marshal.PtrToStringUTF8((IntPtr)message_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)message_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLog(uint, int, All*, DebugSeverity*, uint*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, ref All categories, ref DebugSeverity severities, ref uint ids, ref int lengths, out string message)
            {
                uint returnValue;
                fixed (All* categories_ptr = &categories)
                fixed (DebugSeverity* severities_ptr = &severities)
                fixed (uint* ids_ptr = &ids)
                fixed (int* lengths_ptr = &lengths)
                {
                    var message_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    returnValue = GetDebugMessageLog(count, bufSize, categories_ptr, severities_ptr, ids_ptr, lengths_ptr, message_ptr);
                    message = Marshal.PtrToStringUTF8((IntPtr)message_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)message_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="FramebufferSamplePositionsfv(FramebufferTarget, uint, uint, float*)"/>
            public static unsafe void FramebufferSamplePositionsfv(FramebufferTarget target, uint numsamples, uint pixelindex, in float values)
            {
                fixed (float* values_ptr = &values)
                {
                    FramebufferSamplePositionsfv(target, numsamples, pixelindex, values_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferSamplePositionsfv(int, uint, uint, float*)"/>
            public static unsafe void NamedFramebufferSamplePositionsfv(int framebuffer, uint numsamples, uint pixelindex, in float values)
            {
                fixed (float* values_ptr = &values)
                {
                    NamedFramebufferSamplePositionsfv(framebuffer, numsamples, pixelindex, values_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameterfv(FramebufferTarget, FramebufferAttachmentParameterName, uint, uint, int, float*)"/>
            public static unsafe void GetFramebufferParameterfv(FramebufferTarget target, FramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, ref float values)
            {
                fixed (float* values_ptr = &values)
                {
                    GetFramebufferParameterfv(target, pname, numsamples, pixelindex, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameterfv(int, All, uint, uint, int, float*)"/>
            public static unsafe void GetNamedFramebufferParameterfv(int framebuffer, All pname, uint numsamples, uint pixelindex, int size, ref float values)
            {
                fixed (float* values_ptr = &values)
                {
                    GetNamedFramebufferParameterfv(framebuffer, pname, numsamples, pixelindex, size, values_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vNV(int, int, long*)"/>
            public static unsafe void Uniform1i64vNV(int location, int count, in long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vNV(int, int, long*)"/>
            public static unsafe void Uniform1i64vNV(int location, int count, ReadOnlySpan<long> value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vNV(int, int, long*)"/>
            public static unsafe void Uniform1i64vNV(int location, int count, long[] value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vNV(int location, int count, in ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vNV(int location, int count, ReadOnlySpan<ulong> value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vNV(int location, int count, ulong[] value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe void GetUniformi64vNV(int program, int location, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe void GetUniformi64vNV(int program, int location, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe void GetUniformi64vNV(int program, int location, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vNV(int program, int location, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vNV(int program, int location, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vNV(int program, int location, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform1i64vNV(int program, int location, int count, in long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform1i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform1ui64vNV(int program, int location, int count, in ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform1ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect(PrimitiveType mode, IntPtr indirect, int primcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawArraysIndirect(mode, indirect_vptr, primcount, stride);
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, ReadOnlySpan<T1> indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirect(mode, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, T1[] indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirect(mode, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, in T1 indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawArraysIndirect(mode, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int primcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawElementsIndirect(mode, type, indirect_vptr, primcount, stride);
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirect(mode, type, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, T1[] indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirect(mode, type, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawElementsIndirect(mode, type, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="GenNames(All, uint, uint*)"/>
            public static unsafe void GenNames(All identifier, Span<uint> names)
            {
                uint num = (uint)(names.Length);
                fixed (uint* names_ptr = names)
                {
                    GenNames(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="GenNames(All, uint, uint*)"/>
            public static unsafe void GenNames(All identifier, uint[] names)
            {
                uint num = (uint)(names.Length);
                fixed (uint* names_ptr = names)
                {
                    GenNames(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="GenNames(All, uint, uint*)"/>
            public static unsafe void GenNames(All identifier, uint num, ref uint names)
            {
                fixed (uint* names_ptr = &names)
                {
                    GenNames(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="DeleteNames(All, uint, uint*)"/>
            public static unsafe void DeleteNames(All identifier, ReadOnlySpan<uint> names)
            {
                uint num = (uint)(names.Length);
                fixed (uint* names_ptr = names)
                {
                    DeleteNames(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="DeleteNames(All, uint, uint*)"/>
            public static unsafe void DeleteNames(All identifier, uint[] names)
            {
                uint num = (uint)(names.Length);
                fixed (uint* names_ptr = names)
                {
                    DeleteNames(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="DeleteNames(All, uint, uint*)"/>
            public static unsafe void DeleteNames(All identifier, uint num, in uint names)
            {
                fixed (uint* names_ptr = &names)
                {
                    DeleteNames(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroups(int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorGroups(Span<int> numGroups, Span<uint> groups)
            {
                fixed (int* numGroups_ptr = numGroups)
                {
                    int groupsSize = (int)(groups.Length);
                    fixed (uint* groups_ptr = groups)
                    {
                        GetPerfMonitorGroups(numGroups_ptr, groupsSize, groups_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroups(int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorGroups(int[] numGroups, uint[] groups)
            {
                fixed (int* numGroups_ptr = numGroups)
                {
                    int groupsSize = (int)(groups.Length);
                    fixed (uint* groups_ptr = groups)
                    {
                        GetPerfMonitorGroups(numGroups_ptr, groupsSize, groups_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroups(int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorGroups(ref int numGroups, int groupsSize, ref uint groups)
            {
                fixed (int* numGroups_ptr = &numGroups)
                fixed (uint* groups_ptr = &groups)
                {
                    GetPerfMonitorGroups(numGroups_ptr, groupsSize, groups_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounters(uint, int*, int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorCounters(uint group, Span<int> numCounters, Span<int> maxActiveCounters, Span<uint> counters)
            {
                fixed (int* numCounters_ptr = numCounters)
                {
                    fixed (int* maxActiveCounters_ptr = maxActiveCounters)
                    {
                        int counterSize = (int)(counters.Length);
                        fixed (uint* counters_ptr = counters)
                        {
                            GetPerfMonitorCounters(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounters(uint, int*, int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorCounters(uint group, int[] numCounters, int[] maxActiveCounters, uint[] counters)
            {
                fixed (int* numCounters_ptr = numCounters)
                {
                    fixed (int* maxActiveCounters_ptr = maxActiveCounters)
                    {
                        int counterSize = (int)(counters.Length);
                        fixed (uint* counters_ptr = counters)
                        {
                            GetPerfMonitorCounters(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounters(uint, int*, int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorCounters(uint group, ref int numCounters, ref int maxActiveCounters, int counterSize, ref uint counters)
            {
                fixed (int* numCounters_ptr = &numCounters)
                fixed (int* maxActiveCounters_ptr = &maxActiveCounters)
                fixed (uint* counters_ptr = &counters)
                {
                    GetPerfMonitorCounters(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroupString(uint, int, int*, byte*)"/>
            public static unsafe string GetPerfMonitorGroupString(uint group, int bufSize, Span<int> length)
            {
                string groupString;
                fixed (int* length_ptr = length)
                {
                    var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorGroupString(group, bufSize, length_ptr, groupString_ptr);
                    groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
                }
                return groupString;
            }
            /// <inheritdoc cref="GetPerfMonitorGroupString(uint, int, int*, byte*)"/>
            public static unsafe void GetPerfMonitorGroupString(uint group, int bufSize, Span<int> length, out string groupString)
            {
                fixed (int* length_ptr = length)
                {
                    var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorGroupString(group, bufSize, length_ptr, groupString_ptr);
                    groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroupString(uint, int, int*, byte*)"/>
            public static unsafe string GetPerfMonitorGroupString(uint group, int bufSize, int[] length)
            {
                string groupString;
                fixed (int* length_ptr = length)
                {
                    var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorGroupString(group, bufSize, length_ptr, groupString_ptr);
                    groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
                }
                return groupString;
            }
            /// <inheritdoc cref="GetPerfMonitorGroupString(uint, int, int*, byte*)"/>
            public static unsafe void GetPerfMonitorGroupString(uint group, int bufSize, int[] length, out string groupString)
            {
                fixed (int* length_ptr = length)
                {
                    var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorGroupString(group, bufSize, length_ptr, groupString_ptr);
                    groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroupString(uint, int, int*, byte*)"/>
            public static unsafe string GetPerfMonitorGroupString(uint group, int bufSize, ref int length)
            {
                string groupString;
                fixed (int* length_ptr = &length)
                {
                    var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorGroupString(group, bufSize, length_ptr, groupString_ptr);
                    groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
                }
                return groupString;
            }
            /// <inheritdoc cref="GetPerfMonitorGroupString(uint, int, int*, byte*)"/>
            public static unsafe void GetPerfMonitorGroupString(uint group, int bufSize, ref int length, out string groupString)
            {
                fixed (int* length_ptr = &length)
                {
                    var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorGroupString(group, bufSize, length_ptr, groupString_ptr);
                    groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterString(uint, uint, int, int*, byte*)"/>
            public static unsafe string GetPerfMonitorCounterString(uint group, uint counter, int bufSize, Span<int> length)
            {
                string counterString;
                fixed (int* length_ptr = length)
                {
                    var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorCounterString(group, counter, bufSize, length_ptr, counterString_ptr);
                    counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
                }
                return counterString;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterString(uint, uint, int, int*, byte*)"/>
            public static unsafe void GetPerfMonitorCounterString(uint group, uint counter, int bufSize, Span<int> length, out string counterString)
            {
                fixed (int* length_ptr = length)
                {
                    var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorCounterString(group, counter, bufSize, length_ptr, counterString_ptr);
                    counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterString(uint, uint, int, int*, byte*)"/>
            public static unsafe string GetPerfMonitorCounterString(uint group, uint counter, int bufSize, int[] length)
            {
                string counterString;
                fixed (int* length_ptr = length)
                {
                    var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorCounterString(group, counter, bufSize, length_ptr, counterString_ptr);
                    counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
                }
                return counterString;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterString(uint, uint, int, int*, byte*)"/>
            public static unsafe void GetPerfMonitorCounterString(uint group, uint counter, int bufSize, int[] length, out string counterString)
            {
                fixed (int* length_ptr = length)
                {
                    var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorCounterString(group, counter, bufSize, length_ptr, counterString_ptr);
                    counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterString(uint, uint, int, int*, byte*)"/>
            public static unsafe string GetPerfMonitorCounterString(uint group, uint counter, int bufSize, ref int length)
            {
                string counterString;
                fixed (int* length_ptr = &length)
                {
                    var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorCounterString(group, counter, bufSize, length_ptr, counterString_ptr);
                    counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
                }
                return counterString;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterString(uint, uint, int, int*, byte*)"/>
            public static unsafe void GetPerfMonitorCounterString(uint group, uint counter, int bufSize, ref int length, out string counterString)
            {
                fixed (int* length_ptr = &length)
                {
                    var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorCounterString(group, counter, bufSize, length_ptr, counterString_ptr);
                    counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterInfo(uint, uint, All, void*)"/>
            public static unsafe void GetPerfMonitorCounterInfo(uint group, uint counter, All pname, IntPtr data)
            {
                void* data_vptr = (void*)data;
                GetPerfMonitorCounterInfo(group, counter, pname, data_vptr);
            }
            /// <inheritdoc cref="GetPerfMonitorCounterInfo(uint, uint, All, void*)"/>
            public static unsafe void GetPerfMonitorCounterInfo<T1>(uint group, uint counter, All pname, Span<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetPerfMonitorCounterInfo(group, counter, pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterInfo(uint, uint, All, void*)"/>
            public static unsafe void GetPerfMonitorCounterInfo<T1>(uint group, uint counter, All pname, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetPerfMonitorCounterInfo(group, counter, pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterInfo(uint, uint, All, void*)"/>
            public static unsafe void GetPerfMonitorCounterInfo<T1>(uint group, uint counter, All pname, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    GetPerfMonitorCounterInfo(group, counter, pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GenPerfMonitors(int, uint*)"/>
            public static unsafe void GenPerfMonitors(Span<uint> monitors)
            {
                int n = (int)(monitors.Length);
                fixed (uint* monitors_ptr = monitors)
                {
                    GenPerfMonitors(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="GenPerfMonitors(int, uint*)"/>
            public static unsafe void GenPerfMonitors(uint[] monitors)
            {
                int n = (int)(monitors.Length);
                fixed (uint* monitors_ptr = monitors)
                {
                    GenPerfMonitors(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="GenPerfMonitors(int, uint*)"/>
            public static unsafe void GenPerfMonitors(int n, ref uint monitors)
            {
                fixed (uint* monitors_ptr = &monitors)
                {
                    GenPerfMonitors(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="DeletePerfMonitors(int, uint*)"/>
            public static unsafe void DeletePerfMonitors(Span<uint> monitors)
            {
                int n = (int)(monitors.Length);
                fixed (uint* monitors_ptr = monitors)
                {
                    DeletePerfMonitors(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="DeletePerfMonitors(int, uint*)"/>
            public static unsafe void DeletePerfMonitors(uint[] monitors)
            {
                int n = (int)(monitors.Length);
                fixed (uint* monitors_ptr = monitors)
                {
                    DeletePerfMonitors(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="DeletePerfMonitors(int, uint*)"/>
            public static unsafe void DeletePerfMonitors(int n, ref uint monitors)
            {
                fixed (uint* monitors_ptr = &monitors)
                {
                    DeletePerfMonitors(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="SelectPerfMonitorCounters(uint, bool, uint, int, uint*)"/>
            public static unsafe void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, Span<uint> counterList)
            {
                int numCounters = (int)(counterList.Length);
                fixed (uint* counterList_ptr = counterList)
                {
                    SelectPerfMonitorCounters(monitor, enable, group, numCounters, counterList_ptr);
                }
            }
            /// <inheritdoc cref="SelectPerfMonitorCounters(uint, bool, uint, int, uint*)"/>
            public static unsafe void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, uint[] counterList)
            {
                int numCounters = (int)(counterList.Length);
                fixed (uint* counterList_ptr = counterList)
                {
                    SelectPerfMonitorCounters(monitor, enable, group, numCounters, counterList_ptr);
                }
            }
            /// <inheritdoc cref="SelectPerfMonitorCounters(uint, bool, uint, int, uint*)"/>
            public static unsafe void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, ref uint counterList)
            {
                fixed (uint* counterList_ptr = &counterList)
                {
                    SelectPerfMonitorCounters(monitor, enable, group, numCounters, counterList_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterData(uint, All, int, uint*, int*)"/>
            public static unsafe void GetPerfMonitorCounterData(uint monitor, All pname, Span<uint> data, Span<int> bytesWritten)
            {
                int dataSize = (int)(data.Length * 4);
                fixed (uint* data_ptr = data)
                {
                    fixed (int* bytesWritten_ptr = bytesWritten)
                    {
                        GetPerfMonitorCounterData(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterData(uint, All, int, uint*, int*)"/>
            public static unsafe void GetPerfMonitorCounterData(uint monitor, All pname, uint[] data, int[] bytesWritten)
            {
                int dataSize = (int)(data.Length * 4);
                fixed (uint* data_ptr = data)
                {
                    fixed (int* bytesWritten_ptr = bytesWritten)
                    {
                        GetPerfMonitorCounterData(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterData(uint, All, int, uint*, int*)"/>
            public static unsafe void GetPerfMonitorCounterData(uint monitor, All pname, int dataSize, ref uint data, ref int bytesWritten)
            {
                fixed (uint* data_ptr = &data)
                fixed (int* bytesWritten_ptr = &bytesWritten)
                {
                    GetPerfMonitorCounterData(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                }
            }
            /// <inheritdoc cref="SetMultisamplefv(All, uint, float*)"/>
            public static unsafe void SetMultisamplefv(All pname, uint index, ReadOnlySpan<float> val)
            {
                fixed (float* val_ptr = val)
                {
                    SetMultisamplefv(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="SetMultisamplefv(All, uint, float*)"/>
            public static unsafe void SetMultisamplefv(All pname, uint index, float[] val)
            {
                fixed (float* val_ptr = val)
                {
                    SetMultisamplefv(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="SetMultisamplefv(All, uint, float*)"/>
            public static unsafe void SetMultisamplefv(All pname, uint index, in float val)
            {
                fixed (float* val_ptr = &val)
                {
                    SetMultisamplefv(pname, index, val_ptr);
                }
            }
        }
        public static unsafe partial class APPLE
        {
            /// <inheritdoc cref="ElementPointer(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointer(ElementPointerTypeATI type, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                ElementPointer(type, pointer_vptr);
            }
            /// <inheritdoc cref="ElementPointer(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointer<T1>(ElementPointerTypeATI type, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ElementPointer(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointer(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointer<T1>(ElementPointerTypeATI type, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ElementPointer(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointer(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointer<T1>(ElementPointerTypeATI type, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    ElementPointer(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawElementArray(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawElementArray(PrimitiveType mode, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int primcount)
            {
                fixed (int* first_ptr = first)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiDrawElementArray(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawElementArray(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawElementArray(PrimitiveType mode, int[] first, int[] count, int primcount)
            {
                fixed (int* first_ptr = first)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiDrawElementArray(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawElementArray(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawElementArray(PrimitiveType mode, in int first, in int count, int primcount)
            {
                fixed (int* first_ptr = &first)
                fixed (int* count_ptr = &count)
                {
                    MultiDrawElementArray(mode, first_ptr, count_ptr, primcount);
                }
            }
            /// <inheritdoc cref="MultiDrawRangeElementArray(PrimitiveType, uint, uint, int*, int*, int)"/>
            public static unsafe void MultiDrawRangeElementArray(PrimitiveType mode, uint start, uint end, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int primcount)
            {
                fixed (int* first_ptr = first)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiDrawRangeElementArray(mode, start, end, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawRangeElementArray(PrimitiveType, uint, uint, int*, int*, int)"/>
            public static unsafe void MultiDrawRangeElementArray(PrimitiveType mode, uint start, uint end, int[] first, int[] count, int primcount)
            {
                fixed (int* first_ptr = first)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiDrawRangeElementArray(mode, start, end, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawRangeElementArray(PrimitiveType, uint, uint, int*, int*, int)"/>
            public static unsafe void MultiDrawRangeElementArray(PrimitiveType mode, uint start, uint end, in int first, in int count, int primcount)
            {
                fixed (int* first_ptr = &first)
                fixed (int* count_ptr = &count)
                {
                    MultiDrawRangeElementArray(mode, start, end, first_ptr, count_ptr, primcount);
                }
            }
            /// <inheritdoc cref="GenFences(int, uint*)"/>
            public static unsafe void GenFences(Span<uint> fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    GenFences(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenFences(int, uint*)"/>
            public static unsafe void GenFences(uint[] fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    GenFences(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenFences(int, uint*)"/>
            public static unsafe void GenFences(int n, ref uint fences)
            {
                fixed (uint* fences_ptr = &fences)
                {
                    GenFences(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFences(int, uint*)"/>
            public static unsafe void DeleteFences(ReadOnlySpan<uint> fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    DeleteFences(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFences(int, uint*)"/>
            public static unsafe void DeleteFences(uint[] fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    DeleteFences(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFences(int, uint*)"/>
            public static unsafe void DeleteFences(int n, in uint fences)
            {
                fixed (uint* fences_ptr = &fences)
                {
                    DeleteFences(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameteriv(All, uint, All, int*)"/>
            public static unsafe void GetObjectParameteriv(All objectType, uint name, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectParameteriv(objectType, name, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameteriv(All, uint, All, int*)"/>
            public static unsafe void GetObjectParameteriv(All objectType, uint name, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectParameteriv(objectType, name, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameteriv(All, uint, All, int*)"/>
            public static unsafe void GetObjectParameteriv(All objectType, uint name, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetObjectParameteriv(objectType, name, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureRange(All, int, void*)"/>
            public static unsafe void TextureRange(All target, int length, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                TextureRange(target, length, pointer_vptr);
            }
            /// <inheritdoc cref="TextureRange(All, int, void*)"/>
            public static unsafe void TextureRange<T1>(All target, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    TextureRange(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TextureRange(All, int, void*)"/>
            public static unsafe void TextureRange<T1>(All target, T1[] pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    TextureRange(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TextureRange(All, int, void*)"/>
            public static unsafe void TextureRange<T1>(All target, int length, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    TextureRange(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
            public static unsafe void DeleteVertexArrays(ReadOnlySpan<int> arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    DeleteVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
            public static unsafe void DeleteVertexArrays(int[] arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    DeleteVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
            public static unsafe void DeleteVertexArrays(int n, in int arrays)
            {
                fixed (int* arrays_ptr = &arrays)
                {
                    DeleteVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe void GenVertexArrays(Span<int> arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    GenVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe void GenVertexArrays(int[] arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    GenVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe void GenVertexArrays(int n, ref int arrays)
            {
                fixed (int* arrays_ptr = &arrays)
                {
                    GenVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRange(int, void*)"/>
            public static unsafe void VertexArrayRange(int length, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexArrayRange(length, pointer_vptr);
            }
            /// <inheritdoc cref="VertexArrayRange(int, void*)"/>
            public static unsafe void VertexArrayRange<T1>(Span<T1> pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    VertexArrayRange(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRange(int, void*)"/>
            public static unsafe void VertexArrayRange<T1>(T1[] pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    VertexArrayRange(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRange(int, void*)"/>
            public static unsafe void VertexArrayRange<T1>(int length, ref T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexArrayRange(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FlushVertexArrayRange(int, void*)"/>
            public static unsafe void FlushVertexArrayRange(int length, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                FlushVertexArrayRange(length, pointer_vptr);
            }
            /// <inheritdoc cref="FlushVertexArrayRange(int, void*)"/>
            public static unsafe void FlushVertexArrayRange<T1>(Span<T1> pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    FlushVertexArrayRange(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FlushVertexArrayRange(int, void*)"/>
            public static unsafe void FlushVertexArrayRange<T1>(T1[] pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    FlushVertexArrayRange(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FlushVertexArrayRange(int, void*)"/>
            public static unsafe void FlushVertexArrayRange<T1>(int length, ref T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    FlushVertexArrayRange(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1d(uint, uint, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib1d(uint index, uint size, double u1, double u2, int stride, int order, ReadOnlySpan<double> points)
            {
                fixed (double* points_ptr = points)
                {
                    MapVertexAttrib1d(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1d(uint, uint, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib1d(uint index, uint size, double u1, double u2, int stride, int order, double[] points)
            {
                fixed (double* points_ptr = points)
                {
                    MapVertexAttrib1d(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1d(uint, uint, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib1d(uint index, uint size, double u1, double u2, int stride, int order, in double points)
            {
                fixed (double* points_ptr = &points)
                {
                    MapVertexAttrib1d(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1f(uint, uint, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib1f(uint index, uint size, float u1, float u2, int stride, int order, ReadOnlySpan<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    MapVertexAttrib1f(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1f(uint, uint, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib1f(uint index, uint size, float u1, float u2, int stride, int order, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    MapVertexAttrib1f(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1f(uint, uint, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib1f(uint index, uint size, float u1, float u2, int stride, int order, in float points)
            {
                fixed (float* points_ptr = &points)
                {
                    MapVertexAttrib1f(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2d(uint, uint, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib2d(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ReadOnlySpan<double> points)
            {
                fixed (double* points_ptr = points)
                {
                    MapVertexAttrib2d(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2d(uint, uint, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib2d(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points)
            {
                fixed (double* points_ptr = points)
                {
                    MapVertexAttrib2d(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2d(uint, uint, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib2d(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, in double points)
            {
                fixed (double* points_ptr = &points)
                {
                    MapVertexAttrib2d(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2f(uint, uint, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib2f(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ReadOnlySpan<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    MapVertexAttrib2f(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2f(uint, uint, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib2f(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    MapVertexAttrib2f(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2f(uint, uint, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib2f(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, in float points)
            {
                fixed (float* points_ptr = &points)
                {
                    MapVertexAttrib2f(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
        }
        public static unsafe partial class ARB
        {
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary(ReadOnlySpan<int> shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
            {
                int count = (int)(shaders.Length);
                fixed (int* shaders_ptr = shaders)
                {
                    void* binary_vptr = (void*)binary;
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary(int[] shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
            {
                int count = (int)(shaders.Length);
                fixed (int* shaders_ptr = shaders)
                {
                    void* binary_vptr = (void*)binary;
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary(int count, in int shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
            {
                fixed (int* shaders_ptr = &shaders)
                {
                    void* binary_vptr = (void*)binary;
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary<T1>(ReadOnlySpan<int> shaders, ShaderBinaryFormat binaryFormat, ReadOnlySpan<T1> binary)
                where T1 : unmanaged
            {
                int count = (int)(shaders.Length);
                fixed (int* shaders_ptr = shaders)
                {
                    int length = (int)(binary.Length * sizeof(T1));
                    fixed (void* binary_ptr = binary)
                    {
                        ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
                    }
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary<T1>(int[] shaders, ShaderBinaryFormat binaryFormat, T1[] binary)
                where T1 : unmanaged
            {
                int count = (int)(shaders.Length);
                fixed (int* shaders_ptr = shaders)
                {
                    int length = (int)(binary.Length * sizeof(T1));
                    fixed (void* binary_ptr = binary)
                    {
                        ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
                    }
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary<T1>(int count, in int shaders, ShaderBinaryFormat binaryFormat, in T1 binary, int length)
                where T1 : unmanaged
            {
                fixed (int* shaders_ptr = &shaders)
                fixed (void* binary_ptr = &binary)
                {
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
                }
            }
            /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
            public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, Span<int> range, Span<int> precision)
            {
                fixed (int* range_ptr = range)
                {
                    fixed (int* precision_ptr = precision)
                    {
                        GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
            public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, int[] range, int[] precision)
            {
                fixed (int* range_ptr = range)
                {
                    fixed (int* precision_ptr = precision)
                    {
                        GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
            public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, ref int range, ref int precision)
            {
                fixed (int* range_ptr = &range)
                fixed (int* precision_ptr = &precision)
                {
                    GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                }
            }
            /// <inheritdoc cref="DrawElementsInstancedBaseInstance(PrimitiveType, int, DrawElementsType, void*, int, uint)"/>
            public static unsafe void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, uint baseinstance)
            {
                void* indices = (void*)offset;
                DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
            }
            /// <inheritdoc cref="DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType, int, DrawElementsType, void*, int, int, uint)"/>
            public static unsafe void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, int basevertex, uint baseinstance)
            {
                void* indices = (void*)offset;
                DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
            }
            /// <inheritdoc cref="UniformHandleui64v(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64v(int location, ReadOnlySpan<ulong> value)
            {
                int count = (int)(value.Length);
                fixed (ulong* value_ptr = value)
                {
                    UniformHandleui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64v(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64v(int location, ulong[] value)
            {
                int count = (int)(value.Length);
                fixed (ulong* value_ptr = value)
                {
                    UniformHandleui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64v(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64v(int location, int count, in ulong value)
            {
                fixed (ulong* value_ptr = &value)
                {
                    UniformHandleui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64v(int program, int location, ReadOnlySpan<ulong> values)
            {
                int count = (int)(values.Length);
                fixed (ulong* values_ptr = values)
                {
                    ProgramUniformHandleui64v(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64v(int program, int location, ulong[] values)
            {
                int count = (int)(values.Length);
                fixed (ulong* values_ptr = values)
                {
                    ProgramUniformHandleui64v(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64v(int program, int location, int count, in ulong values)
            {
                fixed (ulong* values_ptr = &values)
                {
                    ProgramUniformHandleui64v(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1ui64v(uint, ulong*)"/>
            public static unsafe void VertexAttribL1ui64v(uint index, in ulong v)
            {
                fixed (ulong* v_ptr = &v)
                {
                    VertexAttribL1ui64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLui64v(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe void GetVertexAttribLui64v(uint index, VertexAttribEnum pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetVertexAttribLui64v(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="BindFragDataLocationIndexed(int, uint, uint, byte*)"/>
            public static unsafe void BindFragDataLocationIndexed(int program, uint colorNumber, uint index, string name)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                BindFragDataLocationIndexed(program, colorNumber, index, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="GetFragDataIndex(int, byte*)"/>
            public static unsafe int GetFragDataIndex(int program, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetFragDataIndex(program, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorage(BufferStorageTarget target, nint size, IntPtr data, BufferStorageMask flags)
            {
                void* data_vptr = (void*)data;
                BufferStorage(target, size, data_vptr, flags);
            }
            /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorage<T1>(BufferStorageTarget target, ReadOnlySpan<T1> data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    BufferStorage(target, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorage<T1>(BufferStorageTarget target, T1[] data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    BufferStorage(target, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorage<T1>(BufferStorageTarget target, nint size, in T1 data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    BufferStorage(target, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="CreateSyncFromCLevent(CLContext*, CLEvent*, uint)"/>
            public static unsafe GLSync CreateSyncFromCLevent(ref CLContext context, ref CLEvent @event, uint flags)
            {
                GLSync returnValue;
                fixed (CLContext* context_ptr = &context)
                fixed (CLEvent* @event_ptr = &@event)
                {
                    returnValue = CreateSyncFromCLevent(context_ptr, @event_ptr, flags);
                }
                return returnValue;
            }
            /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearBufferData(target, internalformat, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearBufferData(target, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearBufferData(target, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearBufferData(target, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearBufferSubData(target, internalformat, offset, size, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferSubData<T1>(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferSubData<T1>(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferSubData(BufferTargetARB, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferSubData<T1>(BufferTargetARB target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexImage(int texture, int level, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearTexImage(texture, level, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearTexImage(texture, level, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearTexImage(texture, level, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearTexImage(texture, level, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, ReadOnlySpan<uint> ids, bool enabled)
            {
                int count = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, uint[] ids, bool enabled)
            {
                int count = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, in uint ids, bool enabled)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageInsert(DebugSource, DebugType, uint, DebugSeverity, int, byte*)"/>
            public static unsafe void DebugMessageInsert(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
            {
                byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
                DebugMessageInsert(source, type, id, severity, length, buf_ptr);
                Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
            }
            /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallback(GLDebugProcARB callback, IntPtr userParam)
            {
                void* userParam_vptr = (void*)userParam;
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallback(callback_ptr, userParam_vptr);
            }
            /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallback<T1>(GLDebugProcARB callback, ReadOnlySpan<T1> userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallback(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallback<T1>(GLDebugProcARB callback, T1[] userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallback(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallback<T1>(GLDebugProcARB callback, in T1 userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = &userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallback(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, Span<DebugSource> sources, Span<DebugType> types, Span<uint> ids, Span<DebugSeverity> severities, Span<int> lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = sources)
                {
                    fixed (DebugType* types_ptr = types)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugSeverity* severities_ptr = severities)
                            {
                                fixed (int* lengths_ptr = lengths)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, DebugSource[] sources, DebugType[] types, uint[] ids, DebugSeverity[] severities, int[] lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = sources)
                {
                    fixed (DebugType* types_ptr = types)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugSeverity* severities_ptr = severities)
                            {
                                fixed (int* lengths_ptr = lengths)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = &sources)
                fixed (DebugType* types_ptr = &types)
                fixed (uint* ids_ptr = &ids)
                fixed (DebugSeverity* severities_ptr = &severities)
                fixed (int* lengths_ptr = &lengths)
                {
                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
            public static unsafe int CreateTransformFeedback()
            {
                int id;
                int n = 1;
                Unsafe.SkipInit(out id);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* ids_handle = (int*)Unsafe.AsPointer(ref id);
                CreateTransformFeedbacks(n, ids_handle);
                return id;
            }
            /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
            public static unsafe void CreateTransformFeedback(out int id)
            {
                int n = 1;
                Unsafe.SkipInit(out id);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* ids_handle = (int*)Unsafe.AsPointer(ref id);
                CreateTransformFeedbacks(n, ids_handle);
            }
            /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
            public static unsafe void CreateTransformFeedbacks(Span<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    CreateTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
            public static unsafe void CreateTransformFeedbacks(int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    CreateTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
            public static unsafe void CreateTransformFeedbacks(int n, ref int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    CreateTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackiv(int, TransformFeedbackPName, int*)"/>
            public static unsafe void GetTransformFeedbacki(int xfb, TransformFeedbackPName pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetTransformFeedbackiv(xfb, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbacki_v(int, TransformFeedbackPName, uint, int*)"/>
            public static unsafe void GetTransformFeedback(int xfb, TransformFeedbackPName pname, uint index, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetTransformFeedbacki_v(xfb, pname, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbacki64_v(int, TransformFeedbackPName, uint, long*)"/>
            public static unsafe void GetTransformFeedbacki64_(int xfb, TransformFeedbackPName pname, uint index, ref long param)
            {
                fixed (long* param_ptr = &param)
                {
                    GetTransformFeedbacki64_v(xfb, pname, index, param_ptr);
                }
            }
            /// <inheritdoc cref="CreateBuffers(int, int*)"/>
            public static unsafe int CreateBuffer()
            {
                int buffer;
                int n = 1;
                Unsafe.SkipInit(out buffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* buffers_handle = (int*)Unsafe.AsPointer(ref buffer);
                CreateBuffers(n, buffers_handle);
                return buffer;
            }
            /// <inheritdoc cref="CreateBuffers(int, int*)"/>
            public static unsafe void CreateBuffer(out int buffer)
            {
                int n = 1;
                Unsafe.SkipInit(out buffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* buffers_handle = (int*)Unsafe.AsPointer(ref buffer);
                CreateBuffers(n, buffers_handle);
            }
            /// <inheritdoc cref="CreateBuffers(int, int*)"/>
            public static unsafe void CreateBuffers(Span<int> buffers)
            {
                int n = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    CreateBuffers(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateBuffers(int, int*)"/>
            public static unsafe void CreateBuffers(int[] buffers)
            {
                int n = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    CreateBuffers(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateBuffers(int, int*)"/>
            public static unsafe void CreateBuffers(int n, ref int buffers)
            {
                fixed (int* buffers_ptr = &buffers)
                {
                    CreateBuffers(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage(int buffer, nint size, IntPtr data, BufferStorageMask flags)
            {
                void* data_vptr = (void*)data;
                NamedBufferStorage(buffer, size, data_vptr, flags);
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage<T1>(int buffer, ReadOnlySpan<T1> data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferStorage(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage<T1>(int buffer, T1[] data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferStorage(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage<T1>(int buffer, nint size, in T1 data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferStorage(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferData(int buffer, nint size, IntPtr data, VertexBufferObjectUsage usage)
            {
                void* data_vptr = (void*)data;
                NamedBufferData(buffer, size, data_vptr, usage);
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferData<T1>(int buffer, ReadOnlySpan<T1> data, VertexBufferObjectUsage usage)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferData(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferData<T1>(int buffer, T1[] data, VertexBufferObjectUsage usage)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferData(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferData<T1>(int buffer, nint size, in T1 data, VertexBufferObjectUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferData(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData(int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                NamedBufferSubData(buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, T1[] data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearNamedBufferData(buffer, internalformat, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameteriv(int, BufferPNameARB, int*)"/>
            public static unsafe void GetNamedBufferParameteri(int buffer, BufferPNameARB pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedBufferParameteriv(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameteri64v(int, BufferPNameARB, long*)"/>
            public static unsafe void GetNamedBufferParameteri64(int buffer, BufferPNameARB pname, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetNamedBufferParameteri64v(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferPointerv(int, BufferPointerNameARB, void**)"/>
            public static unsafe void GetNamedBufferPointer(int buffer, BufferPointerNameARB pname, void** parameters)
            {
                GetNamedBufferPointerv(buffer, pname, parameters);
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData(int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                GetNamedBufferSubData(buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, Span<T1> data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    GetNamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, T1[] data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    GetNamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    GetNamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
            public static unsafe int CreateFramebuffer()
            {
                int framebuffer;
                int n = 1;
                Unsafe.SkipInit(out framebuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
                CreateFramebuffers(n, framebuffers_handle);
                return framebuffer;
            }
            /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
            public static unsafe void CreateFramebuffer(out int framebuffer)
            {
                int n = 1;
                Unsafe.SkipInit(out framebuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
                CreateFramebuffers(n, framebuffers_handle);
            }
            /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
            public static unsafe void CreateFramebuffers(Span<int> framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    CreateFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
            public static unsafe void CreateFramebuffers(int[] framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    CreateFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
            public static unsafe void CreateFramebuffers(int n, ref int framebuffers)
            {
                fixed (int* framebuffers_ptr = &framebuffers)
                {
                    CreateFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
            public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, ReadOnlySpan<ColorBuffer> bufs)
            {
                int n = (int)(bufs.Length);
                fixed (ColorBuffer* bufs_ptr = bufs)
                {
                    NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
            public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, ColorBuffer[] bufs)
            {
                int n = (int)(bufs.Length);
                fixed (ColorBuffer* bufs_ptr = bufs)
                {
                    NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
            public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, int n, in ColorBuffer bufs)
            {
                fixed (ColorBuffer* bufs_ptr = &bufs)
                {
                    NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
            public static unsafe void InvalidateNamedFramebufferData(int framebuffer, ReadOnlySpan<FramebufferAttachment> attachments)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (FramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
            public static unsafe void InvalidateNamedFramebufferData(int framebuffer, FramebufferAttachment[] attachments)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (FramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
            public static unsafe void InvalidateNamedFramebufferData(int framebuffer, int numAttachments, in FramebufferAttachment attachments)
            {
                fixed (FramebufferAttachment* attachments_ptr = &attachments)
                {
                    InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, ReadOnlySpan<FramebufferAttachment> attachments, int x, int y, int width, int height)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (FramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, FramebufferAttachment[] attachments, int x, int y, int width, int height)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (FramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, int numAttachments, in FramebufferAttachment attachments, int x, int y, int width, int height)
            {
                fixed (FramebufferAttachment* attachments_ptr = &attachments)
                {
                    InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
            public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<int> value)
            {
                fixed (int* value_ptr = value)
                {
                    ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
            public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, int[] value)
            {
                fixed (int* value_ptr = value)
                {
                    ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
            public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, in int value)
            {
                fixed (int* value_ptr = &value)
                {
                    ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
            public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
            public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
            public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
            public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
            public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
            public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, in float value)
            {
                fixed (float* value_ptr = &value)
                {
                    ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferfi(int, Buffer, int, float, int)"/>
            public static unsafe void ClearNamedFramebuffer(int framebuffer, Buffer buffer, int drawbuffer, float depth, int stencil)
            {
                ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
            }
            /// <inheritdoc cref="GetNamedFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetNamedFramebufferParameteri(int framebuffer, GetFramebufferParameter pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetNamedFramebufferParameteriv(framebuffer, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameteriv(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetNamedFramebufferAttachmentParameteri(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
            public static unsafe int CreateRenderbuffer()
            {
                int renderbuffer;
                int n = 1;
                Unsafe.SkipInit(out renderbuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
                CreateRenderbuffers(n, renderbuffers_handle);
                return renderbuffer;
            }
            /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
            public static unsafe void CreateRenderbuffer(out int renderbuffer)
            {
                int n = 1;
                Unsafe.SkipInit(out renderbuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
                CreateRenderbuffers(n, renderbuffers_handle);
            }
            /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
            public static unsafe void CreateRenderbuffers(Span<int> renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    CreateRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
            public static unsafe void CreateRenderbuffers(int[] renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    CreateRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
            public static unsafe void CreateRenderbuffers(int n, ref int renderbuffers)
            {
                fixed (int* renderbuffers_ptr = &renderbuffers)
                {
                    CreateRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameteriv(int, RenderbufferParameterName, int*)"/>
            public static unsafe void GetNamedRenderbufferParameteri(int renderbuffer, RenderbufferParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedRenderbufferParameteriv(renderbuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
            public static unsafe int CreateTexture(TextureTarget target)
            {
                int texture;
                int n = 1;
                Unsafe.SkipInit(out texture);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* textures_handle = (int*)Unsafe.AsPointer(ref texture);
                CreateTextures(target, n, textures_handle);
                return texture;
            }
            /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
            public static unsafe void CreateTexture(TextureTarget target, out int texture)
            {
                int n = 1;
                Unsafe.SkipInit(out texture);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* textures_handle = (int*)Unsafe.AsPointer(ref texture);
                CreateTextures(target, n, textures_handle);
            }
            /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
            public static unsafe void CreateTextures(TextureTarget target, Span<int> textures)
            {
                int n = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    CreateTextures(target, n, textures_ptr);
                }
            }
            /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
            public static unsafe void CreateTextures(TextureTarget target, int[] textures)
            {
                int n = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    CreateTextures(target, n, textures_ptr);
                }
            }
            /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
            public static unsafe void CreateTextures(TextureTarget target, int n, ref int textures)
            {
                fixed (int* textures_ptr = &textures)
                {
                    CreateTextures(target, n, textures_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1D(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1D<T1>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterf(int texture, TextureParameterName pname, ReadOnlySpan<float> param)
            {
                fixed (float* param_ptr = param)
                {
                    TextureParameterfv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterf(int texture, TextureParameterName pname, float[] param)
            {
                fixed (float* param_ptr = param)
                {
                    TextureParameterfv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterf(int texture, TextureParameterName pname, in float param)
            {
                fixed (float* param_ptr = &param)
                {
                    TextureParameterfv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterIiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterIiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TextureParameterIiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TextureParameterIuiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TextureParameterIuiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    TextureParameterIuiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameteri(int texture, TextureParameterName pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    TextureParameteriv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameteri(int texture, TextureParameterName pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    TextureParameteriv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameteri(int texture, TextureParameterName pname, in int param)
            {
                fixed (int* param_ptr = &param)
                {
                    TextureParameteriv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureImage(int texture, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetTextureImage(texture, level, format, type, bufSize, pixels_vptr);
            }
            /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, Span<T1> pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, int bufSize, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureImage(int texture, int level, int bufSize, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetCompressedTextureImage(texture, level, bufSize, pixels_vptr);
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, Span<T1> pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, T1[] pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, int bufSize, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfv(int, int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureLevelParameterf(int texture, int level, GetTextureParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetTextureLevelParameterfv(texture, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameteriv(int, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureLevelParameteri(int texture, int level, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureLevelParameteriv(texture, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterfv(int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureParameterf(int texture, GetTextureParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetTextureParameterfv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIiv(int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterIi(int texture, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureParameterIiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIuiv(int, GetTextureParameter, uint*)"/>
            public static unsafe void GetTextureParameterIui(int texture, GetTextureParameter pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetTextureParameterIuiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameteriv(int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameteri(int texture, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureParameteriv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
            public static unsafe int CreateVertexArray()
            {
                int array;
                int n = 1;
                Unsafe.SkipInit(out array);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
                CreateVertexArrays(n, arrays_handle);
                return array;
            }
            /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
            public static unsafe void CreateVertexArray(out int array)
            {
                int n = 1;
                Unsafe.SkipInit(out array);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
                CreateVertexArrays(n, arrays_handle);
            }
            /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
            public static unsafe void CreateVertexArrays(Span<int> arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    CreateVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
            public static unsafe void CreateVertexArrays(int[] arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    CreateVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
            public static unsafe void CreateVertexArrays(int n, ref int arrays)
            {
                fixed (int* arrays_ptr = &arrays)
                {
                    CreateVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<int> strides)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (int* strides_ptr = strides)
                        {
                            VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, int[] buffers, IntPtr[] offsets, int[] strides)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (int* strides_ptr = strides)
                        {
                            VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, in int buffers, in IntPtr offsets, in int strides)
            {
                fixed (int* buffers_ptr = &buffers)
                fixed (IntPtr* offsets_ptr = &offsets)
                fixed (int* strides_ptr = &strides)
                {
                    VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayiv(int, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayi(int vaobj, VertexArrayPName pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetVertexArrayiv(vaobj, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIndexediv(int, uint, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayIndexedi(int vaobj, uint index, VertexArrayPName pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetVertexArrayIndexediv(vaobj, index, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIndexed64iv(int, uint, VertexArrayPName, long*)"/>
            public static unsafe void GetVertexArrayIndexed64i(int vaobj, uint index, VertexArrayPName pname, ref Vector4i param)
            {
                fixed (Vector4i* tmp_param = &param)
                {
                    long* param_ptr = (long*)tmp_param;
                    GetVertexArrayIndexed64iv(vaobj, index, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="CreateSamplers(int, int*)"/>
            public static unsafe int CreateSampler()
            {
                int sampler;
                int n = 1;
                Unsafe.SkipInit(out sampler);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
                CreateSamplers(n, samplers_handle);
                return sampler;
            }
            /// <inheritdoc cref="CreateSamplers(int, int*)"/>
            public static unsafe void CreateSampler(out int sampler)
            {
                int n = 1;
                Unsafe.SkipInit(out sampler);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
                CreateSamplers(n, samplers_handle);
            }
            /// <inheritdoc cref="CreateSamplers(int, int*)"/>
            public static unsafe void CreateSamplers(Span<int> samplers)
            {
                int n = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    CreateSamplers(n, samplers_ptr);
                }
            }
            /// <inheritdoc cref="CreateSamplers(int, int*)"/>
            public static unsafe void CreateSamplers(int[] samplers)
            {
                int n = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    CreateSamplers(n, samplers_ptr);
                }
            }
            /// <inheritdoc cref="CreateSamplers(int, int*)"/>
            public static unsafe void CreateSamplers(int n, ref int samplers)
            {
                fixed (int* samplers_ptr = &samplers)
                {
                    CreateSamplers(n, samplers_ptr);
                }
            }
            /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
            public static unsafe int CreateProgramPipeline()
            {
                int pipeline;
                int n = 1;
                Unsafe.SkipInit(out pipeline);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
                CreateProgramPipelines(n, pipelines_handle);
                return pipeline;
            }
            /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
            public static unsafe void CreateProgramPipeline(out int pipeline)
            {
                int n = 1;
                Unsafe.SkipInit(out pipeline);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
                CreateProgramPipelines(n, pipelines_handle);
            }
            /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
            public static unsafe void CreateProgramPipelines(Span<int> pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    CreateProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
            public static unsafe void CreateProgramPipelines(int[] pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    CreateProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
            public static unsafe void CreateProgramPipelines(int n, ref int pipelines)
            {
                fixed (int* pipelines_ptr = &pipelines)
                {
                    CreateProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
            public static unsafe int CreateQuery(QueryTarget target)
            {
                int id;
                int n = 1;
                Unsafe.SkipInit(out id);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* ids_handle = (int*)Unsafe.AsPointer(ref id);
                CreateQueries(target, n, ids_handle);
                return id;
            }
            /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
            public static unsafe void CreateQuery(QueryTarget target, out int id)
            {
                int n = 1;
                Unsafe.SkipInit(out id);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* ids_handle = (int*)Unsafe.AsPointer(ref id);
                CreateQueries(target, n, ids_handle);
            }
            /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
            public static unsafe void CreateQueries(QueryTarget target, Span<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    CreateQueries(target, n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
            public static unsafe void CreateQueries(QueryTarget target, int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    CreateQueries(target, n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
            public static unsafe void CreateQueries(QueryTarget target, int n, ref int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    CreateQueries(target, n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryBufferObjecti64v(int, int, QueryObjectParameterName, IntPtr)"/>
            public static unsafe void GetQueryBufferObjecti64(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
            {
                GetQueryBufferObjecti64v(id, buffer, pname, offset);
            }
            /// <inheritdoc cref="GetQueryBufferObjectiv(int, int, QueryObjectParameterName, IntPtr)"/>
            public static unsafe void GetQueryBufferObjecti(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
            {
                GetQueryBufferObjectiv(id, buffer, pname, offset);
            }
            /// <inheritdoc cref="GetQueryBufferObjectui64v(int, int, QueryObjectParameterName, IntPtr)"/>
            public static unsafe void GetQueryBufferObjectui64(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
            {
                GetQueryBufferObjectui64v(id, buffer, pname, offset);
            }
            /// <inheritdoc cref="GetQueryBufferObjectuiv(int, int, QueryObjectParameterName, IntPtr)"/>
            public static unsafe void GetQueryBufferObjectui(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
            {
                GetQueryBufferObjectuiv(id, buffer, pname, offset);
            }
            /// <inheritdoc cref="DrawBuffers(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffers(ReadOnlySpan<DrawBufferMode> bufs)
            {
                int n = (int)(bufs.Length);
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    DrawBuffers(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="DrawBuffers(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffers(DrawBufferMode[] bufs)
            {
                int n = (int)(bufs.Length);
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    DrawBuffers(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="DrawBuffers(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffers(int n, in DrawBufferMode bufs)
            {
                fixed (DrawBufferMode* bufs_ptr = &bufs)
                {
                    DrawBuffers(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="DrawElementsBaseVertex(PrimitiveType, int, DrawElementsType, void*, int)"/>
            public static unsafe void DrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint offset, int basevertex)
            {
                void* indices = (void*)offset;
                DrawElementsBaseVertex(mode, count, type, indices, basevertex);
            }
            /// <inheritdoc cref="DrawRangeElementsBaseVertex(PrimitiveType, uint, uint, int, DrawElementsType, void*, int)"/>
            public static unsafe void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint offset, int basevertex)
            {
                void* indices = (void*)offset;
                DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
            }
            /// <inheritdoc cref="DrawElementsInstancedBaseVertex(PrimitiveType, int, DrawElementsType, void*, int, int)"/>
            public static unsafe void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, int basevertex)
            {
                void* indices = (void*)offset;
                DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
            }
            /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
            public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int drawcount, ReadOnlySpan<int> basevertex)
            {
                fixed (int* count_ptr = count)
                {
                    fixed (int* basevertex_ptr = basevertex)
                    {
                        MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
            public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int drawcount, int[] basevertex)
            {
                fixed (int* count_ptr = count)
                {
                    fixed (int* basevertex_ptr = basevertex)
                    {
                        MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
            public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, in int count, DrawElementsType type, void** indices, int drawcount, in int basevertex)
            {
                fixed (int* count_ptr = &count)
                fixed (int* basevertex_ptr = &basevertex)
                {
                    MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                }
            }
            /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
            public static unsafe void DrawArraysIndirect(PrimitiveType mode, IntPtr indirect)
            {
                void* indirect_vptr = (void*)indirect;
                DrawArraysIndirect(mode, indirect_vptr);
            }
            /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
            public static unsafe void DrawArraysIndirect<T1>(PrimitiveType mode, in T1 indirect)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    DrawArraysIndirect(mode, indirect_ptr);
                }
            }
            /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
            public static unsafe void DrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect)
            {
                void* indirect_vptr = (void*)indirect;
                DrawElementsIndirect(mode, type, indirect_vptr);
            }
            /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
            public static unsafe void DrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    DrawElementsIndirect(mode, type, indirect_ptr);
                }
            }
            /// <inheritdoc cref="DrawElementsInstanced(PrimitiveType, int, DrawElementsType, void*, int)"/>
            public static unsafe void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, nint offset, int primcount)
            {
                void* indices = (void*)offset;
                DrawElementsInstanced(mode, count, type, indices, primcount);
            }
            /// <inheritdoc cref="ProgramString(ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void ProgramString(ProgramTarget target, ProgramFormat format, int len, IntPtr str)
            {
                void* str_vptr = (void*)str;
                ProgramString(target, format, len, str_vptr);
            }
            /// <inheritdoc cref="ProgramString(ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void ProgramString<T1>(ProgramTarget target, ProgramFormat format, ReadOnlySpan<T1> str)
                where T1 : unmanaged
            {
                int len = (int)(str.Length * sizeof(T1));
                fixed (void* str_ptr = str)
                {
                    ProgramString(target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="ProgramString(ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void ProgramString<T1>(ProgramTarget target, ProgramFormat format, T1[] str)
                where T1 : unmanaged
            {
                int len = (int)(str.Length * sizeof(T1));
                fixed (void* str_ptr = str)
                {
                    ProgramString(target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="ProgramString(ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void ProgramString<T1>(ProgramTarget target, ProgramFormat format, int len, in T1 str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = &str)
                {
                    ProgramString(target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="DeletePrograms(int, int*)"/>
            public static unsafe void DeletePrograms(ReadOnlySpan<int> programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    DeletePrograms(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeletePrograms(int, int*)"/>
            public static unsafe void DeletePrograms(int[] programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    DeletePrograms(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeletePrograms(int, int*)"/>
            public static unsafe void DeletePrograms(int n, in int programs)
            {
                fixed (int* programs_ptr = &programs)
                {
                    DeletePrograms(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenPrograms(int, int*)"/>
            public static unsafe void GenPrograms(Span<int> programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    GenPrograms(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenPrograms(int, int*)"/>
            public static unsafe void GenPrograms(int[] programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    GenPrograms(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenPrograms(int, int*)"/>
            public static unsafe void GenPrograms(int n, ref int programs)
            {
                fixed (int* programs_ptr = &programs)
                {
                    GenPrograms(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4dv(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramEnvParameter4dv(ProgramTarget target, uint index, ReadOnlySpan<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    ProgramEnvParameter4dv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4dv(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramEnvParameter4dv(ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    ProgramEnvParameter4dv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4dv(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramEnvParameter4dv(ProgramTarget target, uint index, in double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    ProgramEnvParameter4dv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4fv(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramEnvParameter4fv(ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramEnvParameter4fv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4fv(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramEnvParameter4fv(ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramEnvParameter4fv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4fv(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramEnvParameter4fv(ProgramTarget target, uint index, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ProgramEnvParameter4fv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4dv(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramLocalParameter4dv(ProgramTarget target, uint index, ReadOnlySpan<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    ProgramLocalParameter4dv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4dv(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramLocalParameter4dv(ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    ProgramLocalParameter4dv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4dv(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramLocalParameter4dv(ProgramTarget target, uint index, in double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    ProgramLocalParameter4dv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4fv(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramLocalParameter4fv(ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramLocalParameter4fv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4fv(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramLocalParameter4fv(ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramLocalParameter4fv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4fv(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramLocalParameter4fv(ProgramTarget target, uint index, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ProgramLocalParameter4fv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterdv(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramEnvParameterdv(ProgramTarget target, uint index, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterdv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterdv(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramEnvParameterdv(ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterdv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterdv(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramEnvParameterdv(ProgramTarget target, uint index, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetProgramEnvParameterdv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterfv(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramEnvParameterfv(ProgramTarget target, uint index, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterfv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterfv(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramEnvParameterfv(ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterfv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterfv(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramEnvParameterfv(ProgramTarget target, uint index, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetProgramEnvParameterfv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterdv(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramLocalParameterdv(ProgramTarget target, uint index, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterdv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterdv(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramLocalParameterdv(ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterdv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterdv(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramLocalParameterdv(ProgramTarget target, uint index, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetProgramLocalParameterdv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterfv(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramLocalParameterfv(ProgramTarget target, uint index, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterfv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterfv(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramLocalParameterfv(ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterfv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterfv(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramLocalParameterfv(ProgramTarget target, uint index, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetProgramLocalParameterfv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramiv(ProgramTarget, ProgramPropertyARB, int*)"/>
            public static unsafe void GetProgramiv(ProgramTarget target, ProgramPropertyARB pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramiv(ProgramTarget, ProgramPropertyARB, int*)"/>
            public static unsafe void GetProgramiv(ProgramTarget target, ProgramPropertyARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramiv(ProgramTarget, ProgramPropertyARB, int*)"/>
            public static unsafe void GetProgramiv(ProgramTarget target, ProgramPropertyARB pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramString(ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetProgramString(ProgramTarget target, ProgramStringProperty pname, IntPtr str)
            {
                void* str_vptr = (void*)str;
                GetProgramString(target, pname, str_vptr);
            }
            /// <inheritdoc cref="GetProgramString(ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetProgramString<T1>(ProgramTarget target, ProgramStringProperty pname, Span<T1> str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    GetProgramString(target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramString(ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetProgramString<T1>(ProgramTarget target, ProgramStringProperty pname, T1[] str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    GetProgramString(target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramString(ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetProgramString<T1>(ProgramTarget target, ProgramStringProperty pname, ref T1 str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = &str)
                {
                    GetProgramString(target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFramebufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
            public static unsafe void DeleteRenderbuffer(in int renderbuffer)
            {
                int n = 1;
                fixed(int* renderbuffers_handle = &renderbuffer)
                {
                    DeleteRenderbuffers(n, renderbuffers_handle);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
            public static unsafe void DeleteRenderbuffers(ReadOnlySpan<int> renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    DeleteRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
            public static unsafe void DeleteRenderbuffers(int[] renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    DeleteRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
            public static unsafe void DeleteRenderbuffers(int n, in int renderbuffers)
            {
                fixed (int* renderbuffers_ptr = &renderbuffers)
                {
                    DeleteRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe int GenRenderbuffer()
            {
                int renderbuffer;
                int n = 1;
                Unsafe.SkipInit(out renderbuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
                GenRenderbuffers(n, renderbuffers_handle);
                return renderbuffer;
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe void GenRenderbuffer(out int renderbuffer)
            {
                int n = 1;
                Unsafe.SkipInit(out renderbuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* renderbuffers_handle = (int*)Unsafe.AsPointer(ref renderbuffer);
                GenRenderbuffers(n, renderbuffers_handle);
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe void GenRenderbuffers(Span<int> renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    GenRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe void GenRenderbuffers(int[] renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    GenRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe void GenRenderbuffers(int n, ref int renderbuffers)
            {
                fixed (int* renderbuffers_ptr = &renderbuffers)
                {
                    GenRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetRenderbufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetRenderbufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetRenderbufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
            public static unsafe void DeleteFramebuffer(in int framebuffer)
            {
                int n = 1;
                fixed(int* framebuffers_handle = &framebuffer)
                {
                    DeleteFramebuffers(n, framebuffers_handle);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
            public static unsafe void DeleteFramebuffers(ReadOnlySpan<int> framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    DeleteFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
            public static unsafe void DeleteFramebuffers(int[] framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    DeleteFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
            public static unsafe void DeleteFramebuffers(int n, in int framebuffers)
            {
                fixed (int* framebuffers_ptr = &framebuffers)
                {
                    DeleteFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe int GenFramebuffer()
            {
                int framebuffer;
                int n = 1;
                Unsafe.SkipInit(out framebuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
                GenFramebuffers(n, framebuffers_handle);
                return framebuffer;
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe void GenFramebuffer(out int framebuffer)
            {
                int n = 1;
                Unsafe.SkipInit(out framebuffer);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* framebuffers_handle = (int*)Unsafe.AsPointer(ref framebuffer);
                GenFramebuffers(n, framebuffers_handle);
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe void GenFramebuffers(Span<int> framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    GenFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe void GenFramebuffers(int[] framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    GenFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe void GenFramebuffers(int n, ref int framebuffers)
            {
                fixed (int* framebuffers_ptr = &framebuffers)
                {
                    GenFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary(int program, int bufSize, Span<int> length, Span<All> binaryFormat, IntPtr binary)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (All* binaryFormat_ptr = binaryFormat)
                    {
                        void* binary_vptr = (void*)binary;
                        GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary(int program, int bufSize, int[] length, All[] binaryFormat, IntPtr binary)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (All* binaryFormat_ptr = binaryFormat)
                    {
                        void* binary_vptr = (void*)binary;
                        GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary(int program, int bufSize, ref int length, ref All binaryFormat, IntPtr binary)
            {
                fixed (int* length_ptr = &length)
                fixed (All* binaryFormat_ptr = &binaryFormat)
                {
                    void* binary_vptr = (void*)binary;
                    GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
                }
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary<T1>(int program, Span<int> length, Span<All> binaryFormat, Span<T1> binary)
                where T1 : unmanaged
            {
                fixed (int* length_ptr = length)
                {
                    fixed (All* binaryFormat_ptr = binaryFormat)
                    {
                        int bufSize = (int)(binary.Length * sizeof(T1));
                        fixed (void* binary_ptr = binary)
                        {
                            GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary<T1>(int program, int[] length, All[] binaryFormat, T1[] binary)
                where T1 : unmanaged
            {
                fixed (int* length_ptr = length)
                {
                    fixed (All* binaryFormat_ptr = binaryFormat)
                    {
                        int bufSize = (int)(binary.Length * sizeof(T1));
                        fixed (void* binary_ptr = binary)
                        {
                            GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary<T1>(int program, int bufSize, ref int length, ref All binaryFormat, ref T1 binary)
                where T1 : unmanaged
            {
                fixed (int* length_ptr = &length)
                fixed (All* binaryFormat_ptr = &binaryFormat)
                fixed (void* binary_ptr = &binary)
                {
                    GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
            public static unsafe void ProgramBinary(int program, All binaryFormat, IntPtr binary, int length)
            {
                void* binary_vptr = (void*)binary;
                ProgramBinary(program, binaryFormat, binary_vptr, length);
            }
            /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
            public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, ReadOnlySpan<T1> binary)
                where T1 : unmanaged
            {
                int length = (int)(binary.Length * sizeof(T1));
                fixed (void* binary_ptr = binary)
                {
                    ProgramBinary(program, binaryFormat, binary_ptr, length);
                }
            }
            /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
            public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, T1[] binary)
                where T1 : unmanaged
            {
                int length = (int)(binary.Length * sizeof(T1));
                fixed (void* binary_ptr = binary)
                {
                    ProgramBinary(program, binaryFormat, binary_ptr, length);
                }
            }
            /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
            public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, in T1 binary, int length)
                where T1 : unmanaged
            {
                fixed (void* binary_ptr = &binary)
                {
                    ProgramBinary(program, binaryFormat, binary_ptr, length);
                }
            }
            /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_vptr);
            }
            /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, Span<T1> pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_vptr);
            }
            /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, Span<T1> pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, T1[] pixels)
                where T1 : unmanaged
            {
                int bufSize = (int)(pixels.Length * sizeof(T1));
                fixed (void* pixels_ptr = pixels)
                {
                    GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="SpecializeShader(int, byte*, uint, uint*, uint*)"/>
            public static unsafe void SpecializeShader(int shader, string pEntryPoint, uint numSpecializationConstants, in uint pConstantIndex, in uint pConstantValue)
            {
                fixed (uint* pConstantIndex_ptr = &pConstantIndex)
                fixed (uint* pConstantValue_ptr = &pConstantValue)
                {
                    byte* pEntryPoint_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(pEntryPoint);
                    SpecializeShader(shader, pEntryPoint_ptr, numSpecializationConstants, pConstantIndex_ptr, pConstantValue_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)pEntryPoint_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
            public static unsafe void Uniform1d(int location, int count, in double value)
            {
                fixed (double* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform1dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
            public static unsafe void Uniform1d(int location, int count, ReadOnlySpan<double> value)
            {
                fixed (double* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform1dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
            public static unsafe void Uniform1d(int location, int count, double[] value)
            {
                fixed (double* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform1dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
            public static unsafe void Uniform2d(int location, int count, in Vector2d value)
            {
                fixed (Vector2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform2dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
            public static unsafe void Uniform2d(int location, int count, ReadOnlySpan<Vector2d> value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform2dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
            public static unsafe void Uniform2d(int location, int count, Vector2d[] value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform2dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
            public static unsafe void Uniform3d(int location, int count, in Vector3d value)
            {
                fixed (Vector3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform3dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
            public static unsafe void Uniform3d(int location, int count, ReadOnlySpan<Vector3d> value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform3dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
            public static unsafe void Uniform3d(int location, int count, Vector3d[] value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform3dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
            public static unsafe void Uniform4d(int location, int count, in Vector4d value)
            {
                fixed (Vector4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform4dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
            public static unsafe void Uniform4d(int location, int count, ReadOnlySpan<Vector4d> value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform4dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
            public static unsafe void Uniform4d(int location, int count, Vector4d[] value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform4dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2d(int location, int count, bool transpose, in Matrix2d value)
            {
                fixed (Matrix2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2d(int location, int count, bool transpose, ReadOnlySpan<Matrix2d> value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2d(int location, int count, bool transpose, Matrix2d[] value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3d(int location, int count, bool transpose, in Matrix3d value)
            {
                fixed (Matrix3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3d(int location, int count, bool transpose, ReadOnlySpan<Matrix3d> value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3d(int location, int count, bool transpose, Matrix3d[] value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4d(int location, int count, bool transpose, in Matrix4d value)
            {
                fixed (Matrix4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4d(int location, int count, bool transpose, ReadOnlySpan<Matrix4d> value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4d(int location, int count, bool transpose, Matrix4d[] value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, in Matrix2x3d value)
            {
                fixed (Matrix2x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, ReadOnlySpan<Matrix2x3d> value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, Matrix2x3d[] value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, in Matrix2x4d value)
            {
                fixed (Matrix2x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, ReadOnlySpan<Matrix2x4d> value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, Matrix2x4d[] value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, in Matrix3x2d value)
            {
                fixed (Matrix3x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, ReadOnlySpan<Matrix3x2d> value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, Matrix3x2d[] value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, in Matrix3x4d value)
            {
                fixed (Matrix3x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, ReadOnlySpan<Matrix3x4d> value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, Matrix3x4d[] value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, in Matrix4x2d value)
            {
                fixed (Matrix4x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, ReadOnlySpan<Matrix4x2d> value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, Matrix4x2d[] value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, in Matrix4x3d value)
            {
                fixed (Matrix4x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, ReadOnlySpan<Matrix4x3d> value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, Matrix4x3d[] value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
            public static unsafe void GetUniformd(int program, int location, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetUniformdv(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
            public static unsafe void GetUniformd(int program, int location, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetUniformdv(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
            public static unsafe void GetUniformd(int program, int location, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetUniformdv(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64v(int, int, long*)"/>
            public static unsafe void Uniform1i64v(int location, int count, in long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64v(int, int, long*)"/>
            public static unsafe void Uniform1i64v(int location, int count, ReadOnlySpan<long> value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64v(int, int, long*)"/>
            public static unsafe void Uniform1i64v(int location, int count, long[] value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64v(int, int, long*)"/>
            public static unsafe void Uniform2i64v(int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64v(int, int, long*)"/>
            public static unsafe void Uniform2i64v(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64v(int, int, long*)"/>
            public static unsafe void Uniform2i64v(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64v(int, int, long*)"/>
            public static unsafe void Uniform2i64v(int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64v(int, int, long*)"/>
            public static unsafe void Uniform2i64v(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64v(int, int, long*)"/>
            public static unsafe void Uniform2i64v(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64v(int, int, long*)"/>
            public static unsafe void Uniform3i64v(int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64v(int, int, long*)"/>
            public static unsafe void Uniform3i64v(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64v(int, int, long*)"/>
            public static unsafe void Uniform3i64v(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64v(int, int, long*)"/>
            public static unsafe void Uniform3i64v(int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64v(int, int, long*)"/>
            public static unsafe void Uniform3i64v(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64v(int, int, long*)"/>
            public static unsafe void Uniform3i64v(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64v(int, int, long*)"/>
            public static unsafe void Uniform4i64v(int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64v(int, int, long*)"/>
            public static unsafe void Uniform4i64v(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64v(int, int, long*)"/>
            public static unsafe void Uniform4i64v(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64v(int, int, long*)"/>
            public static unsafe void Uniform4i64v(int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64v(int, int, long*)"/>
            public static unsafe void Uniform4i64v(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64v(int, int, long*)"/>
            public static unsafe void Uniform4i64v(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64v(int location, int count, in ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64v(int location, int count, ReadOnlySpan<ulong> value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64v(int location, int count, ulong[] value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64v(int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64v(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64v(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64v(int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64v(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64v(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64v(int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64v(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64v(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64v(int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64v(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64v(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64v(int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64v(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64v(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64v(int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64v(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64v(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64v(int, int, long*)"/>
            public static unsafe void GetUniformi64v(int program, int location, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64v(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64v(int, int, long*)"/>
            public static unsafe void GetUniformi64v(int program, int location, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64v(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64v(int, int, long*)"/>
            public static unsafe void GetUniformi64v(int program, int location, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetUniformi64v(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64v(int, int, ulong*)"/>
            public static unsafe void GetUniformui64v(int program, int location, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64v(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64v(int, int, ulong*)"/>
            public static unsafe void GetUniformui64v(int program, int location, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64v(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64v(int, int, ulong*)"/>
            public static unsafe void GetUniformui64v(int program, int location, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetUniformui64v(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformi64v(int, int, int, long*)"/>
            public static unsafe void GetnUniformi64v(int program, int location, Span<long> parameters)
            {
                int bufSize = (int)(parameters.Length * 8);
                fixed (long* parameters_ptr = parameters)
                {
                    GetnUniformi64v(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformi64v(int, int, int, long*)"/>
            public static unsafe void GetnUniformi64v(int program, int location, long[] parameters)
            {
                int bufSize = (int)(parameters.Length * 8);
                fixed (long* parameters_ptr = parameters)
                {
                    GetnUniformi64v(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformi64v(int, int, int, long*)"/>
            public static unsafe void GetnUniformi64v(int program, int location, int bufSize, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetnUniformi64v(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformui64v(int, int, int, ulong*)"/>
            public static unsafe void GetnUniformui64v(int program, int location, Span<ulong> parameters)
            {
                int bufSize = (int)(parameters.Length * 8);
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetnUniformui64v(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformui64v(int, int, int, ulong*)"/>
            public static unsafe void GetnUniformui64v(int program, int location, ulong[] parameters)
            {
                int bufSize = (int)(parameters.Length * 8);
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetnUniformui64v(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformui64v(int, int, int, ulong*)"/>
            public static unsafe void GetnUniformui64v(int program, int location, int bufSize, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetnUniformui64v(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform1i64v(int program, int location, int count, in long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform1i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64v(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64v(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64v(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64v(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64v(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64v(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64v(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64v(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64v(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64v(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64v(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64v(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64v(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64v(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64v(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64v(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64v(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64v(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform1ui64v(int program, int location, int count, in ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform1ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64v(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64v(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64v(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64v(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64v(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64v(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64v(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64v(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64v(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64v(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64v(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64v(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64v(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64v(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64v(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64v(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64v(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64v(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
            {
                void* table_vptr = (void*)table;
                ColorTable(target, internalformat, width, format, type, table_vptr);
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable<T1>(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTable(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable<T1>(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTable(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable<T1>(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, in T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    ColorTable(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void ColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void ColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void ColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, IntPtr table)
            {
                void* table_vptr = (void*)table;
                GetColorTable(target, format, type, table_vptr);
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, Span<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    GetColorTable(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    GetColorTable(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, ref T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    GetColorTable(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ColorSubTable(target, start, count, format, type, data_vptr);
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ColorSubTable(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ColorSubTable(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ColorSubTable(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                ConvolutionFilter1D(target, internalformat, width, format, type, image_vptr);
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter1D(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter1D(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, in T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    ConvolutionFilter1D(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTarget, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                ConvolutionFilter2D(target, internalformat, width, height, format, type, image_vptr);
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTarget, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter2D(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTarget, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter2D(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTarget, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, in T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    ConvolutionFilter2D(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                GetConvolutionFilter(target, format, type, image_vptr);
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, Span<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    GetConvolutionFilter(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    GetConvolutionFilter(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, ref T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    GetConvolutionFilter(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter(SeparableTargetEXT target, PixelFormat format, PixelType type, IntPtr row, IntPtr column, IntPtr span)
            {
                void* row_vptr = (void*)row;
                void* column_vptr = (void*)column;
                void* span_vptr = (void*)span;
                GetSeparableFilter(target, format, type, row_vptr, column_vptr, span_vptr);
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, Span<T3> row, Span<T2> column, Span<T1> span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* span_ptr = span)
                        {
                            GetSeparableFilter(target, format, type, row_ptr, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, T3[] row, T2[] column, T1[] span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* span_ptr = span)
                        {
                            GetSeparableFilter(target, format, type, row_ptr, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, ref T1 row, ref T2 column, ref T3 span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                fixed (void* span_ptr = &span)
                {
                    GetSeparableFilter(target, format, type, row_ptr, column_ptr, span_ptr);
                }
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column)
            {
                void* row_vptr = (void*)row;
                void* column_vptr = (void*)column;
                SeparableFilter2D(target, internalformat, width, height, format, type, row_vptr, column_vptr);
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T2> row, ReadOnlySpan<T1> column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        SeparableFilter2D(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T2[] row, T1[] column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        SeparableFilter2D(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, in T1 row, in T2 column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                {
                    SeparableFilter2D(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetHistogram(target, reset, format, type, values_vptr);
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetHistogram(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetHistogram(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, ref T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetHistogram(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfv(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterf(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetHistogramParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfv(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterf(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetHistogramParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfv(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterf(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetHistogramParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameteriv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameteri(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameteriv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameteri(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameteriv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameteri(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetHistogramParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetMinmax(target, reset, format, type, values_vptr);
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetMinmax(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetMinmax(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, ref T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetMinmax(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterf(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMinmaxParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterf(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMinmaxParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterf(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMinmaxParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameteriv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameteri(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMinmaxParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameteriv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameteri(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMinmaxParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameteriv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameteri(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMinmaxParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectCount(PrimitiveType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectCount(PrimitiveType mode, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawArraysIndirectCount(mode, indirect_vptr, drawcount, maxdrawcount, stride);
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectCount(PrimitiveType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectCount<T1>(PrimitiveType mode, in T1 indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawArraysIndirectCount(mode, indirect_ptr, drawcount, maxdrawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectCount(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectCount(PrimitiveType mode, DrawElementsType type, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawElementsIndirectCount(mode, type, indirect_vptr, drawcount, maxdrawcount, stride);
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectCount(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectCount<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawElementsIndirectCount(mode, type, indirect_ptr, drawcount, maxdrawcount, stride);
                }
            }
            /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, Span<int> parameters)
            {
                int count = (int)(parameters.Length);
                fixed (int* parameters_ptr = parameters)
                {
                    GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int[] parameters)
            {
                int count = (int)(parameters.Length);
                fixed (int* parameters_ptr = parameters)
                {
                    GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
            public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, Span<long> parameters)
            {
                int count = (int)(parameters.Length);
                fixed (long* parameters_ptr = parameters)
                {
                    GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
            public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, long[] parameters)
            {
                int count = (int)(parameters.Length);
                fixed (long* parameters_ptr = parameters)
                {
                    GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
            public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
            public static unsafe void InvalidateFramebuffer(FramebufferTarget target, ReadOnlySpan<InvalidateFramebufferAttachment> attachments)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateFramebuffer(target, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
            public static unsafe void InvalidateFramebuffer(FramebufferTarget target, InvalidateFramebufferAttachment[] attachments)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateFramebuffer(target, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
            public static unsafe void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, in InvalidateFramebufferAttachment attachments)
            {
                fixed (InvalidateFramebufferAttachment* attachments_ptr = &attachments)
                {
                    InvalidateFramebuffer(target, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, ReadOnlySpan<InvalidateFramebufferAttachment> attachments, int x, int y, int width, int height)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, InvalidateFramebufferAttachment[] attachments, int x, int y, int width, int height)
            {
                int numAttachments = (int)(attachments.Length);
                fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, in InvalidateFramebufferAttachment attachments, int x, int y, int width, int height)
            {
                fixed (InvalidateFramebufferAttachment* attachments_ptr = &attachments)
                {
                    InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="MatrixIndexubv(int, byte*)"/>
            public static unsafe void MatrixIndexubv(ReadOnlySpan<byte> indices)
            {
                int size = (int)(indices.Length);
                fixed (byte* indices_ptr = indices)
                {
                    MatrixIndexubv(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexubv(int, byte*)"/>
            public static unsafe void MatrixIndexubv(byte[] indices)
            {
                int size = (int)(indices.Length);
                fixed (byte* indices_ptr = indices)
                {
                    MatrixIndexubv(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexubv(int, byte*)"/>
            public static unsafe void MatrixIndexubv(int size, in byte indices)
            {
                fixed (byte* indices_ptr = &indices)
                {
                    MatrixIndexubv(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexusv(int, ushort*)"/>
            public static unsafe void MatrixIndexusv(ReadOnlySpan<ushort> indices)
            {
                int size = (int)(indices.Length);
                fixed (ushort* indices_ptr = indices)
                {
                    MatrixIndexusv(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexusv(int, ushort*)"/>
            public static unsafe void MatrixIndexusv(ushort[] indices)
            {
                int size = (int)(indices.Length);
                fixed (ushort* indices_ptr = indices)
                {
                    MatrixIndexusv(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexusv(int, ushort*)"/>
            public static unsafe void MatrixIndexusv(int size, in ushort indices)
            {
                fixed (ushort* indices_ptr = &indices)
                {
                    MatrixIndexusv(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexuiv(int, uint*)"/>
            public static unsafe void MatrixIndexuiv(ReadOnlySpan<uint> indices)
            {
                int size = (int)(indices.Length);
                fixed (uint* indices_ptr = indices)
                {
                    MatrixIndexuiv(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexuiv(int, uint*)"/>
            public static unsafe void MatrixIndexuiv(uint[] indices)
            {
                int size = (int)(indices.Length);
                fixed (uint* indices_ptr = indices)
                {
                    MatrixIndexuiv(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexuiv(int, uint*)"/>
            public static unsafe void MatrixIndexuiv(int size, in uint indices)
            {
                fixed (uint* indices_ptr = &indices)
                {
                    MatrixIndexuiv(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexPointer(int, MatrixIndexPointerTypeARB, int, void*)"/>
            public static unsafe void MatrixIndexPointer(int size, MatrixIndexPointerTypeARB type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                MatrixIndexPointer(size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="MatrixIndexPointer(int, MatrixIndexPointerTypeARB, int, void*)"/>
            public static unsafe void MatrixIndexPointer<T1>(int size, MatrixIndexPointerTypeARB type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    MatrixIndexPointer(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexPointer(int, MatrixIndexPointerTypeARB, int, void*)"/>
            public static unsafe void MatrixIndexPointer<T1>(int size, MatrixIndexPointerTypeARB type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    MatrixIndexPointer(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexPointer(int, MatrixIndexPointerTypeARB, int, void*)"/>
            public static unsafe void MatrixIndexPointer<T1>(int size, MatrixIndexPointerTypeARB type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    MatrixIndexPointer(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="BindBuffersBase(BufferTargetARB, uint, int, int*)"/>
            public static unsafe void BindBuffersBase(BufferTargetARB target, uint first, ReadOnlySpan<int> buffers)
            {
                int count = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    BindBuffersBase(target, first, count, buffers_ptr);
                }
            }
            /// <inheritdoc cref="BindBuffersBase(BufferTargetARB, uint, int, int*)"/>
            public static unsafe void BindBuffersBase(BufferTargetARB target, uint first, int[] buffers)
            {
                int count = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    BindBuffersBase(target, first, count, buffers_ptr);
                }
            }
            /// <inheritdoc cref="BindBuffersBase(BufferTargetARB, uint, int, int*)"/>
            public static unsafe void BindBuffersBase(BufferTargetARB target, uint first, int count, in int buffers)
            {
                fixed (int* buffers_ptr = &buffers)
                {
                    BindBuffersBase(target, first, count, buffers_ptr);
                }
            }
            /// <inheritdoc cref="BindBuffersRange(BufferTargetARB, uint, int, int*, IntPtr*, nint*)"/>
            public static unsafe void BindBuffersRange(BufferTargetARB target, uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<nint> sizes)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (nint* sizes_ptr = sizes)
                        {
                            BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="BindBuffersRange(BufferTargetARB, uint, int, int*, IntPtr*, nint*)"/>
            public static unsafe void BindBuffersRange(BufferTargetARB target, uint first, int count, int[] buffers, IntPtr[] offsets, nint[] sizes)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (nint* sizes_ptr = sizes)
                        {
                            BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="BindBuffersRange(BufferTargetARB, uint, int, int*, IntPtr*, nint*)"/>
            public static unsafe void BindBuffersRange(BufferTargetARB target, uint first, int count, in int buffers, in IntPtr offsets, in nint sizes)
            {
                fixed (int* buffers_ptr = &buffers)
                fixed (IntPtr* offsets_ptr = &offsets)
                fixed (nint* sizes_ptr = &sizes)
                {
                    BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
                }
            }
            /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
            public static unsafe void BindTextures(uint first, ReadOnlySpan<int> textures)
            {
                int count = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    BindTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
            public static unsafe void BindTextures(uint first, int[] textures)
            {
                int count = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    BindTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
            public static unsafe void BindTextures(uint first, int count, in int textures)
            {
                fixed (int* textures_ptr = &textures)
                {
                    BindTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
            public static unsafe void BindSamplers(uint first, ReadOnlySpan<int> samplers)
            {
                int count = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    BindSamplers(first, count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
            public static unsafe void BindSamplers(uint first, int[] samplers)
            {
                int count = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    BindSamplers(first, count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
            public static unsafe void BindSamplers(uint first, int count, in int samplers)
            {
                fixed (int* samplers_ptr = &samplers)
                {
                    BindSamplers(first, count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
            public static unsafe void BindImageTextures(uint first, ReadOnlySpan<int> textures)
            {
                int count = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    BindImageTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
            public static unsafe void BindImageTextures(uint first, int[] textures)
            {
                int count = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    BindImageTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
            public static unsafe void BindImageTextures(uint first, int count, in int textures)
            {
                fixed (int* textures_ptr = &textures)
                {
                    BindImageTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void BindVertexBuffers(uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<int> strides)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (int* strides_ptr = strides)
                        {
                            BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void BindVertexBuffers(uint first, int count, int[] buffers, IntPtr[] offsets, int[] strides)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (int* strides_ptr = strides)
                        {
                            BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void BindVertexBuffers(uint first, int count, in int buffers, in IntPtr offsets, in int strides)
            {
                fixed (int* buffers_ptr = &buffers)
                fixed (IntPtr* offsets_ptr = &offsets)
                fixed (int* strides_ptr = &strides)
                {
                    BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect(PrimitiveType mode, IntPtr indirect, int drawcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawArraysIndirect(mode, indirect_vptr, drawcount, stride);
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, ReadOnlySpan<T1> indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, T1[] indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, in T1 indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawElementsIndirect(mode, type, indirect_vptr, drawcount, stride);
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, T1[] indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1dv(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord1dv(TextureUnit target, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord1dv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1dv(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord1dv(TextureUnit target, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord1dv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1dv(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord1dv(TextureUnit target, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    MultiTexCoord1dv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1fv(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord1fv(TextureUnit target, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord1fv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1fv(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord1fv(TextureUnit target, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord1fv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1fv(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord1fv(TextureUnit target, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MultiTexCoord1fv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1iv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord1iv(TextureUnit target, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord1iv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1iv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord1iv(TextureUnit target, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord1iv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1iv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord1iv(TextureUnit target, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    MultiTexCoord1iv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1sv(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord1sv(TextureUnit target, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord1sv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1sv(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord1sv(TextureUnit target, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord1sv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1sv(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord1sv(TextureUnit target, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    MultiTexCoord1sv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2dv(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord2dv(TextureUnit target, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord2dv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2dv(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord2dv(TextureUnit target, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord2dv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2dv(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord2dv(TextureUnit target, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    MultiTexCoord2dv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2fv(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord2fv(TextureUnit target, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord2fv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2fv(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord2fv(TextureUnit target, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord2fv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2fv(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord2fv(TextureUnit target, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MultiTexCoord2fv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2iv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2iv(TextureUnit target, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord2iv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2iv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2iv(TextureUnit target, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord2iv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2iv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2iv(TextureUnit target, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    MultiTexCoord2iv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2sv(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord2sv(TextureUnit target, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord2sv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2sv(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord2sv(TextureUnit target, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord2sv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2sv(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord2sv(TextureUnit target, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    MultiTexCoord2sv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3dv(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord3dv(TextureUnit target, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord3dv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3dv(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord3dv(TextureUnit target, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord3dv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3dv(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord3dv(TextureUnit target, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    MultiTexCoord3dv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3fv(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord3fv(TextureUnit target, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord3fv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3fv(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord3fv(TextureUnit target, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord3fv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3fv(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord3fv(TextureUnit target, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MultiTexCoord3fv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3iv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3iv(TextureUnit target, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord3iv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3iv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3iv(TextureUnit target, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord3iv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3iv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3iv(TextureUnit target, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    MultiTexCoord3iv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3sv(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord3sv(TextureUnit target, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord3sv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3sv(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord3sv(TextureUnit target, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord3sv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3sv(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord3sv(TextureUnit target, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    MultiTexCoord3sv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4dv(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord4dv(TextureUnit target, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord4dv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4dv(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord4dv(TextureUnit target, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord4dv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4dv(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord4dv(TextureUnit target, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    MultiTexCoord4dv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4fv(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord4fv(TextureUnit target, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord4fv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4fv(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord4fv(TextureUnit target, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord4fv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4fv(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord4fv(TextureUnit target, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MultiTexCoord4fv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4iv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4iv(TextureUnit target, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord4iv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4iv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4iv(TextureUnit target, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord4iv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4iv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4iv(TextureUnit target, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    MultiTexCoord4iv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4sv(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord4sv(TextureUnit target, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord4sv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4sv(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord4sv(TextureUnit target, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord4sv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4sv(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord4sv(TextureUnit target, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    MultiTexCoord4sv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="GenQueries(int, int*)"/>
            public static unsafe void GenQueries(Span<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    GenQueries(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenQueries(int, int*)"/>
            public static unsafe void GenQueries(int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    GenQueries(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenQueries(int, int*)"/>
            public static unsafe void GenQueries(int n, ref int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    GenQueries(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueries(int, int*)"/>
            public static unsafe void DeleteQueries(ReadOnlySpan<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    DeleteQueries(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueries(int, int*)"/>
            public static unsafe void DeleteQueries(int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    DeleteQueries(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueries(int, int*)"/>
            public static unsafe void DeleteQueries(int n, in int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    DeleteQueries(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryiv(QueryTarget, QueryParameterName, int*)"/>
            public static unsafe void GetQueryiv(QueryTarget target, QueryParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryiv(QueryTarget, QueryParameterName, int*)"/>
            public static unsafe void GetQueryiv(QueryTarget target, QueryParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryiv(QueryTarget, QueryParameterName, int*)"/>
            public static unsafe void GetQueryiv(QueryTarget target, QueryParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetQueryiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectiv(int, QueryObjectParameterName, int*)"/>
            public static unsafe void GetQueryObjectiv(int id, QueryObjectParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryObjectiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectiv(int, QueryObjectParameterName, int*)"/>
            public static unsafe void GetQueryObjectiv(int id, QueryObjectParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryObjectiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectiv(int, QueryObjectParameterName, int*)"/>
            public static unsafe void GetQueryObjectiv(int id, QueryObjectParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetQueryObjectiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectuiv(int, QueryObjectParameterName, uint*)"/>
            public static unsafe void GetQueryObjectuiv(int id, QueryObjectParameterName pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetQueryObjectuiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectuiv(int, QueryObjectParameterName, uint*)"/>
            public static unsafe void GetQueryObjectuiv(int id, QueryObjectParameterName pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetQueryObjectuiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectuiv(int, QueryObjectParameterName, uint*)"/>
            public static unsafe void GetQueryObjectuiv(int id, QueryObjectParameterName pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetQueryObjectuiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfv(PointParameterNameARB pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfv(PointParameterNameARB pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfv(PointParameterNameARB pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    PointParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
            public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
            public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
            public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramResourceIndex(int, ProgramInterface, byte*)"/>
            public static unsafe uint GetProgramResourceIndex(int program, ProgramInterface programInterface, string name)
            {
                uint returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetProgramResourceIndex(program, programInterface, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
            public static unsafe string GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, Span<int> length)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
            public static unsafe void GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, Span<int> length, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
            public static unsafe string GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, int[] length)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
            public static unsafe void GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, int[] length, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
            public static unsafe string GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, ref int length)
            {
                string name;
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
            public static unsafe void GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, ref int length, out string name)
            {
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
            public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, ReadOnlySpan<ProgramResourceProperty> props, Span<int> length, Span<int> parameters)
            {
                int propCount = (int)(props.Length);
                fixed (ProgramResourceProperty* props_ptr = props)
                {
                    fixed (int* length_ptr = length)
                    {
                        int count = (int)(parameters.Length);
                        fixed (int* parameters_ptr = parameters)
                        {
                            GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
            public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, ProgramResourceProperty[] props, int[] length, int[] parameters)
            {
                int propCount = (int)(props.Length);
                fixed (ProgramResourceProperty* props_ptr = props)
                {
                    fixed (int* length_ptr = length)
                    {
                        int count = (int)(parameters.Length);
                        fixed (int* parameters_ptr = parameters)
                        {
                            GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
            public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, int propCount, in ProgramResourceProperty props, int count, ref int length, ref int parameters)
            {
                fixed (ProgramResourceProperty* props_ptr = &props)
                fixed (int* length_ptr = &length)
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramResourceLocation(int, ProgramInterface, byte*)"/>
            public static unsafe int GetProgramResourceLocation(int program, ProgramInterface programInterface, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetProgramResourceLocation(program, programInterface, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetProgramResourceLocationIndex(int, ProgramInterface, byte*)"/>
            public static unsafe int GetProgramResourceLocationIndex(int program, ProgramInterface programInterface, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetProgramResourceLocationIndex(program, programInterface, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, IntPtr img)
            {
                void* img_vptr = (void*)img;
                GetnTexImage(target, level, format, type, bufSize, img_vptr);
            }
            /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, Span<T1> img)
                where T1 : unmanaged
            {
                int bufSize = (int)(img.Length * sizeof(T1));
                fixed (void* img_ptr = img)
                {
                    GetnTexImage(target, level, format, type, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, T1[] img)
                where T1 : unmanaged
            {
                int bufSize = (int)(img.Length * sizeof(T1));
                fixed (void* img_ptr = img)
                {
                    GetnTexImage(target, level, format, type, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, ref T1 img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = &img)
                {
                    GetnTexImage(target, level, format, type, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ReadnPixels(x, y, width, height, format, type, bufSize, data_vptr);
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, Span<T1> data)
                where T1 : unmanaged
            {
                int bufSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                int bufSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
            public static unsafe void GetnCompressedTexImage(TextureTarget target, int lod, int bufSize, IntPtr img)
            {
                void* img_vptr = (void*)img;
                GetnCompressedTexImage(target, lod, bufSize, img_vptr);
            }
            /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
            public static unsafe void GetnCompressedTexImage<T1>(TextureTarget target, int lod, Span<T1> img)
                where T1 : unmanaged
            {
                int bufSize = (int)(img.Length * sizeof(T1));
                fixed (void* img_ptr = img)
                {
                    GetnCompressedTexImage(target, lod, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
            public static unsafe void GetnCompressedTexImage<T1>(TextureTarget target, int lod, T1[] img)
                where T1 : unmanaged
            {
                int bufSize = (int)(img.Length * sizeof(T1));
                fixed (void* img_ptr = img)
                {
                    GetnCompressedTexImage(target, lod, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
            public static unsafe void GetnCompressedTexImage<T1>(TextureTarget target, int lod, int bufSize, ref T1 img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = &img)
                {
                    GetnCompressedTexImage(target, lod, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
            public static unsafe void GetnUniformfv(int program, int location, Span<float> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
            public static unsafe void GetnUniformfv(int program, int location, float[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
            public static unsafe void GetnUniformfv(int program, int location, int bufSize, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetnUniformfv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
            public static unsafe void GetnUniformiv(int program, int location, Span<int> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
            public static unsafe void GetnUniformiv(int program, int location, int[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
            public static unsafe void GetnUniformiv(int program, int location, int bufSize, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetnUniformiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuiv(int program, int location, Span<uint> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuiv(int program, int location, uint[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuiv(int program, int location, int bufSize, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetnUniformuiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformdv(int, int, int, double*)"/>
            public static unsafe void GetnUniformdv(int program, int location, Span<double> parameters)
            {
                int bufSize = (int)(parameters.Length * 8);
                fixed (double* parameters_ptr = parameters)
                {
                    GetnUniformdv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformdv(int, int, int, double*)"/>
            public static unsafe void GetnUniformdv(int program, int location, double[] parameters)
            {
                int bufSize = (int)(parameters.Length * 8);
                fixed (double* parameters_ptr = parameters)
                {
                    GetnUniformdv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformdv(int, int, int, double*)"/>
            public static unsafe void GetnUniformdv(int program, int location, int bufSize, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetnUniformdv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapdv(MapTarget, MapQuery, int, double*)"/>
            public static unsafe void GetnMapdv(MapTarget target, MapQuery query, Span<double> v)
            {
                int bufSize = (int)(v.Length * 8);
                fixed (double* v_ptr = v)
                {
                    GetnMapdv(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapdv(MapTarget, MapQuery, int, double*)"/>
            public static unsafe void GetnMapdv(MapTarget target, MapQuery query, double[] v)
            {
                int bufSize = (int)(v.Length * 8);
                fixed (double* v_ptr = v)
                {
                    GetnMapdv(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapdv(MapTarget, MapQuery, int, double*)"/>
            public static unsafe void GetnMapdv(MapTarget target, MapQuery query, int bufSize, ref double v)
            {
                fixed (double* v_ptr = &v)
                {
                    GetnMapdv(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapfv(MapTarget, MapQuery, int, float*)"/>
            public static unsafe void GetnMapfv(MapTarget target, MapQuery query, Span<float> v)
            {
                int bufSize = (int)(v.Length);
                fixed (float* v_ptr = v)
                {
                    GetnMapfv(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapfv(MapTarget, MapQuery, int, float*)"/>
            public static unsafe void GetnMapfv(MapTarget target, MapQuery query, float[] v)
            {
                int bufSize = (int)(v.Length);
                fixed (float* v_ptr = v)
                {
                    GetnMapfv(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapfv(MapTarget, MapQuery, int, float*)"/>
            public static unsafe void GetnMapfv(MapTarget target, MapQuery query, int bufSize, ref float v)
            {
                fixed (float* v_ptr = &v)
                {
                    GetnMapfv(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapiv(MapTarget, MapQuery, int, int*)"/>
            public static unsafe void GetnMapiv(MapTarget target, MapQuery query, Span<int> v)
            {
                int bufSize = (int)(v.Length);
                fixed (int* v_ptr = v)
                {
                    GetnMapiv(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapiv(MapTarget, MapQuery, int, int*)"/>
            public static unsafe void GetnMapiv(MapTarget target, MapQuery query, int[] v)
            {
                int bufSize = (int)(v.Length);
                fixed (int* v_ptr = v)
                {
                    GetnMapiv(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapiv(MapTarget, MapQuery, int, int*)"/>
            public static unsafe void GetnMapiv(MapTarget target, MapQuery query, int bufSize, ref int v)
            {
                fixed (int* v_ptr = &v)
                {
                    GetnMapiv(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapfv(PixelMap, int, float*)"/>
            public static unsafe void GetnPixelMapfv(PixelMap map, Span<float> values)
            {
                int bufSize = (int)(values.Length * 4);
                fixed (float* values_ptr = values)
                {
                    GetnPixelMapfv(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapfv(PixelMap, int, float*)"/>
            public static unsafe void GetnPixelMapfv(PixelMap map, float[] values)
            {
                int bufSize = (int)(values.Length * 4);
                fixed (float* values_ptr = values)
                {
                    GetnPixelMapfv(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapfv(PixelMap, int, float*)"/>
            public static unsafe void GetnPixelMapfv(PixelMap map, int bufSize, ref float values)
            {
                fixed (float* values_ptr = &values)
                {
                    GetnPixelMapfv(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapuiv(PixelMap, int, uint*)"/>
            public static unsafe void GetnPixelMapuiv(PixelMap map, Span<uint> values)
            {
                int bufSize = (int)(values.Length);
                fixed (uint* values_ptr = values)
                {
                    GetnPixelMapuiv(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapuiv(PixelMap, int, uint*)"/>
            public static unsafe void GetnPixelMapuiv(PixelMap map, uint[] values)
            {
                int bufSize = (int)(values.Length);
                fixed (uint* values_ptr = values)
                {
                    GetnPixelMapuiv(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapuiv(PixelMap, int, uint*)"/>
            public static unsafe void GetnPixelMapuiv(PixelMap map, int bufSize, ref uint values)
            {
                fixed (uint* values_ptr = &values)
                {
                    GetnPixelMapuiv(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapusv(PixelMap, int, ushort*)"/>
            public static unsafe void GetnPixelMapusv(PixelMap map, Span<ushort> values)
            {
                int bufSize = (int)(values.Length);
                fixed (ushort* values_ptr = values)
                {
                    GetnPixelMapusv(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapusv(PixelMap, int, ushort*)"/>
            public static unsafe void GetnPixelMapusv(PixelMap map, ushort[] values)
            {
                int bufSize = (int)(values.Length);
                fixed (ushort* values_ptr = values)
                {
                    GetnPixelMapusv(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapusv(PixelMap, int, ushort*)"/>
            public static unsafe void GetnPixelMapusv(PixelMap map, int bufSize, ref ushort values)
            {
                fixed (ushort* values_ptr = &values)
                {
                    GetnPixelMapusv(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPolygonStipple(int, byte*)"/>
            public static unsafe void GetnPolygonStipple(Span<byte> pattern)
            {
                int bufSize = (int)(pattern.Length);
                fixed (byte* pattern_ptr = pattern)
                {
                    GetnPolygonStipple(bufSize, pattern_ptr);
                }
            }
            /// <inheritdoc cref="GetnPolygonStipple(int, byte*)"/>
            public static unsafe void GetnPolygonStipple(byte[] pattern)
            {
                int bufSize = (int)(pattern.Length);
                fixed (byte* pattern_ptr = pattern)
                {
                    GetnPolygonStipple(bufSize, pattern_ptr);
                }
            }
            /// <inheritdoc cref="GetnPolygonStipple(int, byte*)"/>
            public static unsafe void GetnPolygonStipple(int bufSize, ref byte pattern)
            {
                fixed (byte* pattern_ptr = &pattern)
                {
                    GetnPolygonStipple(bufSize, pattern_ptr);
                }
            }
            /// <inheritdoc cref="GetnColorTable(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnColorTable(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr table)
            {
                void* table_vptr = (void*)table;
                GetnColorTable(target, format, type, bufSize, table_vptr);
            }
            /// <inheritdoc cref="GetnColorTable(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, Span<T1> table)
                where T1 : unmanaged
            {
                int bufSize = (int)(table.Length * sizeof(T1));
                fixed (void* table_ptr = table)
                {
                    GetnColorTable(target, format, type, bufSize, table_ptr);
                }
            }
            /// <inheritdoc cref="GetnColorTable(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                int bufSize = (int)(table.Length * sizeof(T1));
                fixed (void* table_ptr = table)
                {
                    GetnColorTable(target, format, type, bufSize, table_ptr);
                }
            }
            /// <inheritdoc cref="GetnColorTable(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, ref T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    GetnColorTable(target, format, type, bufSize, table_ptr);
                }
            }
            /// <inheritdoc cref="GetnConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr image)
            {
                void* image_vptr = (void*)image;
                GetnConvolutionFilter(target, format, type, bufSize, image_vptr);
            }
            /// <inheritdoc cref="GetnConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, Span<T1> image)
                where T1 : unmanaged
            {
                int bufSize = (int)(image.Length * sizeof(T1));
                fixed (void* image_ptr = image)
                {
                    GetnConvolutionFilter(target, format, type, bufSize, image_ptr);
                }
            }
            /// <inheritdoc cref="GetnConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                int bufSize = (int)(image.Length * sizeof(T1));
                fixed (void* image_ptr = image)
                {
                    GetnConvolutionFilter(target, format, type, bufSize, image_ptr);
                }
            }
            /// <inheritdoc cref="GetnConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, ref T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    GetnConvolutionFilter(target, format, type, bufSize, image_ptr);
                }
            }
            /// <inheritdoc cref="GetnSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
            public static unsafe void GetnSeparableFilter(SeparableTargetEXT target, PixelFormat format, PixelType type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span)
            {
                void* row_vptr = (void*)row;
                void* column_vptr = (void*)column;
                void* span_vptr = (void*)span;
                GetnSeparableFilter(target, format, type, rowBufSize, row_vptr, columnBufSize, column_vptr, span_vptr);
            }
            /// <inheritdoc cref="GetnSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
            public static unsafe void GetnSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, Span<T3> row, Span<T2> column, Span<T1> span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                int rowBufSize = (int)(row.Length * sizeof(T3));
                fixed (void* row_ptr = row)
                {
                    int columnBufSize = (int)(column.Length * sizeof(T2));
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* span_ptr = span)
                        {
                            GetnSeparableFilter(target, format, type, rowBufSize, row_ptr, columnBufSize, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetnSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
            public static unsafe void GetnSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, T3[] row, T2[] column, T1[] span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                int rowBufSize = (int)(row.Length * sizeof(T3));
                fixed (void* row_ptr = row)
                {
                    int columnBufSize = (int)(column.Length * sizeof(T2));
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* span_ptr = span)
                        {
                            GetnSeparableFilter(target, format, type, rowBufSize, row_ptr, columnBufSize, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetnSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
            public static unsafe void GetnSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, int rowBufSize, ref T1 row, int columnBufSize, ref T2 column, ref T3 span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                fixed (void* span_ptr = &span)
                {
                    GetnSeparableFilter(target, format, type, rowBufSize, row_ptr, columnBufSize, column_ptr, span_ptr);
                }
            }
            /// <inheritdoc cref="GetnHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnHistogram(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetnHistogram(target, reset, format, type, bufSize, values_vptr);
            }
            /// <inheritdoc cref="GetnHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                int bufSize = (int)(values.Length * sizeof(T1));
                fixed (void* values_ptr = values)
                {
                    GetnHistogram(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                int bufSize = (int)(values.Length * sizeof(T1));
                fixed (void* values_ptr = values)
                {
                    GetnHistogram(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, ref T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetnHistogram(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnMinmax(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetnMinmax(target, reset, format, type, bufSize, values_vptr);
            }
            /// <inheritdoc cref="GetnMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                int bufSize = (int)(values.Length * sizeof(T1));
                fixed (void* values_ptr = values)
                {
                    GetnMinmax(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                int bufSize = (int)(values.Length * sizeof(T1));
                fixed (void* values_ptr = values)
                {
                    GetnMinmax(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, ref T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetnMinmax(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferSampleLocationsfv(FramebufferTarget, uint, int, float*)"/>
            public static unsafe void FramebufferSampleLocationsfv(FramebufferTarget target, uint start, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    FramebufferSampleLocationsfv(target, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferSampleLocationsfv(int, uint, int, float*)"/>
            public static unsafe void NamedFramebufferSampleLocationsfv(int framebuffer, uint start, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    NamedFramebufferSampleLocationsfv(framebuffer, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="GenSamplers(int, int*)"/>
            public static unsafe int GenSampler()
            {
                int sampler;
                int count = 1;
                Unsafe.SkipInit(out sampler);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
                GenSamplers(count, samplers_handle);
                return sampler;
            }
            /// <inheritdoc cref="GenSamplers(int, int*)"/>
            public static unsafe void GenSampler(out int sampler)
            {
                int count = 1;
                Unsafe.SkipInit(out sampler);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* samplers_handle = (int*)Unsafe.AsPointer(ref sampler);
                GenSamplers(count, samplers_handle);
            }
            /// <inheritdoc cref="GenSamplers(int, int*)"/>
            public static unsafe void GenSamplers(Span<int> samplers)
            {
                int count = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    GenSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="GenSamplers(int, int*)"/>
            public static unsafe void GenSamplers(int[] samplers)
            {
                int count = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    GenSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="GenSamplers(int, int*)"/>
            public static unsafe void GenSamplers(int count, ref int samplers)
            {
                fixed (int* samplers_ptr = &samplers)
                {
                    GenSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
            public static unsafe void DeleteSampler(in int sampler)
            {
                int count = 1;
                fixed(int* samplers_handle = &sampler)
                {
                    DeleteSamplers(count, samplers_handle);
                }
            }
            /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
            public static unsafe void DeleteSamplers(ReadOnlySpan<int> samplers)
            {
                int count = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    DeleteSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
            public static unsafe void DeleteSamplers(int[] samplers)
            {
                int count = (int)(samplers.Length);
                fixed (int* samplers_ptr = samplers)
                {
                    DeleteSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
            public static unsafe void DeleteSamplers(int count, in int samplers)
            {
                fixed (int* samplers_ptr = &samplers)
                {
                    DeleteSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    SamplerParameteriv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    SamplerParameteriv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, in int param)
            {
                fixed (int* param_ptr = &param)
                {
                    SamplerParameteriv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, ReadOnlySpan<float> param)
            {
                fixed (float* param_ptr = param)
                {
                    SamplerParameterfv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, float[] param)
            {
                fixed (float* param_ptr = param)
                {
                    SamplerParameterfv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, in float param)
            {
                fixed (float* param_ptr = &param)
                {
                    SamplerParameterfv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    SamplerParameterIiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    SamplerParameterIiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, in int param)
            {
                fixed (int* param_ptr = &param)
                {
                    SamplerParameterIiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, ReadOnlySpan<uint> param)
            {
                fixed (uint* param_ptr = param)
                {
                    SamplerParameterIuiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, uint[] param)
            {
                fixed (uint* param_ptr = param)
                {
                    SamplerParameterIuiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, in uint param)
            {
                fixed (uint* param_ptr = &param)
                {
                    SamplerParameterIuiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetSamplerParameteriv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetSamplerParameteriv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetSamplerParameteriv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetSamplerParameterIiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetSamplerParameterIiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetSamplerParameterIiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetSamplerParameterfv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetSamplerParameterfv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetSamplerParameterfv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CreateShaderProgramv(ShaderType, int, byte**)"/>
            public static unsafe int CreateShaderProgram(ShaderType type, int count, byte** strings)
            {
                int returnValue;
                returnValue = CreateShaderProgramv(type, count, strings);
                return returnValue;
            }
            /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
            public static unsafe void DeleteProgramPipeline(in int pipeline)
            {
                int n = 1;
                fixed(int* pipelines_handle = &pipeline)
                {
                    DeleteProgramPipelines(n, pipelines_handle);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
            public static unsafe void DeleteProgramPipelines(ReadOnlySpan<int> pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    DeleteProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
            public static unsafe void DeleteProgramPipelines(int[] pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    DeleteProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
            public static unsafe void DeleteProgramPipelines(int n, in int pipelines)
            {
                fixed (int* pipelines_ptr = &pipelines)
                {
                    DeleteProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe int GenProgramPipeline()
            {
                int pipeline;
                int n = 1;
                Unsafe.SkipInit(out pipeline);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
                GenProgramPipelines(n, pipelines_handle);
                return pipeline;
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe void GenProgramPipeline(out int pipeline)
            {
                int n = 1;
                Unsafe.SkipInit(out pipeline);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* pipelines_handle = (int*)Unsafe.AsPointer(ref pipeline);
                GenProgramPipelines(n, pipelines_handle);
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe void GenProgramPipelines(Span<int> pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    GenProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe void GenProgramPipelines(int[] pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    GenProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe void GenProgramPipelines(int n, ref int pipelines)
            {
                fixed (int* pipelines_ptr = &pipelines)
                {
                    GenProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
            public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramPipelineiv(pipeline, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
            public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramPipelineiv(pipeline, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
            public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramPipelineiv(pipeline, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform1i(int program, int location, int count, in int value)
            {
                fixed (int* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform1iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform1f(int program, int location, int count, in float value)
            {
                fixed (float* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform1fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform1d(int program, int location, int count, in double value)
            {
                fixed (double* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform1dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform1ui(int program, int location, int count, in uint value)
            {
                fixed (uint* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform1uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2i(int program, int location, int count, in Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2i(int program, int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2i(int program, int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2d(int program, int location, int count, in Vector2d value)
            {
                fixed (Vector2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2d(int program, int location, int count, ReadOnlySpan<Vector2d> value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2d(int program, int location, int count, Vector2d[] value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2ui(int program, int location, int count, in Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2ui(int program, int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2ui(int program, int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3i(int program, int location, int count, in Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3i(int program, int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3i(int program, int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3d(int program, int location, int count, in Vector3d value)
            {
                fixed (Vector3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3d(int program, int location, int count, ReadOnlySpan<Vector3d> value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3d(int program, int location, int count, Vector3d[] value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3ui(int program, int location, int count, in Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3ui(int program, int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3ui(int program, int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4i(int program, int location, int count, in Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4i(int program, int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4i(int program, int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4d(int program, int location, int count, in Vector4d value)
            {
                fixed (Vector4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4d(int program, int location, int count, ReadOnlySpan<Vector4d> value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4d(int program, int location, int count, Vector4d[] value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4ui(int program, int location, int count, in Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4ui(int program, int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4ui(int program, int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, in Matrix2 value)
            {
                fixed (Matrix2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2> value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, Matrix2[] value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, in Matrix3 value)
            {
                fixed (Matrix3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3> value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, Matrix3[] value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, in Matrix4 value)
            {
                fixed (Matrix4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4> value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, Matrix4[] value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, in System.Numerics.Matrix4x4 value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix4x4> value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, System.Numerics.Matrix4x4[] value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, in Matrix2d value)
            {
                fixed (Matrix2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2d> value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, Matrix2d[] value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, in Matrix3d value)
            {
                fixed (Matrix3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3d> value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, Matrix3d[] value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, in Matrix4d value)
            {
                fixed (Matrix4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4d> value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, Matrix4d[] value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, in Matrix2x3 value)
            {
                fixed (Matrix2x3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3> value)
            {
                fixed (Matrix2x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, Matrix2x3[] value)
            {
                fixed (Matrix2x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, in Matrix3x2 value)
            {
                fixed (Matrix3x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2> value)
            {
                fixed (Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, Matrix3x2[] value)
            {
                fixed (Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, in System.Numerics.Matrix3x2 value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix3x2> value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, System.Numerics.Matrix3x2[] value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, in Matrix2x4 value)
            {
                fixed (Matrix2x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4> value)
            {
                fixed (Matrix2x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, Matrix2x4[] value)
            {
                fixed (Matrix2x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, in Matrix4x2 value)
            {
                fixed (Matrix4x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2> value)
            {
                fixed (Matrix4x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, Matrix4x2[] value)
            {
                fixed (Matrix4x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, in Matrix3x4 value)
            {
                fixed (Matrix3x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4> value)
            {
                fixed (Matrix3x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, Matrix3x4[] value)
            {
                fixed (Matrix3x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, in Matrix4x3 value)
            {
                fixed (Matrix4x3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3> value)
            {
                fixed (Matrix4x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, Matrix4x3[] value)
            {
                fixed (Matrix4x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, in Matrix2x3d value)
            {
                fixed (Matrix2x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3d> value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, Matrix2x3d[] value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, in Matrix3x2d value)
            {
                fixed (Matrix3x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2d> value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, Matrix3x2d[] value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, in Matrix2x4d value)
            {
                fixed (Matrix2x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4d> value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, Matrix2x4d[] value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, in Matrix4x2d value)
            {
                fixed (Matrix4x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2d> value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, Matrix4x2d[] value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, in Matrix3x4d value)
            {
                fixed (Matrix3x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4d> value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, Matrix3x4d[] value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, in Matrix4x3d value)
            {
                fixed (Matrix4x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3d> value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, Matrix4x3d[] value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, Span<int> length)
            {
                string infoLog;
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, Span<int> length, out string infoLog)
            {
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, int[] length)
            {
                string infoLog;
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, int[] length, out string infoLog)
            {
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, ref int length)
            {
                string infoLog;
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, ref int length, out string infoLog)
            {
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
            public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
            public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
            public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ShaderSource(GLHandleARB, int, byte**, int*)"/>
            public static unsafe void ShaderSource(GLHandleARB shaderObj, int count, byte** str, ReadOnlySpan<int> length)
            {
                fixed (int* length_ptr = length)
                {
                    ShaderSource(shaderObj, count, str, length_ptr);
                }
            }
            /// <inheritdoc cref="ShaderSource(GLHandleARB, int, byte**, int*)"/>
            public static unsafe void ShaderSource(GLHandleARB shaderObj, int count, byte** str, int[] length)
            {
                fixed (int* length_ptr = length)
                {
                    ShaderSource(shaderObj, count, str, length_ptr);
                }
            }
            /// <inheritdoc cref="ShaderSource(GLHandleARB, int, byte**, int*)"/>
            public static unsafe void ShaderSource(GLHandleARB shaderObj, int count, byte** str, in int length)
            {
                fixed (int* length_ptr = &length)
                {
                    ShaderSource(shaderObj, count, str, length_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1fv(int, int, float*)"/>
            public static unsafe void Uniform1fv(int location, int count, in float value)
            {
                fixed (float* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform1fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1fv(int, int, float*)"/>
            public static unsafe void Uniform1fv(int location, int count, ReadOnlySpan<float> value)
            {
                fixed (float* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform1fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1fv(int, int, float*)"/>
            public static unsafe void Uniform1fv(int location, int count, float[] value)
            {
                fixed (float* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform1fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
            public static unsafe void Uniform2fv(int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
            public static unsafe void Uniform2fv(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
            public static unsafe void Uniform2fv(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
            public static unsafe void Uniform2fv(int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
            public static unsafe void Uniform2fv(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
            public static unsafe void Uniform2fv(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
            public static unsafe void Uniform3fv(int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
            public static unsafe void Uniform3fv(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
            public static unsafe void Uniform3fv(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
            public static unsafe void Uniform3fv(int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
            public static unsafe void Uniform3fv(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
            public static unsafe void Uniform3fv(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
            public static unsafe void Uniform4fv(int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
            public static unsafe void Uniform4fv(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
            public static unsafe void Uniform4fv(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
            public static unsafe void Uniform4fv(int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
            public static unsafe void Uniform4fv(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
            public static unsafe void Uniform4fv(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1iv(int, int, int*)"/>
            public static unsafe void Uniform1iv(int location, int count, in int value)
            {
                fixed (int* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform1iv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1iv(int, int, int*)"/>
            public static unsafe void Uniform1iv(int location, int count, ReadOnlySpan<int> value)
            {
                fixed (int* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform1iv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1iv(int, int, int*)"/>
            public static unsafe void Uniform1iv(int location, int count, int[] value)
            {
                fixed (int* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform1iv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2iv(int, int, int*)"/>
            public static unsafe void Uniform2iv(int location, int count, in Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform2iv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2iv(int, int, int*)"/>
            public static unsafe void Uniform2iv(int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform2iv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2iv(int, int, int*)"/>
            public static unsafe void Uniform2iv(int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform2iv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3iv(int, int, int*)"/>
            public static unsafe void Uniform3iv(int location, int count, in Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform3iv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3iv(int, int, int*)"/>
            public static unsafe void Uniform3iv(int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform3iv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3iv(int, int, int*)"/>
            public static unsafe void Uniform3iv(int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform3iv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4iv(int, int, int*)"/>
            public static unsafe void Uniform4iv(int location, int count, in Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform4iv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4iv(int, int, int*)"/>
            public static unsafe void Uniform4iv(int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform4iv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4iv(int, int, int*)"/>
            public static unsafe void Uniform4iv(int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform4iv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2fv(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix2fv(int location, int count, bool transpose, in Matrix2 value)
            {
                fixed (Matrix2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix2fv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2fv(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix2fv(int location, int count, bool transpose, ReadOnlySpan<Matrix2> value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix2fv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2fv(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix2fv(int location, int count, bool transpose, Matrix2[] value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix2fv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3fv(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix3fv(int location, int count, bool transpose, in Matrix3 value)
            {
                fixed (Matrix3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix3fv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3fv(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix3fv(int location, int count, bool transpose, ReadOnlySpan<Matrix3> value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix3fv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3fv(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix3fv(int location, int count, bool transpose, Matrix3[] value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix3fv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fv(int location, int count, bool transpose, in Matrix4 value)
            {
                fixed (Matrix4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fv(int location, int count, bool transpose, ReadOnlySpan<Matrix4> value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fv(int location, int count, bool transpose, Matrix4[] value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fv(int location, int count, bool transpose, in System.Numerics.Matrix4x4 value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fv(int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix4x4> value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fv(int location, int count, bool transpose, System.Numerics.Matrix4x4[] value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterfv(GLHandleARB, All, float*)"/>
            public static unsafe void GetObjectParameterfv(GLHandleARB obj, All pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetObjectParameterfv(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterfv(GLHandleARB, All, float*)"/>
            public static unsafe void GetObjectParameterfv(GLHandleARB obj, All pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetObjectParameterfv(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterfv(GLHandleARB, All, float*)"/>
            public static unsafe void GetObjectParameterfv(GLHandleARB obj, All pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetObjectParameterfv(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameteriv(GLHandleARB, All, int*)"/>
            public static unsafe void GetObjectParameteriv(GLHandleARB obj, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectParameteriv(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameteriv(GLHandleARB, All, int*)"/>
            public static unsafe void GetObjectParameteriv(GLHandleARB obj, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectParameteriv(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameteriv(GLHandleARB, All, int*)"/>
            public static unsafe void GetObjectParameteriv(GLHandleARB obj, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetObjectParameteriv(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInfoLog(GLHandleARB, int, int*, byte*)"/>
            public static unsafe string GetInfoLog(GLHandleARB obj, int maxLength, Span<int> length)
            {
                string infoLog;
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetInfoLog(obj, maxLength, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetInfoLog(GLHandleARB, int, int*, byte*)"/>
            public static unsafe void GetInfoLog(GLHandleARB obj, int maxLength, Span<int> length, out string infoLog)
            {
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetInfoLog(obj, maxLength, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetInfoLog(GLHandleARB, int, int*, byte*)"/>
            public static unsafe string GetInfoLog(GLHandleARB obj, int maxLength, int[] length)
            {
                string infoLog;
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetInfoLog(obj, maxLength, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetInfoLog(GLHandleARB, int, int*, byte*)"/>
            public static unsafe void GetInfoLog(GLHandleARB obj, int maxLength, int[] length, out string infoLog)
            {
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetInfoLog(obj, maxLength, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetInfoLog(GLHandleARB, int, int*, byte*)"/>
            public static unsafe string GetInfoLog(GLHandleARB obj, int maxLength, ref int length)
            {
                string infoLog;
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetInfoLog(obj, maxLength, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetInfoLog(GLHandleARB, int, int*, byte*)"/>
            public static unsafe void GetInfoLog(GLHandleARB obj, int maxLength, ref int length, out string infoLog)
            {
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetInfoLog(obj, maxLength, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetAttachedObjects(GLHandleARB, int, int*, GLHandleARB*)"/>
            public static unsafe void GetAttachedObjects(GLHandleARB containerObj, Span<int> count, Span<GLHandleARB> obj)
            {
                fixed (int* count_ptr = count)
                {
                    int maxCount = (int)(obj.Length);
                    fixed (GLHandleARB* obj_ptr = obj)
                    {
                        GetAttachedObjects(containerObj, maxCount, count_ptr, obj_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetAttachedObjects(GLHandleARB, int, int*, GLHandleARB*)"/>
            public static unsafe void GetAttachedObjects(GLHandleARB containerObj, int[] count, GLHandleARB[] obj)
            {
                fixed (int* count_ptr = count)
                {
                    int maxCount = (int)(obj.Length);
                    fixed (GLHandleARB* obj_ptr = obj)
                    {
                        GetAttachedObjects(containerObj, maxCount, count_ptr, obj_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetAttachedObjects(GLHandleARB, int, int*, GLHandleARB*)"/>
            public static unsafe void GetAttachedObjects(GLHandleARB containerObj, int maxCount, ref int count, ref GLHandleARB obj)
            {
                fixed (int* count_ptr = &count)
                fixed (GLHandleARB* obj_ptr = &obj)
                {
                    GetAttachedObjects(containerObj, maxCount, count_ptr, obj_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformLocation(GLHandleARB, byte*)"/>
            public static unsafe int GetUniformLocation(GLHandleARB programObj, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetUniformLocation(programObj, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetActiveUniform(GLHandleARB, uint, int, int*, int*, UniformType*, byte*)"/>
            public static unsafe string GetActiveUniform(GLHandleARB programObj, uint index, int maxLength, Span<int> length, Span<int> size, Span<UniformType> type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (UniformType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveUniform(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveUniform(GLHandleARB, uint, int, int*, int*, UniformType*, byte*)"/>
            public static unsafe void GetActiveUniform(GLHandleARB programObj, uint index, int maxLength, Span<int> length, Span<int> size, Span<UniformType> type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (UniformType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveUniform(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetActiveUniform(GLHandleARB, uint, int, int*, int*, UniformType*, byte*)"/>
            public static unsafe string GetActiveUniform(GLHandleARB programObj, uint index, int maxLength, int[] length, int[] size, UniformType[] type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (UniformType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveUniform(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveUniform(GLHandleARB, uint, int, int*, int*, UniformType*, byte*)"/>
            public static unsafe void GetActiveUniform(GLHandleARB programObj, uint index, int maxLength, int[] length, int[] size, UniformType[] type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (UniformType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveUniform(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetActiveUniform(GLHandleARB, uint, int, int*, int*, UniformType*, byte*)"/>
            public static unsafe string GetActiveUniform(GLHandleARB programObj, uint index, int maxLength, ref int length, ref int size, ref UniformType type)
            {
                string name;
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (UniformType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetActiveUniform(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveUniform(GLHandleARB, uint, int, int*, int*, UniformType*, byte*)"/>
            public static unsafe void GetActiveUniform(GLHandleARB programObj, uint index, int maxLength, ref int length, ref int size, ref UniformType type, out string name)
            {
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (UniformType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetActiveUniform(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformfv(GLHandleARB, int, float*)"/>
            public static unsafe void GetUniformfv(GLHandleARB programObj, int location, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetUniformfv(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformfv(GLHandleARB, int, float*)"/>
            public static unsafe void GetUniformfv(GLHandleARB programObj, int location, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetUniformfv(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformfv(GLHandleARB, int, float*)"/>
            public static unsafe void GetUniformfv(GLHandleARB programObj, int location, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetUniformfv(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformiv(GLHandleARB, int, int*)"/>
            public static unsafe void GetUniformiv(GLHandleARB programObj, int location, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetUniformiv(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformiv(GLHandleARB, int, int*)"/>
            public static unsafe void GetUniformiv(GLHandleARB programObj, int location, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetUniformiv(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformiv(GLHandleARB, int, int*)"/>
            public static unsafe void GetUniformiv(GLHandleARB programObj, int location, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetUniformiv(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetShaderSource(GLHandleARB, int, int*, byte*)"/>
            public static unsafe string GetShaderSource(GLHandleARB obj, int maxLength, Span<int> length)
            {
                string source;
                fixed (int* length_ptr = length)
                {
                    var source_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetShaderSource(obj, maxLength, length_ptr, source_ptr);
                    source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)source_ptr);
                }
                return source;
            }
            /// <inheritdoc cref="GetShaderSource(GLHandleARB, int, int*, byte*)"/>
            public static unsafe void GetShaderSource(GLHandleARB obj, int maxLength, Span<int> length, out string source)
            {
                fixed (int* length_ptr = length)
                {
                    var source_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetShaderSource(obj, maxLength, length_ptr, source_ptr);
                    source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)source_ptr);
                }
            }
            /// <inheritdoc cref="GetShaderSource(GLHandleARB, int, int*, byte*)"/>
            public static unsafe string GetShaderSource(GLHandleARB obj, int maxLength, int[] length)
            {
                string source;
                fixed (int* length_ptr = length)
                {
                    var source_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetShaderSource(obj, maxLength, length_ptr, source_ptr);
                    source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)source_ptr);
                }
                return source;
            }
            /// <inheritdoc cref="GetShaderSource(GLHandleARB, int, int*, byte*)"/>
            public static unsafe void GetShaderSource(GLHandleARB obj, int maxLength, int[] length, out string source)
            {
                fixed (int* length_ptr = length)
                {
                    var source_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetShaderSource(obj, maxLength, length_ptr, source_ptr);
                    source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)source_ptr);
                }
            }
            /// <inheritdoc cref="GetShaderSource(GLHandleARB, int, int*, byte*)"/>
            public static unsafe string GetShaderSource(GLHandleARB obj, int maxLength, ref int length)
            {
                string source;
                fixed (int* length_ptr = &length)
                {
                    var source_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetShaderSource(obj, maxLength, length_ptr, source_ptr);
                    source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)source_ptr);
                }
                return source;
            }
            /// <inheritdoc cref="GetShaderSource(GLHandleARB, int, int*, byte*)"/>
            public static unsafe void GetShaderSource(GLHandleARB obj, int maxLength, ref int length, out string source)
            {
                fixed (int* length_ptr = &length)
                {
                    var source_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetShaderSource(obj, maxLength, length_ptr, source_ptr);
                    source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)source_ptr);
                }
            }
            /// <inheritdoc cref="GetSubroutineUniformLocation(int, ShaderType, byte*)"/>
            public static unsafe int GetSubroutineUniformLocation(int program, ShaderType shadertype, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetSubroutineUniformLocation(program, shadertype, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetSubroutineIndex(int, ShaderType, byte*)"/>
            public static unsafe uint GetSubroutineIndex(int program, ShaderType shadertype, string name)
            {
                uint returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetSubroutineIndex(program, shadertype, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
            public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, Span<int> values)
            {
                fixed (int* values_ptr = values)
                {
                    GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
            public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, int[] values)
            {
                fixed (int* values_ptr = values)
                {
                    GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
            public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, ref int values)
            {
                fixed (int* values_ptr = &values)
                {
                    GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, int[] length)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, int[] length, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, ref int length)
            {
                string name;
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, ref int length, out string name)
            {
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, Span<int> length, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, int[] length)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, int[] length, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, ref int length)
            {
                string name;
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, ref int length, out string name)
            {
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
            public static unsafe void UniformSubroutinesui(ShaderType shadertype, ReadOnlySpan<uint> indices)
            {
                int count = (int)(indices.Length);
                fixed (uint* indices_ptr = indices)
                {
                    UniformSubroutinesuiv(shadertype, count, indices_ptr);
                }
            }
            /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
            public static unsafe void UniformSubroutinesui(ShaderType shadertype, uint[] indices)
            {
                int count = (int)(indices.Length);
                fixed (uint* indices_ptr = indices)
                {
                    UniformSubroutinesuiv(shadertype, count, indices_ptr);
                }
            }
            /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
            public static unsafe void UniformSubroutinesui(ShaderType shadertype, int count, in uint indices)
            {
                fixed (uint* indices_ptr = &indices)
                {
                    UniformSubroutinesuiv(shadertype, count, indices_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
            public static unsafe void GetUniformSubroutineui(ShaderType shadertype, int location, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
            public static unsafe void GetUniformSubroutineui(ShaderType shadertype, int location, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
            public static unsafe void GetUniformSubroutineui(ShaderType shadertype, int location, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
            public static unsafe void GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname, Span<int> values)
            {
                fixed (int* values_ptr = values)
                {
                    GetProgramStageiv(program, shadertype, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
            public static unsafe void GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname, int[] values)
            {
                fixed (int* values_ptr = values)
                {
                    GetProgramStageiv(program, shadertype, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
            public static unsafe void GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname, ref int values)
            {
                fixed (int* values_ptr = &values)
                {
                    GetProgramStageiv(program, shadertype, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="NamedString(All, int, byte*, int, byte*)"/>
            public static unsafe void NamedString(All type, int namelen, string name, int stringlen, string str)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                byte* str_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(str);
                NamedString(type, namelen, name_ptr, stringlen, str_ptr);
                Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="DeleteNamedString(int, byte*)"/>
            public static unsafe void DeleteNamedString(int namelen, string name)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                DeleteNamedString(namelen, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="CompileShaderInclude(int, int, byte**, int*)"/>
            public static unsafe void CompileShaderInclude(int shader, int count, byte** path, ReadOnlySpan<int> length)
            {
                fixed (int* length_ptr = length)
                {
                    CompileShaderInclude(shader, count, path, length_ptr);
                }
            }
            /// <inheritdoc cref="CompileShaderInclude(int, int, byte**, int*)"/>
            public static unsafe void CompileShaderInclude(int shader, int count, byte** path, int[] length)
            {
                fixed (int* length_ptr = length)
                {
                    CompileShaderInclude(shader, count, path, length_ptr);
                }
            }
            /// <inheritdoc cref="CompileShaderInclude(int, int, byte**, int*)"/>
            public static unsafe void CompileShaderInclude(int shader, int count, byte** path, in int length)
            {
                fixed (int* length_ptr = &length)
                {
                    CompileShaderInclude(shader, count, path, length_ptr);
                }
            }
            /// <inheritdoc cref="IsNamedString(int, byte*)"/>
            public static unsafe bool IsNamedString(int namelen, string name)
            {
                bool returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = IsNamedString(namelen, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetNamedString(int, byte*, int, int*, byte*)"/>
            public static unsafe string GetNamedString(int namelen, string name, int bufSize, Span<int> stringlen)
            {
                string str;
                fixed (int* stringlen_ptr = stringlen)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    var str_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetNamedString(namelen, name_ptr, bufSize, stringlen_ptr, str_ptr);
                    str = Marshal.PtrToStringUTF8((IntPtr)str_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return str;
            }
            /// <inheritdoc cref="GetNamedString(int, byte*, int, int*, byte*)"/>
            public static unsafe void GetNamedString(int namelen, string name, int bufSize, Span<int> stringlen, out string str)
            {
                fixed (int* stringlen_ptr = stringlen)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    var str_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetNamedString(namelen, name_ptr, bufSize, stringlen_ptr, str_ptr);
                    str = Marshal.PtrToStringUTF8((IntPtr)str_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedString(int, byte*, int, int*, byte*)"/>
            public static unsafe string GetNamedString(int namelen, string name, int bufSize, int[] stringlen)
            {
                string str;
                fixed (int* stringlen_ptr = stringlen)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    var str_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetNamedString(namelen, name_ptr, bufSize, stringlen_ptr, str_ptr);
                    str = Marshal.PtrToStringUTF8((IntPtr)str_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return str;
            }
            /// <inheritdoc cref="GetNamedString(int, byte*, int, int*, byte*)"/>
            public static unsafe void GetNamedString(int namelen, string name, int bufSize, int[] stringlen, out string str)
            {
                fixed (int* stringlen_ptr = stringlen)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    var str_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetNamedString(namelen, name_ptr, bufSize, stringlen_ptr, str_ptr);
                    str = Marshal.PtrToStringUTF8((IntPtr)str_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedString(int, byte*, int, int*, byte*)"/>
            public static unsafe string GetNamedString(int namelen, string name, int bufSize, ref int stringlen)
            {
                string str;
                fixed (int* stringlen_ptr = &stringlen)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    var str_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetNamedString(namelen, name_ptr, bufSize, stringlen_ptr, str_ptr);
                    str = Marshal.PtrToStringUTF8((IntPtr)str_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return str;
            }
            /// <inheritdoc cref="GetNamedString(int, byte*, int, int*, byte*)"/>
            public static unsafe void GetNamedString(int namelen, string name, int bufSize, ref int stringlen, out string str)
            {
                fixed (int* stringlen_ptr = &stringlen)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    var str_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetNamedString(namelen, name_ptr, bufSize, stringlen_ptr, str_ptr);
                    str = Marshal.PtrToStringUTF8((IntPtr)str_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedStringiv(int, byte*, All, int*)"/>
            public static unsafe void GetNamedStringiv(int namelen, string name, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    GetNamedStringiv(namelen, name_ptr, pname, parameters_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedStringiv(int, byte*, All, int*)"/>
            public static unsafe void GetNamedStringiv(int namelen, string name, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    GetNamedStringiv(namelen, name_ptr, pname, parameters_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedStringiv(int, byte*, All, int*)"/>
            public static unsafe void GetNamedStringiv(int namelen, string name, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    GetNamedStringiv(namelen, name_ptr, pname, parameters_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
            public static unsafe void GetInteger64(GetPName pname, Span<long> data)
            {
                fixed (long* data_ptr = data)
                {
                    GetInteger64v(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
            public static unsafe void GetInteger64(GetPName pname, long[] data)
            {
                fixed (long* data_ptr = data)
                {
                    GetInteger64v(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
            public static unsafe void GetInteger64(GetPName pname, ref long data)
            {
                fixed (long* data_ptr = &data)
                {
                    GetInteger64v(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
            public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, Span<int> length, Span<int> values)
            {
                fixed (int* length_ptr = length)
                {
                    int count = (int)(values.Length);
                    fixed (int* values_ptr = values)
                    {
                        GetSynciv(sync, pname, count, length_ptr, values_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
            public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, int[] length, int[] values)
            {
                fixed (int* length_ptr = length)
                {
                    int count = (int)(values.Length);
                    fixed (int* values_ptr = values)
                    {
                        GetSynciv(sync, pname, count, length_ptr, values_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
            public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, int count, ref int length, ref int values)
            {
                fixed (int* length_ptr = &length)
                fixed (int* values_ptr = &values)
                {
                    GetSynciv(sync, pname, count, length_ptr, values_ptr);
                }
            }
            /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
            public static unsafe void PatchParameterf(PatchParameterName pname, ReadOnlySpan<float> values)
            {
                fixed (float* values_ptr = values)
                {
                    PatchParameterfv(pname, values_ptr);
                }
            }
            /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
            public static unsafe void PatchParameterf(PatchParameterName pname, float[] values)
            {
                fixed (float* values_ptr = values)
                {
                    PatchParameterfv(pname, values_ptr);
                }
            }
            /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
            public static unsafe void PatchParameterf(PatchParameterName pname, in float values)
            {
                fixed (float* values_ptr = &values)
                {
                    PatchParameterfv(pname, values_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, T1[] data)
                where T1 : unmanaged
            {
                int imageSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTexImage(TextureTarget target, int level, IntPtr img)
            {
                void* img_vptr = (void*)img;
                GetCompressedTexImage(target, level, img_vptr);
            }
            /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTexImage<T1>(TextureTarget target, int level, Span<T1> img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedTexImage(target, level, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTexImage<T1>(TextureTarget target, int level, T1[] img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedTexImage(target, level, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTexImage<T1>(TextureTarget target, int level, ref T1 img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = &img)
                {
                    GetCompressedTexImage(target, level, img_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, Span<float> val)
            {
                fixed (float* val_ptr = val)
                {
                    GetMultisamplefv(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, float[] val)
            {
                fixed (float* val_ptr = val)
                {
                    GetMultisamplefv(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, ref float val)
            {
                fixed (float* val_ptr = &val)
                {
                    GetMultisamplefv(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetQueryObjecti64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetQueryObjecti64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetQueryObjecti64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetQueryObjectui64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetQueryObjectui64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetQueryObjectui64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
            public static unsafe void DeleteTransformFeedback(in int id)
            {
                int n = 1;
                fixed(int* ids_handle = &id)
                {
                    DeleteTransformFeedbacks(n, ids_handle);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacks(ReadOnlySpan<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    DeleteTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacks(int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    DeleteTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacks(int n, in int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    DeleteTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe int GenTransformFeedback()
            {
                int id;
                int n = 1;
                Unsafe.SkipInit(out id);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* ids_handle = (int*)Unsafe.AsPointer(ref id);
                GenTransformFeedbacks(n, ids_handle);
                return id;
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe void GenTransformFeedback(out int id)
            {
                int n = 1;
                Unsafe.SkipInit(out id);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* ids_handle = (int*)Unsafe.AsPointer(ref id);
                GenTransformFeedbacks(n, ids_handle);
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe void GenTransformFeedbacks(Span<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    GenTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe void GenTransformFeedbacks(int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    GenTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe void GenTransformFeedbacks(int n, ref int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    GenTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
            public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryIndexediv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
            public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryIndexediv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
            public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetQueryIndexediv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixf(float*)"/>
            public static unsafe void LoadTransposeMatrixf(ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    LoadTransposeMatrixf(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixf(float*)"/>
            public static unsafe void LoadTransposeMatrixf(float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    LoadTransposeMatrixf(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixf(float*)"/>
            public static unsafe void LoadTransposeMatrixf(in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    LoadTransposeMatrixf(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixd(double*)"/>
            public static unsafe void LoadTransposeMatrixd(ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    LoadTransposeMatrixd(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixd(double*)"/>
            public static unsafe void LoadTransposeMatrixd(double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    LoadTransposeMatrixd(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixd(double*)"/>
            public static unsafe void LoadTransposeMatrixd(in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    LoadTransposeMatrixd(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixf(float*)"/>
            public static unsafe void MultTransposeMatrixf(ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MultTransposeMatrixf(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixf(float*)"/>
            public static unsafe void MultTransposeMatrixf(float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MultTransposeMatrixf(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixf(float*)"/>
            public static unsafe void MultTransposeMatrixf(in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MultTransposeMatrixf(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixd(double*)"/>
            public static unsafe void MultTransposeMatrixd(ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MultTransposeMatrixd(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixd(double*)"/>
            public static unsafe void MultTransposeMatrixd(double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MultTransposeMatrixd(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixd(double*)"/>
            public static unsafe void MultTransposeMatrixd(in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MultTransposeMatrixd(m_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
            public static unsafe void GetUniformIndices(int program, int uniformCount, byte** uniformNames, Span<uint> uniformIndices)
            {
                fixed (uint* uniformIndices_ptr = uniformIndices)
                {
                    GetUniformIndices(program, uniformCount, uniformNames, uniformIndices_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
            public static unsafe void GetUniformIndices(int program, int uniformCount, byte** uniformNames, uint[] uniformIndices)
            {
                fixed (uint* uniformIndices_ptr = uniformIndices)
                {
                    GetUniformIndices(program, uniformCount, uniformNames, uniformIndices_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
            public static unsafe void GetUniformIndices(int program, int uniformCount, byte** uniformNames, ref uint uniformIndices)
            {
                fixed (uint* uniformIndices_ptr = &uniformIndices)
                {
                    GetUniformIndices(program, uniformCount, uniformNames, uniformIndices_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
            public static unsafe void GetActiveUniformsi(int program, ReadOnlySpan<uint> uniformIndices, UniformPName pname, Span<int> parameters)
            {
                int uniformCount = (int)(uniformIndices.Length);
                fixed (uint* uniformIndices_ptr = uniformIndices)
                {
                    fixed (int* parameters_ptr = parameters)
                    {
                        GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
            public static unsafe void GetActiveUniformsi(int program, uint[] uniformIndices, UniformPName pname, int[] parameters)
            {
                int uniformCount = (int)(uniformIndices.Length);
                fixed (uint* uniformIndices_ptr = uniformIndices)
                {
                    fixed (int* parameters_ptr = parameters)
                    {
                        GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
            public static unsafe void GetActiveUniformsi(int program, int uniformCount, in uint uniformIndices, UniformPName pname, ref int parameters)
            {
                fixed (uint* uniformIndices_ptr = &uniformIndices)
                fixed (int* parameters_ptr = &parameters)
                {
                    GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveUniformName(int program, uint uniformIndex, int bufSize, Span<int> length)
            {
                string uniformName;
                fixed (int* length_ptr = length)
                {
                    var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                    uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
                }
                return uniformName;
            }
            /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveUniformName(int program, uint uniformIndex, int bufSize, Span<int> length, out string uniformName)
            {
                fixed (int* length_ptr = length)
                {
                    var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                    uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveUniformName(int program, uint uniformIndex, int bufSize, int[] length)
            {
                string uniformName;
                fixed (int* length_ptr = length)
                {
                    var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                    uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
                }
                return uniformName;
            }
            /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveUniformName(int program, uint uniformIndex, int bufSize, int[] length, out string uniformName)
            {
                fixed (int* length_ptr = length)
                {
                    var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                    uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveUniformName(int program, uint uniformIndex, int bufSize, ref int length)
            {
                string uniformName;
                fixed (int* length_ptr = &length)
                {
                    var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                    uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
                }
                return uniformName;
            }
            /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveUniformName(int program, uint uniformIndex, int bufSize, ref int length, out string uniformName)
            {
                fixed (int* length_ptr = &length)
                {
                    var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                    uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformBlockIndex(int, byte*)"/>
            public static unsafe uint GetUniformBlockIndex(int program, string uniformBlockName)
            {
                uint returnValue;
                byte* uniformBlockName_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(uniformBlockName);
                returnValue = GetUniformBlockIndex(program, uniformBlockName_ptr);
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
            public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
            public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
            public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, Span<int> length)
            {
                string uniformBlockName;
                fixed (int* length_ptr = length)
                {
                    var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                    uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                }
                return uniformBlockName;
            }
            /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, Span<int> length, out string uniformBlockName)
            {
                fixed (int* length_ptr = length)
                {
                    var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                    uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, int[] length)
            {
                string uniformBlockName;
                fixed (int* length_ptr = length)
                {
                    var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                    uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                }
                return uniformBlockName;
            }
            /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, int[] length, out string uniformBlockName)
            {
                fixed (int* length_ptr = length)
                {
                    var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                    uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, ref int length)
            {
                string uniformBlockName;
                fixed (int* length_ptr = &length)
                {
                    var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                    uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                }
                return uniformBlockName;
            }
            /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, ref int length, out string uniformBlockName)
            {
                fixed (int* length_ptr = &length)
                {
                    var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                    uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
            public static unsafe void GetInteger(GetPName target, uint index, Span<int> data)
            {
                fixed (int* data_ptr = data)
                {
                    GetIntegeri_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
            public static unsafe void GetInteger(GetPName target, uint index, int[] data)
            {
                fixed (int* data_ptr = data)
                {
                    GetIntegeri_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
            public static unsafe void GetInteger(GetPName target, uint index, ref int data)
            {
                fixed (int* data_ptr = &data)
                {
                    GetIntegeri_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
            public static unsafe void DeleteVertexArray(in int array)
            {
                int n = 1;
                fixed(int* arrays_handle = &array)
                {
                    DeleteVertexArrays(n, arrays_handle);
                }
            }
            /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
            public static unsafe void DeleteVertexArrays(ReadOnlySpan<int> arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    DeleteVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
            public static unsafe void DeleteVertexArrays(int[] arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    DeleteVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
            public static unsafe void DeleteVertexArrays(int n, in int arrays)
            {
                fixed (int* arrays_ptr = &arrays)
                {
                    DeleteVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe int GenVertexArray()
            {
                int array;
                int n = 1;
                Unsafe.SkipInit(out array);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
                GenVertexArrays(n, arrays_handle);
                return array;
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe void GenVertexArray(out int array)
            {
                int n = 1;
                Unsafe.SkipInit(out array);
                // FIXME: This could be a problem for the overloads that take an out parameter
                // as this parameter could *potentially* move while inside of this function
                // which would mean that the new value never gets written to the out parameter.
                // Making for a nasty bug.
                // The reason we don't use a fixed expression here is because of the "single out parameter to return value" overloading step
                // that will make it so this tries to fix a local variable which is not allowed in C# for some reason.
                // If you have problems with this we would really appreciate you opening an issue at https://github.com/opentk/opentk
                // - 2021-05-18
                int* arrays_handle = (int*)Unsafe.AsPointer(ref array);
                GenVertexArrays(n, arrays_handle);
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe void GenVertexArrays(Span<int> arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    GenVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe void GenVertexArrays(int[] arrays)
            {
                int n = (int)(arrays.Length);
                fixed (int* arrays_ptr = arrays)
                {
                    GenVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe void GenVertexArrays(int n, ref int arrays)
            {
                fixed (int* arrays_ptr = &arrays)
                {
                    GenVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1dv(uint, double*)"/>
            public static unsafe void VertexAttribL1d(uint index, in double v)
            {
                fixed (double* tmp_v = &v)
                {
                    double* v_ptr = (double*)tmp_v;
                    VertexAttribL1dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2dv(uint, double*)"/>
            public static unsafe void VertexAttribL2d(uint index, in Vector2d v)
            {
                fixed (Vector2d* tmp_v = &v)
                {
                    double* v_ptr = (double*)tmp_v;
                    VertexAttribL2dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3dv(uint, double*)"/>
            public static unsafe void VertexAttribL3d(uint index, in Vector3d v)
            {
                fixed (Vector3d* tmp_v = &v)
                {
                    double* v_ptr = (double*)tmp_v;
                    VertexAttribL3dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4dv(uint, double*)"/>
            public static unsafe void VertexAttribL4d(uint index, in Vector4d v)
            {
                fixed (Vector4d* tmp_v = &v)
                {
                    double* v_ptr = (double*)tmp_v;
                    VertexAttribL4dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribLPointer(uint, int, VertexAttribLType, int, void*)"/>
            public static unsafe void VertexAttribLPointer(uint index, int size, VertexAttribLType type, int stride, nint offset)
            {
                void* pointer = (void*)offset;
                VertexAttribLPointer(index, size, type, stride, pointer);
            }
            /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribLdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribLdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetVertexAttribLdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="Weightbv(int, sbyte*)"/>
            public static unsafe void Weightbv(ReadOnlySpan<sbyte> weights)
            {
                int size = (int)(weights.Length);
                fixed (sbyte* weights_ptr = weights)
                {
                    Weightbv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightbv(int, sbyte*)"/>
            public static unsafe void Weightbv(sbyte[] weights)
            {
                int size = (int)(weights.Length);
                fixed (sbyte* weights_ptr = weights)
                {
                    Weightbv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightbv(int, sbyte*)"/>
            public static unsafe void Weightbv(int size, in sbyte weights)
            {
                fixed (sbyte* weights_ptr = &weights)
                {
                    Weightbv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightsv(int, short*)"/>
            public static unsafe void Weightsv(ReadOnlySpan<short> weights)
            {
                int size = (int)(weights.Length);
                fixed (short* weights_ptr = weights)
                {
                    Weightsv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightsv(int, short*)"/>
            public static unsafe void Weightsv(short[] weights)
            {
                int size = (int)(weights.Length);
                fixed (short* weights_ptr = weights)
                {
                    Weightsv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightsv(int, short*)"/>
            public static unsafe void Weightsv(int size, in short weights)
            {
                fixed (short* weights_ptr = &weights)
                {
                    Weightsv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightiv(int, int*)"/>
            public static unsafe void Weightiv(ReadOnlySpan<int> weights)
            {
                int size = (int)(weights.Length);
                fixed (int* weights_ptr = weights)
                {
                    Weightiv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightiv(int, int*)"/>
            public static unsafe void Weightiv(int[] weights)
            {
                int size = (int)(weights.Length);
                fixed (int* weights_ptr = weights)
                {
                    Weightiv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightiv(int, int*)"/>
            public static unsafe void Weightiv(int size, in int weights)
            {
                fixed (int* weights_ptr = &weights)
                {
                    Weightiv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightfv(int, float*)"/>
            public static unsafe void Weightfv(ReadOnlySpan<float> weights)
            {
                int size = (int)(weights.Length);
                fixed (float* weights_ptr = weights)
                {
                    Weightfv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightfv(int, float*)"/>
            public static unsafe void Weightfv(float[] weights)
            {
                int size = (int)(weights.Length);
                fixed (float* weights_ptr = weights)
                {
                    Weightfv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightfv(int, float*)"/>
            public static unsafe void Weightfv(int size, in float weights)
            {
                fixed (float* weights_ptr = &weights)
                {
                    Weightfv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightdv(int, double*)"/>
            public static unsafe void Weightdv(ReadOnlySpan<double> weights)
            {
                int size = (int)(weights.Length);
                fixed (double* weights_ptr = weights)
                {
                    Weightdv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightdv(int, double*)"/>
            public static unsafe void Weightdv(double[] weights)
            {
                int size = (int)(weights.Length);
                fixed (double* weights_ptr = weights)
                {
                    Weightdv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightdv(int, double*)"/>
            public static unsafe void Weightdv(int size, in double weights)
            {
                fixed (double* weights_ptr = &weights)
                {
                    Weightdv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightubv(int, byte*)"/>
            public static unsafe void Weightubv(ReadOnlySpan<byte> weights)
            {
                int size = (int)(weights.Length);
                fixed (byte* weights_ptr = weights)
                {
                    Weightubv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightubv(int, byte*)"/>
            public static unsafe void Weightubv(byte[] weights)
            {
                int size = (int)(weights.Length);
                fixed (byte* weights_ptr = weights)
                {
                    Weightubv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightubv(int, byte*)"/>
            public static unsafe void Weightubv(int size, in byte weights)
            {
                fixed (byte* weights_ptr = &weights)
                {
                    Weightubv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightusv(int, ushort*)"/>
            public static unsafe void Weightusv(ReadOnlySpan<ushort> weights)
            {
                int size = (int)(weights.Length);
                fixed (ushort* weights_ptr = weights)
                {
                    Weightusv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightusv(int, ushort*)"/>
            public static unsafe void Weightusv(ushort[] weights)
            {
                int size = (int)(weights.Length);
                fixed (ushort* weights_ptr = weights)
                {
                    Weightusv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightusv(int, ushort*)"/>
            public static unsafe void Weightusv(int size, in ushort weights)
            {
                fixed (ushort* weights_ptr = &weights)
                {
                    Weightusv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightuiv(int, uint*)"/>
            public static unsafe void Weightuiv(ReadOnlySpan<uint> weights)
            {
                int size = (int)(weights.Length);
                fixed (uint* weights_ptr = weights)
                {
                    Weightuiv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightuiv(int, uint*)"/>
            public static unsafe void Weightuiv(uint[] weights)
            {
                int size = (int)(weights.Length);
                fixed (uint* weights_ptr = weights)
                {
                    Weightuiv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="Weightuiv(int, uint*)"/>
            public static unsafe void Weightuiv(int size, in uint weights)
            {
                fixed (uint* weights_ptr = &weights)
                {
                    Weightuiv(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightPointer(int, WeightPointerTypeARB, int, void*)"/>
            public static unsafe void WeightPointer(int size, WeightPointerTypeARB type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                WeightPointer(size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="WeightPointer(int, WeightPointerTypeARB, int, void*)"/>
            public static unsafe void WeightPointer<T1>(int size, WeightPointerTypeARB type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    WeightPointer(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="WeightPointer(int, WeightPointerTypeARB, int, void*)"/>
            public static unsafe void WeightPointer<T1>(int size, WeightPointerTypeARB type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    WeightPointer(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="WeightPointer(int, WeightPointerTypeARB, int, void*)"/>
            public static unsafe void WeightPointer<T1>(int size, WeightPointerTypeARB type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    WeightPointer(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="DeleteBuffers(int, int*)"/>
            public static unsafe void DeleteBuffers(ReadOnlySpan<int> buffers)
            {
                int n = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    DeleteBuffers(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteBuffers(int, int*)"/>
            public static unsafe void DeleteBuffers(int[] buffers)
            {
                int n = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    DeleteBuffers(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteBuffers(int, int*)"/>
            public static unsafe void DeleteBuffers(int n, in int buffers)
            {
                fixed (int* buffers_ptr = &buffers)
                {
                    DeleteBuffers(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="GenBuffers(int, int*)"/>
            public static unsafe void GenBuffers(Span<int> buffers)
            {
                int n = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    GenBuffers(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="GenBuffers(int, int*)"/>
            public static unsafe void GenBuffers(int[] buffers)
            {
                int n = (int)(buffers.Length);
                fixed (int* buffers_ptr = buffers)
                {
                    GenBuffers(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="GenBuffers(int, int*)"/>
            public static unsafe void GenBuffers(int n, ref int buffers)
            {
                fixed (int* buffers_ptr = &buffers)
                {
                    GenBuffers(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="BufferData(BufferTargetARB, nint, void*, BufferUsageARB)"/>
            public static unsafe void BufferData(BufferTargetARB target, nint size, IntPtr data, BufferUsageARB usage)
            {
                void* data_vptr = (void*)data;
                BufferData(target, size, data_vptr, usage);
            }
            /// <inheritdoc cref="BufferData(BufferTargetARB, nint, void*, BufferUsageARB)"/>
            public static unsafe void BufferData<T1>(BufferTargetARB target, ReadOnlySpan<T1> data, BufferUsageARB usage)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    BufferData(target, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="BufferData(BufferTargetARB, nint, void*, BufferUsageARB)"/>
            public static unsafe void BufferData<T1>(BufferTargetARB target, T1[] data, BufferUsageARB usage)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    BufferData(target, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="BufferData(BufferTargetARB, nint, void*, BufferUsageARB)"/>
            public static unsafe void BufferData<T1>(BufferTargetARB target, nint size, in T1 data, BufferUsageARB usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    BufferData(target, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="BufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void BufferSubData(BufferTargetARB target, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                BufferSubData(target, offset, size, data_vptr);
            }
            /// <inheritdoc cref="BufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void BufferSubData<T1>(BufferTargetARB target, IntPtr offset, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    BufferSubData(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="BufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void BufferSubData<T1>(BufferTargetARB target, IntPtr offset, T1[] data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    BufferSubData(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="BufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void BufferSubData<T1>(BufferTargetARB target, IntPtr offset, nint size, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    BufferSubData(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void GetBufferSubData(BufferTargetARB target, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                GetBufferSubData(target, offset, size, data_vptr);
            }
            /// <inheritdoc cref="GetBufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void GetBufferSubData<T1>(BufferTargetARB target, IntPtr offset, Span<T1> data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    GetBufferSubData(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void GetBufferSubData<T1>(BufferTargetARB target, IntPtr offset, T1[] data)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    GetBufferSubData(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferSubData(BufferTargetARB, IntPtr, nint, void*)"/>
            public static unsafe void GetBufferSubData<T1>(BufferTargetARB target, IntPtr offset, nint size, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    GetBufferSubData(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameteriv(BufferTargetARB, BufferPNameARB, int*)"/>
            public static unsafe void GetBufferParameteriv(BufferTargetARB target, BufferPNameARB pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetBufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameteriv(BufferTargetARB, BufferPNameARB, int*)"/>
            public static unsafe void GetBufferParameteriv(BufferTargetARB target, BufferPNameARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetBufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameteriv(BufferTargetARB, BufferPNameARB, int*)"/>
            public static unsafe void GetBufferParameteriv(BufferTargetARB target, BufferPNameARB pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetBufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1dv(uint, double*)"/>
            public static unsafe void VertexAttrib1dv(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib1dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1dv(uint, double*)"/>
            public static unsafe void VertexAttrib1dv(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib1dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1dv(uint, double*)"/>
            public static unsafe void VertexAttrib1dv(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib1dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1fv(uint, float*)"/>
            public static unsafe void VertexAttrib1fv(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib1fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1fv(uint, float*)"/>
            public static unsafe void VertexAttrib1fv(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib1fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1fv(uint, float*)"/>
            public static unsafe void VertexAttrib1fv(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib1fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1sv(uint, short*)"/>
            public static unsafe void VertexAttrib1sv(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib1sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1sv(uint, short*)"/>
            public static unsafe void VertexAttrib1sv(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib1sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1sv(uint, short*)"/>
            public static unsafe void VertexAttrib1sv(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib1sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dv(uint, double*)"/>
            public static unsafe void VertexAttrib2dv(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib2dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dv(uint, double*)"/>
            public static unsafe void VertexAttrib2dv(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib2dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dv(uint, double*)"/>
            public static unsafe void VertexAttrib2dv(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib2dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
            public static unsafe void VertexAttrib2fv(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib2fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
            public static unsafe void VertexAttrib2fv(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib2fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
            public static unsafe void VertexAttrib2fv(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib2fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2sv(uint, short*)"/>
            public static unsafe void VertexAttrib2sv(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib2sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2sv(uint, short*)"/>
            public static unsafe void VertexAttrib2sv(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib2sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2sv(uint, short*)"/>
            public static unsafe void VertexAttrib2sv(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib2sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dv(uint, double*)"/>
            public static unsafe void VertexAttrib3dv(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib3dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dv(uint, double*)"/>
            public static unsafe void VertexAttrib3dv(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib3dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dv(uint, double*)"/>
            public static unsafe void VertexAttrib3dv(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib3dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
            public static unsafe void VertexAttrib3fv(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib3fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
            public static unsafe void VertexAttrib3fv(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib3fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
            public static unsafe void VertexAttrib3fv(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib3fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3sv(uint, short*)"/>
            public static unsafe void VertexAttrib3sv(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib3sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3sv(uint, short*)"/>
            public static unsafe void VertexAttrib3sv(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib3sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3sv(uint, short*)"/>
            public static unsafe void VertexAttrib3sv(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib3sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Nbv(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4Nbv(uint index, ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttrib4Nbv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Nbv(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4Nbv(uint index, sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttrib4Nbv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Nbv(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4Nbv(uint index, in sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    VertexAttrib4Nbv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Niv(uint, int*)"/>
            public static unsafe void VertexAttrib4Niv(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttrib4Niv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Niv(uint, int*)"/>
            public static unsafe void VertexAttrib4Niv(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttrib4Niv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Niv(uint, int*)"/>
            public static unsafe void VertexAttrib4Niv(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttrib4Niv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Nsv(uint, short*)"/>
            public static unsafe void VertexAttrib4Nsv(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4Nsv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Nsv(uint, short*)"/>
            public static unsafe void VertexAttrib4Nsv(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4Nsv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Nsv(uint, short*)"/>
            public static unsafe void VertexAttrib4Nsv(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib4Nsv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Nubv(uint, byte*)"/>
            public static unsafe void VertexAttrib4Nubv(uint index, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4Nubv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Nubv(uint, byte*)"/>
            public static unsafe void VertexAttrib4Nubv(uint index, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4Nubv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Nubv(uint, byte*)"/>
            public static unsafe void VertexAttrib4Nubv(uint index, in byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttrib4Nubv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Nuiv(uint, uint*)"/>
            public static unsafe void VertexAttrib4Nuiv(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttrib4Nuiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Nuiv(uint, uint*)"/>
            public static unsafe void VertexAttrib4Nuiv(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttrib4Nuiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Nuiv(uint, uint*)"/>
            public static unsafe void VertexAttrib4Nuiv(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttrib4Nuiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Nusv(uint, ushort*)"/>
            public static unsafe void VertexAttrib4Nusv(uint index, ReadOnlySpan<ushort> v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttrib4Nusv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Nusv(uint, ushort*)"/>
            public static unsafe void VertexAttrib4Nusv(uint index, ushort[] v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttrib4Nusv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4Nusv(uint, ushort*)"/>
            public static unsafe void VertexAttrib4Nusv(uint index, in ushort v)
            {
                fixed (ushort* v_ptr = &v)
                {
                    VertexAttrib4Nusv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4bv(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4bv(uint index, ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttrib4bv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4bv(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4bv(uint index, sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttrib4bv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4bv(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4bv(uint index, in sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    VertexAttrib4bv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dv(uint, double*)"/>
            public static unsafe void VertexAttrib4dv(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib4dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dv(uint, double*)"/>
            public static unsafe void VertexAttrib4dv(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib4dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dv(uint, double*)"/>
            public static unsafe void VertexAttrib4dv(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib4dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
            public static unsafe void VertexAttrib4fv(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib4fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
            public static unsafe void VertexAttrib4fv(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib4fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
            public static unsafe void VertexAttrib4fv(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib4fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4iv(uint, int*)"/>
            public static unsafe void VertexAttrib4iv(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttrib4iv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4iv(uint, int*)"/>
            public static unsafe void VertexAttrib4iv(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttrib4iv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4iv(uint, int*)"/>
            public static unsafe void VertexAttrib4iv(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttrib4iv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4sv(uint, short*)"/>
            public static unsafe void VertexAttrib4sv(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4sv(uint, short*)"/>
            public static unsafe void VertexAttrib4sv(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4sv(uint, short*)"/>
            public static unsafe void VertexAttrib4sv(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib4sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubv(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubv(uint index, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4ubv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubv(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubv(uint index, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4ubv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubv(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubv(uint index, in byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttrib4ubv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4uiv(uint, uint*)"/>
            public static unsafe void VertexAttrib4uiv(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttrib4uiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4uiv(uint, uint*)"/>
            public static unsafe void VertexAttrib4uiv(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttrib4uiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4uiv(uint, uint*)"/>
            public static unsafe void VertexAttrib4uiv(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttrib4uiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4usv(uint, ushort*)"/>
            public static unsafe void VertexAttrib4usv(uint index, ReadOnlySpan<ushort> v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttrib4usv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4usv(uint, ushort*)"/>
            public static unsafe void VertexAttrib4usv(uint index, ushort[] v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttrib4usv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4usv(uint, ushort*)"/>
            public static unsafe void VertexAttrib4usv(uint index, in ushort v)
            {
                fixed (ushort* v_ptr = &v)
                {
                    VertexAttrib4usv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointer(uint, int, VertexAttribPointerType, bool, int, void*)"/>
            public static unsafe void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexAttribPointer(index, size, type, normalized, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexAttribPointer(uint, int, VertexAttribPointerType, bool, int, void*)"/>
            public static unsafe void VertexAttribPointer<T1>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribPointer(index, size, type, normalized, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointer(uint, int, VertexAttribPointerType, bool, int, void*)"/>
            public static unsafe void VertexAttribPointer<T1>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribPointer(index, size, type, normalized, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointer(uint, int, VertexAttribPointerType, bool, int, void*)"/>
            public static unsafe void VertexAttribPointer<T1>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexAttribPointer(index, size, type, normalized, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribPropertyARB, double*)"/>
            public static unsafe void GetVertexAttribdv(uint index, VertexAttribPropertyARB pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribPropertyARB, double*)"/>
            public static unsafe void GetVertexAttribdv(uint index, VertexAttribPropertyARB pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribPropertyARB, double*)"/>
            public static unsafe void GetVertexAttribdv(uint index, VertexAttribPropertyARB pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetVertexAttribdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribPropertyARB, float*)"/>
            public static unsafe void GetVertexAttribfv(uint index, VertexAttribPropertyARB pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribfv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribPropertyARB, float*)"/>
            public static unsafe void GetVertexAttribfv(uint index, VertexAttribPropertyARB pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribfv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribPropertyARB, float*)"/>
            public static unsafe void GetVertexAttribfv(uint index, VertexAttribPropertyARB pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetVertexAttribfv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribPropertyARB, int*)"/>
            public static unsafe void GetVertexAttribiv(uint index, VertexAttribPropertyARB pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribiv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribPropertyARB, int*)"/>
            public static unsafe void GetVertexAttribiv(uint index, VertexAttribPropertyARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribiv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribPropertyARB, int*)"/>
            public static unsafe void GetVertexAttribiv(uint index, VertexAttribPropertyARB pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVertexAttribiv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="BindAttribLocation(GLHandleARB, uint, byte*)"/>
            public static unsafe void BindAttribLocation(GLHandleARB programObj, uint index, string name)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                BindAttribLocation(programObj, index, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="GetActiveAttrib(GLHandleARB, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe string GetActiveAttrib(GLHandleARB programObj, uint index, int maxLength, Span<int> length, Span<int> size, Span<AttributeType> type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveAttrib(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveAttrib(GLHandleARB, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe void GetActiveAttrib(GLHandleARB programObj, uint index, int maxLength, Span<int> length, Span<int> size, Span<AttributeType> type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveAttrib(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetActiveAttrib(GLHandleARB, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe string GetActiveAttrib(GLHandleARB programObj, uint index, int maxLength, int[] length, int[] size, AttributeType[] type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveAttrib(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveAttrib(GLHandleARB, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe void GetActiveAttrib(GLHandleARB programObj, uint index, int maxLength, int[] length, int[] size, AttributeType[] type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                            GetActiveAttrib(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetActiveAttrib(GLHandleARB, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe string GetActiveAttrib(GLHandleARB programObj, uint index, int maxLength, ref int length, ref int size, ref AttributeType type)
            {
                string name;
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (AttributeType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetActiveAttrib(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveAttrib(GLHandleARB, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe void GetActiveAttrib(GLHandleARB programObj, uint index, int maxLength, ref int length, ref int size, ref AttributeType type, out string name)
            {
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (AttributeType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetActiveAttrib(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetAttribLocation(GLHandleARB, byte*)"/>
            public static unsafe int GetAttribLocation(GLHandleARB programObj, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetAttribLocation(programObj, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="VertexAttribP1uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP1uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP1uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP1uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP1uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexAttribP1uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP2uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP2uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP2uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP2uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP2uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexAttribP2uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP3uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP3uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP3uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP3uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP3uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexAttribP3uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP4uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP4uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP4uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexAttribP4uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP4uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexAttribP4uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP2uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP2ui(VertexPointerType type, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexP2uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP2uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP2ui(VertexPointerType type, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexP2uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP2uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP2ui(VertexPointerType type, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexP2uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP3uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP3ui(VertexPointerType type, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexP3uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP3uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP3ui(VertexPointerType type, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexP3uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP3uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP3ui(VertexPointerType type, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexP3uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP4uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP4ui(VertexPointerType type, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexP4uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP4uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP4ui(VertexPointerType type, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    VertexP4uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP4uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP4ui(VertexPointerType type, in uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexP4uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP1uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP1ui(TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP1uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP1uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP1ui(TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP1uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP1uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP1ui(TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    TexCoordP1uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP2uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP2ui(TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP2uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP2uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP2ui(TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP2uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP2uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP2ui(TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    TexCoordP2uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP3uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP3ui(TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP3uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP3uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP3ui(TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP3uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP3uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP3ui(TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    TexCoordP3uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP4uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP4ui(TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP4uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP4uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP4ui(TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    TexCoordP4uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP4uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP4ui(TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    TexCoordP4uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP1uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP1uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP1uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP1uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP1uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    MultiTexCoordP1uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP2uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP2uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP2uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP2uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP2uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    MultiTexCoordP2uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP3uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP3uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP3uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP3uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP3uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    MultiTexCoordP3uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP4uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP4uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP4uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    MultiTexCoordP4uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP4uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    MultiTexCoordP4uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalP3uiv(NormalPointerType, uint*)"/>
            public static unsafe void NormalP3ui(NormalPointerType type, ReadOnlySpan<uint> coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    NormalP3uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalP3uiv(NormalPointerType, uint*)"/>
            public static unsafe void NormalP3ui(NormalPointerType type, uint[] coords)
            {
                fixed (uint* coords_ptr = coords)
                {
                    NormalP3uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalP3uiv(NormalPointerType, uint*)"/>
            public static unsafe void NormalP3ui(NormalPointerType type, in uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    NormalP3uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="ColorP3uiv(ColorPointerType, uint*)"/>
            public static unsafe void ColorP3ui(ColorPointerType type, ReadOnlySpan<uint> color)
            {
                fixed (uint* color_ptr = color)
                {
                    ColorP3uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="ColorP3uiv(ColorPointerType, uint*)"/>
            public static unsafe void ColorP3ui(ColorPointerType type, uint[] color)
            {
                fixed (uint* color_ptr = color)
                {
                    ColorP3uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="ColorP3uiv(ColorPointerType, uint*)"/>
            public static unsafe void ColorP3ui(ColorPointerType type, in uint color)
            {
                fixed (uint* color_ptr = &color)
                {
                    ColorP3uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="ColorP4uiv(ColorPointerType, uint*)"/>
            public static unsafe void ColorP4ui(ColorPointerType type, ReadOnlySpan<uint> color)
            {
                fixed (uint* color_ptr = color)
                {
                    ColorP4uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="ColorP4uiv(ColorPointerType, uint*)"/>
            public static unsafe void ColorP4ui(ColorPointerType type, uint[] color)
            {
                fixed (uint* color_ptr = color)
                {
                    ColorP4uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="ColorP4uiv(ColorPointerType, uint*)"/>
            public static unsafe void ColorP4ui(ColorPointerType type, in uint color)
            {
                fixed (uint* color_ptr = &color)
                {
                    ColorP4uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorP3uiv(ColorPointerType, uint*)"/>
            public static unsafe void SecondaryColorP3ui(ColorPointerType type, ReadOnlySpan<uint> color)
            {
                fixed (uint* color_ptr = color)
                {
                    SecondaryColorP3uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorP3uiv(ColorPointerType, uint*)"/>
            public static unsafe void SecondaryColorP3ui(ColorPointerType type, uint[] color)
            {
                fixed (uint* color_ptr = color)
                {
                    SecondaryColorP3uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorP3uiv(ColorPointerType, uint*)"/>
            public static unsafe void SecondaryColorP3ui(ColorPointerType type, in uint color)
            {
                fixed (uint* color_ptr = &color)
                {
                    SecondaryColorP3uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
            public static unsafe void ViewportArray(uint first, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    ViewportArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
            public static unsafe void ViewportArray(uint first, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    ViewportArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
            public static unsafe void ViewportArray(uint first, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    ViewportArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
            public static unsafe void ViewportIndexedf(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    ViewportIndexedfv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
            public static unsafe void ViewportIndexedf(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    ViewportIndexedfv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
            public static unsafe void ViewportIndexedf(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    ViewportIndexedfv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
            public static unsafe void ScissorArray(uint first, int count, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
            public static unsafe void ScissorArray(uint first, int count, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
            public static unsafe void ScissorArray(uint first, int count, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    ScissorArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
            public static unsafe void ScissorIndexed(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorIndexedv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
            public static unsafe void ScissorIndexed(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorIndexedv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
            public static unsafe void ScissorIndexed(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    ScissorIndexedv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
            public static unsafe void DepthRangeArray(uint first, int count, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    DepthRangeArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
            public static unsafe void DepthRangeArray(uint first, int count, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    DepthRangeArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
            public static unsafe void DepthRangeArray(uint first, int count, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    DepthRangeArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
            public static unsafe void GetFloat(GetPName target, uint index, Span<float> data)
            {
                fixed (float* data_ptr = data)
                {
                    GetFloati_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
            public static unsafe void GetFloat(GetPName target, uint index, float[] data)
            {
                fixed (float* data_ptr = data)
                {
                    GetFloati_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
            public static unsafe void GetFloat(GetPName target, uint index, ref float data)
            {
                fixed (float* data_ptr = &data)
                {
                    GetFloati_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
            public static unsafe void GetDouble(GetPName target, uint index, Span<double> data)
            {
                fixed (double* data_ptr = data)
                {
                    GetDoublei_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
            public static unsafe void GetDouble(GetPName target, uint index, double[] data)
            {
                fixed (double* data_ptr = data)
                {
                    GetDoublei_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
            public static unsafe void GetDouble(GetPName target, uint index, ref double data)
            {
                fixed (double* data_ptr = &data)
                {
                    GetDoublei_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="DepthRangeArraydvNV(uint, int, double*)"/>
            public static unsafe void DepthRangeArraydvNV(uint first, int count, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    DepthRangeArraydvNV(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dv(double*)"/>
            public static unsafe void WindowPos2dv(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos2dv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dv(double*)"/>
            public static unsafe void WindowPos2dv(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos2dv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dv(double*)"/>
            public static unsafe void WindowPos2dv(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    WindowPos2dv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fv(float*)"/>
            public static unsafe void WindowPos2fv(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos2fv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fv(float*)"/>
            public static unsafe void WindowPos2fv(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos2fv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fv(float*)"/>
            public static unsafe void WindowPos2fv(in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    WindowPos2fv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2iv(int*)"/>
            public static unsafe void WindowPos2iv(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos2iv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2iv(int*)"/>
            public static unsafe void WindowPos2iv(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos2iv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2iv(int*)"/>
            public static unsafe void WindowPos2iv(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    WindowPos2iv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2sv(short*)"/>
            public static unsafe void WindowPos2sv(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos2sv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2sv(short*)"/>
            public static unsafe void WindowPos2sv(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos2sv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2sv(short*)"/>
            public static unsafe void WindowPos2sv(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    WindowPos2sv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dv(double*)"/>
            public static unsafe void WindowPos3dv(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos3dv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dv(double*)"/>
            public static unsafe void WindowPos3dv(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos3dv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dv(double*)"/>
            public static unsafe void WindowPos3dv(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    WindowPos3dv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fv(float*)"/>
            public static unsafe void WindowPos3fv(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos3fv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fv(float*)"/>
            public static unsafe void WindowPos3fv(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos3fv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fv(float*)"/>
            public static unsafe void WindowPos3fv(in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    WindowPos3fv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3iv(int*)"/>
            public static unsafe void WindowPos3iv(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos3iv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3iv(int*)"/>
            public static unsafe void WindowPos3iv(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos3iv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3iv(int*)"/>
            public static unsafe void WindowPos3iv(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    WindowPos3iv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3sv(short*)"/>
            public static unsafe void WindowPos3sv(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos3sv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3sv(short*)"/>
            public static unsafe void WindowPos3sv(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos3sv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3sv(short*)"/>
            public static unsafe void WindowPos3sv(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    WindowPos3sv(v_ptr);
                }
            }
        }
        public static unsafe partial class ATI
        {
            /// <inheritdoc cref="DrawBuffers(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffers(ReadOnlySpan<DrawBufferMode> bufs)
            {
                int n = (int)(bufs.Length);
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    DrawBuffers(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="DrawBuffers(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffers(DrawBufferMode[] bufs)
            {
                int n = (int)(bufs.Length);
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    DrawBuffers(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="DrawBuffers(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffers(int n, in DrawBufferMode bufs)
            {
                fixed (DrawBufferMode* bufs_ptr = &bufs)
                {
                    DrawBuffers(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointer(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointer(ElementPointerTypeATI type, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                ElementPointer(type, pointer_vptr);
            }
            /// <inheritdoc cref="ElementPointer(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointer<T1>(ElementPointerTypeATI type, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ElementPointer(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointer(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointer<T1>(ElementPointerTypeATI type, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ElementPointer(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointer(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointer<T1>(ElementPointerTypeATI type, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    ElementPointer(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameteriv(TexBumpParameterATI, int*)"/>
            public static unsafe void TexBumpParameteriv(TexBumpParameterATI pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    TexBumpParameteriv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameteriv(TexBumpParameterATI, int*)"/>
            public static unsafe void TexBumpParameteriv(TexBumpParameterATI pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    TexBumpParameteriv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameteriv(TexBumpParameterATI, int*)"/>
            public static unsafe void TexBumpParameteriv(TexBumpParameterATI pname, in int param)
            {
                fixed (int* param_ptr = &param)
                {
                    TexBumpParameteriv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameterfv(TexBumpParameterATI, float*)"/>
            public static unsafe void TexBumpParameterfv(TexBumpParameterATI pname, ReadOnlySpan<float> param)
            {
                fixed (float* param_ptr = param)
                {
                    TexBumpParameterfv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameterfv(TexBumpParameterATI, float*)"/>
            public static unsafe void TexBumpParameterfv(TexBumpParameterATI pname, float[] param)
            {
                fixed (float* param_ptr = param)
                {
                    TexBumpParameterfv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameterfv(TexBumpParameterATI, float*)"/>
            public static unsafe void TexBumpParameterfv(TexBumpParameterATI pname, in float param)
            {
                fixed (float* param_ptr = &param)
                {
                    TexBumpParameterfv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameteriv(GetTexBumpParameterATI, int*)"/>
            public static unsafe void GetTexBumpParameteriv(GetTexBumpParameterATI pname, Span<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    GetTexBumpParameteriv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameteriv(GetTexBumpParameterATI, int*)"/>
            public static unsafe void GetTexBumpParameteriv(GetTexBumpParameterATI pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    GetTexBumpParameteriv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameteriv(GetTexBumpParameterATI, int*)"/>
            public static unsafe void GetTexBumpParameteriv(GetTexBumpParameterATI pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetTexBumpParameteriv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameterfv(GetTexBumpParameterATI, float*)"/>
            public static unsafe void GetTexBumpParameterfv(GetTexBumpParameterATI pname, Span<float> param)
            {
                fixed (float* param_ptr = param)
                {
                    GetTexBumpParameterfv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameterfv(GetTexBumpParameterATI, float*)"/>
            public static unsafe void GetTexBumpParameterfv(GetTexBumpParameterATI pname, float[] param)
            {
                fixed (float* param_ptr = param)
                {
                    GetTexBumpParameterfv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameterfv(GetTexBumpParameterATI, float*)"/>
            public static unsafe void GetTexBumpParameterfv(GetTexBumpParameterATI pname, ref float param)
            {
                fixed (float* param_ptr = &param)
                {
                    GetTexBumpParameterfv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SetFragmentShaderConstant(FragmentShaderConATI, float*)"/>
            public static unsafe void SetFragmentShaderConstant(FragmentShaderConATI dst, ReadOnlySpan<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    SetFragmentShaderConstant(dst, value_ptr);
                }
            }
            /// <inheritdoc cref="SetFragmentShaderConstant(FragmentShaderConATI, float*)"/>
            public static unsafe void SetFragmentShaderConstant(FragmentShaderConATI dst, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    SetFragmentShaderConstant(dst, value_ptr);
                }
            }
            /// <inheritdoc cref="SetFragmentShaderConstant(FragmentShaderConATI, float*)"/>
            public static unsafe void SetFragmentShaderConstant(FragmentShaderConATI dst, in float value)
            {
                fixed (float* value_ptr = &value)
                {
                    SetFragmentShaderConstant(dst, value_ptr);
                }
            }
            /// <inheritdoc cref="NewObjectBuffer(int, void*, ArrayObjectUsageATI)"/>
            public static unsafe uint NewObjectBuffer(int size, IntPtr pointer, ArrayObjectUsageATI usage)
            {
                uint returnValue;
                void* pointer_vptr = (void*)pointer;
                returnValue = NewObjectBuffer(size, pointer_vptr, usage);
                return returnValue;
            }
            /// <inheritdoc cref="NewObjectBuffer(int, void*, ArrayObjectUsageATI)"/>
            public static unsafe uint NewObjectBuffer<T1>(ReadOnlySpan<T1> pointer, ArrayObjectUsageATI usage)
                where T1 : unmanaged
            {
                uint returnValue;
                int size = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    returnValue = NewObjectBuffer(size, pointer_ptr, usage);
                }
                return returnValue;
            }
            /// <inheritdoc cref="NewObjectBuffer(int, void*, ArrayObjectUsageATI)"/>
            public static unsafe uint NewObjectBuffer<T1>(T1[] pointer, ArrayObjectUsageATI usage)
                where T1 : unmanaged
            {
                uint returnValue;
                int size = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    returnValue = NewObjectBuffer(size, pointer_ptr, usage);
                }
                return returnValue;
            }
            /// <inheritdoc cref="NewObjectBuffer(int, void*, ArrayObjectUsageATI)"/>
            public static unsafe uint NewObjectBuffer<T1>(int size, in T1 pointer, ArrayObjectUsageATI usage)
                where T1 : unmanaged
            {
                uint returnValue;
                fixed (void* pointer_ptr = &pointer)
                {
                    returnValue = NewObjectBuffer(size, pointer_ptr, usage);
                }
                return returnValue;
            }
            /// <inheritdoc cref="UpdateObjectBuffer(int, uint, int, void*, PreserveModeATI)"/>
            public static unsafe void UpdateObjectBuffer(int buffer, uint offset, int size, IntPtr pointer, PreserveModeATI preserve)
            {
                void* pointer_vptr = (void*)pointer;
                UpdateObjectBuffer(buffer, offset, size, pointer_vptr, preserve);
            }
            /// <inheritdoc cref="UpdateObjectBuffer(int, uint, int, void*, PreserveModeATI)"/>
            public static unsafe void UpdateObjectBuffer<T1>(int buffer, uint offset, ReadOnlySpan<T1> pointer, PreserveModeATI preserve)
                where T1 : unmanaged
            {
                int size = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    UpdateObjectBuffer(buffer, offset, size, pointer_ptr, preserve);
                }
            }
            /// <inheritdoc cref="UpdateObjectBuffer(int, uint, int, void*, PreserveModeATI)"/>
            public static unsafe void UpdateObjectBuffer<T1>(int buffer, uint offset, T1[] pointer, PreserveModeATI preserve)
                where T1 : unmanaged
            {
                int size = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    UpdateObjectBuffer(buffer, offset, size, pointer_ptr, preserve);
                }
            }
            /// <inheritdoc cref="UpdateObjectBuffer(int, uint, int, void*, PreserveModeATI)"/>
            public static unsafe void UpdateObjectBuffer<T1>(int buffer, uint offset, int size, in T1 pointer, PreserveModeATI preserve)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    UpdateObjectBuffer(buffer, offset, size, pointer_ptr, preserve);
                }
            }
            /// <inheritdoc cref="GetObjectBufferfv(int, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetObjectBufferfv(int buffer, ArrayObjectPNameATI pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetObjectBufferfv(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectBufferfv(int, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetObjectBufferfv(int buffer, ArrayObjectPNameATI pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetObjectBufferfv(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectBufferfv(int, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetObjectBufferfv(int buffer, ArrayObjectPNameATI pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetObjectBufferfv(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectBufferiv(int, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetObjectBufferiv(int buffer, ArrayObjectPNameATI pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectBufferiv(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectBufferiv(int, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetObjectBufferiv(int buffer, ArrayObjectPNameATI pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectBufferiv(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectBufferiv(int, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetObjectBufferiv(int buffer, ArrayObjectPNameATI pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetObjectBufferiv(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetArrayObjectfv(EnableCap, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetArrayObjectfv(EnableCap array, ArrayObjectPNameATI pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetArrayObjectfv(array, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetArrayObjectfv(EnableCap, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetArrayObjectfv(EnableCap array, ArrayObjectPNameATI pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetArrayObjectfv(array, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetArrayObjectfv(EnableCap, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetArrayObjectfv(EnableCap array, ArrayObjectPNameATI pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetArrayObjectfv(array, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetArrayObjectiv(EnableCap, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetArrayObjectiv(EnableCap array, ArrayObjectPNameATI pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetArrayObjectiv(array, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetArrayObjectiv(EnableCap, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetArrayObjectiv(EnableCap array, ArrayObjectPNameATI pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetArrayObjectiv(array, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetArrayObjectiv(EnableCap, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetArrayObjectiv(EnableCap array, ArrayObjectPNameATI pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetArrayObjectiv(array, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantArrayObjectfv(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVariantArrayObjectfv(uint id, ArrayObjectPNameATI pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVariantArrayObjectfv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantArrayObjectfv(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVariantArrayObjectfv(uint id, ArrayObjectPNameATI pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVariantArrayObjectfv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantArrayObjectfv(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVariantArrayObjectfv(uint id, ArrayObjectPNameATI pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetVariantArrayObjectfv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantArrayObjectiv(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVariantArrayObjectiv(uint id, ArrayObjectPNameATI pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVariantArrayObjectiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantArrayObjectiv(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVariantArrayObjectiv(uint id, ArrayObjectPNameATI pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVariantArrayObjectiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantArrayObjectiv(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVariantArrayObjectiv(uint id, ArrayObjectPNameATI pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVariantArrayObjectiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectfv(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVertexAttribArrayObjectfv(uint index, ArrayObjectPNameATI pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribArrayObjectfv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectfv(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVertexAttribArrayObjectfv(uint index, ArrayObjectPNameATI pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribArrayObjectfv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectfv(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVertexAttribArrayObjectfv(uint index, ArrayObjectPNameATI pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetVertexAttribArrayObjectfv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectiv(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVertexAttribArrayObjectiv(uint index, ArrayObjectPNameATI pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribArrayObjectiv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectiv(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVertexAttribArrayObjectiv(uint index, ArrayObjectPNameATI pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribArrayObjectiv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectiv(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVertexAttribArrayObjectiv(uint index, ArrayObjectPNameATI pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVertexAttribArrayObjectiv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1sv(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream1sv(VertexStreamATI stream, ReadOnlySpan<short> coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream1sv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1sv(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream1sv(VertexStreamATI stream, short[] coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream1sv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1sv(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream1sv(VertexStreamATI stream, in short coords)
            {
                fixed (short* coords_ptr = &coords)
                {
                    VertexStream1sv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1iv(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream1iv(VertexStreamATI stream, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream1iv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1iv(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream1iv(VertexStreamATI stream, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream1iv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1iv(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream1iv(VertexStreamATI stream, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    VertexStream1iv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1fv(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream1fv(VertexStreamATI stream, ReadOnlySpan<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream1fv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1fv(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream1fv(VertexStreamATI stream, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream1fv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1fv(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream1fv(VertexStreamATI stream, in float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    VertexStream1fv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1dv(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream1dv(VertexStreamATI stream, ReadOnlySpan<double> coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream1dv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1dv(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream1dv(VertexStreamATI stream, double[] coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream1dv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1dv(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream1dv(VertexStreamATI stream, in double coords)
            {
                fixed (double* coords_ptr = &coords)
                {
                    VertexStream1dv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2sv(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream2sv(VertexStreamATI stream, ReadOnlySpan<short> coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream2sv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2sv(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream2sv(VertexStreamATI stream, short[] coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream2sv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2sv(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream2sv(VertexStreamATI stream, in short coords)
            {
                fixed (short* coords_ptr = &coords)
                {
                    VertexStream2sv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2iv(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream2iv(VertexStreamATI stream, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream2iv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2iv(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream2iv(VertexStreamATI stream, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream2iv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2iv(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream2iv(VertexStreamATI stream, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    VertexStream2iv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2fv(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream2fv(VertexStreamATI stream, ReadOnlySpan<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream2fv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2fv(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream2fv(VertexStreamATI stream, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream2fv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2fv(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream2fv(VertexStreamATI stream, in float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    VertexStream2fv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2dv(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream2dv(VertexStreamATI stream, ReadOnlySpan<double> coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream2dv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2dv(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream2dv(VertexStreamATI stream, double[] coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream2dv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2dv(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream2dv(VertexStreamATI stream, in double coords)
            {
                fixed (double* coords_ptr = &coords)
                {
                    VertexStream2dv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3sv(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream3sv(VertexStreamATI stream, ReadOnlySpan<short> coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream3sv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3sv(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream3sv(VertexStreamATI stream, short[] coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream3sv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3sv(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream3sv(VertexStreamATI stream, in short coords)
            {
                fixed (short* coords_ptr = &coords)
                {
                    VertexStream3sv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3iv(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream3iv(VertexStreamATI stream, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream3iv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3iv(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream3iv(VertexStreamATI stream, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream3iv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3iv(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream3iv(VertexStreamATI stream, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    VertexStream3iv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3fv(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream3fv(VertexStreamATI stream, ReadOnlySpan<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream3fv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3fv(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream3fv(VertexStreamATI stream, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream3fv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3fv(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream3fv(VertexStreamATI stream, in float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    VertexStream3fv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3dv(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream3dv(VertexStreamATI stream, ReadOnlySpan<double> coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream3dv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3dv(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream3dv(VertexStreamATI stream, double[] coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream3dv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3dv(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream3dv(VertexStreamATI stream, in double coords)
            {
                fixed (double* coords_ptr = &coords)
                {
                    VertexStream3dv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4sv(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream4sv(VertexStreamATI stream, ReadOnlySpan<short> coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream4sv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4sv(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream4sv(VertexStreamATI stream, short[] coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream4sv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4sv(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream4sv(VertexStreamATI stream, in short coords)
            {
                fixed (short* coords_ptr = &coords)
                {
                    VertexStream4sv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4iv(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream4iv(VertexStreamATI stream, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream4iv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4iv(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream4iv(VertexStreamATI stream, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream4iv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4iv(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream4iv(VertexStreamATI stream, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    VertexStream4iv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4fv(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream4fv(VertexStreamATI stream, ReadOnlySpan<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream4fv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4fv(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream4fv(VertexStreamATI stream, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream4fv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4fv(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream4fv(VertexStreamATI stream, in float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    VertexStream4fv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4dv(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream4dv(VertexStreamATI stream, ReadOnlySpan<double> coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream4dv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4dv(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream4dv(VertexStreamATI stream, double[] coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream4dv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4dv(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream4dv(VertexStreamATI stream, in double coords)
            {
                fixed (double* coords_ptr = &coords)
                {
                    VertexStream4dv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3bv(VertexStreamATI, sbyte*)"/>
            public static unsafe void NormalStream3bv(VertexStreamATI stream, ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    NormalStream3bv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3bv(VertexStreamATI, sbyte*)"/>
            public static unsafe void NormalStream3bv(VertexStreamATI stream, sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    NormalStream3bv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3bv(VertexStreamATI, sbyte*)"/>
            public static unsafe void NormalStream3bv(VertexStreamATI stream, in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    NormalStream3bv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3sv(VertexStreamATI, short*)"/>
            public static unsafe void NormalStream3sv(VertexStreamATI stream, ReadOnlySpan<short> coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    NormalStream3sv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3sv(VertexStreamATI, short*)"/>
            public static unsafe void NormalStream3sv(VertexStreamATI stream, short[] coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    NormalStream3sv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3sv(VertexStreamATI, short*)"/>
            public static unsafe void NormalStream3sv(VertexStreamATI stream, in short coords)
            {
                fixed (short* coords_ptr = &coords)
                {
                    NormalStream3sv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3iv(VertexStreamATI, int*)"/>
            public static unsafe void NormalStream3iv(VertexStreamATI stream, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    NormalStream3iv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3iv(VertexStreamATI, int*)"/>
            public static unsafe void NormalStream3iv(VertexStreamATI stream, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    NormalStream3iv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3iv(VertexStreamATI, int*)"/>
            public static unsafe void NormalStream3iv(VertexStreamATI stream, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    NormalStream3iv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3fv(VertexStreamATI, float*)"/>
            public static unsafe void NormalStream3fv(VertexStreamATI stream, ReadOnlySpan<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    NormalStream3fv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3fv(VertexStreamATI, float*)"/>
            public static unsafe void NormalStream3fv(VertexStreamATI stream, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    NormalStream3fv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3fv(VertexStreamATI, float*)"/>
            public static unsafe void NormalStream3fv(VertexStreamATI stream, in float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    NormalStream3fv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3dv(VertexStreamATI, double*)"/>
            public static unsafe void NormalStream3dv(VertexStreamATI stream, ReadOnlySpan<double> coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    NormalStream3dv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3dv(VertexStreamATI, double*)"/>
            public static unsafe void NormalStream3dv(VertexStreamATI stream, double[] coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    NormalStream3dv(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3dv(VertexStreamATI, double*)"/>
            public static unsafe void NormalStream3dv(VertexStreamATI stream, in double coords)
            {
                fixed (double* coords_ptr = &coords)
                {
                    NormalStream3dv(stream, coords_ptr);
                }
            }
        }
        public static unsafe partial class EXT
        {
            /// <inheritdoc cref="EGLImageTargetTexStorage(All, void*, int*)"/>
            public static unsafe void EGLImageTargetTexStorage(All target, IntPtr image, in int attrib_list)
            {
                fixed (int* attrib_list_ptr = &attrib_list)
                {
                    void* image_vptr = (void*)image;
                    EGLImageTargetTexStorage(target, image_vptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="EGLImageTargetTexStorage(All, void*, int*)"/>
            public static unsafe void EGLImageTargetTexStorage<T1>(All target, ref T1 image, in int attrib_list)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                fixed (int* attrib_list_ptr = &attrib_list)
                {
                    EGLImageTargetTexStorage(target, image_ptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="EGLImageTargetTextureStorage(int, void*, int*)"/>
            public static unsafe void EGLImageTargetTextureStorage(int texture, IntPtr image, in int attrib_list)
            {
                fixed (int* attrib_list_ptr = &attrib_list)
                {
                    void* image_vptr = (void*)image;
                    EGLImageTargetTextureStorage(texture, image_vptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="EGLImageTargetTextureStorage(int, void*, int*)"/>
            public static unsafe void EGLImageTargetTextureStorage<T1>(int texture, ref T1 image, in int attrib_list)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                fixed (int* attrib_list_ptr = &attrib_list)
                {
                    EGLImageTargetTextureStorage(texture, image_ptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ColorSubTable(target, start, count, format, type, data_vptr);
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ColorSubTable(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ColorSubTable(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ColorSubTable(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTargetEXT, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D(ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                ConvolutionFilter1D(target, internalformat, width, format, type, image_vptr);
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTargetEXT, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter1D(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTargetEXT, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter1D(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTargetEXT, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, in T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    ConvolutionFilter1D(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D(ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                ConvolutionFilter2D(target, internalformat, width, height, format, type, image_vptr);
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter2D(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter2D(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, in T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    ConvolutionFilter2D(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfv(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterfv(ConvolutionTargetEXT target, ConvolutionParameter pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfv(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterfv(ConvolutionTargetEXT target, ConvolutionParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfv(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterfv(ConvolutionTargetEXT target, ConvolutionParameter pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameteriv(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameteriv(ConvolutionTargetEXT target, ConvolutionParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameteriv(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameteriv(ConvolutionTargetEXT target, ConvolutionParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameteriv(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameteriv(ConvolutionTargetEXT target, ConvolutionParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTargetEXT, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter(ConvolutionTargetEXT target, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                GetConvolutionFilter(target, format, type, image_vptr);
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTargetEXT, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter<T1>(ConvolutionTargetEXT target, PixelFormat format, PixelType type, Span<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    GetConvolutionFilter(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTargetEXT, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter<T1>(ConvolutionTargetEXT target, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    GetConvolutionFilter(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTargetEXT, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter<T1>(ConvolutionTargetEXT target, PixelFormat format, PixelType type, ref T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    GetConvolutionFilter(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfv(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterfv(ConvolutionTargetEXT target, ConvolutionParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfv(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterfv(ConvolutionTargetEXT target, ConvolutionParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfv(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterfv(ConvolutionTargetEXT target, ConvolutionParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameteriv(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameteriv(ConvolutionTargetEXT target, ConvolutionParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameteriv(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameteriv(ConvolutionTargetEXT target, ConvolutionParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameteriv(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameteriv(ConvolutionTargetEXT target, ConvolutionParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter(SeparableTargetEXT target, PixelFormat format, PixelType type, IntPtr row, IntPtr column, IntPtr span)
            {
                void* row_vptr = (void*)row;
                void* column_vptr = (void*)column;
                void* span_vptr = (void*)span;
                GetSeparableFilter(target, format, type, row_vptr, column_vptr, span_vptr);
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, Span<T3> row, Span<T2> column, Span<T1> span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* span_ptr = span)
                        {
                            GetSeparableFilter(target, format, type, row_ptr, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, T3[] row, T2[] column, T1[] span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* span_ptr = span)
                        {
                            GetSeparableFilter(target, format, type, row_ptr, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, ref T1 row, ref T2 column, ref T3 span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                fixed (void* span_ptr = &span)
                {
                    GetSeparableFilter(target, format, type, row_ptr, column_ptr, span_ptr);
                }
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column)
            {
                void* row_vptr = (void*)row;
                void* column_vptr = (void*)column;
                SeparableFilter2D(target, internalformat, width, height, format, type, row_vptr, column_vptr);
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T2> row, ReadOnlySpan<T1> column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        SeparableFilter2D(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T2[] row, T1[] column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* row_ptr = row)
                {
                    fixed (void* column_ptr = column)
                    {
                        SeparableFilter2D(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, in T1 row, in T2 column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                {
                    SeparableFilter2D(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3bv(sbyte*)"/>
            public static unsafe void Tangent3bv(ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    Tangent3bv(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3bv(sbyte*)"/>
            public static unsafe void Tangent3bv(sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    Tangent3bv(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3bv(sbyte*)"/>
            public static unsafe void Tangent3bv(in sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    Tangent3bv(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3dv(double*)"/>
            public static unsafe void Tangent3dv(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    Tangent3dv(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3dv(double*)"/>
            public static unsafe void Tangent3dv(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    Tangent3dv(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3dv(double*)"/>
            public static unsafe void Tangent3dv(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    Tangent3dv(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3fv(float*)"/>
            public static unsafe void Tangent3fv(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    Tangent3fv(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3fv(float*)"/>
            public static unsafe void Tangent3fv(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    Tangent3fv(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3fv(float*)"/>
            public static unsafe void Tangent3fv(in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    Tangent3fv(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3iv(int*)"/>
            public static unsafe void Tangent3iv(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    Tangent3iv(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3iv(int*)"/>
            public static unsafe void Tangent3iv(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    Tangent3iv(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3iv(int*)"/>
            public static unsafe void Tangent3iv(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    Tangent3iv(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3sv(short*)"/>
            public static unsafe void Tangent3sv(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    Tangent3sv(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3sv(short*)"/>
            public static unsafe void Tangent3sv(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    Tangent3sv(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3sv(short*)"/>
            public static unsafe void Tangent3sv(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    Tangent3sv(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3bv(sbyte*)"/>
            public static unsafe void Binormal3bv(ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    Binormal3bv(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3bv(sbyte*)"/>
            public static unsafe void Binormal3bv(sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    Binormal3bv(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3bv(sbyte*)"/>
            public static unsafe void Binormal3bv(in sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    Binormal3bv(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3dv(double*)"/>
            public static unsafe void Binormal3dv(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    Binormal3dv(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3dv(double*)"/>
            public static unsafe void Binormal3dv(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    Binormal3dv(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3dv(double*)"/>
            public static unsafe void Binormal3dv(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    Binormal3dv(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3fv(float*)"/>
            public static unsafe void Binormal3fv(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    Binormal3fv(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3fv(float*)"/>
            public static unsafe void Binormal3fv(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    Binormal3fv(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3fv(float*)"/>
            public static unsafe void Binormal3fv(in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    Binormal3fv(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3iv(int*)"/>
            public static unsafe void Binormal3iv(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    Binormal3iv(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3iv(int*)"/>
            public static unsafe void Binormal3iv(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    Binormal3iv(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3iv(int*)"/>
            public static unsafe void Binormal3iv(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    Binormal3iv(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3sv(short*)"/>
            public static unsafe void Binormal3sv(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    Binormal3sv(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3sv(short*)"/>
            public static unsafe void Binormal3sv(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    Binormal3sv(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3sv(short*)"/>
            public static unsafe void Binormal3sv(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    Binormal3sv(v_ptr);
                }
            }
            /// <inheritdoc cref="TangentPointer(TangentPointerTypeEXT, int, void*)"/>
            public static unsafe void TangentPointer(TangentPointerTypeEXT type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                TangentPointer(type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="TangentPointer(TangentPointerTypeEXT, int, void*)"/>
            public static unsafe void TangentPointer<T1>(TangentPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    TangentPointer(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TangentPointer(TangentPointerTypeEXT, int, void*)"/>
            public static unsafe void TangentPointer<T1>(TangentPointerTypeEXT type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    TangentPointer(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TangentPointer(TangentPointerTypeEXT, int, void*)"/>
            public static unsafe void TangentPointer<T1>(TangentPointerTypeEXT type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    TangentPointer(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="BinormalPointer(BinormalPointerTypeEXT, int, void*)"/>
            public static unsafe void BinormalPointer(BinormalPointerTypeEXT type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                BinormalPointer(type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="BinormalPointer(BinormalPointerTypeEXT, int, void*)"/>
            public static unsafe void BinormalPointer<T1>(BinormalPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    BinormalPointer(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="BinormalPointer(BinormalPointerTypeEXT, int, void*)"/>
            public static unsafe void BinormalPointer<T1>(BinormalPointerTypeEXT type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    BinormalPointer(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="BinormalPointer(BinormalPointerTypeEXT, int, void*)"/>
            public static unsafe void BinormalPointer<T1>(BinormalPointerTypeEXT type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    BinormalPointer(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterdv(CullParameterEXT, double*)"/>
            public static unsafe void CullParameterdv(CullParameterEXT pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    CullParameterdv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterdv(CullParameterEXT, double*)"/>
            public static unsafe void CullParameterdv(CullParameterEXT pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    CullParameterdv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterdv(CullParameterEXT, double*)"/>
            public static unsafe void CullParameterdv(CullParameterEXT pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    CullParameterdv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterfv(CullParameterEXT, float*)"/>
            public static unsafe void CullParameterfv(CullParameterEXT pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CullParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterfv(CullParameterEXT, float*)"/>
            public static unsafe void CullParameterfv(CullParameterEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CullParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterfv(CullParameterEXT, float*)"/>
            public static unsafe void CullParameterfv(CullParameterEXT pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    CullParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="LabelObject(All, uint, int, byte*)"/>
            public static unsafe void LabelObject(All type, uint obj, int length, string label)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                LabelObject(type, obj, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            /// <inheritdoc cref="GetObjectLabel(All, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabel(All type, uint obj, int bufSize, Span<int> length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(type, obj, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabel(All, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabel(All type, uint obj, int bufSize, Span<int> length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(type, obj, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectLabel(All, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabel(All type, uint obj, int bufSize, int[] length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(type, obj, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabel(All, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabel(All type, uint obj, int bufSize, int[] length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(type, obj, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectLabel(All, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabel(All type, uint obj, int bufSize, ref int length)
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(type, obj, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabel(All, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabel(All type, uint obj, int bufSize, ref int length, out string label)
            {
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(type, obj, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="InsertEventMarker(int, byte*)"/>
            public static unsafe void InsertEventMarker(int length, string marker)
            {
                byte* marker_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(marker);
                InsertEventMarker(length, marker_ptr);
                Marshal.FreeCoTaskMem((IntPtr)marker_ptr);
            }
            /// <inheritdoc cref="PushGroupMarker(int, byte*)"/>
            public static unsafe void PushGroupMarker(int length, string marker)
            {
                byte* marker_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(marker);
                PushGroupMarker(length, marker_ptr);
                Marshal.FreeCoTaskMem((IntPtr)marker_ptr);
            }
            /// <inheritdoc cref="MatrixLoadf(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadf(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadf(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadf(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadf(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadf(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadf(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadf(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoadf(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadd(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadd(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoadd(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadd(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadd(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoadd(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadd(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadd(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixLoadd(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultf(MatrixMode, float*)"/>
            public static unsafe void MatrixMultf(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultf(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultf(MatrixMode, float*)"/>
            public static unsafe void MatrixMultf(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultf(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultf(MatrixMode, float*)"/>
            public static unsafe void MatrixMultf(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMultf(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultd(MatrixMode, double*)"/>
            public static unsafe void MatrixMultd(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultd(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultd(MatrixMode, double*)"/>
            public static unsafe void MatrixMultd(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultd(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultd(MatrixMode, double*)"/>
            public static unsafe void MatrixMultd(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixMultd(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfv(int, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterfv(int texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    TextureParameterfv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfv(int, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterfv(int texture, TextureTarget target, TextureParameterName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    TextureParameterfv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfv(int, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterfv(int texture, TextureTarget target, TextureParameterName pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    TextureParameterfv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameteriv(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameteriv(int texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameteriv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameteriv(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameteriv(int texture, TextureTarget target, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameteriv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameteriv(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameteriv(int texture, TextureTarget target, TextureParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TextureParameteriv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage1D(int, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage1D(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureImage1D(texture, target, level, internalformat, width, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureImage1D(int, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage1D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage1D(texture, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage1D(int, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage1D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage1D(texture, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage1D(int, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage1D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureImage1D(texture, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage2D(int, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage2D(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureImage2D(texture, target, level, internalformat, width, height, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureImage2D(int, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage2D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage2D(texture, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage2D(int, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage2D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage2D(texture, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage2D(int, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage2D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureImage2D(texture, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage1D(int, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1D(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage1D(texture, target, level, xoffset, width, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage1D(int, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1D<T1>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage1D(texture, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage1D(int, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1D<T1>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage1D(texture, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage1D(int, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1D<T1>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage1D(texture, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage2D(int, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage2D(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage2D(int, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2D<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage2D(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage2D(int, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2D<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage2D(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage2D(int, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2D<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage2D(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImage(int, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetTextureImage(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetTextureImage(texture, target, level, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="GetTextureImage(int, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetTextureImage<T1>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, Span<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureImage(texture, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImage(int, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetTextureImage<T1>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureImage(texture, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImage(int, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetTextureImage<T1>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetTextureImage(texture, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterfv(int, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureParameterfv(int texture, TextureTarget target, GetTextureParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureParameterfv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterfv(int, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureParameterfv(int texture, TextureTarget target, GetTextureParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureParameterfv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterfv(int, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureParameterfv(int texture, TextureTarget target, GetTextureParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetTextureParameterfv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameteriv(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameteriv(int texture, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameteriv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameteriv(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameteriv(int texture, TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameteriv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameteriv(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameteriv(int texture, TextureTarget target, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureParameteriv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfv(int, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureLevelParameterfv(int texture, TextureTarget target, int level, GetTextureParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureLevelParameterfv(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfv(int, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureLevelParameterfv(int texture, TextureTarget target, int level, GetTextureParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureLevelParameterfv(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfv(int, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureLevelParameterfv(int texture, TextureTarget target, int level, GetTextureParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetTextureLevelParameterfv(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameteriv(int, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureLevelParameteriv(int texture, TextureTarget target, int level, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureLevelParameteriv(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameteriv(int, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureLevelParameteriv(int texture, TextureTarget target, int level, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureLevelParameteriv(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameteriv(int, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureLevelParameteriv(int texture, TextureTarget target, int level, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureLevelParameteriv(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage3D(int, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage3D(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureImage3D(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureImage3D(int, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage3D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage3D(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage3D(int, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage3D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage3D(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage3D(int, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage3D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureImage3D(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage3D(int, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage3D(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage3D(int, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3D<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage3D(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage3D(int, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3D<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage3D(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage3D(int, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3D<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage3D(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordPointer(TextureUnit, int, TexCoordPointerType, int, void*)"/>
            public static unsafe void MultiTexCoordPointer(TextureUnit texunit, int size, TexCoordPointerType type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                MultiTexCoordPointer(texunit, size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="MultiTexCoordPointer(TextureUnit, int, TexCoordPointerType, int, void*)"/>
            public static unsafe void MultiTexCoordPointer<T1>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    MultiTexCoordPointer(texunit, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordPointer(TextureUnit, int, TexCoordPointerType, int, void*)"/>
            public static unsafe void MultiTexCoordPointer<T1>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    MultiTexCoordPointer(texunit, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordPointer(TextureUnit, int, TexCoordPointerType, int, void*)"/>
            public static unsafe void MultiTexCoordPointer<T1>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    MultiTexCoordPointer(texunit, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnvfv(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void MultiTexEnvfv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexEnvfv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnvfv(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void MultiTexEnvfv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexEnvfv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnvfv(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void MultiTexEnvfv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    MultiTexEnvfv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnviv(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void MultiTexEnviv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexEnviv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnviv(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void MultiTexEnviv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexEnviv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnviv(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void MultiTexEnviv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MultiTexEnviv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGendv(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void MultiTexGendv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    MultiTexGendv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGendv(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void MultiTexGendv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    MultiTexGendv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGendv(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void MultiTexGendv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, in double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    MultiTexGendv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGenfv(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void MultiTexGenfv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexGenfv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGenfv(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void MultiTexGenfv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexGenfv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGenfv(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void MultiTexGenfv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    MultiTexGenfv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGeniv(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void MultiTexGeniv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexGeniv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGeniv(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void MultiTexGeniv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexGeniv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGeniv(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void MultiTexGeniv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MultiTexGeniv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnvfv(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void GetMultiTexEnvfv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexEnvfv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnvfv(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void GetMultiTexEnvfv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexEnvfv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnvfv(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void GetMultiTexEnvfv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMultiTexEnvfv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnviv(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetMultiTexEnviv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexEnviv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnviv(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetMultiTexEnviv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexEnviv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnviv(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetMultiTexEnviv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMultiTexEnviv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGendv(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void GetMultiTexGendv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetMultiTexGendv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGendv(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void GetMultiTexGendv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetMultiTexGendv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGendv(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void GetMultiTexGendv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetMultiTexGendv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGenfv(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void GetMultiTexGenfv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexGenfv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGenfv(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void GetMultiTexGenfv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexGenfv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGenfv(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void GetMultiTexGenfv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMultiTexGenfv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGeniv(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetMultiTexGeniv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexGeniv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGeniv(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetMultiTexGeniv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexGeniv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGeniv(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetMultiTexGeniv(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMultiTexGeniv(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameteriv(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameteriv(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexParameteriv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameteriv(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameteriv(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexParameteriv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameteriv(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameteriv(TextureUnit texunit, TextureTarget target, TextureParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MultiTexParameteriv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterfv(TextureUnit, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void MultiTexParameterfv(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexParameterfv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterfv(TextureUnit, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void MultiTexParameterfv(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexParameterfv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterfv(TextureUnit, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void MultiTexParameterfv(TextureUnit texunit, TextureTarget target, TextureParameterName pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    MultiTexParameterfv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage1D(TextureUnit, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage1D(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexImage1D(texunit, target, level, internalformat, width, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexImage1D(TextureUnit, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage1D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage1D(texunit, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage1D(TextureUnit, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage1D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage1D(texunit, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage1D(TextureUnit, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage1D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexImage1D(texunit, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage2D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage2D(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexImage2D(texunit, target, level, internalformat, width, height, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexImage2D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage2D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage2D(texunit, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage2D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage2D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage2D(texunit, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage2D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage2D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexImage2D(texunit, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage1D(TextureUnit, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage1D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexSubImage1D(texunit, target, level, xoffset, width, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexSubImage1D(TextureUnit, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage1D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage1D(texunit, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage1D(TextureUnit, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage1D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage1D(texunit, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage1D(TextureUnit, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage1D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexSubImage1D(texunit, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage2D(TextureUnit, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage2D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexSubImage2D(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexSubImage2D(TextureUnit, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage2D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage2D(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage2D(TextureUnit, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage2D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage2D(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage2D(TextureUnit, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage2D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexSubImage2D(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexImage(TextureUnit, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMultiTexImage(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetMultiTexImage(texunit, target, level, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="GetMultiTexImage(TextureUnit, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMultiTexImage<T1>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, Span<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetMultiTexImage(texunit, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexImage(TextureUnit, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMultiTexImage<T1>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetMultiTexImage(texunit, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexImage(TextureUnit, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMultiTexImage<T1>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetMultiTexImage(texunit, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterfv(TextureUnit, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexParameterfv(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexParameterfv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterfv(TextureUnit, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexParameterfv(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexParameterfv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterfv(TextureUnit, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexParameterfv(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMultiTexParameterfv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameteriv(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameteriv(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexParameteriv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameteriv(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameteriv(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexParameteriv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameteriv(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameteriv(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMultiTexParameteriv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterfv(TextureUnit, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexLevelParameterfv(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexLevelParameterfv(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterfv(TextureUnit, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexLevelParameterfv(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexLevelParameterfv(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterfv(TextureUnit, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexLevelParameterfv(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMultiTexLevelParameterfv(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameteriv(TextureUnit, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexLevelParameteriv(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexLevelParameteriv(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameteriv(TextureUnit, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexLevelParameteriv(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexLevelParameteriv(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameteriv(TextureUnit, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexLevelParameteriv(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMultiTexLevelParameteriv(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage3D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage3D(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexImage3D(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexImage3D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage3D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage3D(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage3D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage3D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage3D(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage3D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage3D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexImage3D(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage3D(TextureUnit, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage3D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexSubImage3D(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexSubImage3D(TextureUnit, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage3D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage3D(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage3D(TextureUnit, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage3D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage3D(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage3D(TextureUnit, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage3D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexSubImage3D(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetFloatIndexedv(GetPName, uint, float*)"/>
            public static unsafe void GetFloatIndexedv(GetPName target, uint index, Span<float> data)
            {
                fixed (float* data_ptr = data)
                {
                    GetFloatIndexedv(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloatIndexedv(GetPName, uint, float*)"/>
            public static unsafe void GetFloatIndexedv(GetPName target, uint index, float[] data)
            {
                fixed (float* data_ptr = data)
                {
                    GetFloatIndexedv(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloatIndexedv(GetPName, uint, float*)"/>
            public static unsafe void GetFloatIndexedv(GetPName target, uint index, ref float data)
            {
                fixed (float* data_ptr = &data)
                {
                    GetFloatIndexedv(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoubleIndexedv(GetPName, uint, double*)"/>
            public static unsafe void GetDoubleIndexedv(GetPName target, uint index, Span<double> data)
            {
                fixed (double* data_ptr = data)
                {
                    GetDoubleIndexedv(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoubleIndexedv(GetPName, uint, double*)"/>
            public static unsafe void GetDoubleIndexedv(GetPName target, uint index, double[] data)
            {
                fixed (double* data_ptr = data)
                {
                    GetDoubleIndexedv(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoubleIndexedv(GetPName, uint, double*)"/>
            public static unsafe void GetDoubleIndexedv(GetPName target, uint index, ref double data)
            {
                fixed (double* data_ptr = &data)
                {
                    GetDoubleIndexedv(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerIndexedv(GetPName, uint, int*)"/>
            public static unsafe void GetIntegerIndexedv(GetPName target, uint index, Span<int> data)
            {
                fixed (int* data_ptr = data)
                {
                    GetIntegerIndexedv(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerIndexedv(GetPName, uint, int*)"/>
            public static unsafe void GetIntegerIndexedv(GetPName target, uint index, int[] data)
            {
                fixed (int* data_ptr = data)
                {
                    GetIntegerIndexedv(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerIndexedv(GetPName, uint, int*)"/>
            public static unsafe void GetIntegerIndexedv(GetPName target, uint index, ref int data)
            {
                fixed (int* data_ptr = &data)
                {
                    GetIntegerIndexedv(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBooleanIndexedv(BufferTargetARB, uint, bool*)"/>
            public static unsafe void GetBooleanIndexedv(BufferTargetARB target, uint index, Span<bool> data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetBooleanIndexedv(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBooleanIndexedv(BufferTargetARB, uint, bool*)"/>
            public static unsafe void GetBooleanIndexedv(BufferTargetARB target, uint index, bool[] data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetBooleanIndexedv(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBooleanIndexedv(BufferTargetARB, uint, bool*)"/>
            public static unsafe void GetBooleanIndexedv(BufferTargetARB target, uint index, ref bool data)
            {
                fixed (bool* data_ptr = &data)
                {
                    GetBooleanIndexedv(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage3D(int, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage3D(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureImage3D(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureImage3D(int, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage3D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage3D(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage3D(int, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage3D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage3D(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage3D(int, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage3D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureImage3D(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage2D(int, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage2D(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureImage2D(texture, target, level, internalformat, width, height, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureImage2D(int, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage2D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage2D(texture, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage2D(int, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage2D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage2D(texture, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage2D(int, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage2D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureImage2D(texture, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage1D(int, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage1D(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureImage1D(texture, target, level, internalformat, width, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureImage1D(int, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage1D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage1D(texture, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage1D(int, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage1D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage1D(texture, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage1D(int, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage1D<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureImage1D(texture, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureSubImage3D(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage3D(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage3D(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureSubImage3D(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureSubImage2D(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage2D(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage2D(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureSubImage2D(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D(int texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureSubImage1D(texture, target, level, xoffset, width, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D<T1>(int texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage1D(texture, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D<T1>(int texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage1D(texture, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D<T1>(int texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureSubImage1D(texture, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTextureImage(int texture, TextureTarget target, int lod, IntPtr img)
            {
                void* img_vptr = (void*)img;
                GetCompressedTextureImage(texture, target, lod, img_vptr);
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTextureImage<T1>(int texture, TextureTarget target, int lod, Span<T1> img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedTextureImage(texture, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTextureImage<T1>(int texture, TextureTarget target, int lod, T1[] img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedTextureImage(texture, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTextureImage<T1>(int texture, TextureTarget target, int lod, ref T1 img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = &img)
                {
                    GetCompressedTextureImage(texture, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage3D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage3D(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexImage3D(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexImage3D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage3D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage3D(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage3D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage3D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage3D(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage3D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage3D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexImage3D(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage2D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage2D(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexImage2D(texunit, target, level, internalformat, width, height, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexImage2D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage2D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage2D(texunit, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage2D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage2D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage2D(texunit, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage2D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage2D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexImage2D(texunit, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage1D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage1D(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexImage1D(texunit, target, level, internalformat, width, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexImage1D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage1D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage1D(texunit, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage1D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage1D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage1D(texunit, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage1D(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage1D<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexImage1D(texunit, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage3D(TextureUnit, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage3D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexSubImage3D(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage3D(TextureUnit, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage3D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage3D(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage3D(TextureUnit, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage3D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage3D(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage3D(TextureUnit, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage3D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexSubImage3D(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage2D(TextureUnit, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage2D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexSubImage2D(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage2D(TextureUnit, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage2D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage2D(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage2D(TextureUnit, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage2D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage2D(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage2D(TextureUnit, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage2D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexSubImage2D(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage1D(TextureUnit, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage1D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexSubImage1D(texunit, target, level, xoffset, width, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage1D(TextureUnit, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage1D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage1D(texunit, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage1D(TextureUnit, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage1D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, T1[] bits)
                where T1 : unmanaged
            {
                int imageSize = (int)(bits.Length * sizeof(T1));
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage1D(texunit, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage1D(TextureUnit, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage1D<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, in T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexSubImage1D(texunit, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedMultiTexImage(TextureUnit, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedMultiTexImage(TextureUnit texunit, TextureTarget target, int lod, IntPtr img)
            {
                void* img_vptr = (void*)img;
                GetCompressedMultiTexImage(texunit, target, lod, img_vptr);
            }
            /// <inheritdoc cref="GetCompressedMultiTexImage(TextureUnit, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedMultiTexImage<T1>(TextureUnit texunit, TextureTarget target, int lod, Span<T1> img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedMultiTexImage(texunit, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedMultiTexImage(TextureUnit, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedMultiTexImage<T1>(TextureUnit texunit, TextureTarget target, int lod, T1[] img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedMultiTexImage(texunit, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedMultiTexImage(TextureUnit, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedMultiTexImage<T1>(TextureUnit texunit, TextureTarget target, int lod, ref T1 img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = &img)
                {
                    GetCompressedMultiTexImage(texunit, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposef(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposef(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadTransposef(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposef(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposef(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadTransposef(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposef(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposef(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoadTransposef(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposed(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposed(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoadTransposed(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposed(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposed(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoadTransposed(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposed(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposed(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixLoadTransposed(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposef(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposef(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultTransposef(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposef(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposef(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultTransposef(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposef(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposef(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMultTransposef(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposed(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposed(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultTransposed(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposed(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposed(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultTransposed(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposed(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposed(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixMultTransposed(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferData(int buffer, nint size, IntPtr data, VertexBufferObjectUsage usage)
            {
                void* data_vptr = (void*)data;
                NamedBufferData(buffer, size, data_vptr, usage);
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferData<T1>(int buffer, nint size, ReadOnlySpan<T1> data, VertexBufferObjectUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferData(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferData<T1>(int buffer, nint size, T1[] data, VertexBufferObjectUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferData(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, VertexBufferObjectUsage)"/>
            public static unsafe void NamedBufferData<T1>(int buffer, nint size, in T1 data, VertexBufferObjectUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferData(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData(int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                NamedBufferSubData(buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameteriv(int, BufferPNameARB, int*)"/>
            public static unsafe void GetNamedBufferParameteriv(int buffer, BufferPNameARB pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedBufferParameteriv(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameteriv(int, BufferPNameARB, int*)"/>
            public static unsafe void GetNamedBufferParameteriv(int buffer, BufferPNameARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedBufferParameteriv(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameteriv(int, BufferPNameARB, int*)"/>
            public static unsafe void GetNamedBufferParameteriv(int buffer, BufferPNameARB pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedBufferParameteriv(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData(int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                GetNamedBufferSubData(buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, Span<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetNamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetNamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    GetNamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform1fv(int program, int location, int count, in float value)
            {
                fixed (float* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform1fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fv(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fv(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fv(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fv(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fv(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fv(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fv(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fv(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fv(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fv(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fv(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fv(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fv(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fv(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fv(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fv(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fv(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fv(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform1iv(int program, int location, int count, in int value)
            {
                fixed (int* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform1iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2iv(int program, int location, int count, in Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2iv(int program, int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2iv(int program, int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3iv(int program, int location, int count, in Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3iv(int program, int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3iv(int program, int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4iv(int program, int location, int count, in Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4iv(int program, int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4iv(int program, int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2fv(int program, int location, int count, bool transpose, in Matrix2 value)
            {
                fixed (Matrix2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2fv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2> value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2fv(int program, int location, int count, bool transpose, Matrix2[] value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3fv(int program, int location, int count, bool transpose, in Matrix3 value)
            {
                fixed (Matrix3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3fv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3> value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3fv(int program, int location, int count, bool transpose, Matrix3[] value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fv(int program, int location, int count, bool transpose, in Matrix4 value)
            {
                fixed (Matrix4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4> value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fv(int program, int location, int count, bool transpose, Matrix4[] value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fv(int program, int location, int count, bool transpose, in System.Numerics.Matrix4x4 value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fv(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix4x4> value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fv(int program, int location, int count, bool transpose, System.Numerics.Matrix4x4[] value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3fv(int program, int location, int count, bool transpose, in Matrix2x3 value)
            {
                fixed (Matrix2x3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3fv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3> value)
            {
                fixed (Matrix2x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3fv(int program, int location, int count, bool transpose, Matrix2x3[] value)
            {
                fixed (Matrix2x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fv(int program, int location, int count, bool transpose, in Matrix3x2 value)
            {
                fixed (Matrix3x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2> value)
            {
                fixed (Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fv(int program, int location, int count, bool transpose, Matrix3x2[] value)
            {
                fixed (Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fv(int program, int location, int count, bool transpose, in System.Numerics.Matrix3x2 value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fv(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix3x2> value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fv(int program, int location, int count, bool transpose, System.Numerics.Matrix3x2[] value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4fv(int program, int location, int count, bool transpose, in Matrix2x4 value)
            {
                fixed (Matrix2x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4fv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4> value)
            {
                fixed (Matrix2x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4fv(int program, int location, int count, bool transpose, Matrix2x4[] value)
            {
                fixed (Matrix2x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2fv(int program, int location, int count, bool transpose, in Matrix4x2 value)
            {
                fixed (Matrix4x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2fv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2> value)
            {
                fixed (Matrix4x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2fv(int program, int location, int count, bool transpose, Matrix4x2[] value)
            {
                fixed (Matrix4x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4fv(int program, int location, int count, bool transpose, in Matrix3x4 value)
            {
                fixed (Matrix3x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4fv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4> value)
            {
                fixed (Matrix3x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4fv(int program, int location, int count, bool transpose, Matrix3x4[] value)
            {
                fixed (Matrix3x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3fv(int program, int location, int count, bool transpose, in Matrix4x3 value)
            {
                fixed (Matrix4x3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3fv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3> value)
            {
                fixed (Matrix4x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3fv(int program, int location, int count, bool transpose, Matrix4x3[] value)
            {
                fixed (Matrix4x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIiv(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIiv(int texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterIiv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIiv(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIiv(int texture, TextureTarget target, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterIiv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIiv(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIiv(int texture, TextureTarget target, TextureParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TextureParameterIiv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuiv(int, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIuiv(int texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TextureParameterIuiv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuiv(int, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIuiv(int texture, TextureTarget target, TextureParameterName pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TextureParameterIuiv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuiv(int, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIuiv(int texture, TextureTarget target, TextureParameterName pname, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    TextureParameterIuiv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIiv(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterIiv(int texture, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameterIiv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIiv(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterIiv(int texture, TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameterIiv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIiv(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterIiv(int texture, TextureTarget target, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureParameterIiv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIuiv(int, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTextureParameterIuiv(int texture, TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetTextureParameterIuiv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIuiv(int, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTextureParameterIuiv(int texture, TextureTarget target, GetTextureParameter pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetTextureParameterIuiv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIuiv(int, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTextureParameterIuiv(int texture, TextureTarget target, GetTextureParameter pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetTextureParameterIuiv(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIiv(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameterIiv(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexParameterIiv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIiv(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameterIiv(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexParameterIiv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIiv(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameterIiv(TextureUnit texunit, TextureTarget target, TextureParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MultiTexParameterIiv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIuiv(TextureUnit, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void MultiTexParameterIuiv(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    MultiTexParameterIuiv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIuiv(TextureUnit, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void MultiTexParameterIuiv(TextureUnit texunit, TextureTarget target, TextureParameterName pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    MultiTexParameterIuiv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIuiv(TextureUnit, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void MultiTexParameterIuiv(TextureUnit texunit, TextureTarget target, TextureParameterName pname, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    MultiTexParameterIuiv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIiv(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameterIiv(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexParameterIiv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIiv(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameterIiv(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexParameterIiv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIiv(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameterIiv(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMultiTexParameterIiv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIuiv(TextureUnit, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetMultiTexParameterIuiv(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetMultiTexParameterIuiv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIuiv(TextureUnit, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetMultiTexParameterIuiv(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetMultiTexParameterIuiv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIuiv(TextureUnit, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetMultiTexParameterIuiv(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetMultiTexParameterIuiv(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform1uiv(int program, int location, int count, in uint value)
            {
                fixed (uint* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform1uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2uiv(int program, int location, int count, in Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2uiv(int program, int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2uiv(int program, int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3uiv(int program, int location, int count, in Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3uiv(int program, int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3uiv(int program, int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4uiv(int program, int location, int count, in Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4uiv(int program, int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4uiv(int program, int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameters4fv(int, ProgramTarget, uint, int, float*)"/>
            public static unsafe void NamedProgramLocalParameters4fv(int program, ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (float* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameters4fv(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameters4fv(int, ProgramTarget, uint, int, float*)"/>
            public static unsafe void NamedProgramLocalParameters4fv(int program, ProgramTarget target, uint index, float[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (float* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameters4fv(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameters4fv(int, ProgramTarget, uint, int, float*)"/>
            public static unsafe void NamedProgramLocalParameters4fv(int program, ProgramTarget target, uint index, int count, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParameters4fv(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4iv(int, ProgramTarget, uint, int*)"/>
            public static unsafe void NamedProgramLocalParameterI4iv(int program, ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameterI4iv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4iv(int, ProgramTarget, uint, int*)"/>
            public static unsafe void NamedProgramLocalParameterI4iv(int program, ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameterI4iv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4iv(int, ProgramTarget, uint, int*)"/>
            public static unsafe void NamedProgramLocalParameterI4iv(int program, ProgramTarget target, uint index, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParameterI4iv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4iv(int, ProgramTarget, uint, int, int*)"/>
            public static unsafe void NamedProgramLocalParametersI4iv(int program, ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (int* parameters_ptr = parameters)
                {
                    NamedProgramLocalParametersI4iv(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4iv(int, ProgramTarget, uint, int, int*)"/>
            public static unsafe void NamedProgramLocalParametersI4iv(int program, ProgramTarget target, uint index, int[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (int* parameters_ptr = parameters)
                {
                    NamedProgramLocalParametersI4iv(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4iv(int, ProgramTarget, uint, int, int*)"/>
            public static unsafe void NamedProgramLocalParametersI4iv(int program, ProgramTarget target, uint index, int count, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParametersI4iv(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4uiv(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void NamedProgramLocalParameterI4uiv(int program, ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameterI4uiv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4uiv(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void NamedProgramLocalParameterI4uiv(int program, ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameterI4uiv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4uiv(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void NamedProgramLocalParameterI4uiv(int program, ProgramTarget target, uint index, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParameterI4uiv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4uiv(int, ProgramTarget, uint, int, uint*)"/>
            public static unsafe void NamedProgramLocalParametersI4uiv(int program, ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    NamedProgramLocalParametersI4uiv(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4uiv(int, ProgramTarget, uint, int, uint*)"/>
            public static unsafe void NamedProgramLocalParametersI4uiv(int program, ProgramTarget target, uint index, uint[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    NamedProgramLocalParametersI4uiv(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4uiv(int, ProgramTarget, uint, int, uint*)"/>
            public static unsafe void NamedProgramLocalParametersI4uiv(int program, ProgramTarget target, uint index, int count, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParametersI4uiv(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIiv(int, ProgramTarget, uint, int*)"/>
            public static unsafe void GetNamedProgramLocalParameterIiv(int program, ProgramTarget target, uint index, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterIiv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIiv(int, ProgramTarget, uint, int*)"/>
            public static unsafe void GetNamedProgramLocalParameterIiv(int program, ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterIiv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIiv(int, ProgramTarget, uint, int*)"/>
            public static unsafe void GetNamedProgramLocalParameterIiv(int program, ProgramTarget target, uint index, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedProgramLocalParameterIiv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIuiv(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void GetNamedProgramLocalParameterIuiv(int program, ProgramTarget target, uint index, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterIuiv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIuiv(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void GetNamedProgramLocalParameterIuiv(int program, ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterIuiv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIuiv(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void GetNamedProgramLocalParameterIuiv(int program, ProgramTarget target, uint index, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetNamedProgramLocalParameterIuiv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
            public static unsafe void GetFloati_v(GetPName pname, uint index, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFloati_v(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
            public static unsafe void GetFloati_v(GetPName pname, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFloati_v(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
            public static unsafe void GetFloati_v(GetPName pname, uint index, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetFloati_v(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
            public static unsafe void GetDoublei_v(GetPName pname, uint index, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetDoublei_v(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
            public static unsafe void GetDoublei_v(GetPName pname, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetDoublei_v(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
            public static unsafe void GetDoublei_v(GetPName pname, uint index, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetDoublei_v(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramString(int, ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void NamedProgramString(int program, ProgramTarget target, ProgramFormat format, int len, IntPtr str)
            {
                void* str_vptr = (void*)str;
                NamedProgramString(program, target, format, len, str_vptr);
            }
            /// <inheritdoc cref="NamedProgramString(int, ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void NamedProgramString<T1>(int program, ProgramTarget target, ProgramFormat format, ReadOnlySpan<T1> str)
                where T1 : unmanaged
            {
                int len = (int)(str.Length * sizeof(T1));
                fixed (void* str_ptr = str)
                {
                    NamedProgramString(program, target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramString(int, ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void NamedProgramString<T1>(int program, ProgramTarget target, ProgramFormat format, T1[] str)
                where T1 : unmanaged
            {
                int len = (int)(str.Length * sizeof(T1));
                fixed (void* str_ptr = str)
                {
                    NamedProgramString(program, target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramString(int, ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void NamedProgramString<T1>(int program, ProgramTarget target, ProgramFormat format, int len, in T1 str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = &str)
                {
                    NamedProgramString(program, target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4dv(int, ProgramTarget, uint, double*)"/>
            public static unsafe void NamedProgramLocalParameter4dv(int program, ProgramTarget target, uint index, ReadOnlySpan<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameter4dv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4dv(int, ProgramTarget, uint, double*)"/>
            public static unsafe void NamedProgramLocalParameter4dv(int program, ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameter4dv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4dv(int, ProgramTarget, uint, double*)"/>
            public static unsafe void NamedProgramLocalParameter4dv(int program, ProgramTarget target, uint index, in double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParameter4dv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4fv(int, ProgramTarget, uint, float*)"/>
            public static unsafe void NamedProgramLocalParameter4fv(int program, ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameter4fv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4fv(int, ProgramTarget, uint, float*)"/>
            public static unsafe void NamedProgramLocalParameter4fv(int program, ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameter4fv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4fv(int, ProgramTarget, uint, float*)"/>
            public static unsafe void NamedProgramLocalParameter4fv(int program, ProgramTarget target, uint index, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParameter4fv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterdv(int, ProgramTarget, uint, double*)"/>
            public static unsafe void GetNamedProgramLocalParameterdv(int program, ProgramTarget target, uint index, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterdv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterdv(int, ProgramTarget, uint, double*)"/>
            public static unsafe void GetNamedProgramLocalParameterdv(int program, ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterdv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterdv(int, ProgramTarget, uint, double*)"/>
            public static unsafe void GetNamedProgramLocalParameterdv(int program, ProgramTarget target, uint index, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetNamedProgramLocalParameterdv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterfv(int, ProgramTarget, uint, float*)"/>
            public static unsafe void GetNamedProgramLocalParameterfv(int program, ProgramTarget target, uint index, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterfv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterfv(int, ProgramTarget, uint, float*)"/>
            public static unsafe void GetNamedProgramLocalParameterfv(int program, ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterfv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterfv(int, ProgramTarget, uint, float*)"/>
            public static unsafe void GetNamedProgramLocalParameterfv(int program, ProgramTarget target, uint index, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetNamedProgramLocalParameterfv(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramiv(int, ProgramTarget, ProgramPropertyARB, int*)"/>
            public static unsafe void GetNamedProgramiv(int program, ProgramTarget target, ProgramPropertyARB pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedProgramiv(program, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramiv(int, ProgramTarget, ProgramPropertyARB, int*)"/>
            public static unsafe void GetNamedProgramiv(int program, ProgramTarget target, ProgramPropertyARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedProgramiv(program, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramiv(int, ProgramTarget, ProgramPropertyARB, int*)"/>
            public static unsafe void GetNamedProgramiv(int program, ProgramTarget target, ProgramPropertyARB pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedProgramiv(program, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramString(int, ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetNamedProgramString(int program, ProgramTarget target, ProgramStringProperty pname, IntPtr str)
            {
                void* str_vptr = (void*)str;
                GetNamedProgramString(program, target, pname, str_vptr);
            }
            /// <inheritdoc cref="GetNamedProgramString(int, ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetNamedProgramString<T1>(int program, ProgramTarget target, ProgramStringProperty pname, Span<T1> str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    GetNamedProgramString(program, target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramString(int, ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetNamedProgramString<T1>(int program, ProgramTarget target, ProgramStringProperty pname, T1[] str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    GetNamedProgramString(program, target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramString(int, ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetNamedProgramString<T1>(int program, ProgramTarget target, ProgramStringProperty pname, ref T1 str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = &str)
                {
                    GetNamedProgramString(program, target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameteriv(int, RenderbufferParameterName, int*)"/>
            public static unsafe void GetNamedRenderbufferParameteriv(int renderbuffer, RenderbufferParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedRenderbufferParameteriv(renderbuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameteriv(int, RenderbufferParameterName, int*)"/>
            public static unsafe void GetNamedRenderbufferParameteriv(int renderbuffer, RenderbufferParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedRenderbufferParameteriv(renderbuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameteriv(int, RenderbufferParameterName, int*)"/>
            public static unsafe void GetNamedRenderbufferParameteriv(int renderbuffer, RenderbufferParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedRenderbufferParameteriv(renderbuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameteriv(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetNamedFramebufferAttachmentParameteriv(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameteriv(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetNamedFramebufferAttachmentParameteriv(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameteriv(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetNamedFramebufferAttachmentParameteriv(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferDrawBuffers(int, int, DrawBufferMode*)"/>
            public static unsafe void FramebufferDrawBuffers(int framebuffer, ReadOnlySpan<DrawBufferMode> bufs)
            {
                int n = (int)(bufs.Length);
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    FramebufferDrawBuffers(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferDrawBuffers(int, int, DrawBufferMode*)"/>
            public static unsafe void FramebufferDrawBuffers(int framebuffer, DrawBufferMode[] bufs)
            {
                int n = (int)(bufs.Length);
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    FramebufferDrawBuffers(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferDrawBuffers(int, int, DrawBufferMode*)"/>
            public static unsafe void FramebufferDrawBuffers(int framebuffer, int n, in DrawBufferMode bufs)
            {
                fixed (DrawBufferMode* bufs_ptr = &bufs)
                {
                    FramebufferDrawBuffers(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetFramebufferParameteriv(int framebuffer, GetFramebufferParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameteriv(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetFramebufferParameteriv(int framebuffer, GetFramebufferParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameteriv(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetFramebufferParameteriv(int framebuffer, GetFramebufferParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFramebufferParameteriv(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIntegerv(int, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayIntegerv(int vaobj, VertexArrayPName pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetVertexArrayIntegerv(vaobj, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIntegeri_v(int, uint, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayIntegeri_v(int vaobj, uint index, VertexArrayPName pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetVertexArrayIntegeri_v(vaobj, index, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage(int buffer, nint size, IntPtr data, BufferStorageMask flags)
            {
                void* data_vptr = (void*)data;
                NamedBufferStorage(buffer, size, data_vptr, flags);
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage<T1>(int buffer, ReadOnlySpan<T1> data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferStorage(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage<T1>(int buffer, T1[] data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                nint size = (nint)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    NamedBufferStorage(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage<T1>(int buffer, nint size, in T1 data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferStorage(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearNamedBufferData(buffer, internalformat, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, nint, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData(int buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, nint, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, nint, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, nint, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetNamedFramebufferParameteriv(int framebuffer, GetFramebufferParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedFramebufferParameteriv(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetNamedFramebufferParameteriv(int framebuffer, GetFramebufferParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedFramebufferParameteriv(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetNamedFramebufferParameteriv(int framebuffer, GetFramebufferParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedFramebufferParameteriv(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform1dv(int program, int location, int count, in double value)
            {
                fixed (double* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform1dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2dv(int program, int location, int count, in Vector2d value)
            {
                fixed (Vector2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2dv(int program, int location, int count, ReadOnlySpan<Vector2d> value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2dv(int program, int location, int count, Vector2d[] value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3dv(int program, int location, int count, in Vector3d value)
            {
                fixed (Vector3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3dv(int program, int location, int count, ReadOnlySpan<Vector3d> value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3dv(int program, int location, int count, Vector3d[] value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4dv(int program, int location, int count, in Vector4d value)
            {
                fixed (Vector4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4dv(int program, int location, int count, ReadOnlySpan<Vector4d> value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4dv(int program, int location, int count, Vector4d[] value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2dv(int program, int location, int count, bool transpose, in Matrix2d value)
            {
                fixed (Matrix2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2dv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2d> value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2dv(int program, int location, int count, bool transpose, Matrix2d[] value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3dv(int program, int location, int count, bool transpose, in Matrix3d value)
            {
                fixed (Matrix3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3dv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3d> value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3dv(int program, int location, int count, bool transpose, Matrix3d[] value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4dv(int program, int location, int count, bool transpose, in Matrix4d value)
            {
                fixed (Matrix4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4dv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4d> value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4dv(int program, int location, int count, bool transpose, Matrix4d[] value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3dv(int program, int location, int count, bool transpose, in Matrix2x3d value)
            {
                fixed (Matrix2x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3dv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3d> value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3dv(int program, int location, int count, bool transpose, Matrix2x3d[] value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4dv(int program, int location, int count, bool transpose, in Matrix2x4d value)
            {
                fixed (Matrix2x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4dv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4d> value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4dv(int program, int location, int count, bool transpose, Matrix2x4d[] value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2dv(int program, int location, int count, bool transpose, in Matrix3x2d value)
            {
                fixed (Matrix3x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2dv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2d> value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2dv(int program, int location, int count, bool transpose, Matrix3x2d[] value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4dv(int program, int location, int count, bool transpose, in Matrix3x4d value)
            {
                fixed (Matrix3x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4dv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4d> value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4dv(int program, int location, int count, bool transpose, Matrix3x4d[] value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2dv(int program, int location, int count, bool transpose, in Matrix4x2d value)
            {
                fixed (Matrix4x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2dv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2d> value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2dv(int program, int location, int count, bool transpose, Matrix4x2d[] value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3dv(int program, int location, int count, bool transpose, in Matrix4x3d value)
            {
                fixed (Matrix4x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3dv(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3d> value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3dv(int program, int location, int count, bool transpose, Matrix4x3d[] value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="DrawElementsInstanced(PrimitiveType, int, DrawElementsType, void*, int)"/>
            public static unsafe void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, nint offset, int primcount)
            {
                void* indices = (void*)offset;
                DrawElementsInstanced(mode, count, type, indices, primcount);
            }
            /// <inheritdoc cref="DrawRangeElements(PrimitiveType, uint, uint, int, DrawElementsType, void*)"/>
            public static unsafe void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint offset)
            {
                void* indices = (void*)offset;
                DrawRangeElements(mode, start, end, count, type, indices);
            }
            /// <inheritdoc cref="BufferStorageExternal(All, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorageExternal(All target, IntPtr offset, nint size, IntPtr clientBuffer, BufferStorageMask flags)
            {
                void* clientBuffer_vptr = (void*)clientBuffer;
                BufferStorageExternal(target, offset, size, clientBuffer_vptr, flags);
            }
            /// <inheritdoc cref="BufferStorageExternal(All, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorageExternal<T1>(All target, IntPtr offset, nint size, ref T1 clientBuffer, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* clientBuffer_ptr = &clientBuffer)
                {
                    BufferStorageExternal(target, offset, size, clientBuffer_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorageExternal(int, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageExternal(int buffer, IntPtr offset, nint size, IntPtr clientBuffer, BufferStorageMask flags)
            {
                void* clientBuffer_vptr = (void*)clientBuffer;
                NamedBufferStorageExternal(buffer, offset, size, clientBuffer_vptr, flags);
            }
            /// <inheritdoc cref="NamedBufferStorageExternal(int, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageExternal<T1>(int buffer, IntPtr offset, nint size, ref T1 clientBuffer, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* clientBuffer_ptr = &clientBuffer)
                {
                    NamedBufferStorageExternal(buffer, offset, size, clientBuffer_ptr, flags);
                }
            }
            /// <inheritdoc cref="FogCoordfv(float*)"/>
            public static unsafe void FogCoordfv(ReadOnlySpan<float> coord)
            {
                fixed (float* coord_ptr = coord)
                {
                    FogCoordfv(coord_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordfv(float*)"/>
            public static unsafe void FogCoordfv(float[] coord)
            {
                fixed (float* coord_ptr = coord)
                {
                    FogCoordfv(coord_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordfv(float*)"/>
            public static unsafe void FogCoordfv(in float coord)
            {
                fixed (float* coord_ptr = &coord)
                {
                    FogCoordfv(coord_ptr);
                }
            }
            /// <inheritdoc cref="FogCoorddv(double*)"/>
            public static unsafe void FogCoorddv(ReadOnlySpan<double> coord)
            {
                fixed (double* coord_ptr = coord)
                {
                    FogCoorddv(coord_ptr);
                }
            }
            /// <inheritdoc cref="FogCoorddv(double*)"/>
            public static unsafe void FogCoorddv(double[] coord)
            {
                fixed (double* coord_ptr = coord)
                {
                    FogCoorddv(coord_ptr);
                }
            }
            /// <inheritdoc cref="FogCoorddv(double*)"/>
            public static unsafe void FogCoorddv(in double coord)
            {
                fixed (double* coord_ptr = &coord)
                {
                    FogCoorddv(coord_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordPointer(FogPointerTypeEXT, int, void*)"/>
            public static unsafe void FogCoordPointer(FogPointerTypeEXT type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                FogCoordPointer(type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="FogCoordPointer(FogPointerTypeEXT, int, void*)"/>
            public static unsafe void FogCoordPointer<T1>(FogPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    FogCoordPointer(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordPointer(FogPointerTypeEXT, int, void*)"/>
            public static unsafe void FogCoordPointer<T1>(FogPointerTypeEXT type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    FogCoordPointer(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordPointer(FogPointerTypeEXT, int, void*)"/>
            public static unsafe void FogCoordPointer<T1>(FogPointerTypeEXT type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    FogCoordPointer(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
            public static unsafe void DeleteRenderbuffers(ReadOnlySpan<int> renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    DeleteRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
            public static unsafe void DeleteRenderbuffers(int[] renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    DeleteRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
            public static unsafe void DeleteRenderbuffers(int n, in int renderbuffers)
            {
                fixed (int* renderbuffers_ptr = &renderbuffers)
                {
                    DeleteRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe void GenRenderbuffers(Span<int> renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    GenRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe void GenRenderbuffers(int[] renderbuffers)
            {
                int n = (int)(renderbuffers.Length);
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    GenRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe void GenRenderbuffers(int n, ref int renderbuffers)
            {
                fixed (int* renderbuffers_ptr = &renderbuffers)
                {
                    GenRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameteriv(RenderbufferTarget target, RenderbufferParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetRenderbufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameteriv(RenderbufferTarget target, RenderbufferParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetRenderbufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameteriv(RenderbufferTarget target, RenderbufferParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetRenderbufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
            public static unsafe void DeleteFramebuffers(ReadOnlySpan<int> framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    DeleteFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
            public static unsafe void DeleteFramebuffers(int[] framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    DeleteFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
            public static unsafe void DeleteFramebuffers(int n, in int framebuffers)
            {
                fixed (int* framebuffers_ptr = &framebuffers)
                {
                    DeleteFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe void GenFramebuffers(Span<int> framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    GenFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe void GenFramebuffers(int[] framebuffers)
            {
                int n = (int)(framebuffers.Length);
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    GenFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe void GenFramebuffers(int n, ref int framebuffers)
            {
                fixed (int* framebuffers_ptr = &framebuffers)
                {
                    GenFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameteriv(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameteriv(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameteriv(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameters4fv(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramEnvParameters4fv(ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramEnvParameters4fv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameters4fv(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramEnvParameters4fv(ProgramTarget target, uint index, float[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramEnvParameters4fv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameters4fv(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramEnvParameters4fv(ProgramTarget target, uint index, int count, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ProgramEnvParameters4fv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameters4fv(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramLocalParameters4fv(ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramLocalParameters4fv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameters4fv(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramLocalParameters4fv(ProgramTarget target, uint index, float[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramLocalParameters4fv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameters4fv(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramLocalParameters4fv(ProgramTarget target, uint index, int count, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ProgramLocalParameters4fv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformuiv(int, int, uint*)"/>
            public static unsafe void GetUniformuiv(int program, int location, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetUniformuiv(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformuiv(int, int, uint*)"/>
            public static unsafe void GetUniformuiv(int program, int location, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetUniformuiv(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformuiv(int, int, uint*)"/>
            public static unsafe void GetUniformuiv(int program, int location, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetUniformuiv(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="BindFragDataLocation(int, uint, byte*)"/>
            public static unsafe void BindFragDataLocation(int program, uint color, string name)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                BindFragDataLocation(program, color, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="GetFragDataLocation(int, byte*)"/>
            public static unsafe int GetFragDataLocation(int program, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetFragDataLocation(program, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="Uniform1uiv(int, int, uint*)"/>
            public static unsafe void Uniform1uiv(int location, int count, in uint value)
            {
                fixed (uint* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform1uiv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1uiv(int, int, uint*)"/>
            public static unsafe void Uniform1uiv(int location, int count, ReadOnlySpan<uint> value)
            {
                fixed (uint* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform1uiv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1uiv(int, int, uint*)"/>
            public static unsafe void Uniform1uiv(int location, int count, uint[] value)
            {
                fixed (uint* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform1uiv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2uiv(int, int, uint*)"/>
            public static unsafe void Uniform2uiv(int location, int count, in Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform2uiv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2uiv(int, int, uint*)"/>
            public static unsafe void Uniform2uiv(int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform2uiv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2uiv(int, int, uint*)"/>
            public static unsafe void Uniform2uiv(int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform2uiv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3uiv(int, int, uint*)"/>
            public static unsafe void Uniform3uiv(int location, int count, in Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform3uiv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3uiv(int, int, uint*)"/>
            public static unsafe void Uniform3uiv(int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform3uiv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3uiv(int, int, uint*)"/>
            public static unsafe void Uniform3uiv(int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform3uiv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4uiv(int, int, uint*)"/>
            public static unsafe void Uniform4uiv(int location, int count, in Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform4uiv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4uiv(int, int, uint*)"/>
            public static unsafe void Uniform4uiv(int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform4uiv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4uiv(int, int, uint*)"/>
            public static unsafe void Uniform4uiv(int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform4uiv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1iv(uint, int*)"/>
            public static unsafe void VertexAttribI1iv(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI1iv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1iv(uint, int*)"/>
            public static unsafe void VertexAttribI1iv(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI1iv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1iv(uint, int*)"/>
            public static unsafe void VertexAttribI1iv(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI1iv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2iv(uint, int*)"/>
            public static unsafe void VertexAttribI2iv(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI2iv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2iv(uint, int*)"/>
            public static unsafe void VertexAttribI2iv(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI2iv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2iv(uint, int*)"/>
            public static unsafe void VertexAttribI2iv(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI2iv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3iv(uint, int*)"/>
            public static unsafe void VertexAttribI3iv(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI3iv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3iv(uint, int*)"/>
            public static unsafe void VertexAttribI3iv(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI3iv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3iv(uint, int*)"/>
            public static unsafe void VertexAttribI3iv(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI3iv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4iv(uint, int*)"/>
            public static unsafe void VertexAttribI4iv(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI4iv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4iv(uint, int*)"/>
            public static unsafe void VertexAttribI4iv(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI4iv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4iv(uint, int*)"/>
            public static unsafe void VertexAttribI4iv(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI4iv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1uiv(uint, uint*)"/>
            public static unsafe void VertexAttribI1uiv(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI1uiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1uiv(uint, uint*)"/>
            public static unsafe void VertexAttribI1uiv(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI1uiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1uiv(uint, uint*)"/>
            public static unsafe void VertexAttribI1uiv(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI1uiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uiv(uint, uint*)"/>
            public static unsafe void VertexAttribI2uiv(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI2uiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uiv(uint, uint*)"/>
            public static unsafe void VertexAttribI2uiv(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI2uiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uiv(uint, uint*)"/>
            public static unsafe void VertexAttribI2uiv(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI2uiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uiv(uint, uint*)"/>
            public static unsafe void VertexAttribI3uiv(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI3uiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uiv(uint, uint*)"/>
            public static unsafe void VertexAttribI3uiv(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI3uiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uiv(uint, uint*)"/>
            public static unsafe void VertexAttribI3uiv(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI3uiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uiv(uint, uint*)"/>
            public static unsafe void VertexAttribI4uiv(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI4uiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uiv(uint, uint*)"/>
            public static unsafe void VertexAttribI4uiv(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI4uiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uiv(uint, uint*)"/>
            public static unsafe void VertexAttribI4uiv(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI4uiv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bv(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bv(uint index, ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttribI4bv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bv(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bv(uint index, sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttribI4bv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bv(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bv(uint index, in sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    VertexAttribI4bv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4sv(uint, short*)"/>
            public static unsafe void VertexAttribI4sv(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribI4sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4sv(uint, short*)"/>
            public static unsafe void VertexAttribI4sv(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribI4sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4sv(uint, short*)"/>
            public static unsafe void VertexAttribI4sv(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribI4sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubv(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubv(uint index, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttribI4ubv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubv(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubv(uint index, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttribI4ubv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubv(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubv(uint index, in byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttribI4ubv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usv(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usv(uint index, ReadOnlySpan<ushort> v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttribI4usv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usv(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usv(uint index, ushort[] v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttribI4usv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usv(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usv(uint index, in ushort v)
            {
                fixed (ushort* v_ptr = &v)
                {
                    VertexAttribI4usv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointer(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointer(uint index, int size, VertexAttribIType type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexAttribIPointer(index, size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexAttribIPointer(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointer<T1>(uint index, int size, VertexAttribIType type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribIPointer(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointer(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointer<T1>(uint index, int size, VertexAttribIType type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribIPointer(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointer(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointer<T1>(uint index, int size, VertexAttribIType type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexAttribIPointer(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIiv(uint, VertexAttribEnum, int*)"/>
            public static unsafe void GetVertexAttribIiv(uint index, VertexAttribEnum pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribIiv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIiv(uint, VertexAttribEnum, int*)"/>
            public static unsafe void GetVertexAttribIiv(uint index, VertexAttribEnum pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribIiv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIiv(uint, VertexAttribEnum, int*)"/>
            public static unsafe void GetVertexAttribIiv(uint index, VertexAttribEnum pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVertexAttribIiv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIuiv(uint, VertexAttribEnum, uint*)"/>
            public static unsafe void GetVertexAttribIuiv(uint index, VertexAttribEnum pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetVertexAttribIuiv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIuiv(uint, VertexAttribEnum, uint*)"/>
            public static unsafe void GetVertexAttribIuiv(uint index, VertexAttribEnum pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetVertexAttribIuiv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIuiv(uint, VertexAttribEnum, uint*)"/>
            public static unsafe void GetVertexAttribIuiv(uint index, VertexAttribEnum pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetVertexAttribIuiv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetHistogram(target, reset, format, type, values_vptr);
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetHistogram(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetHistogram(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, ref T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetHistogram(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfv(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterfv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetHistogramParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfv(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterfv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetHistogramParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfv(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterfv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetHistogramParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameteriv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameteriv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameteriv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameteriv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameteriv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameteriv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetHistogramParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetMinmax(target, reset, format, type, values_vptr);
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetMinmax(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetMinmax(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, ref T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetMinmax(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterfv(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMinmaxParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterfv(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMinmaxParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterfv(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMinmaxParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameteriv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameteriv(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMinmaxParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameteriv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameteriv(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMinmaxParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameteriv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameteriv(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMinmaxParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytev(GetPName, byte*)"/>
            public static unsafe void GetUnsignedBytev(GetPName pname, Span<byte> data)
            {
                fixed (byte* data_ptr = data)
                {
                    GetUnsignedBytev(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytev(GetPName, byte*)"/>
            public static unsafe void GetUnsignedBytev(GetPName pname, byte[] data)
            {
                fixed (byte* data_ptr = data)
                {
                    GetUnsignedBytev(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytev(GetPName, byte*)"/>
            public static unsafe void GetUnsignedBytev(GetPName pname, ref byte data)
            {
                fixed (byte* data_ptr = &data)
                {
                    GetUnsignedBytev(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytei_v(All, uint, byte*)"/>
            public static unsafe void GetUnsignedBytei_v(All target, uint index, Span<byte> data)
            {
                fixed (byte* data_ptr = data)
                {
                    GetUnsignedBytei_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytei_v(All, uint, byte*)"/>
            public static unsafe void GetUnsignedBytei_v(All target, uint index, byte[] data)
            {
                fixed (byte* data_ptr = data)
                {
                    GetUnsignedBytei_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytei_v(All, uint, byte*)"/>
            public static unsafe void GetUnsignedBytei_v(All target, uint index, ref byte data)
            {
                fixed (byte* data_ptr = &data)
                {
                    GetUnsignedBytei_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="DeleteMemoryObjects(int, uint*)"/>
            public static unsafe void DeleteMemoryObjects(ReadOnlySpan<uint> memoryObjects)
            {
                int n = (int)(memoryObjects.Length);
                fixed (uint* memoryObjects_ptr = memoryObjects)
                {
                    DeleteMemoryObjects(n, memoryObjects_ptr);
                }
            }
            /// <inheritdoc cref="DeleteMemoryObjects(int, uint*)"/>
            public static unsafe void DeleteMemoryObjects(uint[] memoryObjects)
            {
                int n = (int)(memoryObjects.Length);
                fixed (uint* memoryObjects_ptr = memoryObjects)
                {
                    DeleteMemoryObjects(n, memoryObjects_ptr);
                }
            }
            /// <inheritdoc cref="DeleteMemoryObjects(int, uint*)"/>
            public static unsafe void DeleteMemoryObjects(int n, in uint memoryObjects)
            {
                fixed (uint* memoryObjects_ptr = &memoryObjects)
                {
                    DeleteMemoryObjects(n, memoryObjects_ptr);
                }
            }
            /// <inheritdoc cref="CreateMemoryObjects(int, uint*)"/>
            public static unsafe void CreateMemoryObjects(int n, ref uint memoryObjects)
            {
                fixed (uint* memoryObjects_ptr = &memoryObjects)
                {
                    CreateMemoryObjects(n, memoryObjects_ptr);
                }
            }
            /// <inheritdoc cref="MemoryObjectParameteriv(uint, MemoryObjectParameterName, int*)"/>
            public static unsafe void MemoryObjectParameteriv(uint memoryObject, MemoryObjectParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MemoryObjectParameteriv(memoryObject, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMemoryObjectParameteriv(uint, MemoryObjectParameterName, int*)"/>
            public static unsafe void GetMemoryObjectParameteriv(uint memoryObject, MemoryObjectParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMemoryObjectParameteriv(memoryObject, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImportMemoryWin32Handle(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32Handle(uint memory, ulong size, ExternalHandleType handleType, IntPtr handle)
            {
                void* handle_vptr = (void*)handle;
                ImportMemoryWin32Handle(memory, size, handleType, handle_vptr);
            }
            /// <inheritdoc cref="ImportMemoryWin32Handle(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32Handle<T1>(uint memory, ulong size, ExternalHandleType handleType, ref T1 handle)
                where T1 : unmanaged
            {
                fixed (void* handle_ptr = &handle)
                {
                    ImportMemoryWin32Handle(memory, size, handleType, handle_ptr);
                }
            }
            /// <inheritdoc cref="ImportMemoryWin32Name(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32Name(uint memory, ulong size, ExternalHandleType handleType, IntPtr name)
            {
                void* name_vptr = (void*)name;
                ImportMemoryWin32Name(memory, size, handleType, name_vptr);
            }
            /// <inheritdoc cref="ImportMemoryWin32Name(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32Name<T1>(uint memory, ulong size, ExternalHandleType handleType, in T1 name)
                where T1 : unmanaged
            {
                fixed (void* name_ptr = &name)
                {
                    ImportMemoryWin32Name(memory, size, handleType, name_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawArrays(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawArrays(PrimitiveType mode, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int primcount)
            {
                fixed (int* first_ptr = first)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiDrawArrays(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawArrays(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawArrays(PrimitiveType mode, int[] first, int[] count, int primcount)
            {
                fixed (int* first_ptr = first)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiDrawArrays(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawArrays(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawArrays(PrimitiveType mode, in int first, in int count, int primcount)
            {
                fixed (int* first_ptr = &first)
                fixed (int* count_ptr = &count)
                {
                    MultiDrawArrays(mode, first_ptr, count_ptr, primcount);
                }
            }
            /// <inheritdoc cref="MultiDrawElements(PrimitiveType, int*, DrawElementsType, void**, int)"/>
            public static unsafe void MultiDrawElements(PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int primcount)
            {
                fixed (int* count_ptr = count)
                {
                    MultiDrawElements(mode, count_ptr, type, indices, primcount);
                }
            }
            /// <inheritdoc cref="MultiDrawElements(PrimitiveType, int*, DrawElementsType, void**, int)"/>
            public static unsafe void MultiDrawElements(PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int primcount)
            {
                fixed (int* count_ptr = count)
                {
                    MultiDrawElements(mode, count_ptr, type, indices, primcount);
                }
            }
            /// <inheritdoc cref="MultiDrawElements(PrimitiveType, int*, DrawElementsType, void**, int)"/>
            public static unsafe void MultiDrawElements(PrimitiveType mode, in int count, DrawElementsType type, void** indices, int primcount)
            {
                fixed (int* count_ptr = &count)
                {
                    MultiDrawElements(mode, count_ptr, type, indices, primcount);
                }
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable(ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, IntPtr table)
            {
                void* table_vptr = (void*)table;
                ColorTable(target, internalFormat, width, format, type, table_vptr);
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable<T1>(ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTable(target, internalFormat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable<T1>(ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTable(target, internalFormat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable<T1>(ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, in T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    ColorTable(target, internalFormat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                GetColorTable(target, format, type, data_vptr);
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, Span<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetColorTable(target, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetColorTable(target, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    GetColorTable(target, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameteriv(ColorTableTarget target, ColorTableParameterPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameteriv(ColorTableTarget target, ColorTableParameterPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameteriv(ColorTableTarget target, ColorTableParameterPName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfv(ColorTableTarget target, ColorTableParameterPName pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfv(ColorTableTarget target, ColorTableParameterPName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfv(ColorTableTarget target, ColorTableParameterPName pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTransformParameteriv(PixelTransformTargetEXT, PixelTransformPNameEXT, int*)"/>
            public static unsafe void PixelTransformParameteriv(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PixelTransformParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTransformParameteriv(PixelTransformTargetEXT, PixelTransformPNameEXT, int*)"/>
            public static unsafe void PixelTransformParameteriv(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PixelTransformParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTransformParameteriv(PixelTransformTargetEXT, PixelTransformPNameEXT, int*)"/>
            public static unsafe void PixelTransformParameteriv(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    PixelTransformParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTransformParameterfv(PixelTransformTargetEXT, PixelTransformPNameEXT, float*)"/>
            public static unsafe void PixelTransformParameterfv(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PixelTransformParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTransformParameterfv(PixelTransformTargetEXT, PixelTransformPNameEXT, float*)"/>
            public static unsafe void PixelTransformParameterfv(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PixelTransformParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTransformParameterfv(PixelTransformTargetEXT, PixelTransformPNameEXT, float*)"/>
            public static unsafe void PixelTransformParameterfv(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    PixelTransformParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameteriv(All, All, int*)"/>
            public static unsafe void GetPixelTransformParameteriv(All target, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetPixelTransformParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameteriv(All, All, int*)"/>
            public static unsafe void GetPixelTransformParameteriv(All target, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetPixelTransformParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameteriv(All, All, int*)"/>
            public static unsafe void GetPixelTransformParameteriv(All target, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetPixelTransformParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterfv(All, All, float*)"/>
            public static unsafe void GetPixelTransformParameterfv(All target, All pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetPixelTransformParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterfv(All, All, float*)"/>
            public static unsafe void GetPixelTransformParameterfv(All target, All pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetPixelTransformParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterfv(All, All, float*)"/>
            public static unsafe void GetPixelTransformParameterfv(All target, All pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetPixelTransformParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfv(PointParameterNameARB pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfv(PointParameterNameARB pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfv(PointParameterNameARB pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    PointParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GenSemaphores(int, uint*)"/>
            public static unsafe void GenSemaphores(Span<uint> semaphores)
            {
                int n = (int)(semaphores.Length);
                fixed (uint* semaphores_ptr = semaphores)
                {
                    GenSemaphores(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="GenSemaphores(int, uint*)"/>
            public static unsafe void GenSemaphores(uint[] semaphores)
            {
                int n = (int)(semaphores.Length);
                fixed (uint* semaphores_ptr = semaphores)
                {
                    GenSemaphores(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="GenSemaphores(int, uint*)"/>
            public static unsafe void GenSemaphores(int n, ref uint semaphores)
            {
                fixed (uint* semaphores_ptr = &semaphores)
                {
                    GenSemaphores(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSemaphores(int, uint*)"/>
            public static unsafe void DeleteSemaphores(ReadOnlySpan<uint> semaphores)
            {
                int n = (int)(semaphores.Length);
                fixed (uint* semaphores_ptr = semaphores)
                {
                    DeleteSemaphores(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSemaphores(int, uint*)"/>
            public static unsafe void DeleteSemaphores(uint[] semaphores)
            {
                int n = (int)(semaphores.Length);
                fixed (uint* semaphores_ptr = semaphores)
                {
                    DeleteSemaphores(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSemaphores(int, uint*)"/>
            public static unsafe void DeleteSemaphores(int n, in uint semaphores)
            {
                fixed (uint* semaphores_ptr = &semaphores)
                {
                    DeleteSemaphores(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="SemaphoreParameterui64v(uint, SemaphoreParameterName, ulong*)"/>
            public static unsafe void SemaphoreParameterui64v(uint semaphore, SemaphoreParameterName pname, in ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    SemaphoreParameterui64v(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSemaphoreParameterui64v(uint, SemaphoreParameterName, ulong*)"/>
            public static unsafe void GetSemaphoreParameterui64v(uint semaphore, SemaphoreParameterName pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetSemaphoreParameterui64v(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="WaitSemaphore(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void WaitSemaphore(uint semaphore, uint numBufferBarriers, ReadOnlySpan<int> buffers, uint numTextureBarriers, ReadOnlySpan<int> textures, ReadOnlySpan<TextureLayout> srcLayouts)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        fixed (TextureLayout* srcLayouts_ptr = srcLayouts)
                        {
                            WaitSemaphore(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, srcLayouts_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="WaitSemaphore(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void WaitSemaphore(uint semaphore, uint numBufferBarriers, int[] buffers, uint numTextureBarriers, int[] textures, TextureLayout[] srcLayouts)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        fixed (TextureLayout* srcLayouts_ptr = srcLayouts)
                        {
                            WaitSemaphore(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, srcLayouts_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="WaitSemaphore(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void WaitSemaphore(uint semaphore, uint numBufferBarriers, in int buffers, uint numTextureBarriers, in int textures, in TextureLayout srcLayouts)
            {
                fixed (int* buffers_ptr = &buffers)
                fixed (int* textures_ptr = &textures)
                fixed (TextureLayout* srcLayouts_ptr = &srcLayouts)
                {
                    WaitSemaphore(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, srcLayouts_ptr);
                }
            }
            /// <inheritdoc cref="SignalSemaphore(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void SignalSemaphore(uint semaphore, uint numBufferBarriers, ReadOnlySpan<int> buffers, uint numTextureBarriers, ReadOnlySpan<int> textures, ReadOnlySpan<TextureLayout> dstLayouts)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        fixed (TextureLayout* dstLayouts_ptr = dstLayouts)
                        {
                            SignalSemaphore(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, dstLayouts_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="SignalSemaphore(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void SignalSemaphore(uint semaphore, uint numBufferBarriers, int[] buffers, uint numTextureBarriers, int[] textures, TextureLayout[] dstLayouts)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        fixed (TextureLayout* dstLayouts_ptr = dstLayouts)
                        {
                            SignalSemaphore(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, dstLayouts_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="SignalSemaphore(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void SignalSemaphore(uint semaphore, uint numBufferBarriers, in int buffers, uint numTextureBarriers, in int textures, in TextureLayout dstLayouts)
            {
                fixed (int* buffers_ptr = &buffers)
                fixed (int* textures_ptr = &textures)
                fixed (TextureLayout* dstLayouts_ptr = &dstLayouts)
                {
                    SignalSemaphore(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, dstLayouts_ptr);
                }
            }
            /// <inheritdoc cref="ImportSemaphoreWin32Handle(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32Handle(uint semaphore, ExternalHandleType handleType, IntPtr handle)
            {
                void* handle_vptr = (void*)handle;
                ImportSemaphoreWin32Handle(semaphore, handleType, handle_vptr);
            }
            /// <inheritdoc cref="ImportSemaphoreWin32Handle(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32Handle<T1>(uint semaphore, ExternalHandleType handleType, ref T1 handle)
                where T1 : unmanaged
            {
                fixed (void* handle_ptr = &handle)
                {
                    ImportSemaphoreWin32Handle(semaphore, handleType, handle_ptr);
                }
            }
            /// <inheritdoc cref="ImportSemaphoreWin32Name(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32Name(uint semaphore, ExternalHandleType handleType, IntPtr name)
            {
                void* name_vptr = (void*)name;
                ImportSemaphoreWin32Name(semaphore, handleType, name_vptr);
            }
            /// <inheritdoc cref="ImportSemaphoreWin32Name(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32Name<T1>(uint semaphore, ExternalHandleType handleType, in T1 name)
                where T1 : unmanaged
            {
                fixed (void* name_ptr = &name)
                {
                    ImportSemaphoreWin32Name(semaphore, handleType, name_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3bv(sbyte*)"/>
            public static unsafe void SecondaryColor3bv(ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    SecondaryColor3bv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3bv(sbyte*)"/>
            public static unsafe void SecondaryColor3bv(sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    SecondaryColor3bv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3bv(sbyte*)"/>
            public static unsafe void SecondaryColor3bv(in sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    SecondaryColor3bv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3dv(double*)"/>
            public static unsafe void SecondaryColor3dv(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    SecondaryColor3dv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3dv(double*)"/>
            public static unsafe void SecondaryColor3dv(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    SecondaryColor3dv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3dv(double*)"/>
            public static unsafe void SecondaryColor3dv(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    SecondaryColor3dv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3fv(float*)"/>
            public static unsafe void SecondaryColor3fv(in Color3<Rgb> v)
            {
                fixed (Color3<Rgb>* tmp_v = &v)
                {
                    float* v_ptr = (float*)tmp_v;
                    SecondaryColor3fv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3iv(int*)"/>
            public static unsafe void SecondaryColor3iv(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    SecondaryColor3iv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3iv(int*)"/>
            public static unsafe void SecondaryColor3iv(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    SecondaryColor3iv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3iv(int*)"/>
            public static unsafe void SecondaryColor3iv(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    SecondaryColor3iv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3sv(short*)"/>
            public static unsafe void SecondaryColor3sv(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    SecondaryColor3sv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3sv(short*)"/>
            public static unsafe void SecondaryColor3sv(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    SecondaryColor3sv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3sv(short*)"/>
            public static unsafe void SecondaryColor3sv(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    SecondaryColor3sv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3ubv(byte*)"/>
            public static unsafe void SecondaryColor3ubv(ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    SecondaryColor3ubv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3ubv(byte*)"/>
            public static unsafe void SecondaryColor3ubv(byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    SecondaryColor3ubv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3ubv(byte*)"/>
            public static unsafe void SecondaryColor3ubv(in byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    SecondaryColor3ubv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3uiv(uint*)"/>
            public static unsafe void SecondaryColor3uiv(ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    SecondaryColor3uiv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3uiv(uint*)"/>
            public static unsafe void SecondaryColor3uiv(uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    SecondaryColor3uiv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3uiv(uint*)"/>
            public static unsafe void SecondaryColor3uiv(in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    SecondaryColor3uiv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3usv(ushort*)"/>
            public static unsafe void SecondaryColor3usv(ReadOnlySpan<ushort> v)
            {
                fixed (ushort* v_ptr = v)
                {
                    SecondaryColor3usv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3usv(ushort*)"/>
            public static unsafe void SecondaryColor3usv(ushort[] v)
            {
                fixed (ushort* v_ptr = v)
                {
                    SecondaryColor3usv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3usv(ushort*)"/>
            public static unsafe void SecondaryColor3usv(in ushort v)
            {
                fixed (ushort* v_ptr = &v)
                {
                    SecondaryColor3usv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorPointer(int, ColorPointerType, int, void*)"/>
            public static unsafe void SecondaryColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                SecondaryColorPointer(size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="SecondaryColorPointer(int, ColorPointerType, int, void*)"/>
            public static unsafe void SecondaryColorPointer<T1>(int size, ColorPointerType type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    SecondaryColorPointer(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorPointer(int, ColorPointerType, int, void*)"/>
            public static unsafe void SecondaryColorPointer<T1>(int size, ColorPointerType type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    SecondaryColorPointer(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorPointer(int, ColorPointerType, int, void*)"/>
            public static unsafe void SecondaryColorPointer<T1>(int size, ColorPointerType type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    SecondaryColorPointer(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="CreateShaderProgram(ShaderType, byte*)"/>
            public static unsafe int CreateShaderProgram(ShaderType type, string str)
            {
                int returnValue;
                byte* str_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(str);
                returnValue = CreateShaderProgram(type, str_ptr);
                Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
            public static unsafe void DeleteProgramPipelines(ReadOnlySpan<int> pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    DeleteProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
            public static unsafe void DeleteProgramPipelines(int[] pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    DeleteProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
            public static unsafe void DeleteProgramPipelines(int n, in int pipelines)
            {
                fixed (int* pipelines_ptr = &pipelines)
                {
                    DeleteProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe void GenProgramPipelines(Span<int> pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    GenProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe void GenProgramPipelines(int[] pipelines)
            {
                int n = (int)(pipelines.Length);
                fixed (int* pipelines_ptr = pipelines)
                {
                    GenProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe void GenProgramPipelines(int n, ref int pipelines)
            {
                fixed (int* pipelines_ptr = &pipelines)
                {
                    GenProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, Span<int> length)
            {
                string infoLog;
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, Span<int> length, out string infoLog)
            {
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, int[] length)
            {
                string infoLog;
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, int[] length, out string infoLog)
            {
                fixed (int* length_ptr = length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, ref int length)
            {
                string infoLog;
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, ref int length, out string infoLog)
            {
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
            public static unsafe void GetProgramPipelineiv(int pipeline, PipelineParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramPipelineiv(pipeline, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexSubImage1D(target, level, xoffset, width, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage1D(target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage1D(target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexSubImage1D(target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIiv(TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TexParameterIiv(TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexParameterIiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIiv(TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TexParameterIiv(TextureTarget target, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexParameterIiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIiv(TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TexParameterIiv(TextureTarget target, TextureParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TexParameterIiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIuiv(TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TexParameterIuiv(TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TexParameterIuiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIuiv(TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TexParameterIuiv(TextureTarget target, TextureParameterName pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TexParameterIuiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIuiv(TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TexParameterIuiv(TextureTarget target, TextureParameterName pname, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    TexParameterIuiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIiv(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterIiv(TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexParameterIiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIiv(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterIiv(TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexParameterIiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIiv(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterIiv(TextureTarget target, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTexParameterIiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIuiv(TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTexParameterIuiv(TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetTexParameterIuiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIuiv(TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTexParameterIuiv(TextureTarget target, GetTextureParameter pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetTexParameterIuiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIuiv(TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTexParameterIuiv(TextureTarget target, GetTextureParameter pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetTexParameterIuiv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="AreTexturesResident(int, int*, bool*)"/>
            public static unsafe bool AreTexturesResident(int n, ReadOnlySpan<int> textures, Span<bool> residences)
            {
                bool returnValue;
                fixed (int* textures_ptr = textures)
                {
                    fixed (bool* residences_ptr = residences)
                    {
                        returnValue = AreTexturesResident(n, textures_ptr, residences_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AreTexturesResident(int, int*, bool*)"/>
            public static unsafe bool AreTexturesResident(int n, int[] textures, bool[] residences)
            {
                bool returnValue;
                fixed (int* textures_ptr = textures)
                {
                    fixed (bool* residences_ptr = residences)
                    {
                        returnValue = AreTexturesResident(n, textures_ptr, residences_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AreTexturesResident(int, int*, bool*)"/>
            public static unsafe bool AreTexturesResident(int n, in int textures, ref bool residences)
            {
                bool returnValue;
                fixed (int* textures_ptr = &textures)
                fixed (bool* residences_ptr = &residences)
                {
                    returnValue = AreTexturesResident(n, textures_ptr, residences_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="DeleteTextures(int, int*)"/>
            public static unsafe void DeleteTextures(ReadOnlySpan<int> textures)
            {
                int n = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    DeleteTextures(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTextures(int, int*)"/>
            public static unsafe void DeleteTextures(int[] textures)
            {
                int n = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    DeleteTextures(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTextures(int, int*)"/>
            public static unsafe void DeleteTextures(int n, in int textures)
            {
                fixed (int* textures_ptr = &textures)
                {
                    DeleteTextures(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="GenTextures(int, int*)"/>
            public static unsafe void GenTextures(Span<int> textures)
            {
                int n = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    GenTextures(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="GenTextures(int, int*)"/>
            public static unsafe void GenTextures(int[] textures)
            {
                int n = (int)(textures.Length);
                fixed (int* textures_ptr = textures)
                {
                    GenTextures(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="GenTextures(int, int*)"/>
            public static unsafe void GenTextures(int n, ref int textures)
            {
                fixed (int* textures_ptr = &textures)
                {
                    GenTextures(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="PrioritizeTextures(int, int*, float*)"/>
            public static unsafe void PrioritizeTextures(int n, ReadOnlySpan<int> textures, ReadOnlySpan<float> priorities)
            {
                fixed (int* textures_ptr = textures)
                {
                    fixed (float* priorities_ptr = priorities)
                    {
                        PrioritizeTextures(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PrioritizeTextures(int, int*, float*)"/>
            public static unsafe void PrioritizeTextures(int n, int[] textures, float[] priorities)
            {
                fixed (int* textures_ptr = textures)
                {
                    fixed (float* priorities_ptr = priorities)
                    {
                        PrioritizeTextures(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PrioritizeTextures(int, int*, float*)"/>
            public static unsafe void PrioritizeTextures(int n, in int textures, in float priorities)
            {
                fixed (int* textures_ptr = &textures)
                fixed (float* priorities_ptr = &priorities)
                {
                    PrioritizeTextures(n, textures_ptr, priorities_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64v(int id, QueryObjectParameterName pname, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetQueryObjecti64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64v(int id, QueryObjectParameterName pname, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetQueryObjecti64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64v(int id, QueryObjectParameterName pname, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetQueryObjecti64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64v(int id, QueryObjectParameterName pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetQueryObjectui64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64v(int id, QueryObjectParameterName pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetQueryObjectui64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64v(int id, QueryObjectParameterName pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetQueryObjectui64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe string GetTransformFeedbackVarying(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<AttributeType> type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe void GetTransformFeedbackVarying(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<AttributeType> type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe string GetTransformFeedbackVarying(int program, uint index, int bufSize, int[] length, int[] size, AttributeType[] type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe void GetTransformFeedbackVarying(int program, uint index, int bufSize, int[] length, int[] size, AttributeType[] type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (AttributeType* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe string GetTransformFeedbackVarying(int program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type)
            {
                string name;
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (AttributeType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe void GetTransformFeedbackVarying(int program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type, out string name)
            {
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (AttributeType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="ColorPointer(int, ColorPointerType, int, int, void*)"/>
            public static unsafe void ColorPointer(int size, ColorPointerType type, int stride, int count, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                ColorPointer(size, type, stride, count, pointer_vptr);
            }
            /// <inheritdoc cref="ColorPointer(int, ColorPointerType, int, int, void*)"/>
            public static unsafe void ColorPointer<T1>(int size, ColorPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ColorPointer(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ColorPointer(int, ColorPointerType, int, int, void*)"/>
            public static unsafe void ColorPointer<T1>(int size, ColorPointerType type, int stride, int count, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ColorPointer(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ColorPointer(int, ColorPointerType, int, int, void*)"/>
            public static unsafe void ColorPointer<T1>(int size, ColorPointerType type, int stride, int count, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    ColorPointer(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="EdgeFlagPointer(int, int, bool*)"/>
            public static unsafe void EdgeFlagPointer(int stride, int count, ReadOnlySpan<bool> pointer)
            {
                fixed (bool* pointer_ptr = pointer)
                {
                    EdgeFlagPointer(stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="EdgeFlagPointer(int, int, bool*)"/>
            public static unsafe void EdgeFlagPointer(int stride, int count, bool[] pointer)
            {
                fixed (bool* pointer_ptr = pointer)
                {
                    EdgeFlagPointer(stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="EdgeFlagPointer(int, int, bool*)"/>
            public static unsafe void EdgeFlagPointer(int stride, int count, in bool pointer)
            {
                fixed (bool* pointer_ptr = &pointer)
                {
                    EdgeFlagPointer(stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="IndexPointer(IndexPointerType, int, int, void*)"/>
            public static unsafe void IndexPointer(IndexPointerType type, int stride, int count, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                IndexPointer(type, stride, count, pointer_vptr);
            }
            /// <inheritdoc cref="IndexPointer(IndexPointerType, int, int, void*)"/>
            public static unsafe void IndexPointer<T1>(IndexPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    IndexPointer(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="IndexPointer(IndexPointerType, int, int, void*)"/>
            public static unsafe void IndexPointer<T1>(IndexPointerType type, int stride, int count, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    IndexPointer(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="IndexPointer(IndexPointerType, int, int, void*)"/>
            public static unsafe void IndexPointer<T1>(IndexPointerType type, int stride, int count, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    IndexPointer(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="NormalPointer(NormalPointerType, int, int, void*)"/>
            public static unsafe void NormalPointer(NormalPointerType type, int stride, int count, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                NormalPointer(type, stride, count, pointer_vptr);
            }
            /// <inheritdoc cref="NormalPointer(NormalPointerType, int, int, void*)"/>
            public static unsafe void NormalPointer<T1>(NormalPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    NormalPointer(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="NormalPointer(NormalPointerType, int, int, void*)"/>
            public static unsafe void NormalPointer<T1>(NormalPointerType type, int stride, int count, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    NormalPointer(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="NormalPointer(NormalPointerType, int, int, void*)"/>
            public static unsafe void NormalPointer<T1>(NormalPointerType type, int stride, int count, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    NormalPointer(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordPointer(int, TexCoordPointerType, int, int, void*)"/>
            public static unsafe void TexCoordPointer(int size, TexCoordPointerType type, int stride, int count, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                TexCoordPointer(size, type, stride, count, pointer_vptr);
            }
            /// <inheritdoc cref="TexCoordPointer(int, TexCoordPointerType, int, int, void*)"/>
            public static unsafe void TexCoordPointer<T1>(int size, TexCoordPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    TexCoordPointer(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordPointer(int, TexCoordPointerType, int, int, void*)"/>
            public static unsafe void TexCoordPointer<T1>(int size, TexCoordPointerType type, int stride, int count, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    TexCoordPointer(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordPointer(int, TexCoordPointerType, int, int, void*)"/>
            public static unsafe void TexCoordPointer<T1>(int size, TexCoordPointerType type, int stride, int count, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    TexCoordPointer(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexPointer(int, VertexPointerType, int, int, void*)"/>
            public static unsafe void VertexPointer(int size, VertexPointerType type, int stride, int count, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexPointer(size, type, stride, count, pointer_vptr);
            }
            /// <inheritdoc cref="VertexPointer(int, VertexPointerType, int, int, void*)"/>
            public static unsafe void VertexPointer<T1>(int size, VertexPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexPointer(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexPointer(int, VertexPointerType, int, int, void*)"/>
            public static unsafe void VertexPointer<T1>(int size, VertexPointerType type, int stride, int count, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexPointer(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexPointer(int, VertexPointerType, int, int, void*)"/>
            public static unsafe void VertexPointer<T1>(int size, VertexPointerType type, int stride, int count, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexPointer(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1dv(uint, double*)"/>
            public static unsafe void VertexAttribL1dv(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL1dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1dv(uint, double*)"/>
            public static unsafe void VertexAttribL1dv(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL1dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1dv(uint, double*)"/>
            public static unsafe void VertexAttribL1dv(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribL1dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2dv(uint, double*)"/>
            public static unsafe void VertexAttribL2dv(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL2dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2dv(uint, double*)"/>
            public static unsafe void VertexAttribL2dv(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL2dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2dv(uint, double*)"/>
            public static unsafe void VertexAttribL2dv(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribL2dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3dv(uint, double*)"/>
            public static unsafe void VertexAttribL3dv(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL3dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3dv(uint, double*)"/>
            public static unsafe void VertexAttribL3dv(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL3dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3dv(uint, double*)"/>
            public static unsafe void VertexAttribL3dv(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribL3dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4dv(uint, double*)"/>
            public static unsafe void VertexAttribL4dv(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL4dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4dv(uint, double*)"/>
            public static unsafe void VertexAttribL4dv(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL4dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4dv(uint, double*)"/>
            public static unsafe void VertexAttribL4dv(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribL4dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribLPointer(uint, int, VertexAttribLType, int, void*)"/>
            public static unsafe void VertexAttribLPointer(uint index, int size, VertexAttribLType type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexAttribLPointer(index, size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexAttribLPointer(uint, int, VertexAttribLType, int, void*)"/>
            public static unsafe void VertexAttribLPointer<T1>(uint index, VertexAttribLType type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                int size = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribLPointer(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribLPointer(uint, int, VertexAttribLType, int, void*)"/>
            public static unsafe void VertexAttribLPointer<T1>(uint index, VertexAttribLType type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                int size = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribLPointer(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribLPointer(uint, int, VertexAttribLType, int, void*)"/>
            public static unsafe void VertexAttribLPointer<T1>(uint index, int size, VertexAttribLType type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexAttribLPointer(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLdv(uint index, VertexAttribEnum pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribLdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLdv(uint index, VertexAttribEnum pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribLdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLdv(uint index, VertexAttribEnum pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetVertexAttribLdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SetInvariant(uint, ScalarType, void*)"/>
            public static unsafe void SetInvariant(uint id, ScalarType type, IntPtr addr)
            {
                void* addr_vptr = (void*)addr;
                SetInvariant(id, type, addr_vptr);
            }
            /// <inheritdoc cref="SetInvariant(uint, ScalarType, void*)"/>
            public static unsafe void SetInvariant<T1>(uint id, ScalarType type, ReadOnlySpan<T1> addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    SetInvariant(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SetInvariant(uint, ScalarType, void*)"/>
            public static unsafe void SetInvariant<T1>(uint id, ScalarType type, T1[] addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    SetInvariant(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SetInvariant(uint, ScalarType, void*)"/>
            public static unsafe void SetInvariant<T1>(uint id, ScalarType type, in T1 addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = &addr)
                {
                    SetInvariant(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SetLocalConstant(uint, ScalarType, void*)"/>
            public static unsafe void SetLocalConstant(uint id, ScalarType type, IntPtr addr)
            {
                void* addr_vptr = (void*)addr;
                SetLocalConstant(id, type, addr_vptr);
            }
            /// <inheritdoc cref="SetLocalConstant(uint, ScalarType, void*)"/>
            public static unsafe void SetLocalConstant<T1>(uint id, ScalarType type, ReadOnlySpan<T1> addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    SetLocalConstant(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SetLocalConstant(uint, ScalarType, void*)"/>
            public static unsafe void SetLocalConstant<T1>(uint id, ScalarType type, T1[] addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    SetLocalConstant(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SetLocalConstant(uint, ScalarType, void*)"/>
            public static unsafe void SetLocalConstant<T1>(uint id, ScalarType type, in T1 addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = &addr)
                {
                    SetLocalConstant(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantbv(uint, sbyte*)"/>
            public static unsafe void Variantbv(uint id, ReadOnlySpan<sbyte> addr)
            {
                fixed (sbyte* addr_ptr = addr)
                {
                    Variantbv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantbv(uint, sbyte*)"/>
            public static unsafe void Variantbv(uint id, sbyte[] addr)
            {
                fixed (sbyte* addr_ptr = addr)
                {
                    Variantbv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantbv(uint, sbyte*)"/>
            public static unsafe void Variantbv(uint id, in sbyte addr)
            {
                fixed (sbyte* addr_ptr = &addr)
                {
                    Variantbv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantsv(uint, short*)"/>
            public static unsafe void Variantsv(uint id, ReadOnlySpan<short> addr)
            {
                fixed (short* addr_ptr = addr)
                {
                    Variantsv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantsv(uint, short*)"/>
            public static unsafe void Variantsv(uint id, short[] addr)
            {
                fixed (short* addr_ptr = addr)
                {
                    Variantsv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantsv(uint, short*)"/>
            public static unsafe void Variantsv(uint id, in short addr)
            {
                fixed (short* addr_ptr = &addr)
                {
                    Variantsv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantiv(uint, int*)"/>
            public static unsafe void Variantiv(uint id, ReadOnlySpan<int> addr)
            {
                fixed (int* addr_ptr = addr)
                {
                    Variantiv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantiv(uint, int*)"/>
            public static unsafe void Variantiv(uint id, int[] addr)
            {
                fixed (int* addr_ptr = addr)
                {
                    Variantiv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantiv(uint, int*)"/>
            public static unsafe void Variantiv(uint id, in int addr)
            {
                fixed (int* addr_ptr = &addr)
                {
                    Variantiv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantfv(uint, float*)"/>
            public static unsafe void Variantfv(uint id, ReadOnlySpan<float> addr)
            {
                fixed (float* addr_ptr = addr)
                {
                    Variantfv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantfv(uint, float*)"/>
            public static unsafe void Variantfv(uint id, float[] addr)
            {
                fixed (float* addr_ptr = addr)
                {
                    Variantfv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantfv(uint, float*)"/>
            public static unsafe void Variantfv(uint id, in float addr)
            {
                fixed (float* addr_ptr = &addr)
                {
                    Variantfv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantdv(uint, double*)"/>
            public static unsafe void Variantdv(uint id, ReadOnlySpan<double> addr)
            {
                fixed (double* addr_ptr = addr)
                {
                    Variantdv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantdv(uint, double*)"/>
            public static unsafe void Variantdv(uint id, double[] addr)
            {
                fixed (double* addr_ptr = addr)
                {
                    Variantdv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantdv(uint, double*)"/>
            public static unsafe void Variantdv(uint id, in double addr)
            {
                fixed (double* addr_ptr = &addr)
                {
                    Variantdv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantubv(uint, byte*)"/>
            public static unsafe void Variantubv(uint id, ReadOnlySpan<byte> addr)
            {
                fixed (byte* addr_ptr = addr)
                {
                    Variantubv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantubv(uint, byte*)"/>
            public static unsafe void Variantubv(uint id, byte[] addr)
            {
                fixed (byte* addr_ptr = addr)
                {
                    Variantubv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantubv(uint, byte*)"/>
            public static unsafe void Variantubv(uint id, in byte addr)
            {
                fixed (byte* addr_ptr = &addr)
                {
                    Variantubv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantusv(uint, ushort*)"/>
            public static unsafe void Variantusv(uint id, ReadOnlySpan<ushort> addr)
            {
                fixed (ushort* addr_ptr = addr)
                {
                    Variantusv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantusv(uint, ushort*)"/>
            public static unsafe void Variantusv(uint id, ushort[] addr)
            {
                fixed (ushort* addr_ptr = addr)
                {
                    Variantusv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantusv(uint, ushort*)"/>
            public static unsafe void Variantusv(uint id, in ushort addr)
            {
                fixed (ushort* addr_ptr = &addr)
                {
                    Variantusv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantuiv(uint, uint*)"/>
            public static unsafe void Variantuiv(uint id, ReadOnlySpan<uint> addr)
            {
                fixed (uint* addr_ptr = addr)
                {
                    Variantuiv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantuiv(uint, uint*)"/>
            public static unsafe void Variantuiv(uint id, uint[] addr)
            {
                fixed (uint* addr_ptr = addr)
                {
                    Variantuiv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="Variantuiv(uint, uint*)"/>
            public static unsafe void Variantuiv(uint id, in uint addr)
            {
                fixed (uint* addr_ptr = &addr)
                {
                    Variantuiv(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantPointer(uint, ScalarType, uint, void*)"/>
            public static unsafe void VariantPointer(uint id, ScalarType type, uint stride, IntPtr addr)
            {
                void* addr_vptr = (void*)addr;
                VariantPointer(id, type, stride, addr_vptr);
            }
            /// <inheritdoc cref="VariantPointer(uint, ScalarType, uint, void*)"/>
            public static unsafe void VariantPointer<T1>(uint id, ScalarType type, uint stride, ReadOnlySpan<T1> addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    VariantPointer(id, type, stride, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantPointer(uint, ScalarType, uint, void*)"/>
            public static unsafe void VariantPointer<T1>(uint id, ScalarType type, uint stride, T1[] addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    VariantPointer(id, type, stride, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantPointer(uint, ScalarType, uint, void*)"/>
            public static unsafe void VariantPointer<T1>(uint id, ScalarType type, uint stride, in T1 addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = &addr)
                {
                    VariantPointer(id, type, stride, addr_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantBooleanv(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetVariantBooleanv(uint id, GetVariantValueEXT value, Span<bool> data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetVariantBooleanv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantBooleanv(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetVariantBooleanv(uint id, GetVariantValueEXT value, bool[] data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetVariantBooleanv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantBooleanv(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetVariantBooleanv(uint id, GetVariantValueEXT value, ref bool data)
            {
                fixed (bool* data_ptr = &data)
                {
                    GetVariantBooleanv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantIntegerv(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetVariantIntegerv(uint id, GetVariantValueEXT value, Span<int> data)
            {
                fixed (int* data_ptr = data)
                {
                    GetVariantIntegerv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantIntegerv(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetVariantIntegerv(uint id, GetVariantValueEXT value, int[] data)
            {
                fixed (int* data_ptr = data)
                {
                    GetVariantIntegerv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantIntegerv(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetVariantIntegerv(uint id, GetVariantValueEXT value, ref int data)
            {
                fixed (int* data_ptr = &data)
                {
                    GetVariantIntegerv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantFloatv(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetVariantFloatv(uint id, GetVariantValueEXT value, Span<float> data)
            {
                fixed (float* data_ptr = data)
                {
                    GetVariantFloatv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantFloatv(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetVariantFloatv(uint id, GetVariantValueEXT value, float[] data)
            {
                fixed (float* data_ptr = data)
                {
                    GetVariantFloatv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantFloatv(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetVariantFloatv(uint id, GetVariantValueEXT value, ref float data)
            {
                fixed (float* data_ptr = &data)
                {
                    GetVariantFloatv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantBooleanv(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetInvariantBooleanv(uint id, GetVariantValueEXT value, Span<bool> data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetInvariantBooleanv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantBooleanv(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetInvariantBooleanv(uint id, GetVariantValueEXT value, bool[] data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetInvariantBooleanv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantBooleanv(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetInvariantBooleanv(uint id, GetVariantValueEXT value, ref bool data)
            {
                fixed (bool* data_ptr = &data)
                {
                    GetInvariantBooleanv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantIntegerv(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetInvariantIntegerv(uint id, GetVariantValueEXT value, Span<int> data)
            {
                fixed (int* data_ptr = data)
                {
                    GetInvariantIntegerv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantIntegerv(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetInvariantIntegerv(uint id, GetVariantValueEXT value, int[] data)
            {
                fixed (int* data_ptr = data)
                {
                    GetInvariantIntegerv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantIntegerv(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetInvariantIntegerv(uint id, GetVariantValueEXT value, ref int data)
            {
                fixed (int* data_ptr = &data)
                {
                    GetInvariantIntegerv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantFloatv(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetInvariantFloatv(uint id, GetVariantValueEXT value, Span<float> data)
            {
                fixed (float* data_ptr = data)
                {
                    GetInvariantFloatv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantFloatv(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetInvariantFloatv(uint id, GetVariantValueEXT value, float[] data)
            {
                fixed (float* data_ptr = data)
                {
                    GetInvariantFloatv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantFloatv(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetInvariantFloatv(uint id, GetVariantValueEXT value, ref float data)
            {
                fixed (float* data_ptr = &data)
                {
                    GetInvariantFloatv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantBooleanv(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetLocalConstantBooleanv(uint id, GetVariantValueEXT value, Span<bool> data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetLocalConstantBooleanv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantBooleanv(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetLocalConstantBooleanv(uint id, GetVariantValueEXT value, bool[] data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetLocalConstantBooleanv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantBooleanv(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetLocalConstantBooleanv(uint id, GetVariantValueEXT value, ref bool data)
            {
                fixed (bool* data_ptr = &data)
                {
                    GetLocalConstantBooleanv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantIntegerv(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetLocalConstantIntegerv(uint id, GetVariantValueEXT value, Span<int> data)
            {
                fixed (int* data_ptr = data)
                {
                    GetLocalConstantIntegerv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantIntegerv(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetLocalConstantIntegerv(uint id, GetVariantValueEXT value, int[] data)
            {
                fixed (int* data_ptr = data)
                {
                    GetLocalConstantIntegerv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantIntegerv(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetLocalConstantIntegerv(uint id, GetVariantValueEXT value, ref int data)
            {
                fixed (int* data_ptr = &data)
                {
                    GetLocalConstantIntegerv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantFloatv(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetLocalConstantFloatv(uint id, GetVariantValueEXT value, Span<float> data)
            {
                fixed (float* data_ptr = data)
                {
                    GetLocalConstantFloatv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantFloatv(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetLocalConstantFloatv(uint id, GetVariantValueEXT value, float[] data)
            {
                fixed (float* data_ptr = data)
                {
                    GetLocalConstantFloatv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantFloatv(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetLocalConstantFloatv(uint id, GetVariantValueEXT value, ref float data)
            {
                fixed (float* data_ptr = &data)
                {
                    GetLocalConstantFloatv(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightfv(float*)"/>
            public static unsafe void VertexWeightfv(ReadOnlySpan<float> weight)
            {
                fixed (float* weight_ptr = weight)
                {
                    VertexWeightfv(weight_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightfv(float*)"/>
            public static unsafe void VertexWeightfv(float[] weight)
            {
                fixed (float* weight_ptr = weight)
                {
                    VertexWeightfv(weight_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightfv(float*)"/>
            public static unsafe void VertexWeightfv(in float weight)
            {
                fixed (float* weight_ptr = &weight)
                {
                    VertexWeightfv(weight_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightPointer(int, VertexWeightPointerTypeEXT, int, void*)"/>
            public static unsafe void VertexWeightPointer(int size, VertexWeightPointerTypeEXT type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexWeightPointer(size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexWeightPointer(int, VertexWeightPointerTypeEXT, int, void*)"/>
            public static unsafe void VertexWeightPointer<T1>(int size, VertexWeightPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexWeightPointer(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightPointer(int, VertexWeightPointerTypeEXT, int, void*)"/>
            public static unsafe void VertexWeightPointer<T1>(int size, VertexWeightPointerTypeEXT type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexWeightPointer(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightPointer(int, VertexWeightPointerTypeEXT, int, void*)"/>
            public static unsafe void VertexWeightPointer<T1>(int size, VertexWeightPointerTypeEXT type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexWeightPointer(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="WindowRectangles(All, int, int*)"/>
            public static unsafe void WindowRectangles(All mode, int count, ReadOnlySpan<int> box)
            {
                fixed (int* box_ptr = box)
                {
                    WindowRectangles(mode, count, box_ptr);
                }
            }
            /// <inheritdoc cref="WindowRectangles(All, int, int*)"/>
            public static unsafe void WindowRectangles(All mode, int count, int[] box)
            {
                fixed (int* box_ptr = box)
                {
                    WindowRectangles(mode, count, box_ptr);
                }
            }
            /// <inheritdoc cref="WindowRectangles(All, int, int*)"/>
            public static unsafe void WindowRectangles(All mode, int count, in int box)
            {
                fixed (int* box_ptr = &box)
                {
                    WindowRectangles(mode, count, box_ptr);
                }
            }
        }
        public static unsafe partial class NV
        {
            /// <inheritdoc cref="CreateSemaphores(int, uint*)"/>
            public static unsafe void CreateSemaphores(Span<uint> semaphores)
            {
                int n = (int)(semaphores.Length);
                fixed (uint* semaphores_ptr = semaphores)
                {
                    CreateSemaphores(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="CreateSemaphores(int, uint*)"/>
            public static unsafe void CreateSemaphores(uint[] semaphores)
            {
                int n = (int)(semaphores.Length);
                fixed (uint* semaphores_ptr = semaphores)
                {
                    CreateSemaphores(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="CreateSemaphores(int, uint*)"/>
            public static unsafe void CreateSemaphores(int n, ref uint semaphores)
            {
                fixed (uint* semaphores_ptr = &semaphores)
                {
                    CreateSemaphores(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="SemaphoreParameteriv(uint, SemaphoreParameterName, int*)"/>
            public static unsafe void SemaphoreParameteriv(uint semaphore, SemaphoreParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    SemaphoreParameteriv(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSemaphoreParameteriv(uint, SemaphoreParameterName, int*)"/>
            public static unsafe void GetSemaphoreParameteriv(uint semaphore, SemaphoreParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetSemaphoreParameteriv(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindless(PrimitiveType, void*, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindless(PrimitiveType mode, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawArraysIndirectBindless(mode, indirect_vptr, drawCount, stride, vertexBufferCount);
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindless(PrimitiveType, void*, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindless<T1>(PrimitiveType mode, in T1 indirect, int drawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawArraysIndirectBindless(mode, indirect_ptr, drawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindless(PrimitiveType, DrawElementsType, void*, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindless(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawElementsIndirectBindless(mode, type, indirect_vptr, drawCount, stride, vertexBufferCount);
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindless(PrimitiveType, DrawElementsType, void*, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindless<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect, int drawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawElementsIndirectBindless(mode, type, indirect_ptr, drawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindlessCount(PrimitiveType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindlessCount(PrimitiveType mode, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawArraysIndirectBindlessCount(mode, indirect_vptr, drawCount, maxDrawCount, stride, vertexBufferCount);
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindlessCount(PrimitiveType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindlessCount<T1>(PrimitiveType mode, in T1 indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawArraysIndirectBindlessCount(mode, indirect_ptr, drawCount, maxDrawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindlessCount(PrimitiveType, DrawElementsType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindlessCount(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawElementsIndirectBindlessCount(mode, type, indirect_vptr, drawCount, maxDrawCount, stride, vertexBufferCount);
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindlessCount(PrimitiveType, DrawElementsType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindlessCount<T1>(PrimitiveType mode, DrawElementsType type, in T1 indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawElementsIndirectBindlessCount(mode, type, indirect_ptr, drawCount, maxDrawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="UniformHandleui64v(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64v(int location, ReadOnlySpan<ulong> value)
            {
                int count = (int)(value.Length);
                fixed (ulong* value_ptr = value)
                {
                    UniformHandleui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64v(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64v(int location, ulong[] value)
            {
                int count = (int)(value.Length);
                fixed (ulong* value_ptr = value)
                {
                    UniformHandleui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64v(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64v(int location, int count, in ulong value)
            {
                fixed (ulong* value_ptr = &value)
                {
                    UniformHandleui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64v(int program, int location, ReadOnlySpan<ulong> values)
            {
                int count = (int)(values.Length);
                fixed (ulong* values_ptr = values)
                {
                    ProgramUniformHandleui64v(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64v(int program, int location, ulong[] values)
            {
                int count = (int)(values.Length);
                fixed (ulong* values_ptr = values)
                {
                    ProgramUniformHandleui64v(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64v(int program, int location, int count, in ulong values)
            {
                fixed (ulong* values_ptr = &values)
                {
                    ProgramUniformHandleui64v(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="CreateStates(int, uint*)"/>
            public static unsafe void CreateStates(Span<uint> states)
            {
                int n = (int)(states.Length);
                fixed (uint* states_ptr = states)
                {
                    CreateStates(n, states_ptr);
                }
            }
            /// <inheritdoc cref="CreateStates(int, uint*)"/>
            public static unsafe void CreateStates(uint[] states)
            {
                int n = (int)(states.Length);
                fixed (uint* states_ptr = states)
                {
                    CreateStates(n, states_ptr);
                }
            }
            /// <inheritdoc cref="CreateStates(int, uint*)"/>
            public static unsafe void CreateStates(int n, ref uint states)
            {
                fixed (uint* states_ptr = &states)
                {
                    CreateStates(n, states_ptr);
                }
            }
            /// <inheritdoc cref="DeleteStates(int, uint*)"/>
            public static unsafe void DeleteStates(ReadOnlySpan<uint> states)
            {
                int n = (int)(states.Length);
                fixed (uint* states_ptr = states)
                {
                    DeleteStates(n, states_ptr);
                }
            }
            /// <inheritdoc cref="DeleteStates(int, uint*)"/>
            public static unsafe void DeleteStates(uint[] states)
            {
                int n = (int)(states.Length);
                fixed (uint* states_ptr = states)
                {
                    DeleteStates(n, states_ptr);
                }
            }
            /// <inheritdoc cref="DeleteStates(int, uint*)"/>
            public static unsafe void DeleteStates(int n, in uint states)
            {
                fixed (uint* states_ptr = &states)
                {
                    DeleteStates(n, states_ptr);
                }
            }
            /// <inheritdoc cref="DrawCommands(All, uint, IntPtr*, int*, uint)"/>
            public static unsafe void DrawCommands(All primitiveMode, uint buffer, in IntPtr indirects, in int sizes, uint count)
            {
                fixed (IntPtr* indirects_ptr = &indirects)
                fixed (int* sizes_ptr = &sizes)
                {
                    DrawCommands(primitiveMode, buffer, indirects_ptr, sizes_ptr, count);
                }
            }
            /// <inheritdoc cref="DrawCommandsAddress(All, ulong*, int*, uint)"/>
            public static unsafe void DrawCommandsAddress(All primitiveMode, in ulong indirects, in int sizes, uint count)
            {
                fixed (ulong* indirects_ptr = &indirects)
                fixed (int* sizes_ptr = &sizes)
                {
                    DrawCommandsAddress(primitiveMode, indirects_ptr, sizes_ptr, count);
                }
            }
            /// <inheritdoc cref="DrawCommandsStates(int, IntPtr*, int*, uint*, uint*, uint)"/>
            public static unsafe void DrawCommandsStates(int buffer, in IntPtr indirects, in int sizes, in uint states, in uint fbos, uint count)
            {
                fixed (IntPtr* indirects_ptr = &indirects)
                fixed (int* sizes_ptr = &sizes)
                fixed (uint* states_ptr = &states)
                fixed (uint* fbos_ptr = &fbos)
                {
                    DrawCommandsStates(buffer, indirects_ptr, sizes_ptr, states_ptr, fbos_ptr, count);
                }
            }
            /// <inheritdoc cref="DrawCommandsStatesAddress(ulong*, int*, uint*, uint*, uint)"/>
            public static unsafe void DrawCommandsStatesAddress(in ulong indirects, in int sizes, in uint states, in uint fbos, uint count)
            {
                fixed (ulong* indirects_ptr = &indirects)
                fixed (int* sizes_ptr = &sizes)
                fixed (uint* states_ptr = &states)
                fixed (uint* fbos_ptr = &fbos)
                {
                    DrawCommandsStatesAddress(indirects_ptr, sizes_ptr, states_ptr, fbos_ptr, count);
                }
            }
            /// <inheritdoc cref="CreateCommandLists(int, uint*)"/>
            public static unsafe void CreateCommandLists(Span<uint> lists)
            {
                int n = (int)(lists.Length);
                fixed (uint* lists_ptr = lists)
                {
                    CreateCommandLists(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="CreateCommandLists(int, uint*)"/>
            public static unsafe void CreateCommandLists(uint[] lists)
            {
                int n = (int)(lists.Length);
                fixed (uint* lists_ptr = lists)
                {
                    CreateCommandLists(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="CreateCommandLists(int, uint*)"/>
            public static unsafe void CreateCommandLists(int n, ref uint lists)
            {
                fixed (uint* lists_ptr = &lists)
                {
                    CreateCommandLists(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="DeleteCommandLists(int, uint*)"/>
            public static unsafe void DeleteCommandLists(ReadOnlySpan<uint> lists)
            {
                int n = (int)(lists.Length);
                fixed (uint* lists_ptr = lists)
                {
                    DeleteCommandLists(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="DeleteCommandLists(int, uint*)"/>
            public static unsafe void DeleteCommandLists(uint[] lists)
            {
                int n = (int)(lists.Length);
                fixed (uint* lists_ptr = lists)
                {
                    DeleteCommandLists(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="DeleteCommandLists(int, uint*)"/>
            public static unsafe void DeleteCommandLists(int n, in uint lists)
            {
                fixed (uint* lists_ptr = &lists)
                {
                    DeleteCommandLists(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="ListDrawCommandsStatesClient(uint, uint, void**, int*, uint*, uint*, uint)"/>
            public static unsafe void ListDrawCommandsStatesClient(uint list, uint segment, void** indirects, ReadOnlySpan<int> sizes, ReadOnlySpan<uint> states, ReadOnlySpan<uint> fbos, uint count)
            {
                fixed (int* sizes_ptr = sizes)
                {
                    fixed (uint* states_ptr = states)
                    {
                        fixed (uint* fbos_ptr = fbos)
                        {
                            ListDrawCommandsStatesClient(list, segment, indirects, sizes_ptr, states_ptr, fbos_ptr, count);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ListDrawCommandsStatesClient(uint, uint, void**, int*, uint*, uint*, uint)"/>
            public static unsafe void ListDrawCommandsStatesClient(uint list, uint segment, void** indirects, int[] sizes, uint[] states, uint[] fbos, uint count)
            {
                fixed (int* sizes_ptr = sizes)
                {
                    fixed (uint* states_ptr = states)
                    {
                        fixed (uint* fbos_ptr = fbos)
                        {
                            ListDrawCommandsStatesClient(list, segment, indirects, sizes_ptr, states_ptr, fbos_ptr, count);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ListDrawCommandsStatesClient(uint, uint, void**, int*, uint*, uint*, uint)"/>
            public static unsafe void ListDrawCommandsStatesClient(uint list, uint segment, void** indirects, in int sizes, in uint states, in uint fbos, uint count)
            {
                fixed (int* sizes_ptr = &sizes)
                fixed (uint* states_ptr = &states)
                fixed (uint* fbos_ptr = &fbos)
                {
                    ListDrawCommandsStatesClient(list, segment, indirects, sizes_ptr, states_ptr, fbos_ptr, count);
                }
            }
            /// <inheritdoc cref="GetVkProcAddr(byte*)"/>
            public static unsafe IntPtr GetVkProcAddr(string name)
            {
                IntPtr returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetVkProcAddr(name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="MapControlPoints(EvalTargetNV, uint, MapTypeNV, int, int, int, int, bool, void*)"/>
            public static unsafe void MapControlPoints(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points)
            {
                void* points_vptr = (void*)points;
                MapControlPoints(target, index, type, ustride, vstride, uorder, vorder, packed, points_vptr);
            }
            /// <inheritdoc cref="MapControlPoints(EvalTargetNV, uint, MapTypeNV, int, int, int, int, bool, void*)"/>
            public static unsafe void MapControlPoints<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, ReadOnlySpan<T1> points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = points)
                {
                    MapControlPoints(target, index, type, ustride, vstride, uorder, vorder, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="MapControlPoints(EvalTargetNV, uint, MapTypeNV, int, int, int, int, bool, void*)"/>
            public static unsafe void MapControlPoints<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, T1[] points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = points)
                {
                    MapControlPoints(target, index, type, ustride, vstride, uorder, vorder, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="MapControlPoints(EvalTargetNV, uint, MapTypeNV, int, int, int, int, bool, void*)"/>
            public static unsafe void MapControlPoints<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, in T1 points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = &points)
                {
                    MapControlPoints(target, index, type, ustride, vstride, uorder, vorder, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="MapParameteriv(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void MapParameteriv(EvalTargetNV target, MapParameterNV pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MapParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapParameteriv(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void MapParameteriv(EvalTargetNV target, MapParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MapParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapParameteriv(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void MapParameteriv(EvalTargetNV target, MapParameterNV pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MapParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapParameterfv(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void MapParameterfv(EvalTargetNV target, MapParameterNV pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MapParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapParameterfv(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void MapParameterfv(EvalTargetNV target, MapParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MapParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapParameterfv(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void MapParameterfv(EvalTargetNV target, MapParameterNV pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    MapParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapControlPoints(EvalTargetNV, uint, MapTypeNV, int, int, bool, void*)"/>
            public static unsafe void GetMapControlPoints(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, IntPtr points)
            {
                void* points_vptr = (void*)points;
                GetMapControlPoints(target, index, type, ustride, vstride, packed, points_vptr);
            }
            /// <inheritdoc cref="GetMapControlPoints(EvalTargetNV, uint, MapTypeNV, int, int, bool, void*)"/>
            public static unsafe void GetMapControlPoints<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, Span<T1> points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = points)
                {
                    GetMapControlPoints(target, index, type, ustride, vstride, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="GetMapControlPoints(EvalTargetNV, uint, MapTypeNV, int, int, bool, void*)"/>
            public static unsafe void GetMapControlPoints<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, T1[] points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = points)
                {
                    GetMapControlPoints(target, index, type, ustride, vstride, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="GetMapControlPoints(EvalTargetNV, uint, MapTypeNV, int, int, bool, void*)"/>
            public static unsafe void GetMapControlPoints<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, ref T1 points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = &points)
                {
                    GetMapControlPoints(target, index, type, ustride, vstride, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameteriv(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void GetMapParameteriv(EvalTargetNV target, MapParameterNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMapParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameteriv(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void GetMapParameteriv(EvalTargetNV target, MapParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMapParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameteriv(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void GetMapParameteriv(EvalTargetNV target, MapParameterNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMapParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterfv(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void GetMapParameterfv(EvalTargetNV target, MapParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMapParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterfv(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void GetMapParameterfv(EvalTargetNV target, MapParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMapParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterfv(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void GetMapParameterfv(EvalTargetNV target, MapParameterNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMapParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameteriv(EvalTargetNV, uint, MapAttribParameterNV, int*)"/>
            public static unsafe void GetMapAttribParameteriv(EvalTargetNV target, uint index, MapAttribParameterNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMapAttribParameteriv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameteriv(EvalTargetNV, uint, MapAttribParameterNV, int*)"/>
            public static unsafe void GetMapAttribParameteriv(EvalTargetNV target, uint index, MapAttribParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMapAttribParameteriv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameteriv(EvalTargetNV, uint, MapAttribParameterNV, int*)"/>
            public static unsafe void GetMapAttribParameteriv(EvalTargetNV target, uint index, MapAttribParameterNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMapAttribParameteriv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameterfv(EvalTargetNV, uint, MapAttribParameterNV, float*)"/>
            public static unsafe void GetMapAttribParameterfv(EvalTargetNV target, uint index, MapAttribParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMapAttribParameterfv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameterfv(EvalTargetNV, uint, MapAttribParameterNV, float*)"/>
            public static unsafe void GetMapAttribParameterfv(EvalTargetNV target, uint index, MapAttribParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMapAttribParameterfv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameterfv(EvalTargetNV, uint, MapAttribParameterNV, float*)"/>
            public static unsafe void GetMapAttribParameterfv(EvalTargetNV target, uint index, MapAttribParameterNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMapAttribParameterfv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplefv(GetMultisamplePNameNV pname, uint index, Span<float> val)
            {
                fixed (float* val_ptr = val)
                {
                    GetMultisamplefv(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplefv(GetMultisamplePNameNV pname, uint index, float[] val)
            {
                fixed (float* val_ptr = val)
                {
                    GetMultisamplefv(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplefv(GetMultisamplePNameNV pname, uint index, ref float val)
            {
                fixed (float* val_ptr = &val)
                {
                    GetMultisamplefv(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFences(int, uint*)"/>
            public static unsafe void DeleteFences(ReadOnlySpan<uint> fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    DeleteFences(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFences(int, uint*)"/>
            public static unsafe void DeleteFences(uint[] fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    DeleteFences(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFences(int, uint*)"/>
            public static unsafe void DeleteFences(int n, in uint fences)
            {
                fixed (uint* fences_ptr = &fences)
                {
                    DeleteFences(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenFences(int, uint*)"/>
            public static unsafe void GenFences(Span<uint> fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    GenFences(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenFences(int, uint*)"/>
            public static unsafe void GenFences(uint[] fences)
            {
                int n = (int)(fences.Length);
                fixed (uint* fences_ptr = fences)
                {
                    GenFences(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenFences(int, uint*)"/>
            public static unsafe void GenFences(int n, ref uint fences)
            {
                fixed (uint* fences_ptr = &fences)
                {
                    GenFences(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GetFenceiv(uint, FenceParameterNameNV, int*)"/>
            public static unsafe void GetFenceiv(uint fence, FenceParameterNameNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFenceiv(fence, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFenceiv(uint, FenceParameterNameNV, int*)"/>
            public static unsafe void GetFenceiv(uint fence, FenceParameterNameNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFenceiv(fence, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFenceiv(uint, FenceParameterNameNV, int*)"/>
            public static unsafe void GetFenceiv(uint fence, FenceParameterNameNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFenceiv(fence, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4f(int, int, byte*, float, float, float, float)"/>
            public static unsafe void ProgramNamedParameter4f(int id, int len, ReadOnlySpan<byte> name, float x, float y, float z, float w)
            {
                fixed (byte* name_ptr = name)
                {
                    ProgramNamedParameter4f(id, len, name_ptr, x, y, z, w);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4f(int, int, byte*, float, float, float, float)"/>
            public static unsafe void ProgramNamedParameter4f(int id, int len, byte[] name, float x, float y, float z, float w)
            {
                fixed (byte* name_ptr = name)
                {
                    ProgramNamedParameter4f(id, len, name_ptr, x, y, z, w);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4f(int, int, byte*, float, float, float, float)"/>
            public static unsafe void ProgramNamedParameter4f(int id, int len, in byte name, float x, float y, float z, float w)
            {
                fixed (byte* name_ptr = &name)
                {
                    ProgramNamedParameter4f(id, len, name_ptr, x, y, z, w);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4fv(int, int, byte*, float*)"/>
            public static unsafe void ProgramNamedParameter4fv(int id, int len, ReadOnlySpan<byte> name, ReadOnlySpan<float> v)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (float* v_ptr = v)
                    {
                        ProgramNamedParameter4fv(id, len, name_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4fv(int, int, byte*, float*)"/>
            public static unsafe void ProgramNamedParameter4fv(int id, int len, byte[] name, float[] v)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (float* v_ptr = v)
                    {
                        ProgramNamedParameter4fv(id, len, name_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4fv(int, int, byte*, float*)"/>
            public static unsafe void ProgramNamedParameter4fv(int id, int len, in byte name, in float v)
            {
                fixed (byte* name_ptr = &name)
                fixed (float* v_ptr = &v)
                {
                    ProgramNamedParameter4fv(id, len, name_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4d(int, int, byte*, double, double, double, double)"/>
            public static unsafe void ProgramNamedParameter4d(int id, int len, ReadOnlySpan<byte> name, double x, double y, double z, double w)
            {
                fixed (byte* name_ptr = name)
                {
                    ProgramNamedParameter4d(id, len, name_ptr, x, y, z, w);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4d(int, int, byte*, double, double, double, double)"/>
            public static unsafe void ProgramNamedParameter4d(int id, int len, byte[] name, double x, double y, double z, double w)
            {
                fixed (byte* name_ptr = name)
                {
                    ProgramNamedParameter4d(id, len, name_ptr, x, y, z, w);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4d(int, int, byte*, double, double, double, double)"/>
            public static unsafe void ProgramNamedParameter4d(int id, int len, in byte name, double x, double y, double z, double w)
            {
                fixed (byte* name_ptr = &name)
                {
                    ProgramNamedParameter4d(id, len, name_ptr, x, y, z, w);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4dv(int, int, byte*, double*)"/>
            public static unsafe void ProgramNamedParameter4dv(int id, int len, ReadOnlySpan<byte> name, ReadOnlySpan<double> v)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (double* v_ptr = v)
                    {
                        ProgramNamedParameter4dv(id, len, name_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4dv(int, int, byte*, double*)"/>
            public static unsafe void ProgramNamedParameter4dv(int id, int len, byte[] name, double[] v)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (double* v_ptr = v)
                    {
                        ProgramNamedParameter4dv(id, len, name_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4dv(int, int, byte*, double*)"/>
            public static unsafe void ProgramNamedParameter4dv(int id, int len, in byte name, in double v)
            {
                fixed (byte* name_ptr = &name)
                fixed (double* v_ptr = &v)
                {
                    ProgramNamedParameter4dv(id, len, name_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterfv(int, int, byte*, float*)"/>
            public static unsafe void GetProgramNamedParameterfv(int id, int len, ReadOnlySpan<byte> name, Span<float> parameters)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (float* parameters_ptr = parameters)
                    {
                        GetProgramNamedParameterfv(id, len, name_ptr, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterfv(int, int, byte*, float*)"/>
            public static unsafe void GetProgramNamedParameterfv(int id, int len, byte[] name, float[] parameters)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (float* parameters_ptr = parameters)
                    {
                        GetProgramNamedParameterfv(id, len, name_ptr, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterfv(int, int, byte*, float*)"/>
            public static unsafe void GetProgramNamedParameterfv(int id, int len, in byte name, ref float parameters)
            {
                fixed (byte* name_ptr = &name)
                fixed (float* parameters_ptr = &parameters)
                {
                    GetProgramNamedParameterfv(id, len, name_ptr, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterdv(int, int, byte*, double*)"/>
            public static unsafe void GetProgramNamedParameterdv(int id, int len, ReadOnlySpan<byte> name, Span<double> parameters)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (double* parameters_ptr = parameters)
                    {
                        GetProgramNamedParameterdv(id, len, name_ptr, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterdv(int, int, byte*, double*)"/>
            public static unsafe void GetProgramNamedParameterdv(int id, int len, byte[] name, double[] parameters)
            {
                fixed (byte* name_ptr = name)
                {
                    fixed (double* parameters_ptr = parameters)
                    {
                        GetProgramNamedParameterdv(id, len, name_ptr, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterdv(int, int, byte*, double*)"/>
            public static unsafe void GetProgramNamedParameterdv(int id, int len, in byte name, ref double parameters)
            {
                fixed (byte* name_ptr = &name)
                fixed (double* parameters_ptr = &parameters)
                {
                    GetProgramNamedParameterdv(id, len, name_ptr, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CoverageModulationTable(int, float*)"/>
            public static unsafe void CoverageModulationTable(ReadOnlySpan<float> v)
            {
                int n = (int)(v.Length);
                fixed (float* v_ptr = v)
                {
                    CoverageModulationTable(n, v_ptr);
                }
            }
            /// <inheritdoc cref="CoverageModulationTable(int, float*)"/>
            public static unsafe void CoverageModulationTable(float[] v)
            {
                int n = (int)(v.Length);
                fixed (float* v_ptr = v)
                {
                    CoverageModulationTable(n, v_ptr);
                }
            }
            /// <inheritdoc cref="CoverageModulationTable(int, float*)"/>
            public static unsafe void CoverageModulationTable(int n, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    CoverageModulationTable(n, v_ptr);
                }
            }
            /// <inheritdoc cref="GetCoverageModulationTable(int, float*)"/>
            public static unsafe void GetCoverageModulationTable(int bufSize, ref float v)
            {
                fixed (float* v_ptr = &v)
                {
                    GetCoverageModulationTable(bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4iv(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramLocalParameterI4iv(ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramLocalParameterI4iv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4iv(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramLocalParameterI4iv(ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramLocalParameterI4iv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4iv(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramLocalParameterI4iv(ProgramTarget target, uint index, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ProgramLocalParameterI4iv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4iv(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramLocalParametersI4iv(ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramLocalParametersI4iv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4iv(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramLocalParametersI4iv(ProgramTarget target, uint index, int[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramLocalParametersI4iv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4iv(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramLocalParametersI4iv(ProgramTarget target, uint index, int count, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ProgramLocalParametersI4iv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4uiv(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramLocalParameterI4uiv(ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramLocalParameterI4uiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4uiv(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramLocalParameterI4uiv(ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramLocalParameterI4uiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4uiv(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramLocalParameterI4uiv(ProgramTarget target, uint index, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramLocalParameterI4uiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4uiv(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramLocalParametersI4uiv(ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramLocalParametersI4uiv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4uiv(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramLocalParametersI4uiv(ProgramTarget target, uint index, uint[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramLocalParametersI4uiv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4uiv(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramLocalParametersI4uiv(ProgramTarget target, uint index, int count, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramLocalParametersI4uiv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4iv(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramEnvParameterI4iv(ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramEnvParameterI4iv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4iv(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramEnvParameterI4iv(ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramEnvParameterI4iv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4iv(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramEnvParameterI4iv(ProgramTarget target, uint index, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ProgramEnvParameterI4iv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4iv(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramEnvParametersI4iv(ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramEnvParametersI4iv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4iv(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramEnvParametersI4iv(ProgramTarget target, uint index, int[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramEnvParametersI4iv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4iv(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramEnvParametersI4iv(ProgramTarget target, uint index, int count, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ProgramEnvParametersI4iv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4uiv(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramEnvParameterI4uiv(ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramEnvParameterI4uiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4uiv(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramEnvParameterI4uiv(ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramEnvParameterI4uiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4uiv(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramEnvParameterI4uiv(ProgramTarget target, uint index, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramEnvParameterI4uiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4uiv(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramEnvParametersI4uiv(ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramEnvParametersI4uiv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4uiv(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramEnvParametersI4uiv(ProgramTarget target, uint index, uint[] parameters)
            {
                int count = (int)(parameters.Length / 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramEnvParametersI4uiv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4uiv(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramEnvParametersI4uiv(ProgramTarget target, uint index, int count, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramEnvParametersI4uiv(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIiv(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramLocalParameterIiv(ProgramTarget target, uint index, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterIiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIiv(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramLocalParameterIiv(ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterIiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIiv(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramLocalParameterIiv(ProgramTarget target, uint index, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramLocalParameterIiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIuiv(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramLocalParameterIuiv(ProgramTarget target, uint index, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterIuiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIuiv(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramLocalParameterIuiv(ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterIuiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIuiv(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramLocalParameterIuiv(ProgramTarget target, uint index, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetProgramLocalParameterIuiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIiv(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramEnvParameterIiv(ProgramTarget target, uint index, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterIiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIiv(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramEnvParameterIiv(ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterIiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIiv(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramEnvParameterIiv(ProgramTarget target, uint index, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramEnvParameterIiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIuiv(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramEnvParameterIuiv(ProgramTarget target, uint index, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterIuiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIuiv(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramEnvParameterIuiv(ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterIuiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIuiv(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramEnvParameterIuiv(ProgramTarget target, uint index, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetProgramEnvParameterIuiv(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramSubroutineParametersuiv(All, int, uint*)"/>
            public static unsafe void ProgramSubroutineParametersuiv(All target, ReadOnlySpan<uint> parameters)
            {
                int count = (int)(parameters.Length);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramSubroutineParametersuiv(target, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramSubroutineParametersuiv(All, int, uint*)"/>
            public static unsafe void ProgramSubroutineParametersuiv(All target, uint[] parameters)
            {
                int count = (int)(parameters.Length);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramSubroutineParametersuiv(target, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramSubroutineParametersuiv(All, int, uint*)"/>
            public static unsafe void ProgramSubroutineParametersuiv(All target, int count, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramSubroutineParametersuiv(target, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramSubroutineParameteruiv(All, uint, uint*)"/>
            public static unsafe void GetProgramSubroutineParameteruiv(All target, uint index, Span<uint> param)
            {
                fixed (uint* param_ptr = param)
                {
                    GetProgramSubroutineParameteruiv(target, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramSubroutineParameteruiv(All, uint, uint*)"/>
            public static unsafe void GetProgramSubroutineParameteruiv(All target, uint index, uint[] param)
            {
                fixed (uint* param_ptr = param)
                {
                    GetProgramSubroutineParameteruiv(target, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramSubroutineParameteruiv(All, uint, uint*)"/>
            public static unsafe void GetProgramSubroutineParameteruiv(All target, uint index, ref uint param)
            {
                fixed (uint* param_ptr = &param)
                {
                    GetProgramSubroutineParameteruiv(target, index, param_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64v(int, int, long*)"/>
            public static unsafe void Uniform1i64v(int location, int count, in long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64v(int, int, long*)"/>
            public static unsafe void Uniform1i64v(int location, int count, ReadOnlySpan<long> value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64v(int, int, long*)"/>
            public static unsafe void Uniform1i64v(int location, int count, long[] value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64v(int, int, long*)"/>
            public static unsafe void Uniform2i64v(int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64v(int, int, long*)"/>
            public static unsafe void Uniform2i64v(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64v(int, int, long*)"/>
            public static unsafe void Uniform2i64v(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64v(int, int, long*)"/>
            public static unsafe void Uniform2i64v(int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64v(int, int, long*)"/>
            public static unsafe void Uniform2i64v(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64v(int, int, long*)"/>
            public static unsafe void Uniform2i64v(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64v(int, int, long*)"/>
            public static unsafe void Uniform3i64v(int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64v(int, int, long*)"/>
            public static unsafe void Uniform3i64v(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64v(int, int, long*)"/>
            public static unsafe void Uniform3i64v(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64v(int, int, long*)"/>
            public static unsafe void Uniform3i64v(int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64v(int, int, long*)"/>
            public static unsafe void Uniform3i64v(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64v(int, int, long*)"/>
            public static unsafe void Uniform3i64v(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64v(int, int, long*)"/>
            public static unsafe void Uniform4i64v(int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64v(int, int, long*)"/>
            public static unsafe void Uniform4i64v(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64v(int, int, long*)"/>
            public static unsafe void Uniform4i64v(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64v(int, int, long*)"/>
            public static unsafe void Uniform4i64v(int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64v(int, int, long*)"/>
            public static unsafe void Uniform4i64v(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64v(int, int, long*)"/>
            public static unsafe void Uniform4i64v(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64v(int location, int count, in ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64v(int location, int count, ReadOnlySpan<ulong> value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64v(int location, int count, ulong[] value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64v(int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64v(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64v(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64v(int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64v(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64v(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64v(int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64v(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64v(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64v(int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64v(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64v(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64v(int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64v(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64v(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64v(int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64v(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64v(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64v(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64v(int, int, long*)"/>
            public static unsafe void GetUniformi64v(int program, int location, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64v(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64v(int, int, long*)"/>
            public static unsafe void GetUniformi64v(int program, int location, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64v(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64v(int, int, long*)"/>
            public static unsafe void GetUniformi64v(int program, int location, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetUniformi64v(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform1i64v(int program, int location, int count, in long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform1i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64v(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64v(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64v(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64v(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64v(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64v(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64v(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64v(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64v(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64v(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64v(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64v(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64v(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64v(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64v(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64v(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64v(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64v(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64v(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform1ui64v(int program, int location, int count, in ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform1ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64v(int program, int location, int count, in Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64v(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64v(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64v(int program, int location, int count, in System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64v(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64v(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64v(int program, int location, int count, in Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64v(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64v(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64v(int program, int location, int count, in System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64v(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64v(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64v(int program, int location, int count, in Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64v(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64v(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64v(int program, int location, int count, in System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64v(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64v(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2hv(Half*)"/>
            public static unsafe void Vertex2hv(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex2hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2hv(Half*)"/>
            public static unsafe void Vertex2hv(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex2hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2hv(Half*)"/>
            public static unsafe void Vertex2hv(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Vertex2hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3hv(Half*)"/>
            public static unsafe void Vertex3hv(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex3hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3hv(Half*)"/>
            public static unsafe void Vertex3hv(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex3hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3hv(Half*)"/>
            public static unsafe void Vertex3hv(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Vertex3hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4hv(Half*)"/>
            public static unsafe void Vertex4hv(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex4hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4hv(Half*)"/>
            public static unsafe void Vertex4hv(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex4hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4hv(Half*)"/>
            public static unsafe void Vertex4hv(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Vertex4hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Normal3hv(Half*)"/>
            public static unsafe void Normal3hv(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Normal3hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Normal3hv(Half*)"/>
            public static unsafe void Normal3hv(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Normal3hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Normal3hv(Half*)"/>
            public static unsafe void Normal3hv(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Normal3hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Color3hv(Half*)"/>
            public static unsafe void Color3hv(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Color3hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Color3hv(Half*)"/>
            public static unsafe void Color3hv(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Color3hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Color3hv(Half*)"/>
            public static unsafe void Color3hv(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Color3hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Color4hv(Half*)"/>
            public static unsafe void Color4hv(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Color4hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Color4hv(Half*)"/>
            public static unsafe void Color4hv(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Color4hv(v_ptr);
                }
            }
            /// <inheritdoc cref="Color4hv(Half*)"/>
            public static unsafe void Color4hv(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Color4hv(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1hv(Half*)"/>
            public static unsafe void TexCoord1hv(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord1hv(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1hv(Half*)"/>
            public static unsafe void TexCoord1hv(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord1hv(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1hv(Half*)"/>
            public static unsafe void TexCoord1hv(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    TexCoord1hv(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2hv(Half*)"/>
            public static unsafe void TexCoord2hv(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord2hv(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2hv(Half*)"/>
            public static unsafe void TexCoord2hv(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord2hv(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2hv(Half*)"/>
            public static unsafe void TexCoord2hv(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    TexCoord2hv(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3hv(Half*)"/>
            public static unsafe void TexCoord3hv(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord3hv(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3hv(Half*)"/>
            public static unsafe void TexCoord3hv(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord3hv(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3hv(Half*)"/>
            public static unsafe void TexCoord3hv(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    TexCoord3hv(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4hv(Half*)"/>
            public static unsafe void TexCoord4hv(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord4hv(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4hv(Half*)"/>
            public static unsafe void TexCoord4hv(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord4hv(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4hv(Half*)"/>
            public static unsafe void TexCoord4hv(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    TexCoord4hv(v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1hv(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord1hv(TextureUnit target, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord1hv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1hv(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord1hv(TextureUnit target, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord1hv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1hv(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord1hv(TextureUnit target, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    MultiTexCoord1hv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2hv(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord2hv(TextureUnit target, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord2hv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2hv(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord2hv(TextureUnit target, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord2hv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2hv(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord2hv(TextureUnit target, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    MultiTexCoord2hv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3hv(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord3hv(TextureUnit target, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord3hv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3hv(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord3hv(TextureUnit target, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord3hv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3hv(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord3hv(TextureUnit target, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    MultiTexCoord3hv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4hv(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord4hv(TextureUnit target, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord4hv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4hv(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord4hv(TextureUnit target, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord4hv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4hv(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord4hv(TextureUnit target, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    MultiTexCoord4hv(target, v_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordhv(Half*)"/>
            public static unsafe void FogCoordhv(ReadOnlySpan<Half> fog)
            {
                fixed (Half* fog_ptr = fog)
                {
                    FogCoordhv(fog_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordhv(Half*)"/>
            public static unsafe void FogCoordhv(Half[] fog)
            {
                fixed (Half* fog_ptr = fog)
                {
                    FogCoordhv(fog_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordhv(Half*)"/>
            public static unsafe void FogCoordhv(in Half fog)
            {
                fixed (Half* fog_ptr = &fog)
                {
                    FogCoordhv(fog_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3hv(Half*)"/>
            public static unsafe void SecondaryColor3hv(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    SecondaryColor3hv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3hv(Half*)"/>
            public static unsafe void SecondaryColor3hv(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    SecondaryColor3hv(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3hv(Half*)"/>
            public static unsafe void SecondaryColor3hv(in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    SecondaryColor3hv(v_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeighthv(Half*)"/>
            public static unsafe void VertexWeighthv(ReadOnlySpan<Half> weight)
            {
                fixed (Half* weight_ptr = weight)
                {
                    VertexWeighthv(weight_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeighthv(Half*)"/>
            public static unsafe void VertexWeighthv(Half[] weight)
            {
                fixed (Half* weight_ptr = weight)
                {
                    VertexWeighthv(weight_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeighthv(Half*)"/>
            public static unsafe void VertexWeighthv(in Half weight)
            {
                fixed (Half* weight_ptr = &weight)
                {
                    VertexWeighthv(weight_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1hv(uint, Half*)"/>
            public static unsafe void VertexAttrib1hv(uint index, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib1hv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1hv(uint, Half*)"/>
            public static unsafe void VertexAttrib1hv(uint index, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib1hv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1hv(uint, Half*)"/>
            public static unsafe void VertexAttrib1hv(uint index, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttrib1hv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2hv(uint, Half*)"/>
            public static unsafe void VertexAttrib2hv(uint index, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib2hv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2hv(uint, Half*)"/>
            public static unsafe void VertexAttrib2hv(uint index, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib2hv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2hv(uint, Half*)"/>
            public static unsafe void VertexAttrib2hv(uint index, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttrib2hv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3hv(uint, Half*)"/>
            public static unsafe void VertexAttrib3hv(uint index, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib3hv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3hv(uint, Half*)"/>
            public static unsafe void VertexAttrib3hv(uint index, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib3hv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3hv(uint, Half*)"/>
            public static unsafe void VertexAttrib3hv(uint index, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttrib3hv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4hv(uint, Half*)"/>
            public static unsafe void VertexAttrib4hv(uint index, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib4hv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4hv(uint, Half*)"/>
            public static unsafe void VertexAttrib4hv(uint index, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib4hv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4hv(uint, Half*)"/>
            public static unsafe void VertexAttrib4hv(uint index, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttrib4hv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1hv(uint, int, Half*)"/>
            public static unsafe void VertexAttribs1hv(uint index, ReadOnlySpan<Half> v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs1hv(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1hv(uint, int, Half*)"/>
            public static unsafe void VertexAttribs1hv(uint index, Half[] v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs1hv(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1hv(uint, int, Half*)"/>
            public static unsafe void VertexAttribs1hv(uint index, int n, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttribs1hv(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2hv(uint, int, Half*)"/>
            public static unsafe void VertexAttribs2hv(uint index, ReadOnlySpan<Half> v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs2hv(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2hv(uint, int, Half*)"/>
            public static unsafe void VertexAttribs2hv(uint index, Half[] v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs2hv(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2hv(uint, int, Half*)"/>
            public static unsafe void VertexAttribs2hv(uint index, int n, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttribs2hv(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3hv(uint, int, Half*)"/>
            public static unsafe void VertexAttribs3hv(uint index, ReadOnlySpan<Half> v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs3hv(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3hv(uint, int, Half*)"/>
            public static unsafe void VertexAttribs3hv(uint index, Half[] v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs3hv(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3hv(uint, int, Half*)"/>
            public static unsafe void VertexAttribs3hv(uint index, int n, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttribs3hv(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4hv(uint, int, Half*)"/>
            public static unsafe void VertexAttribs4hv(uint index, ReadOnlySpan<Half> v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs4hv(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4hv(uint, int, Half*)"/>
            public static unsafe void VertexAttribs4hv(uint index, Half[] v)
            {
                int n = (int)(v.Length);
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs4hv(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4hv(uint, int, Half*)"/>
            public static unsafe void VertexAttribs4hv(uint index, int n, in Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttribs4hv(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformatSampleiv(TextureTarget, InternalFormat, int, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformatSampleiv(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, Span<int> parameters)
            {
                int count = (int)(parameters.Length);
                fixed (int* parameters_ptr = parameters)
                {
                    GetInternalformatSampleiv(target, internalformat, samples, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformatSampleiv(TextureTarget, InternalFormat, int, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformatSampleiv(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, int[] parameters)
            {
                int count = (int)(parameters.Length);
                fixed (int* parameters_ptr = parameters)
                {
                    GetInternalformatSampleiv(target, internalformat, samples, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformatSampleiv(TextureTarget, InternalFormat, int, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformatSampleiv(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, int count, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetInternalformatSampleiv(target, internalformat, samples, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastBufferSubData(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void MulticastBufferSubData(uint gpuMask, int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                MulticastBufferSubData(gpuMask, buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="MulticastBufferSubData(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void MulticastBufferSubData<T1>(uint gpuMask, int buffer, IntPtr offset, nint size, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    MulticastBufferSubData(gpuMask, buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="MulticastFramebufferSampleLocationsfv(uint, int, uint, int, float*)"/>
            public static unsafe void MulticastFramebufferSampleLocationsfv(uint gpu, int framebuffer, uint start, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MulticastFramebufferSampleLocationsfv(gpu, framebuffer, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjectiv(uint, uint, All, int*)"/>
            public static unsafe void MulticastGetQueryObjectiv(uint gpu, uint id, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MulticastGetQueryObjectiv(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjectuiv(uint, uint, All, uint*)"/>
            public static unsafe void MulticastGetQueryObjectuiv(uint gpu, uint id, All pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    MulticastGetQueryObjectuiv(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjecti64v(uint, uint, All, long*)"/>
            public static unsafe void MulticastGetQueryObjecti64v(uint gpu, uint id, All pname, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    MulticastGetQueryObjecti64v(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjectui64v(uint, uint, All, ulong*)"/>
            public static unsafe void MulticastGetQueryObjectui64v(uint gpu, uint id, All pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    MulticastGetQueryObjectui64v(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMemoryObjectDetachedResourcesuiv(uint, All, int, int, uint*)"/>
            public static unsafe void GetMemoryObjectDetachedResourcesuiv(uint memory, All pname, int first, int count, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetMemoryObjectDetachedResourcesuiv(memory, pname, first, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GenOcclusionQueries(int, uint*)"/>
            public static unsafe void GenOcclusionQueries(Span<uint> ids)
            {
                int n = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    GenOcclusionQueries(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenOcclusionQueries(int, uint*)"/>
            public static unsafe void GenOcclusionQueries(uint[] ids)
            {
                int n = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    GenOcclusionQueries(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenOcclusionQueries(int, uint*)"/>
            public static unsafe void GenOcclusionQueries(int n, ref uint ids)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    GenOcclusionQueries(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteOcclusionQueries(int, uint*)"/>
            public static unsafe void DeleteOcclusionQueries(ReadOnlySpan<uint> ids)
            {
                int n = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DeleteOcclusionQueries(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteOcclusionQueries(int, uint*)"/>
            public static unsafe void DeleteOcclusionQueries(uint[] ids)
            {
                int n = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DeleteOcclusionQueries(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteOcclusionQueries(int, uint*)"/>
            public static unsafe void DeleteOcclusionQueries(int n, in uint ids)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    DeleteOcclusionQueries(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryiv(uint, OcclusionQueryParameterNameNV, int*)"/>
            public static unsafe void GetOcclusionQueryiv(uint id, OcclusionQueryParameterNameNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetOcclusionQueryiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryiv(uint, OcclusionQueryParameterNameNV, int*)"/>
            public static unsafe void GetOcclusionQueryiv(uint id, OcclusionQueryParameterNameNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetOcclusionQueryiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryiv(uint, OcclusionQueryParameterNameNV, int*)"/>
            public static unsafe void GetOcclusionQueryiv(uint id, OcclusionQueryParameterNameNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetOcclusionQueryiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryuiv(uint, OcclusionQueryParameterNameNV, uint*)"/>
            public static unsafe void GetOcclusionQueryuiv(uint id, OcclusionQueryParameterNameNV pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetOcclusionQueryuiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryuiv(uint, OcclusionQueryParameterNameNV, uint*)"/>
            public static unsafe void GetOcclusionQueryuiv(uint id, OcclusionQueryParameterNameNV pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetOcclusionQueryuiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryuiv(uint, OcclusionQueryParameterNameNV, uint*)"/>
            public static unsafe void GetOcclusionQueryuiv(uint id, OcclusionQueryParameterNameNV pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetOcclusionQueryuiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersfv(ProgramTarget, uint, uint, int, float*)"/>
            public static unsafe void ProgramBufferParametersfv(ProgramTarget target, uint bindingIndex, uint wordIndex, ReadOnlySpan<float> parameters)
            {
                int count = (int)(parameters.Length);
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramBufferParametersfv(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersfv(ProgramTarget, uint, uint, int, float*)"/>
            public static unsafe void ProgramBufferParametersfv(ProgramTarget target, uint bindingIndex, uint wordIndex, float[] parameters)
            {
                int count = (int)(parameters.Length);
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramBufferParametersfv(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersfv(ProgramTarget, uint, uint, int, float*)"/>
            public static unsafe void ProgramBufferParametersfv(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ProgramBufferParametersfv(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIiv(ProgramTarget, uint, uint, int, int*)"/>
            public static unsafe void ProgramBufferParametersIiv(ProgramTarget target, uint bindingIndex, uint wordIndex, ReadOnlySpan<int> parameters)
            {
                int count = (int)(parameters.Length);
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramBufferParametersIiv(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIiv(ProgramTarget, uint, uint, int, int*)"/>
            public static unsafe void ProgramBufferParametersIiv(ProgramTarget target, uint bindingIndex, uint wordIndex, int[] parameters)
            {
                int count = (int)(parameters.Length);
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramBufferParametersIiv(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIiv(ProgramTarget, uint, uint, int, int*)"/>
            public static unsafe void ProgramBufferParametersIiv(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ProgramBufferParametersIiv(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIuiv(ProgramTarget, uint, uint, int, uint*)"/>
            public static unsafe void ProgramBufferParametersIuiv(ProgramTarget target, uint bindingIndex, uint wordIndex, ReadOnlySpan<uint> parameters)
            {
                int count = (int)(parameters.Length);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramBufferParametersIuiv(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIuiv(ProgramTarget, uint, uint, int, uint*)"/>
            public static unsafe void ProgramBufferParametersIuiv(ProgramTarget target, uint bindingIndex, uint wordIndex, uint[] parameters)
            {
                int count = (int)(parameters.Length);
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramBufferParametersIuiv(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIuiv(ProgramTarget, uint, uint, int, uint*)"/>
            public static unsafe void ProgramBufferParametersIuiv(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, in uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramBufferParametersIuiv(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PathCommands(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommands(uint path, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathCommands(path, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathCommands(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommands(uint path, byte[] commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathCommands(path, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathCommands(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommands(uint path, int numCommands, in byte commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                fixed (byte* commands_ptr = &commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathCommands(path, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathCommands(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommands<T1>(uint path, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
                where T1 : unmanaged
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    fixed (void* coords_ptr = coords)
                    {
                        PathCommands(path, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PathCommands(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommands<T1>(uint path, byte[] commands, int numCoords, PathCoordType coordType, T1[] coords)
                where T1 : unmanaged
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    fixed (void* coords_ptr = coords)
                    {
                        PathCommands(path, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PathCommands(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommands<T1>(uint path, int numCommands, in byte commands, int numCoords, PathCoordType coordType, in T1 coords)
                where T1 : unmanaged
            {
                fixed (byte* commands_ptr = &commands)
                fixed (void* coords_ptr = &coords)
                {
                    PathCommands(path, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathCoords(uint, int, PathCoordType, void*)"/>
            public static unsafe void PathCoords(uint path, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                void* coords_vptr = (void*)coords;
                PathCoords(path, numCoords, coordType, coords_vptr);
            }
            /// <inheritdoc cref="PathCoords(uint, int, PathCoordType, void*)"/>
            public static unsafe void PathCoords<T1>(uint path, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    PathCoords(path, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathCoords(uint, int, PathCoordType, void*)"/>
            public static unsafe void PathCoords<T1>(uint path, int numCoords, PathCoordType coordType, T1[] coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    PathCoords(path, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathCoords(uint, int, PathCoordType, void*)"/>
            public static unsafe void PathCoords<T1>(uint path, int numCoords, PathCoordType coordType, in T1 coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = &coords)
                {
                    PathCoords(path, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathSubCommands(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommands(uint path, int commandStart, int commandsToDelete, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathSubCommands(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathSubCommands(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommands(uint path, int commandStart, int commandsToDelete, byte[] commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathSubCommands(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathSubCommands(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommands(uint path, int commandStart, int commandsToDelete, int numCommands, in byte commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                fixed (byte* commands_ptr = &commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathSubCommands(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathSubCommands(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommands<T1>(uint path, int commandStart, int commandsToDelete, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
                where T1 : unmanaged
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    fixed (void* coords_ptr = coords)
                    {
                        PathSubCommands(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PathSubCommands(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommands<T1>(uint path, int commandStart, int commandsToDelete, byte[] commands, int numCoords, PathCoordType coordType, T1[] coords)
                where T1 : unmanaged
            {
                int numCommands = (int)(commands.Length);
                fixed (byte* commands_ptr = commands)
                {
                    fixed (void* coords_ptr = coords)
                    {
                        PathSubCommands(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PathSubCommands(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommands<T1>(uint path, int commandStart, int commandsToDelete, int numCommands, in byte commands, int numCoords, PathCoordType coordType, in T1 coords)
                where T1 : unmanaged
            {
                fixed (byte* commands_ptr = &commands)
                fixed (void* coords_ptr = &coords)
                {
                    PathSubCommands(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathSubCoords(uint, int, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCoords(uint path, int coordStart, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                void* coords_vptr = (void*)coords;
                PathSubCoords(path, coordStart, numCoords, coordType, coords_vptr);
            }
            /// <inheritdoc cref="PathSubCoords(uint, int, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCoords<T1>(uint path, int coordStart, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    PathSubCoords(path, coordStart, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathSubCoords(uint, int, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCoords<T1>(uint path, int coordStart, int numCoords, PathCoordType coordType, T1[] coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    PathSubCoords(path, coordStart, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathSubCoords(uint, int, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCoords<T1>(uint path, int coordStart, int numCoords, PathCoordType coordType, in T1 coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = &coords)
                {
                    PathSubCoords(path, coordStart, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathString(uint, PathStringFormat, int, void*)"/>
            public static unsafe void PathString(uint path, PathStringFormat format, int length, IntPtr pathString)
            {
                void* pathString_vptr = (void*)pathString;
                PathString(path, format, length, pathString_vptr);
            }
            /// <inheritdoc cref="PathString(uint, PathStringFormat, int, void*)"/>
            public static unsafe void PathString<T1>(uint path, PathStringFormat format, ReadOnlySpan<T1> pathString)
                where T1 : unmanaged
            {
                int length = (int)(pathString.Length * sizeof(T1));
                fixed (void* pathString_ptr = pathString)
                {
                    PathString(path, format, length, pathString_ptr);
                }
            }
            /// <inheritdoc cref="PathString(uint, PathStringFormat, int, void*)"/>
            public static unsafe void PathString<T1>(uint path, PathStringFormat format, T1[] pathString)
                where T1 : unmanaged
            {
                int length = (int)(pathString.Length * sizeof(T1));
                fixed (void* pathString_ptr = pathString)
                {
                    PathString(path, format, length, pathString_ptr);
                }
            }
            /// <inheritdoc cref="PathString(uint, PathStringFormat, int, void*)"/>
            public static unsafe void PathString<T1>(uint path, PathStringFormat format, int length, in T1 pathString)
                where T1 : unmanaged
            {
                fixed (void* pathString_ptr = &pathString)
                {
                    PathString(path, format, length, pathString_ptr);
                }
            }
            /// <inheritdoc cref="PathGlyphs(uint, PathFontTarget, void*, PathFontStyle, int, PathElementType, void*, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphs(uint firstPathName, PathFontTarget fontTarget, IntPtr fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, IntPtr charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
            {
                void* fontName_vptr = (void*)fontName;
                void* charcodes_vptr = (void*)charcodes;
                PathGlyphs(firstPathName, fontTarget, fontName_vptr, fontStyle, numGlyphs, type, charcodes_vptr, handleMissingGlyphs, pathParameterTemplate, emScale);
            }
            /// <inheritdoc cref="PathGlyphs(uint, PathFontTarget, void*, PathFontStyle, int, PathElementType, void*, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphs<T1, T2>(uint firstPathName, PathFontTarget fontTarget, ReadOnlySpan<T2> fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, ReadOnlySpan<T1> charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* fontName_ptr = fontName)
                {
                    fixed (void* charcodes_ptr = charcodes)
                    {
                        PathGlyphs(firstPathName, fontTarget, fontName_ptr, fontStyle, numGlyphs, type, charcodes_ptr, handleMissingGlyphs, pathParameterTemplate, emScale);
                    }
                }
            }
            /// <inheritdoc cref="PathGlyphs(uint, PathFontTarget, void*, PathFontStyle, int, PathElementType, void*, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphs<T1, T2>(uint firstPathName, PathFontTarget fontTarget, T2[] fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, T1[] charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* fontName_ptr = fontName)
                {
                    fixed (void* charcodes_ptr = charcodes)
                    {
                        PathGlyphs(firstPathName, fontTarget, fontName_ptr, fontStyle, numGlyphs, type, charcodes_ptr, handleMissingGlyphs, pathParameterTemplate, emScale);
                    }
                }
            }
            /// <inheritdoc cref="PathGlyphs(uint, PathFontTarget, void*, PathFontStyle, int, PathElementType, void*, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphs<T1, T2>(uint firstPathName, PathFontTarget fontTarget, in T1 fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, in T2 charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* fontName_ptr = &fontName)
                fixed (void* charcodes_ptr = &charcodes)
                {
                    PathGlyphs(firstPathName, fontTarget, fontName_ptr, fontStyle, numGlyphs, type, charcodes_ptr, handleMissingGlyphs, pathParameterTemplate, emScale);
                }
            }
            /// <inheritdoc cref="PathGlyphRange(uint, PathFontTarget, void*, PathFontStyle, uint, int, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphRange(uint firstPathName, PathFontTarget fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
            {
                void* fontName_vptr = (void*)fontName;
                PathGlyphRange(firstPathName, fontTarget, fontName_vptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
            }
            /// <inheritdoc cref="PathGlyphRange(uint, PathFontTarget, void*, PathFontStyle, uint, int, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphRange<T1>(uint firstPathName, PathFontTarget fontTarget, ReadOnlySpan<T1> fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                fixed (void* fontName_ptr = fontName)
                {
                    PathGlyphRange(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
                }
            }
            /// <inheritdoc cref="PathGlyphRange(uint, PathFontTarget, void*, PathFontStyle, uint, int, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphRange<T1>(uint firstPathName, PathFontTarget fontTarget, T1[] fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                fixed (void* fontName_ptr = fontName)
                {
                    PathGlyphRange(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
                }
            }
            /// <inheritdoc cref="PathGlyphRange(uint, PathFontTarget, void*, PathFontStyle, uint, int, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphRange<T1>(uint firstPathName, PathFontTarget fontTarget, in T1 fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                fixed (void* fontName_ptr = &fontName)
                {
                    PathGlyphRange(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
                }
            }
            /// <inheritdoc cref="WeightPaths(uint, int, uint*, float*)"/>
            public static unsafe void WeightPaths(uint resultPath, int numPaths, ReadOnlySpan<uint> paths, ReadOnlySpan<float> weights)
            {
                fixed (uint* paths_ptr = paths)
                {
                    fixed (float* weights_ptr = weights)
                    {
                        WeightPaths(resultPath, numPaths, paths_ptr, weights_ptr);
                    }
                }
            }
            /// <inheritdoc cref="WeightPaths(uint, int, uint*, float*)"/>
            public static unsafe void WeightPaths(uint resultPath, int numPaths, uint[] paths, float[] weights)
            {
                fixed (uint* paths_ptr = paths)
                {
                    fixed (float* weights_ptr = weights)
                    {
                        WeightPaths(resultPath, numPaths, paths_ptr, weights_ptr);
                    }
                }
            }
            /// <inheritdoc cref="WeightPaths(uint, int, uint*, float*)"/>
            public static unsafe void WeightPaths(uint resultPath, int numPaths, in uint paths, in float weights)
            {
                fixed (uint* paths_ptr = &paths)
                fixed (float* weights_ptr = &weights)
                {
                    WeightPaths(resultPath, numPaths, paths_ptr, weights_ptr);
                }
            }
            /// <inheritdoc cref="TransformPath(uint, uint, PathTransformType, float*)"/>
            public static unsafe void TransformPath(uint resultPath, uint srcPath, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    TransformPath(resultPath, srcPath, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="TransformPath(uint, uint, PathTransformType, float*)"/>
            public static unsafe void TransformPath(uint resultPath, uint srcPath, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    TransformPath(resultPath, srcPath, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="TransformPath(uint, uint, PathTransformType, float*)"/>
            public static unsafe void TransformPath(uint resultPath, uint srcPath, PathTransformType transformType, in float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    TransformPath(resultPath, srcPath, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="PathParameteriv(uint, PathParameter, int*)"/>
            public static unsafe void PathParameteriv(uint path, PathParameter pname, ReadOnlySpan<int> value)
            {
                fixed (int* value_ptr = value)
                {
                    PathParameteriv(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathParameteriv(uint, PathParameter, int*)"/>
            public static unsafe void PathParameteriv(uint path, PathParameter pname, int[] value)
            {
                fixed (int* value_ptr = value)
                {
                    PathParameteriv(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathParameteriv(uint, PathParameter, int*)"/>
            public static unsafe void PathParameteriv(uint path, PathParameter pname, in int value)
            {
                fixed (int* value_ptr = &value)
                {
                    PathParameteriv(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathParameterfv(uint, PathParameter, float*)"/>
            public static unsafe void PathParameterfv(uint path, PathParameter pname, ReadOnlySpan<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    PathParameterfv(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathParameterfv(uint, PathParameter, float*)"/>
            public static unsafe void PathParameterfv(uint path, PathParameter pname, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    PathParameterfv(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathParameterfv(uint, PathParameter, float*)"/>
            public static unsafe void PathParameterfv(uint path, PathParameter pname, in float value)
            {
                fixed (float* value_ptr = &value)
                {
                    PathParameterfv(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathDashArray(uint, int, float*)"/>
            public static unsafe void PathDashArray(uint path, ReadOnlySpan<float> dashArray)
            {
                int dashCount = (int)(dashArray.Length);
                fixed (float* dashArray_ptr = dashArray)
                {
                    PathDashArray(path, dashCount, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="PathDashArray(uint, int, float*)"/>
            public static unsafe void PathDashArray(uint path, float[] dashArray)
            {
                int dashCount = (int)(dashArray.Length);
                fixed (float* dashArray_ptr = dashArray)
                {
                    PathDashArray(path, dashCount, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="PathDashArray(uint, int, float*)"/>
            public static unsafe void PathDashArray(uint path, int dashCount, in float dashArray)
            {
                fixed (float* dashArray_ptr = &dashArray)
                {
                    PathDashArray(path, dashCount, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="StencilFillPathInstanced(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilFillPathInstanced(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilFillPathInstanced(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilFillPathInstanced(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilFillPathInstanced(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, in float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilFillPathInstanced(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilFillPathInstanced(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstanced<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilFillPathInstanced(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilFillPathInstanced(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstanced<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilFillPathInstanced(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilFillPathInstanced(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstanced<T1>(int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, in float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    StencilFillPathInstanced(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstanced(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilStrokePathInstanced(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstanced(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilStrokePathInstanced(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstanced(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, PathTransformType transformType, in float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilStrokePathInstanced(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstanced(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstanced<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, int reference, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilStrokePathInstanced(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstanced(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstanced<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, int reference, uint mask, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilStrokePathInstanced(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstanced(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstanced<T1>(int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, int reference, uint mask, PathTransformType transformType, in float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    StencilStrokePathInstanced(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverFillPathInstanced(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverFillPathInstanced(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverFillPathInstanced(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverFillPathInstanced(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverFillPathInstanced(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverFillPathInstanced(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverFillPathInstanced(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstanced<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        CoverFillPathInstanced(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="CoverFillPathInstanced(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstanced<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        CoverFillPathInstanced(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="CoverFillPathInstanced(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstanced<T1>(int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    CoverFillPathInstanced(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstanced(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverStrokePathInstanced(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstanced(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverStrokePathInstanced(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstanced(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverStrokePathInstanced(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstanced(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstanced<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        CoverStrokePathInstanced(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstanced(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstanced<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        CoverStrokePathInstanced(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstanced(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstanced<T1>(int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    CoverStrokePathInstanced(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameteriv(uint, PathParameter, int*)"/>
            public static unsafe void GetPathParameteriv(uint path, PathParameter pname, Span<int> value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathParameteriv(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameteriv(uint, PathParameter, int*)"/>
            public static unsafe void GetPathParameteriv(uint path, PathParameter pname, int[] value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathParameteriv(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameteriv(uint, PathParameter, int*)"/>
            public static unsafe void GetPathParameteriv(uint path, PathParameter pname, ref int value)
            {
                fixed (int* value_ptr = &value)
                {
                    GetPathParameteriv(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameterfv(uint, PathParameter, float*)"/>
            public static unsafe void GetPathParameterfv(uint path, PathParameter pname, Span<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathParameterfv(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameterfv(uint, PathParameter, float*)"/>
            public static unsafe void GetPathParameterfv(uint path, PathParameter pname, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathParameterfv(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameterfv(uint, PathParameter, float*)"/>
            public static unsafe void GetPathParameterfv(uint path, PathParameter pname, ref float value)
            {
                fixed (float* value_ptr = &value)
                {
                    GetPathParameterfv(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCommands(uint, byte*)"/>
            public static unsafe void GetPathCommands(uint path, Span<byte> commands)
            {
                fixed (byte* commands_ptr = commands)
                {
                    GetPathCommands(path, commands_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCommands(uint, byte*)"/>
            public static unsafe void GetPathCommands(uint path, byte[] commands)
            {
                fixed (byte* commands_ptr = commands)
                {
                    GetPathCommands(path, commands_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCommands(uint, byte*)"/>
            public static unsafe void GetPathCommands(uint path, ref byte commands)
            {
                fixed (byte* commands_ptr = &commands)
                {
                    GetPathCommands(path, commands_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCoords(uint, float*)"/>
            public static unsafe void GetPathCoords(uint path, Span<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    GetPathCoords(path, coords_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCoords(uint, float*)"/>
            public static unsafe void GetPathCoords(uint path, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    GetPathCoords(path, coords_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCoords(uint, float*)"/>
            public static unsafe void GetPathCoords(uint path, ref float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    GetPathCoords(path, coords_ptr);
                }
            }
            /// <inheritdoc cref="GetPathDashArray(uint, float*)"/>
            public static unsafe void GetPathDashArray(uint path, Span<float> dashArray)
            {
                fixed (float* dashArray_ptr = dashArray)
                {
                    GetPathDashArray(path, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="GetPathDashArray(uint, float*)"/>
            public static unsafe void GetPathDashArray(uint path, float[] dashArray)
            {
                fixed (float* dashArray_ptr = dashArray)
                {
                    GetPathDashArray(path, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="GetPathDashArray(uint, float*)"/>
            public static unsafe void GetPathDashArray(uint path, ref float dashArray)
            {
                fixed (float* dashArray_ptr = &dashArray)
                {
                    GetPathDashArray(path, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetrics(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetrics(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride, Span<float> metrics)
            {
                fixed (float* metrics_ptr = metrics)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathMetrics(metricQueryMask, numPaths, pathNameType, paths_vptr, pathBase, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetrics(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetrics(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride, float[] metrics)
            {
                fixed (float* metrics_ptr = metrics)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathMetrics(metricQueryMask, numPaths, pathNameType, paths_vptr, pathBase, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetrics(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetrics(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride, ref float metrics)
            {
                fixed (float* metrics_ptr = &metrics)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathMetrics(metricQueryMask, numPaths, pathNameType, paths_vptr, pathBase, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetrics(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetrics<T1>(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, int stride, Span<float> metrics)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* metrics_ptr = metrics)
                    {
                        GetPathMetrics(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPathMetrics(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetrics<T1>(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, int stride, float[] metrics)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* metrics_ptr = metrics)
                    {
                        GetPathMetrics(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPathMetrics(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetrics<T1>(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, int stride, ref float metrics)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* metrics_ptr = &metrics)
                {
                    GetPathMetrics(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricRange(PathMetricMask, uint, int, int, float*)"/>
            public static unsafe void GetPathMetricRange(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, Span<float> metrics)
            {
                fixed (float* metrics_ptr = metrics)
                {
                    GetPathMetricRange(metricQueryMask, firstPathName, numPaths, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricRange(PathMetricMask, uint, int, int, float*)"/>
            public static unsafe void GetPathMetricRange(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, float[] metrics)
            {
                fixed (float* metrics_ptr = metrics)
                {
                    GetPathMetricRange(metricQueryMask, firstPathName, numPaths, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricRange(PathMetricMask, uint, int, int, float*)"/>
            public static unsafe void GetPathMetricRange(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, ref float metrics)
            {
                fixed (float* metrics_ptr = &metrics)
                {
                    GetPathMetricRange(metricQueryMask, firstPathName, numPaths, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathSpacing(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacing(PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, Span<float> returnedSpacing)
            {
                fixed (float* returnedSpacing_ptr = returnedSpacing)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathSpacing(pathListMode, numPaths, pathNameType, paths_vptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
            }
            /// <inheritdoc cref="GetPathSpacing(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacing(PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, float[] returnedSpacing)
            {
                fixed (float* returnedSpacing_ptr = returnedSpacing)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathSpacing(pathListMode, numPaths, pathNameType, paths_vptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
            }
            /// <inheritdoc cref="GetPathSpacing(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacing(PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, ref float returnedSpacing)
            {
                fixed (float* returnedSpacing_ptr = &returnedSpacing)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathSpacing(pathListMode, numPaths, pathNameType, paths_vptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
            }
            /// <inheritdoc cref="GetPathSpacing(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacing<T1>(PathListMode pathListMode, int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, Span<float> returnedSpacing)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* returnedSpacing_ptr = returnedSpacing)
                    {
                        GetPathSpacing(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPathSpacing(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacing<T1>(PathListMode pathListMode, int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, float[] returnedSpacing)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* returnedSpacing_ptr = returnedSpacing)
                    {
                        GetPathSpacing(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPathSpacing(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacing<T1>(PathListMode pathListMode, int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, ref float returnedSpacing)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* returnedSpacing_ptr = &returnedSpacing)
                {
                    GetPathSpacing(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
            }
            /// <inheritdoc cref="PointAlongPath(uint, int, int, float, float*, float*, float*, float*)"/>
            public static unsafe bool PointAlongPath(uint path, int startSegment, int numSegments, float distance, Span<float> x, Span<float> y, Span<float> tangentX, Span<float> tangentY)
            {
                bool returnValue;
                fixed (float* x_ptr = x)
                {
                    fixed (float* y_ptr = y)
                    {
                        fixed (float* tangentX_ptr = tangentX)
                        {
                            fixed (float* tangentY_ptr = tangentY)
                            {
                                returnValue = PointAlongPath(path, startSegment, numSegments, distance, x_ptr, y_ptr, tangentX_ptr, tangentY_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="PointAlongPath(uint, int, int, float, float*, float*, float*, float*)"/>
            public static unsafe bool PointAlongPath(uint path, int startSegment, int numSegments, float distance, float[] x, float[] y, float[] tangentX, float[] tangentY)
            {
                bool returnValue;
                fixed (float* x_ptr = x)
                {
                    fixed (float* y_ptr = y)
                    {
                        fixed (float* tangentX_ptr = tangentX)
                        {
                            fixed (float* tangentY_ptr = tangentY)
                            {
                                returnValue = PointAlongPath(path, startSegment, numSegments, distance, x_ptr, y_ptr, tangentX_ptr, tangentY_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="PointAlongPath(uint, int, int, float, float*, float*, float*, float*)"/>
            public static unsafe bool PointAlongPath(uint path, int startSegment, int numSegments, float distance, ref float x, ref float y, ref float tangentX, ref float tangentY)
            {
                bool returnValue;
                fixed (float* x_ptr = &x)
                fixed (float* y_ptr = &y)
                fixed (float* tangentX_ptr = &tangentX)
                fixed (float* tangentY_ptr = &tangentY)
                {
                    returnValue = PointAlongPath(path, startSegment, numSegments, distance, x_ptr, y_ptr, tangentX_ptr, tangentY_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="MatrixLoad3x2f(All, float*)"/>
            public static unsafe void MatrixLoad3x2f(All matrixMode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoad3x2f(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoad3x3f(All, float*)"/>
            public static unsafe void MatrixLoad3x3f(All matrixMode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoad3x3f(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTranspose3x3f(All, float*)"/>
            public static unsafe void MatrixLoadTranspose3x3f(All matrixMode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoadTranspose3x3f(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMult3x2f(All, float*)"/>
            public static unsafe void MatrixMult3x2f(All matrixMode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMult3x2f(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMult3x3f(All, float*)"/>
            public static unsafe void MatrixMult3x3f(All matrixMode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMult3x3f(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTranspose3x3f(All, float*)"/>
            public static unsafe void MatrixMultTranspose3x3f(All matrixMode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMultTranspose3x3f(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstanced(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverFillPathInstanced(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstanced(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverFillPathInstanced(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstanced(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverFillPathInstanced(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstanced(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstanced<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilThenCoverFillPathInstanced(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstanced(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstanced<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilThenCoverFillPathInstanced(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstanced(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstanced<T1>(int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    StencilThenCoverFillPathInstanced(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstanced(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverStrokePathInstanced(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstanced(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverStrokePathInstanced(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstanced(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstanced(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverStrokePathInstanced(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstanced(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstanced<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilThenCoverStrokePathInstanced(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstanced(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstanced<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = paths)
                {
                    fixed (float* transformValues_ptr = transformValues)
                    {
                        StencilThenCoverStrokePathInstanced(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstanced(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstanced<T1>(int numPaths, PathElementType pathNameType, in T1 paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, in float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    StencilThenCoverStrokePathInstanced(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="PathGlyphIndexRange(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRange(All fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, Span<uint> baseAndCount)
            {
                All returnValue;
                fixed (uint* baseAndCount_ptr = baseAndCount)
                {
                    void* fontName_vptr = (void*)fontName;
                    returnValue = PathGlyphIndexRange(fontTarget, fontName_vptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRange(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRange(All fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint[] baseAndCount)
            {
                All returnValue;
                fixed (uint* baseAndCount_ptr = baseAndCount)
                {
                    void* fontName_vptr = (void*)fontName;
                    returnValue = PathGlyphIndexRange(fontTarget, fontName_vptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRange(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRange(All fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, ref uint baseAndCount)
            {
                All returnValue;
                fixed (uint* baseAndCount_ptr = &baseAndCount)
                {
                    void* fontName_vptr = (void*)fontName;
                    returnValue = PathGlyphIndexRange(fontTarget, fontName_vptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRange(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRange<T1>(All fontTarget, in T1 fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, Span<uint> baseAndCount)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontName_ptr = &fontName)
                {
                    fixed (uint* baseAndCount_ptr = baseAndCount)
                    {
                        returnValue = PathGlyphIndexRange(fontTarget, fontName_ptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRange(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRange<T1>(All fontTarget, in T1 fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint[] baseAndCount)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontName_ptr = &fontName)
                {
                    fixed (uint* baseAndCount_ptr = baseAndCount)
                    {
                        returnValue = PathGlyphIndexRange(fontTarget, fontName_ptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRange(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRange<T1>(All fontTarget, in T1 fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, ref uint baseAndCount)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontName_ptr = &fontName)
                fixed (uint* baseAndCount_ptr = &baseAndCount)
                {
                    returnValue = PathGlyphIndexRange(fontTarget, fontName_ptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexArray(uint, All, void*, PathFontStyle, uint, int, uint, float)"/>
            public static unsafe All PathGlyphIndexArray(uint firstPathName, All fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
            {
                All returnValue;
                void* fontName_vptr = (void*)fontName;
                returnValue = PathGlyphIndexArray(firstPathName, fontTarget, fontName_vptr, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexArray(uint, All, void*, PathFontStyle, uint, int, uint, float)"/>
            public static unsafe All PathGlyphIndexArray<T1>(uint firstPathName, All fontTarget, in T1 fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontName_ptr = &fontName)
                {
                    returnValue = PathGlyphIndexArray(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathMemoryGlyphIndexArray(uint, All, nint, void*, int, uint, int, uint, float)"/>
            public static unsafe All PathMemoryGlyphIndexArray(uint firstPathName, All fontTarget, nint fontSize, IntPtr fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
            {
                All returnValue;
                void* fontData_vptr = (void*)fontData;
                returnValue = PathMemoryGlyphIndexArray(firstPathName, fontTarget, fontSize, fontData_vptr, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                return returnValue;
            }
            /// <inheritdoc cref="PathMemoryGlyphIndexArray(uint, All, nint, void*, int, uint, int, uint, float)"/>
            public static unsafe All PathMemoryGlyphIndexArray<T1>(uint firstPathName, All fontTarget, nint fontSize, in T1 fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontData_ptr = &fontData)
                {
                    returnValue = PathMemoryGlyphIndexArray(firstPathName, fontTarget, fontSize, fontData_ptr, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                }
                return returnValue;
            }
            /// <inheritdoc cref="ProgramPathFragmentInputGen(int, int, All, int, float*)"/>
            public static unsafe void ProgramPathFragmentInputGen(int program, int location, All genMode, int components, in float coeffs)
            {
                fixed (float* coeffs_ptr = &coeffs)
                {
                    ProgramPathFragmentInputGen(program, location, genMode, components, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramResourcefv(int, ProgramInterface, uint, int, All*, int, int*, float*)"/>
            public static unsafe void GetProgramResourcefv(int program, ProgramInterface programInterface, uint index, int propCount, in All props, Span<int> length, Span<float> parameters)
            {
                fixed (All* props_ptr = &props)
                {
                    fixed (int* length_ptr = length)
                    {
                        int count = (int)(parameters.Length);
                        fixed (float* parameters_ptr = parameters)
                        {
                            GetProgramResourcefv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramResourcefv(int, ProgramInterface, uint, int, All*, int, int*, float*)"/>
            public static unsafe void GetProgramResourcefv(int program, ProgramInterface programInterface, uint index, int propCount, in All props, int[] length, float[] parameters)
            {
                fixed (All* props_ptr = &props)
                {
                    fixed (int* length_ptr = length)
                    {
                        int count = (int)(parameters.Length);
                        fixed (float* parameters_ptr = parameters)
                        {
                            GetProgramResourcefv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramResourcefv(int, ProgramInterface, uint, int, All*, int, int*, float*)"/>
            public static unsafe void GetProgramResourcefv(int program, ProgramInterface programInterface, uint index, int propCount, in All props, int count, ref int length, ref float parameters)
            {
                fixed (All* props_ptr = &props)
                fixed (int* length_ptr = &length)
                fixed (float* parameters_ptr = &parameters)
                {
                    GetProgramResourcefv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PathColorGen(PathColor, PathGenMode, PathColorFormat, float*)"/>
            public static unsafe void PathColorGen(PathColor color, PathGenMode genMode, PathColorFormat colorFormat, ReadOnlySpan<float> coeffs)
            {
                fixed (float* coeffs_ptr = coeffs)
                {
                    PathColorGen(color, genMode, colorFormat, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PathColorGen(PathColor, PathGenMode, PathColorFormat, float*)"/>
            public static unsafe void PathColorGen(PathColor color, PathGenMode genMode, PathColorFormat colorFormat, float[] coeffs)
            {
                fixed (float* coeffs_ptr = coeffs)
                {
                    PathColorGen(color, genMode, colorFormat, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PathColorGen(PathColor, PathGenMode, PathColorFormat, float*)"/>
            public static unsafe void PathColorGen(PathColor color, PathGenMode genMode, PathColorFormat colorFormat, in float coeffs)
            {
                fixed (float* coeffs_ptr = &coeffs)
                {
                    PathColorGen(color, genMode, colorFormat, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PathTexGen(PathColor, PathGenMode, int, float*)"/>
            public static unsafe void PathTexGen(PathColor texCoordSet, PathGenMode genMode, int components, ReadOnlySpan<float> coeffs)
            {
                fixed (float* coeffs_ptr = coeffs)
                {
                    PathTexGen(texCoordSet, genMode, components, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PathTexGen(PathColor, PathGenMode, int, float*)"/>
            public static unsafe void PathTexGen(PathColor texCoordSet, PathGenMode genMode, int components, float[] coeffs)
            {
                fixed (float* coeffs_ptr = coeffs)
                {
                    PathTexGen(texCoordSet, genMode, components, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PathTexGen(PathColor, PathGenMode, int, float*)"/>
            public static unsafe void PathTexGen(PathColor texCoordSet, PathGenMode genMode, int components, in float coeffs)
            {
                fixed (float* coeffs_ptr = &coeffs)
                {
                    PathTexGen(texCoordSet, genMode, components, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGeniv(PathColor, PathGenMode, int*)"/>
            public static unsafe void GetPathColorGeniv(PathColor color, PathGenMode pname, Span<int> value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathColorGeniv(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGeniv(PathColor, PathGenMode, int*)"/>
            public static unsafe void GetPathColorGeniv(PathColor color, PathGenMode pname, int[] value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathColorGeniv(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGeniv(PathColor, PathGenMode, int*)"/>
            public static unsafe void GetPathColorGeniv(PathColor color, PathGenMode pname, ref int value)
            {
                fixed (int* value_ptr = &value)
                {
                    GetPathColorGeniv(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGenfv(PathColor, PathGenMode, float*)"/>
            public static unsafe void GetPathColorGenfv(PathColor color, PathGenMode pname, Span<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathColorGenfv(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGenfv(PathColor, PathGenMode, float*)"/>
            public static unsafe void GetPathColorGenfv(PathColor color, PathGenMode pname, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathColorGenfv(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGenfv(PathColor, PathGenMode, float*)"/>
            public static unsafe void GetPathColorGenfv(PathColor color, PathGenMode pname, ref float value)
            {
                fixed (float* value_ptr = &value)
                {
                    GetPathColorGenfv(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGeniv(TextureUnit, PathGenMode, int*)"/>
            public static unsafe void GetPathTexGeniv(TextureUnit texCoordSet, PathGenMode pname, Span<int> value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathTexGeniv(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGeniv(TextureUnit, PathGenMode, int*)"/>
            public static unsafe void GetPathTexGeniv(TextureUnit texCoordSet, PathGenMode pname, int[] value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathTexGeniv(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGeniv(TextureUnit, PathGenMode, int*)"/>
            public static unsafe void GetPathTexGeniv(TextureUnit texCoordSet, PathGenMode pname, ref int value)
            {
                fixed (int* value_ptr = &value)
                {
                    GetPathTexGeniv(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGenfv(TextureUnit, PathGenMode, float*)"/>
            public static unsafe void GetPathTexGenfv(TextureUnit texCoordSet, PathGenMode pname, Span<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathTexGenfv(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGenfv(TextureUnit, PathGenMode, float*)"/>
            public static unsafe void GetPathTexGenfv(TextureUnit texCoordSet, PathGenMode pname, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathTexGenfv(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGenfv(TextureUnit, PathGenMode, float*)"/>
            public static unsafe void GetPathTexGenfv(TextureUnit texCoordSet, PathGenMode pname, ref float value)
            {
                fixed (float* value_ptr = &value)
                {
                    GetPathTexGenfv(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposefEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposefEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposefEXT(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoadTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposedEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoadTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposedEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoadTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposedEXT(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixLoadTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadfEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadfEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadfEXT(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoadfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoaddEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoaddEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoaddEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoaddEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoaddEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoaddEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoaddEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoaddEXT(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixLoaddEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposefEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposefEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposefEXT(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMultTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposedEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposedEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposedEXT(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixMultTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultfEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultfEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultfEXT(MatrixMode mode, in float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMultfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultdEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultdEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultdEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultdEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultdEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultdEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultdEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultdEXT(MatrixMode mode, in double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixMultdEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="PixelDataRange(PixelDataRangeTargetNV, int, void*)"/>
            public static unsafe void PixelDataRange(PixelDataRangeTargetNV target, int length, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                PixelDataRange(target, length, pointer_vptr);
            }
            /// <inheritdoc cref="PixelDataRange(PixelDataRangeTargetNV, int, void*)"/>
            public static unsafe void PixelDataRange<T1>(PixelDataRangeTargetNV target, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    PixelDataRange(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="PixelDataRange(PixelDataRangeTargetNV, int, void*)"/>
            public static unsafe void PixelDataRange<T1>(PixelDataRangeTargetNV target, T1[] pointer)
                where T1 : unmanaged
            {
                int length = (int)(pointer.Length * sizeof(T1));
                fixed (void* pointer_ptr = pointer)
                {
                    PixelDataRange(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="PixelDataRange(PixelDataRangeTargetNV, int, void*)"/>
            public static unsafe void PixelDataRange<T1>(PixelDataRangeTargetNV target, int length, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    PixelDataRange(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="PointParameteriv(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameteriv(PointParameterNameARB pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PointParameteriv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameteriv(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameteriv(PointParameterNameARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PointParameteriv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameteriv(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameteriv(PointParameterNameARB pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    PointParameteriv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoiv(uint, All, int*)"/>
            public static unsafe void GetVideoiv(uint video_slot, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoiv(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoiv(uint, All, int*)"/>
            public static unsafe void GetVideoiv(uint video_slot, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoiv(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoiv(uint, All, int*)"/>
            public static unsafe void GetVideoiv(uint video_slot, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVideoiv(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideouiv(uint, All, uint*)"/>
            public static unsafe void GetVideouiv(uint video_slot, All pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetVideouiv(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideouiv(uint, All, uint*)"/>
            public static unsafe void GetVideouiv(uint video_slot, All pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetVideouiv(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideouiv(uint, All, uint*)"/>
            public static unsafe void GetVideouiv(uint video_slot, All pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetVideouiv(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoi64v(uint, All, long*)"/>
            public static unsafe void GetVideoi64v(uint video_slot, All pname, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetVideoi64v(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoi64v(uint, All, long*)"/>
            public static unsafe void GetVideoi64v(uint video_slot, All pname, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetVideoi64v(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoi64v(uint, All, long*)"/>
            public static unsafe void GetVideoi64v(uint video_slot, All pname, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetVideoi64v(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoui64v(uint, All, ulong*)"/>
            public static unsafe void GetVideoui64v(uint video_slot, All pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetVideoui64v(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoui64v(uint, All, ulong*)"/>
            public static unsafe void GetVideoui64v(uint video_slot, All pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetVideoui64v(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoui64v(uint, All, ulong*)"/>
            public static unsafe void GetVideoui64v(uint video_slot, All pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetVideoui64v(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="QueryResource(All, int, uint, int*)"/>
            public static unsafe int QueryResource(All queryType, int tagId, Span<int> buffer)
            {
                int returnValue;
                uint count = (uint)(buffer.Length);
                fixed (int* buffer_ptr = buffer)
                {
                    returnValue = QueryResource(queryType, tagId, count, buffer_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="QueryResource(All, int, uint, int*)"/>
            public static unsafe int QueryResource(All queryType, int tagId, int[] buffer)
            {
                int returnValue;
                uint count = (uint)(buffer.Length);
                fixed (int* buffer_ptr = buffer)
                {
                    returnValue = QueryResource(queryType, tagId, count, buffer_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="QueryResource(All, int, uint, int*)"/>
            public static unsafe int QueryResource(All queryType, int tagId, uint count, ref int buffer)
            {
                int returnValue;
                fixed (int* buffer_ptr = &buffer)
                {
                    returnValue = QueryResource(queryType, tagId, count, buffer_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="GenQueryResourceTag(int, int*)"/>
            public static unsafe void GenQueryResourceTag(Span<int> tagIds)
            {
                int n = (int)(tagIds.Length);
                fixed (int* tagIds_ptr = tagIds)
                {
                    GenQueryResourceTag(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="GenQueryResourceTag(int, int*)"/>
            public static unsafe void GenQueryResourceTag(int[] tagIds)
            {
                int n = (int)(tagIds.Length);
                fixed (int* tagIds_ptr = tagIds)
                {
                    GenQueryResourceTag(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="GenQueryResourceTag(int, int*)"/>
            public static unsafe void GenQueryResourceTag(int n, ref int tagIds)
            {
                fixed (int* tagIds_ptr = &tagIds)
                {
                    GenQueryResourceTag(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueryResourceTag(int, int*)"/>
            public static unsafe void DeleteQueryResourceTag(ReadOnlySpan<int> tagIds)
            {
                int n = (int)(tagIds.Length);
                fixed (int* tagIds_ptr = tagIds)
                {
                    DeleteQueryResourceTag(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueryResourceTag(int, int*)"/>
            public static unsafe void DeleteQueryResourceTag(int[] tagIds)
            {
                int n = (int)(tagIds.Length);
                fixed (int* tagIds_ptr = tagIds)
                {
                    DeleteQueryResourceTag(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueryResourceTag(int, int*)"/>
            public static unsafe void DeleteQueryResourceTag(int n, in int tagIds)
            {
                fixed (int* tagIds_ptr = &tagIds)
                {
                    DeleteQueryResourceTag(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="QueryResourceTag(int, byte*)"/>
            public static unsafe void QueryResourceTag(int tagId, string tagString)
            {
                byte* tagString_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(tagString);
                QueryResourceTag(tagId, tagString_ptr);
                Marshal.FreeCoTaskMem((IntPtr)tagString_ptr);
            }
            /// <inheritdoc cref="CombinerParameterfv(CombinerParameterNV, float*)"/>
            public static unsafe void CombinerParameterfv(CombinerParameterNV pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CombinerParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameterfv(CombinerParameterNV, float*)"/>
            public static unsafe void CombinerParameterfv(CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CombinerParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameterfv(CombinerParameterNV, float*)"/>
            public static unsafe void CombinerParameterfv(CombinerParameterNV pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    CombinerParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameteriv(CombinerParameterNV, int*)"/>
            public static unsafe void CombinerParameteriv(CombinerParameterNV pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    CombinerParameteriv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameteriv(CombinerParameterNV, int*)"/>
            public static unsafe void CombinerParameteriv(CombinerParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    CombinerParameteriv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameteriv(CombinerParameterNV, int*)"/>
            public static unsafe void CombinerParameteriv(CombinerParameterNV pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    CombinerParameteriv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameterfv(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerInputParameterfv(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerInputParameterfv(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameterfv(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerInputParameterfv(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerInputParameterfv(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameterfv(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerInputParameterfv(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetCombinerInputParameterfv(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameteriv(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerInputParameteriv(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetCombinerInputParameteriv(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameteriv(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerInputParameteriv(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetCombinerInputParameteriv(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameteriv(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerInputParameteriv(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetCombinerInputParameteriv(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameterfv(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerOutputParameterfv(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerOutputParameterfv(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameterfv(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerOutputParameterfv(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerOutputParameterfv(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameterfv(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerOutputParameterfv(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetCombinerOutputParameterfv(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameteriv(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerOutputParameteriv(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetCombinerOutputParameteriv(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameteriv(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerOutputParameteriv(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetCombinerOutputParameteriv(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameteriv(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerOutputParameteriv(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetCombinerOutputParameteriv(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterfv(CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetFinalCombinerInputParameterfv(CombinerVariableNV variable, CombinerParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFinalCombinerInputParameterfv(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterfv(CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetFinalCombinerInputParameterfv(CombinerVariableNV variable, CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFinalCombinerInputParameterfv(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterfv(CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetFinalCombinerInputParameterfv(CombinerVariableNV variable, CombinerParameterNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetFinalCombinerInputParameterfv(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameteriv(CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetFinalCombinerInputParameteriv(CombinerVariableNV variable, CombinerParameterNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFinalCombinerInputParameteriv(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameteriv(CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetFinalCombinerInputParameteriv(CombinerVariableNV variable, CombinerParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFinalCombinerInputParameteriv(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameteriv(CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetFinalCombinerInputParameteriv(CombinerVariableNV variable, CombinerParameterNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFinalCombinerInputParameteriv(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerStageParameterfv(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void CombinerStageParameterfv(CombinerStageNV stage, CombinerParameterNV pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CombinerStageParameterfv(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerStageParameterfv(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void CombinerStageParameterfv(CombinerStageNV stage, CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CombinerStageParameterfv(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerStageParameterfv(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void CombinerStageParameterfv(CombinerStageNV stage, CombinerParameterNV pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    CombinerStageParameterfv(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerStageParameterfv(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerStageParameterfv(CombinerStageNV stage, CombinerParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerStageParameterfv(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerStageParameterfv(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerStageParameterfv(CombinerStageNV stage, CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerStageParameterfv(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerStageParameterfv(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerStageParameterfv(CombinerStageNV stage, CombinerParameterNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetCombinerStageParameterfv(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferSampleLocationsfv(FramebufferTarget, uint, int, float*)"/>
            public static unsafe void FramebufferSampleLocationsfv(FramebufferTarget target, uint start, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    FramebufferSampleLocationsfv(target, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferSampleLocationsfv(int, uint, int, float*)"/>
            public static unsafe void NamedFramebufferSampleLocationsfv(int framebuffer, uint start, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    NamedFramebufferSampleLocationsfv(framebuffer, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorExclusiveArrayv(uint, int, int*)"/>
            public static unsafe void ScissorExclusiveArrayv(uint first, int count, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorExclusiveArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorExclusiveArrayv(uint, int, int*)"/>
            public static unsafe void ScissorExclusiveArrayv(uint first, int count, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorExclusiveArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorExclusiveArrayv(uint, int, int*)"/>
            public static unsafe void ScissorExclusiveArrayv(uint first, int count, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    ScissorExclusiveArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameterui64v(BufferTargetARB, All, ulong*)"/>
            public static unsafe void GetBufferParameterui64v(BufferTargetARB target, All pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetBufferParameterui64v(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameterui64v(BufferTargetARB, All, ulong*)"/>
            public static unsafe void GetBufferParameterui64v(BufferTargetARB target, All pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetBufferParameterui64v(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameterui64v(BufferTargetARB, All, ulong*)"/>
            public static unsafe void GetBufferParameterui64v(BufferTargetARB target, All pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetBufferParameterui64v(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameterui64v(int, BufferPNameARB, ulong*)"/>
            public static unsafe void GetNamedBufferParameterui64v(int buffer, BufferPNameARB pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetNamedBufferParameterui64v(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameterui64v(int, BufferPNameARB, ulong*)"/>
            public static unsafe void GetNamedBufferParameterui64v(int buffer, BufferPNameARB pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetNamedBufferParameterui64v(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameterui64v(int, BufferPNameARB, ulong*)"/>
            public static unsafe void GetNamedBufferParameterui64v(int buffer, BufferPNameARB pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetNamedBufferParameterui64v(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64v(All, ulong*)"/>
            public static unsafe void GetIntegerui64v(All value, Span<ulong> result)
            {
                fixed (ulong* result_ptr = result)
                {
                    GetIntegerui64v(value, result_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64v(All, ulong*)"/>
            public static unsafe void GetIntegerui64v(All value, ulong[] result)
            {
                fixed (ulong* result_ptr = result)
                {
                    GetIntegerui64v(value, result_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64v(All, ulong*)"/>
            public static unsafe void GetIntegerui64v(All value, ref ulong result)
            {
                fixed (ulong* result_ptr = &result)
                {
                    GetIntegerui64v(value, result_ptr);
                }
            }
            /// <inheritdoc cref="Uniformui64v(int, int, ulong*)"/>
            public static unsafe void Uniformui64v(int location, ReadOnlySpan<ulong> value)
            {
                int count = (int)(value.Length / 1);
                fixed (ulong* value_ptr = value)
                {
                    Uniformui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniformui64v(int, int, ulong*)"/>
            public static unsafe void Uniformui64v(int location, ulong[] value)
            {
                int count = (int)(value.Length / 1);
                fixed (ulong* value_ptr = value)
                {
                    Uniformui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniformui64v(int, int, ulong*)"/>
            public static unsafe void Uniformui64v(int location, int count, in ulong value)
            {
                fixed (ulong* value_ptr = &value)
                {
                    Uniformui64v(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64v(int, int, ulong*)"/>
            public static unsafe void GetUniformui64v(int program, int location, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64v(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64v(int, int, ulong*)"/>
            public static unsafe void GetUniformui64v(int program, int location, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64v(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64v(int, int, ulong*)"/>
            public static unsafe void GetUniformui64v(int program, int location, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetUniformui64v(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformui64v(int program, int location, ReadOnlySpan<ulong> value)
            {
                int count = (int)(value.Length);
                fixed (ulong* value_ptr = value)
                {
                    ProgramUniformui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformui64v(int program, int location, ulong[] value)
            {
                int count = (int)(value.Length);
                fixed (ulong* value_ptr = value)
                {
                    ProgramUniformui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformui64v(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformui64v(int program, int location, int count, in ulong value)
            {
                fixed (ulong* value_ptr = &value)
                {
                    ProgramUniformui64v(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateImagePalette(uint, uint, All*)"/>
            public static unsafe void GetShadingRateImagePalette(uint viewport, uint entry, Span<All> rate)
            {
                fixed (All* rate_ptr = rate)
                {
                    GetShadingRateImagePalette(viewport, entry, rate_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateImagePalette(uint, uint, All*)"/>
            public static unsafe void GetShadingRateImagePalette(uint viewport, uint entry, All[] rate)
            {
                fixed (All* rate_ptr = rate)
                {
                    GetShadingRateImagePalette(viewport, entry, rate_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateImagePalette(uint, uint, All*)"/>
            public static unsafe void GetShadingRateImagePalette(uint viewport, uint entry, ref All rate)
            {
                fixed (All* rate_ptr = &rate)
                {
                    GetShadingRateImagePalette(viewport, entry, rate_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateSampleLocationiv(All, uint, uint, int*)"/>
            public static unsafe void GetShadingRateSampleLocationiv(All rate, uint samples, uint index, Span<int> location)
            {
                fixed (int* location_ptr = location)
                {
                    GetShadingRateSampleLocationiv(rate, samples, index, location_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateSampleLocationiv(All, uint, uint, int*)"/>
            public static unsafe void GetShadingRateSampleLocationiv(All rate, uint samples, uint index, int[] location)
            {
                fixed (int* location_ptr = location)
                {
                    GetShadingRateSampleLocationiv(rate, samples, index, location_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateSampleLocationiv(All, uint, uint, int*)"/>
            public static unsafe void GetShadingRateSampleLocationiv(All rate, uint samples, uint index, ref int location)
            {
                fixed (int* location_ptr = &location)
                {
                    GetShadingRateSampleLocationiv(rate, samples, index, location_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateImagePalette(uint, uint, int, All*)"/>
            public static unsafe void ShadingRateImagePalette(uint viewport, uint first, ReadOnlySpan<All> rates)
            {
                int count = (int)(rates.Length);
                fixed (All* rates_ptr = rates)
                {
                    ShadingRateImagePalette(viewport, first, count, rates_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateImagePalette(uint, uint, int, All*)"/>
            public static unsafe void ShadingRateImagePalette(uint viewport, uint first, All[] rates)
            {
                int count = (int)(rates.Length);
                fixed (All* rates_ptr = rates)
                {
                    ShadingRateImagePalette(viewport, first, count, rates_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateImagePalette(uint, uint, int, All*)"/>
            public static unsafe void ShadingRateImagePalette(uint viewport, uint first, int count, in All rates)
            {
                fixed (All* rates_ptr = &rates)
                {
                    ShadingRateImagePalette(viewport, first, count, rates_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateSampleOrderCustom(All, uint, int*)"/>
            public static unsafe void ShadingRateSampleOrderCustom(All rate, uint samples, ReadOnlySpan<int> locations)
            {
                fixed (int* locations_ptr = locations)
                {
                    ShadingRateSampleOrderCustom(rate, samples, locations_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateSampleOrderCustom(All, uint, int*)"/>
            public static unsafe void ShadingRateSampleOrderCustom(All rate, uint samples, int[] locations)
            {
                fixed (int* locations_ptr = locations)
                {
                    ShadingRateSampleOrderCustom(rate, samples, locations_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateSampleOrderCustom(All, uint, int*)"/>
            public static unsafe void ShadingRateSampleOrderCustom(All rate, uint samples, in int locations)
            {
                fixed (int* locations_ptr = &locations)
                {
                    ShadingRateSampleOrderCustom(rate, samples, locations_ptr);
                }
            }
            /// <inheritdoc cref="TransformFeedbackAttribs(int, int*, All)"/>
            public static unsafe void TransformFeedbackAttribs(int count, ReadOnlySpan<int> attribs, All bufferMode)
            {
                fixed (int* attribs_ptr = attribs)
                {
                    TransformFeedbackAttribs(count, attribs_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackAttribs(int, int*, All)"/>
            public static unsafe void TransformFeedbackAttribs(int count, int[] attribs, All bufferMode)
            {
                fixed (int* attribs_ptr = attribs)
                {
                    TransformFeedbackAttribs(count, attribs_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackAttribs(int, int*, All)"/>
            public static unsafe void TransformFeedbackAttribs(int count, in int attribs, All bufferMode)
            {
                fixed (int* attribs_ptr = &attribs)
                {
                    TransformFeedbackAttribs(count, attribs_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackVaryings(int, int, TransformFeedbackTokenNV*, TransformFeedbackBufferMode)"/>
            public static unsafe void TransformFeedbackVaryings(int program, ReadOnlySpan<TransformFeedbackTokenNV> locations, TransformFeedbackBufferMode bufferMode)
            {
                int count = (int)(locations.Length);
                fixed (TransformFeedbackTokenNV* locations_ptr = locations)
                {
                    TransformFeedbackVaryings(program, count, locations_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackVaryings(int, int, TransformFeedbackTokenNV*, TransformFeedbackBufferMode)"/>
            public static unsafe void TransformFeedbackVaryings(int program, TransformFeedbackTokenNV[] locations, TransformFeedbackBufferMode bufferMode)
            {
                int count = (int)(locations.Length);
                fixed (TransformFeedbackTokenNV* locations_ptr = locations)
                {
                    TransformFeedbackVaryings(program, count, locations_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackVaryings(int, int, TransformFeedbackTokenNV*, TransformFeedbackBufferMode)"/>
            public static unsafe void TransformFeedbackVaryings(int program, int count, in TransformFeedbackTokenNV locations, TransformFeedbackBufferMode bufferMode)
            {
                fixed (TransformFeedbackTokenNV* locations_ptr = &locations)
                {
                    TransformFeedbackVaryings(program, count, locations_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="ActiveVarying(int, byte*)"/>
            public static unsafe void ActiveVarying(int program, string name)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                ActiveVarying(program, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="GetVaryingLocation(int, byte*)"/>
            public static unsafe int GetVaryingLocation(int program, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetVaryingLocation(program, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetActiveVarying(int, uint, int, int*, int*, All*, byte*)"/>
            public static unsafe string GetActiveVarying(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<All> type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (All* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetActiveVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveVarying(int, uint, int, int*, int*, All*, byte*)"/>
            public static unsafe void GetActiveVarying(int program, uint index, int bufSize, Span<int> length, Span<int> size, Span<All> type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (All* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetActiveVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetActiveVarying(int, uint, int, int*, int*, All*, byte*)"/>
            public static unsafe string GetActiveVarying(int program, uint index, int bufSize, int[] length, int[] size, All[] type)
            {
                string name;
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (All* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetActiveVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveVarying(int, uint, int, int*, int*, All*, byte*)"/>
            public static unsafe void GetActiveVarying(int program, uint index, int bufSize, int[] length, int[] size, All[] type, out string name)
            {
                fixed (int* length_ptr = length)
                {
                    fixed (int* size_ptr = size)
                    {
                        fixed (All* type_ptr = type)
                        {
                            var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                            GetActiveVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                            name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetActiveVarying(int, uint, int, int*, int*, All*, byte*)"/>
            public static unsafe string GetActiveVarying(int program, uint index, int bufSize, ref int length, ref int size, ref All type)
            {
                string name;
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (All* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveVarying(int, uint, int, int*, int*, All*, byte*)"/>
            public static unsafe void GetActiveVarying(int program, uint index, int bufSize, ref int length, ref int size, ref All type, out string name)
            {
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (All* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int*)"/>
            public static unsafe void GetTransformFeedbackVarying(int program, uint index, Span<int> location)
            {
                fixed (int* location_ptr = location)
                {
                    GetTransformFeedbackVarying(program, index, location_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int*)"/>
            public static unsafe void GetTransformFeedbackVarying(int program, uint index, int[] location)
            {
                fixed (int* location_ptr = location)
                {
                    GetTransformFeedbackVarying(program, index, location_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int*)"/>
            public static unsafe void GetTransformFeedbackVarying(int program, uint index, ref int location)
            {
                fixed (int* location_ptr = &location)
                {
                    GetTransformFeedbackVarying(program, index, location_ptr);
                }
            }
            /// <inheritdoc cref="TransformFeedbackStreamAttribs(int, int*, int, int*, All)"/>
            public static unsafe void TransformFeedbackStreamAttribs(ReadOnlySpan<int> attribs, ReadOnlySpan<int> bufstreams, All bufferMode)
            {
                int count = (int)(attribs.Length);
                fixed (int* attribs_ptr = attribs)
                {
                    int nbuffers = (int)(bufstreams.Length);
                    fixed (int* bufstreams_ptr = bufstreams)
                    {
                        TransformFeedbackStreamAttribs(count, attribs_ptr, nbuffers, bufstreams_ptr, bufferMode);
                    }
                }
            }
            /// <inheritdoc cref="TransformFeedbackStreamAttribs(int, int*, int, int*, All)"/>
            public static unsafe void TransformFeedbackStreamAttribs(int[] attribs, int[] bufstreams, All bufferMode)
            {
                int count = (int)(attribs.Length);
                fixed (int* attribs_ptr = attribs)
                {
                    int nbuffers = (int)(bufstreams.Length);
                    fixed (int* bufstreams_ptr = bufstreams)
                    {
                        TransformFeedbackStreamAttribs(count, attribs_ptr, nbuffers, bufstreams_ptr, bufferMode);
                    }
                }
            }
            /// <inheritdoc cref="TransformFeedbackStreamAttribs(int, int*, int, int*, All)"/>
            public static unsafe void TransformFeedbackStreamAttribs(int count, in int attribs, int nbuffers, in int bufstreams, All bufferMode)
            {
                fixed (int* attribs_ptr = &attribs)
                fixed (int* bufstreams_ptr = &bufstreams)
                {
                    TransformFeedbackStreamAttribs(count, attribs_ptr, nbuffers, bufstreams_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacks(ReadOnlySpan<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    DeleteTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacks(int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    DeleteTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacks(int n, in int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    DeleteTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe void GenTransformFeedbacks(Span<int> ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    GenTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe void GenTransformFeedbacks(int[] ids)
            {
                int n = (int)(ids.Length);
                fixed (int* ids_ptr = ids)
                {
                    GenTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe void GenTransformFeedbacks(int n, ref int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    GenTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUInit(void*, void*)"/>
            public static unsafe void VDPAUInit(IntPtr vdpDevice, IntPtr getProcAddress)
            {
                void* vdpDevice_vptr = (void*)vdpDevice;
                void* getProcAddress_vptr = (void*)getProcAddress;
                VDPAUInit(vdpDevice_vptr, getProcAddress_vptr);
            }
            /// <inheritdoc cref="VDPAUInit(void*, void*)"/>
            public static unsafe void VDPAUInit<T1, T2>(in T1 vdpDevice, in T2 getProcAddress)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* vdpDevice_ptr = &vdpDevice)
                fixed (void* getProcAddress_ptr = &getProcAddress)
                {
                    VDPAUInit(vdpDevice_ptr, getProcAddress_ptr);
                }
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurface(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurface(IntPtr vdpSurface, All target, ReadOnlySpan<uint> textureNames)
            {
                IntPtr returnValue;
                int numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurface(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurface(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurface(IntPtr vdpSurface, All target, uint[] textureNames)
            {
                IntPtr returnValue;
                int numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurface(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurface(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurface(IntPtr vdpSurface, All target, int numTextureNames, in uint textureNames)
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurface(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurface(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurface<T1>(in T1 vdpSurface, All target, ReadOnlySpan<uint> textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                {
                    int numTextureNames = (int)(textureNames.Length);
                    fixed (uint* textureNames_ptr = textureNames)
                    {
                        returnValue = VDPAURegisterVideoSurface(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurface(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurface<T1>(in T1 vdpSurface, All target, uint[] textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                {
                    int numTextureNames = (int)(textureNames.Length);
                    fixed (uint* textureNames_ptr = textureNames)
                    {
                        returnValue = VDPAURegisterVideoSurface(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurface(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurface<T1>(in T1 vdpSurface, All target, int numTextureNames, in uint textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    returnValue = VDPAURegisterVideoSurface(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurface(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurface(IntPtr vdpSurface, All target, ReadOnlySpan<uint> textureNames)
            {
                IntPtr returnValue;
                int numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterOutputSurface(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurface(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurface(IntPtr vdpSurface, All target, uint[] textureNames)
            {
                IntPtr returnValue;
                int numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterOutputSurface(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurface(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurface(IntPtr vdpSurface, All target, int numTextureNames, in uint textureNames)
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterOutputSurface(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurface(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurface<T1>(in T1 vdpSurface, All target, ReadOnlySpan<uint> textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                {
                    int numTextureNames = (int)(textureNames.Length);
                    fixed (uint* textureNames_ptr = textureNames)
                    {
                        returnValue = VDPAURegisterOutputSurface(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurface(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurface<T1>(in T1 vdpSurface, All target, uint[] textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                {
                    int numTextureNames = (int)(textureNames.Length);
                    fixed (uint* textureNames_ptr = textureNames)
                    {
                        returnValue = VDPAURegisterOutputSurface(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurface(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurface<T1>(in T1 vdpSurface, All target, int numTextureNames, in uint textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    returnValue = VDPAURegisterOutputSurface(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAUGetSurfaceiv(IntPtr, All, int, int*, int*)"/>
            public static unsafe void VDPAUGetSurfaceiv(IntPtr surface, All pname, ref int length, Span<int> values)
            {
                fixed (int* length_ptr = &length)
                {
                    int count = (int)(values.Length);
                    fixed (int* values_ptr = values)
                    {
                        VDPAUGetSurfaceiv(surface, pname, count, length_ptr, values_ptr);
                    }
                }
            }
            /// <inheritdoc cref="VDPAUGetSurfaceiv(IntPtr, All, int, int*, int*)"/>
            public static unsafe void VDPAUGetSurfaceiv(IntPtr surface, All pname, ref int length, int[] values)
            {
                fixed (int* length_ptr = &length)
                {
                    int count = (int)(values.Length);
                    fixed (int* values_ptr = values)
                    {
                        VDPAUGetSurfaceiv(surface, pname, count, length_ptr, values_ptr);
                    }
                }
            }
            /// <inheritdoc cref="VDPAUGetSurfaceiv(IntPtr, All, int, int*, int*)"/>
            public static unsafe void VDPAUGetSurfaceiv(IntPtr surface, All pname, int count, ref int length, ref int values)
            {
                fixed (int* length_ptr = &length)
                fixed (int* values_ptr = &values)
                {
                    VDPAUGetSurfaceiv(surface, pname, count, length_ptr, values_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUMapSurfaces(int, IntPtr*)"/>
            public static unsafe void VDPAUMapSurfaces(ReadOnlySpan<IntPtr> surfaces)
            {
                int numSurfaces = (int)(surfaces.Length);
                fixed (IntPtr* surfaces_ptr = surfaces)
                {
                    VDPAUMapSurfaces(numSurfaces, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUMapSurfaces(int, IntPtr*)"/>
            public static unsafe void VDPAUMapSurfaces(IntPtr[] surfaces)
            {
                int numSurfaces = (int)(surfaces.Length);
                fixed (IntPtr* surfaces_ptr = surfaces)
                {
                    VDPAUMapSurfaces(numSurfaces, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUMapSurfaces(int, IntPtr*)"/>
            public static unsafe void VDPAUMapSurfaces(int numSurfaces, in IntPtr surfaces)
            {
                fixed (IntPtr* surfaces_ptr = &surfaces)
                {
                    VDPAUMapSurfaces(numSurfaces, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUUnmapSurfaces(int, IntPtr*)"/>
            public static unsafe void VDPAUUnmapSurfaces(ReadOnlySpan<IntPtr> surfaces)
            {
                int numSurface = (int)(surfaces.Length);
                fixed (IntPtr* surfaces_ptr = surfaces)
                {
                    VDPAUUnmapSurfaces(numSurface, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUUnmapSurfaces(int, IntPtr*)"/>
            public static unsafe void VDPAUUnmapSurfaces(IntPtr[] surfaces)
            {
                int numSurface = (int)(surfaces.Length);
                fixed (IntPtr* surfaces_ptr = surfaces)
                {
                    VDPAUUnmapSurfaces(numSurface, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUUnmapSurfaces(int, IntPtr*)"/>
            public static unsafe void VDPAUUnmapSurfaces(int numSurface, in IntPtr surfaces)
            {
                fixed (IntPtr* surfaces_ptr = &surfaces)
                {
                    VDPAUUnmapSurfaces(numSurface, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructure(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructure(IntPtr vdpSurface, All target, ReadOnlySpan<uint> textureNames, bool isFrameStructure)
            {
                IntPtr returnValue;
                int numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurfaceWithPictureStructure(vdpSurface_vptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructure(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructure(IntPtr vdpSurface, All target, uint[] textureNames, bool isFrameStructure)
            {
                IntPtr returnValue;
                int numTextureNames = (int)(textureNames.Length);
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurfaceWithPictureStructure(vdpSurface_vptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructure(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructure(IntPtr vdpSurface, All target, int numTextureNames, in uint textureNames, bool isFrameStructure)
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurfaceWithPictureStructure(vdpSurface_vptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructure(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructure<T1>(in T1 vdpSurface, All target, ReadOnlySpan<uint> textureNames, bool isFrameStructure)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                {
                    int numTextureNames = (int)(textureNames.Length);
                    fixed (uint* textureNames_ptr = textureNames)
                    {
                        returnValue = VDPAURegisterVideoSurfaceWithPictureStructure(vdpSurface_ptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructure(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructure<T1>(in T1 vdpSurface, All target, uint[] textureNames, bool isFrameStructure)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                {
                    int numTextureNames = (int)(textureNames.Length);
                    fixed (uint* textureNames_ptr = textureNames)
                    {
                        returnValue = VDPAURegisterVideoSurfaceWithPictureStructure(vdpSurface_ptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructure(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructure<T1>(in T1 vdpSurface, All target, int numTextureNames, in uint textureNames, bool isFrameStructure)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    returnValue = VDPAURegisterVideoSurfaceWithPictureStructure(vdpSurface_ptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VertexArrayRange(int, void*)"/>
            public static unsafe void VertexArrayRange(int length, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexArrayRange(length, pointer_vptr);
            }
            /// <inheritdoc cref="VertexArrayRange(int, void*)"/>
            public static unsafe void VertexArrayRange<T1>(int length, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexArrayRange(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRange(int, void*)"/>
            public static unsafe void VertexArrayRange<T1>(int length, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexArrayRange(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRange(int, void*)"/>
            public static unsafe void VertexArrayRange<T1>(int length, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexArrayRange(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1i64v(uint, long*)"/>
            public static unsafe void VertexAttribL1i64v(uint index, ReadOnlySpan<long> v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL1i64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1i64v(uint, long*)"/>
            public static unsafe void VertexAttribL1i64v(uint index, long[] v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL1i64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1i64v(uint, long*)"/>
            public static unsafe void VertexAttribL1i64v(uint index, in long v)
            {
                fixed (long* v_ptr = &v)
                {
                    VertexAttribL1i64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2i64v(uint, long*)"/>
            public static unsafe void VertexAttribL2i64v(uint index, ReadOnlySpan<long> v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL2i64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2i64v(uint, long*)"/>
            public static unsafe void VertexAttribL2i64v(uint index, long[] v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL2i64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2i64v(uint, long*)"/>
            public static unsafe void VertexAttribL2i64v(uint index, in long v)
            {
                fixed (long* v_ptr = &v)
                {
                    VertexAttribL2i64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3i64v(uint, long*)"/>
            public static unsafe void VertexAttribL3i64v(uint index, ReadOnlySpan<long> v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL3i64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3i64v(uint, long*)"/>
            public static unsafe void VertexAttribL3i64v(uint index, long[] v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL3i64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3i64v(uint, long*)"/>
            public static unsafe void VertexAttribL3i64v(uint index, in long v)
            {
                fixed (long* v_ptr = &v)
                {
                    VertexAttribL3i64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4i64v(uint, long*)"/>
            public static unsafe void VertexAttribL4i64v(uint index, ReadOnlySpan<long> v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL4i64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4i64v(uint, long*)"/>
            public static unsafe void VertexAttribL4i64v(uint index, long[] v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL4i64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4i64v(uint, long*)"/>
            public static unsafe void VertexAttribL4i64v(uint index, in long v)
            {
                fixed (long* v_ptr = &v)
                {
                    VertexAttribL4i64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1ui64v(uint, ulong*)"/>
            public static unsafe void VertexAttribL1ui64v(uint index, ReadOnlySpan<ulong> v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL1ui64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1ui64v(uint, ulong*)"/>
            public static unsafe void VertexAttribL1ui64v(uint index, ulong[] v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL1ui64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1ui64v(uint, ulong*)"/>
            public static unsafe void VertexAttribL1ui64v(uint index, in ulong v)
            {
                fixed (ulong* v_ptr = &v)
                {
                    VertexAttribL1ui64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2ui64v(uint, ulong*)"/>
            public static unsafe void VertexAttribL2ui64v(uint index, ReadOnlySpan<ulong> v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL2ui64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2ui64v(uint, ulong*)"/>
            public static unsafe void VertexAttribL2ui64v(uint index, ulong[] v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL2ui64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2ui64v(uint, ulong*)"/>
            public static unsafe void VertexAttribL2ui64v(uint index, in ulong v)
            {
                fixed (ulong* v_ptr = &v)
                {
                    VertexAttribL2ui64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3ui64v(uint, ulong*)"/>
            public static unsafe void VertexAttribL3ui64v(uint index, ReadOnlySpan<ulong> v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL3ui64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3ui64v(uint, ulong*)"/>
            public static unsafe void VertexAttribL3ui64v(uint index, ulong[] v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL3ui64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3ui64v(uint, ulong*)"/>
            public static unsafe void VertexAttribL3ui64v(uint index, in ulong v)
            {
                fixed (ulong* v_ptr = &v)
                {
                    VertexAttribL3ui64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4ui64v(uint, ulong*)"/>
            public static unsafe void VertexAttribL4ui64v(uint index, ReadOnlySpan<ulong> v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL4ui64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4ui64v(uint, ulong*)"/>
            public static unsafe void VertexAttribL4ui64v(uint index, ulong[] v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL4ui64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4ui64v(uint, ulong*)"/>
            public static unsafe void VertexAttribL4ui64v(uint index, in ulong v)
            {
                fixed (ulong* v_ptr = &v)
                {
                    VertexAttribL4ui64v(index, v_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLi64v(uint, VertexAttribEnum, long*)"/>
            public static unsafe void GetVertexAttribLi64v(uint index, VertexAttribEnum pname, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetVertexAttribLi64v(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLi64v(uint, VertexAttribEnum, long*)"/>
            public static unsafe void GetVertexAttribLi64v(uint index, VertexAttribEnum pname, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetVertexAttribLi64v(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLi64v(uint, VertexAttribEnum, long*)"/>
            public static unsafe void GetVertexAttribLi64v(uint index, VertexAttribEnum pname, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetVertexAttribLi64v(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLui64v(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe void GetVertexAttribLui64v(uint index, VertexAttribEnum pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetVertexAttribLui64v(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLui64v(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe void GetVertexAttribLui64v(uint index, VertexAttribEnum pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetVertexAttribLui64v(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLui64v(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe void GetVertexAttribLui64v(uint index, VertexAttribEnum pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetVertexAttribLui64v(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64i_v(All, uint, ulong*)"/>
            public static unsafe void GetIntegerui64i_v(All value, uint index, Span<ulong> result)
            {
                fixed (ulong* result_ptr = result)
                {
                    GetIntegerui64i_v(value, index, result_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64i_v(All, uint, ulong*)"/>
            public static unsafe void GetIntegerui64i_v(All value, uint index, ulong[] result)
            {
                fixed (ulong* result_ptr = result)
                {
                    GetIntegerui64i_v(value, index, result_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64i_v(All, uint, ulong*)"/>
            public static unsafe void GetIntegerui64i_v(All value, uint index, ref ulong result)
            {
                fixed (ulong* result_ptr = &result)
                {
                    GetIntegerui64i_v(value, index, result_ptr);
                }
            }
            /// <inheritdoc cref="AreProgramsResident(int, int*, bool*)"/>
            public static unsafe bool AreProgramsResident(int n, ReadOnlySpan<int> programs, Span<bool> residences)
            {
                bool returnValue;
                fixed (int* programs_ptr = programs)
                {
                    fixed (bool* residences_ptr = residences)
                    {
                        returnValue = AreProgramsResident(n, programs_ptr, residences_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AreProgramsResident(int, int*, bool*)"/>
            public static unsafe bool AreProgramsResident(int n, int[] programs, bool[] residences)
            {
                bool returnValue;
                fixed (int* programs_ptr = programs)
                {
                    fixed (bool* residences_ptr = residences)
                    {
                        returnValue = AreProgramsResident(n, programs_ptr, residences_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AreProgramsResident(int, int*, bool*)"/>
            public static unsafe bool AreProgramsResident(int n, in int programs, ref bool residences)
            {
                bool returnValue;
                fixed (int* programs_ptr = &programs)
                fixed (bool* residences_ptr = &residences)
                {
                    returnValue = AreProgramsResident(n, programs_ptr, residences_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="DeletePrograms(int, int*)"/>
            public static unsafe void DeletePrograms(ReadOnlySpan<int> programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    DeletePrograms(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeletePrograms(int, int*)"/>
            public static unsafe void DeletePrograms(int[] programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    DeletePrograms(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeletePrograms(int, int*)"/>
            public static unsafe void DeletePrograms(int n, in int programs)
            {
                fixed (int* programs_ptr = &programs)
                {
                    DeletePrograms(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="ExecuteProgram(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ExecuteProgram(VertexAttribEnumNV target, uint id, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ExecuteProgram(target, id, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ExecuteProgram(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ExecuteProgram(VertexAttribEnumNV target, uint id, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ExecuteProgram(target, id, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ExecuteProgram(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ExecuteProgram(VertexAttribEnumNV target, uint id, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ExecuteProgram(target, id, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GenPrograms(int, int*)"/>
            public static unsafe void GenPrograms(Span<int> programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    GenPrograms(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenPrograms(int, int*)"/>
            public static unsafe void GenPrograms(int[] programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    GenPrograms(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenPrograms(int, int*)"/>
            public static unsafe void GenPrograms(int n, ref int programs)
            {
                fixed (int* programs_ptr = &programs)
                {
                    GenPrograms(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterdv(VertexAttribEnumNV, uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetProgramParameterdv(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramParameterdv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterdv(VertexAttribEnumNV, uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetProgramParameterdv(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramParameterdv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterdv(VertexAttribEnumNV, uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetProgramParameterdv(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetProgramParameterdv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterfv(VertexAttribEnumNV, uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetProgramParameterfv(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramParameterfv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterfv(VertexAttribEnumNV, uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetProgramParameterfv(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramParameterfv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterfv(VertexAttribEnumNV, uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetProgramParameterfv(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetProgramParameterfv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramiv(int, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetProgramiv(int id, VertexAttribEnumNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramiv(int, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetProgramiv(int id, VertexAttribEnumNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramiv(int, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetProgramiv(int id, VertexAttribEnumNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramiv(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramString(int, VertexAttribEnumNV, byte*)"/>
            public static unsafe void GetProgramString(int id, VertexAttribEnumNV pname, Span<byte> program)
            {
                fixed (byte* program_ptr = program)
                {
                    GetProgramString(id, pname, program_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramString(int, VertexAttribEnumNV, byte*)"/>
            public static unsafe void GetProgramString(int id, VertexAttribEnumNV pname, byte[] program)
            {
                fixed (byte* program_ptr = program)
                {
                    GetProgramString(id, pname, program_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramString(int, VertexAttribEnumNV, byte*)"/>
            public static unsafe void GetProgramString(int id, VertexAttribEnumNV pname, ref byte program)
            {
                fixed (byte* program_ptr = &program)
                {
                    GetProgramString(id, pname, program_ptr);
                }
            }
            /// <inheritdoc cref="GetTrackMatrixiv(VertexAttribEnumNV, uint, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetTrackMatrixiv(VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTrackMatrixiv(target, address, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTrackMatrixiv(VertexAttribEnumNV, uint, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetTrackMatrixiv(VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTrackMatrixiv(target, address, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTrackMatrixiv(VertexAttribEnumNV, uint, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetTrackMatrixiv(VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTrackMatrixiv(target, address, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetVertexAttribdv(uint index, VertexAttribEnumNV pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetVertexAttribdv(uint index, VertexAttribEnumNV pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetVertexAttribdv(uint index, VertexAttribEnumNV pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetVertexAttribdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetVertexAttribfv(uint index, VertexAttribEnumNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribfv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetVertexAttribfv(uint index, VertexAttribEnumNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribfv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetVertexAttribfv(uint index, VertexAttribEnumNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetVertexAttribfv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetVertexAttribiv(uint index, VertexAttribEnumNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribiv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetVertexAttribiv(uint index, VertexAttribEnumNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribiv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetVertexAttribiv(uint index, VertexAttribEnumNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVertexAttribiv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="LoadProgram(VertexAttribEnumNV, uint, int, byte*)"/>
            public static unsafe void LoadProgram(VertexAttribEnumNV target, uint id, ReadOnlySpan<byte> program)
            {
                int len = (int)(program.Length);
                fixed (byte* program_ptr = program)
                {
                    LoadProgram(target, id, len, program_ptr);
                }
            }
            /// <inheritdoc cref="LoadProgram(VertexAttribEnumNV, uint, int, byte*)"/>
            public static unsafe void LoadProgram(VertexAttribEnumNV target, uint id, byte[] program)
            {
                int len = (int)(program.Length);
                fixed (byte* program_ptr = program)
                {
                    LoadProgram(target, id, len, program_ptr);
                }
            }
            /// <inheritdoc cref="LoadProgram(VertexAttribEnumNV, uint, int, byte*)"/>
            public static unsafe void LoadProgram(VertexAttribEnumNV target, uint id, int len, in byte program)
            {
                fixed (byte* program_ptr = &program)
                {
                    LoadProgram(target, id, len, program_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4dv(VertexAttribEnumNV, uint, double*)"/>
            public static unsafe void ProgramParameter4dv(VertexAttribEnumNV target, uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    ProgramParameter4dv(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4dv(VertexAttribEnumNV, uint, double*)"/>
            public static unsafe void ProgramParameter4dv(VertexAttribEnumNV target, uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    ProgramParameter4dv(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4dv(VertexAttribEnumNV, uint, double*)"/>
            public static unsafe void ProgramParameter4dv(VertexAttribEnumNV target, uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    ProgramParameter4dv(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4fv(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ProgramParameter4fv(VertexAttribEnumNV target, uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    ProgramParameter4fv(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4fv(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ProgramParameter4fv(VertexAttribEnumNV target, uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    ProgramParameter4fv(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4fv(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ProgramParameter4fv(VertexAttribEnumNV target, uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    ProgramParameter4fv(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4dv(VertexAttribEnumNV, uint, int, double*)"/>
            public static unsafe void ProgramParameters4dv(VertexAttribEnumNV target, uint index, ReadOnlySpan<double> v)
            {
                int count = (int)(v.Length / 4);
                fixed (double* v_ptr = v)
                {
                    ProgramParameters4dv(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4dv(VertexAttribEnumNV, uint, int, double*)"/>
            public static unsafe void ProgramParameters4dv(VertexAttribEnumNV target, uint index, double[] v)
            {
                int count = (int)(v.Length / 4);
                fixed (double* v_ptr = v)
                {
                    ProgramParameters4dv(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4dv(VertexAttribEnumNV, uint, int, double*)"/>
            public static unsafe void ProgramParameters4dv(VertexAttribEnumNV target, uint index, int count, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    ProgramParameters4dv(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4fv(VertexAttribEnumNV, uint, int, float*)"/>
            public static unsafe void ProgramParameters4fv(VertexAttribEnumNV target, uint index, ReadOnlySpan<float> v)
            {
                int count = (int)(v.Length / 4);
                fixed (float* v_ptr = v)
                {
                    ProgramParameters4fv(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4fv(VertexAttribEnumNV, uint, int, float*)"/>
            public static unsafe void ProgramParameters4fv(VertexAttribEnumNV target, uint index, float[] v)
            {
                int count = (int)(v.Length / 4);
                fixed (float* v_ptr = v)
                {
                    ProgramParameters4fv(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4fv(VertexAttribEnumNV, uint, int, float*)"/>
            public static unsafe void ProgramParameters4fv(VertexAttribEnumNV target, uint index, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    ProgramParameters4fv(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="RequestResidentPrograms(int, int*)"/>
            public static unsafe void RequestResidentPrograms(ReadOnlySpan<int> programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    RequestResidentPrograms(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="RequestResidentPrograms(int, int*)"/>
            public static unsafe void RequestResidentPrograms(int[] programs)
            {
                int n = (int)(programs.Length);
                fixed (int* programs_ptr = programs)
                {
                    RequestResidentPrograms(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="RequestResidentPrograms(int, int*)"/>
            public static unsafe void RequestResidentPrograms(int n, in int programs)
            {
                fixed (int* programs_ptr = &programs)
                {
                    RequestResidentPrograms(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointer(uint, int, VertexAttribEnumNV, int, void*)"/>
            public static unsafe void VertexAttribPointer(uint index, int fsize, VertexAttribEnumNV type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexAttribPointer(index, fsize, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexAttribPointer(uint, int, VertexAttribEnumNV, int, void*)"/>
            public static unsafe void VertexAttribPointer<T1>(uint index, int fsize, VertexAttribEnumNV type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribPointer(index, fsize, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointer(uint, int, VertexAttribEnumNV, int, void*)"/>
            public static unsafe void VertexAttribPointer<T1>(uint index, int fsize, VertexAttribEnumNV type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribPointer(index, fsize, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointer(uint, int, VertexAttribEnumNV, int, void*)"/>
            public static unsafe void VertexAttribPointer<T1>(uint index, int fsize, VertexAttribEnumNV type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexAttribPointer(index, fsize, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1dv(uint, double*)"/>
            public static unsafe void VertexAttrib1dv(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib1dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1dv(uint, double*)"/>
            public static unsafe void VertexAttrib1dv(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib1dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1dv(uint, double*)"/>
            public static unsafe void VertexAttrib1dv(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib1dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1fv(uint, float*)"/>
            public static unsafe void VertexAttrib1fv(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib1fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1fv(uint, float*)"/>
            public static unsafe void VertexAttrib1fv(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib1fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1fv(uint, float*)"/>
            public static unsafe void VertexAttrib1fv(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib1fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1sv(uint, short*)"/>
            public static unsafe void VertexAttrib1sv(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib1sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1sv(uint, short*)"/>
            public static unsafe void VertexAttrib1sv(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib1sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1sv(uint, short*)"/>
            public static unsafe void VertexAttrib1sv(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib1sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dv(uint, double*)"/>
            public static unsafe void VertexAttrib2dv(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib2dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dv(uint, double*)"/>
            public static unsafe void VertexAttrib2dv(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib2dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dv(uint, double*)"/>
            public static unsafe void VertexAttrib2dv(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib2dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
            public static unsafe void VertexAttrib2fv(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib2fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
            public static unsafe void VertexAttrib2fv(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib2fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
            public static unsafe void VertexAttrib2fv(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib2fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2sv(uint, short*)"/>
            public static unsafe void VertexAttrib2sv(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib2sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2sv(uint, short*)"/>
            public static unsafe void VertexAttrib2sv(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib2sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2sv(uint, short*)"/>
            public static unsafe void VertexAttrib2sv(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib2sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dv(uint, double*)"/>
            public static unsafe void VertexAttrib3dv(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib3dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dv(uint, double*)"/>
            public static unsafe void VertexAttrib3dv(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib3dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dv(uint, double*)"/>
            public static unsafe void VertexAttrib3dv(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib3dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
            public static unsafe void VertexAttrib3fv(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib3fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
            public static unsafe void VertexAttrib3fv(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib3fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
            public static unsafe void VertexAttrib3fv(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib3fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3sv(uint, short*)"/>
            public static unsafe void VertexAttrib3sv(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib3sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3sv(uint, short*)"/>
            public static unsafe void VertexAttrib3sv(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib3sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3sv(uint, short*)"/>
            public static unsafe void VertexAttrib3sv(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib3sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dv(uint, double*)"/>
            public static unsafe void VertexAttrib4dv(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib4dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dv(uint, double*)"/>
            public static unsafe void VertexAttrib4dv(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib4dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dv(uint, double*)"/>
            public static unsafe void VertexAttrib4dv(uint index, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib4dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
            public static unsafe void VertexAttrib4fv(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib4fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
            public static unsafe void VertexAttrib4fv(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib4fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
            public static unsafe void VertexAttrib4fv(uint index, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib4fv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4sv(uint, short*)"/>
            public static unsafe void VertexAttrib4sv(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4sv(uint, short*)"/>
            public static unsafe void VertexAttrib4sv(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4sv(uint, short*)"/>
            public static unsafe void VertexAttrib4sv(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib4sv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubv(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubv(uint index, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4ubv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubv(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubv(uint index, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4ubv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubv(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubv(uint index, in byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttrib4ubv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1dv(uint, int, double*)"/>
            public static unsafe void VertexAttribs1dv(uint index, ReadOnlySpan<double> v)
            {
                int count = (int)(v.Length);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs1dv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1dv(uint, int, double*)"/>
            public static unsafe void VertexAttribs1dv(uint index, double[] v)
            {
                int count = (int)(v.Length);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs1dv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1dv(uint, int, double*)"/>
            public static unsafe void VertexAttribs1dv(uint index, int count, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribs1dv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1fv(uint, int, float*)"/>
            public static unsafe void VertexAttribs1fv(uint index, ReadOnlySpan<float> v)
            {
                int count = (int)(v.Length);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs1fv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1fv(uint, int, float*)"/>
            public static unsafe void VertexAttribs1fv(uint index, float[] v)
            {
                int count = (int)(v.Length);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs1fv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1fv(uint, int, float*)"/>
            public static unsafe void VertexAttribs1fv(uint index, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttribs1fv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1sv(uint, int, short*)"/>
            public static unsafe void VertexAttribs1sv(uint index, ReadOnlySpan<short> v)
            {
                int count = (int)(v.Length);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs1sv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1sv(uint, int, short*)"/>
            public static unsafe void VertexAttribs1sv(uint index, short[] v)
            {
                int count = (int)(v.Length);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs1sv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1sv(uint, int, short*)"/>
            public static unsafe void VertexAttribs1sv(uint index, int count, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribs1sv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2dv(uint, int, double*)"/>
            public static unsafe void VertexAttribs2dv(uint index, ReadOnlySpan<double> v)
            {
                int count = (int)(v.Length / 2);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs2dv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2dv(uint, int, double*)"/>
            public static unsafe void VertexAttribs2dv(uint index, double[] v)
            {
                int count = (int)(v.Length / 2);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs2dv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2dv(uint, int, double*)"/>
            public static unsafe void VertexAttribs2dv(uint index, int count, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribs2dv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2fv(uint, int, float*)"/>
            public static unsafe void VertexAttribs2fv(uint index, ReadOnlySpan<float> v)
            {
                int count = (int)(v.Length / 2);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs2fv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2fv(uint, int, float*)"/>
            public static unsafe void VertexAttribs2fv(uint index, float[] v)
            {
                int count = (int)(v.Length / 2);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs2fv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2fv(uint, int, float*)"/>
            public static unsafe void VertexAttribs2fv(uint index, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttribs2fv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2sv(uint, int, short*)"/>
            public static unsafe void VertexAttribs2sv(uint index, ReadOnlySpan<short> v)
            {
                int count = (int)(v.Length / 2);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs2sv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2sv(uint, int, short*)"/>
            public static unsafe void VertexAttribs2sv(uint index, short[] v)
            {
                int count = (int)(v.Length / 2);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs2sv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2sv(uint, int, short*)"/>
            public static unsafe void VertexAttribs2sv(uint index, int count, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribs2sv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3dv(uint, int, double*)"/>
            public static unsafe void VertexAttribs3dv(uint index, ReadOnlySpan<double> v)
            {
                int count = (int)(v.Length / 3);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs3dv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3dv(uint, int, double*)"/>
            public static unsafe void VertexAttribs3dv(uint index, double[] v)
            {
                int count = (int)(v.Length / 3);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs3dv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3dv(uint, int, double*)"/>
            public static unsafe void VertexAttribs3dv(uint index, int count, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribs3dv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3fv(uint, int, float*)"/>
            public static unsafe void VertexAttribs3fv(uint index, ReadOnlySpan<float> v)
            {
                int count = (int)(v.Length / 3);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs3fv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3fv(uint, int, float*)"/>
            public static unsafe void VertexAttribs3fv(uint index, float[] v)
            {
                int count = (int)(v.Length / 3);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs3fv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3fv(uint, int, float*)"/>
            public static unsafe void VertexAttribs3fv(uint index, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttribs3fv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3sv(uint, int, short*)"/>
            public static unsafe void VertexAttribs3sv(uint index, ReadOnlySpan<short> v)
            {
                int count = (int)(v.Length / 3);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs3sv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3sv(uint, int, short*)"/>
            public static unsafe void VertexAttribs3sv(uint index, short[] v)
            {
                int count = (int)(v.Length / 3);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs3sv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3sv(uint, int, short*)"/>
            public static unsafe void VertexAttribs3sv(uint index, int count, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribs3sv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4dv(uint, int, double*)"/>
            public static unsafe void VertexAttribs4dv(uint index, ReadOnlySpan<double> v)
            {
                int count = (int)(v.Length / 4);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs4dv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4dv(uint, int, double*)"/>
            public static unsafe void VertexAttribs4dv(uint index, double[] v)
            {
                int count = (int)(v.Length / 4);
                fixed (double* v_ptr = v)
                {
                    VertexAttribs4dv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4dv(uint, int, double*)"/>
            public static unsafe void VertexAttribs4dv(uint index, int count, in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribs4dv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4fv(uint, int, float*)"/>
            public static unsafe void VertexAttribs4fv(uint index, ReadOnlySpan<float> v)
            {
                int count = (int)(v.Length / 4);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs4fv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4fv(uint, int, float*)"/>
            public static unsafe void VertexAttribs4fv(uint index, float[] v)
            {
                int count = (int)(v.Length / 4);
                fixed (float* v_ptr = v)
                {
                    VertexAttribs4fv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4fv(uint, int, float*)"/>
            public static unsafe void VertexAttribs4fv(uint index, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttribs4fv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4sv(uint, int, short*)"/>
            public static unsafe void VertexAttribs4sv(uint index, ReadOnlySpan<short> v)
            {
                int count = (int)(v.Length / 4);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs4sv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4sv(uint, int, short*)"/>
            public static unsafe void VertexAttribs4sv(uint index, short[] v)
            {
                int count = (int)(v.Length / 4);
                fixed (short* v_ptr = v)
                {
                    VertexAttribs4sv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4sv(uint, int, short*)"/>
            public static unsafe void VertexAttribs4sv(uint index, int count, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribs4sv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4ubv(uint, int, byte*)"/>
            public static unsafe void VertexAttribs4ubv(uint index, ReadOnlySpan<byte> v)
            {
                int count = (int)(v.Length / 4);
                fixed (byte* v_ptr = v)
                {
                    VertexAttribs4ubv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4ubv(uint, int, byte*)"/>
            public static unsafe void VertexAttribs4ubv(uint index, byte[] v)
            {
                int count = (int)(v.Length / 4);
                fixed (byte* v_ptr = v)
                {
                    VertexAttribs4ubv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4ubv(uint, int, byte*)"/>
            public static unsafe void VertexAttribs4ubv(uint index, int count, in byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttribs4ubv(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI1ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI1ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI1ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI1ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI1ivEXT(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI1ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI2ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI2ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI2ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI2ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI2ivEXT(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI2ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI3ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI3ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI3ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI3ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI3ivEXT(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI3ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI4ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI4ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI4ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI4ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI4ivEXT(uint index, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI4ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI1uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI1uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI1uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI1uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI1uivEXT(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI1uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI2uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI2uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI2uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI2uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI2uivEXT(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI2uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI3uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI3uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI3uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI3uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI3uivEXT(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI3uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI4uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI4uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI4uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI4uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI4uivEXT(uint index, in uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI4uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bvEXT(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bvEXT(uint index, ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttribI4bvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bvEXT(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bvEXT(uint index, sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttribI4bvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bvEXT(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bvEXT(uint index, in sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    VertexAttribI4bvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4svEXT(uint, short*)"/>
            public static unsafe void VertexAttribI4svEXT(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribI4svEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4svEXT(uint, short*)"/>
            public static unsafe void VertexAttribI4svEXT(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribI4svEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4svEXT(uint, short*)"/>
            public static unsafe void VertexAttribI4svEXT(uint index, in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribI4svEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubvEXT(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubvEXT(uint index, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttribI4ubvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubvEXT(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubvEXT(uint index, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttribI4ubvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubvEXT(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubvEXT(uint index, in byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttribI4ubvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usvEXT(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usvEXT(uint index, ReadOnlySpan<ushort> v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttribI4usvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usvEXT(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usvEXT(uint index, ushort[] v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttribI4usvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usvEXT(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usvEXT(uint index, in ushort v)
            {
                fixed (ushort* v_ptr = &v)
                {
                    VertexAttribI4usvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT(uint index, int size, VertexAttribIType type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexAttribIPointerEXT(index, size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT<T1>(uint index, int size, VertexAttribIType type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT<T1>(uint index, int size, VertexAttribIType type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT<T1>(uint index, int size, VertexAttribIType type, int stride, in T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIivEXT(uint, VertexAttribEnum, int*)"/>
            public static unsafe void GetVertexAttribIivEXT(uint index, VertexAttribEnum pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribIivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIivEXT(uint, VertexAttribEnum, int*)"/>
            public static unsafe void GetVertexAttribIivEXT(uint index, VertexAttribEnum pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribIivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIivEXT(uint, VertexAttribEnum, int*)"/>
            public static unsafe void GetVertexAttribIivEXT(uint index, VertexAttribEnum pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVertexAttribIivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIuivEXT(uint, VertexAttribEnum, uint*)"/>
            public static unsafe void GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetVertexAttribIuivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIuivEXT(uint, VertexAttribEnum, uint*)"/>
            public static unsafe void GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetVertexAttribIuivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIuivEXT(uint, VertexAttribEnum, uint*)"/>
            public static unsafe void GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetVertexAttribIuivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureiv(uint, All, int*)"/>
            public static unsafe void GetVideoCaptureiv(uint video_capture_slot, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoCaptureiv(video_capture_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureiv(uint, All, int*)"/>
            public static unsafe void GetVideoCaptureiv(uint video_capture_slot, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoCaptureiv(video_capture_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureiv(uint, All, int*)"/>
            public static unsafe void GetVideoCaptureiv(uint video_capture_slot, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVideoCaptureiv(video_capture_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamiv(uint, uint, All, int*)"/>
            public static unsafe void GetVideoCaptureStreamiv(uint video_capture_slot, uint stream, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamiv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamiv(uint, uint, All, int*)"/>
            public static unsafe void GetVideoCaptureStreamiv(uint video_capture_slot, uint stream, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamiv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamiv(uint, uint, All, int*)"/>
            public static unsafe void GetVideoCaptureStreamiv(uint video_capture_slot, uint stream, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVideoCaptureStreamiv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamfv(uint, uint, All, float*)"/>
            public static unsafe void GetVideoCaptureStreamfv(uint video_capture_slot, uint stream, All pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamfv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamfv(uint, uint, All, float*)"/>
            public static unsafe void GetVideoCaptureStreamfv(uint video_capture_slot, uint stream, All pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamfv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamfv(uint, uint, All, float*)"/>
            public static unsafe void GetVideoCaptureStreamfv(uint video_capture_slot, uint stream, All pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetVideoCaptureStreamfv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamdv(uint, uint, All, double*)"/>
            public static unsafe void GetVideoCaptureStreamdv(uint video_capture_slot, uint stream, All pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamdv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamdv(uint, uint, All, double*)"/>
            public static unsafe void GetVideoCaptureStreamdv(uint video_capture_slot, uint stream, All pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamdv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamdv(uint, uint, All, double*)"/>
            public static unsafe void GetVideoCaptureStreamdv(uint video_capture_slot, uint stream, All pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetVideoCaptureStreamdv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCapture(uint, uint*, ulong*)"/>
            public static unsafe All VideoCapture(uint video_capture_slot, ref uint sequence_num, ref ulong capture_time)
            {
                All returnValue;
                fixed (uint* sequence_num_ptr = &sequence_num)
                fixed (ulong* capture_time_ptr = &capture_time)
                {
                    returnValue = VideoCapture(video_capture_slot, sequence_num_ptr, capture_time_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VideoCaptureStreamParameteriv(uint, uint, All, int*)"/>
            public static unsafe void VideoCaptureStreamParameteriv(uint video_capture_slot, uint stream, All pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameteriv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameteriv(uint, uint, All, int*)"/>
            public static unsafe void VideoCaptureStreamParameteriv(uint video_capture_slot, uint stream, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameteriv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameteriv(uint, uint, All, int*)"/>
            public static unsafe void VideoCaptureStreamParameteriv(uint video_capture_slot, uint stream, All pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    VideoCaptureStreamParameteriv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterfv(uint, uint, All, float*)"/>
            public static unsafe void VideoCaptureStreamParameterfv(uint video_capture_slot, uint stream, All pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterfv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterfv(uint, uint, All, float*)"/>
            public static unsafe void VideoCaptureStreamParameterfv(uint video_capture_slot, uint stream, All pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterfv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterfv(uint, uint, All, float*)"/>
            public static unsafe void VideoCaptureStreamParameterfv(uint video_capture_slot, uint stream, All pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    VideoCaptureStreamParameterfv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterdv(uint, uint, All, double*)"/>
            public static unsafe void VideoCaptureStreamParameterdv(uint video_capture_slot, uint stream, All pname, ReadOnlySpan<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterdv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterdv(uint, uint, All, double*)"/>
            public static unsafe void VideoCaptureStreamParameterdv(uint video_capture_slot, uint stream, All pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterdv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterdv(uint, uint, All, double*)"/>
            public static unsafe void VideoCaptureStreamParameterdv(uint video_capture_slot, uint stream, All pname, in double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    VideoCaptureStreamParameterdv(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
        }
        public static unsafe partial class GREMEDY
        {
            /// <inheritdoc cref="StringMarker(int, void*)"/>
            public static unsafe void StringMarker(int len, IntPtr str)
            {
                void* str_vptr = (void*)str;
                StringMarker(len, str_vptr);
            }
            /// <inheritdoc cref="StringMarker(int, void*)"/>
            public static unsafe void StringMarker<T1>(ReadOnlySpan<T1> str)
                where T1 : unmanaged
            {
                int len = (int)(str.Length * sizeof(T1));
                fixed (void* str_ptr = str)
                {
                    StringMarker(len, str_ptr);
                }
            }
            /// <inheritdoc cref="StringMarker(int, void*)"/>
            public static unsafe void StringMarker<T1>(T1[] str)
                where T1 : unmanaged
            {
                int len = (int)(str.Length * sizeof(T1));
                fixed (void* str_ptr = str)
                {
                    StringMarker(len, str_ptr);
                }
            }
            /// <inheritdoc cref="StringMarker(int, void*)"/>
            public static unsafe void StringMarker<T1>(int len, in T1 str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = &str)
                {
                    StringMarker(len, str_ptr);
                }
            }
        }
        public static unsafe partial class HP
        {
            /// <inheritdoc cref="ImageTransformParameteriv(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void ImageTransformParameteriv(ImageTransformTargetHP target, ImageTransformPNameHP pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ImageTransformParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameteriv(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void ImageTransformParameteriv(ImageTransformTargetHP target, ImageTransformPNameHP pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ImageTransformParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameteriv(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void ImageTransformParameteriv(ImageTransformTargetHP target, ImageTransformPNameHP pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ImageTransformParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameterfv(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void ImageTransformParameterfv(ImageTransformTargetHP target, ImageTransformPNameHP pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ImageTransformParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameterfv(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void ImageTransformParameterfv(ImageTransformTargetHP target, ImageTransformPNameHP pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ImageTransformParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameterfv(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void ImageTransformParameterfv(ImageTransformTargetHP target, ImageTransformPNameHP pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ImageTransformParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameteriv(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void GetImageTransformParameteriv(ImageTransformTargetHP target, ImageTransformPNameHP pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetImageTransformParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameteriv(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void GetImageTransformParameteriv(ImageTransformTargetHP target, ImageTransformPNameHP pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetImageTransformParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameteriv(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void GetImageTransformParameteriv(ImageTransformTargetHP target, ImageTransformPNameHP pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetImageTransformParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameterfv(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void GetImageTransformParameterfv(ImageTransformTargetHP target, ImageTransformPNameHP pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetImageTransformParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameterfv(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void GetImageTransformParameterfv(ImageTransformTargetHP target, ImageTransformPNameHP pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetImageTransformParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameterfv(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void GetImageTransformParameterfv(ImageTransformTargetHP target, ImageTransformPNameHP pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetImageTransformParameterfv(target, pname, parameters_ptr);
                }
            }
        }
        public static unsafe partial class IBM
        {
            /// <inheritdoc cref="MultiModeDrawArrays(PrimitiveType*, int*, int*, int, int)"/>
            public static unsafe void MultiModeDrawArrays(ReadOnlySpan<PrimitiveType> mode, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int primcount, int modestride)
            {
                fixed (PrimitiveType* mode_ptr = mode)
                {
                    fixed (int* first_ptr = first)
                    {
                        fixed (int* count_ptr = count)
                        {
                            MultiModeDrawArrays(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                        }
                    }
                }
            }
            /// <inheritdoc cref="MultiModeDrawArrays(PrimitiveType*, int*, int*, int, int)"/>
            public static unsafe void MultiModeDrawArrays(PrimitiveType[] mode, int[] first, int[] count, int primcount, int modestride)
            {
                fixed (PrimitiveType* mode_ptr = mode)
                {
                    fixed (int* first_ptr = first)
                    {
                        fixed (int* count_ptr = count)
                        {
                            MultiModeDrawArrays(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                        }
                    }
                }
            }
            /// <inheritdoc cref="MultiModeDrawArrays(PrimitiveType*, int*, int*, int, int)"/>
            public static unsafe void MultiModeDrawArrays(in PrimitiveType mode, in int first, in int count, int primcount, int modestride)
            {
                fixed (PrimitiveType* mode_ptr = &mode)
                fixed (int* first_ptr = &first)
                fixed (int* count_ptr = &count)
                {
                    MultiModeDrawArrays(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                }
            }
            /// <inheritdoc cref="MultiModeDrawElements(PrimitiveType*, int*, DrawElementsType, void**, int, int)"/>
            public static unsafe void MultiModeDrawElements(ReadOnlySpan<PrimitiveType> mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int primcount, int modestride)
            {
                fixed (PrimitiveType* mode_ptr = mode)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiModeDrawElements(mode_ptr, count_ptr, type, indices, primcount, modestride);
                    }
                }
            }
            /// <inheritdoc cref="MultiModeDrawElements(PrimitiveType*, int*, DrawElementsType, void**, int, int)"/>
            public static unsafe void MultiModeDrawElements(PrimitiveType[] mode, int[] count, DrawElementsType type, void** indices, int primcount, int modestride)
            {
                fixed (PrimitiveType* mode_ptr = mode)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiModeDrawElements(mode_ptr, count_ptr, type, indices, primcount, modestride);
                    }
                }
            }
            /// <inheritdoc cref="MultiModeDrawElements(PrimitiveType*, int*, DrawElementsType, void**, int, int)"/>
            public static unsafe void MultiModeDrawElements(in PrimitiveType mode, in int count, DrawElementsType type, void** indices, int primcount, int modestride)
            {
                fixed (PrimitiveType* mode_ptr = &mode)
                fixed (int* count_ptr = &count)
                {
                    MultiModeDrawElements(mode_ptr, count_ptr, type, indices, primcount, modestride);
                }
            }
        }
        public static unsafe partial class INGR
        {
        }
        public static unsafe partial class INTEL
        {
            /// <inheritdoc cref="MapTexture2D(int, int, uint, int*, All*)"/>
            public static unsafe void* MapTexture2D(int texture, int level, uint access, Span<int> stride, Span<All> layout)
            {
                void* returnValue;
                fixed (int* stride_ptr = stride)
                {
                    fixed (All* layout_ptr = layout)
                    {
                        returnValue = MapTexture2D(texture, level, access, stride_ptr, layout_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="MapTexture2D(int, int, uint, int*, All*)"/>
            public static unsafe void* MapTexture2D(int texture, int level, uint access, int[] stride, All[] layout)
            {
                void* returnValue;
                fixed (int* stride_ptr = stride)
                {
                    fixed (All* layout_ptr = layout)
                    {
                        returnValue = MapTexture2D(texture, level, access, stride_ptr, layout_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="MapTexture2D(int, int, uint, int*, All*)"/>
            public static unsafe void* MapTexture2D(int texture, int level, uint access, ref int stride, ref All layout)
            {
                void* returnValue;
                fixed (int* stride_ptr = &stride)
                fixed (All* layout_ptr = &layout)
                {
                    returnValue = MapTexture2D(texture, level, access, stride_ptr, layout_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="CreatePerfQuery(uint, uint*)"/>
            public static unsafe void CreatePerfQuery(uint queryId, ref uint queryHandle)
            {
                fixed (uint* queryHandle_ptr = &queryHandle)
                {
                    CreatePerfQuery(queryId, queryHandle_ptr);
                }
            }
            /// <inheritdoc cref="GetFirstPerfQueryId(uint*)"/>
            public static unsafe void GetFirstPerfQueryId(ref uint queryId)
            {
                fixed (uint* queryId_ptr = &queryId)
                {
                    GetFirstPerfQueryId(queryId_ptr);
                }
            }
            /// <inheritdoc cref="GetNextPerfQueryId(uint, uint*)"/>
            public static unsafe void GetNextPerfQueryId(uint queryId, ref uint nextQueryId)
            {
                fixed (uint* nextQueryId_ptr = &nextQueryId)
                {
                    GetNextPerfQueryId(queryId, nextQueryId_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfCounterInfo(uint, uint, uint, byte*, uint, byte*, uint*, uint*, uint*, uint*, ulong*)"/>
            public static unsafe void GetPerfCounterInfo(uint queryId, uint counterId, uint counterNameLength, out string counterName, uint counterDescLength, out string counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
            {
                fixed (uint* counterOffset_ptr = &counterOffset)
                fixed (uint* counterDataSize_ptr = &counterDataSize)
                fixed (uint* counterTypeEnum_ptr = &counterTypeEnum)
                fixed (uint* counterDataTypeEnum_ptr = &counterDataTypeEnum)
                fixed (ulong* rawCounterMaxValue_ptr = &rawCounterMaxValue)
                {
                    var counterName_ptr = (byte*)Marshal.AllocCoTaskMem((int)counterNameLength);
                    var counterDesc_ptr = (byte*)Marshal.AllocCoTaskMem((int)counterDescLength);
                    GetPerfCounterInfo(queryId, counterId, counterNameLength, counterName_ptr, counterDescLength, counterDesc_ptr, counterOffset_ptr, counterDataSize_ptr, counterTypeEnum_ptr, counterDataTypeEnum_ptr, rawCounterMaxValue_ptr);
                    counterDesc = Marshal.PtrToStringUTF8((IntPtr)counterDesc_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterDesc_ptr);
                    counterName = Marshal.PtrToStringUTF8((IntPtr)counterName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterName_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryData(uint, uint, int, void*, uint*)"/>
            public static unsafe void GetPerfQueryData(uint queryHandle, uint flags, int dataSize, IntPtr data, ref uint bytesWritten)
            {
                fixed (uint* bytesWritten_ptr = &bytesWritten)
                {
                    void* data_vptr = (void*)data;
                    GetPerfQueryData(queryHandle, flags, dataSize, data_vptr, bytesWritten_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryData(uint, uint, int, void*, uint*)"/>
            public static unsafe void GetPerfQueryData<T1>(uint queryHandle, uint flags, int dataSize, ref T1 data, ref uint bytesWritten)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                fixed (uint* bytesWritten_ptr = &bytesWritten)
                {
                    GetPerfQueryData(queryHandle, flags, dataSize, data_ptr, bytesWritten_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryIdByName(byte*, uint*)"/>
            public static unsafe void GetPerfQueryIdByName(byte* queryName, ref uint queryId)
            {
                fixed (uint* queryId_ptr = &queryId)
                {
                    GetPerfQueryIdByName(queryName, queryId_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryInfo(uint, uint, byte*, uint*, uint*, uint*, PerformanceQueryCapsMaskINTEL*)"/>
            public static unsafe string GetPerfQueryInfo(uint queryId, uint queryNameLength, ref uint dataSize, ref uint noCounters, ref uint noInstances, ref PerformanceQueryCapsMaskINTEL capsMask)
            {
                string queryName;
                fixed (uint* dataSize_ptr = &dataSize)
                fixed (uint* noCounters_ptr = &noCounters)
                fixed (uint* noInstances_ptr = &noInstances)
                fixed (PerformanceQueryCapsMaskINTEL* capsMask_ptr = &capsMask)
                {
                    var queryName_ptr = (byte*)Marshal.AllocCoTaskMem((int)queryNameLength);
                    GetPerfQueryInfo(queryId, queryNameLength, queryName_ptr, dataSize_ptr, noCounters_ptr, noInstances_ptr, capsMask_ptr);
                    queryName = Marshal.PtrToStringUTF8((IntPtr)queryName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)queryName_ptr);
                }
                return queryName;
            }
            /// <inheritdoc cref="GetPerfQueryInfo(uint, uint, byte*, uint*, uint*, uint*, PerformanceQueryCapsMaskINTEL*)"/>
            public static unsafe void GetPerfQueryInfo(uint queryId, uint queryNameLength, out string queryName, ref uint dataSize, ref uint noCounters, ref uint noInstances, ref PerformanceQueryCapsMaskINTEL capsMask)
            {
                fixed (uint* dataSize_ptr = &dataSize)
                fixed (uint* noCounters_ptr = &noCounters)
                fixed (uint* noInstances_ptr = &noInstances)
                fixed (PerformanceQueryCapsMaskINTEL* capsMask_ptr = &capsMask)
                {
                    var queryName_ptr = (byte*)Marshal.AllocCoTaskMem((int)queryNameLength);
                    GetPerfQueryInfo(queryId, queryNameLength, queryName_ptr, dataSize_ptr, noCounters_ptr, noInstances_ptr, capsMask_ptr);
                    queryName = Marshal.PtrToStringUTF8((IntPtr)queryName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)queryName_ptr);
                }
            }
        }
        public static unsafe partial class KHR
        {
            /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, ReadOnlySpan<uint> ids, bool enabled)
            {
                int count = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, uint[] ids, bool enabled)
            {
                int count = (int)(ids.Length);
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, in uint ids, bool enabled)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageInsert(DebugSource, DebugType, uint, DebugSeverity, int, byte*)"/>
            public static unsafe void DebugMessageInsert(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
            {
                byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
                DebugMessageInsert(source, type, id, severity, length, buf_ptr);
                Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
            }
            /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallback(GLDebugProc callback, IntPtr userParam)
            {
                void* userParam_vptr = (void*)userParam;
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallback(callback_ptr, userParam_vptr);
            }
            /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallback<T1>(GLDebugProc callback, in T1 userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = &userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallback(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, Span<DebugSource> sources, Span<DebugType> types, Span<uint> ids, Span<DebugSeverity> severities, Span<int> lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = sources)
                {
                    fixed (DebugType* types_ptr = types)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugSeverity* severities_ptr = severities)
                            {
                                fixed (int* lengths_ptr = lengths)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, DebugSource[] sources, DebugType[] types, uint[] ids, DebugSeverity[] severities, int[] lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = sources)
                {
                    fixed (DebugType* types_ptr = types)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugSeverity* severities_ptr = severities)
                            {
                                fixed (int* lengths_ptr = lengths)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = &sources)
                fixed (DebugType* types_ptr = &types)
                fixed (uint* ids_ptr = &ids)
                fixed (DebugSeverity* severities_ptr = &severities)
                fixed (int* lengths_ptr = &lengths)
                {
                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PushDebugGroup(DebugSource, uint, int, byte*)"/>
            public static unsafe void PushDebugGroup(DebugSource source, uint id, int length, string message)
            {
                byte* message_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(message);
                PushDebugGroup(source, id, length, message_ptr);
                Marshal.FreeCoTaskMem((IntPtr)message_ptr);
            }
            /// <inheritdoc cref="ObjectLabel(ObjectIdentifier, uint, int, byte*)"/>
            public static unsafe void ObjectLabel(ObjectIdentifier identifier, uint name, int length, string label)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                ObjectLabel(identifier, name, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, Span<int> length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, Span<int> length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, int[] length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, int[] length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, ref int length)
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, ref int length, out string label)
            {
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabel(IntPtr ptr, int length, string label)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                void* ptr_vptr = (void*)ptr;
                ObjectPtrLabel(ptr_vptr, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabel<T1>(in T1 ptr, int length, string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                {
                    byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                    ObjectPtrLabel(ptr_ptr, length, label_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel(IntPtr ptr, int bufSize, Span<int> length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, Span<int> length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel(IntPtr ptr, int bufSize, int[] length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, int[] length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel(IntPtr ptr, int bufSize, ref int length)
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, ref int length, out string label)
            {
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, Span<int> length)
                where T1 : unmanaged
            {
                string label;
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, Span<int> length, out string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, int[] length)
                where T1 : unmanaged
            {
                string label;
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, int[] length, out string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, ref int length)
                where T1 : unmanaged
            {
                string label;
                fixed (void* ptr_ptr = &ptr)
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel<T1>(in T1 ptr, int bufSize, ref int length, out string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetPointerv(GetPointervPName, void**)"/>
            public static unsafe void GetPointer(GetPointervPName pname, void** parameters)
            {
                GetPointerv(pname, parameters);
            }
            /// <inheritdoc cref="DebugMessageControlKHR(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControlKHR(DebugSource source, DebugType type, DebugSeverity severity, int count, in uint ids, bool enabled)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    DebugMessageControlKHR(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageInsertKHR(DebugSource, DebugType, uint, DebugSeverity, int, byte*)"/>
            public static unsafe void DebugMessageInsertKHR(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
            {
                byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
                DebugMessageInsertKHR(source, type, id, severity, length, buf_ptr);
                Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
            }
            /// <inheritdoc cref="DebugMessageCallbackKHR(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackKHR(GLDebugProcKHR callback, IntPtr userParam)
            {
                void* userParam_vptr = (void*)userParam;
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallbackKHR(callback_ptr, userParam_vptr);
            }
            /// <inheritdoc cref="DebugMessageCallbackKHR(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackKHR<T1>(GLDebugProcKHR callback, in T1 userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = &userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallbackKHR(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="GetDebugMessageLogKHR(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogKHR(uint count, int bufSize, Span<DebugSource> sources, Span<DebugType> types, Span<uint> ids, Span<DebugSeverity> severities, Span<int> lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = sources)
                {
                    fixed (DebugType* types_ptr = types)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugSeverity* severities_ptr = severities)
                            {
                                fixed (int* lengths_ptr = lengths)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLogKHR(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogKHR(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogKHR(uint count, int bufSize, DebugSource[] sources, DebugType[] types, uint[] ids, DebugSeverity[] severities, int[] lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = sources)
                {
                    fixed (DebugType* types_ptr = types)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugSeverity* severities_ptr = severities)
                            {
                                fixed (int* lengths_ptr = lengths)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLogKHR(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogKHR(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogKHR(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = &sources)
                fixed (DebugType* types_ptr = &types)
                fixed (uint* ids_ptr = &ids)
                fixed (DebugSeverity* severities_ptr = &severities)
                fixed (int* lengths_ptr = &lengths)
                {
                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    returnValue = GetDebugMessageLogKHR(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PushDebugGroupKHR(DebugSource, uint, int, byte*)"/>
            public static unsafe void PushDebugGroupKHR(DebugSource source, uint id, int length, string message)
            {
                byte* message_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(message);
                PushDebugGroupKHR(source, id, length, message_ptr);
                Marshal.FreeCoTaskMem((IntPtr)message_ptr);
            }
            /// <inheritdoc cref="ObjectLabelKHR(ObjectIdentifier, uint, int, byte*)"/>
            public static unsafe void ObjectLabelKHR(ObjectIdentifier identifier, uint name, int length, string label)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                ObjectLabelKHR(identifier, name, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            /// <inheritdoc cref="GetObjectLabelKHR(All, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabelKHR(All identifier, uint name, int bufSize, ref int length)
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabelKHR(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabelKHR(All, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabelKHR(All identifier, uint name, int bufSize, ref int length, out string label)
            {
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabelKHR(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="ObjectPtrLabelKHR(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabelKHR(IntPtr ptr, int length, string label)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                void* ptr_vptr = (void*)ptr;
                ObjectPtrLabelKHR(ptr_vptr, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            /// <inheritdoc cref="ObjectPtrLabelKHR(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabelKHR<T1>(in T1 ptr, int length, string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                {
                    byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                    ObjectPtrLabelKHR(ptr_ptr, length, label_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR(IntPtr ptr, int bufSize, Span<int> length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR(IntPtr ptr, int bufSize, Span<int> length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR(IntPtr ptr, int bufSize, int[] length)
            {
                string label;
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR(IntPtr ptr, int bufSize, int[] length, out string label)
            {
                fixed (int* length_ptr = length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR(IntPtr ptr, int bufSize, ref int length)
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR(IntPtr ptr, int bufSize, ref int length, out string label)
            {
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR<T1>(in T1 ptr, int bufSize, Span<int> length)
                where T1 : unmanaged
            {
                string label;
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR<T1>(in T1 ptr, int bufSize, Span<int> length, out string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR<T1>(in T1 ptr, int bufSize, int[] length)
                where T1 : unmanaged
            {
                string label;
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR<T1>(in T1 ptr, int bufSize, int[] length, out string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                {
                    fixed (int* length_ptr = length)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR<T1>(in T1 ptr, int bufSize, ref int length)
                where T1 : unmanaged
            {
                string label;
                fixed (void* ptr_ptr = &ptr)
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR<T1>(in T1 ptr, int bufSize, ref int length, out string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ReadnPixels(x, y, width, height, format, type, bufSize, data_vptr);
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, Span<T1> data)
                where T1 : unmanaged
            {
                int bufSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                int bufSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
            public static unsafe void GetnUniformf(int program, int location, Span<float> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
            public static unsafe void GetnUniformf(int program, int location, float[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
            public static unsafe void GetnUniformf(int program, int location, int bufSize, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetnUniformfv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
            public static unsafe void GetnUniformi(int program, int location, Span<int> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
            public static unsafe void GetnUniformi(int program, int location, int[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
            public static unsafe void GetnUniformi(int program, int location, int bufSize, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetnUniformiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
            public static unsafe void GetnUniformui(int program, int location, Span<uint> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
            public static unsafe void GetnUniformui(int program, int location, uint[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
            public static unsafe void GetnUniformui(int program, int location, int bufSize, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetnUniformuiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixelsKHR(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsKHR(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_vptr);
            }
            /// <inheritdoc cref="ReadnPixelsKHR(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsKHR<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, Span<T1> data)
                where T1 : unmanaged
            {
                int bufSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixelsKHR(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsKHR<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                int bufSize = (int)(data.Length * sizeof(T1));
                fixed (void* data_ptr = data)
                {
                    ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixelsKHR(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsKHR<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfvKHR(int, int, int, float*)"/>
            public static unsafe void GetnUniformfvKHR(int program, int location, Span<float> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfvKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfvKHR(int, int, int, float*)"/>
            public static unsafe void GetnUniformfvKHR(int program, int location, float[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfvKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfvKHR(int, int, int, float*)"/>
            public static unsafe void GetnUniformfvKHR(int program, int location, int bufSize, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetnUniformfvKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformivKHR(int, int, int, int*)"/>
            public static unsafe void GetnUniformivKHR(int program, int location, Span<int> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformivKHR(int, int, int, int*)"/>
            public static unsafe void GetnUniformivKHR(int program, int location, int[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformivKHR(int, int, int, int*)"/>
            public static unsafe void GetnUniformivKHR(int program, int location, int bufSize, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetnUniformivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuivKHR(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuivKHR(int program, int location, Span<uint> parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuivKHR(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuivKHR(int program, int location, uint[] parameters)
            {
                int bufSize = (int)(parameters.Length * 4);
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuivKHR(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuivKHR(int program, int location, int bufSize, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetnUniformuivKHR(program, location, bufSize, parameters_ptr);
                }
            }
        }
        public static unsafe partial class MESA
        {
            /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameteriv(FramebufferTarget target, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameteriv(FramebufferTarget target, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameteriv(FramebufferTarget target, FramebufferAttachmentParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFramebufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dv(double*)"/>
            public static unsafe void WindowPos2dv(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos2dv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dv(double*)"/>
            public static unsafe void WindowPos2dv(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos2dv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dv(double*)"/>
            public static unsafe void WindowPos2dv(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    WindowPos2dv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fv(float*)"/>
            public static unsafe void WindowPos2fv(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos2fv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fv(float*)"/>
            public static unsafe void WindowPos2fv(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos2fv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fv(float*)"/>
            public static unsafe void WindowPos2fv(in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    WindowPos2fv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2iv(int*)"/>
            public static unsafe void WindowPos2iv(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos2iv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2iv(int*)"/>
            public static unsafe void WindowPos2iv(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos2iv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2iv(int*)"/>
            public static unsafe void WindowPos2iv(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    WindowPos2iv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2sv(short*)"/>
            public static unsafe void WindowPos2sv(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos2sv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2sv(short*)"/>
            public static unsafe void WindowPos2sv(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos2sv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2sv(short*)"/>
            public static unsafe void WindowPos2sv(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    WindowPos2sv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dv(double*)"/>
            public static unsafe void WindowPos3dv(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos3dv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dv(double*)"/>
            public static unsafe void WindowPos3dv(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos3dv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dv(double*)"/>
            public static unsafe void WindowPos3dv(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    WindowPos3dv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fv(float*)"/>
            public static unsafe void WindowPos3fv(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos3fv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fv(float*)"/>
            public static unsafe void WindowPos3fv(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos3fv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fv(float*)"/>
            public static unsafe void WindowPos3fv(in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    WindowPos3fv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3iv(int*)"/>
            public static unsafe void WindowPos3iv(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos3iv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3iv(int*)"/>
            public static unsafe void WindowPos3iv(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos3iv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3iv(int*)"/>
            public static unsafe void WindowPos3iv(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    WindowPos3iv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3sv(short*)"/>
            public static unsafe void WindowPos3sv(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos3sv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3sv(short*)"/>
            public static unsafe void WindowPos3sv(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos3sv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3sv(short*)"/>
            public static unsafe void WindowPos3sv(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    WindowPos3sv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4dv(double*)"/>
            public static unsafe void WindowPos4dv(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos4dv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4dv(double*)"/>
            public static unsafe void WindowPos4dv(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos4dv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4dv(double*)"/>
            public static unsafe void WindowPos4dv(in double v)
            {
                fixed (double* v_ptr = &v)
                {
                    WindowPos4dv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4fv(float*)"/>
            public static unsafe void WindowPos4fv(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos4fv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4fv(float*)"/>
            public static unsafe void WindowPos4fv(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos4fv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4fv(float*)"/>
            public static unsafe void WindowPos4fv(in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    WindowPos4fv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4iv(int*)"/>
            public static unsafe void WindowPos4iv(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos4iv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4iv(int*)"/>
            public static unsafe void WindowPos4iv(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos4iv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4iv(int*)"/>
            public static unsafe void WindowPos4iv(in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    WindowPos4iv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4sv(short*)"/>
            public static unsafe void WindowPos4sv(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos4sv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4sv(short*)"/>
            public static unsafe void WindowPos4sv(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos4sv(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4sv(short*)"/>
            public static unsafe void WindowPos4sv(in short v)
            {
                fixed (short* v_ptr = &v)
                {
                    WindowPos4sv(v_ptr);
                }
            }
        }
        public static unsafe partial class NVX
        {
            /// <inheritdoc cref="LGPUNamedBufferSubData(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void LGPUNamedBufferSubData(uint gpuMask, int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                LGPUNamedBufferSubData(gpuMask, buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="LGPUNamedBufferSubData(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void LGPUNamedBufferSubData<T1>(uint gpuMask, int buffer, IntPtr offset, nint size, in T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    LGPUNamedBufferSubData(gpuMask, buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="MulticastViewportArrayv(uint, uint, int, float*)"/>
            public static unsafe void MulticastViewportArrayv(uint gpu, uint first, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    MulticastViewportArrayv(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastViewportArrayv(uint, uint, int, float*)"/>
            public static unsafe void MulticastViewportArrayv(uint gpu, uint first, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    MulticastViewportArrayv(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastViewportArrayv(uint, uint, int, float*)"/>
            public static unsafe void MulticastViewportArrayv(uint gpu, uint first, int count, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MulticastViewportArrayv(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastScissorArrayv(uint, uint, int, int*)"/>
            public static unsafe void MulticastScissorArrayv(uint gpu, uint first, int count, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    MulticastScissorArrayv(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastScissorArrayv(uint, uint, int, int*)"/>
            public static unsafe void MulticastScissorArrayv(uint gpu, uint first, int count, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    MulticastScissorArrayv(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastScissorArrayv(uint, uint, int, int*)"/>
            public static unsafe void MulticastScissorArrayv(uint gpu, uint first, int count, in int v)
            {
                fixed (int* v_ptr = &v)
                {
                    MulticastScissorArrayv(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="AsyncCopyBufferSubData(int, uint*, ulong*, uint, uint, int, int, IntPtr, IntPtr, nint, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyBufferSubData(int waitSemaphoreCount, ReadOnlySpan<uint> waitSemaphoreArray, ReadOnlySpan<ulong> fenceValueArray, uint readGpu, uint writeGpuMask, int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size, int signalSemaphoreCount, ReadOnlySpan<uint> signalSemaphoreArray, ReadOnlySpan<ulong> signalValueArray)
            {
                uint returnValue;
                fixed (uint* waitSemaphoreArray_ptr = waitSemaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        fixed (uint* signalSemaphoreArray_ptr = signalSemaphoreArray)
                        {
                            fixed (ulong* signalValueArray_ptr = signalValueArray)
                            {
                                returnValue = AsyncCopyBufferSubData(waitSemaphoreCount, waitSemaphoreArray_ptr, fenceValueArray_ptr, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AsyncCopyBufferSubData(int, uint*, ulong*, uint, uint, int, int, IntPtr, IntPtr, nint, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyBufferSubData(int waitSemaphoreCount, uint[] waitSemaphoreArray, ulong[] fenceValueArray, uint readGpu, uint writeGpuMask, int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size, int signalSemaphoreCount, uint[] signalSemaphoreArray, ulong[] signalValueArray)
            {
                uint returnValue;
                fixed (uint* waitSemaphoreArray_ptr = waitSemaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        fixed (uint* signalSemaphoreArray_ptr = signalSemaphoreArray)
                        {
                            fixed (ulong* signalValueArray_ptr = signalValueArray)
                            {
                                returnValue = AsyncCopyBufferSubData(waitSemaphoreCount, waitSemaphoreArray_ptr, fenceValueArray_ptr, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AsyncCopyBufferSubData(int, uint*, ulong*, uint, uint, int, int, IntPtr, IntPtr, nint, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyBufferSubData(int waitSemaphoreCount, in uint waitSemaphoreArray, in ulong fenceValueArray, uint readGpu, uint writeGpuMask, int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size, int signalSemaphoreCount, in uint signalSemaphoreArray, in ulong signalValueArray)
            {
                uint returnValue;
                fixed (uint* waitSemaphoreArray_ptr = &waitSemaphoreArray)
                fixed (ulong* fenceValueArray_ptr = &fenceValueArray)
                fixed (uint* signalSemaphoreArray_ptr = &signalSemaphoreArray)
                fixed (ulong* signalValueArray_ptr = &signalValueArray)
                {
                    returnValue = AsyncCopyBufferSubData(waitSemaphoreCount, waitSemaphoreArray_ptr, fenceValueArray_ptr, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="AsyncCopyImageSubData(int, uint*, ulong*, uint, uint, uint, All, int, int, int, int, uint, All, int, int, int, int, int, int, int, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyImageSubData(int waitSemaphoreCount, ReadOnlySpan<uint> waitSemaphoreArray, ReadOnlySpan<ulong> waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, All srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, All dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, ReadOnlySpan<uint> signalSemaphoreArray, ReadOnlySpan<ulong> signalValueArray)
            {
                uint returnValue;
                fixed (uint* waitSemaphoreArray_ptr = waitSemaphoreArray)
                {
                    fixed (ulong* waitValueArray_ptr = waitValueArray)
                    {
                        fixed (uint* signalSemaphoreArray_ptr = signalSemaphoreArray)
                        {
                            fixed (ulong* signalValueArray_ptr = signalValueArray)
                            {
                                returnValue = AsyncCopyImageSubData(waitSemaphoreCount, waitSemaphoreArray_ptr, waitValueArray_ptr, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AsyncCopyImageSubData(int, uint*, ulong*, uint, uint, uint, All, int, int, int, int, uint, All, int, int, int, int, int, int, int, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyImageSubData(int waitSemaphoreCount, uint[] waitSemaphoreArray, ulong[] waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, All srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, All dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, uint[] signalSemaphoreArray, ulong[] signalValueArray)
            {
                uint returnValue;
                fixed (uint* waitSemaphoreArray_ptr = waitSemaphoreArray)
                {
                    fixed (ulong* waitValueArray_ptr = waitValueArray)
                    {
                        fixed (uint* signalSemaphoreArray_ptr = signalSemaphoreArray)
                        {
                            fixed (ulong* signalValueArray_ptr = signalValueArray)
                            {
                                returnValue = AsyncCopyImageSubData(waitSemaphoreCount, waitSemaphoreArray_ptr, waitValueArray_ptr, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AsyncCopyImageSubData(int, uint*, ulong*, uint, uint, uint, All, int, int, int, int, uint, All, int, int, int, int, int, int, int, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyImageSubData(int waitSemaphoreCount, in uint waitSemaphoreArray, in ulong waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, All srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, All dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, in uint signalSemaphoreArray, in ulong signalValueArray)
            {
                uint returnValue;
                fixed (uint* waitSemaphoreArray_ptr = &waitSemaphoreArray)
                fixed (ulong* waitValueArray_ptr = &waitValueArray)
                fixed (uint* signalSemaphoreArray_ptr = &signalSemaphoreArray)
                fixed (ulong* signalValueArray_ptr = &signalValueArray)
                {
                    returnValue = AsyncCopyImageSubData(waitSemaphoreCount, waitSemaphoreArray_ptr, waitValueArray_ptr, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="SignalSemaphoreui64(uint, int, uint*, ulong*)"/>
            public static unsafe void SignalSemaphoreui64(uint signalGpu, int fenceObjectCount, ReadOnlySpan<uint> semaphoreArray, ReadOnlySpan<ulong> fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = semaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        SignalSemaphoreui64(signalGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SignalSemaphoreui64(uint, int, uint*, ulong*)"/>
            public static unsafe void SignalSemaphoreui64(uint signalGpu, int fenceObjectCount, uint[] semaphoreArray, ulong[] fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = semaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        SignalSemaphoreui64(signalGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SignalSemaphoreui64(uint, int, uint*, ulong*)"/>
            public static unsafe void SignalSemaphoreui64(uint signalGpu, int fenceObjectCount, in uint semaphoreArray, in ulong fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = &semaphoreArray)
                fixed (ulong* fenceValueArray_ptr = &fenceValueArray)
                {
                    SignalSemaphoreui64(signalGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                }
            }
            /// <inheritdoc cref="WaitSemaphoreui64(uint, int, uint*, ulong*)"/>
            public static unsafe void WaitSemaphoreui64(uint waitGpu, int fenceObjectCount, ReadOnlySpan<uint> semaphoreArray, ReadOnlySpan<ulong> fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = semaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        WaitSemaphoreui64(waitGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="WaitSemaphoreui64(uint, int, uint*, ulong*)"/>
            public static unsafe void WaitSemaphoreui64(uint waitGpu, int fenceObjectCount, uint[] semaphoreArray, ulong[] fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = semaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        WaitSemaphoreui64(waitGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="WaitSemaphoreui64(uint, int, uint*, ulong*)"/>
            public static unsafe void WaitSemaphoreui64(uint waitGpu, int fenceObjectCount, in uint semaphoreArray, in ulong fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = &semaphoreArray)
                fixed (ulong* fenceValueArray_ptr = &fenceValueArray)
                {
                    WaitSemaphoreui64(waitGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                }
            }
            /// <inheritdoc cref="ClientWaitSemaphoreui64(int, uint*, ulong*)"/>
            public static unsafe void ClientWaitSemaphoreui64(int fenceObjectCount, ReadOnlySpan<uint> semaphoreArray, ReadOnlySpan<ulong> fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = semaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        ClientWaitSemaphoreui64(fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ClientWaitSemaphoreui64(int, uint*, ulong*)"/>
            public static unsafe void ClientWaitSemaphoreui64(int fenceObjectCount, uint[] semaphoreArray, ulong[] fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = semaphoreArray)
                {
                    fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                    {
                        ClientWaitSemaphoreui64(fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ClientWaitSemaphoreui64(int, uint*, ulong*)"/>
            public static unsafe void ClientWaitSemaphoreui64(int fenceObjectCount, in uint semaphoreArray, in ulong fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = &semaphoreArray)
                fixed (ulong* fenceValueArray_ptr = &fenceValueArray)
                {
                    ClientWaitSemaphoreui64(fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                }
            }
        }
        public static unsafe partial class OES
        {
            /// <inheritdoc cref="MultiTexCoord1bv(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord1bv(TextureUnit texture, ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord1bv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1bv(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord1bv(TextureUnit texture, sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord1bv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1bv(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord1bv(TextureUnit texture, in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    MultiTexCoord1bv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2bv(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord2bv(TextureUnit texture, ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord2bv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2bv(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord2bv(TextureUnit texture, sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord2bv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2bv(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord2bv(TextureUnit texture, in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    MultiTexCoord2bv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3bv(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord3bv(TextureUnit texture, ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord3bv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3bv(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord3bv(TextureUnit texture, sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord3bv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3bv(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord3bv(TextureUnit texture, in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    MultiTexCoord3bv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4bv(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord4bv(TextureUnit texture, ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord4bv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4bv(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord4bv(TextureUnit texture, sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord4bv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4bv(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord4bv(TextureUnit texture, in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    MultiTexCoord4bv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1bv(sbyte*)"/>
            public static unsafe void TexCoord1bv(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord1bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1bv(sbyte*)"/>
            public static unsafe void TexCoord1bv(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord1bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1bv(sbyte*)"/>
            public static unsafe void TexCoord1bv(in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    TexCoord1bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2bv(sbyte*)"/>
            public static unsafe void TexCoord2bv(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord2bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2bv(sbyte*)"/>
            public static unsafe void TexCoord2bv(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord2bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2bv(sbyte*)"/>
            public static unsafe void TexCoord2bv(in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    TexCoord2bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3bv(sbyte*)"/>
            public static unsafe void TexCoord3bv(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord3bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3bv(sbyte*)"/>
            public static unsafe void TexCoord3bv(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord3bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3bv(sbyte*)"/>
            public static unsafe void TexCoord3bv(in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    TexCoord3bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4bv(sbyte*)"/>
            public static unsafe void TexCoord4bv(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord4bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4bv(sbyte*)"/>
            public static unsafe void TexCoord4bv(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord4bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4bv(sbyte*)"/>
            public static unsafe void TexCoord4bv(in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    TexCoord4bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2bv(sbyte*)"/>
            public static unsafe void Vertex2bv(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex2bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2bv(sbyte*)"/>
            public static unsafe void Vertex2bv(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex2bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2bv(sbyte*)"/>
            public static unsafe void Vertex2bv(in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    Vertex2bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3bv(sbyte*)"/>
            public static unsafe void Vertex3bv(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex3bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3bv(sbyte*)"/>
            public static unsafe void Vertex3bv(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex3bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3bv(sbyte*)"/>
            public static unsafe void Vertex3bv(in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    Vertex3bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4bv(sbyte*)"/>
            public static unsafe void Vertex4bv(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex4bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4bv(sbyte*)"/>
            public static unsafe void Vertex4bv(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex4bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4bv(sbyte*)"/>
            public static unsafe void Vertex4bv(in sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    Vertex4bv(coords_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanex(ClipPlaneName, int*)"/>
            public static unsafe void ClipPlanex(ClipPlaneName plane, ReadOnlySpan<int> equation)
            {
                fixed (int* equation_ptr = equation)
                {
                    ClipPlanex(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanex(ClipPlaneName, int*)"/>
            public static unsafe void ClipPlanex(ClipPlaneName plane, int[] equation)
            {
                fixed (int* equation_ptr = equation)
                {
                    ClipPlanex(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanex(ClipPlaneName, int*)"/>
            public static unsafe void ClipPlanex(ClipPlaneName plane, in int equation)
            {
                fixed (int* equation_ptr = &equation)
                {
                    ClipPlanex(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="Fogxv(FogPName, int*)"/>
            public static unsafe void Fogxv(FogPName pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    Fogxv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="Fogxv(FogPName, int*)"/>
            public static unsafe void Fogxv(FogPName pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    Fogxv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="Fogxv(FogPName, int*)"/>
            public static unsafe void Fogxv(FogPName pname, in int param)
            {
                fixed (int* param_ptr = &param)
                {
                    Fogxv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanex(ClipPlaneName, int*)"/>
            public static unsafe void GetClipPlanex(ClipPlaneName plane, Span<int> equation)
            {
                fixed (int* equation_ptr = equation)
                {
                    GetClipPlanex(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanex(ClipPlaneName, int*)"/>
            public static unsafe void GetClipPlanex(ClipPlaneName plane, int[] equation)
            {
                fixed (int* equation_ptr = equation)
                {
                    GetClipPlanex(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanex(ClipPlaneName, int*)"/>
            public static unsafe void GetClipPlanex(ClipPlaneName plane, ref int equation)
            {
                fixed (int* equation_ptr = &equation)
                {
                    GetClipPlanex(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetFixedv(GetPName, int*)"/>
            public static unsafe void GetFixedv(GetPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFixedv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFixedv(GetPName, int*)"/>
            public static unsafe void GetFixedv(GetPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFixedv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFixedv(GetPName, int*)"/>
            public static unsafe void GetFixedv(GetPName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFixedv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexEnvxv(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetTexEnvxv(TextureEnvTarget target, TextureEnvParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexEnvxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexEnvxv(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetTexEnvxv(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexEnvxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexEnvxv(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetTexEnvxv(TextureEnvTarget target, TextureEnvParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTexEnvxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterxv(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterxv(TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexParameterxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterxv(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterxv(TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexParameterxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterxv(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterxv(TextureTarget target, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTexParameterxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="LightModelxv(LightModelParameter, int*)"/>
            public static unsafe void LightModelxv(LightModelParameter pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    LightModelxv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="LightModelxv(LightModelParameter, int*)"/>
            public static unsafe void LightModelxv(LightModelParameter pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    LightModelxv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="LightModelxv(LightModelParameter, int*)"/>
            public static unsafe void LightModelxv(LightModelParameter pname, in int param)
            {
                fixed (int* param_ptr = &param)
                {
                    LightModelxv(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="Lightxv(LightName, LightParameter, int*)"/>
            public static unsafe void Lightxv(LightName light, LightParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    Lightxv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="Lightxv(LightName, LightParameter, int*)"/>
            public static unsafe void Lightxv(LightName light, LightParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    Lightxv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="Lightxv(LightName, LightParameter, int*)"/>
            public static unsafe void Lightxv(LightName light, LightParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    Lightxv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="LoadMatrixx(int*)"/>
            public static unsafe void LoadMatrixx(ReadOnlySpan<int> m)
            {
                fixed (int* m_ptr = m)
                {
                    LoadMatrixx(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadMatrixx(int*)"/>
            public static unsafe void LoadMatrixx(int[] m)
            {
                fixed (int* m_ptr = m)
                {
                    LoadMatrixx(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadMatrixx(int*)"/>
            public static unsafe void LoadMatrixx(in int m)
            {
                fixed (int* m_ptr = &m)
                {
                    LoadMatrixx(m_ptr);
                }
            }
            /// <inheritdoc cref="Materialxv(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void Materialxv(TriangleFace face, MaterialParameter pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    Materialxv(face, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="Materialxv(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void Materialxv(TriangleFace face, MaterialParameter pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    Materialxv(face, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="Materialxv(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void Materialxv(TriangleFace face, MaterialParameter pname, in int param)
            {
                fixed (int* param_ptr = &param)
                {
                    Materialxv(face, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="MultMatrixx(int*)"/>
            public static unsafe void MultMatrixx(ReadOnlySpan<int> m)
            {
                fixed (int* m_ptr = m)
                {
                    MultMatrixx(m_ptr);
                }
            }
            /// <inheritdoc cref="MultMatrixx(int*)"/>
            public static unsafe void MultMatrixx(int[] m)
            {
                fixed (int* m_ptr = m)
                {
                    MultMatrixx(m_ptr);
                }
            }
            /// <inheritdoc cref="MultMatrixx(int*)"/>
            public static unsafe void MultMatrixx(in int m)
            {
                fixed (int* m_ptr = &m)
                {
                    MultMatrixx(m_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterxv(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameterxv(PointParameterNameARB pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PointParameterxv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterxv(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameterxv(PointParameterNameARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PointParameterxv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterxv(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameterxv(PointParameterNameARB pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    PointParameterxv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexEnvxv(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void TexEnvxv(TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexEnvxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexEnvxv(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void TexEnvxv(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexEnvxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexEnvxv(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void TexEnvxv(TextureEnvTarget target, TextureEnvParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TexEnvxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterxv(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void TexParameterxv(TextureTarget target, GetTextureParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexParameterxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterxv(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void TexParameterxv(TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexParameterxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterxv(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void TexParameterxv(TextureTarget target, GetTextureParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TexParameterxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightxv(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightxv(LightName light, LightParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetLightxv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightxv(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightxv(LightName light, LightParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetLightxv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightxv(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightxv(LightName light, LightParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetLightxv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMaterialxv(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetMaterialxv(TriangleFace face, MaterialParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMaterialxv(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMaterialxv(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetMaterialxv(TriangleFace face, MaterialParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMaterialxv(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMaterialxv(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetMaterialxv(TriangleFace face, MaterialParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMaterialxv(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="Bitmapx(int, int, int, int, int, int, byte*)"/>
            public static unsafe void Bitmapx(int width, int height, int xorig, int yorig, int xmove, int ymove, ReadOnlySpan<byte> bitmap)
            {
                fixed (byte* bitmap_ptr = bitmap)
                {
                    Bitmapx(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
                }
            }
            /// <inheritdoc cref="Bitmapx(int, int, int, int, int, int, byte*)"/>
            public static unsafe void Bitmapx(int width, int height, int xorig, int yorig, int xmove, int ymove, byte[] bitmap)
            {
                fixed (byte* bitmap_ptr = bitmap)
                {
                    Bitmapx(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
                }
            }
            /// <inheritdoc cref="Bitmapx(int, int, int, int, int, int, byte*)"/>
            public static unsafe void Bitmapx(int width, int height, int xorig, int yorig, int xmove, int ymove, in byte bitmap)
            {
                fixed (byte* bitmap_ptr = &bitmap)
                {
                    Bitmapx(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
                }
            }
            /// <inheritdoc cref="Color3xv(int*)"/>
            public static unsafe void Color3xv(ReadOnlySpan<int> components)
            {
                fixed (int* components_ptr = components)
                {
                    Color3xv(components_ptr);
                }
            }
            /// <inheritdoc cref="Color3xv(int*)"/>
            public static unsafe void Color3xv(int[] components)
            {
                fixed (int* components_ptr = components)
                {
                    Color3xv(components_ptr);
                }
            }
            /// <inheritdoc cref="Color3xv(int*)"/>
            public static unsafe void Color3xv(in int components)
            {
                fixed (int* components_ptr = &components)
                {
                    Color3xv(components_ptr);
                }
            }
            /// <inheritdoc cref="Color4xv(int*)"/>
            public static unsafe void Color4xv(ReadOnlySpan<int> components)
            {
                fixed (int* components_ptr = components)
                {
                    Color4xv(components_ptr);
                }
            }
            /// <inheritdoc cref="Color4xv(int*)"/>
            public static unsafe void Color4xv(int[] components)
            {
                fixed (int* components_ptr = components)
                {
                    Color4xv(components_ptr);
                }
            }
            /// <inheritdoc cref="Color4xv(int*)"/>
            public static unsafe void Color4xv(in int components)
            {
                fixed (int* components_ptr = &components)
                {
                    Color4xv(components_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterxv(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameterxv(ConvolutionTargetEXT target, ConvolutionParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameterxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterxv(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameterxv(ConvolutionTargetEXT target, ConvolutionParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameterxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterxv(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameterxv(ConvolutionTargetEXT target, ConvolutionParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ConvolutionParameterxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord1xv(int*)"/>
            public static unsafe void EvalCoord1xv(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    EvalCoord1xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord1xv(int*)"/>
            public static unsafe void EvalCoord1xv(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    EvalCoord1xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord1xv(int*)"/>
            public static unsafe void EvalCoord1xv(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    EvalCoord1xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord2xv(int*)"/>
            public static unsafe void EvalCoord2xv(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    EvalCoord2xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord2xv(int*)"/>
            public static unsafe void EvalCoord2xv(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    EvalCoord2xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord2xv(int*)"/>
            public static unsafe void EvalCoord2xv(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    EvalCoord2xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="FeedbackBufferx(int, All, int*)"/>
            public static unsafe void FeedbackBufferx(All type, ReadOnlySpan<int> buffer)
            {
                int n = (int)(buffer.Length);
                fixed (int* buffer_ptr = buffer)
                {
                    FeedbackBufferx(n, type, buffer_ptr);
                }
            }
            /// <inheritdoc cref="FeedbackBufferx(int, All, int*)"/>
            public static unsafe void FeedbackBufferx(All type, int[] buffer)
            {
                int n = (int)(buffer.Length);
                fixed (int* buffer_ptr = buffer)
                {
                    FeedbackBufferx(n, type, buffer_ptr);
                }
            }
            /// <inheritdoc cref="FeedbackBufferx(int, All, int*)"/>
            public static unsafe void FeedbackBufferx(int n, All type, in int buffer)
            {
                fixed (int* buffer_ptr = &buffer)
                {
                    FeedbackBufferx(n, type, buffer_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterxv(All, All, int*)"/>
            public static unsafe void GetConvolutionParameterxv(All target, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameterxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterxv(All, All, int*)"/>
            public static unsafe void GetConvolutionParameterxv(All target, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameterxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterxv(All, All, int*)"/>
            public static unsafe void GetConvolutionParameterxv(All target, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetConvolutionParameterxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterxv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameterxv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameterxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterxv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameterxv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameterxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterxv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameterxv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetHistogramParameterxv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightx(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightx(LightName light, LightParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetLightx(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightx(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightx(LightName light, LightParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetLightx(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightx(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightx(LightName light, LightParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetLightx(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapxv(MapTarget, GetMapQuery, int*)"/>
            public static unsafe void GetMapxv(MapTarget target, GetMapQuery query, Span<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    GetMapxv(target, query, v_ptr);
                }
            }
            /// <inheritdoc cref="GetMapxv(MapTarget, GetMapQuery, int*)"/>
            public static unsafe void GetMapxv(MapTarget target, GetMapQuery query, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    GetMapxv(target, query, v_ptr);
                }
            }
            /// <inheritdoc cref="GetMapxv(MapTarget, GetMapQuery, int*)"/>
            public static unsafe void GetMapxv(MapTarget target, GetMapQuery query, ref int v)
            {
                fixed (int* v_ptr = &v)
                {
                    GetMapxv(target, query, v_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelMapxv(PixelMap, int, int*)"/>
            public static unsafe void GetPixelMapx(PixelMap map, Span<int> values)
            {
                int size = (int)(values.Length);
                fixed (int* values_ptr = values)
                {
                    GetPixelMapxv(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelMapxv(PixelMap, int, int*)"/>
            public static unsafe void GetPixelMapx(PixelMap map, int[] values)
            {
                int size = (int)(values.Length);
                fixed (int* values_ptr = values)
                {
                    GetPixelMapxv(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelMapxv(PixelMap, int, int*)"/>
            public static unsafe void GetPixelMapx(PixelMap map, int size, ref int values)
            {
                fixed (int* values_ptr = &values)
                {
                    GetPixelMapxv(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetTexGenxv(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetTexGenxv(TextureCoordName coord, TextureGenParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexGenxv(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexGenxv(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetTexGenxv(TextureCoordName coord, TextureGenParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexGenxv(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexGenxv(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetTexGenxv(TextureCoordName coord, TextureGenParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTexGenxv(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexLevelParameterxv(TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTexLevelParameterxv(TextureTarget target, int level, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexLevelParameterxv(target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexLevelParameterxv(TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTexLevelParameterxv(TextureTarget target, int level, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexLevelParameterxv(target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexLevelParameterxv(TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTexLevelParameterxv(TextureTarget target, int level, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTexLevelParameterxv(target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="Indexxv(int*)"/>
            public static unsafe void Indexxv(ReadOnlySpan<int> component)
            {
                fixed (int* component_ptr = component)
                {
                    Indexxv(component_ptr);
                }
            }
            /// <inheritdoc cref="Indexxv(int*)"/>
            public static unsafe void Indexxv(int[] component)
            {
                fixed (int* component_ptr = component)
                {
                    Indexxv(component_ptr);
                }
            }
            /// <inheritdoc cref="Indexxv(int*)"/>
            public static unsafe void Indexxv(in int component)
            {
                fixed (int* component_ptr = &component)
                {
                    Indexxv(component_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixx(int*)"/>
            public static unsafe void LoadTransposeMatrixx(ReadOnlySpan<int> m)
            {
                fixed (int* m_ptr = m)
                {
                    LoadTransposeMatrixx(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixx(int*)"/>
            public static unsafe void LoadTransposeMatrixx(int[] m)
            {
                fixed (int* m_ptr = m)
                {
                    LoadTransposeMatrixx(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixx(int*)"/>
            public static unsafe void LoadTransposeMatrixx(in int m)
            {
                fixed (int* m_ptr = &m)
                {
                    LoadTransposeMatrixx(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixx(int*)"/>
            public static unsafe void MultTransposeMatrixx(ReadOnlySpan<int> m)
            {
                fixed (int* m_ptr = m)
                {
                    MultTransposeMatrixx(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixx(int*)"/>
            public static unsafe void MultTransposeMatrixx(int[] m)
            {
                fixed (int* m_ptr = m)
                {
                    MultTransposeMatrixx(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixx(int*)"/>
            public static unsafe void MultTransposeMatrixx(in int m)
            {
                fixed (int* m_ptr = &m)
                {
                    MultTransposeMatrixx(m_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1xv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord1xv(TextureUnit texture, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord1xv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1xv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord1xv(TextureUnit texture, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord1xv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1xv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord1xv(TextureUnit texture, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    MultiTexCoord1xv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2xv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2xv(TextureUnit texture, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord2xv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2xv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2xv(TextureUnit texture, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord2xv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2xv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2xv(TextureUnit texture, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    MultiTexCoord2xv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3xv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3xv(TextureUnit texture, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord3xv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3xv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3xv(TextureUnit texture, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord3xv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3xv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3xv(TextureUnit texture, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    MultiTexCoord3xv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4xv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4xv(TextureUnit texture, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord4xv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4xv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4xv(TextureUnit texture, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord4xv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4xv(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4xv(TextureUnit texture, in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    MultiTexCoord4xv(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="Normal3xv(int*)"/>
            public static unsafe void Normal3xv(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Normal3xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Normal3xv(int*)"/>
            public static unsafe void Normal3xv(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Normal3xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Normal3xv(int*)"/>
            public static unsafe void Normal3xv(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    Normal3xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="PixelMapx(PixelMap, int, int*)"/>
            public static unsafe void PixelMapx(PixelMap map, ReadOnlySpan<int> values)
            {
                int size = (int)(values.Length);
                fixed (int* values_ptr = values)
                {
                    PixelMapx(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="PixelMapx(PixelMap, int, int*)"/>
            public static unsafe void PixelMapx(PixelMap map, int[] values)
            {
                int size = (int)(values.Length);
                fixed (int* values_ptr = values)
                {
                    PixelMapx(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="PixelMapx(PixelMap, int, int*)"/>
            public static unsafe void PixelMapx(PixelMap map, int size, in int values)
            {
                fixed (int* values_ptr = &values)
                {
                    PixelMapx(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="PrioritizeTexturesx(int, int*, int*)"/>
            public static unsafe void PrioritizeTexturesx(int n, ReadOnlySpan<int> textures, ReadOnlySpan<int> priorities)
            {
                fixed (int* textures_ptr = textures)
                {
                    fixed (int* priorities_ptr = priorities)
                    {
                        PrioritizeTexturesx(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PrioritizeTexturesx(int, int*, int*)"/>
            public static unsafe void PrioritizeTexturesx(int n, int[] textures, int[] priorities)
            {
                fixed (int* textures_ptr = textures)
                {
                    fixed (int* priorities_ptr = priorities)
                    {
                        PrioritizeTexturesx(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PrioritizeTexturesx(int, int*, int*)"/>
            public static unsafe void PrioritizeTexturesx(int n, in int textures, in int priorities)
            {
                fixed (int* textures_ptr = &textures)
                fixed (int* priorities_ptr = &priorities)
                {
                    PrioritizeTexturesx(n, textures_ptr, priorities_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos2xv(int*)"/>
            public static unsafe void RasterPos2xv(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos2xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos2xv(int*)"/>
            public static unsafe void RasterPos2xv(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos2xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos2xv(int*)"/>
            public static unsafe void RasterPos2xv(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    RasterPos2xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos3xv(int*)"/>
            public static unsafe void RasterPos3xv(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos3xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos3xv(int*)"/>
            public static unsafe void RasterPos3xv(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos3xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos3xv(int*)"/>
            public static unsafe void RasterPos3xv(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    RasterPos3xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos4xv(int*)"/>
            public static unsafe void RasterPos4xv(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos4xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos4xv(int*)"/>
            public static unsafe void RasterPos4xv(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos4xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos4xv(int*)"/>
            public static unsafe void RasterPos4xv(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    RasterPos4xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Rectxv(int*, int*)"/>
            public static unsafe void Rectxv(ReadOnlySpan<int> v1, ReadOnlySpan<int> v2)
            {
                fixed (int* v1_ptr = v1)
                {
                    fixed (int* v2_ptr = v2)
                    {
                        Rectxv(v1_ptr, v2_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Rectxv(int*, int*)"/>
            public static unsafe void Rectxv(int[] v1, int[] v2)
            {
                fixed (int* v1_ptr = v1)
                {
                    fixed (int* v2_ptr = v2)
                    {
                        Rectxv(v1_ptr, v2_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Rectxv(int*, int*)"/>
            public static unsafe void Rectxv(in int v1, in int v2)
            {
                fixed (int* v1_ptr = &v1)
                fixed (int* v2_ptr = &v2)
                {
                    Rectxv(v1_ptr, v2_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1xv(int*)"/>
            public static unsafe void TexCoord1xv(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord1xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1xv(int*)"/>
            public static unsafe void TexCoord1xv(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord1xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1xv(int*)"/>
            public static unsafe void TexCoord1xv(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    TexCoord1xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2xv(int*)"/>
            public static unsafe void TexCoord2xv(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord2xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2xv(int*)"/>
            public static unsafe void TexCoord2xv(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord2xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2xv(int*)"/>
            public static unsafe void TexCoord2xv(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    TexCoord2xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3xv(int*)"/>
            public static unsafe void TexCoord3xv(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord3xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3xv(int*)"/>
            public static unsafe void TexCoord3xv(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord3xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3xv(int*)"/>
            public static unsafe void TexCoord3xv(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    TexCoord3xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4xv(int*)"/>
            public static unsafe void TexCoord4xv(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord4xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4xv(int*)"/>
            public static unsafe void TexCoord4xv(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord4xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4xv(int*)"/>
            public static unsafe void TexCoord4xv(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    TexCoord4xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexGenxv(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void TexGenxv(TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexGenxv(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexGenxv(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void TexGenxv(TextureCoordName coord, TextureGenParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexGenxv(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexGenxv(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void TexGenxv(TextureCoordName coord, TextureGenParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TexGenxv(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2xv(int*)"/>
            public static unsafe void Vertex2xv(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex2xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2xv(int*)"/>
            public static unsafe void Vertex2xv(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex2xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2xv(int*)"/>
            public static unsafe void Vertex2xv(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    Vertex2xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3xv(int*)"/>
            public static unsafe void Vertex3xv(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex3xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3xv(int*)"/>
            public static unsafe void Vertex3xv(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex3xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3xv(int*)"/>
            public static unsafe void Vertex3xv(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    Vertex3xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4xv(int*)"/>
            public static unsafe void Vertex4xv(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex4xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4xv(int*)"/>
            public static unsafe void Vertex4xv(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex4xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4xv(int*)"/>
            public static unsafe void Vertex4xv(in int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    Vertex4xv(coords_ptr);
                }
            }
            /// <inheritdoc cref="QueryMatrixx(int*, int*)"/>
            public static unsafe uint QueryMatrixx(Span<int> mantissa, Span<int> exponent)
            {
                uint returnValue;
                fixed (int* mantissa_ptr = mantissa)
                {
                    fixed (int* exponent_ptr = exponent)
                    {
                        returnValue = QueryMatrixx(mantissa_ptr, exponent_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="QueryMatrixx(int*, int*)"/>
            public static unsafe uint QueryMatrixx(int[] mantissa, int[] exponent)
            {
                uint returnValue;
                fixed (int* mantissa_ptr = mantissa)
                {
                    fixed (int* exponent_ptr = exponent)
                    {
                        returnValue = QueryMatrixx(mantissa_ptr, exponent_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="QueryMatrixx(int*, int*)"/>
            public static unsafe uint QueryMatrixx(ref int mantissa, ref int exponent)
            {
                uint returnValue;
                fixed (int* mantissa_ptr = &mantissa)
                fixed (int* exponent_ptr = &exponent)
                {
                    returnValue = QueryMatrixx(mantissa_ptr, exponent_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="ClipPlanef(ClipPlaneName, float*)"/>
            public static unsafe void ClipPlanef(ClipPlaneName plane, ReadOnlySpan<float> equation)
            {
                fixed (float* equation_ptr = equation)
                {
                    ClipPlanef(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanef(ClipPlaneName, float*)"/>
            public static unsafe void ClipPlanef(ClipPlaneName plane, float[] equation)
            {
                fixed (float* equation_ptr = equation)
                {
                    ClipPlanef(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanef(ClipPlaneName, float*)"/>
            public static unsafe void ClipPlanef(ClipPlaneName plane, in float equation)
            {
                fixed (float* equation_ptr = &equation)
                {
                    ClipPlanef(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanef(ClipPlaneName, float*)"/>
            public static unsafe void GetClipPlanef(ClipPlaneName plane, Span<float> equation)
            {
                fixed (float* equation_ptr = equation)
                {
                    GetClipPlanef(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanef(ClipPlaneName, float*)"/>
            public static unsafe void GetClipPlanef(ClipPlaneName plane, float[] equation)
            {
                fixed (float* equation_ptr = equation)
                {
                    GetClipPlanef(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanef(ClipPlaneName, float*)"/>
            public static unsafe void GetClipPlanef(ClipPlaneName plane, ref float equation)
            {
                fixed (float* equation_ptr = &equation)
                {
                    GetClipPlanef(plane, equation_ptr);
                }
            }
        }
        public static unsafe partial class OVR
        {
        }
        public static unsafe partial class PGI
        {
        }
        public static unsafe partial class SGIS
        {
            /// <inheritdoc cref="DetailTexFunc(TextureTarget, int, float*)"/>
            public static unsafe void DetailTexFunc(TextureTarget target, ReadOnlySpan<float> points)
            {
                int n = (int)(points.Length / 2);
                fixed (float* points_ptr = points)
                {
                    DetailTexFunc(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="DetailTexFunc(TextureTarget, int, float*)"/>
            public static unsafe void DetailTexFunc(TextureTarget target, float[] points)
            {
                int n = (int)(points.Length / 2);
                fixed (float* points_ptr = points)
                {
                    DetailTexFunc(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="DetailTexFunc(TextureTarget, int, float*)"/>
            public static unsafe void DetailTexFunc(TextureTarget target, int n, in float points)
            {
                fixed (float* points_ptr = &points)
                {
                    DetailTexFunc(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="GetDetailTexFunc(TextureTarget, float*)"/>
            public static unsafe void GetDetailTexFunc(TextureTarget target, Span<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    GetDetailTexFunc(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetDetailTexFunc(TextureTarget, float*)"/>
            public static unsafe void GetDetailTexFunc(TextureTarget target, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    GetDetailTexFunc(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetDetailTexFunc(TextureTarget, float*)"/>
            public static unsafe void GetDetailTexFunc(TextureTarget target, ref float points)
            {
                fixed (float* points_ptr = &points)
                {
                    GetDetailTexFunc(target, points_ptr);
                }
            }
            /// <inheritdoc cref="FogFunc(int, float*)"/>
            public static unsafe void FogFunc(ReadOnlySpan<float> points)
            {
                int n = (int)(points.Length / 2);
                fixed (float* points_ptr = points)
                {
                    FogFunc(n, points_ptr);
                }
            }
            /// <inheritdoc cref="FogFunc(int, float*)"/>
            public static unsafe void FogFunc(float[] points)
            {
                int n = (int)(points.Length / 2);
                fixed (float* points_ptr = points)
                {
                    FogFunc(n, points_ptr);
                }
            }
            /// <inheritdoc cref="FogFunc(int, float*)"/>
            public static unsafe void FogFunc(int n, in float points)
            {
                fixed (float* points_ptr = &points)
                {
                    FogFunc(n, points_ptr);
                }
            }
            /// <inheritdoc cref="GetFogFunc(float*)"/>
            public static unsafe void GetFogFunc(Span<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    GetFogFunc(points_ptr);
                }
            }
            /// <inheritdoc cref="GetFogFunc(float*)"/>
            public static unsafe void GetFogFunc(float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    GetFogFunc(points_ptr);
                }
            }
            /// <inheritdoc cref="GetFogFunc(float*)"/>
            public static unsafe void GetFogFunc(ref float points)
            {
                fixed (float* points_ptr = &points)
                {
                    GetFogFunc(points_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameteriv(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void PixelTexGenParameteriv(PixelTexGenParameterNameSGIS pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PixelTexGenParameteriv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameteriv(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void PixelTexGenParameteriv(PixelTexGenParameterNameSGIS pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PixelTexGenParameteriv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameteriv(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void PixelTexGenParameteriv(PixelTexGenParameterNameSGIS pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    PixelTexGenParameteriv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameterfv(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void PixelTexGenParameterfv(PixelTexGenParameterNameSGIS pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PixelTexGenParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameterfv(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void PixelTexGenParameterfv(PixelTexGenParameterNameSGIS pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PixelTexGenParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameterfv(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void PixelTexGenParameterfv(PixelTexGenParameterNameSGIS pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    PixelTexGenParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameteriv(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void GetPixelTexGenParameteriv(PixelTexGenParameterNameSGIS pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetPixelTexGenParameteriv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameteriv(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void GetPixelTexGenParameteriv(PixelTexGenParameterNameSGIS pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetPixelTexGenParameteriv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameteriv(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void GetPixelTexGenParameteriv(PixelTexGenParameterNameSGIS pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetPixelTexGenParameteriv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameterfv(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void GetPixelTexGenParameterfv(PixelTexGenParameterNameSGIS pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetPixelTexGenParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameterfv(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void GetPixelTexGenParameterfv(PixelTexGenParameterNameSGIS pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetPixelTexGenParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameterfv(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void GetPixelTexGenParameterfv(PixelTexGenParameterNameSGIS pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetPixelTexGenParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfv(PointParameterNameARB pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfv(PointParameterNameARB pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfv(PointParameterNameARB pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    PointParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SharpenTexFunc(TextureTarget, int, float*)"/>
            public static unsafe void SharpenTexFunc(TextureTarget target, ReadOnlySpan<float> points)
            {
                int n = (int)(points.Length / 2);
                fixed (float* points_ptr = points)
                {
                    SharpenTexFunc(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="SharpenTexFunc(TextureTarget, int, float*)"/>
            public static unsafe void SharpenTexFunc(TextureTarget target, float[] points)
            {
                int n = (int)(points.Length / 2);
                fixed (float* points_ptr = points)
                {
                    SharpenTexFunc(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="SharpenTexFunc(TextureTarget, int, float*)"/>
            public static unsafe void SharpenTexFunc(TextureTarget target, int n, in float points)
            {
                fixed (float* points_ptr = &points)
                {
                    SharpenTexFunc(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="GetSharpenTexFunc(TextureTarget, float*)"/>
            public static unsafe void GetSharpenTexFunc(TextureTarget target, Span<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    GetSharpenTexFunc(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetSharpenTexFunc(TextureTarget, float*)"/>
            public static unsafe void GetSharpenTexFunc(TextureTarget target, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    GetSharpenTexFunc(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetSharpenTexFunc(TextureTarget, float*)"/>
            public static unsafe void GetSharpenTexFunc(TextureTarget target, ref float points)
            {
                fixed (float* points_ptr = &points)
                {
                    GetSharpenTexFunc(target, points_ptr);
                }
            }
            /// <inheritdoc cref="TexImage4D(TextureTarget, int, InternalFormat, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage4D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexImage4D(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexImage4D(TextureTarget, int, InternalFormat, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage4D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexImage4D(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexImage4D(TextureTarget, int, InternalFormat, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage4D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexImage4D(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexImage4D(TextureTarget, int, InternalFormat, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage4D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexImage4D(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage4D(TextureTarget, int, int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage4D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexSubImage4D(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexSubImage4D(TextureTarget, int, int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage4D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage4D(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage4D(TextureTarget, int, int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage4D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage4D(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage4D(TextureTarget, int, int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage4D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, in T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexSubImage4D(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTexFilterFunc(TextureTarget, TextureFilterSGIS, float*)"/>
            public static unsafe void GetTexFilterFunc(TextureTarget target, TextureFilterSGIS filter, Span<float> weights)
            {
                fixed (float* weights_ptr = weights)
                {
                    GetTexFilterFunc(target, filter, weights_ptr);
                }
            }
            /// <inheritdoc cref="GetTexFilterFunc(TextureTarget, TextureFilterSGIS, float*)"/>
            public static unsafe void GetTexFilterFunc(TextureTarget target, TextureFilterSGIS filter, float[] weights)
            {
                fixed (float* weights_ptr = weights)
                {
                    GetTexFilterFunc(target, filter, weights_ptr);
                }
            }
            /// <inheritdoc cref="GetTexFilterFunc(TextureTarget, TextureFilterSGIS, float*)"/>
            public static unsafe void GetTexFilterFunc(TextureTarget target, TextureFilterSGIS filter, ref float weights)
            {
                fixed (float* weights_ptr = &weights)
                {
                    GetTexFilterFunc(target, filter, weights_ptr);
                }
            }
            /// <inheritdoc cref="TexFilterFunc(TextureTarget, TextureFilterSGIS, int, float*)"/>
            public static unsafe void TexFilterFunc(TextureTarget target, TextureFilterSGIS filter, ReadOnlySpan<float> weights)
            {
                int n = (int)(weights.Length);
                fixed (float* weights_ptr = weights)
                {
                    TexFilterFunc(target, filter, n, weights_ptr);
                }
            }
            /// <inheritdoc cref="TexFilterFunc(TextureTarget, TextureFilterSGIS, int, float*)"/>
            public static unsafe void TexFilterFunc(TextureTarget target, TextureFilterSGIS filter, float[] weights)
            {
                int n = (int)(weights.Length);
                fixed (float* weights_ptr = weights)
                {
                    TexFilterFunc(target, filter, n, weights_ptr);
                }
            }
            /// <inheritdoc cref="TexFilterFunc(TextureTarget, TextureFilterSGIS, int, float*)"/>
            public static unsafe void TexFilterFunc(TextureTarget target, TextureFilterSGIS filter, int n, in float weights)
            {
                fixed (float* weights_ptr = &weights)
                {
                    TexFilterFunc(target, filter, n, weights_ptr);
                }
            }
        }
        public static unsafe partial class SGIX
        {
            /// <inheritdoc cref="FinishAsync(uint*)"/>
            public static unsafe int FinishAsync(Span<uint> markerp)
            {
                int returnValue;
                fixed (uint* markerp_ptr = markerp)
                {
                    returnValue = FinishAsync(markerp_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="FinishAsync(uint*)"/>
            public static unsafe int FinishAsync(uint[] markerp)
            {
                int returnValue;
                fixed (uint* markerp_ptr = markerp)
                {
                    returnValue = FinishAsync(markerp_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="FinishAsync(uint*)"/>
            public static unsafe int FinishAsync(ref uint markerp)
            {
                int returnValue;
                fixed (uint* markerp_ptr = &markerp)
                {
                    returnValue = FinishAsync(markerp_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PollAsync(uint*)"/>
            public static unsafe int PollAsync(Span<uint> markerp)
            {
                int returnValue;
                fixed (uint* markerp_ptr = markerp)
                {
                    returnValue = PollAsync(markerp_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PollAsync(uint*)"/>
            public static unsafe int PollAsync(uint[] markerp)
            {
                int returnValue;
                fixed (uint* markerp_ptr = markerp)
                {
                    returnValue = PollAsync(markerp_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PollAsync(uint*)"/>
            public static unsafe int PollAsync(ref uint markerp)
            {
                int returnValue;
                fixed (uint* markerp_ptr = &markerp)
                {
                    returnValue = PollAsync(markerp_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="FragmentLightfv(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void FragmentLightfv(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentLightfv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightfv(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void FragmentLightfv(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentLightfv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightfv(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void FragmentLightfv(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    FragmentLightfv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightiv(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void FragmentLightiv(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentLightiv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightiv(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void FragmentLightiv(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentLightiv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightiv(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void FragmentLightiv(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    FragmentLightiv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModelfv(FragmentLightModelParameterSGIX, float*)"/>
            public static unsafe void FragmentLightModelfv(FragmentLightModelParameterSGIX pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentLightModelfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModelfv(FragmentLightModelParameterSGIX, float*)"/>
            public static unsafe void FragmentLightModelfv(FragmentLightModelParameterSGIX pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentLightModelfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModelfv(FragmentLightModelParameterSGIX, float*)"/>
            public static unsafe void FragmentLightModelfv(FragmentLightModelParameterSGIX pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    FragmentLightModelfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModeliv(FragmentLightModelParameterSGIX, int*)"/>
            public static unsafe void FragmentLightModeliv(FragmentLightModelParameterSGIX pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentLightModeliv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModeliv(FragmentLightModelParameterSGIX, int*)"/>
            public static unsafe void FragmentLightModeliv(FragmentLightModelParameterSGIX pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentLightModeliv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModeliv(FragmentLightModelParameterSGIX, int*)"/>
            public static unsafe void FragmentLightModeliv(FragmentLightModelParameterSGIX pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    FragmentLightModeliv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialfv(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void FragmentMaterialfv(TriangleFace face, MaterialParameter pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentMaterialfv(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialfv(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void FragmentMaterialfv(TriangleFace face, MaterialParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentMaterialfv(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialfv(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void FragmentMaterialfv(TriangleFace face, MaterialParameter pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    FragmentMaterialfv(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialiv(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void FragmentMaterialiv(TriangleFace face, MaterialParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentMaterialiv(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialiv(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void FragmentMaterialiv(TriangleFace face, MaterialParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentMaterialiv(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialiv(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void FragmentMaterialiv(TriangleFace face, MaterialParameter pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    FragmentMaterialiv(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightfv(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void GetFragmentLightfv(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFragmentLightfv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightfv(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void GetFragmentLightfv(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFragmentLightfv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightfv(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void GetFragmentLightfv(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetFragmentLightfv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightiv(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void GetFragmentLightiv(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFragmentLightiv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightiv(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void GetFragmentLightiv(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFragmentLightiv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightiv(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void GetFragmentLightiv(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFragmentLightiv(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialfv(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void GetFragmentMaterialfv(TriangleFace face, MaterialParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFragmentMaterialfv(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialfv(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void GetFragmentMaterialfv(TriangleFace face, MaterialParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFragmentMaterialfv(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialfv(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void GetFragmentMaterialfv(TriangleFace face, MaterialParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetFragmentMaterialfv(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialiv(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetFragmentMaterialiv(TriangleFace face, MaterialParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFragmentMaterialiv(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialiv(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetFragmentMaterialiv(TriangleFace face, MaterialParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFragmentMaterialiv(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialiv(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetFragmentMaterialiv(TriangleFace face, MaterialParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFragmentMaterialiv(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="IglooInterface(All, void*)"/>
            public static unsafe void IglooInterface(All pname, IntPtr parameters)
            {
                void* parameters_vptr = (void*)parameters;
                IglooInterface(pname, parameters_vptr);
            }
            /// <inheritdoc cref="IglooInterface(All, void*)"/>
            public static unsafe void IglooInterface<T1>(All pname, ReadOnlySpan<T1> parameters)
                where T1 : unmanaged
            {
                fixed (void* parameters_ptr = parameters)
                {
                    IglooInterface(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="IglooInterface(All, void*)"/>
            public static unsafe void IglooInterface<T1>(All pname, T1[] parameters)
                where T1 : unmanaged
            {
                fixed (void* parameters_ptr = parameters)
                {
                    IglooInterface(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="IglooInterface(All, void*)"/>
            public static unsafe void IglooInterface<T1>(All pname, in T1 parameters)
                where T1 : unmanaged
            {
                fixed (void* parameters_ptr = &parameters)
                {
                    IglooInterface(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="InstrumentsBuffer(int, int*)"/>
            public static unsafe void InstrumentsBuffer(Span<int> buffer)
            {
                int size = (int)(buffer.Length);
                fixed (int* buffer_ptr = buffer)
                {
                    InstrumentsBuffer(size, buffer_ptr);
                }
            }
            /// <inheritdoc cref="InstrumentsBuffer(int, int*)"/>
            public static unsafe void InstrumentsBuffer(int[] buffer)
            {
                int size = (int)(buffer.Length);
                fixed (int* buffer_ptr = buffer)
                {
                    InstrumentsBuffer(size, buffer_ptr);
                }
            }
            /// <inheritdoc cref="InstrumentsBuffer(int, int*)"/>
            public static unsafe void InstrumentsBuffer(int size, ref int buffer)
            {
                fixed (int* buffer_ptr = &buffer)
                {
                    InstrumentsBuffer(size, buffer_ptr);
                }
            }
            /// <inheritdoc cref="PollInstruments(int*)"/>
            public static unsafe int PollInstruments(Span<int> marker_p)
            {
                int returnValue;
                fixed (int* marker_p_ptr = marker_p)
                {
                    returnValue = PollInstruments(marker_p_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PollInstruments(int*)"/>
            public static unsafe int PollInstruments(int[] marker_p)
            {
                int returnValue;
                fixed (int* marker_p_ptr = marker_p)
                {
                    returnValue = PollInstruments(marker_p_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PollInstruments(int*)"/>
            public static unsafe int PollInstruments(ref int marker_p)
            {
                int returnValue;
                fixed (int* marker_p_ptr = &marker_p)
                {
                    returnValue = PollInstruments(marker_p_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetListParameterfv(int, ListParameterName, float*)"/>
            public static unsafe void GetListParameterfv(int list, ListParameterName pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetListParameterfv(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameterfv(int, ListParameterName, float*)"/>
            public static unsafe void GetListParameterfv(int list, ListParameterName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetListParameterfv(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameterfv(int, ListParameterName, float*)"/>
            public static unsafe void GetListParameterfv(int list, ListParameterName pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetListParameterfv(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameteriv(int, ListParameterName, int*)"/>
            public static unsafe void GetListParameteriv(int list, ListParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetListParameteriv(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameteriv(int, ListParameterName, int*)"/>
            public static unsafe void GetListParameteriv(int list, ListParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetListParameteriv(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameteriv(int, ListParameterName, int*)"/>
            public static unsafe void GetListParameteriv(int list, ListParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetListParameteriv(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameterfv(int, ListParameterName, float*)"/>
            public static unsafe void ListParameterfv(int list, ListParameterName pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ListParameterfv(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameterfv(int, ListParameterName, float*)"/>
            public static unsafe void ListParameterfv(int list, ListParameterName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ListParameterfv(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameterfv(int, ListParameterName, float*)"/>
            public static unsafe void ListParameterfv(int list, ListParameterName pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ListParameterfv(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameteriv(int, ListParameterName, int*)"/>
            public static unsafe void ListParameteriv(int list, ListParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ListParameteriv(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameteriv(int, ListParameterName, int*)"/>
            public static unsafe void ListParameteriv(int list, ListParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ListParameteriv(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameteriv(int, ListParameterName, int*)"/>
            public static unsafe void ListParameteriv(int list, ListParameterName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ListParameteriv(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3d(FfdTargetSGIX, double, double, int, int, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void DeformationMap3d(FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, ReadOnlySpan<double> points)
            {
                fixed (double* points_ptr = points)
                {
                    DeformationMap3d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3d(FfdTargetSGIX, double, double, int, int, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void DeformationMap3d(FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double[] points)
            {
                fixed (double* points_ptr = points)
                {
                    DeformationMap3d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3d(FfdTargetSGIX, double, double, int, int, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void DeformationMap3d(FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, in double points)
            {
                fixed (double* points_ptr = &points)
                {
                    DeformationMap3d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3f(FfdTargetSGIX, float, float, int, int, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void DeformationMap3f(FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, ReadOnlySpan<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    DeformationMap3f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3f(FfdTargetSGIX, float, float, int, int, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void DeformationMap3f(FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    DeformationMap3f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3f(FfdTargetSGIX, float, float, int, int, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void DeformationMap3f(FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, in float points)
            {
                fixed (float* points_ptr = &points)
                {
                    DeformationMap3f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="ReferencePlane(double*)"/>
            public static unsafe void ReferencePlane(ReadOnlySpan<double> equation)
            {
                fixed (double* equation_ptr = equation)
                {
                    ReferencePlane(equation_ptr);
                }
            }
            /// <inheritdoc cref="ReferencePlane(double*)"/>
            public static unsafe void ReferencePlane(double[] equation)
            {
                fixed (double* equation_ptr = equation)
                {
                    ReferencePlane(equation_ptr);
                }
            }
            /// <inheritdoc cref="ReferencePlane(double*)"/>
            public static unsafe void ReferencePlane(in double equation)
            {
                fixed (double* equation_ptr = &equation)
                {
                    ReferencePlane(equation_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameterfv(SpriteParameterNameSGIX, float*)"/>
            public static unsafe void SpriteParameterfv(SpriteParameterNameSGIX pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    SpriteParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameterfv(SpriteParameterNameSGIX, float*)"/>
            public static unsafe void SpriteParameterfv(SpriteParameterNameSGIX pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    SpriteParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameterfv(SpriteParameterNameSGIX, float*)"/>
            public static unsafe void SpriteParameterfv(SpriteParameterNameSGIX pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    SpriteParameterfv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameteriv(SpriteParameterNameSGIX, SpriteModeSGIX*)"/>
            public static unsafe void SpriteParameteriv(SpriteParameterNameSGIX pname, ReadOnlySpan<SpriteModeSGIX> parameters)
            {
                fixed (SpriteModeSGIX* parameters_ptr = parameters)
                {
                    SpriteParameteriv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameteriv(SpriteParameterNameSGIX, SpriteModeSGIX*)"/>
            public static unsafe void SpriteParameteriv(SpriteParameterNameSGIX pname, SpriteModeSGIX[] parameters)
            {
                fixed (SpriteModeSGIX* parameters_ptr = parameters)
                {
                    SpriteParameteriv(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameteriv(SpriteParameterNameSGIX, SpriteModeSGIX*)"/>
            public static unsafe void SpriteParameteriv(SpriteParameterNameSGIX pname, in SpriteModeSGIX parameters)
            {
                fixed (SpriteModeSGIX* parameters_ptr = &parameters)
                {
                    SpriteParameteriv(pname, parameters_ptr);
                }
            }
        }
        public static unsafe partial class SGI
        {
            /// <inheritdoc cref="ColorTable(ColorTableTargetSGI, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable(ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
            {
                void* table_vptr = (void*)table;
                ColorTable(target, internalformat, width, format, type, table_vptr);
            }
            /// <inheritdoc cref="ColorTable(ColorTableTargetSGI, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable<T1>(ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTable(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTable(ColorTableTargetSGI, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable<T1>(ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTable(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTable(ColorTableTargetSGI, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable<T1>(ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, in T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    ColorTable(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterfv(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void ColorTableParameterfv(ColorTableTargetSGI target, ColorTableParameterPName pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterfv(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void ColorTableParameterfv(ColorTableTargetSGI target, ColorTableParameterPName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterfv(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void ColorTableParameterfv(ColorTableTargetSGI target, ColorTableParameterPName pname, in float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameteriv(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameteriv(ColorTableTargetSGI target, ColorTableParameterPName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameteriv(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameteriv(ColorTableTargetSGI target, ColorTableParameterPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameteriv(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameteriv(ColorTableTargetSGI target, ColorTableParameterPName pname, in int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTargetSGI, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable(ColorTableTargetSGI target, PixelFormat format, PixelType type, IntPtr table)
            {
                void* table_vptr = (void*)table;
                GetColorTable(target, format, type, table_vptr);
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTargetSGI, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable<T1>(ColorTableTargetSGI target, PixelFormat format, PixelType type, Span<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    GetColorTable(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTargetSGI, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable<T1>(ColorTableTargetSGI target, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    GetColorTable(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTargetSGI, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable<T1>(ColorTableTargetSGI target, PixelFormat format, PixelType type, ref T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    GetColorTable(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfv(ColorTableTargetSGI target, ColorTableParameterPName pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfv(ColorTableTargetSGI target, ColorTableParameterPName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfv(ColorTableTargetSGI target, ColorTableParameterPName pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameteriv(ColorTableTargetSGI target, ColorTableParameterPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameteriv(ColorTableTargetSGI target, ColorTableParameterPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameteriv(ColorTableTargetSGI target, ColorTableParameterPName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
        }
        public static unsafe partial class SUNX
        {
        }
        public static unsafe partial class SUN
        {
            /// <inheritdoc cref="ReplacementCodeuiv(TriangleListSUN*)"/>
            public static unsafe void ReplacementCodeuiv(ReadOnlySpan<TriangleListSUN> code)
            {
                fixed (TriangleListSUN* code_ptr = code)
                {
                    ReplacementCodeuiv(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiv(TriangleListSUN*)"/>
            public static unsafe void ReplacementCodeuiv(TriangleListSUN[] code)
            {
                fixed (TriangleListSUN* code_ptr = code)
                {
                    ReplacementCodeuiv(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiv(TriangleListSUN*)"/>
            public static unsafe void ReplacementCodeuiv(in TriangleListSUN code)
            {
                fixed (TriangleListSUN* code_ptr = &code)
                {
                    ReplacementCodeuiv(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeusv(ushort*)"/>
            public static unsafe void ReplacementCodeusv(ReadOnlySpan<ushort> code)
            {
                fixed (ushort* code_ptr = code)
                {
                    ReplacementCodeusv(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeusv(ushort*)"/>
            public static unsafe void ReplacementCodeusv(ushort[] code)
            {
                fixed (ushort* code_ptr = code)
                {
                    ReplacementCodeusv(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeusv(ushort*)"/>
            public static unsafe void ReplacementCodeusv(in ushort code)
            {
                fixed (ushort* code_ptr = &code)
                {
                    ReplacementCodeusv(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeubv(byte*)"/>
            public static unsafe void ReplacementCodeubv(ReadOnlySpan<byte> code)
            {
                fixed (byte* code_ptr = code)
                {
                    ReplacementCodeubv(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeubv(byte*)"/>
            public static unsafe void ReplacementCodeubv(byte[] code)
            {
                fixed (byte* code_ptr = code)
                {
                    ReplacementCodeubv(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeubv(byte*)"/>
            public static unsafe void ReplacementCodeubv(in byte code)
            {
                fixed (byte* code_ptr = &code)
                {
                    ReplacementCodeubv(code_ptr);
                }
            }
            /// <inheritdoc cref="Color4ubVertex2fv(byte*, float*)"/>
            public static unsafe void Color4ubVertex2fv(ReadOnlySpan<byte> c, ReadOnlySpan<float> v)
            {
                fixed (byte* c_ptr = c)
                {
                    fixed (float* v_ptr = v)
                    {
                        Color4ubVertex2fv(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4ubVertex2fv(byte*, float*)"/>
            public static unsafe void Color4ubVertex2fv(byte[] c, float[] v)
            {
                fixed (byte* c_ptr = c)
                {
                    fixed (float* v_ptr = v)
                    {
                        Color4ubVertex2fv(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4ubVertex2fv(byte*, float*)"/>
            public static unsafe void Color4ubVertex2fv(in byte c, in float v)
            {
                fixed (byte* c_ptr = &c)
                fixed (float* v_ptr = &v)
                {
                    Color4ubVertex2fv(c_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="Color4ubVertex3fv(byte*, float*)"/>
            public static unsafe void Color4ubVertex3fv(ReadOnlySpan<byte> c, ReadOnlySpan<float> v)
            {
                fixed (byte* c_ptr = c)
                {
                    fixed (float* v_ptr = v)
                    {
                        Color4ubVertex3fv(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4ubVertex3fv(byte*, float*)"/>
            public static unsafe void Color4ubVertex3fv(byte[] c, float[] v)
            {
                fixed (byte* c_ptr = c)
                {
                    fixed (float* v_ptr = v)
                    {
                        Color4ubVertex3fv(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4ubVertex3fv(byte*, float*)"/>
            public static unsafe void Color4ubVertex3fv(in byte c, in float v)
            {
                fixed (byte* c_ptr = &c)
                fixed (float* v_ptr = &v)
                {
                    Color4ubVertex3fv(c_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="Color3fVertex3fv(float*, float*)"/>
            public static unsafe void Color3fVertex3fv(in Color3<Rgb> c, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (Color3<Rgb>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        Color3fVertex3fv(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color3fVertex3fv(float*, float*)"/>
            public static unsafe void Color3fVertex3fv(in Color3<Rgb> c, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (Color3<Rgb>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        Color3fVertex3fv(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color3fVertex3fv(float*, float*)"/>
            public static unsafe void Color3fVertex3fv(in Color3<Rgb> c, in float v)
            {
                fixed (float* v_ptr = &v)
                {
                    fixed (Color3<Rgb>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        Color3fVertex3fv(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Normal3fVertex3fv(float*, float*)"/>
            public static unsafe void Normal3fVertex3fv(ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (float* n_ptr = n)
                {
                    fixed (float* v_ptr = v)
                    {
                        Normal3fVertex3fv(n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Normal3fVertex3fv(float*, float*)"/>
            public static unsafe void Normal3fVertex3fv(float[] n, float[] v)
            {
                fixed (float* n_ptr = n)
                {
                    fixed (float* v_ptr = v)
                    {
                        Normal3fVertex3fv(n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Normal3fVertex3fv(float*, float*)"/>
            public static unsafe void Normal3fVertex3fv(in float n, in float v)
            {
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    Normal3fVertex3fv(n_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="Color4fNormal3fVertex3fv(float*, float*, float*)"/>
            public static unsafe void Color4fNormal3fVertex3fv(in Color4<Rgba> c, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (float* n_ptr = n)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (Color4<Rgba>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            Color4fNormal3fVertex3fv(c_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="Color4fNormal3fVertex3fv(float*, float*, float*)"/>
            public static unsafe void Color4fNormal3fVertex3fv(in Color4<Rgba> c, float[] n, float[] v)
            {
                fixed (float* n_ptr = n)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (Color4<Rgba>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            Color4fNormal3fVertex3fv(c_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="Color4fNormal3fVertex3fv(float*, float*, float*)"/>
            public static unsafe void Color4fNormal3fVertex3fv(in Color4<Rgba> c, in float n, in float v)
            {
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color4<Rgba>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        Color4fNormal3fVertex3fv(c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fVertex3fv(float*, float*)"/>
            public static unsafe void TexCoord2fVertex3fv(ReadOnlySpan<float> tc, ReadOnlySpan<float> v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* v_ptr = v)
                    {
                        TexCoord2fVertex3fv(tc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fVertex3fv(float*, float*)"/>
            public static unsafe void TexCoord2fVertex3fv(float[] tc, float[] v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* v_ptr = v)
                    {
                        TexCoord2fVertex3fv(tc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fVertex3fv(float*, float*)"/>
            public static unsafe void TexCoord2fVertex3fv(in float tc, in float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* v_ptr = &v)
                {
                    TexCoord2fVertex3fv(tc_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4fVertex4fv(float*, float*)"/>
            public static unsafe void TexCoord4fVertex4fv(ReadOnlySpan<float> tc, ReadOnlySpan<float> v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* v_ptr = v)
                    {
                        TexCoord4fVertex4fv(tc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord4fVertex4fv(float*, float*)"/>
            public static unsafe void TexCoord4fVertex4fv(float[] tc, float[] v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* v_ptr = v)
                    {
                        TexCoord4fVertex4fv(tc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord4fVertex4fv(float*, float*)"/>
            public static unsafe void TexCoord4fVertex4fv(in float tc, in float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* v_ptr = &v)
                {
                    TexCoord4fVertex4fv(tc_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4ubVertex3fv(float*, byte*, float*)"/>
            public static unsafe void TexCoord2fColor4ubVertex3fv(ReadOnlySpan<float> tc, ReadOnlySpan<byte> c, ReadOnlySpan<float> v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (byte* c_ptr = c)
                    {
                        fixed (float* v_ptr = v)
                        {
                            TexCoord2fColor4ubVertex3fv(tc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4ubVertex3fv(float*, byte*, float*)"/>
            public static unsafe void TexCoord2fColor4ubVertex3fv(float[] tc, byte[] c, float[] v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (byte* c_ptr = c)
                    {
                        fixed (float* v_ptr = v)
                        {
                            TexCoord2fColor4ubVertex3fv(tc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4ubVertex3fv(float*, byte*, float*)"/>
            public static unsafe void TexCoord2fColor4ubVertex3fv(in float tc, in byte c, in float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (byte* c_ptr = &c)
                fixed (float* v_ptr = &v)
                {
                    TexCoord2fColor4ubVertex3fv(tc_ptr, c_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2fColor3fVertex3fv(float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor3fVertex3fv(ReadOnlySpan<float> tc, in Color3<Rgb> c, ReadOnlySpan<float> v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (Color3<Rgb>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            TexCoord2fColor3fVertex3fv(tc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor3fVertex3fv(float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor3fVertex3fv(float[] tc, in Color3<Rgb> c, float[] v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (Color3<Rgb>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            TexCoord2fColor3fVertex3fv(tc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor3fVertex3fv(float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor3fVertex3fv(in float tc, in Color3<Rgb> c, in float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color3<Rgb>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        TexCoord2fColor3fVertex3fv(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fNormal3fVertex3fv(float*, float*, float*)"/>
            public static unsafe void TexCoord2fNormal3fVertex3fv(ReadOnlySpan<float> tc, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            TexCoord2fNormal3fVertex3fv(tc_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fNormal3fVertex3fv(float*, float*, float*)"/>
            public static unsafe void TexCoord2fNormal3fVertex3fv(float[] tc, float[] n, float[] v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            TexCoord2fNormal3fVertex3fv(tc_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fNormal3fVertex3fv(float*, float*, float*)"/>
            public static unsafe void TexCoord2fNormal3fVertex3fv(in float tc, in float n, in float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    TexCoord2fNormal3fVertex3fv(tc_ptr, n_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4fNormal3fVertex3fv(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor4fNormal3fVertex3fv(ReadOnlySpan<float> tc, in Color4<Rgba> c, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                TexCoord2fColor4fNormal3fVertex3fv(tc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4fNormal3fVertex3fv(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor4fNormal3fVertex3fv(float[] tc, in Color4<Rgba> c, float[] n, float[] v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                TexCoord2fColor4fNormal3fVertex3fv(tc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4fNormal3fVertex3fv(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor4fNormal3fVertex3fv(in float tc, in Color4<Rgba> c, in float n, in float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color4<Rgba>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        TexCoord2fColor4fNormal3fVertex3fv(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord4fColor4fNormal3fVertex4fv(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord4fColor4fNormal3fVertex4fv(ReadOnlySpan<float> tc, in Color4<Rgba> c, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                TexCoord4fColor4fNormal3fVertex4fv(tc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord4fColor4fNormal3fVertex4fv(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord4fColor4fNormal3fVertex4fv(float[] tc, in Color4<Rgba> c, float[] n, float[] v)
            {
                fixed (float* tc_ptr = tc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                TexCoord4fColor4fNormal3fVertex4fv(tc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord4fColor4fNormal3fVertex4fv(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord4fColor4fNormal3fVertex4fv(in float tc, in Color4<Rgba> c, in float n, in float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color4<Rgba>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        TexCoord4fColor4fNormal3fVertex4fv(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiVertex3fv(TriangleListSUN*, float*)"/>
            public static unsafe void ReplacementCodeuiVertex3fv(ReadOnlySpan<TriangleListSUN> rc, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        ReplacementCodeuiVertex3fv(rc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiVertex3fv(TriangleListSUN*, float*)"/>
            public static unsafe void ReplacementCodeuiVertex3fv(TriangleListSUN[] rc, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        ReplacementCodeuiVertex3fv(rc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiVertex3fv(TriangleListSUN*, float*)"/>
            public static unsafe void ReplacementCodeuiVertex3fv(in TriangleListSUN rc, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* v_ptr = &v)
                {
                    ReplacementCodeuiVertex3fv(rc_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4ubVertex3fv(TriangleListSUN*, byte*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4ubVertex3fv(ReadOnlySpan<TriangleListSUN> rc, ReadOnlySpan<byte> c, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (byte* c_ptr = c)
                    {
                        fixed (float* v_ptr = v)
                        {
                            ReplacementCodeuiColor4ubVertex3fv(rc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4ubVertex3fv(TriangleListSUN*, byte*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4ubVertex3fv(TriangleListSUN[] rc, byte[] c, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (byte* c_ptr = c)
                    {
                        fixed (float* v_ptr = v)
                        {
                            ReplacementCodeuiColor4ubVertex3fv(rc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4ubVertex3fv(TriangleListSUN*, byte*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4ubVertex3fv(in TriangleListSUN rc, in byte c, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (byte* c_ptr = &c)
                fixed (float* v_ptr = &v)
                {
                    ReplacementCodeuiColor4ubVertex3fv(rc_ptr, c_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor3fVertex3fv(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor3fVertex3fv(ReadOnlySpan<TriangleListSUN> rc, in Color3<Rgb> c, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (Color3<Rgb>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            ReplacementCodeuiColor3fVertex3fv(rc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor3fVertex3fv(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor3fVertex3fv(TriangleListSUN[] rc, in Color3<Rgb> c, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (Color3<Rgb>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            ReplacementCodeuiColor3fVertex3fv(rc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor3fVertex3fv(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor3fVertex3fv(in TriangleListSUN rc, in Color3<Rgb> c, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color3<Rgb>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        ReplacementCodeuiColor3fVertex3fv(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiNormal3fVertex3fv(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiNormal3fVertex3fv(ReadOnlySpan<TriangleListSUN> rc, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            ReplacementCodeuiNormal3fVertex3fv(rc_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiNormal3fVertex3fv(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiNormal3fVertex3fv(TriangleListSUN[] rc, float[] n, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            ReplacementCodeuiNormal3fVertex3fv(rc_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiNormal3fVertex3fv(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiNormal3fVertex3fv(in TriangleListSUN rc, in float n, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    ReplacementCodeuiNormal3fVertex3fv(rc_ptr, n_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4fNormal3fVertex3fv(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4fNormal3fVertex3fv(ReadOnlySpan<TriangleListSUN> rc, in Color4<Rgba> c, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                ReplacementCodeuiColor4fNormal3fVertex3fv(rc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4fNormal3fVertex3fv(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4fNormal3fVertex3fv(TriangleListSUN[] rc, in Color4<Rgba> c, float[] n, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* v_ptr = v)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                ReplacementCodeuiColor4fNormal3fVertex3fv(rc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4fNormal3fVertex3fv(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4fNormal3fVertex3fv(in TriangleListSUN rc, in Color4<Rgba> c, in float n, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color4<Rgba>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        ReplacementCodeuiColor4fNormal3fVertex3fv(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fVertex3fv(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fVertex3fv(ReadOnlySpan<TriangleListSUN> rc, ReadOnlySpan<float> tc, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        fixed (float* v_ptr = v)
                        {
                            ReplacementCodeuiTexCoord2fVertex3fv(rc_ptr, tc_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fVertex3fv(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fVertex3fv(TriangleListSUN[] rc, float[] tc, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        fixed (float* v_ptr = v)
                        {
                            ReplacementCodeuiTexCoord2fVertex3fv(rc_ptr, tc_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fVertex3fv(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fVertex3fv(in TriangleListSUN rc, in float tc, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* tc_ptr = &tc)
                fixed (float* v_ptr = &v)
                {
                    ReplacementCodeuiTexCoord2fVertex3fv(rc_ptr, tc_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fNormal3fVertex3fv(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fv(ReadOnlySpan<TriangleListSUN> rc, ReadOnlySpan<float> tc, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        fixed (float* n_ptr = n)
                        {
                            fixed (float* v_ptr = v)
                            {
                                ReplacementCodeuiTexCoord2fNormal3fVertex3fv(rc_ptr, tc_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fNormal3fVertex3fv(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fv(TriangleListSUN[] rc, float[] tc, float[] n, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        fixed (float* n_ptr = n)
                        {
                            fixed (float* v_ptr = v)
                            {
                                ReplacementCodeuiTexCoord2fNormal3fVertex3fv(rc_ptr, tc_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fNormal3fVertex3fv(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fv(in TriangleListSUN rc, in float tc, in float n, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* tc_ptr = &tc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    ReplacementCodeuiTexCoord2fNormal3fVertex3fv(rc_ptr, tc_ptr, n_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv(TriangleListSUN*, float*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv(ReadOnlySpan<TriangleListSUN> rc, ReadOnlySpan<float> tc, in Color4<Rgba> c, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        fixed (float* n_ptr = n)
                        {
                            fixed (float* v_ptr = v)
                            {
                                fixed (Color4<Rgba>* tmp_c = &c)
                                {
                                    float* c_ptr = (float*)tmp_c;
                                    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                                }
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv(TriangleListSUN*, float*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv(TriangleListSUN[] rc, float[] tc, in Color4<Rgba> c, float[] n, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = rc)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        fixed (float* n_ptr = n)
                        {
                            fixed (float* v_ptr = v)
                            {
                                fixed (Color4<Rgba>* tmp_c = &c)
                                {
                                    float* c_ptr = (float*)tmp_c;
                                    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                                }
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv(TriangleListSUN*, float*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv(in TriangleListSUN rc, in float tc, in Color4<Rgba> c, in float n, in float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* tc_ptr = &tc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color4<Rgba>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
        }
    }
#pragma warning restore CS0419 // Ambiguous reference in cref attribute
}
