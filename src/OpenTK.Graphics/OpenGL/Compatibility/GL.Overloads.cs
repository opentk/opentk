// This file is auto generated, do not edit. Generated: 2025-08-04 00:00:45 GMT+02:00
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using OpenTK.Core.Native;
using OpenTK.Mathematics;
using OpenTK.Graphics;
using OpenTK.Graphics.OpenGL;
using OpenTK.Graphics.Wgl;
using OpenTK.Graphics.Glx;

namespace OpenTK.Graphics.OpenGL.Compatibility
{
    public static unsafe partial class GL
    {
        /// <inheritdoc cref="AreTexturesResident(int, int*, bool*)"/>
        public static unsafe bool AreTexturesResident(int n, ReadOnlySpan<int> textures, Span<bool> residences)
        {
            bool returnValue;
            fixed (bool* residences_ptr = residences)
            {
                fixed (int* textures_ptr = textures)
                {
                    returnValue = AreTexturesResident(n, textures_ptr, residences_ptr);
                }
            }
            return returnValue;
        }
        /// <inheritdoc cref="AreTexturesResident(int, int*, bool*)"/>
        public static unsafe bool AreTexturesResident(int n, int[] textures, bool[] residences)
        {
            bool returnValue;
            fixed (bool* residences_ptr = residences)
            {
                fixed (int* textures_ptr = textures)
                {
                    returnValue = AreTexturesResident(n, textures_ptr, residences_ptr);
                }
            }
            return returnValue;
        }
        /// <inheritdoc cref="AreTexturesResident(int, int*, bool*)"/>
        public static unsafe bool AreTexturesResident(int n, ref readonly int textures, ref bool residences)
        {
            bool returnValue;
            fixed (int* textures_ptr = &textures)
            fixed (bool* residences_ptr = &residences)
            {
                returnValue = AreTexturesResident(n, textures_ptr, residences_ptr);
            }
            return returnValue;
        }
        /// <inheritdoc cref="BindAttribLocation(int, uint, byte*)"/>
        public static unsafe void BindAttribLocation(int program, uint index, string name)
        {
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            BindAttribLocation(program, index, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
        }
        /// <inheritdoc cref="BindBuffersBase(BufferTarget, uint, int, int*)"/>
        public static unsafe void BindBuffersBase(BufferTarget target, uint first, int count, ReadOnlySpan<int> buffers)
        {
            fixed (int* buffers_ptr = buffers)
            {
                BindBuffersBase(target, first, count, buffers_ptr);
            }
        }
        /// <inheritdoc cref="BindBuffersBase(BufferTarget, uint, int, int*)"/>
        public static unsafe void BindBuffersBase(BufferTarget target, uint first, int count, int[] buffers)
        {
            fixed (int* buffers_ptr = buffers)
            {
                BindBuffersBase(target, first, count, buffers_ptr);
            }
        }
        /// <inheritdoc cref="BindBuffersBase(BufferTarget, uint, int, int*)"/>
        public static unsafe void BindBuffersBase(BufferTarget target, uint first, int count, ref readonly int buffers)
        {
            fixed (int* buffers_ptr = &buffers)
            {
                BindBuffersBase(target, first, count, buffers_ptr);
            }
        }
        /// <inheritdoc cref="BindBuffersRange(BufferTarget, uint, int, int*, IntPtr*, nint*)"/>
        public static unsafe void BindBuffersRange(BufferTarget target, uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<nint> sizes)
        {
            fixed (nint* sizes_ptr = sizes)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (int* buffers_ptr = buffers)
                    {
                        BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="BindBuffersRange(BufferTarget, uint, int, int*, IntPtr*, nint*)"/>
        public static unsafe void BindBuffersRange(BufferTarget target, uint first, int count, int[] buffers, IntPtr[] offsets, nint[] sizes)
        {
            fixed (nint* sizes_ptr = sizes)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (int* buffers_ptr = buffers)
                    {
                        BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="BindBuffersRange(BufferTarget, uint, int, int*, IntPtr*, nint*)"/>
        public static unsafe void BindBuffersRange(BufferTarget target, uint first, int count, ref readonly int buffers, ref readonly IntPtr offsets, ref readonly nint sizes)
        {
            fixed (int* buffers_ptr = &buffers)
            fixed (IntPtr* offsets_ptr = &offsets)
            fixed (nint* sizes_ptr = &sizes)
            {
                BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
            }
        }
        /// <inheritdoc cref="BindFragDataLocation(int, uint, byte*)"/>
        public static unsafe void BindFragDataLocation(int program, uint color, string name)
        {
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            BindFragDataLocation(program, color, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
        }
        /// <inheritdoc cref="BindFragDataLocationIndexed(int, uint, uint, byte*)"/>
        public static unsafe void BindFragDataLocationIndexed(int program, uint colorNumber, uint index, string name)
        {
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            BindFragDataLocationIndexed(program, colorNumber, index, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
        }
        /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
        public static unsafe void BindImageTextures(uint first, int count, ReadOnlySpan<int> textures)
        {
            fixed (int* textures_ptr = textures)
            {
                BindImageTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
        public static unsafe void BindImageTextures(uint first, int count, int[] textures)
        {
            fixed (int* textures_ptr = textures)
            {
                BindImageTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
        public static unsafe void BindImageTextures(uint first, int count, ref readonly int textures)
        {
            fixed (int* textures_ptr = &textures)
            {
                BindImageTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
        public static unsafe void BindSamplers(uint first, int count, ReadOnlySpan<int> samplers)
        {
            fixed (int* samplers_ptr = samplers)
            {
                BindSamplers(first, count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
        public static unsafe void BindSamplers(uint first, int count, int[] samplers)
        {
            fixed (int* samplers_ptr = samplers)
            {
                BindSamplers(first, count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
        public static unsafe void BindSamplers(uint first, int count, ref readonly int samplers)
        {
            fixed (int* samplers_ptr = &samplers)
            {
                BindSamplers(first, count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
        public static unsafe void BindTextures(uint first, int count, ReadOnlySpan<int> textures)
        {
            fixed (int* textures_ptr = textures)
            {
                BindTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
        public static unsafe void BindTextures(uint first, int count, int[] textures)
        {
            fixed (int* textures_ptr = textures)
            {
                BindTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
        public static unsafe void BindTextures(uint first, int count, ref readonly int textures)
        {
            fixed (int* textures_ptr = &textures)
            {
                BindTextures(first, count, textures_ptr);
            }
        }
        /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void BindVertexBuffers(uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<int> strides)
        {
            fixed (int* strides_ptr = strides)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (int* buffers_ptr = buffers)
                    {
                        BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void BindVertexBuffers(uint first, int count, int[] buffers, IntPtr[] offsets, int[] strides)
        {
            fixed (int* strides_ptr = strides)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (int* buffers_ptr = buffers)
                    {
                        BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void BindVertexBuffers(uint first, int count, ref readonly int buffers, ref readonly IntPtr offsets, ref readonly int strides)
        {
            fixed (int* buffers_ptr = &buffers)
            fixed (IntPtr* offsets_ptr = &offsets)
            fixed (int* strides_ptr = &strides)
            {
                BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
            }
        }
        /// <inheritdoc cref="Bitmap(int, int, float, float, float, float, byte*)"/>
        public static unsafe void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, ReadOnlySpan<byte> bitmap)
        {
            fixed (byte* bitmap_ptr = bitmap)
            {
                Bitmap(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
            }
        }
        /// <inheritdoc cref="Bitmap(int, int, float, float, float, float, byte*)"/>
        public static unsafe void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap)
        {
            fixed (byte* bitmap_ptr = bitmap)
            {
                Bitmap(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
            }
        }
        /// <inheritdoc cref="Bitmap(int, int, float, float, float, float, byte*)"/>
        public static unsafe void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, ref readonly byte bitmap)
        {
            fixed (byte* bitmap_ptr = &bitmap)
            {
                Bitmap(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
            }
        }
        /// <inheritdoc cref="BufferData(BufferTarget, nint, void*, BufferUsage)"/>
        public static unsafe void BufferData(BufferTarget target, nint size, IntPtr data, BufferUsage usage)
        {
            void* data_vptr = (void*)data;
            BufferData(target, size, data_vptr, usage);
        }
        /// <inheritdoc cref="BufferData(BufferTarget, nint, void*, BufferUsage)"/>
        public static unsafe void BufferData<T1>(BufferTarget target, nint size, ReadOnlySpan<T1> data, BufferUsage usage)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                BufferData(target, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="BufferData(BufferTarget, nint, void*, BufferUsage)"/>
        public static unsafe void BufferData<T1>(BufferTarget target, nint size, T1[] data, BufferUsage usage)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                BufferData(target, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="BufferData(BufferTarget, nint, void*, BufferUsage)"/>
        public static unsafe void BufferData<T1>(BufferTarget target, nint size, ref readonly T1 data, BufferUsage usage)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                BufferData(target, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
        public static unsafe void BufferStorage(BufferStorageTarget target, nint size, IntPtr data, BufferStorageMask flags)
        {
            void* data_vptr = (void*)data;
            BufferStorage(target, size, data_vptr, flags);
        }
        /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
        public static unsafe void BufferStorage<T1>(BufferStorageTarget target, nint size, ReadOnlySpan<T1> data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                BufferStorage(target, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
        public static unsafe void BufferStorage<T1>(BufferStorageTarget target, nint size, T1[] data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                BufferStorage(target, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
        public static unsafe void BufferStorage<T1>(BufferStorageTarget target, nint size, ref readonly T1 data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                BufferStorage(target, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="BufferSubData(BufferTarget, IntPtr, nint, void*)"/>
        public static unsafe void BufferSubData(BufferTarget target, IntPtr offset, nint size, IntPtr data)
        {
            void* data_vptr = (void*)data;
            BufferSubData(target, offset, size, data_vptr);
        }
        /// <inheritdoc cref="BufferSubData(BufferTarget, IntPtr, nint, void*)"/>
        public static unsafe void BufferSubData<T1>(BufferTarget target, IntPtr offset, nint size, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                BufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="BufferSubData(BufferTarget, IntPtr, nint, void*)"/>
        public static unsafe void BufferSubData<T1>(BufferTarget target, IntPtr offset, nint size, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                BufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="BufferSubData(BufferTarget, IntPtr, nint, void*)"/>
        public static unsafe void BufferSubData<T1>(BufferTarget target, IntPtr offset, nint size, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                BufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="CallLists(int, ListNameType, void*)"/>
        public static unsafe void CallLists(int n, ListNameType type, IntPtr lists)
        {
            void* lists_vptr = (void*)lists;
            CallLists(n, type, lists_vptr);
        }
        /// <inheritdoc cref="CallLists(int, ListNameType, void*)"/>
        public static unsafe void CallLists<T1>(int n, ListNameType type, ReadOnlySpan<T1> lists)
            where T1 : unmanaged
        {
            fixed (void* lists_ptr = lists)
            {
                CallLists(n, type, lists_ptr);
            }
        }
        /// <inheritdoc cref="CallLists(int, ListNameType, void*)"/>
        public static unsafe void CallLists<T1>(int n, ListNameType type, T1[] lists)
            where T1 : unmanaged
        {
            fixed (void* lists_ptr = lists)
            {
                CallLists(n, type, lists_ptr);
            }
        }
        /// <inheritdoc cref="CallLists(int, ListNameType, void*)"/>
        public static unsafe void CallLists<T1>(int n, ListNameType type, ref readonly T1 lists)
            where T1 : unmanaged
        {
            fixed (void* lists_ptr = &lists)
            {
                CallLists(n, type, lists_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearBufferData(target, internalformat, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearBufferData(target, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearBufferData(target, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearBufferData(target, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferfi(Buffer, int, float, int)"/>
        public static unsafe void ClearBuffer(Buffer buffer, int drawbuffer, float depth, int stencil)
        {
            ClearBufferfi(buffer, drawbuffer, depth, stencil);
        }
        /// <inheritdoc cref="ClearBufferfv(Buffer, int, float*)"/>
        public static unsafe void ClearBufferf(Buffer buffer, int drawbuffer, ReadOnlySpan<float> value)
        {
            fixed (float* value_ptr = value)
            {
                ClearBufferfv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferfv(Buffer, int, float*)"/>
        public static unsafe void ClearBufferf(Buffer buffer, int drawbuffer, float[] value)
        {
            fixed (float* value_ptr = value)
            {
                ClearBufferfv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferfv(Buffer, int, float*)"/>
        public static unsafe void ClearBufferf(Buffer buffer, int drawbuffer, ref readonly float value)
        {
            fixed (float* value_ptr = &value)
            {
                ClearBufferfv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferiv(Buffer, int, int*)"/>
        public static unsafe void ClearBufferi(Buffer buffer, int drawbuffer, ReadOnlySpan<int> value)
        {
            fixed (int* value_ptr = value)
            {
                ClearBufferiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferiv(Buffer, int, int*)"/>
        public static unsafe void ClearBufferi(Buffer buffer, int drawbuffer, int[] value)
        {
            fixed (int* value_ptr = value)
            {
                ClearBufferiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferiv(Buffer, int, int*)"/>
        public static unsafe void ClearBufferi(Buffer buffer, int drawbuffer, ref readonly int value)
        {
            fixed (int* value_ptr = &value)
            {
                ClearBufferiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferSubData(BufferTarget, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferSubData(BufferTarget target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearBufferSubData(target, internalformat, offset, size, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearBufferSubData(BufferTarget, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferSubData<T1>(BufferTarget target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferSubData(BufferTarget, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferSubData<T1>(BufferTarget target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferSubData(BufferTarget, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearBufferSubData<T1>(BufferTarget target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferuiv(Buffer, int, uint*)"/>
        public static unsafe void ClearBufferui(Buffer buffer, int drawbuffer, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                ClearBufferuiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferuiv(Buffer, int, uint*)"/>
        public static unsafe void ClearBufferui(Buffer buffer, int drawbuffer, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                ClearBufferuiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearBufferuiv(Buffer, int, uint*)"/>
        public static unsafe void ClearBufferui(Buffer buffer, int drawbuffer, ref readonly uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                ClearBufferuiv(buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferData(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearNamedBufferData(buffer, internalformat, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferSubData(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferfi(int, Buffer, int, float, int)"/>
        public static unsafe void ClearNamedFramebuffer(int framebuffer, Buffer buffer, int drawbuffer, float depth, int stencil)
        {
            ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
        }
        /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
        public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<float> value)
        {
            fixed (float* value_ptr = value)
            {
                ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
        public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, float[] value)
        {
            fixed (float* value_ptr = value)
            {
                ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
        public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, ref readonly float value)
        {
            fixed (float* value_ptr = &value)
            {
                ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
        public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<int> value)
        {
            fixed (int* value_ptr = value)
            {
                ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
        public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, int[] value)
        {
            fixed (int* value_ptr = value)
            {
                ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
        public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, ref readonly int value)
        {
            fixed (int* value_ptr = &value)
            {
                ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
        public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<uint> value)
        {
            fixed (uint* value_ptr = value)
            {
                ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
        public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, uint[] value)
        {
            fixed (uint* value_ptr = value)
            {
                ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
        public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, ref readonly uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexImage(int texture, int level, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearTexImage(texture, level, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearTexImage(texture, level, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearTexImage(texture, level, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearTexImage(texture, level, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_vptr);
        }
        /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
            }
        }
        /// <inheritdoc cref="ClipPlane(ClipPlaneName, double*)"/>
        public static unsafe void ClipPlane(ClipPlaneName plane, ReadOnlySpan<double> equation)
        {
            fixed (double* equation_ptr = equation)
            {
                ClipPlane(plane, equation_ptr);
            }
        }
        /// <inheritdoc cref="ClipPlane(ClipPlaneName, double*)"/>
        public static unsafe void ClipPlane(ClipPlaneName plane, double[] equation)
        {
            fixed (double* equation_ptr = equation)
            {
                ClipPlane(plane, equation_ptr);
            }
        }
        /// <inheritdoc cref="ClipPlane(ClipPlaneName, double*)"/>
        public static unsafe void ClipPlane(ClipPlaneName plane, ref readonly double equation)
        {
            fixed (double* equation_ptr = &equation)
            {
                ClipPlane(plane, equation_ptr);
            }
        }
        /// <inheritdoc cref="Color3b(sbyte, sbyte, sbyte)"/>
        public static unsafe void Color3(sbyte red, sbyte green, sbyte blue)
        {
            Color3b(red, green, blue);
        }
        /// <inheritdoc cref="Color3bv(sbyte*)"/>
        public static unsafe void Color3(ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                Color3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3bv(sbyte*)"/>
        public static unsafe void Color3(sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                Color3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3bv(sbyte*)"/>
        public static unsafe void Color3(ref readonly sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                Color3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3dv(double*)"/>
        public static unsafe void Color3d(ref readonly Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                Color3dv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3fv(float*)"/>
        public static unsafe void Color3f(ref readonly Color3<Rgb> v)
        {
            fixed (Color3<Rgb>* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Color3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3iv(int*)"/>
        public static unsafe void Color3i(ref readonly Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                Color3iv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3s(short, short, short)"/>
        public static unsafe void Color3(short red, short green, short blue)
        {
            Color3s(red, green, blue);
        }
        /// <inheritdoc cref="Color3sv(short*)"/>
        public static unsafe void Color3(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                Color3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3sv(short*)"/>
        public static unsafe void Color3(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                Color3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3sv(short*)"/>
        public static unsafe void Color3(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                Color3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3ub(byte, byte, byte)"/>
        public static unsafe void Color3(byte red, byte green, byte blue)
        {
            Color3ub(red, green, blue);
        }
        /// <inheritdoc cref="Color3ubv(byte*)"/>
        public static unsafe void Color3(ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v)
            {
                Color3ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3ubv(byte*)"/>
        public static unsafe void Color3(byte[] v)
        {
            fixed (byte* v_ptr = v)
            {
                Color3ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3ubv(byte*)"/>
        public static unsafe void Color3(ref readonly byte v)
        {
            fixed (byte* v_ptr = &v)
            {
                Color3ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3uiv(uint*)"/>
        public static unsafe void Color3ui(ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                Color3uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3uiv(uint*)"/>
        public static unsafe void Color3ui(uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                Color3uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3uiv(uint*)"/>
        public static unsafe void Color3ui(ref readonly uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                Color3uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3us(ushort, ushort, ushort)"/>
        public static unsafe void Color3(ushort red, ushort green, ushort blue)
        {
            Color3us(red, green, blue);
        }
        /// <inheritdoc cref="Color3usv(ushort*)"/>
        public static unsafe void Color3(ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v)
            {
                Color3usv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3usv(ushort*)"/>
        public static unsafe void Color3(ushort[] v)
        {
            fixed (ushort* v_ptr = v)
            {
                Color3usv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color3usv(ushort*)"/>
        public static unsafe void Color3(ref readonly ushort v)
        {
            fixed (ushort* v_ptr = &v)
            {
                Color3usv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4b(sbyte, sbyte, sbyte, sbyte)"/>
        public static unsafe void Color4(sbyte red, sbyte green, sbyte blue, sbyte alpha)
        {
            Color4b(red, green, blue, alpha);
        }
        /// <inheritdoc cref="Color4bv(sbyte*)"/>
        public static unsafe void Color4(ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                Color4bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4bv(sbyte*)"/>
        public static unsafe void Color4(sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                Color4bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4bv(sbyte*)"/>
        public static unsafe void Color4(ref readonly sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                Color4bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4dv(double*)"/>
        public static unsafe void Color4d(ref readonly Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                Color4dv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4fv(float*)"/>
        public static unsafe void Color4f(ref readonly Color4<Rgba> v)
        {
            fixed (Color4<Rgba>* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Color4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4iv(int*)"/>
        public static unsafe void Color4i(ref readonly Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                Color4iv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4s(short, short, short, short)"/>
        public static unsafe void Color4(short red, short green, short blue, short alpha)
        {
            Color4s(red, green, blue, alpha);
        }
        /// <inheritdoc cref="Color4sv(short*)"/>
        public static unsafe void Color4(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                Color4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4sv(short*)"/>
        public static unsafe void Color4(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                Color4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4sv(short*)"/>
        public static unsafe void Color4(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                Color4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4ub(byte, byte, byte, byte)"/>
        public static unsafe void Color4(byte red, byte green, byte blue, byte alpha)
        {
            Color4ub(red, green, blue, alpha);
        }
        /// <inheritdoc cref="Color4ubv(byte*)"/>
        public static unsafe void Color4(ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v)
            {
                Color4ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4ubv(byte*)"/>
        public static unsafe void Color4(byte[] v)
        {
            fixed (byte* v_ptr = v)
            {
                Color4ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4ubv(byte*)"/>
        public static unsafe void Color4(ref readonly byte v)
        {
            fixed (byte* v_ptr = &v)
            {
                Color4ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4uiv(uint*)"/>
        public static unsafe void Color4ui(ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                Color4uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4uiv(uint*)"/>
        public static unsafe void Color4ui(uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                Color4uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4uiv(uint*)"/>
        public static unsafe void Color4ui(ref readonly uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                Color4uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4us(ushort, ushort, ushort, ushort)"/>
        public static unsafe void Color4(ushort red, ushort green, ushort blue, ushort alpha)
        {
            Color4us(red, green, blue, alpha);
        }
        /// <inheritdoc cref="Color4usv(ushort*)"/>
        public static unsafe void Color4(ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v)
            {
                Color4usv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4usv(ushort*)"/>
        public static unsafe void Color4(ushort[] v)
        {
            fixed (ushort* v_ptr = v)
            {
                Color4usv(v_ptr);
            }
        }
        /// <inheritdoc cref="Color4usv(ushort*)"/>
        public static unsafe void Color4(ref readonly ushort v)
        {
            fixed (ushort* v_ptr = &v)
            {
                Color4usv(v_ptr);
            }
        }
        /// <inheritdoc cref="ColorP3uiv(ColorPointerType, uint*)"/>
        public static unsafe void ColorP3ui(ColorPointerType type, ref readonly uint color)
        {
            fixed (uint* color_ptr = &color)
            {
                ColorP3uiv(type, color_ptr);
            }
        }
        /// <inheritdoc cref="ColorP4uiv(ColorPointerType, uint*)"/>
        public static unsafe void ColorP4ui(ColorPointerType type, ref readonly uint color)
        {
            fixed (uint* color_ptr = &color)
            {
                ColorP4uiv(type, color_ptr);
            }
        }
        /// <inheritdoc cref="ColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void ColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            ColorPointer(size, type, stride, pointer_vptr);
        }
        /// <inheritdoc cref="ColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void ColorPointer<T1>(int size, ColorPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                ColorPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="ColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void ColorPointer<T1>(int size, ColorPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                ColorPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="ColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void ColorPointer<T1>(int size, ColorPointerType type, int stride, ref readonly T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                ColorPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage1D(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage2D(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
        public static unsafe void CompressedTexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage1D(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage2D(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTexSubImage3D(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage1D(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_vptr);
        }
        /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
        public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
            }
        }
        /// <inheritdoc cref="CreateBuffers(int, int*)"/>
        public static unsafe int CreateBuffer()
        {
            int buffer;
            int n = 1;
            Unsafe.SkipInit(out buffer);
            int* buffers_handle = &buffer;
            CreateBuffers(n, buffers_handle);
            return buffer;
        }
        /// <inheritdoc cref="CreateBuffers(int, int*)"/>
        public static unsafe void CreateBuffer(out int buffer)
        {
            int n = 1;
            Unsafe.SkipInit(out buffer);
            fixed(int* buffers_handle = &buffer)
            {
                CreateBuffers(n, buffers_handle);
            }
        }
        /// <inheritdoc cref="CreateBuffers(int, int*)"/>
        public static unsafe void CreateBuffers(int n, Span<int> buffers)
        {
            fixed (int* buffers_ptr = buffers)
            {
                CreateBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateBuffers(int, int*)"/>
        public static unsafe void CreateBuffers(int n, int[] buffers)
        {
            fixed (int* buffers_ptr = buffers)
            {
                CreateBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateBuffers(int, int*)"/>
        public static unsafe void CreateBuffers(int n, ref int buffers)
        {
            fixed (int* buffers_ptr = &buffers)
            {
                CreateBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
        public static unsafe int CreateFramebuffer()
        {
            int framebuffer;
            int n = 1;
            Unsafe.SkipInit(out framebuffer);
            int* framebuffers_handle = &framebuffer;
            CreateFramebuffers(n, framebuffers_handle);
            return framebuffer;
        }
        /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
        public static unsafe void CreateFramebuffer(out int framebuffer)
        {
            int n = 1;
            Unsafe.SkipInit(out framebuffer);
            fixed(int* framebuffers_handle = &framebuffer)
            {
                CreateFramebuffers(n, framebuffers_handle);
            }
        }
        /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
        public static unsafe void CreateFramebuffers(int n, Span<int> framebuffers)
        {
            fixed (int* framebuffers_ptr = framebuffers)
            {
                CreateFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
        public static unsafe void CreateFramebuffers(int n, int[] framebuffers)
        {
            fixed (int* framebuffers_ptr = framebuffers)
            {
                CreateFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
        public static unsafe void CreateFramebuffers(int n, ref int framebuffers)
        {
            fixed (int* framebuffers_ptr = &framebuffers)
            {
                CreateFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
        public static unsafe int CreateProgramPipeline()
        {
            int pipeline;
            int n = 1;
            Unsafe.SkipInit(out pipeline);
            int* pipelines_handle = &pipeline;
            CreateProgramPipelines(n, pipelines_handle);
            return pipeline;
        }
        /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
        public static unsafe void CreateProgramPipeline(out int pipeline)
        {
            int n = 1;
            Unsafe.SkipInit(out pipeline);
            fixed(int* pipelines_handle = &pipeline)
            {
                CreateProgramPipelines(n, pipelines_handle);
            }
        }
        /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
        public static unsafe void CreateProgramPipelines(int n, Span<int> pipelines)
        {
            fixed (int* pipelines_ptr = pipelines)
            {
                CreateProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
        public static unsafe void CreateProgramPipelines(int n, int[] pipelines)
        {
            fixed (int* pipelines_ptr = pipelines)
            {
                CreateProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
        public static unsafe void CreateProgramPipelines(int n, ref int pipelines)
        {
            fixed (int* pipelines_ptr = &pipelines)
            {
                CreateProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
        public static unsafe int CreateQuery(QueryTarget target)
        {
            int id;
            int n = 1;
            Unsafe.SkipInit(out id);
            int* ids_handle = &id;
            CreateQueries(target, n, ids_handle);
            return id;
        }
        /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
        public static unsafe void CreateQuery(QueryTarget target, out int id)
        {
            int n = 1;
            Unsafe.SkipInit(out id);
            fixed(int* ids_handle = &id)
            {
                CreateQueries(target, n, ids_handle);
            }
        }
        /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
        public static unsafe void CreateQueries(QueryTarget target, int n, Span<int> ids)
        {
            fixed (int* ids_ptr = ids)
            {
                CreateQueries(target, n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
        public static unsafe void CreateQueries(QueryTarget target, int n, int[] ids)
        {
            fixed (int* ids_ptr = ids)
            {
                CreateQueries(target, n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
        public static unsafe void CreateQueries(QueryTarget target, int n, ref int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                CreateQueries(target, n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
        public static unsafe int CreateRenderbuffer()
        {
            int renderbuffer;
            int n = 1;
            Unsafe.SkipInit(out renderbuffer);
            int* renderbuffers_handle = &renderbuffer;
            CreateRenderbuffers(n, renderbuffers_handle);
            return renderbuffer;
        }
        /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
        public static unsafe void CreateRenderbuffer(out int renderbuffer)
        {
            int n = 1;
            Unsafe.SkipInit(out renderbuffer);
            fixed(int* renderbuffers_handle = &renderbuffer)
            {
                CreateRenderbuffers(n, renderbuffers_handle);
            }
        }
        /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
        public static unsafe void CreateRenderbuffers(int n, Span<int> renderbuffers)
        {
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                CreateRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
        public static unsafe void CreateRenderbuffers(int n, int[] renderbuffers)
        {
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                CreateRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
        public static unsafe void CreateRenderbuffers(int n, ref int renderbuffers)
        {
            fixed (int* renderbuffers_ptr = &renderbuffers)
            {
                CreateRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="CreateSamplers(int, int*)"/>
        public static unsafe int CreateSampler()
        {
            int sampler;
            int n = 1;
            Unsafe.SkipInit(out sampler);
            int* samplers_handle = &sampler;
            CreateSamplers(n, samplers_handle);
            return sampler;
        }
        /// <inheritdoc cref="CreateSamplers(int, int*)"/>
        public static unsafe void CreateSampler(out int sampler)
        {
            int n = 1;
            Unsafe.SkipInit(out sampler);
            fixed(int* samplers_handle = &sampler)
            {
                CreateSamplers(n, samplers_handle);
            }
        }
        /// <inheritdoc cref="CreateSamplers(int, int*)"/>
        public static unsafe void CreateSamplers(int n, Span<int> samplers)
        {
            fixed (int* samplers_ptr = samplers)
            {
                CreateSamplers(n, samplers_ptr);
            }
        }
        /// <inheritdoc cref="CreateSamplers(int, int*)"/>
        public static unsafe void CreateSamplers(int n, int[] samplers)
        {
            fixed (int* samplers_ptr = samplers)
            {
                CreateSamplers(n, samplers_ptr);
            }
        }
        /// <inheritdoc cref="CreateSamplers(int, int*)"/>
        public static unsafe void CreateSamplers(int n, ref int samplers)
        {
            fixed (int* samplers_ptr = &samplers)
            {
                CreateSamplers(n, samplers_ptr);
            }
        }
        /// <inheritdoc cref="CreateShaderProgramv(ShaderType, int, byte**)"/>
        public static unsafe int CreateShaderProgram(ShaderType type, int count, string[] strings)
        {
            int returnValue;
            byte** strings_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(strings);
            returnValue = CreateShaderProgramv(type, count, strings_ptr);
            MarshalTk.FreeStringArrayCoTaskMem((IntPtr)strings_ptr, strings.Length);
            return returnValue;
        }
        /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
        public static unsafe int CreateTexture(TextureTarget target)
        {
            int texture;
            int n = 1;
            Unsafe.SkipInit(out texture);
            int* textures_handle = &texture;
            CreateTextures(target, n, textures_handle);
            return texture;
        }
        /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
        public static unsafe void CreateTexture(TextureTarget target, out int texture)
        {
            int n = 1;
            Unsafe.SkipInit(out texture);
            fixed(int* textures_handle = &texture)
            {
                CreateTextures(target, n, textures_handle);
            }
        }
        /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
        public static unsafe void CreateTextures(TextureTarget target, int n, Span<int> textures)
        {
            fixed (int* textures_ptr = textures)
            {
                CreateTextures(target, n, textures_ptr);
            }
        }
        /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
        public static unsafe void CreateTextures(TextureTarget target, int n, int[] textures)
        {
            fixed (int* textures_ptr = textures)
            {
                CreateTextures(target, n, textures_ptr);
            }
        }
        /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
        public static unsafe void CreateTextures(TextureTarget target, int n, ref int textures)
        {
            fixed (int* textures_ptr = &textures)
            {
                CreateTextures(target, n, textures_ptr);
            }
        }
        /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
        public static unsafe int CreateTransformFeedback()
        {
            int id;
            int n = 1;
            Unsafe.SkipInit(out id);
            int* ids_handle = &id;
            CreateTransformFeedbacks(n, ids_handle);
            return id;
        }
        /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
        public static unsafe void CreateTransformFeedback(out int id)
        {
            int n = 1;
            Unsafe.SkipInit(out id);
            fixed(int* ids_handle = &id)
            {
                CreateTransformFeedbacks(n, ids_handle);
            }
        }
        /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
        public static unsafe void CreateTransformFeedbacks(int n, Span<int> ids)
        {
            fixed (int* ids_ptr = ids)
            {
                CreateTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
        public static unsafe void CreateTransformFeedbacks(int n, int[] ids)
        {
            fixed (int* ids_ptr = ids)
            {
                CreateTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
        public static unsafe void CreateTransformFeedbacks(int n, ref int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                CreateTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
        public static unsafe int CreateVertexArray()
        {
            int array;
            int n = 1;
            Unsafe.SkipInit(out array);
            int* arrays_handle = &array;
            CreateVertexArrays(n, arrays_handle);
            return array;
        }
        /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
        public static unsafe void CreateVertexArray(out int array)
        {
            int n = 1;
            Unsafe.SkipInit(out array);
            fixed(int* arrays_handle = &array)
            {
                CreateVertexArrays(n, arrays_handle);
            }
        }
        /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
        public static unsafe void CreateVertexArrays(int n, Span<int> arrays)
        {
            fixed (int* arrays_ptr = arrays)
            {
                CreateVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
        public static unsafe void CreateVertexArrays(int n, int[] arrays)
        {
            fixed (int* arrays_ptr = arrays)
            {
                CreateVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
        public static unsafe void CreateVertexArrays(int n, ref int arrays)
        {
            fixed (int* arrays_ptr = &arrays)
            {
                CreateVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
        public static unsafe void DebugMessageCallback(GLDebugProc callback, IntPtr userParam)
        {
            void* userParam_vptr = (void*)userParam;
            IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
            DebugMessageCallback(callback_ptr, userParam_vptr);
        }
        /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
        public static unsafe void DebugMessageCallback<T1>(GLDebugProc callback, ReadOnlySpan<T1> userParam)
            where T1 : unmanaged
        {
            fixed (void* userParam_ptr = userParam)
            {
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallback(callback_ptr, userParam_ptr);
            }
        }
        /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
        public static unsafe void DebugMessageCallback<T1>(GLDebugProc callback, T1[] userParam)
            where T1 : unmanaged
        {
            fixed (void* userParam_ptr = userParam)
            {
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallback(callback_ptr, userParam_ptr);
            }
        }
        /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
        public static unsafe void DebugMessageCallback<T1>(GLDebugProc callback, ref readonly T1 userParam)
            where T1 : unmanaged
        {
            fixed (void* userParam_ptr = &userParam)
            {
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallback(callback_ptr, userParam_ptr);
            }
        }
        /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
        public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, ReadOnlySpan<uint> ids, bool enabled)
        {
            fixed (uint* ids_ptr = ids)
            {
                DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
            }
        }
        /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
        public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, uint[] ids, bool enabled)
        {
            fixed (uint* ids_ptr = ids)
            {
                DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
            }
        }
        /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
        public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, ref readonly uint ids, bool enabled)
        {
            fixed (uint* ids_ptr = &ids)
            {
                DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
            }
        }
        /// <inheritdoc cref="DebugMessageInsert(DebugSource, DebugType, uint, DebugSeverity, int, byte*)"/>
        public static unsafe void DebugMessageInsert(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
        {
            byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
            DebugMessageInsert(source, type, id, severity, length, buf_ptr);
            Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
        }
        /// <inheritdoc cref="DeleteBuffers(int, int*)"/>
        public static unsafe void DeleteBuffer(int buffer)
        {
            int n = 1;
            int* buffers_handle = &buffer;
            DeleteBuffers(n, buffers_handle);
        }
        /// <inheritdoc cref="DeleteBuffers(int, int*)"/>
        public static unsafe void DeleteBuffers(int n, ReadOnlySpan<int> buffers)
        {
            fixed (int* buffers_ptr = buffers)
            {
                DeleteBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteBuffers(int, int*)"/>
        public static unsafe void DeleteBuffers(int n, int[] buffers)
        {
            fixed (int* buffers_ptr = buffers)
            {
                DeleteBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteBuffers(int, int*)"/>
        public static unsafe void DeleteBuffers(int n, ref readonly int buffers)
        {
            fixed (int* buffers_ptr = &buffers)
            {
                DeleteBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
        public static unsafe void DeleteFramebuffer(int framebuffer)
        {
            int n = 1;
            int* framebuffers_handle = &framebuffer;
            DeleteFramebuffers(n, framebuffers_handle);
        }
        /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
        public static unsafe void DeleteFramebuffers(int n, ReadOnlySpan<int> framebuffers)
        {
            fixed (int* framebuffers_ptr = framebuffers)
            {
                DeleteFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
        public static unsafe void DeleteFramebuffers(int n, int[] framebuffers)
        {
            fixed (int* framebuffers_ptr = framebuffers)
            {
                DeleteFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
        public static unsafe void DeleteFramebuffers(int n, ref readonly int framebuffers)
        {
            fixed (int* framebuffers_ptr = &framebuffers)
            {
                DeleteFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
        public static unsafe void DeleteProgramPipeline(int pipeline)
        {
            int n = 1;
            int* pipelines_handle = &pipeline;
            DeleteProgramPipelines(n, pipelines_handle);
        }
        /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
        public static unsafe void DeleteProgramPipelines(int n, ReadOnlySpan<int> pipelines)
        {
            fixed (int* pipelines_ptr = pipelines)
            {
                DeleteProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
        public static unsafe void DeleteProgramPipelines(int n, int[] pipelines)
        {
            fixed (int* pipelines_ptr = pipelines)
            {
                DeleteProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
        public static unsafe void DeleteProgramPipelines(int n, ref readonly int pipelines)
        {
            fixed (int* pipelines_ptr = &pipelines)
            {
                DeleteProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="DeleteQueries(int, int*)"/>
        public static unsafe void DeleteQuery(int id)
        {
            int n = 1;
            int* ids_handle = &id;
            DeleteQueries(n, ids_handle);
        }
        /// <inheritdoc cref="DeleteQueries(int, int*)"/>
        public static unsafe void DeleteQueries(int n, ReadOnlySpan<int> ids)
        {
            fixed (int* ids_ptr = ids)
            {
                DeleteQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteQueries(int, int*)"/>
        public static unsafe void DeleteQueries(int n, int[] ids)
        {
            fixed (int* ids_ptr = ids)
            {
                DeleteQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteQueries(int, int*)"/>
        public static unsafe void DeleteQueries(int n, ref readonly int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                DeleteQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
        public static unsafe void DeleteRenderbuffer(int renderbuffer)
        {
            int n = 1;
            int* renderbuffers_handle = &renderbuffer;
            DeleteRenderbuffers(n, renderbuffers_handle);
        }
        /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
        public static unsafe void DeleteRenderbuffers(int n, ReadOnlySpan<int> renderbuffers)
        {
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                DeleteRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
        public static unsafe void DeleteRenderbuffers(int n, int[] renderbuffers)
        {
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                DeleteRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
        public static unsafe void DeleteRenderbuffers(int n, ref readonly int renderbuffers)
        {
            fixed (int* renderbuffers_ptr = &renderbuffers)
            {
                DeleteRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
        public static unsafe void DeleteSampler(int sampler)
        {
            int count = 1;
            int* samplers_handle = &sampler;
            DeleteSamplers(count, samplers_handle);
        }
        /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
        public static unsafe void DeleteSamplers(int count, ReadOnlySpan<int> samplers)
        {
            fixed (int* samplers_ptr = samplers)
            {
                DeleteSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
        public static unsafe void DeleteSamplers(int count, int[] samplers)
        {
            fixed (int* samplers_ptr = samplers)
            {
                DeleteSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
        public static unsafe void DeleteSamplers(int count, ref readonly int samplers)
        {
            fixed (int* samplers_ptr = &samplers)
            {
                DeleteSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTextures(int, int*)"/>
        public static unsafe void DeleteTexture(int texture)
        {
            int n = 1;
            int* textures_handle = &texture;
            DeleteTextures(n, textures_handle);
        }
        /// <inheritdoc cref="DeleteTextures(int, int*)"/>
        public static unsafe void DeleteTextures(int n, ReadOnlySpan<int> textures)
        {
            fixed (int* textures_ptr = textures)
            {
                DeleteTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTextures(int, int*)"/>
        public static unsafe void DeleteTextures(int n, int[] textures)
        {
            fixed (int* textures_ptr = textures)
            {
                DeleteTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTextures(int, int*)"/>
        public static unsafe void DeleteTextures(int n, ref readonly int textures)
        {
            fixed (int* textures_ptr = &textures)
            {
                DeleteTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
        public static unsafe void DeleteTransformFeedback(int id)
        {
            int n = 1;
            int* ids_handle = &id;
            DeleteTransformFeedbacks(n, ids_handle);
        }
        /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
        public static unsafe void DeleteTransformFeedbacks(int n, ReadOnlySpan<int> ids)
        {
            fixed (int* ids_ptr = ids)
            {
                DeleteTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
        public static unsafe void DeleteTransformFeedbacks(int n, int[] ids)
        {
            fixed (int* ids_ptr = ids)
            {
                DeleteTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
        public static unsafe void DeleteTransformFeedbacks(int n, ref readonly int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                DeleteTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
        public static unsafe void DeleteVertexArray(int array)
        {
            int n = 1;
            int* arrays_handle = &array;
            DeleteVertexArrays(n, arrays_handle);
        }
        /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
        public static unsafe void DeleteVertexArrays(int n, ReadOnlySpan<int> arrays)
        {
            fixed (int* arrays_ptr = arrays)
            {
                DeleteVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
        public static unsafe void DeleteVertexArrays(int n, int[] arrays)
        {
            fixed (int* arrays_ptr = arrays)
            {
                DeleteVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
        public static unsafe void DeleteVertexArrays(int n, ref readonly int arrays)
        {
            fixed (int* arrays_ptr = &arrays)
            {
                DeleteVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
        public static unsafe void DepthRangeArray(uint first, int count, ReadOnlySpan<double> v)
        {
            fixed (double* v_ptr = v)
            {
                DepthRangeArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
        public static unsafe void DepthRangeArray(uint first, int count, double[] v)
        {
            fixed (double* v_ptr = v)
            {
                DepthRangeArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
        public static unsafe void DepthRangeArray(uint first, int count, ref readonly double v)
        {
            fixed (double* v_ptr = &v)
            {
                DepthRangeArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
        public static unsafe void DrawArraysIndirect(PrimitiveType mode, IntPtr indirect)
        {
            void* indirect_vptr = (void*)indirect;
            DrawArraysIndirect(mode, indirect_vptr);
        }
        /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
        public static unsafe void DrawArraysIndirect<T1>(PrimitiveType mode, ReadOnlySpan<T1> indirect)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                DrawArraysIndirect(mode, indirect_ptr);
            }
        }
        /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
        public static unsafe void DrawArraysIndirect<T1>(PrimitiveType mode, T1[] indirect)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                DrawArraysIndirect(mode, indirect_ptr);
            }
        }
        /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
        public static unsafe void DrawArraysIndirect<T1>(PrimitiveType mode, ref readonly T1 indirect)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                DrawArraysIndirect(mode, indirect_ptr);
            }
        }
        /// <inheritdoc cref="DrawBuffers(int, DrawBufferMode*)"/>
        public static unsafe void DrawBuffers(int n, ReadOnlySpan<DrawBufferMode> bufs)
        {
            fixed (DrawBufferMode* bufs_ptr = bufs)
            {
                DrawBuffers(n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="DrawBuffers(int, DrawBufferMode*)"/>
        public static unsafe void DrawBuffers(int n, DrawBufferMode[] bufs)
        {
            fixed (DrawBufferMode* bufs_ptr = bufs)
            {
                DrawBuffers(n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="DrawBuffers(int, DrawBufferMode*)"/>
        public static unsafe void DrawBuffers(int n, ref readonly DrawBufferMode bufs)
        {
            fixed (DrawBufferMode* bufs_ptr = &bufs)
            {
                DrawBuffers(n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="DrawElements(PrimitiveType, int, DrawElementsType, void*)"/>
        public static unsafe void DrawElements(PrimitiveType mode, int count, DrawElementsType type, nint offset)
        {
            void* indices = (void*)offset;
            DrawElements(mode, count, type, indices);
        }
        /// <inheritdoc cref="DrawElementsBaseVertex(PrimitiveType, int, DrawElementsType, void*, int)"/>
        public static unsafe void DrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint offset, int basevertex)
        {
            void* indices = (void*)offset;
            DrawElementsBaseVertex(mode, count, type, indices, basevertex);
        }
        /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
        public static unsafe void DrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect)
        {
            void* indirect_vptr = (void*)indirect;
            DrawElementsIndirect(mode, type, indirect_vptr);
        }
        /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
        public static unsafe void DrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                DrawElementsIndirect(mode, type, indirect_ptr);
            }
        }
        /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
        public static unsafe void DrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, T1[] indirect)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                DrawElementsIndirect(mode, type, indirect_ptr);
            }
        }
        /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
        public static unsafe void DrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, ref readonly T1 indirect)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                DrawElementsIndirect(mode, type, indirect_ptr);
            }
        }
        /// <inheritdoc cref="DrawElementsInstanced(PrimitiveType, int, DrawElementsType, void*, int)"/>
        public static unsafe void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount)
        {
            void* indices = (void*)offset;
            DrawElementsInstanced(mode, count, type, indices, instancecount);
        }
        /// <inheritdoc cref="DrawElementsInstancedBaseInstance(PrimitiveType, int, DrawElementsType, void*, int, uint)"/>
        public static unsafe void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, uint baseinstance)
        {
            void* indices = (void*)offset;
            DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
        }
        /// <inheritdoc cref="DrawElementsInstancedBaseVertex(PrimitiveType, int, DrawElementsType, void*, int, int)"/>
        public static unsafe void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, int basevertex)
        {
            void* indices = (void*)offset;
            DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
        }
        /// <inheritdoc cref="DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType, int, DrawElementsType, void*, int, int, uint)"/>
        public static unsafe void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, int basevertex, uint baseinstance)
        {
            void* indices = (void*)offset;
            DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }
        /// <inheritdoc cref="DrawPixels(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void DrawPixels(int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            DrawPixels(width, height, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="DrawPixels(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void DrawPixels<T1>(int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                DrawPixels(width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="DrawPixels(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void DrawPixels<T1>(int width, int height, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                DrawPixels(width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="DrawPixels(int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void DrawPixels<T1>(int width, int height, PixelFormat format, PixelType type, ref readonly T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                DrawPixels(width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="DrawRangeElements(PrimitiveType, uint, uint, int, DrawElementsType, void*)"/>
        public static unsafe void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint offset)
        {
            void* indices = (void*)offset;
            DrawRangeElements(mode, start, end, count, type, indices);
        }
        /// <inheritdoc cref="DrawRangeElementsBaseVertex(PrimitiveType, uint, uint, int, DrawElementsType, void*, int)"/>
        public static unsafe void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint offset, int basevertex)
        {
            void* indices = (void*)offset;
            DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
        }
        /// <inheritdoc cref="EdgeFlagPointer(int, void*)"/>
        public static unsafe void EdgeFlagPointer(int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            EdgeFlagPointer(stride, pointer_vptr);
        }
        /// <inheritdoc cref="EdgeFlagPointer(int, void*)"/>
        public static unsafe void EdgeFlagPointer<T1>(int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                EdgeFlagPointer(stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="EdgeFlagPointer(int, void*)"/>
        public static unsafe void EdgeFlagPointer<T1>(int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                EdgeFlagPointer(stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="EdgeFlagPointer(int, void*)"/>
        public static unsafe void EdgeFlagPointer<T1>(int stride, ref readonly T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                EdgeFlagPointer(stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="EdgeFlagv(bool*)"/>
        public static unsafe void EdgeFlag(ref readonly bool flag)
        {
            fixed (bool* flag_ptr = &flag)
            {
                EdgeFlagv(flag_ptr);
            }
        }
        /// <inheritdoc cref="EvalCoord1dv(double*)"/>
        public static unsafe void EvalCoord1d(ref readonly double u)
        {
            fixed (double* tmp_u = &u)
            {
                double* u_ptr = (double*)tmp_u;
                EvalCoord1dv(u_ptr);
            }
        }
        /// <inheritdoc cref="EvalCoord1fv(float*)"/>
        public static unsafe void EvalCoord1f(ref readonly float u)
        {
            fixed (float* tmp_u = &u)
            {
                float* u_ptr = (float*)tmp_u;
                EvalCoord1fv(u_ptr);
            }
        }
        /// <inheritdoc cref="EvalCoord2dv(double*)"/>
        public static unsafe void EvalCoord2d(ref readonly Vector2d u)
        {
            fixed (Vector2d* tmp_u = &u)
            {
                double* u_ptr = (double*)tmp_u;
                EvalCoord2dv(u_ptr);
            }
        }
        /// <inheritdoc cref="EvalCoord2fv(float*)"/>
        public static unsafe void EvalCoord2f(ref readonly Vector2 u)
        {
            fixed (Vector2* tmp_u = &u)
            {
                float* u_ptr = (float*)tmp_u;
                EvalCoord2fv(u_ptr);
            }
        }
        /// <inheritdoc cref="EvalCoord2fv(float*)"/>
        public static unsafe void EvalCoord2f(ref readonly System.Numerics.Vector2 u)
        {
            fixed (System.Numerics.Vector2* tmp_u = &u)
            {
                float* u_ptr = (float*)tmp_u;
                EvalCoord2fv(u_ptr);
            }
        }
        /// <inheritdoc cref="EvalCoord2fv(float*)"/>
        public static unsafe void EvalCoord2f(ReadOnlySpan<System.Numerics.Vector2> u)
        {
            fixed (System.Numerics.Vector2* tmp_u = u)
            {
                float* u_ptr = (float*)tmp_u;
                EvalCoord2fv(u_ptr);
            }
        }
        /// <inheritdoc cref="EvalCoord2fv(float*)"/>
        public static unsafe void EvalCoord2f(System.Numerics.Vector2[] u)
        {
            fixed (System.Numerics.Vector2* tmp_u = u)
            {
                float* u_ptr = (float*)tmp_u;
                EvalCoord2fv(u_ptr);
            }
        }
        /// <inheritdoc cref="FeedbackBuffer(int, FeedbackType, float*)"/>
        public static unsafe void FeedbackBuffer(int size, FeedbackType type, Span<float> buffer)
        {
            fixed (float* buffer_ptr = buffer)
            {
                FeedbackBuffer(size, type, buffer_ptr);
            }
        }
        /// <inheritdoc cref="FeedbackBuffer(int, FeedbackType, float*)"/>
        public static unsafe void FeedbackBuffer(int size, FeedbackType type, float[] buffer)
        {
            fixed (float* buffer_ptr = buffer)
            {
                FeedbackBuffer(size, type, buffer_ptr);
            }
        }
        /// <inheritdoc cref="FeedbackBuffer(int, FeedbackType, float*)"/>
        public static unsafe void FeedbackBuffer(int size, FeedbackType type, ref float buffer)
        {
            fixed (float* buffer_ptr = &buffer)
            {
                FeedbackBuffer(size, type, buffer_ptr);
            }
        }
        /// <inheritdoc cref="FogCoorddv(double*)"/>
        public static unsafe void FogCoordd(ref readonly double coord)
        {
            fixed (double* coord_ptr = &coord)
            {
                FogCoorddv(coord_ptr);
            }
        }
        /// <inheritdoc cref="FogCoordfv(float*)"/>
        public static unsafe void FogCoordf(ref readonly float coord)
        {
            fixed (float* coord_ptr = &coord)
            {
                FogCoordfv(coord_ptr);
            }
        }
        /// <inheritdoc cref="FogCoordPointer(FogPointerTypeEXT, int, void*)"/>
        public static unsafe void FogCoordPointer(FogPointerTypeEXT type, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            FogCoordPointer(type, stride, pointer_vptr);
        }
        /// <inheritdoc cref="FogCoordPointer(FogPointerTypeEXT, int, void*)"/>
        public static unsafe void FogCoordPointer<T1>(FogPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                FogCoordPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="FogCoordPointer(FogPointerTypeEXT, int, void*)"/>
        public static unsafe void FogCoordPointer<T1>(FogPointerTypeEXT type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                FogCoordPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="FogCoordPointer(FogPointerTypeEXT, int, void*)"/>
        public static unsafe void FogCoordPointer<T1>(FogPointerTypeEXT type, int stride, ref readonly T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                FogCoordPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="Fogfv(FogParameter, float*)"/>
        public static unsafe void Fogf(FogParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                Fogfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Fogfv(FogParameter, float*)"/>
        public static unsafe void Fogf(FogParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                Fogfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Fogfv(FogParameter, float*)"/>
        public static unsafe void Fogf(FogParameter pname, ref readonly float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                Fogfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Fogiv(FogParameter, int*)"/>
        public static unsafe void Fogi(FogParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                Fogiv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Fogiv(FogParameter, int*)"/>
        public static unsafe void Fogi(FogParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                Fogiv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Fogiv(FogParameter, int*)"/>
        public static unsafe void Fogi(FogParameter pname, ref readonly int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                Fogiv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GenBuffers(int, int*)"/>
        public static unsafe int GenBuffer()
        {
            int buffer;
            int n = 1;
            Unsafe.SkipInit(out buffer);
            int* buffers_handle = &buffer;
            GenBuffers(n, buffers_handle);
            return buffer;
        }
        /// <inheritdoc cref="GenBuffers(int, int*)"/>
        public static unsafe void GenBuffer(out int buffer)
        {
            int n = 1;
            Unsafe.SkipInit(out buffer);
            fixed(int* buffers_handle = &buffer)
            {
                GenBuffers(n, buffers_handle);
            }
        }
        /// <inheritdoc cref="GenBuffers(int, int*)"/>
        public static unsafe void GenBuffers(int n, Span<int> buffers)
        {
            fixed (int* buffers_ptr = buffers)
            {
                GenBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="GenBuffers(int, int*)"/>
        public static unsafe void GenBuffers(int n, int[] buffers)
        {
            fixed (int* buffers_ptr = buffers)
            {
                GenBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="GenBuffers(int, int*)"/>
        public static unsafe void GenBuffers(int n, ref int buffers)
        {
            fixed (int* buffers_ptr = &buffers)
            {
                GenBuffers(n, buffers_ptr);
            }
        }
        /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
        public static unsafe int GenFramebuffer()
        {
            int framebuffer;
            int n = 1;
            Unsafe.SkipInit(out framebuffer);
            int* framebuffers_handle = &framebuffer;
            GenFramebuffers(n, framebuffers_handle);
            return framebuffer;
        }
        /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
        public static unsafe void GenFramebuffer(out int framebuffer)
        {
            int n = 1;
            Unsafe.SkipInit(out framebuffer);
            fixed(int* framebuffers_handle = &framebuffer)
            {
                GenFramebuffers(n, framebuffers_handle);
            }
        }
        /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
        public static unsafe void GenFramebuffers(int n, Span<int> framebuffers)
        {
            fixed (int* framebuffers_ptr = framebuffers)
            {
                GenFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
        public static unsafe void GenFramebuffers(int n, int[] framebuffers)
        {
            fixed (int* framebuffers_ptr = framebuffers)
            {
                GenFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
        public static unsafe void GenFramebuffers(int n, ref int framebuffers)
        {
            fixed (int* framebuffers_ptr = &framebuffers)
            {
                GenFramebuffers(n, framebuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
        public static unsafe int GenProgramPipeline()
        {
            int pipeline;
            int n = 1;
            Unsafe.SkipInit(out pipeline);
            int* pipelines_handle = &pipeline;
            GenProgramPipelines(n, pipelines_handle);
            return pipeline;
        }
        /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
        public static unsafe void GenProgramPipeline(out int pipeline)
        {
            int n = 1;
            Unsafe.SkipInit(out pipeline);
            fixed(int* pipelines_handle = &pipeline)
            {
                GenProgramPipelines(n, pipelines_handle);
            }
        }
        /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
        public static unsafe void GenProgramPipelines(int n, Span<int> pipelines)
        {
            fixed (int* pipelines_ptr = pipelines)
            {
                GenProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
        public static unsafe void GenProgramPipelines(int n, int[] pipelines)
        {
            fixed (int* pipelines_ptr = pipelines)
            {
                GenProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
        public static unsafe void GenProgramPipelines(int n, ref int pipelines)
        {
            fixed (int* pipelines_ptr = &pipelines)
            {
                GenProgramPipelines(n, pipelines_ptr);
            }
        }
        /// <inheritdoc cref="GenQueries(int, int*)"/>
        public static unsafe int GenQuery()
        {
            int id;
            int n = 1;
            Unsafe.SkipInit(out id);
            int* ids_handle = &id;
            GenQueries(n, ids_handle);
            return id;
        }
        /// <inheritdoc cref="GenQueries(int, int*)"/>
        public static unsafe void GenQuery(out int id)
        {
            int n = 1;
            Unsafe.SkipInit(out id);
            fixed(int* ids_handle = &id)
            {
                GenQueries(n, ids_handle);
            }
        }
        /// <inheritdoc cref="GenQueries(int, int*)"/>
        public static unsafe void GenQueries(int n, Span<int> ids)
        {
            fixed (int* ids_ptr = ids)
            {
                GenQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenQueries(int, int*)"/>
        public static unsafe void GenQueries(int n, int[] ids)
        {
            fixed (int* ids_ptr = ids)
            {
                GenQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenQueries(int, int*)"/>
        public static unsafe void GenQueries(int n, ref int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                GenQueries(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
        public static unsafe int GenRenderbuffer()
        {
            int renderbuffer;
            int n = 1;
            Unsafe.SkipInit(out renderbuffer);
            int* renderbuffers_handle = &renderbuffer;
            GenRenderbuffers(n, renderbuffers_handle);
            return renderbuffer;
        }
        /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
        public static unsafe void GenRenderbuffer(out int renderbuffer)
        {
            int n = 1;
            Unsafe.SkipInit(out renderbuffer);
            fixed(int* renderbuffers_handle = &renderbuffer)
            {
                GenRenderbuffers(n, renderbuffers_handle);
            }
        }
        /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
        public static unsafe void GenRenderbuffers(int n, Span<int> renderbuffers)
        {
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                GenRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
        public static unsafe void GenRenderbuffers(int n, int[] renderbuffers)
        {
            fixed (int* renderbuffers_ptr = renderbuffers)
            {
                GenRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
        public static unsafe void GenRenderbuffers(int n, ref int renderbuffers)
        {
            fixed (int* renderbuffers_ptr = &renderbuffers)
            {
                GenRenderbuffers(n, renderbuffers_ptr);
            }
        }
        /// <inheritdoc cref="GenSamplers(int, int*)"/>
        public static unsafe int GenSampler()
        {
            int sampler;
            int count = 1;
            Unsafe.SkipInit(out sampler);
            int* samplers_handle = &sampler;
            GenSamplers(count, samplers_handle);
            return sampler;
        }
        /// <inheritdoc cref="GenSamplers(int, int*)"/>
        public static unsafe void GenSampler(out int sampler)
        {
            int count = 1;
            Unsafe.SkipInit(out sampler);
            fixed(int* samplers_handle = &sampler)
            {
                GenSamplers(count, samplers_handle);
            }
        }
        /// <inheritdoc cref="GenSamplers(int, int*)"/>
        public static unsafe void GenSamplers(int count, Span<int> samplers)
        {
            fixed (int* samplers_ptr = samplers)
            {
                GenSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="GenSamplers(int, int*)"/>
        public static unsafe void GenSamplers(int count, int[] samplers)
        {
            fixed (int* samplers_ptr = samplers)
            {
                GenSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="GenSamplers(int, int*)"/>
        public static unsafe void GenSamplers(int count, ref int samplers)
        {
            fixed (int* samplers_ptr = &samplers)
            {
                GenSamplers(count, samplers_ptr);
            }
        }
        /// <inheritdoc cref="GenTextures(int, int*)"/>
        public static unsafe int GenTexture()
        {
            int texture;
            int n = 1;
            Unsafe.SkipInit(out texture);
            int* textures_handle = &texture;
            GenTextures(n, textures_handle);
            return texture;
        }
        /// <inheritdoc cref="GenTextures(int, int*)"/>
        public static unsafe void GenTexture(out int texture)
        {
            int n = 1;
            Unsafe.SkipInit(out texture);
            fixed(int* textures_handle = &texture)
            {
                GenTextures(n, textures_handle);
            }
        }
        /// <inheritdoc cref="GenTextures(int, int*)"/>
        public static unsafe void GenTextures(int n, Span<int> textures)
        {
            fixed (int* textures_ptr = textures)
            {
                GenTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="GenTextures(int, int*)"/>
        public static unsafe void GenTextures(int n, int[] textures)
        {
            fixed (int* textures_ptr = textures)
            {
                GenTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="GenTextures(int, int*)"/>
        public static unsafe void GenTextures(int n, ref int textures)
        {
            fixed (int* textures_ptr = &textures)
            {
                GenTextures(n, textures_ptr);
            }
        }
        /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
        public static unsafe int GenTransformFeedback()
        {
            int id;
            int n = 1;
            Unsafe.SkipInit(out id);
            int* ids_handle = &id;
            GenTransformFeedbacks(n, ids_handle);
            return id;
        }
        /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
        public static unsafe void GenTransformFeedback(out int id)
        {
            int n = 1;
            Unsafe.SkipInit(out id);
            fixed(int* ids_handle = &id)
            {
                GenTransformFeedbacks(n, ids_handle);
            }
        }
        /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
        public static unsafe void GenTransformFeedbacks(int n, Span<int> ids)
        {
            fixed (int* ids_ptr = ids)
            {
                GenTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
        public static unsafe void GenTransformFeedbacks(int n, int[] ids)
        {
            fixed (int* ids_ptr = ids)
            {
                GenTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
        public static unsafe void GenTransformFeedbacks(int n, ref int ids)
        {
            fixed (int* ids_ptr = &ids)
            {
                GenTransformFeedbacks(n, ids_ptr);
            }
        }
        /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
        public static unsafe int GenVertexArray()
        {
            int array;
            int n = 1;
            Unsafe.SkipInit(out array);
            int* arrays_handle = &array;
            GenVertexArrays(n, arrays_handle);
            return array;
        }
        /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
        public static unsafe void GenVertexArray(out int array)
        {
            int n = 1;
            Unsafe.SkipInit(out array);
            fixed(int* arrays_handle = &array)
            {
                GenVertexArrays(n, arrays_handle);
            }
        }
        /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
        public static unsafe void GenVertexArrays(int n, Span<int> arrays)
        {
            fixed (int* arrays_ptr = arrays)
            {
                GenVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
        public static unsafe void GenVertexArrays(int n, int[] arrays)
        {
            fixed (int* arrays_ptr = arrays)
            {
                GenVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
        public static unsafe void GenVertexArrays(int n, ref int arrays)
        {
            fixed (int* arrays_ptr = &arrays)
            {
                GenVertexArrays(n, arrays_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
        public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
        public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
        public static unsafe int GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
        public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveAttrib(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe string GetActiveAttrib(int program, uint index, int bufSize, out int length, out int size, out AttributeType type)
        {
            string name;
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (AttributeType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveAttrib(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe void GetActiveAttrib(int program, uint index, int bufSize, out int length, out int size, out AttributeType type, out string name)
        {
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (AttributeType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, out int length)
        {
            string name;
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, out int length, out string name)
        {
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
        public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, Span<int> values)
        {
            fixed (int* values_ptr = values)
            {
                GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
        public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, int[] values)
        {
            fixed (int* values_ptr = values)
            {
                GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
        public static unsafe int GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname)
        {
            int values;
            int* values_ptr = &values;
            {
                GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
            }
            return values;
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
        public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, out int values)
        {
            fixed (int* values_ptr = &values)
            {
                GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, out int length)
        {
            string name;
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, out int length, out string name)
        {
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniform(int, uint, int, int*, int*, UniformType*, byte*)"/>
        public static unsafe string GetActiveUniform(int program, uint index, int bufSize, out int length, out int size, out UniformType type)
        {
            string name;
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (UniformType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetActiveUniform(int, uint, int, int*, int*, UniformType*, byte*)"/>
        public static unsafe void GetActiveUniform(int program, uint index, int bufSize, out int length, out int size, out UniformType type, out string name)
        {
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (UniformType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
        public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
        public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
        public static unsafe int GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
        public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, out int length)
        {
            string uniformBlockName;
            fixed (int* length_ptr = &length)
            {
                var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            }
            return uniformBlockName;
        }
        /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, out int length, out string uniformBlockName)
        {
            fixed (int* length_ptr = &length)
            {
                var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
        public static unsafe string GetActiveUniformName(int program, uint uniformIndex, int bufSize, out int length)
        {
            string uniformName;
            fixed (int* length_ptr = &length)
            {
                var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
            }
            return uniformName;
        }
        /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
        public static unsafe void GetActiveUniformName(int program, uint uniformIndex, int bufSize, out int length, out string uniformName)
        {
            fixed (int* length_ptr = &length)
            {
                var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
            }
        }
        /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
        public static unsafe void GetActiveUniformsi(int program, int uniformCount, ReadOnlySpan<uint> uniformIndices, UniformPName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                fixed (uint* uniformIndices_ptr = uniformIndices)
                {
                    GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
        public static unsafe void GetActiveUniformsi(int program, int uniformCount, uint[] uniformIndices, UniformPName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                fixed (uint* uniformIndices_ptr = uniformIndices)
                {
                    GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
        public static unsafe int GetActiveUniformsi(int program, int uniformCount, ref readonly uint uniformIndices, UniformPName pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            fixed (uint* uniformIndices_ptr = &uniformIndices)
            {
                GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
        public static unsafe void GetActiveUniformsi(int program, int uniformCount, ref readonly uint uniformIndices, UniformPName pname, out int parameters)
        {
            fixed (uint* uniformIndices_ptr = &uniformIndices)
            fixed (int* parameters_ptr = &parameters)
            {
                GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetAttachedShaders(int, int, int*, int*)"/>
        public static unsafe void GetAttachedShaders(int program, int maxCount, out int count, Span<int> shaders)
        {
            fixed (int* count_ptr = &count)
            {
                fixed (int* shaders_ptr = shaders)
                {
                    GetAttachedShaders(program, maxCount, count_ptr, shaders_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetAttachedShaders(int, int, int*, int*)"/>
        public static unsafe void GetAttachedShaders(int program, int maxCount, out int count, int[] shaders)
        {
            fixed (int* count_ptr = &count)
            {
                fixed (int* shaders_ptr = shaders)
                {
                    GetAttachedShaders(program, maxCount, count_ptr, shaders_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetAttachedShaders(int, int, int*, int*)"/>
        public static unsafe void GetAttachedShaders(int program, int maxCount, out int count, ref int shaders)
        {
            fixed (int* count_ptr = &count)
            fixed (int* shaders_ptr = &shaders)
            {
                GetAttachedShaders(program, maxCount, count_ptr, shaders_ptr);
            }
        }
        /// <inheritdoc cref="GetAttribLocation(int, byte*)"/>
        public static unsafe int GetAttribLocation(int program, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetAttribLocation(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetBooleani_v(BufferTarget, uint, bool*)"/>
        public static unsafe void GetBoolean(BufferTarget target, uint index, Span<bool> data)
        {
            fixed (bool* data_ptr = data)
            {
                GetBooleani_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleani_v(BufferTarget, uint, bool*)"/>
        public static unsafe void GetBoolean(BufferTarget target, uint index, bool[] data)
        {
            fixed (bool* data_ptr = data)
            {
                GetBooleani_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleani_v(BufferTarget, uint, bool*)"/>
        public static unsafe bool GetBoolean(BufferTarget target, uint index)
        {
            bool data;
            bool* data_ptr = &data;
            {
                GetBooleani_v(target, index, data_ptr);
            }
            return data;
        }
        /// <inheritdoc cref="GetBooleani_v(BufferTarget, uint, bool*)"/>
        public static unsafe void GetBoolean(BufferTarget target, uint index, out bool data)
        {
            fixed (bool* data_ptr = &data)
            {
                GetBooleani_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleanv(GetPName, bool*)"/>
        public static unsafe void GetBoolean(GetPName pname, Span<bool> data)
        {
            fixed (bool* data_ptr = data)
            {
                GetBooleanv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleanv(GetPName, bool*)"/>
        public static unsafe void GetBoolean(GetPName pname, bool[] data)
        {
            fixed (bool* data_ptr = data)
            {
                GetBooleanv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBooleanv(GetPName, bool*)"/>
        public static unsafe bool GetBoolean(GetPName pname)
        {
            bool data;
            bool* data_ptr = &data;
            {
                GetBooleanv(pname, data_ptr);
            }
            return data;
        }
        /// <inheritdoc cref="GetBooleanv(GetPName, bool*)"/>
        public static unsafe void GetBoolean(GetPName pname, out bool data)
        {
            fixed (bool* data_ptr = &data)
            {
                GetBooleanv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteri64v(BufferTarget, BufferPName, long*)"/>
        public static unsafe void GetBufferParameteri64(BufferTarget target, BufferPName pname, Span<long> parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetBufferParameteri64v(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteri64v(BufferTarget, BufferPName, long*)"/>
        public static unsafe void GetBufferParameteri64(BufferTarget target, BufferPName pname, long[] parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetBufferParameteri64v(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteri64v(BufferTarget, BufferPName, long*)"/>
        public static unsafe long GetBufferParameteri64(BufferTarget target, BufferPName pname)
        {
            long parameters;
            long* parameters_ptr = &parameters;
            {
                GetBufferParameteri64v(target, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetBufferParameteri64v(BufferTarget, BufferPName, long*)"/>
        public static unsafe void GetBufferParameteri64(BufferTarget target, BufferPName pname, out long parameters)
        {
            fixed (long* parameters_ptr = &parameters)
            {
                GetBufferParameteri64v(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteriv(BufferTarget, BufferPName, int*)"/>
        public static unsafe void GetBufferParameteri(BufferTarget target, BufferPName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetBufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteriv(BufferTarget, BufferPName, int*)"/>
        public static unsafe void GetBufferParameteri(BufferTarget target, BufferPName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetBufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferParameteriv(BufferTarget, BufferPName, int*)"/>
        public static unsafe int GetBufferParameteri(BufferTarget target, BufferPName pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetBufferParameteriv(target, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetBufferParameteriv(BufferTarget, BufferPName, int*)"/>
        public static unsafe void GetBufferParameteri(BufferTarget target, BufferPName pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetBufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferPointerv(BufferTarget, BufferPointerNameARB, void**)"/>
        public static unsafe void GetBufferPointer(BufferTarget target, BufferPointerNameARB pname, void** parameters)
        {
            GetBufferPointerv(target, pname, parameters);
        }
        /// <inheritdoc cref="GetBufferSubData(BufferTarget, IntPtr, nint, void*)"/>
        public static unsafe void GetBufferSubData(BufferTarget target, IntPtr offset, nint size, IntPtr data)
        {
            void* data_vptr = (void*)data;
            GetBufferSubData(target, offset, size, data_vptr);
        }
        /// <inheritdoc cref="GetBufferSubData(BufferTarget, IntPtr, nint, void*)"/>
        public static unsafe void GetBufferSubData<T1>(BufferTarget target, IntPtr offset, nint size, Span<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                GetBufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferSubData(BufferTarget, IntPtr, nint, void*)"/>
        public static unsafe void GetBufferSubData<T1>(BufferTarget target, IntPtr offset, nint size, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                GetBufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetBufferSubData(BufferTarget, IntPtr, nint, void*)"/>
        public static unsafe void GetBufferSubData<T1>(BufferTarget target, IntPtr offset, nint size, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                GetBufferSubData(target, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetClipPlane(ClipPlaneName, double*)"/>
        public static unsafe void GetClipPlane(ClipPlaneName plane, Span<double> equation)
        {
            fixed (double* equation_ptr = equation)
            {
                GetClipPlane(plane, equation_ptr);
            }
        }
        /// <inheritdoc cref="GetClipPlane(ClipPlaneName, double*)"/>
        public static unsafe void GetClipPlane(ClipPlaneName plane, double[] equation)
        {
            fixed (double* equation_ptr = equation)
            {
                GetClipPlane(plane, equation_ptr);
            }
        }
        /// <inheritdoc cref="GetClipPlane(ClipPlaneName, double*)"/>
        public static unsafe void GetClipPlane(ClipPlaneName plane, ref double equation)
        {
            fixed (double* equation_ptr = &equation)
            {
                GetClipPlane(plane, equation_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
        public static unsafe void GetCompressedTexImage(TextureTarget target, int level, IntPtr img)
        {
            void* img_vptr = (void*)img;
            GetCompressedTexImage(target, level, img_vptr);
        }
        /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
        public static unsafe void GetCompressedTexImage<T1>(TextureTarget target, int level, Span<T1> img)
            where T1 : unmanaged
        {
            fixed (void* img_ptr = img)
            {
                GetCompressedTexImage(target, level, img_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
        public static unsafe void GetCompressedTexImage<T1>(TextureTarget target, int level, T1[] img)
            where T1 : unmanaged
        {
            fixed (void* img_ptr = img)
            {
                GetCompressedTexImage(target, level, img_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
        public static unsafe T1 GetCompressedTexImage<T1>(TextureTarget target, int level)
            where T1 : unmanaged
        {
            T1 img;
            void* img_ptr = &img;
            {
                GetCompressedTexImage(target, level, img_ptr);
            }
            return img;
        }
        /// <inheritdoc cref="GetCompressedTexImage(TextureTarget, int, void*)"/>
        public static unsafe void GetCompressedTexImage<T1>(TextureTarget target, int level, out T1 img)
            where T1 : unmanaged
        {
            fixed (void* img_ptr = &img)
            {
                GetCompressedTexImage(target, level, img_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureImage(int texture, int level, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetCompressedTextureImage(texture, level, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, int bufSize, Span<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, int bufSize, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, Span<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
        public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
        public static unsafe uint GetDebugMessageLog(uint count, int bufSize, Span<DebugSource> sources, Span<DebugType> types, Span<uint> ids, Span<DebugSeverity> severities, Span<int> lengths, out string messageLog)
        {
            uint returnValue;
            fixed (int* lengths_ptr = lengths)
            {
                fixed (DebugSeverity* severities_ptr = severities)
                {
                    fixed (uint* ids_ptr = ids)
                    {
                        fixed (DebugType* types_ptr = types)
                        {
                            fixed (DebugSource* sources_ptr = sources)
                            {
                                var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                            }
                        }
                    }
                }
            }
            return returnValue;
        }
        /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
        public static unsafe uint GetDebugMessageLog(uint count, int bufSize, DebugSource[] sources, DebugType[] types, uint[] ids, DebugSeverity[] severities, int[] lengths, out string messageLog)
        {
            uint returnValue;
            fixed (int* lengths_ptr = lengths)
            {
                fixed (DebugSeverity* severities_ptr = severities)
                {
                    fixed (uint* ids_ptr = ids)
                    {
                        fixed (DebugType* types_ptr = types)
                        {
                            fixed (DebugSource* sources_ptr = sources)
                            {
                                var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                            }
                        }
                    }
                }
            }
            return returnValue;
        }
        /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
        public static unsafe uint GetDebugMessageLog(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, out string messageLog)
        {
            uint returnValue;
            fixed (DebugSource* sources_ptr = &sources)
            fixed (DebugType* types_ptr = &types)
            fixed (uint* ids_ptr = &ids)
            fixed (DebugSeverity* severities_ptr = &severities)
            fixed (int* lengths_ptr = &lengths)
            {
                var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
            }
            return returnValue;
        }
        /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
        public static unsafe void GetDouble(GetPName target, uint index, Span<double> data)
        {
            fixed (double* data_ptr = data)
            {
                GetDoublei_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
        public static unsafe void GetDouble(GetPName target, uint index, double[] data)
        {
            fixed (double* data_ptr = data)
            {
                GetDoublei_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
        public static unsafe double GetDouble(GetPName target, uint index)
        {
            double data;
            double* data_ptr = &data;
            {
                GetDoublei_v(target, index, data_ptr);
            }
            return data;
        }
        /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
        public static unsafe void GetDouble(GetPName target, uint index, out double data)
        {
            fixed (double* data_ptr = &data)
            {
                GetDoublei_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublev(GetPName, double*)"/>
        public static unsafe void GetDouble(GetPName pname, Span<double> data)
        {
            fixed (double* data_ptr = data)
            {
                GetDoublev(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublev(GetPName, double*)"/>
        public static unsafe void GetDouble(GetPName pname, double[] data)
        {
            fixed (double* data_ptr = data)
            {
                GetDoublev(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetDoublev(GetPName, double*)"/>
        public static unsafe double GetDouble(GetPName pname)
        {
            double data;
            double* data_ptr = &data;
            {
                GetDoublev(pname, data_ptr);
            }
            return data;
        }
        /// <inheritdoc cref="GetDoublev(GetPName, double*)"/>
        public static unsafe void GetDouble(GetPName pname, out double data)
        {
            fixed (double* data_ptr = &data)
            {
                GetDoublev(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
        public static unsafe void GetFloat(GetPName target, uint index, Span<float> data)
        {
            fixed (float* data_ptr = data)
            {
                GetFloati_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
        public static unsafe void GetFloat(GetPName target, uint index, float[] data)
        {
            fixed (float* data_ptr = data)
            {
                GetFloati_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
        public static unsafe float GetFloat(GetPName target, uint index)
        {
            float data;
            float* data_ptr = &data;
            {
                GetFloati_v(target, index, data_ptr);
            }
            return data;
        }
        /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
        public static unsafe void GetFloat(GetPName target, uint index, out float data)
        {
            fixed (float* data_ptr = &data)
            {
                GetFloati_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloatv(GetPName, float*)"/>
        public static unsafe void GetFloat(GetPName pname, Span<float> data)
        {
            fixed (float* data_ptr = data)
            {
                GetFloatv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloatv(GetPName, float*)"/>
        public static unsafe void GetFloat(GetPName pname, float[] data)
        {
            fixed (float* data_ptr = data)
            {
                GetFloatv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFloatv(GetPName, float*)"/>
        public static unsafe float GetFloat(GetPName pname)
        {
            float data;
            float* data_ptr = &data;
            {
                GetFloatv(pname, data_ptr);
            }
            return data;
        }
        /// <inheritdoc cref="GetFloatv(GetPName, float*)"/>
        public static unsafe void GetFloat(GetPName pname, out float data)
        {
            fixed (float* data_ptr = &data)
            {
                GetFloatv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetFragDataIndex(int, byte*)"/>
        public static unsafe int GetFragDataIndex(int program, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetFragDataIndex(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetFragDataLocation(int, byte*)"/>
        public static unsafe int GetFragDataLocation(int program, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetFragDataLocation(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe int GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetFramebufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetFramebufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe int GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetFramebufferParameteriv(target, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetFramebufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64i_v(GetPName, uint, long*)"/>
        public static unsafe void GetInteger64(GetPName target, uint index, Span<long> data)
        {
            fixed (long* data_ptr = data)
            {
                GetInteger64i_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64i_v(GetPName, uint, long*)"/>
        public static unsafe void GetInteger64(GetPName target, uint index, long[] data)
        {
            fixed (long* data_ptr = data)
            {
                GetInteger64i_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64i_v(GetPName, uint, long*)"/>
        public static unsafe long GetInteger64(GetPName target, uint index)
        {
            long data;
            long* data_ptr = &data;
            {
                GetInteger64i_v(target, index, data_ptr);
            }
            return data;
        }
        /// <inheritdoc cref="GetInteger64i_v(GetPName, uint, long*)"/>
        public static unsafe void GetInteger64(GetPName target, uint index, out long data)
        {
            fixed (long* data_ptr = &data)
            {
                GetInteger64i_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
        public static unsafe void GetInteger64(GetPName pname, Span<long> data)
        {
            fixed (long* data_ptr = data)
            {
                GetInteger64v(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
        public static unsafe void GetInteger64(GetPName pname, long[] data)
        {
            fixed (long* data_ptr = data)
            {
                GetInteger64v(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
        public static unsafe long GetInteger64(GetPName pname)
        {
            long data;
            long* data_ptr = &data;
            {
                GetInteger64v(pname, data_ptr);
            }
            return data;
        }
        /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
        public static unsafe void GetInteger64(GetPName pname, out long data)
        {
            fixed (long* data_ptr = &data)
            {
                GetInteger64v(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
        public static unsafe void GetInteger(GetPName target, uint index, Span<int> data)
        {
            fixed (int* data_ptr = data)
            {
                GetIntegeri_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
        public static unsafe void GetInteger(GetPName target, uint index, int[] data)
        {
            fixed (int* data_ptr = data)
            {
                GetIntegeri_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
        public static unsafe int GetInteger(GetPName target, uint index)
        {
            int data;
            int* data_ptr = &data;
            {
                GetIntegeri_v(target, index, data_ptr);
            }
            return data;
        }
        /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
        public static unsafe void GetInteger(GetPName target, uint index, out int data)
        {
            fixed (int* data_ptr = &data)
            {
                GetIntegeri_v(target, index, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegerv(GetPName, int*)"/>
        public static unsafe void GetInteger(GetPName pname, Span<int> data)
        {
            fixed (int* data_ptr = data)
            {
                GetIntegerv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegerv(GetPName, int*)"/>
        public static unsafe void GetInteger(GetPName pname, int[] data)
        {
            fixed (int* data_ptr = data)
            {
                GetIntegerv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetIntegerv(GetPName, int*)"/>
        public static unsafe int GetInteger(GetPName pname)
        {
            int data;
            int* data_ptr = &data;
            {
                GetIntegerv(pname, data_ptr);
            }
            return data;
        }
        /// <inheritdoc cref="GetIntegerv(GetPName, int*)"/>
        public static unsafe void GetInteger(GetPName pname, out int data)
        {
            fixed (int* data_ptr = &data)
            {
                GetIntegerv(pname, data_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
        public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, Span<long> parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
        public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, long[] parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
        public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters)
            {
                GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
        public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
        public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
        public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetLightfv(LightName, LightParameter, float*)"/>
        public static unsafe void GetLightf(LightName light, LightParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetLightfv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetLightfv(LightName, LightParameter, float*)"/>
        public static unsafe void GetLightf(LightName light, LightParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetLightfv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetLightfv(LightName, LightParameter, float*)"/>
        public static unsafe float GetLightf(LightName light, LightParameter pname)
        {
            float parameters;
            float* parameters_ptr = &parameters;
            {
                GetLightfv(light, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetLightfv(LightName, LightParameter, float*)"/>
        public static unsafe void GetLightf(LightName light, LightParameter pname, out float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetLightfv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetLightiv(LightName, LightParameter, int*)"/>
        public static unsafe void GetLighti(LightName light, LightParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetLightiv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetLightiv(LightName, LightParameter, int*)"/>
        public static unsafe void GetLighti(LightName light, LightParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetLightiv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetLightiv(LightName, LightParameter, int*)"/>
        public static unsafe int GetLighti(LightName light, LightParameter pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetLightiv(light, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetLightiv(LightName, LightParameter, int*)"/>
        public static unsafe void GetLighti(LightName light, LightParameter pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetLightiv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetMapdv(MapTarget, GetMapQuery, double*)"/>
        public static unsafe void GetMapd(MapTarget target, GetMapQuery query, Span<double> v)
        {
            fixed (double* v_ptr = v)
            {
                GetMapdv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapdv(MapTarget, GetMapQuery, double*)"/>
        public static unsafe void GetMapd(MapTarget target, GetMapQuery query, double[] v)
        {
            fixed (double* v_ptr = v)
            {
                GetMapdv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapdv(MapTarget, GetMapQuery, double*)"/>
        public static unsafe double GetMapd(MapTarget target, GetMapQuery query)
        {
            double v;
            double* v_ptr = &v;
            {
                GetMapdv(target, query, v_ptr);
            }
            return v;
        }
        /// <inheritdoc cref="GetMapdv(MapTarget, GetMapQuery, double*)"/>
        public static unsafe void GetMapd(MapTarget target, GetMapQuery query, out double v)
        {
            fixed (double* v_ptr = &v)
            {
                GetMapdv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapfv(MapTarget, GetMapQuery, float*)"/>
        public static unsafe void GetMapf(MapTarget target, GetMapQuery query, Span<float> v)
        {
            fixed (float* v_ptr = v)
            {
                GetMapfv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapfv(MapTarget, GetMapQuery, float*)"/>
        public static unsafe void GetMapf(MapTarget target, GetMapQuery query, float[] v)
        {
            fixed (float* v_ptr = v)
            {
                GetMapfv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapfv(MapTarget, GetMapQuery, float*)"/>
        public static unsafe float GetMapf(MapTarget target, GetMapQuery query)
        {
            float v;
            float* v_ptr = &v;
            {
                GetMapfv(target, query, v_ptr);
            }
            return v;
        }
        /// <inheritdoc cref="GetMapfv(MapTarget, GetMapQuery, float*)"/>
        public static unsafe void GetMapf(MapTarget target, GetMapQuery query, out float v)
        {
            fixed (float* v_ptr = &v)
            {
                GetMapfv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapiv(MapTarget, GetMapQuery, int*)"/>
        public static unsafe void GetMapi(MapTarget target, GetMapQuery query, Span<int> v)
        {
            fixed (int* v_ptr = v)
            {
                GetMapiv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapiv(MapTarget, GetMapQuery, int*)"/>
        public static unsafe void GetMapi(MapTarget target, GetMapQuery query, int[] v)
        {
            fixed (int* v_ptr = v)
            {
                GetMapiv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMapiv(MapTarget, GetMapQuery, int*)"/>
        public static unsafe int GetMapi(MapTarget target, GetMapQuery query)
        {
            int v;
            int* v_ptr = &v;
            {
                GetMapiv(target, query, v_ptr);
            }
            return v;
        }
        /// <inheritdoc cref="GetMapiv(MapTarget, GetMapQuery, int*)"/>
        public static unsafe void GetMapi(MapTarget target, GetMapQuery query, out int v)
        {
            fixed (int* v_ptr = &v)
            {
                GetMapiv(target, query, v_ptr);
            }
        }
        /// <inheritdoc cref="GetMaterialfv(TriangleFace, MaterialParameter, float*)"/>
        public static unsafe void GetMaterialf(TriangleFace face, MaterialParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetMaterialfv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetMaterialfv(TriangleFace, MaterialParameter, float*)"/>
        public static unsafe void GetMaterialf(TriangleFace face, MaterialParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetMaterialfv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetMaterialfv(TriangleFace, MaterialParameter, float*)"/>
        public static unsafe float GetMaterialf(TriangleFace face, MaterialParameter pname)
        {
            float parameters;
            float* parameters_ptr = &parameters;
            {
                GetMaterialfv(face, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetMaterialfv(TriangleFace, MaterialParameter, float*)"/>
        public static unsafe void GetMaterialf(TriangleFace face, MaterialParameter pname, out float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetMaterialfv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetMaterialiv(TriangleFace, MaterialParameter, int*)"/>
        public static unsafe void GetMateriali(TriangleFace face, MaterialParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetMaterialiv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetMaterialiv(TriangleFace, MaterialParameter, int*)"/>
        public static unsafe void GetMateriali(TriangleFace face, MaterialParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetMaterialiv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetMaterialiv(TriangleFace, MaterialParameter, int*)"/>
        public static unsafe int GetMateriali(TriangleFace face, MaterialParameter pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetMaterialiv(face, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetMaterialiv(TriangleFace, MaterialParameter, int*)"/>
        public static unsafe void GetMateriali(TriangleFace face, MaterialParameter pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetMaterialiv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
        public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, Span<float> val)
        {
            fixed (float* val_ptr = val)
            {
                GetMultisamplefv(pname, index, val_ptr);
            }
        }
        /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
        public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, float[] val)
        {
            fixed (float* val_ptr = val)
            {
                GetMultisamplefv(pname, index, val_ptr);
            }
        }
        /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
        public static unsafe float GetMultisamplef(GetMultisamplePNameNV pname, uint index)
        {
            float val;
            float* val_ptr = &val;
            {
                GetMultisamplefv(pname, index, val_ptr);
            }
            return val;
        }
        /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
        public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, out float val)
        {
            fixed (float* val_ptr = &val)
            {
                GetMultisamplefv(pname, index, val_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferParameteri64v(int, BufferPName, long*)"/>
        public static unsafe void GetNamedBufferParameteri64(int buffer, BufferPName pname, Span<long> parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetNamedBufferParameteri64v(buffer, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferParameteri64v(int, BufferPName, long*)"/>
        public static unsafe void GetNamedBufferParameteri64(int buffer, BufferPName pname, long[] parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetNamedBufferParameteri64v(buffer, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferParameteri64v(int, BufferPName, long*)"/>
        public static unsafe void GetNamedBufferParameteri64(int buffer, BufferPName pname, ref long parameters)
        {
            fixed (long* parameters_ptr = &parameters)
            {
                GetNamedBufferParameteri64v(buffer, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferParameteriv(int, BufferPName, int*)"/>
        public static unsafe void GetNamedBufferParameteri(int buffer, BufferPName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetNamedBufferParameteriv(buffer, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferParameteriv(int, BufferPName, int*)"/>
        public static unsafe void GetNamedBufferParameteri(int buffer, BufferPName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetNamedBufferParameteriv(buffer, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferParameteriv(int, BufferPName, int*)"/>
        public static unsafe void GetNamedBufferParameteri(int buffer, BufferPName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetNamedBufferParameteriv(buffer, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferPointerv(int, BufferPointerNameARB, void**)"/>
        public static unsafe void GetNamedBufferPointer(int buffer, BufferPointerNameARB pname, void** parameters)
        {
            GetNamedBufferPointerv(buffer, pname, parameters);
        }
        /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void GetNamedBufferSubData(int buffer, IntPtr offset, nint size, IntPtr data)
        {
            void* data_vptr = (void*)data;
            GetNamedBufferSubData(buffer, offset, size, data_vptr);
        }
        /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, Span<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                GetNamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                GetNamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                GetNamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedFramebufferAttachmentParameteriv(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetNamedFramebufferAttachmentParameteri(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedFramebufferAttachmentParameteriv(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetNamedFramebufferAttachmentParameteri(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedFramebufferAttachmentParameteriv(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
        public static unsafe void GetNamedFramebufferAttachmentParameteri(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
        public static unsafe void GetNamedFramebufferParameteri(int framebuffer, GetFramebufferParameter pname, Span<int> param)
        {
            fixed (int* param_ptr = param)
            {
                GetNamedFramebufferParameteriv(framebuffer, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
        public static unsafe void GetNamedFramebufferParameteri(int framebuffer, GetFramebufferParameter pname, int[] param)
        {
            fixed (int* param_ptr = param)
            {
                GetNamedFramebufferParameteriv(framebuffer, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
        public static unsafe void GetNamedFramebufferParameteri(int framebuffer, GetFramebufferParameter pname, ref int param)
        {
            fixed (int* param_ptr = &param)
            {
                GetNamedFramebufferParameteriv(framebuffer, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedRenderbufferParameteriv(int, RenderbufferParameterName, int*)"/>
        public static unsafe void GetNamedRenderbufferParameteri(int renderbuffer, RenderbufferParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetNamedRenderbufferParameteriv(renderbuffer, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedRenderbufferParameteriv(int, RenderbufferParameterName, int*)"/>
        public static unsafe void GetNamedRenderbufferParameteri(int renderbuffer, RenderbufferParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetNamedRenderbufferParameteriv(renderbuffer, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetNamedRenderbufferParameteriv(int, RenderbufferParameterName, int*)"/>
        public static unsafe void GetNamedRenderbufferParameteri(int renderbuffer, RenderbufferParameterName pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetNamedRenderbufferParameteriv(renderbuffer, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnColorTable(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnColorTable(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr table)
        {
            void* table_vptr = (void*)table;
            GetnColorTable(target, format, type, bufSize, table_vptr);
        }
        /// <inheritdoc cref="GetnColorTable(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, Span<T1> table)
            where T1 : unmanaged
        {
            fixed (void* table_ptr = table)
            {
                GetnColorTable(target, format, type, bufSize, table_ptr);
            }
        }
        /// <inheritdoc cref="GetnColorTable(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, T1[] table)
            where T1 : unmanaged
        {
            fixed (void* table_ptr = table)
            {
                GetnColorTable(target, format, type, bufSize, table_ptr);
            }
        }
        /// <inheritdoc cref="GetnColorTable(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, ref T1 table)
            where T1 : unmanaged
        {
            fixed (void* table_ptr = &table)
            {
                GetnColorTable(target, format, type, bufSize, table_ptr);
            }
        }
        /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
        public static unsafe void GetnCompressedTexImage(TextureTarget target, int lod, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetnCompressedTexImage(target, lod, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
        public static unsafe void GetnCompressedTexImage<T1>(TextureTarget target, int lod, int bufSize, Span<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetnCompressedTexImage(target, lod, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
        public static unsafe void GetnCompressedTexImage<T1>(TextureTarget target, int lod, int bufSize, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetnCompressedTexImage(target, lod, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnCompressedTexImage(TextureTarget, int, int, void*)"/>
        public static unsafe void GetnCompressedTexImage<T1>(TextureTarget target, int lod, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetnCompressedTexImage(target, lod, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr image)
        {
            void* image_vptr = (void*)image;
            GetnConvolutionFilter(target, format, type, bufSize, image_vptr);
        }
        /// <inheritdoc cref="GetnConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, Span<T1> image)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = image)
            {
                GetnConvolutionFilter(target, format, type, bufSize, image_ptr);
            }
        }
        /// <inheritdoc cref="GetnConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, T1[] image)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = image)
            {
                GetnConvolutionFilter(target, format, type, bufSize, image_ptr);
            }
        }
        /// <inheritdoc cref="GetnConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, ref T1 image)
            where T1 : unmanaged
        {
            fixed (void* image_ptr = &image)
            {
                GetnConvolutionFilter(target, format, type, bufSize, image_ptr);
            }
        }
        /// <inheritdoc cref="GetnHistogram(HistogramTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnHistogram(HistogramTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
        {
            void* values_vptr = (void*)values;
            GetnHistogram(target, reset, format, type, bufSize, values_vptr);
        }
        /// <inheritdoc cref="GetnHistogram(HistogramTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnHistogram<T1>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, Span<T1> values)
            where T1 : unmanaged
        {
            fixed (void* values_ptr = values)
            {
                GetnHistogram(target, reset, format, type, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnHistogram(HistogramTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnHistogram<T1>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, T1[] values)
            where T1 : unmanaged
        {
            fixed (void* values_ptr = values)
            {
                GetnHistogram(target, reset, format, type, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnHistogram(HistogramTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnHistogram<T1>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, ref T1 values)
            where T1 : unmanaged
        {
            fixed (void* values_ptr = &values)
            {
                GetnHistogram(target, reset, format, type, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnMapdv(MapTarget, MapQuery, int, double*)"/>
        public static unsafe void GetnMapd(MapTarget target, MapQuery query, int bufSize, Span<double> v)
        {
            fixed (double* v_ptr = v)
            {
                GetnMapdv(target, query, bufSize, v_ptr);
            }
        }
        /// <inheritdoc cref="GetnMapdv(MapTarget, MapQuery, int, double*)"/>
        public static unsafe void GetnMapd(MapTarget target, MapQuery query, int bufSize, double[] v)
        {
            fixed (double* v_ptr = v)
            {
                GetnMapdv(target, query, bufSize, v_ptr);
            }
        }
        /// <inheritdoc cref="GetnMapdv(MapTarget, MapQuery, int, double*)"/>
        public static unsafe double GetnMapd(MapTarget target, MapQuery query, int bufSize)
        {
            double v;
            double* v_ptr = &v;
            {
                GetnMapdv(target, query, bufSize, v_ptr);
            }
            return v;
        }
        /// <inheritdoc cref="GetnMapdv(MapTarget, MapQuery, int, double*)"/>
        public static unsafe void GetnMapd(MapTarget target, MapQuery query, int bufSize, out double v)
        {
            fixed (double* v_ptr = &v)
            {
                GetnMapdv(target, query, bufSize, v_ptr);
            }
        }
        /// <inheritdoc cref="GetnMapfv(MapTarget, MapQuery, int, float*)"/>
        public static unsafe void GetnMapf(MapTarget target, MapQuery query, int bufSize, Span<float> v)
        {
            fixed (float* v_ptr = v)
            {
                GetnMapfv(target, query, bufSize, v_ptr);
            }
        }
        /// <inheritdoc cref="GetnMapfv(MapTarget, MapQuery, int, float*)"/>
        public static unsafe void GetnMapf(MapTarget target, MapQuery query, int bufSize, float[] v)
        {
            fixed (float* v_ptr = v)
            {
                GetnMapfv(target, query, bufSize, v_ptr);
            }
        }
        /// <inheritdoc cref="GetnMapfv(MapTarget, MapQuery, int, float*)"/>
        public static unsafe void GetnMapf(MapTarget target, MapQuery query, int bufSize, ref float v)
        {
            fixed (float* v_ptr = &v)
            {
                GetnMapfv(target, query, bufSize, v_ptr);
            }
        }
        /// <inheritdoc cref="GetnMapiv(MapTarget, MapQuery, int, int*)"/>
        public static unsafe void GetnMapi(MapTarget target, MapQuery query, int bufSize, Span<int> v)
        {
            fixed (int* v_ptr = v)
            {
                GetnMapiv(target, query, bufSize, v_ptr);
            }
        }
        /// <inheritdoc cref="GetnMapiv(MapTarget, MapQuery, int, int*)"/>
        public static unsafe void GetnMapi(MapTarget target, MapQuery query, int bufSize, int[] v)
        {
            fixed (int* v_ptr = v)
            {
                GetnMapiv(target, query, bufSize, v_ptr);
            }
        }
        /// <inheritdoc cref="GetnMapiv(MapTarget, MapQuery, int, int*)"/>
        public static unsafe void GetnMapi(MapTarget target, MapQuery query, int bufSize, ref int v)
        {
            fixed (int* v_ptr = &v)
            {
                GetnMapiv(target, query, bufSize, v_ptr);
            }
        }
        /// <inheritdoc cref="GetnMinmax(MinmaxTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnMinmax(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
        {
            void* values_vptr = (void*)values;
            GetnMinmax(target, reset, format, type, bufSize, values_vptr);
        }
        /// <inheritdoc cref="GetnMinmax(MinmaxTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnMinmax<T1>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, Span<T1> values)
            where T1 : unmanaged
        {
            fixed (void* values_ptr = values)
            {
                GetnMinmax(target, reset, format, type, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnMinmax(MinmaxTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnMinmax<T1>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, T1[] values)
            where T1 : unmanaged
        {
            fixed (void* values_ptr = values)
            {
                GetnMinmax(target, reset, format, type, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnMinmax(MinmaxTarget, bool, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnMinmax<T1>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, int bufSize, ref T1 values)
            where T1 : unmanaged
        {
            fixed (void* values_ptr = &values)
            {
                GetnMinmax(target, reset, format, type, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnPixelMapfv(PixelMap, int, float*)"/>
        public static unsafe void GetnPixelMapf(PixelMap map, int bufSize, Span<float> values)
        {
            fixed (float* values_ptr = values)
            {
                GetnPixelMapfv(map, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnPixelMapfv(PixelMap, int, float*)"/>
        public static unsafe void GetnPixelMapf(PixelMap map, int bufSize, float[] values)
        {
            fixed (float* values_ptr = values)
            {
                GetnPixelMapfv(map, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnPixelMapfv(PixelMap, int, float*)"/>
        public static unsafe float GetnPixelMapf(PixelMap map, int bufSize)
        {
            float values;
            float* values_ptr = &values;
            {
                GetnPixelMapfv(map, bufSize, values_ptr);
            }
            return values;
        }
        /// <inheritdoc cref="GetnPixelMapfv(PixelMap, int, float*)"/>
        public static unsafe void GetnPixelMapf(PixelMap map, int bufSize, out float values)
        {
            fixed (float* values_ptr = &values)
            {
                GetnPixelMapfv(map, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnPixelMapuiv(PixelMap, int, uint*)"/>
        public static unsafe void GetnPixelMapui(PixelMap map, int bufSize, Span<uint> values)
        {
            fixed (uint* values_ptr = values)
            {
                GetnPixelMapuiv(map, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnPixelMapuiv(PixelMap, int, uint*)"/>
        public static unsafe void GetnPixelMapui(PixelMap map, int bufSize, uint[] values)
        {
            fixed (uint* values_ptr = values)
            {
                GetnPixelMapuiv(map, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnPixelMapuiv(PixelMap, int, uint*)"/>
        public static unsafe void GetnPixelMapui(PixelMap map, int bufSize, ref uint values)
        {
            fixed (uint* values_ptr = &values)
            {
                GetnPixelMapuiv(map, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnPixelMapusv(PixelMap, int, ushort*)"/>
        public static unsafe void GetnPixelMap(PixelMap map, int bufSize, Span<ushort> values)
        {
            fixed (ushort* values_ptr = values)
            {
                GetnPixelMapusv(map, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnPixelMapusv(PixelMap, int, ushort*)"/>
        public static unsafe void GetnPixelMap(PixelMap map, int bufSize, ushort[] values)
        {
            fixed (ushort* values_ptr = values)
            {
                GetnPixelMapusv(map, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnPixelMapusv(PixelMap, int, ushort*)"/>
        public static unsafe void GetnPixelMap(PixelMap map, int bufSize, ref ushort values)
        {
            fixed (ushort* values_ptr = &values)
            {
                GetnPixelMapusv(map, bufSize, values_ptr);
            }
        }
        /// <inheritdoc cref="GetnPolygonStipple(int, byte*)"/>
        public static unsafe void GetnPolygonStipple(int bufSize, Span<byte> pattern)
        {
            fixed (byte* pattern_ptr = pattern)
            {
                GetnPolygonStipple(bufSize, pattern_ptr);
            }
        }
        /// <inheritdoc cref="GetnPolygonStipple(int, byte*)"/>
        public static unsafe void GetnPolygonStipple(int bufSize, byte[] pattern)
        {
            fixed (byte* pattern_ptr = pattern)
            {
                GetnPolygonStipple(bufSize, pattern_ptr);
            }
        }
        /// <inheritdoc cref="GetnPolygonStipple(int, byte*)"/>
        public static unsafe void GetnPolygonStipple(int bufSize, ref byte pattern)
        {
            fixed (byte* pattern_ptr = &pattern)
            {
                GetnPolygonStipple(bufSize, pattern_ptr);
            }
        }
        /// <inheritdoc cref="GetnSeparableFilter(SeparableTarget, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
        public static unsafe void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span)
        {
            void* row_vptr = (void*)row;
            void* column_vptr = (void*)column;
            void* span_vptr = (void*)span;
            GetnSeparableFilter(target, format, type, rowBufSize, row_vptr, columnBufSize, column_vptr, span_vptr);
        }
        /// <inheritdoc cref="GetnSeparableFilter(SeparableTarget, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
        public static unsafe void GetnSeparableFilter<T1, T2, T3>(SeparableTarget target, PixelFormat format, PixelType type, int rowBufSize, Span<T1> row, int columnBufSize, Span<T2> column, Span<T3> span)
            where T1 : unmanaged
            where T2 : unmanaged
            where T3 : unmanaged
        {
            fixed (void* span_ptr = span)
            {
                fixed (void* column_ptr = column)
                {
                    fixed (void* row_ptr = row)
                    {
                        GetnSeparableFilter(target, format, type, rowBufSize, row_ptr, columnBufSize, column_ptr, span_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetnSeparableFilter(SeparableTarget, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
        public static unsafe void GetnSeparableFilter<T1, T2, T3>(SeparableTarget target, PixelFormat format, PixelType type, int rowBufSize, T1[] row, int columnBufSize, T2[] column, T3[] span)
            where T1 : unmanaged
            where T2 : unmanaged
            where T3 : unmanaged
        {
            fixed (void* span_ptr = span)
            {
                fixed (void* column_ptr = column)
                {
                    fixed (void* row_ptr = row)
                    {
                        GetnSeparableFilter(target, format, type, rowBufSize, row_ptr, columnBufSize, column_ptr, span_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetnSeparableFilter(SeparableTarget, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
        public static unsafe void GetnSeparableFilter<T1, T2, T3>(SeparableTarget target, PixelFormat format, PixelType type, int rowBufSize, ref T1 row, int columnBufSize, ref T2 column, ref T3 span)
            where T1 : unmanaged
            where T2 : unmanaged
            where T3 : unmanaged
        {
            fixed (void* row_ptr = &row)
            fixed (void* column_ptr = &column)
            fixed (void* span_ptr = &span)
            {
                GetnSeparableFilter(target, format, type, rowBufSize, row_ptr, columnBufSize, column_ptr, span_ptr);
            }
        }
        /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetnTexImage(target, level, format, type, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, Span<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetnTexImage(target, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetnTexImage(target, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnTexImage(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetnTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetnTexImage(target, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformdv(int, int, int, double*)"/>
        public static unsafe void GetnUniformd(int program, int location, int bufSize, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetnUniformdv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformdv(int, int, int, double*)"/>
        public static unsafe void GetnUniformd(int program, int location, int bufSize, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetnUniformdv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformdv(int, int, int, double*)"/>
        public static unsafe void GetnUniformd(int program, int location, int bufSize, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                GetnUniformdv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
        public static unsafe void GetnUniformf(int program, int location, int bufSize, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetnUniformfv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
        public static unsafe void GetnUniformf(int program, int location, int bufSize, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetnUniformfv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
        public static unsafe void GetnUniformf(int program, int location, int bufSize, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetnUniformfv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
        public static unsafe void GetnUniformi(int program, int location, int bufSize, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetnUniformiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
        public static unsafe void GetnUniformi(int program, int location, int bufSize, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetnUniformiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
        public static unsafe void GetnUniformi(int program, int location, int bufSize, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetnUniformiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
        public static unsafe void GetnUniformui(int program, int location, int bufSize, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetnUniformuiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
        public static unsafe void GetnUniformui(int program, int location, int bufSize, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetnUniformuiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
        public static unsafe void GetnUniformui(int program, int location, int bufSize, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetnUniformuiv(program, location, bufSize, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
        public static unsafe string GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, out int length)
        {
            string label;
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
        public static unsafe void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, out int length, out string label)
        {
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel(IntPtr ptr, int bufSize, out int length)
        {
            string label;
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                void* ptr_vptr = (void*)ptr;
                GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, out int length, out string label)
        {
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                void* ptr_vptr = (void*)ptr;
                GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel<T1>(ReadOnlySpan<T1> ptr, int bufSize, out int length)
            where T1 : unmanaged
        {
            string label;
            fixed (int* length_ptr = &length)
            {
                fixed (void* ptr_ptr = ptr)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel<T1>(ReadOnlySpan<T1> ptr, int bufSize, out int length, out string label)
            where T1 : unmanaged
        {
            fixed (int* length_ptr = &length)
            {
                fixed (void* ptr_ptr = ptr)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel<T1>(T1[] ptr, int bufSize, out int length)
            where T1 : unmanaged
        {
            string label;
            fixed (int* length_ptr = &length)
            {
                fixed (void* ptr_ptr = ptr)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel<T1>(T1[] ptr, int bufSize, out int length, out string label)
            where T1 : unmanaged
        {
            fixed (int* length_ptr = &length)
            {
                fixed (void* ptr_ptr = ptr)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe string GetObjectPtrLabel<T1>(ref readonly T1 ptr, int bufSize, out int length)
            where T1 : unmanaged
        {
            string label;
            fixed (void* ptr_ptr = &ptr)
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            return label;
        }
        /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
        public static unsafe void GetObjectPtrLabel<T1>(ref readonly T1 ptr, int bufSize, out int length, out string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr)
            fixed (int* length_ptr = &length)
            {
                var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapfv(PixelMap, float*)"/>
        public static unsafe void GetPixelMapf(PixelMap map, Span<float> values)
        {
            fixed (float* values_ptr = values)
            {
                GetPixelMapfv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapfv(PixelMap, float*)"/>
        public static unsafe void GetPixelMapf(PixelMap map, float[] values)
        {
            fixed (float* values_ptr = values)
            {
                GetPixelMapfv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapfv(PixelMap, float*)"/>
        public static unsafe float GetPixelMapf(PixelMap map)
        {
            float values;
            float* values_ptr = &values;
            {
                GetPixelMapfv(map, values_ptr);
            }
            return values;
        }
        /// <inheritdoc cref="GetPixelMapfv(PixelMap, float*)"/>
        public static unsafe void GetPixelMapf(PixelMap map, out float values)
        {
            fixed (float* values_ptr = &values)
            {
                GetPixelMapfv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapuiv(PixelMap, uint*)"/>
        public static unsafe void GetPixelMapui(PixelMap map, Span<uint> values)
        {
            fixed (uint* values_ptr = values)
            {
                GetPixelMapuiv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapuiv(PixelMap, uint*)"/>
        public static unsafe void GetPixelMapui(PixelMap map, uint[] values)
        {
            fixed (uint* values_ptr = values)
            {
                GetPixelMapuiv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapuiv(PixelMap, uint*)"/>
        public static unsafe uint GetPixelMapui(PixelMap map)
        {
            uint values;
            uint* values_ptr = &values;
            {
                GetPixelMapuiv(map, values_ptr);
            }
            return values;
        }
        /// <inheritdoc cref="GetPixelMapuiv(PixelMap, uint*)"/>
        public static unsafe void GetPixelMapui(PixelMap map, out uint values)
        {
            fixed (uint* values_ptr = &values)
            {
                GetPixelMapuiv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapusv(PixelMap, ushort*)"/>
        public static unsafe void GetPixelMap(PixelMap map, Span<ushort> values)
        {
            fixed (ushort* values_ptr = values)
            {
                GetPixelMapusv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapusv(PixelMap, ushort*)"/>
        public static unsafe void GetPixelMap(PixelMap map, ushort[] values)
        {
            fixed (ushort* values_ptr = values)
            {
                GetPixelMapusv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPixelMapusv(PixelMap, ushort*)"/>
        public static unsafe ushort GetPixelMap(PixelMap map)
        {
            ushort values;
            ushort* values_ptr = &values;
            {
                GetPixelMapusv(map, values_ptr);
            }
            return values;
        }
        /// <inheritdoc cref="GetPixelMapusv(PixelMap, ushort*)"/>
        public static unsafe void GetPixelMap(PixelMap map, out ushort values)
        {
            fixed (ushort* values_ptr = &values)
            {
                GetPixelMapusv(map, values_ptr);
            }
        }
        /// <inheritdoc cref="GetPointerv(GetPointervPName, void**)"/>
        public static unsafe void GetPointer(GetPointervPName pname, void** parameters)
        {
            GetPointerv(pname, parameters);
        }
        /// <inheritdoc cref="GetPolygonStipple(byte*)"/>
        public static unsafe void GetPolygonStipple(Span<byte> mask)
        {
            fixed (byte* mask_ptr = mask)
            {
                GetPolygonStipple(mask_ptr);
            }
        }
        /// <inheritdoc cref="GetPolygonStipple(byte*)"/>
        public static unsafe void GetPolygonStipple(byte[] mask)
        {
            fixed (byte* mask_ptr = mask)
            {
                GetPolygonStipple(mask_ptr);
            }
        }
        /// <inheritdoc cref="GetPolygonStipple(byte*)"/>
        public static unsafe byte GetPolygonStipple()
        {
            byte mask;
            byte* mask_ptr = &mask;
            {
                GetPolygonStipple(mask_ptr);
            }
            return mask;
        }
        /// <inheritdoc cref="GetPolygonStipple(byte*)"/>
        public static unsafe void GetPolygonStipple(out byte mask)
        {
            fixed (byte* mask_ptr = &mask)
            {
                GetPolygonStipple(mask_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary(int program, int bufSize, out int length, out All binaryFormat, IntPtr binary)
        {
            fixed (int* length_ptr = &length)
            fixed (All* binaryFormat_ptr = &binaryFormat)
            {
                void* binary_vptr = (void*)binary;
                GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary<T1>(int program, int bufSize, out int length, out All binaryFormat, Span<T1> binary)
            where T1 : unmanaged
        {
            fixed (int* length_ptr = &length)
            fixed (All* binaryFormat_ptr = &binaryFormat)
            {
                fixed (void* binary_ptr = binary)
                {
                    GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary<T1>(int program, int bufSize, out int length, out All binaryFormat, T1[] binary)
            where T1 : unmanaged
        {
            fixed (int* length_ptr = &length)
            fixed (All* binaryFormat_ptr = &binaryFormat)
            {
                fixed (void* binary_ptr = binary)
                {
                    GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
        public static unsafe void GetProgramBinary<T1>(int program, int bufSize, out int length, out All binaryFormat, ref T1 binary)
            where T1 : unmanaged
        {
            fixed (int* length_ptr = &length)
            fixed (All* binaryFormat_ptr = &binaryFormat)
            fixed (void* binary_ptr = &binary)
            {
                GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetProgramInfoLog(int program, int bufSize, out int length)
        {
            string infoLog;
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramInfoLog(program, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetProgramInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetProgramInfoLog(int program, int bufSize, out int length, out string infoLog)
        {
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramInfoLog(program, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
        public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
        public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
        public static unsafe int GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
        public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramiv(int, ProgramProperty, int*)"/>
        public static unsafe void GetProgrami(int program, ProgramProperty pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramiv(program, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramiv(int, ProgramProperty, int*)"/>
        public static unsafe void GetProgrami(int program, ProgramProperty pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramiv(program, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramiv(int, ProgramProperty, int*)"/>
        public static unsafe int GetProgrami(int program, ProgramProperty pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetProgramiv(program, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetProgramiv(int, ProgramProperty, int*)"/>
        public static unsafe void GetProgrami(int program, ProgramProperty pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetProgramiv(program, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, out int length)
        {
            string infoLog;
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, out int length, out string infoLog)
        {
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
        public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramPipelineiv(pipeline, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
        public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetProgramPipelineiv(pipeline, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
        public static unsafe int GetProgramPipelinei(int pipeline, PipelineParameterName pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetProgramPipelineiv(pipeline, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
        public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetProgramPipelineiv(pipeline, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramResourceIndex(int, ProgramInterface, byte*)"/>
        public static unsafe uint GetProgramResourceIndex(int program, ProgramInterface programInterface, string name)
        {
            uint returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetProgramResourceIndex(program, programInterface, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
        public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, int propCount, ReadOnlySpan<ProgramResourceProperty> props, int count, out int length, Span<int> parameters)
        {
            fixed (int* length_ptr = &length)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    fixed (ProgramResourceProperty* props_ptr = props)
                    {
                        GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
        public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, int propCount, ProgramResourceProperty[] props, int count, out int length, int[] parameters)
        {
            fixed (int* length_ptr = &length)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    fixed (ProgramResourceProperty* props_ptr = props)
                    {
                        GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
        public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, int propCount, ref readonly ProgramResourceProperty props, int count, out int length, ref int parameters)
        {
            fixed (ProgramResourceProperty* props_ptr = &props)
            fixed (int* length_ptr = &length)
            fixed (int* parameters_ptr = &parameters)
            {
                GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramResourceLocation(int, ProgramInterface, byte*)"/>
        public static unsafe int GetProgramResourceLocation(int program, ProgramInterface programInterface, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetProgramResourceLocation(program, programInterface, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetProgramResourceLocationIndex(int, ProgramInterface, byte*)"/>
        public static unsafe int GetProgramResourceLocationIndex(int program, ProgramInterface programInterface, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetProgramResourceLocationIndex(program, programInterface, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
        public static unsafe string GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, out int length)
        {
            string name;
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
        public static unsafe void GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, out int length, out string name)
        {
            fixed (int* length_ptr = &length)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
        public static unsafe int GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname)
        {
            int values;
            int* values_ptr = &values;
            {
                GetProgramStageiv(program, shadertype, pname, values_ptr);
            }
            return values;
        }
        /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
        public static unsafe void GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname, out int values)
        {
            fixed (int* values_ptr = &values)
            {
                GetProgramStageiv(program, shadertype, pname, values_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryBufferObjecti64v(int, int, QueryObjectParameterName, IntPtr)"/>
        public static unsafe void GetQueryBufferObjecti64(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
        {
            GetQueryBufferObjecti64v(id, buffer, pname, offset);
        }
        /// <inheritdoc cref="GetQueryBufferObjectiv(int, int, QueryObjectParameterName, IntPtr)"/>
        public static unsafe void GetQueryBufferObjecti(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
        {
            GetQueryBufferObjectiv(id, buffer, pname, offset);
        }
        /// <inheritdoc cref="GetQueryBufferObjectui64v(int, int, QueryObjectParameterName, IntPtr)"/>
        public static unsafe void GetQueryBufferObjectui64(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
        {
            GetQueryBufferObjectui64v(id, buffer, pname, offset);
        }
        /// <inheritdoc cref="GetQueryBufferObjectuiv(int, int, QueryObjectParameterName, IntPtr)"/>
        public static unsafe void GetQueryBufferObjectui(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
        {
            GetQueryBufferObjectuiv(id, buffer, pname, offset);
        }
        /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
        public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryIndexediv(target, index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
        public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryIndexediv(target, index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
        public static unsafe int GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetQueryIndexediv(target, index, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
        public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetQueryIndexediv(target, index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryiv(QueryTarget, QueryParameterName, int*)"/>
        public static unsafe void GetQueryi(QueryTarget target, QueryParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryiv(QueryTarget, QueryParameterName, int*)"/>
        public static unsafe void GetQueryi(QueryTarget target, QueryParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryiv(QueryTarget, QueryParameterName, int*)"/>
        public static unsafe int GetQueryi(QueryTarget target, QueryParameterName pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetQueryiv(target, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetQueryiv(QueryTarget, QueryParameterName, int*)"/>
        public static unsafe void GetQueryi(QueryTarget target, QueryParameterName pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetQueryiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
        public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, Span<long> parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetQueryObjecti64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
        public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, long[] parameters)
        {
            fixed (long* parameters_ptr = parameters)
            {
                GetQueryObjecti64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
        public static unsafe long GetQueryObjecti64(int id, QueryObjectParameterName pname)
        {
            long parameters;
            long* parameters_ptr = &parameters;
            {
                GetQueryObjecti64v(id, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
        public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, out long parameters)
        {
            fixed (long* parameters_ptr = &parameters)
            {
                GetQueryObjecti64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectiv(int, QueryObjectParameterName, int*)"/>
        public static unsafe void GetQueryObjecti(int id, QueryObjectParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryObjectiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectiv(int, QueryObjectParameterName, int*)"/>
        public static unsafe void GetQueryObjecti(int id, QueryObjectParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetQueryObjectiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectiv(int, QueryObjectParameterName, int*)"/>
        public static unsafe int GetQueryObjecti(int id, QueryObjectParameterName pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetQueryObjectiv(id, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetQueryObjectiv(int, QueryObjectParameterName, int*)"/>
        public static unsafe void GetQueryObjecti(int id, QueryObjectParameterName pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetQueryObjectiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
        public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, Span<ulong> parameters)
        {
            fixed (ulong* parameters_ptr = parameters)
            {
                GetQueryObjectui64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
        public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, ulong[] parameters)
        {
            fixed (ulong* parameters_ptr = parameters)
            {
                GetQueryObjectui64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
        public static unsafe ulong GetQueryObjectui64(int id, QueryObjectParameterName pname)
        {
            ulong parameters;
            ulong* parameters_ptr = &parameters;
            {
                GetQueryObjectui64v(id, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
        public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, out ulong parameters)
        {
            fixed (ulong* parameters_ptr = &parameters)
            {
                GetQueryObjectui64v(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectuiv(int, QueryObjectParameterName, uint*)"/>
        public static unsafe void GetQueryObjectui(int id, QueryObjectParameterName pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetQueryObjectuiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectuiv(int, QueryObjectParameterName, uint*)"/>
        public static unsafe void GetQueryObjectui(int id, QueryObjectParameterName pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetQueryObjectuiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetQueryObjectuiv(int, QueryObjectParameterName, uint*)"/>
        public static unsafe uint GetQueryObjectui(int id, QueryObjectParameterName pname)
        {
            uint parameters;
            uint* parameters_ptr = &parameters;
            {
                GetQueryObjectuiv(id, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetQueryObjectuiv(int, QueryObjectParameterName, uint*)"/>
        public static unsafe void GetQueryObjectui(int id, QueryObjectParameterName pname, out uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetQueryObjectuiv(id, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
        public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetRenderbufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
        public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetRenderbufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
        public static unsafe int GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetRenderbufferParameteriv(target, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
        public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetRenderbufferParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetSamplerParameterfv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetSamplerParameterfv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe float GetSamplerParameterf(int sampler, SamplerParameterF pname)
        {
            float parameters;
            float* parameters_ptr = &parameters;
            {
                GetSamplerParameterfv(sampler, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, out float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetSamplerParameterfv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetSamplerParameterIiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetSamplerParameterIiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe int GetSamplerParameterIi(int sampler, SamplerParameterI pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetSamplerParameterIiv(sampler, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetSamplerParameterIiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe uint GetSamplerParameterIui(int sampler, SamplerParameterI pname)
        {
            uint parameters;
            uint* parameters_ptr = &parameters;
            {
                GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, out uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetSamplerParameteriv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetSamplerParameteriv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe int GetSamplerParameteri(int sampler, SamplerParameterI pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetSamplerParameteriv(sampler, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetSamplerParameteriv(sampler, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderInfoLog(int, int, int*, byte*)"/>
        public static unsafe string GetShaderInfoLog(int shader, int bufSize, out int length)
        {
            string infoLog;
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderInfoLog(shader, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
            return infoLog;
        }
        /// <inheritdoc cref="GetShaderInfoLog(int, int, int*, byte*)"/>
        public static unsafe void GetShaderInfoLog(int shader, int bufSize, out int length, out string infoLog)
        {
            fixed (int* length_ptr = &length)
            {
                var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderInfoLog(shader, bufSize, length_ptr, infoLog_ptr);
                infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderiv(int, ShaderParameterName, int*)"/>
        public static unsafe void GetShaderi(int shader, ShaderParameterName pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetShaderiv(shader, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderiv(int, ShaderParameterName, int*)"/>
        public static unsafe void GetShaderi(int shader, ShaderParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetShaderiv(shader, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderiv(int, ShaderParameterName, int*)"/>
        public static unsafe int GetShaderi(int shader, ShaderParameterName pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetShaderiv(shader, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetShaderiv(int, ShaderParameterName, int*)"/>
        public static unsafe void GetShaderi(int shader, ShaderParameterName pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetShaderiv(shader, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
        public static unsafe int GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, Span<int> range)
        {
            int precision;
            int* precision_ptr = &precision;
            {
                fixed (int* range_ptr = range)
                {
                    GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                }
            }
            return precision;
        }
        /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
        public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, Span<int> range, out int precision)
        {
            fixed (int* precision_ptr = &precision)
            {
                fixed (int* range_ptr = range)
                {
                    GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
        public static unsafe int GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, int[] range)
        {
            int precision;
            int* precision_ptr = &precision;
            {
                fixed (int* range_ptr = range)
                {
                    GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                }
            }
            return precision;
        }
        /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
        public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, int[] range, out int precision)
        {
            fixed (int* precision_ptr = &precision)
            {
                fixed (int* range_ptr = range)
                {
                    GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
        public static unsafe int GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, ref int range)
        {
            int precision;
            int* precision_ptr = &precision;
            fixed (int* range_ptr = &range)
            {
                GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
            }
            return precision;
        }
        /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
        public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, ref int range, out int precision)
        {
            fixed (int* range_ptr = &range)
            fixed (int* precision_ptr = &precision)
            {
                GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
            }
        }
        /// <inheritdoc cref="GetShaderSource(int, int, int*, byte*)"/>
        public static unsafe string GetShaderSource(int shader, int bufSize, out int length)
        {
            string source;
            fixed (int* length_ptr = &length)
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderSource(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
            return source;
        }
        /// <inheritdoc cref="GetShaderSource(int, int, int*, byte*)"/>
        public static unsafe void GetShaderSource(int shader, int bufSize, out int length, out string source)
        {
            fixed (int* length_ptr = &length)
            {
                var source_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetShaderSource(shader, bufSize, length_ptr, source_ptr);
                source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)source_ptr);
            }
        }
        /// <inheritdoc cref="GetString_(StringName)"/>
        public static unsafe string? GetString(StringName name)
        {
            string? returnValue_str;
            byte* returnValue;
            returnValue = GetString_(name);
            returnValue_str = Marshal.PtrToStringAnsi((IntPtr)returnValue);
            return returnValue_str;
        }
        /// <inheritdoc cref="GetStringi_(StringName, uint)"/>
        public static unsafe string? GetStringi(StringName name, uint index)
        {
            string? returnValue_str;
            byte* returnValue;
            returnValue = GetStringi_(name, index);
            returnValue_str = Marshal.PtrToStringAnsi((IntPtr)returnValue);
            return returnValue_str;
        }
        /// <inheritdoc cref="GetSubroutineIndex(int, ShaderType, byte*)"/>
        public static unsafe uint GetSubroutineIndex(int program, ShaderType shadertype, string name)
        {
            uint returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetSubroutineIndex(program, shadertype, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetSubroutineUniformLocation(int, ShaderType, byte*)"/>
        public static unsafe int GetSubroutineUniformLocation(int program, ShaderType shadertype, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetSubroutineUniformLocation(program, shadertype, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
        public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, int count, out int length, Span<int> values)
        {
            fixed (int* length_ptr = &length)
            {
                fixed (int* values_ptr = values)
                {
                    GetSynciv(sync, pname, count, length_ptr, values_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
        public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, int count, out int length, int[] values)
        {
            fixed (int* length_ptr = &length)
            {
                fixed (int* values_ptr = values)
                {
                    GetSynciv(sync, pname, count, length_ptr, values_ptr);
                }
            }
        }
        /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
        public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, int count, out int length, ref int values)
        {
            fixed (int* length_ptr = &length)
            fixed (int* values_ptr = &values)
            {
                GetSynciv(sync, pname, count, length_ptr, values_ptr);
            }
        }
        /// <inheritdoc cref="GetTexEnvfv(TextureEnvTarget, TextureEnvParameter, float*)"/>
        public static unsafe void GetTexEnvf(TextureEnvTarget target, TextureEnvParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexEnvfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexEnvfv(TextureEnvTarget, TextureEnvParameter, float*)"/>
        public static unsafe void GetTexEnvf(TextureEnvTarget target, TextureEnvParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexEnvfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexEnvfv(TextureEnvTarget, TextureEnvParameter, float*)"/>
        public static unsafe float GetTexEnvf(TextureEnvTarget target, TextureEnvParameter pname)
        {
            float parameters;
            float* parameters_ptr = &parameters;
            {
                GetTexEnvfv(target, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetTexEnvfv(TextureEnvTarget, TextureEnvParameter, float*)"/>
        public static unsafe void GetTexEnvf(TextureEnvTarget target, TextureEnvParameter pname, out float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTexEnvfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexEnviv(TextureEnvTarget, TextureEnvParameter, int*)"/>
        public static unsafe void GetTexEnvi(TextureEnvTarget target, TextureEnvParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexEnviv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexEnviv(TextureEnvTarget, TextureEnvParameter, int*)"/>
        public static unsafe void GetTexEnvi(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexEnviv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexEnviv(TextureEnvTarget, TextureEnvParameter, int*)"/>
        public static unsafe int GetTexEnvi(TextureEnvTarget target, TextureEnvParameter pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetTexEnviv(target, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetTexEnviv(TextureEnvTarget, TextureEnvParameter, int*)"/>
        public static unsafe void GetTexEnvi(TextureEnvTarget target, TextureEnvParameter pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTexEnviv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGendv(TextureCoordName, TextureGenParameter, double*)"/>
        public static unsafe void GetTexGend(TextureCoordName coord, TextureGenParameter pname, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetTexGendv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGendv(TextureCoordName, TextureGenParameter, double*)"/>
        public static unsafe void GetTexGend(TextureCoordName coord, TextureGenParameter pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetTexGendv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGendv(TextureCoordName, TextureGenParameter, double*)"/>
        public static unsafe double GetTexGend(TextureCoordName coord, TextureGenParameter pname)
        {
            double parameters;
            double* parameters_ptr = &parameters;
            {
                GetTexGendv(coord, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetTexGendv(TextureCoordName, TextureGenParameter, double*)"/>
        public static unsafe void GetTexGend(TextureCoordName coord, TextureGenParameter pname, out double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                GetTexGendv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGenfv(TextureCoordName, TextureGenParameter, float*)"/>
        public static unsafe void GetTexGenf(TextureCoordName coord, TextureGenParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexGenfv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGenfv(TextureCoordName, TextureGenParameter, float*)"/>
        public static unsafe void GetTexGenf(TextureCoordName coord, TextureGenParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexGenfv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGenfv(TextureCoordName, TextureGenParameter, float*)"/>
        public static unsafe float GetTexGenf(TextureCoordName coord, TextureGenParameter pname)
        {
            float parameters;
            float* parameters_ptr = &parameters;
            {
                GetTexGenfv(coord, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetTexGenfv(TextureCoordName, TextureGenParameter, float*)"/>
        public static unsafe void GetTexGenf(TextureCoordName coord, TextureGenParameter pname, out float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTexGenfv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGeniv(TextureCoordName, TextureGenParameter, int*)"/>
        public static unsafe void GetTexGeni(TextureCoordName coord, TextureGenParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexGeniv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGeniv(TextureCoordName, TextureGenParameter, int*)"/>
        public static unsafe void GetTexGeni(TextureCoordName coord, TextureGenParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexGeniv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexGeniv(TextureCoordName, TextureGenParameter, int*)"/>
        public static unsafe int GetTexGeni(TextureCoordName coord, TextureGenParameter pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetTexGeniv(coord, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetTexGeniv(TextureCoordName, TextureGenParameter, int*)"/>
        public static unsafe void GetTexGeni(TextureCoordName coord, TextureGenParameter pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTexGeniv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexImage(TextureTarget, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetTexImage(target, level, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="GetTexImage(TextureTarget, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void GetTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, Span<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetTexImage(target, level, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTexImage(TextureTarget, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void GetTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetTexImage(target, level, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTexImage(TextureTarget, int, PixelFormat, PixelType, void*)"/>
        public static unsafe T1 GetTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type)
            where T1 : unmanaged
        {
            T1 pixels;
            void* pixels_ptr = &pixels;
            {
                GetTexImage(target, level, format, type, pixels_ptr);
            }
            return pixels;
        }
        /// <inheritdoc cref="GetTexImage(TextureTarget, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void GetTexImage<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, out T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetTexImage(target, level, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameterfv(TextureTarget, int, GetTextureParameter, float*)"/>
        public static unsafe void GetTexLevelParameterf(TextureTarget target, int level, GetTextureParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexLevelParameterfv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameterfv(TextureTarget, int, GetTextureParameter, float*)"/>
        public static unsafe void GetTexLevelParameterf(TextureTarget target, int level, GetTextureParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexLevelParameterfv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameterfv(TextureTarget, int, GetTextureParameter, float*)"/>
        public static unsafe float GetTexLevelParameterf(TextureTarget target, int level, GetTextureParameter pname)
        {
            float parameters;
            float* parameters_ptr = &parameters;
            {
                GetTexLevelParameterfv(target, level, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetTexLevelParameterfv(TextureTarget, int, GetTextureParameter, float*)"/>
        public static unsafe void GetTexLevelParameterf(TextureTarget target, int level, GetTextureParameter pname, out float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTexLevelParameterfv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameteriv(TextureTarget, int, GetTextureParameter, int*)"/>
        public static unsafe void GetTexLevelParameteri(TextureTarget target, int level, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexLevelParameteriv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameteriv(TextureTarget, int, GetTextureParameter, int*)"/>
        public static unsafe void GetTexLevelParameteri(TextureTarget target, int level, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexLevelParameteriv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexLevelParameteriv(TextureTarget, int, GetTextureParameter, int*)"/>
        public static unsafe int GetTexLevelParameteri(TextureTarget target, int level, GetTextureParameter pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetTexLevelParameteriv(target, level, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetTexLevelParameteriv(TextureTarget, int, GetTextureParameter, int*)"/>
        public static unsafe void GetTexLevelParameteri(TextureTarget target, int level, GetTextureParameter pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTexLevelParameteriv(target, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterfv(TextureTarget, GetTextureParameter, float*)"/>
        public static unsafe void GetTexParameterf(TextureTarget target, GetTextureParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterfv(TextureTarget, GetTextureParameter, float*)"/>
        public static unsafe void GetTexParameterf(TextureTarget target, GetTextureParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterfv(TextureTarget, GetTextureParameter, float*)"/>
        public static unsafe float GetTexParameterf(TextureTarget target, GetTextureParameter pname)
        {
            float parameters;
            float* parameters_ptr = &parameters;
            {
                GetTexParameterfv(target, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetTexParameterfv(TextureTarget, GetTextureParameter, float*)"/>
        public static unsafe void GetTexParameterf(TextureTarget target, GetTextureParameter pname, out float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIiv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameterIi(TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIiv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameterIi(TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIiv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe int GetTexParameterIi(TextureTarget target, GetTextureParameter pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetTexParameterIiv(target, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetTexParameterIiv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameterIi(TextureTarget target, GetTextureParameter pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIuiv(TextureTarget, GetTextureParameter, uint*)"/>
        public static unsafe void GetTexParameterIui(TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetTexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIuiv(TextureTarget, GetTextureParameter, uint*)"/>
        public static unsafe void GetTexParameterIui(TextureTarget target, GetTextureParameter pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetTexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameterIuiv(TextureTarget, GetTextureParameter, uint*)"/>
        public static unsafe uint GetTexParameterIui(TextureTarget target, GetTextureParameter pname)
        {
            uint parameters;
            uint* parameters_ptr = &parameters;
            {
                GetTexParameterIuiv(target, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetTexParameterIuiv(TextureTarget, GetTextureParameter, uint*)"/>
        public static unsafe void GetTexParameterIui(TextureTarget target, GetTextureParameter pname, out uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetTexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameteriv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameteri(TextureTarget target, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameteriv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameteri(TextureTarget target, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTexParameteriv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe int GetTexParameteri(TextureTarget target, GetTextureParameter pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetTexParameteriv(target, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetTexParameteriv(TextureTarget, GetTextureParameter, int*)"/>
        public static unsafe void GetTexParameteri(TextureTarget target, GetTextureParameter pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureImage(int texture, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetTextureImage(texture, level, format, type, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, int bufSize, Span<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, int bufSize, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureLevelParameterfv(int, int, GetTextureParameter, float*)"/>
        public static unsafe void GetTextureLevelParameterf(int texture, int level, GetTextureParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTextureLevelParameterfv(texture, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureLevelParameterfv(int, int, GetTextureParameter, float*)"/>
        public static unsafe void GetTextureLevelParameterf(int texture, int level, GetTextureParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTextureLevelParameterfv(texture, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureLevelParameterfv(int, int, GetTextureParameter, float*)"/>
        public static unsafe void GetTextureLevelParameterf(int texture, int level, GetTextureParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTextureLevelParameterfv(texture, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureLevelParameteriv(int, int, GetTextureParameter, int*)"/>
        public static unsafe void GetTextureLevelParameteri(int texture, int level, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTextureLevelParameteriv(texture, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureLevelParameteriv(int, int, GetTextureParameter, int*)"/>
        public static unsafe void GetTextureLevelParameteri(int texture, int level, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTextureLevelParameteriv(texture, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureLevelParameteriv(int, int, GetTextureParameter, int*)"/>
        public static unsafe void GetTextureLevelParameteri(int texture, int level, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTextureLevelParameteriv(texture, level, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameterfv(int, GetTextureParameter, float*)"/>
        public static unsafe void GetTextureParameterf(int texture, GetTextureParameter pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTextureParameterfv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameterfv(int, GetTextureParameter, float*)"/>
        public static unsafe void GetTextureParameterf(int texture, GetTextureParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetTextureParameterfv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameterfv(int, GetTextureParameter, float*)"/>
        public static unsafe void GetTextureParameterf(int texture, GetTextureParameter pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetTextureParameterfv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameterIiv(int, GetTextureParameter, int*)"/>
        public static unsafe void GetTextureParameterIi(int texture, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTextureParameterIiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameterIiv(int, GetTextureParameter, int*)"/>
        public static unsafe void GetTextureParameterIi(int texture, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTextureParameterIiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameterIiv(int, GetTextureParameter, int*)"/>
        public static unsafe void GetTextureParameterIi(int texture, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTextureParameterIiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameterIuiv(int, GetTextureParameter, uint*)"/>
        public static unsafe void GetTextureParameterIui(int texture, GetTextureParameter pname, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetTextureParameterIuiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameterIuiv(int, GetTextureParameter, uint*)"/>
        public static unsafe void GetTextureParameterIui(int texture, GetTextureParameter pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetTextureParameterIuiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameterIuiv(int, GetTextureParameter, uint*)"/>
        public static unsafe void GetTextureParameterIui(int texture, GetTextureParameter pname, ref uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetTextureParameterIuiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameteriv(int, GetTextureParameter, int*)"/>
        public static unsafe void GetTextureParameteri(int texture, GetTextureParameter pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTextureParameteriv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameteriv(int, GetTextureParameter, int*)"/>
        public static unsafe void GetTextureParameteri(int texture, GetTextureParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetTextureParameteriv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureParameteriv(int, GetTextureParameter, int*)"/>
        public static unsafe void GetTextureParameteri(int texture, GetTextureParameter pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetTextureParameteriv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_vptr);
        }
        /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, Span<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbacki_v(int, TransformFeedbackPName, uint, int*)"/>
        public static unsafe void GetTransformFeedback(int xfb, TransformFeedbackPName pname, uint index, Span<int> param)
        {
            fixed (int* param_ptr = param)
            {
                GetTransformFeedbacki_v(xfb, pname, index, param_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbacki_v(int, TransformFeedbackPName, uint, int*)"/>
        public static unsafe void GetTransformFeedback(int xfb, TransformFeedbackPName pname, uint index, int[] param)
        {
            fixed (int* param_ptr = param)
            {
                GetTransformFeedbacki_v(xfb, pname, index, param_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbacki_v(int, TransformFeedbackPName, uint, int*)"/>
        public static unsafe void GetTransformFeedback(int xfb, TransformFeedbackPName pname, uint index, ref int param)
        {
            fixed (int* param_ptr = &param)
            {
                GetTransformFeedbacki_v(xfb, pname, index, param_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbacki64_v(int, TransformFeedbackPName, uint, long*)"/>
        public static unsafe void GetTransformFeedbacki64_(int xfb, TransformFeedbackPName pname, uint index, Span<long> param)
        {
            fixed (long* param_ptr = param)
            {
                GetTransformFeedbacki64_v(xfb, pname, index, param_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbacki64_v(int, TransformFeedbackPName, uint, long*)"/>
        public static unsafe void GetTransformFeedbacki64_(int xfb, TransformFeedbackPName pname, uint index, long[] param)
        {
            fixed (long* param_ptr = param)
            {
                GetTransformFeedbacki64_v(xfb, pname, index, param_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbacki64_v(int, TransformFeedbackPName, uint, long*)"/>
        public static unsafe void GetTransformFeedbacki64_(int xfb, TransformFeedbackPName pname, uint index, ref long param)
        {
            fixed (long* param_ptr = &param)
            {
                GetTransformFeedbacki64_v(xfb, pname, index, param_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbackiv(int, TransformFeedbackPName, int*)"/>
        public static unsafe void GetTransformFeedbacki(int xfb, TransformFeedbackPName pname, Span<int> param)
        {
            fixed (int* param_ptr = param)
            {
                GetTransformFeedbackiv(xfb, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbackiv(int, TransformFeedbackPName, int*)"/>
        public static unsafe void GetTransformFeedbacki(int xfb, TransformFeedbackPName pname, int[] param)
        {
            fixed (int* param_ptr = param)
            {
                GetTransformFeedbackiv(xfb, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbackiv(int, TransformFeedbackPName, int*)"/>
        public static unsafe void GetTransformFeedbacki(int xfb, TransformFeedbackPName pname, ref int param)
        {
            fixed (int* param_ptr = &param)
            {
                GetTransformFeedbackiv(xfb, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe string GetTransformFeedbackVarying(int program, uint index, int bufSize, out int length, out int size, out AttributeType type)
        {
            string name;
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (AttributeType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            return name;
        }
        /// <inheritdoc cref="GetTransformFeedbackVarying(int, uint, int, int*, int*, AttributeType*, byte*)"/>
        public static unsafe void GetTransformFeedbackVarying(int program, uint index, int bufSize, out int length, out int size, out AttributeType type, out string name)
        {
            fixed (int* length_ptr = &length)
            fixed (int* size_ptr = &size)
            fixed (AttributeType* type_ptr = &type)
            {
                var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                GetTransformFeedbackVarying(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformBlockIndex(int, byte*)"/>
        public static unsafe uint GetUniformBlockIndex(int program, string uniformBlockName)
        {
            uint returnValue;
            byte* uniformBlockName_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(uniformBlockName);
            returnValue = GetUniformBlockIndex(program, uniformBlockName_ptr);
            Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
        public static unsafe void GetUniformd(int program, int location, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetUniformdv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
        public static unsafe void GetUniformd(int program, int location, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetUniformdv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
        public static unsafe double GetUniformd(int program, int location)
        {
            double parameters;
            double* parameters_ptr = &parameters;
            {
                GetUniformdv(program, location, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
        public static unsafe void GetUniformd(int program, int location, out double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                GetUniformdv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformfv(int, int, float*)"/>
        public static unsafe void GetUniformf(int program, int location, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetUniformfv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformfv(int, int, float*)"/>
        public static unsafe void GetUniformf(int program, int location, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetUniformfv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformfv(int, int, float*)"/>
        public static unsafe float GetUniformf(int program, int location)
        {
            float parameters;
            float* parameters_ptr = &parameters;
            {
                GetUniformfv(program, location, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetUniformfv(int, int, float*)"/>
        public static unsafe void GetUniformf(int program, int location, out float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetUniformfv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
        public static unsafe void GetUniformIndices(int program, int uniformCount, string[] uniformNames, Span<uint> uniformIndices)
        {
            fixed (uint* uniformIndices_ptr = uniformIndices)
            {
                byte** uniformNames_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(uniformNames);
                GetUniformIndices(program, uniformCount, uniformNames_ptr, uniformIndices_ptr);
                MarshalTk.FreeStringArrayCoTaskMem((IntPtr)uniformNames_ptr, uniformNames.Length);
            }
        }
        /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
        public static unsafe void GetUniformIndices(int program, int uniformCount, string[] uniformNames, uint[] uniformIndices)
        {
            fixed (uint* uniformIndices_ptr = uniformIndices)
            {
                byte** uniformNames_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(uniformNames);
                GetUniformIndices(program, uniformCount, uniformNames_ptr, uniformIndices_ptr);
                MarshalTk.FreeStringArrayCoTaskMem((IntPtr)uniformNames_ptr, uniformNames.Length);
            }
        }
        /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
        public static unsafe uint GetUniformIndices(int program, int uniformCount, string[] uniformNames)
        {
            uint uniformIndices;
            uint* uniformIndices_ptr = &uniformIndices;
            {
                byte** uniformNames_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(uniformNames);
                GetUniformIndices(program, uniformCount, uniformNames_ptr, uniformIndices_ptr);
                MarshalTk.FreeStringArrayCoTaskMem((IntPtr)uniformNames_ptr, uniformNames.Length);
            }
            return uniformIndices;
        }
        /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
        public static unsafe void GetUniformIndices(int program, int uniformCount, string[] uniformNames, out uint uniformIndices)
        {
            fixed (uint* uniformIndices_ptr = &uniformIndices)
            {
                byte** uniformNames_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(uniformNames);
                GetUniformIndices(program, uniformCount, uniformNames_ptr, uniformIndices_ptr);
                MarshalTk.FreeStringArrayCoTaskMem((IntPtr)uniformNames_ptr, uniformNames.Length);
            }
        }
        /// <inheritdoc cref="GetUniformiv(int, int, int*)"/>
        public static unsafe void GetUniformi(int program, int location, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetUniformiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformiv(int, int, int*)"/>
        public static unsafe void GetUniformi(int program, int location, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetUniformiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformiv(int, int, int*)"/>
        public static unsafe int GetUniformi(int program, int location)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetUniformiv(program, location, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetUniformiv(int, int, int*)"/>
        public static unsafe void GetUniformi(int program, int location, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetUniformiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformLocation(int, byte*)"/>
        public static unsafe int GetUniformLocation(int program, string name)
        {
            int returnValue;
            byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
            returnValue = GetUniformLocation(program, name_ptr);
            Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            return returnValue;
        }
        /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
        public static unsafe uint GetUniformSubroutineui(ShaderType shadertype, int location)
        {
            uint parameters;
            uint* parameters_ptr = &parameters;
            {
                GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
        public static unsafe void GetUniformSubroutineui(ShaderType shadertype, int location, out uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformuiv(int, int, uint*)"/>
        public static unsafe void GetUniformui(int program, int location, Span<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetUniformuiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformuiv(int, int, uint*)"/>
        public static unsafe void GetUniformui(int program, int location, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                GetUniformuiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetUniformuiv(int, int, uint*)"/>
        public static unsafe uint GetUniformui(int program, int location)
        {
            uint parameters;
            uint* parameters_ptr = &parameters;
            {
                GetUniformuiv(program, location, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetUniformuiv(int, int, uint*)"/>
        public static unsafe void GetUniformui(int program, int location, out uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetUniformuiv(program, location, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexArrayIndexed64iv(int, uint, VertexArrayPName, long*)"/>
        public static unsafe void GetVertexArrayIndexed64iv(int vaobj, uint index, VertexArrayPName pname, Span<long> param)
        {
            fixed (long* param_ptr = param)
            {
                GetVertexArrayIndexed64iv(vaobj, index, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexArrayIndexed64iv(int, uint, VertexArrayPName, long*)"/>
        public static unsafe void GetVertexArrayIndexed64iv(int vaobj, uint index, VertexArrayPName pname, long[] param)
        {
            fixed (long* param_ptr = param)
            {
                GetVertexArrayIndexed64iv(vaobj, index, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexArrayIndexed64iv(int, uint, VertexArrayPName, long*)"/>
        public static unsafe void GetVertexArrayIndexed64iv(int vaobj, uint index, VertexArrayPName pname, ref long param)
        {
            fixed (long* param_ptr = &param)
            {
                GetVertexArrayIndexed64iv(vaobj, index, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexArrayIndexediv(int, uint, VertexArrayPName, int*)"/>
        public static unsafe void GetVertexArrayIndexedi(int vaobj, uint index, VertexArrayPName pname, Span<int> param)
        {
            fixed (int* param_ptr = param)
            {
                GetVertexArrayIndexediv(vaobj, index, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexArrayIndexediv(int, uint, VertexArrayPName, int*)"/>
        public static unsafe void GetVertexArrayIndexedi(int vaobj, uint index, VertexArrayPName pname, int[] param)
        {
            fixed (int* param_ptr = param)
            {
                GetVertexArrayIndexediv(vaobj, index, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexArrayIndexediv(int, uint, VertexArrayPName, int*)"/>
        public static unsafe void GetVertexArrayIndexedi(int vaobj, uint index, VertexArrayPName pname, ref int param)
        {
            fixed (int* param_ptr = &param)
            {
                GetVertexArrayIndexediv(vaobj, index, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexArrayiv(int, VertexArrayPName, int*)"/>
        public static unsafe void GetVertexArrayi(int vaobj, VertexArrayPName pname, Span<int> param)
        {
            fixed (int* param_ptr = param)
            {
                GetVertexArrayiv(vaobj, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexArrayiv(int, VertexArrayPName, int*)"/>
        public static unsafe void GetVertexArrayi(int vaobj, VertexArrayPName pname, int[] param)
        {
            fixed (int* param_ptr = param)
            {
                GetVertexArrayiv(vaobj, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexArrayiv(int, VertexArrayPName, int*)"/>
        public static unsafe void GetVertexArrayi(int vaobj, VertexArrayPName pname, ref int param)
        {
            fixed (int* param_ptr = &param)
            {
                GetVertexArrayiv(vaobj, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribPropertyARB, double*)"/>
        public static unsafe void GetVertexAttribd(uint index, VertexAttribPropertyARB pname, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetVertexAttribdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribPropertyARB, double*)"/>
        public static unsafe void GetVertexAttribd(uint index, VertexAttribPropertyARB pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetVertexAttribdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribdv(uint, VertexAttribPropertyARB, double*)"/>
        public static unsafe void GetVertexAttribd(uint index, VertexAttribPropertyARB pname, ref double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                GetVertexAttribdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribPropertyARB, float*)"/>
        public static unsafe void GetVertexAttribf(uint index, VertexAttribPropertyARB pname, Span<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetVertexAttribfv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribPropertyARB, float*)"/>
        public static unsafe void GetVertexAttribf(uint index, VertexAttribPropertyARB pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                GetVertexAttribfv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribfv(uint, VertexAttribPropertyARB, float*)"/>
        public static unsafe void GetVertexAttribf(uint index, VertexAttribPropertyARB pname, ref float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                GetVertexAttribfv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribIiv(uint, VertexAttribEnum, int*)"/>
        public static unsafe int GetVertexAttribIi(uint index, VertexAttribEnum pname)
        {
            int parameters;
            int* parameters_ptr = &parameters;
            {
                GetVertexAttribIiv(index, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetVertexAttribIiv(uint, VertexAttribEnum, int*)"/>
        public static unsafe void GetVertexAttribIi(uint index, VertexAttribEnum pname, out int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetVertexAttribIiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribIuiv(uint, VertexAttribEnum, uint*)"/>
        public static unsafe uint GetVertexAttribIui(uint index, VertexAttribEnum pname)
        {
            uint parameters;
            uint* parameters_ptr = &parameters;
            {
                GetVertexAttribIuiv(index, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetVertexAttribIuiv(uint, VertexAttribEnum, uint*)"/>
        public static unsafe void GetVertexAttribIui(uint index, VertexAttribEnum pname, out uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                GetVertexAttribIuiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribPropertyARB, int*)"/>
        public static unsafe void GetVertexAttribi(uint index, VertexAttribPropertyARB pname, Span<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetVertexAttribiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribPropertyARB, int*)"/>
        public static unsafe void GetVertexAttribi(uint index, VertexAttribPropertyARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                GetVertexAttribiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribiv(uint, VertexAttribPropertyARB, int*)"/>
        public static unsafe void GetVertexAttribi(uint index, VertexAttribPropertyARB pname, ref int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                GetVertexAttribiv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
        public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, Span<double> parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetVertexAttribLdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
        public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                GetVertexAttribLdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
        public static unsafe double GetVertexAttribLd(uint index, VertexAttribEnum pname)
        {
            double parameters;
            double* parameters_ptr = &parameters;
            {
                GetVertexAttribLdv(index, pname, parameters_ptr);
            }
            return parameters;
        }
        /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
        public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, out double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                GetVertexAttribLdv(index, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="GetVertexAttribPointerv(uint, VertexAttribPointerPropertyARB, void**)"/>
        public static unsafe void GetVertexAttribPointer(uint index, VertexAttribPointerPropertyARB pname, void** pointer)
        {
            GetVertexAttribPointerv(index, pname, pointer);
        }
        /// <inheritdoc cref="Indexdv(double*)"/>
        public static unsafe void Indexd(ref readonly double c)
        {
            fixed (double* c_ptr = &c)
            {
                Indexdv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexfv(float*)"/>
        public static unsafe void Indexf(ref readonly float c)
        {
            fixed (float* c_ptr = &c)
            {
                Indexfv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexiv(int*)"/>
        public static unsafe void Indexi(ref readonly int c)
        {
            fixed (int* c_ptr = &c)
            {
                Indexiv(c_ptr);
            }
        }
        /// <inheritdoc cref="IndexPointer(IndexPointerType, int, void*)"/>
        public static unsafe void IndexPointer(IndexPointerType type, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            IndexPointer(type, stride, pointer_vptr);
        }
        /// <inheritdoc cref="IndexPointer(IndexPointerType, int, void*)"/>
        public static unsafe void IndexPointer<T1>(IndexPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                IndexPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="IndexPointer(IndexPointerType, int, void*)"/>
        public static unsafe void IndexPointer<T1>(IndexPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                IndexPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="IndexPointer(IndexPointerType, int, void*)"/>
        public static unsafe void IndexPointer<T1>(IndexPointerType type, int stride, ref readonly T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                IndexPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="Indexs(short)"/>
        public static unsafe void Index(short c)
        {
            Indexs(c);
        }
        /// <inheritdoc cref="Indexsv(short*)"/>
        public static unsafe void Index(ref readonly short c)
        {
            fixed (short* c_ptr = &c)
            {
                Indexsv(c_ptr);
            }
        }
        /// <inheritdoc cref="Indexub(byte)"/>
        public static unsafe void Index(byte c)
        {
            Indexub(c);
        }
        /// <inheritdoc cref="Indexubv(byte*)"/>
        public static unsafe void Index(ref readonly byte c)
        {
            fixed (byte* c_ptr = &c)
            {
                Indexubv(c_ptr);
            }
        }
        /// <inheritdoc cref="InterleavedArrays(InterleavedArrayFormat, int, void*)"/>
        public static unsafe void InterleavedArrays(InterleavedArrayFormat format, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            InterleavedArrays(format, stride, pointer_vptr);
        }
        /// <inheritdoc cref="InterleavedArrays(InterleavedArrayFormat, int, void*)"/>
        public static unsafe void InterleavedArrays<T1>(InterleavedArrayFormat format, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                InterleavedArrays(format, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="InterleavedArrays(InterleavedArrayFormat, int, void*)"/>
        public static unsafe void InterleavedArrays<T1>(InterleavedArrayFormat format, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                InterleavedArrays(format, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="InterleavedArrays(InterleavedArrayFormat, int, void*)"/>
        public static unsafe void InterleavedArrays<T1>(InterleavedArrayFormat format, int stride, ref readonly T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                InterleavedArrays(format, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
        public static unsafe void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, ReadOnlySpan<InvalidateFramebufferAttachment> attachments)
        {
            fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateFramebuffer(target, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
        public static unsafe void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, InvalidateFramebufferAttachment[] attachments)
        {
            fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateFramebuffer(target, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
        public static unsafe void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, ref readonly InvalidateFramebufferAttachment attachments)
        {
            fixed (InvalidateFramebufferAttachment* attachments_ptr = &attachments)
            {
                InvalidateFramebuffer(target, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
        public static unsafe void InvalidateNamedFramebufferData(int framebuffer, int numAttachments, ReadOnlySpan<FramebufferAttachment> attachments)
        {
            fixed (FramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
        public static unsafe void InvalidateNamedFramebufferData(int framebuffer, int numAttachments, FramebufferAttachment[] attachments)
        {
            fixed (FramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
        public static unsafe void InvalidateNamedFramebufferData(int framebuffer, int numAttachments, ref readonly FramebufferAttachment attachments)
        {
            fixed (FramebufferAttachment* attachments_ptr = &attachments)
            {
                InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, int numAttachments, ReadOnlySpan<FramebufferAttachment> attachments, int x, int y, int width, int height)
        {
            fixed (FramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, int numAttachments, FramebufferAttachment[] attachments, int x, int y, int width, int height)
        {
            fixed (FramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, int numAttachments, ref readonly FramebufferAttachment attachments, int x, int y, int width, int height)
        {
            fixed (FramebufferAttachment* attachments_ptr = &attachments)
            {
                InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, ReadOnlySpan<InvalidateFramebufferAttachment> attachments, int x, int y, int width, int height)
        {
            fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, InvalidateFramebufferAttachment[] attachments, int x, int y, int width, int height)
        {
            fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
            {
                InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
        public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, ref readonly InvalidateFramebufferAttachment attachments, int x, int y, int width, int height)
        {
            fixed (InvalidateFramebufferAttachment* attachments_ptr = &attachments)
            {
                InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
            }
        }
        /// <inheritdoc cref="Lightfv(LightName, LightParameter, float*)"/>
        public static unsafe void Lightf(LightName light, LightParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                Lightfv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Lightfv(LightName, LightParameter, float*)"/>
        public static unsafe void Lightf(LightName light, LightParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                Lightfv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Lightfv(LightName, LightParameter, float*)"/>
        public static unsafe void Lightf(LightName light, LightParameter pname, ref readonly float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                Lightfv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Lightiv(LightName, LightParameter, int*)"/>
        public static unsafe void Lighti(LightName light, LightParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                Lightiv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Lightiv(LightName, LightParameter, int*)"/>
        public static unsafe void Lighti(LightName light, LightParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                Lightiv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Lightiv(LightName, LightParameter, int*)"/>
        public static unsafe void Lighti(LightName light, LightParameter pname, ref readonly int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                Lightiv(light, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="LightModelfv(LightModelParameter, float*)"/>
        public static unsafe void LightModelf(LightModelParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                LightModelfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="LightModelfv(LightModelParameter, float*)"/>
        public static unsafe void LightModelf(LightModelParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                LightModelfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="LightModelfv(LightModelParameter, float*)"/>
        public static unsafe void LightModelf(LightModelParameter pname, ref readonly float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                LightModelfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="LightModeliv(LightModelParameter, int*)"/>
        public static unsafe void LightModeli(LightModelParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                LightModeliv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="LightModeliv(LightModelParameter, int*)"/>
        public static unsafe void LightModeli(LightModelParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                LightModeliv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="LightModeliv(LightModelParameter, int*)"/>
        public static unsafe void LightModeli(LightModelParameter pname, ref readonly int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                LightModeliv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="LoadMatrixd(double*)"/>
        public static unsafe void LoadMatrixd(ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m)
            {
                LoadMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadMatrixd(double*)"/>
        public static unsafe void LoadMatrixd(double[] m)
        {
            fixed (double* m_ptr = m)
            {
                LoadMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadMatrixd(double*)"/>
        public static unsafe void LoadMatrixd(ref readonly double m)
        {
            fixed (double* m_ptr = &m)
            {
                LoadMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadMatrixf(float*)"/>
        public static unsafe void LoadMatrixf(ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m)
            {
                LoadMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadMatrixf(float*)"/>
        public static unsafe void LoadMatrixf(float[] m)
        {
            fixed (float* m_ptr = m)
            {
                LoadMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadMatrixf(float*)"/>
        public static unsafe void LoadMatrixf(ref readonly float m)
        {
            fixed (float* m_ptr = &m)
            {
                LoadMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadTransposeMatrixd(double*)"/>
        public static unsafe void LoadTransposeMatrixd(ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m)
            {
                LoadTransposeMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadTransposeMatrixd(double*)"/>
        public static unsafe void LoadTransposeMatrixd(double[] m)
        {
            fixed (double* m_ptr = m)
            {
                LoadTransposeMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadTransposeMatrixd(double*)"/>
        public static unsafe void LoadTransposeMatrixd(ref readonly double m)
        {
            fixed (double* m_ptr = &m)
            {
                LoadTransposeMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadTransposeMatrixf(float*)"/>
        public static unsafe void LoadTransposeMatrixf(ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m)
            {
                LoadTransposeMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadTransposeMatrixf(float*)"/>
        public static unsafe void LoadTransposeMatrixf(float[] m)
        {
            fixed (float* m_ptr = m)
            {
                LoadTransposeMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="LoadTransposeMatrixf(float*)"/>
        public static unsafe void LoadTransposeMatrixf(ref readonly float m)
        {
            fixed (float* m_ptr = &m)
            {
                LoadTransposeMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="Map1d(MapTarget, double, double, int, int, double*)"/>
        public static unsafe void Map1d(MapTarget target, double u1, double u2, int stride, int order, ReadOnlySpan<double> points)
        {
            fixed (double* points_ptr = points)
            {
                Map1d(target, u1, u2, stride, order, points_ptr);
            }
        }
        /// <inheritdoc cref="Map1d(MapTarget, double, double, int, int, double*)"/>
        public static unsafe void Map1d(MapTarget target, double u1, double u2, int stride, int order, double[] points)
        {
            fixed (double* points_ptr = points)
            {
                Map1d(target, u1, u2, stride, order, points_ptr);
            }
        }
        /// <inheritdoc cref="Map1d(MapTarget, double, double, int, int, double*)"/>
        public static unsafe void Map1d(MapTarget target, double u1, double u2, int stride, int order, ref readonly double points)
        {
            fixed (double* points_ptr = &points)
            {
                Map1d(target, u1, u2, stride, order, points_ptr);
            }
        }
        /// <inheritdoc cref="Map1f(MapTarget, float, float, int, int, float*)"/>
        public static unsafe void Map1f(MapTarget target, float u1, float u2, int stride, int order, ReadOnlySpan<float> points)
        {
            fixed (float* points_ptr = points)
            {
                Map1f(target, u1, u2, stride, order, points_ptr);
            }
        }
        /// <inheritdoc cref="Map1f(MapTarget, float, float, int, int, float*)"/>
        public static unsafe void Map1f(MapTarget target, float u1, float u2, int stride, int order, float[] points)
        {
            fixed (float* points_ptr = points)
            {
                Map1f(target, u1, u2, stride, order, points_ptr);
            }
        }
        /// <inheritdoc cref="Map1f(MapTarget, float, float, int, int, float*)"/>
        public static unsafe void Map1f(MapTarget target, float u1, float u2, int stride, int order, ref readonly float points)
        {
            fixed (float* points_ptr = &points)
            {
                Map1f(target, u1, u2, stride, order, points_ptr);
            }
        }
        /// <inheritdoc cref="Map2d(MapTarget, double, double, int, int, double, double, int, int, double*)"/>
        public static unsafe void Map2d(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ReadOnlySpan<double> points)
        {
            fixed (double* points_ptr = points)
            {
                Map2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
            }
        }
        /// <inheritdoc cref="Map2d(MapTarget, double, double, int, int, double, double, int, int, double*)"/>
        public static unsafe void Map2d(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points)
        {
            fixed (double* points_ptr = points)
            {
                Map2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
            }
        }
        /// <inheritdoc cref="Map2d(MapTarget, double, double, int, int, double, double, int, int, double*)"/>
        public static unsafe void Map2d(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref readonly double points)
        {
            fixed (double* points_ptr = &points)
            {
                Map2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
            }
        }
        /// <inheritdoc cref="Map2f(MapTarget, float, float, int, int, float, float, int, int, float*)"/>
        public static unsafe void Map2f(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ReadOnlySpan<float> points)
        {
            fixed (float* points_ptr = points)
            {
                Map2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
            }
        }
        /// <inheritdoc cref="Map2f(MapTarget, float, float, int, int, float, float, int, int, float*)"/>
        public static unsafe void Map2f(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points)
        {
            fixed (float* points_ptr = points)
            {
                Map2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
            }
        }
        /// <inheritdoc cref="Map2f(MapTarget, float, float, int, int, float, float, int, int, float*)"/>
        public static unsafe void Map2f(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref readonly float points)
        {
            fixed (float* points_ptr = &points)
            {
                Map2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
            }
        }
        /// <inheritdoc cref="Materialfv(TriangleFace, MaterialParameter, float*)"/>
        public static unsafe void Materialf(TriangleFace face, MaterialParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                Materialfv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Materialfv(TriangleFace, MaterialParameter, float*)"/>
        public static unsafe void Materialf(TriangleFace face, MaterialParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                Materialfv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Materialfv(TriangleFace, MaterialParameter, float*)"/>
        public static unsafe void Materialf(TriangleFace face, MaterialParameter pname, ref readonly float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                Materialfv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Materialiv(TriangleFace, MaterialParameter, int*)"/>
        public static unsafe void Materiali(TriangleFace face, MaterialParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                Materialiv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Materialiv(TriangleFace, MaterialParameter, int*)"/>
        public static unsafe void Materiali(TriangleFace face, MaterialParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                Materialiv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="Materialiv(TriangleFace, MaterialParameter, int*)"/>
        public static unsafe void Materiali(TriangleFace face, MaterialParameter pname, ref readonly int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                Materialiv(face, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="MultiDrawArrays(PrimitiveType, int*, int*, int)"/>
        public static unsafe void MultiDrawArrays(PrimitiveType mode, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int drawcount)
        {
            fixed (int* count_ptr = count)
            {
                fixed (int* first_ptr = first)
                {
                    MultiDrawArrays(mode, first_ptr, count_ptr, drawcount);
                }
            }
        }
        /// <inheritdoc cref="MultiDrawArrays(PrimitiveType, int*, int*, int)"/>
        public static unsafe void MultiDrawArrays(PrimitiveType mode, int[] first, int[] count, int drawcount)
        {
            fixed (int* count_ptr = count)
            {
                fixed (int* first_ptr = first)
                {
                    MultiDrawArrays(mode, first_ptr, count_ptr, drawcount);
                }
            }
        }
        /// <inheritdoc cref="MultiDrawArrays(PrimitiveType, int*, int*, int)"/>
        public static unsafe void MultiDrawArrays(PrimitiveType mode, ref readonly int first, ref readonly int count, int drawcount)
        {
            fixed (int* first_ptr = &first)
            fixed (int* count_ptr = &count)
            {
                MultiDrawArrays(mode, first_ptr, count_ptr, drawcount);
            }
        }
        /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
        public static unsafe void MultiDrawArraysIndirect(PrimitiveType mode, IntPtr indirect, int drawcount, int stride)
        {
            void* indirect_vptr = (void*)indirect;
            MultiDrawArraysIndirect(mode, indirect_vptr, drawcount, stride);
        }
        /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
        public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, ReadOnlySpan<T1> indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
        public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, T1[] indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
        public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, ref readonly T1 indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawArraysIndirectCount(PrimitiveType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawArraysIndirectCount(PrimitiveType mode, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            void* indirect_vptr = (void*)indirect;
            MultiDrawArraysIndirectCount(mode, indirect_vptr, drawcount, maxdrawcount, stride);
        }
        /// <inheritdoc cref="MultiDrawArraysIndirectCount(PrimitiveType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawArraysIndirectCount<T1>(PrimitiveType mode, ReadOnlySpan<T1> indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawArraysIndirectCount(mode, indirect_ptr, drawcount, maxdrawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawArraysIndirectCount(PrimitiveType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawArraysIndirectCount<T1>(PrimitiveType mode, T1[] indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawArraysIndirectCount(mode, indirect_ptr, drawcount, maxdrawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawArraysIndirectCount(PrimitiveType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawArraysIndirectCount<T1>(PrimitiveType mode, ref readonly T1 indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                MultiDrawArraysIndirectCount(mode, indirect_ptr, drawcount, maxdrawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawElements(PrimitiveType, int*, DrawElementsType, void**, int)"/>
        public static unsafe void MultiDrawElements(PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int drawcount)
        {
            fixed (int* count_ptr = count)
            {
                MultiDrawElements(mode, count_ptr, type, indices, drawcount);
            }
        }
        /// <inheritdoc cref="MultiDrawElements(PrimitiveType, int*, DrawElementsType, void**, int)"/>
        public static unsafe void MultiDrawElements(PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int drawcount)
        {
            fixed (int* count_ptr = count)
            {
                MultiDrawElements(mode, count_ptr, type, indices, drawcount);
            }
        }
        /// <inheritdoc cref="MultiDrawElements(PrimitiveType, int*, DrawElementsType, void**, int)"/>
        public static unsafe void MultiDrawElements(PrimitiveType mode, ref readonly int count, DrawElementsType type, void** indices, int drawcount)
        {
            fixed (int* count_ptr = &count)
            {
                MultiDrawElements(mode, count_ptr, type, indices, drawcount);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
        public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int drawcount, ReadOnlySpan<int> basevertex)
        {
            fixed (int* basevertex_ptr = basevertex)
            {
                fixed (int* count_ptr = count)
                {
                    MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                }
            }
        }
        /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
        public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int drawcount, int[] basevertex)
        {
            fixed (int* basevertex_ptr = basevertex)
            {
                fixed (int* count_ptr = count)
                {
                    MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                }
            }
        }
        /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
        public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, ref readonly int count, DrawElementsType type, void** indices, int drawcount, ref readonly int basevertex)
        {
            fixed (int* count_ptr = &count)
            fixed (int* basevertex_ptr = &basevertex)
            {
                MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
        public static unsafe void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawcount, int stride)
        {
            void* indirect_vptr = (void*)indirect;
            MultiDrawElementsIndirect(mode, type, indirect_vptr, drawcount, stride);
        }
        /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
        public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
        public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, T1[] indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
        public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, ref readonly T1 indirect, int drawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsIndirectCount(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawElementsIndirectCount(PrimitiveType mode, DrawElementsType type, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            void* indirect_vptr = (void*)indirect;
            MultiDrawElementsIndirectCount(mode, type, indirect_vptr, drawcount, maxdrawcount, stride);
        }
        /// <inheritdoc cref="MultiDrawElementsIndirectCount(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawElementsIndirectCount<T1>(PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawElementsIndirectCount(mode, type, indirect_ptr, drawcount, maxdrawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsIndirectCount(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawElementsIndirectCount<T1>(PrimitiveType mode, DrawElementsType type, T1[] indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = indirect)
            {
                MultiDrawElementsIndirectCount(mode, type, indirect_ptr, drawcount, maxdrawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiDrawElementsIndirectCount(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
        public static unsafe void MultiDrawElementsIndirectCount<T1>(PrimitiveType mode, DrawElementsType type, ref readonly T1 indirect, IntPtr drawcount, int maxdrawcount, int stride)
            where T1 : unmanaged
        {
            fixed (void* indirect_ptr = &indirect)
            {
                MultiDrawElementsIndirectCount(mode, type, indirect_ptr, drawcount, maxdrawcount, stride);
            }
        }
        /// <inheritdoc cref="MultiTexCoord1dv(TextureUnit, double*)"/>
        public static unsafe void MultiTexCoord1d(TextureUnit target, ref readonly double v)
        {
            fixed (double* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                MultiTexCoord1dv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord1fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord1f(TextureUnit target, ref readonly float v)
        {
            fixed (float* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord1fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord1iv(TextureUnit, int*)"/>
        public static unsafe void MultiTexCoord1i(TextureUnit target, ref readonly int v)
        {
            fixed (int* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                MultiTexCoord1iv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord1s(TextureUnit, short)"/>
        public static unsafe void MultiTexCoord1(TextureUnit target, short s)
        {
            MultiTexCoord1s(target, s);
        }
        /// <inheritdoc cref="MultiTexCoord1sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord1(TextureUnit target, ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                MultiTexCoord1sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2dv(TextureUnit, double*)"/>
        public static unsafe void MultiTexCoord2d(TextureUnit target, ref readonly Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                MultiTexCoord2dv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord2f(TextureUnit target, ref readonly Vector2 v)
        {
            fixed (Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord2fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord2f(TextureUnit target, ref readonly System.Numerics.Vector2 v)
        {
            fixed (System.Numerics.Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord2fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord2f(TextureUnit target, ReadOnlySpan<System.Numerics.Vector2> v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord2fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord2f(TextureUnit target, System.Numerics.Vector2[] v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord2fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2iv(TextureUnit, int*)"/>
        public static unsafe void MultiTexCoord2i(TextureUnit target, ref readonly Vector2i v)
        {
            fixed (Vector2i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                MultiTexCoord2iv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2s(TextureUnit, short, short)"/>
        public static unsafe void MultiTexCoord2(TextureUnit target, short s, short t)
        {
            MultiTexCoord2s(target, s, t);
        }
        /// <inheritdoc cref="MultiTexCoord2sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord2(TextureUnit target, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                MultiTexCoord2sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord2(TextureUnit target, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                MultiTexCoord2sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord2sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord2(TextureUnit target, ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                MultiTexCoord2sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3dv(TextureUnit, double*)"/>
        public static unsafe void MultiTexCoord3d(TextureUnit target, ref readonly Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                MultiTexCoord3dv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord3f(TextureUnit target, ref readonly Vector3 v)
        {
            fixed (Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord3fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord3f(TextureUnit target, ref readonly System.Numerics.Vector3 v)
        {
            fixed (System.Numerics.Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord3fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord3f(TextureUnit target, ReadOnlySpan<System.Numerics.Vector3> v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord3fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord3f(TextureUnit target, System.Numerics.Vector3[] v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord3fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3iv(TextureUnit, int*)"/>
        public static unsafe void MultiTexCoord3i(TextureUnit target, ref readonly Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                MultiTexCoord3iv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3s(TextureUnit, short, short, short)"/>
        public static unsafe void MultiTexCoord3(TextureUnit target, short s, short t, short r)
        {
            MultiTexCoord3s(target, s, t, r);
        }
        /// <inheritdoc cref="MultiTexCoord3sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord3(TextureUnit target, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                MultiTexCoord3sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord3(TextureUnit target, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                MultiTexCoord3sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord3sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord3(TextureUnit target, ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                MultiTexCoord3sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4dv(TextureUnit, double*)"/>
        public static unsafe void MultiTexCoord4d(TextureUnit target, ref readonly Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                MultiTexCoord4dv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord4f(TextureUnit target, ref readonly Vector4 v)
        {
            fixed (Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord4fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord4f(TextureUnit target, ref readonly System.Numerics.Vector4 v)
        {
            fixed (System.Numerics.Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord4fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord4f(TextureUnit target, ReadOnlySpan<System.Numerics.Vector4> v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord4fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4fv(TextureUnit, float*)"/>
        public static unsafe void MultiTexCoord4f(TextureUnit target, System.Numerics.Vector4[] v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                MultiTexCoord4fv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4iv(TextureUnit, int*)"/>
        public static unsafe void MultiTexCoord4i(TextureUnit target, ref readonly Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                MultiTexCoord4iv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4s(TextureUnit, short, short, short, short)"/>
        public static unsafe void MultiTexCoord4(TextureUnit target, short s, short t, short r, short q)
        {
            MultiTexCoord4s(target, s, t, r, q);
        }
        /// <inheritdoc cref="MultiTexCoord4sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord4(TextureUnit target, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                MultiTexCoord4sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord4(TextureUnit target, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                MultiTexCoord4sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoord4sv(TextureUnit, short*)"/>
        public static unsafe void MultiTexCoord4(TextureUnit target, ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                MultiTexCoord4sv(target, v_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP1uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, ref readonly uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                MultiTexCoordP1uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP2uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, ref readonly uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                MultiTexCoordP2uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP3uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, ref readonly uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                MultiTexCoordP3uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultiTexCoordP4uiv(TextureUnit, TexCoordPointerType, uint*)"/>
        public static unsafe void MultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, ref readonly uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                MultiTexCoordP4uiv(texture, type, coords_ptr);
            }
        }
        /// <inheritdoc cref="MultMatrixd(double*)"/>
        public static unsafe void MultMatrixd(ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m)
            {
                MultMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="MultMatrixd(double*)"/>
        public static unsafe void MultMatrixd(double[] m)
        {
            fixed (double* m_ptr = m)
            {
                MultMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="MultMatrixd(double*)"/>
        public static unsafe void MultMatrixd(ref readonly double m)
        {
            fixed (double* m_ptr = &m)
            {
                MultMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="MultMatrixf(float*)"/>
        public static unsafe void MultMatrixf(ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m)
            {
                MultMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="MultMatrixf(float*)"/>
        public static unsafe void MultMatrixf(float[] m)
        {
            fixed (float* m_ptr = m)
            {
                MultMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="MultMatrixf(float*)"/>
        public static unsafe void MultMatrixf(ref readonly float m)
        {
            fixed (float* m_ptr = &m)
            {
                MultMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="MultTransposeMatrixd(double*)"/>
        public static unsafe void MultTransposeMatrixd(ReadOnlySpan<double> m)
        {
            fixed (double* m_ptr = m)
            {
                MultTransposeMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="MultTransposeMatrixd(double*)"/>
        public static unsafe void MultTransposeMatrixd(double[] m)
        {
            fixed (double* m_ptr = m)
            {
                MultTransposeMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="MultTransposeMatrixd(double*)"/>
        public static unsafe void MultTransposeMatrixd(ref readonly double m)
        {
            fixed (double* m_ptr = &m)
            {
                MultTransposeMatrixd(m_ptr);
            }
        }
        /// <inheritdoc cref="MultTransposeMatrixf(float*)"/>
        public static unsafe void MultTransposeMatrixf(ReadOnlySpan<float> m)
        {
            fixed (float* m_ptr = m)
            {
                MultTransposeMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="MultTransposeMatrixf(float*)"/>
        public static unsafe void MultTransposeMatrixf(float[] m)
        {
            fixed (float* m_ptr = m)
            {
                MultTransposeMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="MultTransposeMatrixf(float*)"/>
        public static unsafe void MultTransposeMatrixf(ref readonly float m)
        {
            fixed (float* m_ptr = &m)
            {
                MultTransposeMatrixf(m_ptr);
            }
        }
        /// <inheritdoc cref="NamedBufferData(int, nint, void*, BufferUsage)"/>
        public static unsafe void NamedBufferData(int buffer, nint size, IntPtr data, BufferUsage usage)
        {
            void* data_vptr = (void*)data;
            NamedBufferData(buffer, size, data_vptr, usage);
        }
        /// <inheritdoc cref="NamedBufferData(int, nint, void*, BufferUsage)"/>
        public static unsafe void NamedBufferData<T1>(int buffer, nint size, ReadOnlySpan<T1> data, BufferUsage usage)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                NamedBufferData(buffer, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="NamedBufferData(int, nint, void*, BufferUsage)"/>
        public static unsafe void NamedBufferData<T1>(int buffer, nint size, T1[] data, BufferUsage usage)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                NamedBufferData(buffer, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="NamedBufferData(int, nint, void*, BufferUsage)"/>
        public static unsafe void NamedBufferData<T1>(int buffer, nint size, ref readonly T1 data, BufferUsage usage)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                NamedBufferData(buffer, size, data_ptr, usage);
            }
        }
        /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
        public static unsafe void NamedBufferStorage(int buffer, nint size, IntPtr data, BufferStorageMask flags)
        {
            void* data_vptr = (void*)data;
            NamedBufferStorage(buffer, size, data_vptr, flags);
        }
        /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
        public static unsafe void NamedBufferStorage<T1>(int buffer, nint size, ReadOnlySpan<T1> data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                NamedBufferStorage(buffer, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
        public static unsafe void NamedBufferStorage<T1>(int buffer, nint size, T1[] data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                NamedBufferStorage(buffer, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
        public static unsafe void NamedBufferStorage<T1>(int buffer, nint size, ref readonly T1 data, BufferStorageMask flags)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                NamedBufferStorage(buffer, size, data_ptr, flags);
            }
        }
        /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void NamedBufferSubData(int buffer, IntPtr offset, nint size, IntPtr data)
        {
            void* data_vptr = (void*)data;
            NamedBufferSubData(buffer, offset, size, data_vptr);
        }
        /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, ReadOnlySpan<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                NamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                NamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
        public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, ref readonly T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                NamedBufferSubData(buffer, offset, size, data_ptr);
            }
        }
        /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
        public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, int n, ReadOnlySpan<ColorBuffer> bufs)
        {
            fixed (ColorBuffer* bufs_ptr = bufs)
            {
                NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
        public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, int n, ColorBuffer[] bufs)
        {
            fixed (ColorBuffer* bufs_ptr = bufs)
            {
                NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
        public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, int n, ref readonly ColorBuffer bufs)
        {
            fixed (ColorBuffer* bufs_ptr = &bufs)
            {
                NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
            }
        }
        /// <inheritdoc cref="Normal3b(sbyte, sbyte, sbyte)"/>
        public static unsafe void Normal3(sbyte nx, sbyte ny, sbyte nz)
        {
            Normal3b(nx, ny, nz);
        }
        /// <inheritdoc cref="Normal3bv(sbyte*)"/>
        public static unsafe void Normal3(ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                Normal3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3bv(sbyte*)"/>
        public static unsafe void Normal3(sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                Normal3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3bv(sbyte*)"/>
        public static unsafe void Normal3(ref readonly sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                Normal3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3dv(double*)"/>
        public static unsafe void Normal3d(ref readonly Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                Normal3dv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3fv(float*)"/>
        public static unsafe void Normal3f(ref readonly Vector3 v)
        {
            fixed (Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Normal3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3fv(float*)"/>
        public static unsafe void Normal3f(ref readonly System.Numerics.Vector3 v)
        {
            fixed (System.Numerics.Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Normal3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3fv(float*)"/>
        public static unsafe void Normal3f(ReadOnlySpan<System.Numerics.Vector3> v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Normal3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3fv(float*)"/>
        public static unsafe void Normal3f(System.Numerics.Vector3[] v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Normal3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3iv(int*)"/>
        public static unsafe void Normal3i(ref readonly Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                Normal3iv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3s(short, short, short)"/>
        public static unsafe void Normal3(short nx, short ny, short nz)
        {
            Normal3s(nx, ny, nz);
        }
        /// <inheritdoc cref="Normal3sv(short*)"/>
        public static unsafe void Normal3(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                Normal3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3sv(short*)"/>
        public static unsafe void Normal3(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                Normal3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Normal3sv(short*)"/>
        public static unsafe void Normal3(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                Normal3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="NormalP3uiv(NormalPointerType, uint*)"/>
        public static unsafe void NormalP3ui(NormalPointerType type, ref readonly uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                NormalP3uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="NormalPointer(NormalPointerType, int, void*)"/>
        public static unsafe void NormalPointer(NormalPointerType type, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            NormalPointer(type, stride, pointer_vptr);
        }
        /// <inheritdoc cref="NormalPointer(NormalPointerType, int, void*)"/>
        public static unsafe void NormalPointer<T1>(NormalPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                NormalPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="NormalPointer(NormalPointerType, int, void*)"/>
        public static unsafe void NormalPointer<T1>(NormalPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                NormalPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="NormalPointer(NormalPointerType, int, void*)"/>
        public static unsafe void NormalPointer<T1>(NormalPointerType type, int stride, ref readonly T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                NormalPointer(type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="ObjectLabel(ObjectIdentifier, uint, int, byte*)"/>
        public static unsafe void ObjectLabel(ObjectIdentifier identifier, uint name, int length, string label)
        {
            byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
            ObjectLabel(identifier, name, length, label_ptr);
            Marshal.FreeCoTaskMem((IntPtr)label_ptr);
        }
        /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
        public static unsafe void ObjectPtrLabel(IntPtr ptr, int length, string label)
        {
            byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
            void* ptr_vptr = (void*)ptr;
            ObjectPtrLabel(ptr_vptr, length, label_ptr);
            Marshal.FreeCoTaskMem((IntPtr)label_ptr);
        }
        /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
        public static unsafe void ObjectPtrLabel<T1>(ReadOnlySpan<T1> ptr, int length, string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = ptr)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                ObjectPtrLabel(ptr_ptr, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
        public static unsafe void ObjectPtrLabel<T1>(T1[] ptr, int length, string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = ptr)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                ObjectPtrLabel(ptr_ptr, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
        public static unsafe void ObjectPtrLabel<T1>(ref readonly T1 ptr, int length, string label)
            where T1 : unmanaged
        {
            fixed (void* ptr_ptr = &ptr)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                ObjectPtrLabel(ptr_ptr, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
        }
        /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
        public static unsafe void PatchParameterf(PatchParameterName pname, ReadOnlySpan<float> values)
        {
            fixed (float* values_ptr = values)
            {
                PatchParameterfv(pname, values_ptr);
            }
        }
        /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
        public static unsafe void PatchParameterf(PatchParameterName pname, float[] values)
        {
            fixed (float* values_ptr = values)
            {
                PatchParameterfv(pname, values_ptr);
            }
        }
        /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
        public static unsafe void PatchParameterf(PatchParameterName pname, ref readonly float values)
        {
            fixed (float* values_ptr = &values)
            {
                PatchParameterfv(pname, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapfv(PixelMap, int, float*)"/>
        public static unsafe void PixelMapf(PixelMap map, int mapsize, ReadOnlySpan<float> values)
        {
            fixed (float* values_ptr = values)
            {
                PixelMapfv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapfv(PixelMap, int, float*)"/>
        public static unsafe void PixelMapf(PixelMap map, int mapsize, float[] values)
        {
            fixed (float* values_ptr = values)
            {
                PixelMapfv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapfv(PixelMap, int, float*)"/>
        public static unsafe void PixelMapf(PixelMap map, int mapsize, ref readonly float values)
        {
            fixed (float* values_ptr = &values)
            {
                PixelMapfv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapuiv(PixelMap, int, uint*)"/>
        public static unsafe void PixelMapui(PixelMap map, int mapsize, ReadOnlySpan<uint> values)
        {
            fixed (uint* values_ptr = values)
            {
                PixelMapuiv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapuiv(PixelMap, int, uint*)"/>
        public static unsafe void PixelMapui(PixelMap map, int mapsize, uint[] values)
        {
            fixed (uint* values_ptr = values)
            {
                PixelMapuiv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapuiv(PixelMap, int, uint*)"/>
        public static unsafe void PixelMapui(PixelMap map, int mapsize, ref readonly uint values)
        {
            fixed (uint* values_ptr = &values)
            {
                PixelMapuiv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapusv(PixelMap, int, ushort*)"/>
        public static unsafe void PixelMap(PixelMap map, int mapsize, ReadOnlySpan<ushort> values)
        {
            fixed (ushort* values_ptr = values)
            {
                PixelMapusv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapusv(PixelMap, int, ushort*)"/>
        public static unsafe void PixelMap(PixelMap map, int mapsize, ushort[] values)
        {
            fixed (ushort* values_ptr = values)
            {
                PixelMapusv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PixelMapusv(PixelMap, int, ushort*)"/>
        public static unsafe void PixelMap(PixelMap map, int mapsize, ref readonly ushort values)
        {
            fixed (ushort* values_ptr = &values)
            {
                PixelMapusv(map, mapsize, values_ptr);
            }
        }
        /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
        public static unsafe void PointParameterf(PointParameterNameARB pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                PointParameterfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
        public static unsafe void PointParameterf(PointParameterNameARB pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                PointParameterfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PointParameterfv(PointParameterNameARB, float*)"/>
        public static unsafe void PointParameterf(PointParameterNameARB pname, ref readonly float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                PointParameterfv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PointParameteriv(PointParameterNameARB, int*)"/>
        public static unsafe void PointParameteri(PointParameterNameARB pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                PointParameteriv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PointParameteriv(PointParameterNameARB, int*)"/>
        public static unsafe void PointParameteri(PointParameterNameARB pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                PointParameteriv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PointParameteriv(PointParameterNameARB, int*)"/>
        public static unsafe void PointParameteri(PointParameterNameARB pname, ref readonly int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                PointParameteriv(pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="PolygonStipple(byte*)"/>
        public static unsafe void PolygonStipple(ReadOnlySpan<byte> mask)
        {
            fixed (byte* mask_ptr = mask)
            {
                PolygonStipple(mask_ptr);
            }
        }
        /// <inheritdoc cref="PolygonStipple(byte*)"/>
        public static unsafe void PolygonStipple(byte[] mask)
        {
            fixed (byte* mask_ptr = mask)
            {
                PolygonStipple(mask_ptr);
            }
        }
        /// <inheritdoc cref="PolygonStipple(byte*)"/>
        public static unsafe void PolygonStipple(ref readonly byte mask)
        {
            fixed (byte* mask_ptr = &mask)
            {
                PolygonStipple(mask_ptr);
            }
        }
        /// <inheritdoc cref="PrioritizeTextures(int, int*, float*)"/>
        public static unsafe void PrioritizeTextures(int n, ReadOnlySpan<int> textures, ReadOnlySpan<float> priorities)
        {
            fixed (float* priorities_ptr = priorities)
            {
                fixed (int* textures_ptr = textures)
                {
                    PrioritizeTextures(n, textures_ptr, priorities_ptr);
                }
            }
        }
        /// <inheritdoc cref="PrioritizeTextures(int, int*, float*)"/>
        public static unsafe void PrioritizeTextures(int n, int[] textures, float[] priorities)
        {
            fixed (float* priorities_ptr = priorities)
            {
                fixed (int* textures_ptr = textures)
                {
                    PrioritizeTextures(n, textures_ptr, priorities_ptr);
                }
            }
        }
        /// <inheritdoc cref="PrioritizeTextures(int, int*, float*)"/>
        public static unsafe void PrioritizeTextures(int n, ref readonly int textures, ref readonly float priorities)
        {
            fixed (int* textures_ptr = &textures)
            fixed (float* priorities_ptr = &priorities)
            {
                PrioritizeTextures(n, textures_ptr, priorities_ptr);
            }
        }
        /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
        public static unsafe void ProgramBinary(int program, All binaryFormat, IntPtr binary, int length)
        {
            void* binary_vptr = (void*)binary;
            ProgramBinary(program, binaryFormat, binary_vptr, length);
        }
        /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
        public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, ReadOnlySpan<T1> binary, int length)
            where T1 : unmanaged
        {
            fixed (void* binary_ptr = binary)
            {
                ProgramBinary(program, binaryFormat, binary_ptr, length);
            }
        }
        /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
        public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, T1[] binary, int length)
            where T1 : unmanaged
        {
            fixed (void* binary_ptr = binary)
            {
                ProgramBinary(program, binaryFormat, binary_ptr, length);
            }
        }
        /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
        public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, ref readonly T1 binary, int length)
            where T1 : unmanaged
        {
            fixed (void* binary_ptr = &binary)
            {
                ProgramBinary(program, binaryFormat, binary_ptr, length);
            }
        }
        /// <inheritdoc cref="ProgramUniform1dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform1d(int program, int location, int count, ref readonly double value)
        {
            fixed (double* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform1dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform1fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform1f(int program, int location, int count, ref readonly float value)
        {
            fixed (float* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform1fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform1iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform1i(int program, int location, int count, ref readonly int value)
        {
            fixed (int* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform1iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform1uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform1ui(int program, int location, int count, ref readonly uint value)
        {
            fixed (uint* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform1uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform2d(int program, int location, int count, ref readonly Vector2d value)
        {
            fixed (Vector2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform2dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform2d(int program, int location, int count, ReadOnlySpan<Vector2d> value)
        {
            fixed (Vector2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform2dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform2d(int program, int location, int count, Vector2d[] value)
        {
            fixed (Vector2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform2dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, ref readonly Vector2 value)
        {
            fixed (Vector2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, ReadOnlySpan<Vector2> value)
        {
            fixed (Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, Vector2[] value)
        {
            fixed (Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, ref readonly System.Numerics.Vector2 value)
        {
            fixed (System.Numerics.Vector2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
        {
            fixed (System.Numerics.Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform2f(int program, int location, int count, System.Numerics.Vector2[] value)
        {
            fixed (System.Numerics.Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform2fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform2i(int program, int location, int count, ref readonly Vector2i value)
        {
            fixed (Vector2i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform2iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform2i(int program, int location, int count, ReadOnlySpan<Vector2i> value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform2iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform2i(int program, int location, int count, Vector2i[] value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform2iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform2ui(int program, int location, int count, ref readonly Vector2i value)
        {
            fixed (Vector2i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform2uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform2ui(int program, int location, int count, ReadOnlySpan<Vector2i> value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform2uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform2ui(int program, int location, int count, Vector2i[] value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform2uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform3d(int program, int location, int count, ref readonly Vector3d value)
        {
            fixed (Vector3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform3dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform3d(int program, int location, int count, ReadOnlySpan<Vector3d> value)
        {
            fixed (Vector3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform3dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform3d(int program, int location, int count, Vector3d[] value)
        {
            fixed (Vector3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform3dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, ref readonly Vector3 value)
        {
            fixed (Vector3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, ReadOnlySpan<Vector3> value)
        {
            fixed (Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, Vector3[] value)
        {
            fixed (Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, ref readonly System.Numerics.Vector3 value)
        {
            fixed (System.Numerics.Vector3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
        {
            fixed (System.Numerics.Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform3f(int program, int location, int count, System.Numerics.Vector3[] value)
        {
            fixed (System.Numerics.Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform3fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform3i(int program, int location, int count, ref readonly Vector3i value)
        {
            fixed (Vector3i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform3iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform3i(int program, int location, int count, ReadOnlySpan<Vector3i> value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform3iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform3i(int program, int location, int count, Vector3i[] value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform3iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform3ui(int program, int location, int count, ref readonly Vector3i value)
        {
            fixed (Vector3i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform3uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform3ui(int program, int location, int count, ReadOnlySpan<Vector3i> value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform3uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform3ui(int program, int location, int count, Vector3i[] value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform3uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform4d(int program, int location, int count, ref readonly Vector4d value)
        {
            fixed (Vector4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform4dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform4d(int program, int location, int count, ReadOnlySpan<Vector4d> value)
        {
            fixed (Vector4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform4dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
        public static unsafe void ProgramUniform4d(int program, int location, int count, Vector4d[] value)
        {
            fixed (Vector4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniform4dv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, ref readonly Vector4 value)
        {
            fixed (Vector4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, ReadOnlySpan<Vector4> value)
        {
            fixed (Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, Vector4[] value)
        {
            fixed (Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, ref readonly System.Numerics.Vector4 value)
        {
            fixed (System.Numerics.Vector4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
        {
            fixed (System.Numerics.Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
        public static unsafe void ProgramUniform4f(int program, int location, int count, System.Numerics.Vector4[] value)
        {
            fixed (System.Numerics.Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniform4fv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform4i(int program, int location, int count, ref readonly Vector4i value)
        {
            fixed (Vector4i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform4iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform4i(int program, int location, int count, ReadOnlySpan<Vector4i> value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform4iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
        public static unsafe void ProgramUniform4i(int program, int location, int count, Vector4i[] value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                ProgramUniform4iv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform4ui(int program, int location, int count, ref readonly Vector4i value)
        {
            fixed (Vector4i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform4uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform4ui(int program, int location, int count, ReadOnlySpan<Vector4i> value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform4uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
        public static unsafe void ProgramUniform4ui(int program, int location, int count, Vector4i[] value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                ProgramUniform4uiv(program, location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, ref readonly Matrix2d value)
        {
            fixed (Matrix2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2d> value)
        {
            fixed (Matrix2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, Matrix2d[] value)
        {
            fixed (Matrix2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, ref readonly Matrix2 value)
        {
            fixed (Matrix2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2> value)
        {
            fixed (Matrix2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, Matrix2[] value)
        {
            fixed (Matrix2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, ref readonly Matrix2x3d value)
        {
            fixed (Matrix2x3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3d> value)
        {
            fixed (Matrix2x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, Matrix2x3d[] value)
        {
            fixed (Matrix2x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, ref readonly Matrix2x3 value)
        {
            fixed (Matrix2x3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3> value)
        {
            fixed (Matrix2x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, Matrix2x3[] value)
        {
            fixed (Matrix2x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, ref readonly Matrix2x4d value)
        {
            fixed (Matrix2x4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4d> value)
        {
            fixed (Matrix2x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, Matrix2x4d[] value)
        {
            fixed (Matrix2x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, ref readonly Matrix2x4 value)
        {
            fixed (Matrix2x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4> value)
        {
            fixed (Matrix2x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, Matrix2x4[] value)
        {
            fixed (Matrix2x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, ref readonly Matrix3d value)
        {
            fixed (Matrix3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3d> value)
        {
            fixed (Matrix3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, Matrix3d[] value)
        {
            fixed (Matrix3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, ref readonly Matrix3 value)
        {
            fixed (Matrix3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3> value)
        {
            fixed (Matrix3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, Matrix3[] value)
        {
            fixed (Matrix3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, ref readonly Matrix3x2d value)
        {
            fixed (Matrix3x2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2d> value)
        {
            fixed (Matrix3x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, Matrix3x2d[] value)
        {
            fixed (Matrix3x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ref readonly Matrix3x2 value)
        {
            fixed (Matrix3x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2> value)
        {
            fixed (Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, Matrix3x2[] value)
        {
            fixed (Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ref readonly System.Numerics.Matrix3x2 value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix3x2> value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, System.Numerics.Matrix3x2[] value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, ref readonly Matrix3x4d value)
        {
            fixed (Matrix3x4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4d> value)
        {
            fixed (Matrix3x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, Matrix3x4d[] value)
        {
            fixed (Matrix3x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, ref readonly Matrix3x4 value)
        {
            fixed (Matrix3x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4> value)
        {
            fixed (Matrix3x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, Matrix3x4[] value)
        {
            fixed (Matrix3x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, ref readonly Matrix4d value)
        {
            fixed (Matrix4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4d> value)
        {
            fixed (Matrix4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, Matrix4d[] value)
        {
            fixed (Matrix4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ref readonly Matrix4 value)
        {
            fixed (Matrix4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4> value)
        {
            fixed (Matrix4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, Matrix4[] value)
        {
            fixed (Matrix4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ref readonly System.Numerics.Matrix4x4 value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix4x4> value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, System.Numerics.Matrix4x4[] value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, ref readonly Matrix4x2d value)
        {
            fixed (Matrix4x2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2d> value)
        {
            fixed (Matrix4x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, Matrix4x2d[] value)
        {
            fixed (Matrix4x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, ref readonly Matrix4x2 value)
        {
            fixed (Matrix4x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2> value)
        {
            fixed (Matrix4x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, Matrix4x2[] value)
        {
            fixed (Matrix4x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, ref readonly Matrix4x3d value)
        {
            fixed (Matrix4x3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3d> value)
        {
            fixed (Matrix4x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
        public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, Matrix4x3d[] value)
        {
            fixed (Matrix4x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, ref readonly Matrix4x3 value)
        {
            fixed (Matrix4x3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3> value)
        {
            fixed (Matrix4x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
        public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, Matrix4x3[] value)
        {
            fixed (Matrix4x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="PushDebugGroup(DebugSource, uint, int, byte*)"/>
        public static unsafe void PushDebugGroup(DebugSource source, uint id, int length, string message)
        {
            byte* message_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(message);
            PushDebugGroup(source, id, length, message_ptr);
            Marshal.FreeCoTaskMem((IntPtr)message_ptr);
        }
        /// <inheritdoc cref="RasterPos2dv(double*)"/>
        public static unsafe void RasterPos2d(ref readonly Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                RasterPos2dv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2fv(float*)"/>
        public static unsafe void RasterPos2f(ref readonly Vector2 v)
        {
            fixed (Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2fv(float*)"/>
        public static unsafe void RasterPos2f(ref readonly System.Numerics.Vector2 v)
        {
            fixed (System.Numerics.Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2fv(float*)"/>
        public static unsafe void RasterPos2f(ReadOnlySpan<System.Numerics.Vector2> v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2fv(float*)"/>
        public static unsafe void RasterPos2f(System.Numerics.Vector2[] v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2iv(int*)"/>
        public static unsafe void RasterPos2i(ref readonly Vector2i v)
        {
            fixed (Vector2i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                RasterPos2iv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2s(short, short)"/>
        public static unsafe void RasterPos2(short x, short y)
        {
            RasterPos2s(x, y);
        }
        /// <inheritdoc cref="RasterPos2sv(short*)"/>
        public static unsafe void RasterPos2(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                RasterPos2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2sv(short*)"/>
        public static unsafe void RasterPos2(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                RasterPos2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos2sv(short*)"/>
        public static unsafe void RasterPos2(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                RasterPos2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3dv(double*)"/>
        public static unsafe void RasterPos3d(ref readonly Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                RasterPos3dv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3fv(float*)"/>
        public static unsafe void RasterPos3f(ref readonly Vector3 v)
        {
            fixed (Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3fv(float*)"/>
        public static unsafe void RasterPos3f(ref readonly System.Numerics.Vector3 v)
        {
            fixed (System.Numerics.Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3fv(float*)"/>
        public static unsafe void RasterPos3f(ReadOnlySpan<System.Numerics.Vector3> v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3fv(float*)"/>
        public static unsafe void RasterPos3f(System.Numerics.Vector3[] v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3iv(int*)"/>
        public static unsafe void RasterPos3i(ref readonly Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                RasterPos3iv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3s(short, short, short)"/>
        public static unsafe void RasterPos3(short x, short y, short z)
        {
            RasterPos3s(x, y, z);
        }
        /// <inheritdoc cref="RasterPos3sv(short*)"/>
        public static unsafe void RasterPos3(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                RasterPos3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3sv(short*)"/>
        public static unsafe void RasterPos3(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                RasterPos3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos3sv(short*)"/>
        public static unsafe void RasterPos3(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                RasterPos3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4dv(double*)"/>
        public static unsafe void RasterPos4d(ref readonly Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                RasterPos4dv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4fv(float*)"/>
        public static unsafe void RasterPos4f(ref readonly Vector4 v)
        {
            fixed (Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4fv(float*)"/>
        public static unsafe void RasterPos4f(ref readonly System.Numerics.Vector4 v)
        {
            fixed (System.Numerics.Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4fv(float*)"/>
        public static unsafe void RasterPos4f(ReadOnlySpan<System.Numerics.Vector4> v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4fv(float*)"/>
        public static unsafe void RasterPos4f(System.Numerics.Vector4[] v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                RasterPos4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4iv(int*)"/>
        public static unsafe void RasterPos4i(ref readonly Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                RasterPos4iv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4s(short, short, short, short)"/>
        public static unsafe void RasterPos4(short x, short y, short z, short w)
        {
            RasterPos4s(x, y, z, w);
        }
        /// <inheritdoc cref="RasterPos4sv(short*)"/>
        public static unsafe void RasterPos4(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                RasterPos4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4sv(short*)"/>
        public static unsafe void RasterPos4(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                RasterPos4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="RasterPos4sv(short*)"/>
        public static unsafe void RasterPos4(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                RasterPos4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void ReadnPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
        {
            void* data_vptr = (void*)data;
            ReadnPixels(x, y, width, height, format, type, bufSize, data_vptr);
        }
        /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, Span<T1> data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }
        /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, T1[] data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = data)
            {
                ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }
        /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
        public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, ref T1 data)
            where T1 : unmanaged
        {
            fixed (void* data_ptr = &data)
            {
                ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
            }
        }
        /// <inheritdoc cref="ReadPixels(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            ReadPixels(x, y, width, height, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="ReadPixels(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ReadPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, Span<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                ReadPixels(x, y, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="ReadPixels(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ReadPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                ReadPixels(x, y, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="ReadPixels(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void ReadPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, ref T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                ReadPixels(x, y, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="Rectdv(double*, double*)"/>
        public static unsafe void Rectd(ReadOnlySpan<double> v1, ReadOnlySpan<double> v2)
        {
            fixed (double* v2_ptr = v2)
            {
                fixed (double* v1_ptr = v1)
                {
                    Rectdv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectdv(double*, double*)"/>
        public static unsafe void Rectd(double[] v1, double[] v2)
        {
            fixed (double* v2_ptr = v2)
            {
                fixed (double* v1_ptr = v1)
                {
                    Rectdv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectdv(double*, double*)"/>
        public static unsafe void Rectd(ref readonly double v1, ref readonly double v2)
        {
            fixed (double* v1_ptr = &v1)
            fixed (double* v2_ptr = &v2)
            {
                Rectdv(v1_ptr, v2_ptr);
            }
        }
        /// <inheritdoc cref="Rectfv(float*, float*)"/>
        public static unsafe void Rectf(ReadOnlySpan<float> v1, ReadOnlySpan<float> v2)
        {
            fixed (float* v2_ptr = v2)
            {
                fixed (float* v1_ptr = v1)
                {
                    Rectfv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectfv(float*, float*)"/>
        public static unsafe void Rectf(float[] v1, float[] v2)
        {
            fixed (float* v2_ptr = v2)
            {
                fixed (float* v1_ptr = v1)
                {
                    Rectfv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectfv(float*, float*)"/>
        public static unsafe void Rectf(ref readonly float v1, ref readonly float v2)
        {
            fixed (float* v1_ptr = &v1)
            fixed (float* v2_ptr = &v2)
            {
                Rectfv(v1_ptr, v2_ptr);
            }
        }
        /// <inheritdoc cref="Rectiv(int*, int*)"/>
        public static unsafe void Recti(ReadOnlySpan<int> v1, ReadOnlySpan<int> v2)
        {
            fixed (int* v2_ptr = v2)
            {
                fixed (int* v1_ptr = v1)
                {
                    Rectiv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectiv(int*, int*)"/>
        public static unsafe void Recti(int[] v1, int[] v2)
        {
            fixed (int* v2_ptr = v2)
            {
                fixed (int* v1_ptr = v1)
                {
                    Rectiv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectiv(int*, int*)"/>
        public static unsafe void Recti(ref readonly int v1, ref readonly int v2)
        {
            fixed (int* v1_ptr = &v1)
            fixed (int* v2_ptr = &v2)
            {
                Rectiv(v1_ptr, v2_ptr);
            }
        }
        /// <inheritdoc cref="Rectsv(short*, short*)"/>
        public static unsafe void Rect(ReadOnlySpan<short> v1, ReadOnlySpan<short> v2)
        {
            fixed (short* v2_ptr = v2)
            {
                fixed (short* v1_ptr = v1)
                {
                    Rectsv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectsv(short*, short*)"/>
        public static unsafe void Rect(short[] v1, short[] v2)
        {
            fixed (short* v2_ptr = v2)
            {
                fixed (short* v1_ptr = v1)
                {
                    Rectsv(v1_ptr, v2_ptr);
                }
            }
        }
        /// <inheritdoc cref="Rectsv(short*, short*)"/>
        public static unsafe void Rect(ref readonly short v1, ref readonly short v2)
        {
            fixed (short* v1_ptr = &v1)
            fixed (short* v2_ptr = &v2)
            {
                Rectsv(v1_ptr, v2_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, ReadOnlySpan<float> param)
        {
            fixed (float* param_ptr = param)
            {
                SamplerParameterfv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, float[] param)
        {
            fixed (float* param_ptr = param)
            {
                SamplerParameterfv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
        public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, ref readonly float param)
        {
            fixed (float* param_ptr = &param)
            {
                SamplerParameterfv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param)
            {
                SamplerParameterIiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, int[] param)
        {
            fixed (int* param_ptr = param)
            {
                SamplerParameterIiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, ref readonly int param)
        {
            fixed (int* param_ptr = &param)
            {
                SamplerParameterIiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, ReadOnlySpan<uint> param)
        {
            fixed (uint* param_ptr = param)
            {
                SamplerParameterIuiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, uint[] param)
        {
            fixed (uint* param_ptr = param)
            {
                SamplerParameterIuiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
        public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, ref readonly uint param)
        {
            fixed (uint* param_ptr = &param)
            {
                SamplerParameterIuiv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param)
            {
                SamplerParameteriv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, int[] param)
        {
            fixed (int* param_ptr = param)
            {
                SamplerParameteriv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
        public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, ref readonly int param)
        {
            fixed (int* param_ptr = &param)
            {
                SamplerParameteriv(sampler, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
        public static unsafe void ScissorArray(uint first, int count, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v)
            {
                ScissorArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
        public static unsafe void ScissorArray(uint first, int count, int[] v)
        {
            fixed (int* v_ptr = v)
            {
                ScissorArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
        public static unsafe void ScissorArray(uint first, int count, ref readonly int v)
        {
            fixed (int* v_ptr = &v)
            {
                ScissorArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
        public static unsafe void ScissorIndexed(uint index, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v)
            {
                ScissorIndexedv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
        public static unsafe void ScissorIndexed(uint index, int[] v)
        {
            fixed (int* v_ptr = v)
            {
                ScissorIndexedv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
        public static unsafe void ScissorIndexed(uint index, ref readonly int v)
        {
            fixed (int* v_ptr = &v)
            {
                ScissorIndexedv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3b(sbyte, sbyte, sbyte)"/>
        public static unsafe void SecondaryColor3(sbyte red, sbyte green, sbyte blue)
        {
            SecondaryColor3b(red, green, blue);
        }
        /// <inheritdoc cref="SecondaryColor3bv(sbyte*)"/>
        public static unsafe void SecondaryColor3(ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                SecondaryColor3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3bv(sbyte*)"/>
        public static unsafe void SecondaryColor3(sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                SecondaryColor3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3bv(sbyte*)"/>
        public static unsafe void SecondaryColor3(ref readonly sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                SecondaryColor3bv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3dv(double*)"/>
        public static unsafe void SecondaryColor3d(ref readonly Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                SecondaryColor3dv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3fv(float*)"/>
        public static unsafe void SecondaryColor3f(ref readonly Color3<Rgb> v)
        {
            fixed (Color3<Rgb>* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                SecondaryColor3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3iv(int*)"/>
        public static unsafe void SecondaryColor3i(ref readonly Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                SecondaryColor3iv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3s(short, short, short)"/>
        public static unsafe void SecondaryColor3(short red, short green, short blue)
        {
            SecondaryColor3s(red, green, blue);
        }
        /// <inheritdoc cref="SecondaryColor3sv(short*)"/>
        public static unsafe void SecondaryColor3(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                SecondaryColor3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3sv(short*)"/>
        public static unsafe void SecondaryColor3(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                SecondaryColor3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3sv(short*)"/>
        public static unsafe void SecondaryColor3(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                SecondaryColor3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3ub(byte, byte, byte)"/>
        public static unsafe void SecondaryColor3(byte red, byte green, byte blue)
        {
            SecondaryColor3ub(red, green, blue);
        }
        /// <inheritdoc cref="SecondaryColor3ubv(byte*)"/>
        public static unsafe void SecondaryColor3(ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v)
            {
                SecondaryColor3ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3ubv(byte*)"/>
        public static unsafe void SecondaryColor3(byte[] v)
        {
            fixed (byte* v_ptr = v)
            {
                SecondaryColor3ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3ubv(byte*)"/>
        public static unsafe void SecondaryColor3(ref readonly byte v)
        {
            fixed (byte* v_ptr = &v)
            {
                SecondaryColor3ubv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3uiv(uint*)"/>
        public static unsafe void SecondaryColor3ui(ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                SecondaryColor3uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3uiv(uint*)"/>
        public static unsafe void SecondaryColor3ui(uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                SecondaryColor3uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3uiv(uint*)"/>
        public static unsafe void SecondaryColor3ui(ref readonly uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                SecondaryColor3uiv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3us(ushort, ushort, ushort)"/>
        public static unsafe void SecondaryColor3(ushort red, ushort green, ushort blue)
        {
            SecondaryColor3us(red, green, blue);
        }
        /// <inheritdoc cref="SecondaryColor3usv(ushort*)"/>
        public static unsafe void SecondaryColor3(ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v)
            {
                SecondaryColor3usv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3usv(ushort*)"/>
        public static unsafe void SecondaryColor3(ushort[] v)
        {
            fixed (ushort* v_ptr = v)
            {
                SecondaryColor3usv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColor3usv(ushort*)"/>
        public static unsafe void SecondaryColor3(ref readonly ushort v)
        {
            fixed (ushort* v_ptr = &v)
            {
                SecondaryColor3usv(v_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColorP3uiv(ColorPointerType, uint*)"/>
        public static unsafe void SecondaryColorP3ui(ColorPointerType type, ref readonly uint color)
        {
            fixed (uint* color_ptr = &color)
            {
                SecondaryColorP3uiv(type, color_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void SecondaryColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            SecondaryColorPointer(size, type, stride, pointer_vptr);
        }
        /// <inheritdoc cref="SecondaryColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void SecondaryColorPointer<T1>(int size, ColorPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                SecondaryColorPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void SecondaryColorPointer<T1>(int size, ColorPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                SecondaryColorPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="SecondaryColorPointer(int, ColorPointerType, int, void*)"/>
        public static unsafe void SecondaryColorPointer<T1>(int size, ColorPointerType type, int stride, ref readonly T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                SecondaryColorPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="SelectBuffer(int, uint*)"/>
        public static unsafe void SelectBuffer(int size, Span<uint> buffer)
        {
            fixed (uint* buffer_ptr = buffer)
            {
                SelectBuffer(size, buffer_ptr);
            }
        }
        /// <inheritdoc cref="SelectBuffer(int, uint*)"/>
        public static unsafe void SelectBuffer(int size, uint[] buffer)
        {
            fixed (uint* buffer_ptr = buffer)
            {
                SelectBuffer(size, buffer_ptr);
            }
        }
        /// <inheritdoc cref="SelectBuffer(int, uint*)"/>
        public static unsafe void SelectBuffer(int size, ref uint buffer)
        {
            fixed (uint* buffer_ptr = &buffer)
            {
                SelectBuffer(size, buffer_ptr);
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary(int count, ReadOnlySpan<int> shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
        {
            fixed (int* shaders_ptr = shaders)
            {
                void* binary_vptr = (void*)binary;
                ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary(int count, int[] shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
        {
            fixed (int* shaders_ptr = shaders)
            {
                void* binary_vptr = (void*)binary;
                ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary(int count, ref readonly int shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
        {
            fixed (int* shaders_ptr = &shaders)
            {
                void* binary_vptr = (void*)binary;
                ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary<T1>(int count, ReadOnlySpan<int> shaders, ShaderBinaryFormat binaryFormat, ReadOnlySpan<T1> binary, int length)
            where T1 : unmanaged
        {
            fixed (void* binary_ptr = binary)
            {
                fixed (int* shaders_ptr = shaders)
                {
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
                }
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary<T1>(int count, int[] shaders, ShaderBinaryFormat binaryFormat, T1[] binary, int length)
            where T1 : unmanaged
        {
            fixed (void* binary_ptr = binary)
            {
                fixed (int* shaders_ptr = shaders)
                {
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
                }
            }
        }
        /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
        public static unsafe void ShaderBinary<T1>(int count, ref readonly int shaders, ShaderBinaryFormat binaryFormat, ref readonly T1 binary, int length)
            where T1 : unmanaged
        {
            fixed (int* shaders_ptr = &shaders)
            fixed (void* binary_ptr = &binary)
            {
                ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
            }
        }
        /// <inheritdoc cref="ShaderSource(int, int, byte**, int*)"/>
        public static unsafe void ShaderSource(int shader, int count, string[] str, ReadOnlySpan<int> length)
        {
            fixed (int* length_ptr = length)
            {
                byte** str_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(str);
                ShaderSource(shader, count, str_ptr, length_ptr);
                MarshalTk.FreeStringArrayCoTaskMem((IntPtr)str_ptr, str.Length);
            }
        }
        /// <inheritdoc cref="ShaderSource(int, int, byte**, int*)"/>
        public static unsafe void ShaderSource(int shader, int count, string[] str, int[] length)
        {
            fixed (int* length_ptr = length)
            {
                byte** str_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(str);
                ShaderSource(shader, count, str_ptr, length_ptr);
                MarshalTk.FreeStringArrayCoTaskMem((IntPtr)str_ptr, str.Length);
            }
        }
        /// <inheritdoc cref="ShaderSource(int, int, byte**, int*)"/>
        public static unsafe void ShaderSource(int shader, int count, string[] str, ref readonly int length)
        {
            fixed (int* length_ptr = &length)
            {
                byte** str_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(str);
                ShaderSource(shader, count, str_ptr, length_ptr);
                MarshalTk.FreeStringArrayCoTaskMem((IntPtr)str_ptr, str.Length);
            }
        }
        /// <inheritdoc cref="SpecializeShader(int, byte*, uint, uint*, uint*)"/>
        public static unsafe void SpecializeShader(int shader, string pEntryPoint, uint numSpecializationConstants, ReadOnlySpan<uint> pConstantIndex, ReadOnlySpan<uint> pConstantValue)
        {
            fixed (uint* pConstantValue_ptr = pConstantValue)
            {
                fixed (uint* pConstantIndex_ptr = pConstantIndex)
                {
                    byte* pEntryPoint_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(pEntryPoint);
                    SpecializeShader(shader, pEntryPoint_ptr, numSpecializationConstants, pConstantIndex_ptr, pConstantValue_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)pEntryPoint_ptr);
                }
            }
        }
        /// <inheritdoc cref="SpecializeShader(int, byte*, uint, uint*, uint*)"/>
        public static unsafe void SpecializeShader(int shader, string pEntryPoint, uint numSpecializationConstants, uint[] pConstantIndex, uint[] pConstantValue)
        {
            fixed (uint* pConstantValue_ptr = pConstantValue)
            {
                fixed (uint* pConstantIndex_ptr = pConstantIndex)
                {
                    byte* pEntryPoint_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(pEntryPoint);
                    SpecializeShader(shader, pEntryPoint_ptr, numSpecializationConstants, pConstantIndex_ptr, pConstantValue_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)pEntryPoint_ptr);
                }
            }
        }
        /// <inheritdoc cref="SpecializeShader(int, byte*, uint, uint*, uint*)"/>
        public static unsafe void SpecializeShader(int shader, string pEntryPoint, uint numSpecializationConstants, ref readonly uint pConstantIndex, ref readonly uint pConstantValue)
        {
            fixed (uint* pConstantIndex_ptr = &pConstantIndex)
            fixed (uint* pConstantValue_ptr = &pConstantValue)
            {
                byte* pEntryPoint_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(pEntryPoint);
                SpecializeShader(shader, pEntryPoint_ptr, numSpecializationConstants, pConstantIndex_ptr, pConstantValue_ptr);
                Marshal.FreeCoTaskMem((IntPtr)pEntryPoint_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord1dv(double*)"/>
        public static unsafe void TexCoord1d(ref readonly double v)
        {
            fixed (double* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                TexCoord1dv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord1fv(float*)"/>
        public static unsafe void TexCoord1f(ref readonly float v)
        {
            fixed (float* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord1fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord1iv(int*)"/>
        public static unsafe void TexCoord1i(ref readonly int v)
        {
            fixed (int* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                TexCoord1iv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord1s(short)"/>
        public static unsafe void TexCoord1(short s)
        {
            TexCoord1s(s);
        }
        /// <inheritdoc cref="TexCoord1sv(short*)"/>
        public static unsafe void TexCoord1(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                TexCoord1sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2dv(double*)"/>
        public static unsafe void TexCoord2d(ref readonly Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                TexCoord2dv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2fv(float*)"/>
        public static unsafe void TexCoord2f(ref readonly Vector2 v)
        {
            fixed (Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2fv(float*)"/>
        public static unsafe void TexCoord2f(ref readonly System.Numerics.Vector2 v)
        {
            fixed (System.Numerics.Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2fv(float*)"/>
        public static unsafe void TexCoord2f(ReadOnlySpan<System.Numerics.Vector2> v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2fv(float*)"/>
        public static unsafe void TexCoord2f(System.Numerics.Vector2[] v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2iv(int*)"/>
        public static unsafe void TexCoord2i(ref readonly Vector2i v)
        {
            fixed (Vector2i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                TexCoord2iv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2s(short, short)"/>
        public static unsafe void TexCoord2(short s, short t)
        {
            TexCoord2s(s, t);
        }
        /// <inheritdoc cref="TexCoord2sv(short*)"/>
        public static unsafe void TexCoord2(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                TexCoord2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2sv(short*)"/>
        public static unsafe void TexCoord2(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                TexCoord2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord2sv(short*)"/>
        public static unsafe void TexCoord2(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                TexCoord2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3dv(double*)"/>
        public static unsafe void TexCoord3d(ref readonly Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                TexCoord3dv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3fv(float*)"/>
        public static unsafe void TexCoord3f(ref readonly Vector3 v)
        {
            fixed (Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3fv(float*)"/>
        public static unsafe void TexCoord3f(ref readonly System.Numerics.Vector3 v)
        {
            fixed (System.Numerics.Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3fv(float*)"/>
        public static unsafe void TexCoord3f(ReadOnlySpan<System.Numerics.Vector3> v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3fv(float*)"/>
        public static unsafe void TexCoord3f(System.Numerics.Vector3[] v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3iv(int*)"/>
        public static unsafe void TexCoord3i(ref readonly Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                TexCoord3iv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3s(short, short, short)"/>
        public static unsafe void TexCoord3(short s, short t, short r)
        {
            TexCoord3s(s, t, r);
        }
        /// <inheritdoc cref="TexCoord3sv(short*)"/>
        public static unsafe void TexCoord3(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                TexCoord3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3sv(short*)"/>
        public static unsafe void TexCoord3(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                TexCoord3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord3sv(short*)"/>
        public static unsafe void TexCoord3(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                TexCoord3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4dv(double*)"/>
        public static unsafe void TexCoord4d(ref readonly Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                TexCoord4dv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4fv(float*)"/>
        public static unsafe void TexCoord4f(ref readonly Vector4 v)
        {
            fixed (Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4fv(float*)"/>
        public static unsafe void TexCoord4f(ref readonly System.Numerics.Vector4 v)
        {
            fixed (System.Numerics.Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4fv(float*)"/>
        public static unsafe void TexCoord4f(ReadOnlySpan<System.Numerics.Vector4> v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4fv(float*)"/>
        public static unsafe void TexCoord4f(System.Numerics.Vector4[] v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                TexCoord4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4iv(int*)"/>
        public static unsafe void TexCoord4i(ref readonly Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                TexCoord4iv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4s(short, short, short, short)"/>
        public static unsafe void TexCoord4(short s, short t, short r, short q)
        {
            TexCoord4s(s, t, r, q);
        }
        /// <inheritdoc cref="TexCoord4sv(short*)"/>
        public static unsafe void TexCoord4(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                TexCoord4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4sv(short*)"/>
        public static unsafe void TexCoord4(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                TexCoord4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoord4sv(short*)"/>
        public static unsafe void TexCoord4(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                TexCoord4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP1uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP1ui(TexCoordPointerType type, ref readonly uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                TexCoordP1uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP2uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP2ui(TexCoordPointerType type, ref readonly uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                TexCoordP2uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP3uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP3ui(TexCoordPointerType type, ref readonly uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                TexCoordP3uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordP4uiv(TexCoordPointerType, uint*)"/>
        public static unsafe void TexCoordP4ui(TexCoordPointerType type, ref readonly uint coords)
        {
            fixed (uint* coords_ptr = &coords)
            {
                TexCoordP4uiv(type, coords_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordPointer(int, TexCoordPointerType, int, void*)"/>
        public static unsafe void TexCoordPointer(int size, TexCoordPointerType type, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            TexCoordPointer(size, type, stride, pointer_vptr);
        }
        /// <inheritdoc cref="TexCoordPointer(int, TexCoordPointerType, int, void*)"/>
        public static unsafe void TexCoordPointer<T1>(int size, TexCoordPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                TexCoordPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordPointer(int, TexCoordPointerType, int, void*)"/>
        public static unsafe void TexCoordPointer<T1>(int size, TexCoordPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                TexCoordPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="TexCoordPointer(int, TexCoordPointerType, int, void*)"/>
        public static unsafe void TexCoordPointer<T1>(int size, TexCoordPointerType type, int stride, ref readonly T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                TexCoordPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="TexEnvfv(TextureEnvTarget, TextureEnvParameter, float*)"/>
        public static unsafe void TexEnvf(TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                TexEnvfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexEnvfv(TextureEnvTarget, TextureEnvParameter, float*)"/>
        public static unsafe void TexEnvf(TextureEnvTarget target, TextureEnvParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                TexEnvfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexEnvfv(TextureEnvTarget, TextureEnvParameter, float*)"/>
        public static unsafe void TexEnvf(TextureEnvTarget target, TextureEnvParameter pname, ref readonly float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                TexEnvfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexEnviv(TextureEnvTarget, TextureEnvParameter, int*)"/>
        public static unsafe void TexEnvi(TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexEnviv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexEnviv(TextureEnvTarget, TextureEnvParameter, int*)"/>
        public static unsafe void TexEnvi(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexEnviv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexEnviv(TextureEnvTarget, TextureEnvParameter, int*)"/>
        public static unsafe void TexEnvi(TextureEnvTarget target, TextureEnvParameter pname, ref readonly int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                TexEnviv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGendv(TextureCoordName, TextureGenParameter, double*)"/>
        public static unsafe void TexGend(TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<double> parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                TexGendv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGendv(TextureCoordName, TextureGenParameter, double*)"/>
        public static unsafe void TexGend(TextureCoordName coord, TextureGenParameter pname, double[] parameters)
        {
            fixed (double* parameters_ptr = parameters)
            {
                TexGendv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGendv(TextureCoordName, TextureGenParameter, double*)"/>
        public static unsafe void TexGend(TextureCoordName coord, TextureGenParameter pname, ref readonly double parameters)
        {
            fixed (double* parameters_ptr = &parameters)
            {
                TexGendv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGenfv(TextureCoordName, TextureGenParameter, float*)"/>
        public static unsafe void TexGenf(TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                TexGenfv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGenfv(TextureCoordName, TextureGenParameter, float*)"/>
        public static unsafe void TexGenf(TextureCoordName coord, TextureGenParameter pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                TexGenfv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGenfv(TextureCoordName, TextureGenParameter, float*)"/>
        public static unsafe void TexGenf(TextureCoordName coord, TextureGenParameter pname, ref readonly float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                TexGenfv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGeniv(TextureCoordName, TextureGenParameter, int*)"/>
        public static unsafe void TexGeni(TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexGeniv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGeniv(TextureCoordName, TextureGenParameter, int*)"/>
        public static unsafe void TexGeni(TextureCoordName coord, TextureGenParameter pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexGeniv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexGeniv(TextureCoordName, TextureGenParameter, int*)"/>
        public static unsafe void TexGeni(TextureCoordName coord, TextureGenParameter pname, ref readonly int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                TexGeniv(coord, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexImage1D(TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage1D(TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexImage1D(target, level, internalformat, width, border, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexImage1D(TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage1D(target, level, internalformat, width, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage1D(TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage1D(target, level, internalformat, width, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage1D(TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage1D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, ref readonly T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexImage1D(target, level, internalformat, width, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage2D(TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexImage2D(TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage2D(TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage2D(TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage2D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, ref readonly T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexImage2D(target, level, internalformat, width, height, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexImage3D(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexImage3D<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ref readonly T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterfv(TextureTarget, TextureParameterName, float*)"/>
        public static unsafe void TexParameterf(TextureTarget target, TextureParameterName pname, ReadOnlySpan<float> parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                TexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterfv(TextureTarget, TextureParameterName, float*)"/>
        public static unsafe void TexParameterf(TextureTarget target, TextureParameterName pname, float[] parameters)
        {
            fixed (float* parameters_ptr = parameters)
            {
                TexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterfv(TextureTarget, TextureParameterName, float*)"/>
        public static unsafe void TexParameterf(TextureTarget target, TextureParameterName pname, ref readonly float parameters)
        {
            fixed (float* parameters_ptr = &parameters)
            {
                TexParameterfv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIiv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameterIi(TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIiv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameterIi(TextureTarget target, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIiv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameterIi(TextureTarget target, TextureParameterName pname, ref readonly int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                TexParameterIiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIuiv(TextureTarget, TextureParameterName, uint*)"/>
        public static unsafe void TexParameterIui(TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                TexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIuiv(TextureTarget, TextureParameterName, uint*)"/>
        public static unsafe void TexParameterIui(TextureTarget target, TextureParameterName pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                TexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameterIuiv(TextureTarget, TextureParameterName, uint*)"/>
        public static unsafe void TexParameterIui(TextureTarget target, TextureParameterName pname, ref readonly uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                TexParameterIuiv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameteriv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameteri(TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameteriv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameteri(TextureTarget target, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexParameteriv(TextureTarget, TextureParameterName, int*)"/>
        public static unsafe void TexParameteri(TextureTarget target, TextureParameterName pname, ref readonly int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                TexParameteriv(target, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexSubImage1D(target, level, xoffset, width, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage1D(target, level, xoffset, width, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage1D(target, level, xoffset, width, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage1D(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage1D<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ref readonly T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexSubImage1D(target, level, xoffset, width, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage2D(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage2D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ref readonly T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TexSubImage3D(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TexSubImage3D<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ref readonly T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
        public static unsafe void TextureParameterf(int texture, TextureParameterName pname, ReadOnlySpan<float> param)
        {
            fixed (float* param_ptr = param)
            {
                TextureParameterfv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
        public static unsafe void TextureParameterf(int texture, TextureParameterName pname, float[] param)
        {
            fixed (float* param_ptr = param)
            {
                TextureParameterfv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
        public static unsafe void TextureParameterf(int texture, TextureParameterName pname, ref readonly float param)
        {
            fixed (float* param_ptr = &param)
            {
                TextureParameterfv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, ReadOnlySpan<int> parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TextureParameterIiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, int[] parameters)
        {
            fixed (int* parameters_ptr = parameters)
            {
                TextureParameterIiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, ref readonly int parameters)
        {
            fixed (int* parameters_ptr = &parameters)
            {
                TextureParameterIiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
        public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, ReadOnlySpan<uint> parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                TextureParameterIuiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
        public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, uint[] parameters)
        {
            fixed (uint* parameters_ptr = parameters)
            {
                TextureParameterIuiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
        public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, ref readonly uint parameters)
        {
            fixed (uint* parameters_ptr = &parameters)
            {
                TextureParameterIuiv(texture, pname, parameters_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameteri(int texture, TextureParameterName pname, ReadOnlySpan<int> param)
        {
            fixed (int* param_ptr = param)
            {
                TextureParameteriv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameteri(int texture, TextureParameterName pname, int[] param)
        {
            fixed (int* param_ptr = param)
            {
                TextureParameteriv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
        public static unsafe void TextureParameteri(int texture, TextureParameterName pname, ref readonly int param)
        {
            fixed (int* param_ptr = &param)
            {
                TextureParameteriv(texture, pname, param_ptr);
            }
        }
        /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage1D(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage1D<T1>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage1D<T1>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage1D<T1>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, ref readonly T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ref readonly T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            void* pixels_vptr = (void*)pixels;
            TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
        }
        /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = pixels)
            {
                TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
        public static unsafe void TextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ref readonly T1 pixels)
            where T1 : unmanaged
        {
            fixed (void* pixels_ptr = &pixels)
            {
                TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
            }
        }
        /// <inheritdoc cref="TransformFeedbackVaryings(int, int, byte**, TransformFeedbackBufferMode)"/>
        public static unsafe void TransformFeedbackVaryings(int program, int count, string[] varyings, TransformFeedbackBufferMode bufferMode)
        {
            byte** varyings_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(varyings);
            TransformFeedbackVaryings(program, count, varyings_ptr, bufferMode);
            MarshalTk.FreeStringArrayCoTaskMem((IntPtr)varyings_ptr, varyings.Length);
        }
        /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
        public static unsafe void Uniform1d(int location, int count, ref readonly double value)
        {
            fixed (double* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform1dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
        public static unsafe void Uniform1d(int location, int count, ReadOnlySpan<double> value)
        {
            fixed (double* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform1dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
        public static unsafe void Uniform1d(int location, int count, double[] value)
        {
            fixed (double* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform1dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1fv(int, int, float*)"/>
        public static unsafe void Uniform1f(int location, int count, ref readonly float value)
        {
            fixed (float* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform1fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1fv(int, int, float*)"/>
        public static unsafe void Uniform1f(int location, int count, ReadOnlySpan<float> value)
        {
            fixed (float* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform1fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1fv(int, int, float*)"/>
        public static unsafe void Uniform1f(int location, int count, float[] value)
        {
            fixed (float* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform1fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1iv(int, int, int*)"/>
        public static unsafe void Uniform1i(int location, int count, ref readonly int value)
        {
            fixed (int* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform1iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1iv(int, int, int*)"/>
        public static unsafe void Uniform1i(int location, int count, ReadOnlySpan<int> value)
        {
            fixed (int* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform1iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1iv(int, int, int*)"/>
        public static unsafe void Uniform1i(int location, int count, int[] value)
        {
            fixed (int* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform1iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1uiv(int, int, uint*)"/>
        public static unsafe void Uniform1ui(int location, int count, ref readonly uint value)
        {
            fixed (uint* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform1uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1uiv(int, int, uint*)"/>
        public static unsafe void Uniform1ui(int location, int count, ReadOnlySpan<uint> value)
        {
            fixed (uint* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform1uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform1uiv(int, int, uint*)"/>
        public static unsafe void Uniform1ui(int location, int count, uint[] value)
        {
            fixed (uint* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform1uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
        public static unsafe void Uniform2d(int location, int count, ref readonly Vector2d value)
        {
            fixed (Vector2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform2dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
        public static unsafe void Uniform2d(int location, int count, ReadOnlySpan<Vector2d> value)
        {
            fixed (Vector2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform2dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
        public static unsafe void Uniform2d(int location, int count, Vector2d[] value)
        {
            fixed (Vector2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform2dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, ref readonly Vector2 value)
        {
            fixed (Vector2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, ReadOnlySpan<Vector2> value)
        {
            fixed (Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, Vector2[] value)
        {
            fixed (Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, ref readonly System.Numerics.Vector2 value)
        {
            fixed (System.Numerics.Vector2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
        {
            fixed (System.Numerics.Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2fv(int, int, float*)"/>
        public static unsafe void Uniform2f(int location, int count, System.Numerics.Vector2[] value)
        {
            fixed (System.Numerics.Vector2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform2fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2iv(int, int, int*)"/>
        public static unsafe void Uniform2i(int location, int count, ref readonly Vector2i value)
        {
            fixed (Vector2i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform2iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2iv(int, int, int*)"/>
        public static unsafe void Uniform2i(int location, int count, ReadOnlySpan<Vector2i> value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform2iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2iv(int, int, int*)"/>
        public static unsafe void Uniform2i(int location, int count, Vector2i[] value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform2iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2uiv(int, int, uint*)"/>
        public static unsafe void Uniform2ui(int location, int count, ref readonly Vector2i value)
        {
            fixed (Vector2i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform2uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2uiv(int, int, uint*)"/>
        public static unsafe void Uniform2ui(int location, int count, ReadOnlySpan<Vector2i> value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform2uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform2uiv(int, int, uint*)"/>
        public static unsafe void Uniform2ui(int location, int count, Vector2i[] value)
        {
            fixed (Vector2i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform2uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
        public static unsafe void Uniform3d(int location, int count, ref readonly Vector3d value)
        {
            fixed (Vector3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform3dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
        public static unsafe void Uniform3d(int location, int count, ReadOnlySpan<Vector3d> value)
        {
            fixed (Vector3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform3dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
        public static unsafe void Uniform3d(int location, int count, Vector3d[] value)
        {
            fixed (Vector3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform3dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, ref readonly Vector3 value)
        {
            fixed (Vector3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, ReadOnlySpan<Vector3> value)
        {
            fixed (Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, Vector3[] value)
        {
            fixed (Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, ref readonly System.Numerics.Vector3 value)
        {
            fixed (System.Numerics.Vector3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
        {
            fixed (System.Numerics.Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3fv(int, int, float*)"/>
        public static unsafe void Uniform3f(int location, int count, System.Numerics.Vector3[] value)
        {
            fixed (System.Numerics.Vector3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform3fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3iv(int, int, int*)"/>
        public static unsafe void Uniform3i(int location, int count, ref readonly Vector3i value)
        {
            fixed (Vector3i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform3iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3iv(int, int, int*)"/>
        public static unsafe void Uniform3i(int location, int count, ReadOnlySpan<Vector3i> value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform3iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3iv(int, int, int*)"/>
        public static unsafe void Uniform3i(int location, int count, Vector3i[] value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform3iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3uiv(int, int, uint*)"/>
        public static unsafe void Uniform3ui(int location, int count, ref readonly Vector3i value)
        {
            fixed (Vector3i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform3uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3uiv(int, int, uint*)"/>
        public static unsafe void Uniform3ui(int location, int count, ReadOnlySpan<Vector3i> value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform3uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform3uiv(int, int, uint*)"/>
        public static unsafe void Uniform3ui(int location, int count, Vector3i[] value)
        {
            fixed (Vector3i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform3uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
        public static unsafe void Uniform4d(int location, int count, ref readonly Vector4d value)
        {
            fixed (Vector4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform4dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
        public static unsafe void Uniform4d(int location, int count, ReadOnlySpan<Vector4d> value)
        {
            fixed (Vector4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform4dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
        public static unsafe void Uniform4d(int location, int count, Vector4d[] value)
        {
            fixed (Vector4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                Uniform4dv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, ref readonly Vector4 value)
        {
            fixed (Vector4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, ReadOnlySpan<Vector4> value)
        {
            fixed (Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, Vector4[] value)
        {
            fixed (Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, ref readonly System.Numerics.Vector4 value)
        {
            fixed (System.Numerics.Vector4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
        {
            fixed (System.Numerics.Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4fv(int, int, float*)"/>
        public static unsafe void Uniform4f(int location, int count, System.Numerics.Vector4[] value)
        {
            fixed (System.Numerics.Vector4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                Uniform4fv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4iv(int, int, int*)"/>
        public static unsafe void Uniform4i(int location, int count, ref readonly Vector4i value)
        {
            fixed (Vector4i* tmp_value = &value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform4iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4iv(int, int, int*)"/>
        public static unsafe void Uniform4i(int location, int count, ReadOnlySpan<Vector4i> value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform4iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4iv(int, int, int*)"/>
        public static unsafe void Uniform4i(int location, int count, Vector4i[] value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                int* value_ptr = (int*)tmp_value;
                Uniform4iv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4uiv(int, int, uint*)"/>
        public static unsafe void Uniform4ui(int location, int count, ref readonly Vector4i value)
        {
            fixed (Vector4i* tmp_value = &value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform4uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4uiv(int, int, uint*)"/>
        public static unsafe void Uniform4ui(int location, int count, ReadOnlySpan<Vector4i> value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform4uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="Uniform4uiv(int, int, uint*)"/>
        public static unsafe void Uniform4ui(int location, int count, Vector4i[] value)
        {
            fixed (Vector4i* tmp_value = value)
            {
                uint* value_ptr = (uint*)tmp_value;
                Uniform4uiv(location, count, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2d(int location, int count, bool transpose, ref readonly Matrix2d value)
        {
            fixed (Matrix2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2d(int location, int count, bool transpose, ReadOnlySpan<Matrix2d> value)
        {
            fixed (Matrix2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2d(int location, int count, bool transpose, Matrix2d[] value)
        {
            fixed (Matrix2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2f(int location, int count, bool transpose, ref readonly Matrix2 value)
        {
            fixed (Matrix2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2f(int location, int count, bool transpose, ReadOnlySpan<Matrix2> value)
        {
            fixed (Matrix2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2f(int location, int count, bool transpose, Matrix2[] value)
        {
            fixed (Matrix2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, ref readonly Matrix2x3d value)
        {
            fixed (Matrix2x3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, ReadOnlySpan<Matrix2x3d> value)
        {
            fixed (Matrix2x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, Matrix2x3d[] value)
        {
            fixed (Matrix2x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x3f(int location, int count, bool transpose, ref readonly Matrix2x3 value)
        {
            fixed (Matrix2x3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x3f(int location, int count, bool transpose, ReadOnlySpan<Matrix2x3> value)
        {
            fixed (Matrix2x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x3f(int location, int count, bool transpose, Matrix2x3[] value)
        {
            fixed (Matrix2x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, ref readonly Matrix2x4d value)
        {
            fixed (Matrix2x4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, ReadOnlySpan<Matrix2x4d> value)
        {
            fixed (Matrix2x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, Matrix2x4d[] value)
        {
            fixed (Matrix2x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix2x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x4f(int location, int count, bool transpose, ref readonly Matrix2x4 value)
        {
            fixed (Matrix2x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x4f(int location, int count, bool transpose, ReadOnlySpan<Matrix2x4> value)
        {
            fixed (Matrix2x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix2x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix2x4f(int location, int count, bool transpose, Matrix2x4[] value)
        {
            fixed (Matrix2x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix2x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3d(int location, int count, bool transpose, ref readonly Matrix3d value)
        {
            fixed (Matrix3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3d(int location, int count, bool transpose, ReadOnlySpan<Matrix3d> value)
        {
            fixed (Matrix3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3d(int location, int count, bool transpose, Matrix3d[] value)
        {
            fixed (Matrix3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3f(int location, int count, bool transpose, ref readonly Matrix3 value)
        {
            fixed (Matrix3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3f(int location, int count, bool transpose, ReadOnlySpan<Matrix3> value)
        {
            fixed (Matrix3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3f(int location, int count, bool transpose, Matrix3[] value)
        {
            fixed (Matrix3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, ref readonly Matrix3x2d value)
        {
            fixed (Matrix3x2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, ReadOnlySpan<Matrix3x2d> value)
        {
            fixed (Matrix3x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, Matrix3x2d[] value)
        {
            fixed (Matrix3x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, ref readonly Matrix3x2 value)
        {
            fixed (Matrix3x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, ReadOnlySpan<Matrix3x2> value)
        {
            fixed (Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, Matrix3x2[] value)
        {
            fixed (Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, ref readonly System.Numerics.Matrix3x2 value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix3x2> value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x2f(int location, int count, bool transpose, System.Numerics.Matrix3x2[] value)
        {
            fixed (System.Numerics.Matrix3x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, ref readonly Matrix3x4d value)
        {
            fixed (Matrix3x4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, ReadOnlySpan<Matrix3x4d> value)
        {
            fixed (Matrix3x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, Matrix3x4d[] value)
        {
            fixed (Matrix3x4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix3x4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x4f(int location, int count, bool transpose, ref readonly Matrix3x4 value)
        {
            fixed (Matrix3x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x4f(int location, int count, bool transpose, ReadOnlySpan<Matrix3x4> value)
        {
            fixed (Matrix3x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix3x4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix3x4f(int location, int count, bool transpose, Matrix3x4[] value)
        {
            fixed (Matrix3x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix3x4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4d(int location, int count, bool transpose, ref readonly Matrix4d value)
        {
            fixed (Matrix4d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4d(int location, int count, bool transpose, ReadOnlySpan<Matrix4d> value)
        {
            fixed (Matrix4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4d(int location, int count, bool transpose, Matrix4d[] value)
        {
            fixed (Matrix4d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, ref readonly Matrix4 value)
        {
            fixed (Matrix4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, ReadOnlySpan<Matrix4> value)
        {
            fixed (Matrix4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, Matrix4[] value)
        {
            fixed (Matrix4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, ref readonly System.Numerics.Matrix4x4 value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix4x4> value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4f(int location, int count, bool transpose, System.Numerics.Matrix4x4[] value)
        {
            fixed (System.Numerics.Matrix4x4* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, ref readonly Matrix4x2d value)
        {
            fixed (Matrix4x2d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, ReadOnlySpan<Matrix4x2d> value)
        {
            fixed (Matrix4x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, Matrix4x2d[] value)
        {
            fixed (Matrix4x2d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x2dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x2f(int location, int count, bool transpose, ref readonly Matrix4x2 value)
        {
            fixed (Matrix4x2* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x2f(int location, int count, bool transpose, ReadOnlySpan<Matrix4x2> value)
        {
            fixed (Matrix4x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x2fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x2f(int location, int count, bool transpose, Matrix4x2[] value)
        {
            fixed (Matrix4x2* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x2fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, ref readonly Matrix4x3d value)
        {
            fixed (Matrix4x3d* tmp_value = &value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, ReadOnlySpan<Matrix4x3d> value)
        {
            fixed (Matrix4x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
        public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, Matrix4x3d[] value)
        {
            fixed (Matrix4x3d* tmp_value = value)
            {
                double* value_ptr = (double*)tmp_value;
                UniformMatrix4x3dv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x3f(int location, int count, bool transpose, ref readonly Matrix4x3 value)
        {
            fixed (Matrix4x3* tmp_value = &value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x3f(int location, int count, bool transpose, ReadOnlySpan<Matrix4x3> value)
        {
            fixed (Matrix4x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformMatrix4x3fv(int, int, bool, float*)"/>
        public static unsafe void UniformMatrix4x3f(int location, int count, bool transpose, Matrix4x3[] value)
        {
            fixed (Matrix4x3* tmp_value = value)
            {
                float* value_ptr = (float*)tmp_value;
                UniformMatrix4x3fv(location, count, transpose, value_ptr);
            }
        }
        /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
        public static unsafe void UniformSubroutinesui(ShaderType shadertype, int count, ReadOnlySpan<uint> indices)
        {
            fixed (uint* indices_ptr = indices)
            {
                UniformSubroutinesuiv(shadertype, count, indices_ptr);
            }
        }
        /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
        public static unsafe void UniformSubroutinesui(ShaderType shadertype, int count, uint[] indices)
        {
            fixed (uint* indices_ptr = indices)
            {
                UniformSubroutinesuiv(shadertype, count, indices_ptr);
            }
        }
        /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
        public static unsafe void UniformSubroutinesui(ShaderType shadertype, int count, ref readonly uint indices)
        {
            fixed (uint* indices_ptr = &indices)
            {
                UniformSubroutinesuiv(shadertype, count, indices_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2dv(double*)"/>
        public static unsafe void Vertex2d(ref readonly Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                Vertex2dv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2fv(float*)"/>
        public static unsafe void Vertex2f(ref readonly Vector2 v)
        {
            fixed (Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2fv(float*)"/>
        public static unsafe void Vertex2f(ref readonly System.Numerics.Vector2 v)
        {
            fixed (System.Numerics.Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2fv(float*)"/>
        public static unsafe void Vertex2f(ReadOnlySpan<System.Numerics.Vector2> v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2fv(float*)"/>
        public static unsafe void Vertex2f(System.Numerics.Vector2[] v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2iv(int*)"/>
        public static unsafe void Vertex2i(ref readonly Vector2i v)
        {
            fixed (Vector2i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                Vertex2iv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2s(short, short)"/>
        public static unsafe void Vertex2(short x, short y)
        {
            Vertex2s(x, y);
        }
        /// <inheritdoc cref="Vertex2sv(short*)"/>
        public static unsafe void Vertex2(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                Vertex2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2sv(short*)"/>
        public static unsafe void Vertex2(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                Vertex2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex2sv(short*)"/>
        public static unsafe void Vertex2(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                Vertex2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3dv(double*)"/>
        public static unsafe void Vertex3d(ref readonly Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                Vertex3dv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3fv(float*)"/>
        public static unsafe void Vertex3f(ref readonly Vector3 v)
        {
            fixed (Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3fv(float*)"/>
        public static unsafe void Vertex3f(ref readonly System.Numerics.Vector3 v)
        {
            fixed (System.Numerics.Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3fv(float*)"/>
        public static unsafe void Vertex3f(ReadOnlySpan<System.Numerics.Vector3> v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3fv(float*)"/>
        public static unsafe void Vertex3f(System.Numerics.Vector3[] v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3iv(int*)"/>
        public static unsafe void Vertex3i(ref readonly Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                Vertex3iv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3s(short, short, short)"/>
        public static unsafe void Vertex3(short x, short y, short z)
        {
            Vertex3s(x, y, z);
        }
        /// <inheritdoc cref="Vertex3sv(short*)"/>
        public static unsafe void Vertex3(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                Vertex3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3sv(short*)"/>
        public static unsafe void Vertex3(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                Vertex3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex3sv(short*)"/>
        public static unsafe void Vertex3(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                Vertex3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4dv(double*)"/>
        public static unsafe void Vertex4d(ref readonly Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                Vertex4dv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4fv(float*)"/>
        public static unsafe void Vertex4f(ref readonly Vector4 v)
        {
            fixed (Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4fv(float*)"/>
        public static unsafe void Vertex4f(ref readonly System.Numerics.Vector4 v)
        {
            fixed (System.Numerics.Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4fv(float*)"/>
        public static unsafe void Vertex4f(ReadOnlySpan<System.Numerics.Vector4> v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4fv(float*)"/>
        public static unsafe void Vertex4f(System.Numerics.Vector4[] v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                Vertex4fv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4iv(int*)"/>
        public static unsafe void Vertex4i(ref readonly Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                Vertex4iv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4s(short, short, short, short)"/>
        public static unsafe void Vertex4(short x, short y, short z, short w)
        {
            Vertex4s(x, y, z, w);
        }
        /// <inheritdoc cref="Vertex4sv(short*)"/>
        public static unsafe void Vertex4(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                Vertex4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4sv(short*)"/>
        public static unsafe void Vertex4(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                Vertex4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="Vertex4sv(short*)"/>
        public static unsafe void Vertex4(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                Vertex4sv(v_ptr);
            }
        }
        /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<int> strides)
        {
            fixed (int* strides_ptr = strides)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (int* buffers_ptr = buffers)
                    {
                        VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, int[] buffers, IntPtr[] offsets, int[] strides)
        {
            fixed (int* strides_ptr = strides)
            {
                fixed (IntPtr* offsets_ptr = offsets)
                {
                    fixed (int* buffers_ptr = buffers)
                    {
                        VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
                    }
                }
            }
        }
        /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
        public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, ref readonly int buffers, ref readonly IntPtr offsets, ref readonly int strides)
        {
            fixed (int* buffers_ptr = &buffers)
            fixed (IntPtr* offsets_ptr = &offsets)
            fixed (int* strides_ptr = &strides)
            {
                VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib1dv(uint, double*)"/>
        public static unsafe void VertexAttrib1d(uint index, ref readonly double v)
        {
            fixed (double* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttrib1dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib1fv(uint, float*)"/>
        public static unsafe void VertexAttrib1f(uint index, ref readonly float v)
        {
            fixed (float* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib1fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib1s(uint, short)"/>
        public static unsafe void VertexAttrib1(uint index, short x)
        {
            VertexAttrib1s(index, x);
        }
        /// <inheritdoc cref="VertexAttrib1sv(uint, short*)"/>
        public static unsafe void VertexAttrib1(uint index, ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttrib1sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2dv(uint, double*)"/>
        public static unsafe void VertexAttrib2d(uint index, ref readonly Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttrib2dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
        public static unsafe void VertexAttrib2f(uint index, ref readonly Vector2 v)
        {
            fixed (Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib2fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
        public static unsafe void VertexAttrib2f(uint index, ref readonly System.Numerics.Vector2 v)
        {
            fixed (System.Numerics.Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib2fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
        public static unsafe void VertexAttrib2f(uint index, ReadOnlySpan<System.Numerics.Vector2> v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib2fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2fv(uint, float*)"/>
        public static unsafe void VertexAttrib2f(uint index, System.Numerics.Vector2[] v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib2fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2s(uint, short, short)"/>
        public static unsafe void VertexAttrib2(uint index, short x, short y)
        {
            VertexAttrib2s(index, x, y);
        }
        /// <inheritdoc cref="VertexAttrib2sv(uint, short*)"/>
        public static unsafe void VertexAttrib2(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib2sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2sv(uint, short*)"/>
        public static unsafe void VertexAttrib2(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib2sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib2sv(uint, short*)"/>
        public static unsafe void VertexAttrib2(uint index, ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttrib2sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3dv(uint, double*)"/>
        public static unsafe void VertexAttrib3d(uint index, ref readonly Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttrib3dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
        public static unsafe void VertexAttrib3f(uint index, ref readonly Vector3 v)
        {
            fixed (Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib3fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
        public static unsafe void VertexAttrib3f(uint index, ref readonly System.Numerics.Vector3 v)
        {
            fixed (System.Numerics.Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib3fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
        public static unsafe void VertexAttrib3f(uint index, ReadOnlySpan<System.Numerics.Vector3> v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib3fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3fv(uint, float*)"/>
        public static unsafe void VertexAttrib3f(uint index, System.Numerics.Vector3[] v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib3fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3s(uint, short, short, short)"/>
        public static unsafe void VertexAttrib3(uint index, short x, short y, short z)
        {
            VertexAttrib3s(index, x, y, z);
        }
        /// <inheritdoc cref="VertexAttrib3sv(uint, short*)"/>
        public static unsafe void VertexAttrib3(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib3sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3sv(uint, short*)"/>
        public static unsafe void VertexAttrib3(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib3sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib3sv(uint, short*)"/>
        public static unsafe void VertexAttrib3(uint index, ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttrib3sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4(uint index, ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttrib4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4(uint index, sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttrib4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4(uint index, ref readonly sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                VertexAttrib4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4dv(uint, double*)"/>
        public static unsafe void VertexAttrib4d(uint index, ref readonly Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttrib4dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
        public static unsafe void VertexAttrib4f(uint index, ref readonly Vector4 v)
        {
            fixed (Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib4fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
        public static unsafe void VertexAttrib4f(uint index, ref readonly System.Numerics.Vector4 v)
        {
            fixed (System.Numerics.Vector4* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib4fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
        public static unsafe void VertexAttrib4f(uint index, ReadOnlySpan<System.Numerics.Vector4> v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib4fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4fv(uint, float*)"/>
        public static unsafe void VertexAttrib4f(uint index, System.Numerics.Vector4[] v)
        {
            fixed (System.Numerics.Vector4* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                VertexAttrib4fv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4iv(uint, int*)"/>
        public static unsafe void VertexAttrib4i(uint index, ref readonly Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                VertexAttrib4iv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nbv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4N(uint index, ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttrib4Nbv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nbv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4N(uint index, sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttrib4Nbv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nbv(uint, sbyte*)"/>
        public static unsafe void VertexAttrib4N(uint index, ref readonly sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                VertexAttrib4Nbv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Niv(uint, int*)"/>
        public static unsafe void VertexAttrib4Ni(uint index, ReadOnlySpan<int> v)
        {
            fixed (int* v_ptr = v)
            {
                VertexAttrib4Niv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Niv(uint, int*)"/>
        public static unsafe void VertexAttrib4Ni(uint index, int[] v)
        {
            fixed (int* v_ptr = v)
            {
                VertexAttrib4Niv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Niv(uint, int*)"/>
        public static unsafe void VertexAttrib4Ni(uint index, ref readonly int v)
        {
            fixed (int* v_ptr = &v)
            {
                VertexAttrib4Niv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nsv(uint, short*)"/>
        public static unsafe void VertexAttrib4N(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib4Nsv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nsv(uint, short*)"/>
        public static unsafe void VertexAttrib4N(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib4Nsv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nsv(uint, short*)"/>
        public static unsafe void VertexAttrib4N(uint index, ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttrib4Nsv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nub(uint, byte, byte, byte, byte)"/>
        public static unsafe void VertexAttrib4N(uint index, byte x, byte y, byte z, byte w)
        {
            VertexAttrib4Nub(index, x, y, z, w);
        }
        /// <inheritdoc cref="VertexAttrib4Nubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4N(uint index, ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttrib4Nubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4N(uint index, byte[] v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttrib4Nubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4N(uint index, ref readonly byte v)
        {
            fixed (byte* v_ptr = &v)
            {
                VertexAttrib4Nubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nuiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4Nui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttrib4Nuiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nuiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4Nui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttrib4Nuiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nuiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4Nui(uint index, ref readonly uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttrib4Nuiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nusv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4N(uint index, ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttrib4Nusv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nusv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4N(uint index, ushort[] v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttrib4Nusv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4Nusv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4N(uint index, ref readonly ushort v)
        {
            fixed (ushort* v_ptr = &v)
            {
                VertexAttrib4Nusv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4s(uint, short, short, short, short)"/>
        public static unsafe void VertexAttrib4(uint index, short x, short y, short z, short w)
        {
            VertexAttrib4s(index, x, y, z, w);
        }
        /// <inheritdoc cref="VertexAttrib4sv(uint, short*)"/>
        public static unsafe void VertexAttrib4(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4sv(uint, short*)"/>
        public static unsafe void VertexAttrib4(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttrib4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4sv(uint, short*)"/>
        public static unsafe void VertexAttrib4(uint index, ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttrib4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4ubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4(uint index, ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttrib4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4ubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4(uint index, byte[] v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttrib4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4ubv(uint, byte*)"/>
        public static unsafe void VertexAttrib4(uint index, ref readonly byte v)
        {
            fixed (byte* v_ptr = &v)
            {
                VertexAttrib4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4uiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4ui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttrib4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4uiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4ui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttrib4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4uiv(uint, uint*)"/>
        public static unsafe void VertexAttrib4ui(uint index, ref readonly uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttrib4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4usv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4(uint index, ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttrib4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4usv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4(uint index, ushort[] v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttrib4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttrib4usv(uint, ushort*)"/>
        public static unsafe void VertexAttrib4(uint index, ref readonly ushort v)
        {
            fixed (ushort* v_ptr = &v)
            {
                VertexAttrib4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI1iv(uint, int*)"/>
        public static unsafe void VertexAttribI1i(uint index, ref readonly int v)
        {
            fixed (int* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                VertexAttribI1iv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI1uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI1ui(uint index, ref readonly uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttribI1uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI2iv(uint, int*)"/>
        public static unsafe void VertexAttribI2i(uint index, ref readonly Vector2i v)
        {
            fixed (Vector2i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                VertexAttribI2iv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI2uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI2ui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI2uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI2uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI2ui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI2uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI2uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI2ui(uint index, ref readonly uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttribI2uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI3iv(uint, int*)"/>
        public static unsafe void VertexAttribI3i(uint index, ref readonly Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                VertexAttribI3iv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI3uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI3ui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI3uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI3uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI3ui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI3uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI3uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI3ui(uint index, ref readonly uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttribI3uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttribI4(uint index, ReadOnlySpan<sbyte> v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttribI4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttribI4(uint index, sbyte[] v)
        {
            fixed (sbyte* v_ptr = v)
            {
                VertexAttribI4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4bv(uint, sbyte*)"/>
        public static unsafe void VertexAttribI4(uint index, ref readonly sbyte v)
        {
            fixed (sbyte* v_ptr = &v)
            {
                VertexAttribI4bv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4iv(uint, int*)"/>
        public static unsafe void VertexAttribI4i(uint index, ref readonly Vector4i v)
        {
            fixed (Vector4i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                VertexAttribI4iv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4sv(uint, short*)"/>
        public static unsafe void VertexAttribI4(uint index, ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttribI4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4sv(uint, short*)"/>
        public static unsafe void VertexAttribI4(uint index, short[] v)
        {
            fixed (short* v_ptr = v)
            {
                VertexAttribI4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4sv(uint, short*)"/>
        public static unsafe void VertexAttribI4(uint index, ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                VertexAttribI4sv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4ubv(uint, byte*)"/>
        public static unsafe void VertexAttribI4(uint index, ReadOnlySpan<byte> v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttribI4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4ubv(uint, byte*)"/>
        public static unsafe void VertexAttribI4(uint index, byte[] v)
        {
            fixed (byte* v_ptr = v)
            {
                VertexAttribI4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4ubv(uint, byte*)"/>
        public static unsafe void VertexAttribI4(uint index, ref readonly byte v)
        {
            fixed (byte* v_ptr = &v)
            {
                VertexAttribI4ubv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI4ui(uint index, ReadOnlySpan<uint> v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI4ui(uint index, uint[] v)
        {
            fixed (uint* v_ptr = v)
            {
                VertexAttribI4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4uiv(uint, uint*)"/>
        public static unsafe void VertexAttribI4ui(uint index, ref readonly uint v)
        {
            fixed (uint* v_ptr = &v)
            {
                VertexAttribI4uiv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4usv(uint, ushort*)"/>
        public static unsafe void VertexAttribI4(uint index, ReadOnlySpan<ushort> v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttribI4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4usv(uint, ushort*)"/>
        public static unsafe void VertexAttribI4(uint index, ushort[] v)
        {
            fixed (ushort* v_ptr = v)
            {
                VertexAttribI4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribI4usv(uint, ushort*)"/>
        public static unsafe void VertexAttribI4(uint index, ref readonly ushort v)
        {
            fixed (ushort* v_ptr = &v)
            {
                VertexAttribI4usv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribIPointer(uint, int, VertexAttribIType, int, void*)"/>
        public static unsafe void VertexAttribIPointer(uint index, int size, VertexAttribIType type, int stride, nint offset)
        {
            void* pointer = (void*)offset;
            VertexAttribIPointer(index, size, type, stride, pointer);
        }
        /// <inheritdoc cref="VertexAttribL1dv(uint, double*)"/>
        public static unsafe void VertexAttribL1d(uint index, ref readonly double v)
        {
            fixed (double* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttribL1dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribL2dv(uint, double*)"/>
        public static unsafe void VertexAttribL2d(uint index, ref readonly Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttribL2dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribL3dv(uint, double*)"/>
        public static unsafe void VertexAttribL3d(uint index, ref readonly Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttribL3dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribL4dv(uint, double*)"/>
        public static unsafe void VertexAttribL4d(uint index, ref readonly Vector4d v)
        {
            fixed (Vector4d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                VertexAttribL4dv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribLPointer(uint, int, VertexAttribLType, int, void*)"/>
        public static unsafe void VertexAttribLPointer(uint index, int size, VertexAttribLType type, int stride, nint offset)
        {
            void* pointer = (void*)offset;
            VertexAttribLPointer(index, size, type, stride, pointer);
        }
        /// <inheritdoc cref="VertexAttribP1uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, ref readonly uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexAttribP1uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP2uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, ref readonly uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexAttribP2uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP3uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, ref readonly uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexAttribP3uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribP4uiv(uint, VertexAttribPointerType, bool, uint*)"/>
        public static unsafe void VertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, ref readonly uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexAttribP4uiv(index, type, normalized, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexAttribPointer(uint, int, VertexAttribPointerType, bool, int, void*)"/>
        public static unsafe void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, nint offset)
        {
            void* pointer = (void*)offset;
            VertexAttribPointer(index, size, type, normalized, stride, pointer);
        }
        /// <inheritdoc cref="VertexP2uiv(VertexPointerType, uint*)"/>
        public static unsafe void VertexP2ui(VertexPointerType type, ref readonly uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexP2uiv(type, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexP3uiv(VertexPointerType, uint*)"/>
        public static unsafe void VertexP3ui(VertexPointerType type, ref readonly uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexP3uiv(type, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexP4uiv(VertexPointerType, uint*)"/>
        public static unsafe void VertexP4ui(VertexPointerType type, ref readonly uint value)
        {
            fixed (uint* value_ptr = &value)
            {
                VertexP4uiv(type, value_ptr);
            }
        }
        /// <inheritdoc cref="VertexPointer(int, VertexPointerType, int, void*)"/>
        public static unsafe void VertexPointer(int size, VertexPointerType type, int stride, IntPtr pointer)
        {
            void* pointer_vptr = (void*)pointer;
            VertexPointer(size, type, stride, pointer_vptr);
        }
        /// <inheritdoc cref="VertexPointer(int, VertexPointerType, int, void*)"/>
        public static unsafe void VertexPointer<T1>(int size, VertexPointerType type, int stride, ReadOnlySpan<T1> pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                VertexPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="VertexPointer(int, VertexPointerType, int, void*)"/>
        public static unsafe void VertexPointer<T1>(int size, VertexPointerType type, int stride, T1[] pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = pointer)
            {
                VertexPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="VertexPointer(int, VertexPointerType, int, void*)"/>
        public static unsafe void VertexPointer<T1>(int size, VertexPointerType type, int stride, ref readonly T1 pointer)
            where T1 : unmanaged
        {
            fixed (void* pointer_ptr = &pointer)
            {
                VertexPointer(size, type, stride, pointer_ptr);
            }
        }
        /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
        public static unsafe void ViewportArray(uint first, int count, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v)
            {
                ViewportArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
        public static unsafe void ViewportArray(uint first, int count, float[] v)
        {
            fixed (float* v_ptr = v)
            {
                ViewportArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
        public static unsafe void ViewportArray(uint first, int count, ref readonly float v)
        {
            fixed (float* v_ptr = &v)
            {
                ViewportArrayv(first, count, v_ptr);
            }
        }
        /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
        public static unsafe void ViewportIndexedf(uint index, ReadOnlySpan<float> v)
        {
            fixed (float* v_ptr = v)
            {
                ViewportIndexedfv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
        public static unsafe void ViewportIndexedf(uint index, float[] v)
        {
            fixed (float* v_ptr = v)
            {
                ViewportIndexedfv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
        public static unsafe void ViewportIndexedf(uint index, ref readonly float v)
        {
            fixed (float* v_ptr = &v)
            {
                ViewportIndexedfv(index, v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2dv(double*)"/>
        public static unsafe void WindowPos2d(ref readonly Vector2d v)
        {
            fixed (Vector2d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                WindowPos2dv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2fv(float*)"/>
        public static unsafe void WindowPos2f(ref readonly Vector2 v)
        {
            fixed (Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2fv(float*)"/>
        public static unsafe void WindowPos2f(ref readonly System.Numerics.Vector2 v)
        {
            fixed (System.Numerics.Vector2* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2fv(float*)"/>
        public static unsafe void WindowPos2f(ReadOnlySpan<System.Numerics.Vector2> v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2fv(float*)"/>
        public static unsafe void WindowPos2f(System.Numerics.Vector2[] v)
        {
            fixed (System.Numerics.Vector2* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos2fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2iv(int*)"/>
        public static unsafe void WindowPos2i(ref readonly Vector2i v)
        {
            fixed (Vector2i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                WindowPos2iv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2s(short, short)"/>
        public static unsafe void WindowPos2(short x, short y)
        {
            WindowPos2s(x, y);
        }
        /// <inheritdoc cref="WindowPos2sv(short*)"/>
        public static unsafe void WindowPos2(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                WindowPos2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2sv(short*)"/>
        public static unsafe void WindowPos2(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                WindowPos2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos2sv(short*)"/>
        public static unsafe void WindowPos2(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                WindowPos2sv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3dv(double*)"/>
        public static unsafe void WindowPos3d(ref readonly Vector3d v)
        {
            fixed (Vector3d* tmp_v = &v)
            {
                double* v_ptr = (double*)tmp_v;
                WindowPos3dv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3fv(float*)"/>
        public static unsafe void WindowPos3f(ref readonly Vector3 v)
        {
            fixed (Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3fv(float*)"/>
        public static unsafe void WindowPos3f(ref readonly System.Numerics.Vector3 v)
        {
            fixed (System.Numerics.Vector3* tmp_v = &v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3fv(float*)"/>
        public static unsafe void WindowPos3f(ReadOnlySpan<System.Numerics.Vector3> v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3fv(float*)"/>
        public static unsafe void WindowPos3f(System.Numerics.Vector3[] v)
        {
            fixed (System.Numerics.Vector3* tmp_v = v)
            {
                float* v_ptr = (float*)tmp_v;
                WindowPos3fv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3iv(int*)"/>
        public static unsafe void WindowPos3i(ref readonly Vector3i v)
        {
            fixed (Vector3i* tmp_v = &v)
            {
                int* v_ptr = (int*)tmp_v;
                WindowPos3iv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3s(short, short, short)"/>
        public static unsafe void WindowPos3(short x, short y, short z)
        {
            WindowPos3s(x, y, z);
        }
        /// <inheritdoc cref="WindowPos3sv(short*)"/>
        public static unsafe void WindowPos3(ReadOnlySpan<short> v)
        {
            fixed (short* v_ptr = v)
            {
                WindowPos3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3sv(short*)"/>
        public static unsafe void WindowPos3(short[] v)
        {
            fixed (short* v_ptr = v)
            {
                WindowPos3sv(v_ptr);
            }
        }
        /// <inheritdoc cref="WindowPos3sv(short*)"/>
        public static unsafe void WindowPos3(ref readonly short v)
        {
            fixed (short* v_ptr = &v)
            {
                WindowPos3sv(v_ptr);
            }
        }
        public static unsafe partial class _3DFX
        {
        }
        public static unsafe partial class AMD
        {
            /// <inheritdoc cref="DebugMessageCallbackAMD(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackAMD(GLDebugProcAMD callback, IntPtr userParam)
            {
                void* userParam_vptr = (void*)userParam;
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallbackAMD(callback_ptr, userParam_vptr);
            }
            /// <inheritdoc cref="DebugMessageCallbackAMD(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackAMD<T1>(GLDebugProcAMD callback, Span<T1> userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallbackAMD(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallbackAMD(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackAMD<T1>(GLDebugProcAMD callback, T1[] userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallbackAMD(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallbackAMD(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackAMD<T1>(GLDebugProcAMD callback, ref T1 userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = &userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallbackAMD(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageEnableAMD(All, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageEnableAMD(All category, DebugSeverity severity, int count, ReadOnlySpan<uint> ids, bool enabled)
            {
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageEnableAMD(category, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageEnableAMD(All, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageEnableAMD(All category, DebugSeverity severity, int count, uint[] ids, bool enabled)
            {
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageEnableAMD(category, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageEnableAMD(All, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageEnableAMD(All category, DebugSeverity severity, int count, ref readonly uint ids, bool enabled)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    DebugMessageEnableAMD(category, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageInsertAMD(All, DebugSeverity, uint, int, byte*)"/>
            public static unsafe void DebugMessageInsertAMD(All category, DebugSeverity severity, uint id, int length, string buf)
            {
                byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
                DebugMessageInsertAMD(category, severity, id, length, buf_ptr);
                Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
            }
            /// <inheritdoc cref="DeleteNamesAMD(All, uint, uint*)"/>
            public static unsafe void DeleteNamesAMD(All identifier, uint num, ReadOnlySpan<uint> names)
            {
                fixed (uint* names_ptr = names)
                {
                    DeleteNamesAMD(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="DeleteNamesAMD(All, uint, uint*)"/>
            public static unsafe void DeleteNamesAMD(All identifier, uint num, uint[] names)
            {
                fixed (uint* names_ptr = names)
                {
                    DeleteNamesAMD(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="DeleteNamesAMD(All, uint, uint*)"/>
            public static unsafe void DeleteNamesAMD(All identifier, uint num, ref readonly uint names)
            {
                fixed (uint* names_ptr = &names)
                {
                    DeleteNamesAMD(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="DeletePerfMonitorsAMD(int, uint*)"/>
            public static unsafe void DeletePerfMonitorsAMD(int n, Span<uint> monitors)
            {
                fixed (uint* monitors_ptr = monitors)
                {
                    DeletePerfMonitorsAMD(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="DeletePerfMonitorsAMD(int, uint*)"/>
            public static unsafe void DeletePerfMonitorsAMD(int n, uint[] monitors)
            {
                fixed (uint* monitors_ptr = monitors)
                {
                    DeletePerfMonitorsAMD(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="DeletePerfMonitorsAMD(int, uint*)"/>
            public static unsafe void DeletePerfMonitorsAMD(int n, ref readonly uint monitors)
            {
                fixed (uint* monitors_ptr = &monitors)
                {
                    DeletePerfMonitorsAMD(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferSamplePositionsfvAMD(FramebufferTarget, uint, uint, float*)"/>
            public static unsafe void FramebufferSamplePositionsfvAMD(FramebufferTarget target, uint numsamples, uint pixelindex, ReadOnlySpan<float> values)
            {
                fixed (float* values_ptr = values)
                {
                    FramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferSamplePositionsfvAMD(FramebufferTarget, uint, uint, float*)"/>
            public static unsafe void FramebufferSamplePositionsfvAMD(FramebufferTarget target, uint numsamples, uint pixelindex, float[] values)
            {
                fixed (float* values_ptr = values)
                {
                    FramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferSamplePositionsfvAMD(FramebufferTarget, uint, uint, float*)"/>
            public static unsafe void FramebufferSamplePositionsfvAMD(FramebufferTarget target, uint numsamples, uint pixelindex, ref readonly float values)
            {
                fixed (float* values_ptr = &values)
                {
                    FramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values_ptr);
                }
            }
            /// <inheritdoc cref="GenNamesAMD(All, uint, uint*)"/>
            public static unsafe void GenNamesAMD(All identifier, uint num, Span<uint> names)
            {
                fixed (uint* names_ptr = names)
                {
                    GenNamesAMD(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="GenNamesAMD(All, uint, uint*)"/>
            public static unsafe void GenNamesAMD(All identifier, uint num, uint[] names)
            {
                fixed (uint* names_ptr = names)
                {
                    GenNamesAMD(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="GenNamesAMD(All, uint, uint*)"/>
            public static unsafe void GenNamesAMD(All identifier, uint num, ref uint names)
            {
                fixed (uint* names_ptr = &names)
                {
                    GenNamesAMD(identifier, num, names_ptr);
                }
            }
            /// <inheritdoc cref="GenPerfMonitorsAMD(int, uint*)"/>
            public static unsafe void GenPerfMonitorsAMD(int n, Span<uint> monitors)
            {
                fixed (uint* monitors_ptr = monitors)
                {
                    GenPerfMonitorsAMD(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="GenPerfMonitorsAMD(int, uint*)"/>
            public static unsafe void GenPerfMonitorsAMD(int n, uint[] monitors)
            {
                fixed (uint* monitors_ptr = monitors)
                {
                    GenPerfMonitorsAMD(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="GenPerfMonitorsAMD(int, uint*)"/>
            public static unsafe void GenPerfMonitorsAMD(int n, ref uint monitors)
            {
                fixed (uint* monitors_ptr = &monitors)
                {
                    GenPerfMonitorsAMD(n, monitors_ptr);
                }
            }
            /// <inheritdoc cref="GetDebugMessageLogAMD(uint, int, All*, DebugSeverity*, uint*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogAMD(uint count, int bufSize, Span<All> categories, Span<DebugSeverity> severities, Span<uint> ids, Span<int> lengths, out string message)
            {
                uint returnValue;
                fixed (int* lengths_ptr = lengths)
                {
                    fixed (uint* ids_ptr = ids)
                    {
                        fixed (DebugSeverity* severities_ptr = severities)
                        {
                            fixed (All* categories_ptr = categories)
                            {
                                var message_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = GetDebugMessageLogAMD(count, bufSize, categories_ptr, severities_ptr, ids_ptr, lengths_ptr, message_ptr);
                                message = Marshal.PtrToStringUTF8((IntPtr)message_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)message_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogAMD(uint, int, All*, DebugSeverity*, uint*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogAMD(uint count, int bufSize, All[] categories, DebugSeverity[] severities, uint[] ids, int[] lengths, out string message)
            {
                uint returnValue;
                fixed (int* lengths_ptr = lengths)
                {
                    fixed (uint* ids_ptr = ids)
                    {
                        fixed (DebugSeverity* severities_ptr = severities)
                        {
                            fixed (All* categories_ptr = categories)
                            {
                                var message_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                returnValue = GetDebugMessageLogAMD(count, bufSize, categories_ptr, severities_ptr, ids_ptr, lengths_ptr, message_ptr);
                                message = Marshal.PtrToStringUTF8((IntPtr)message_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)message_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogAMD(uint, int, All*, DebugSeverity*, uint*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogAMD(uint count, int bufSize, ref All categories, ref DebugSeverity severities, ref uint ids, ref int lengths, out string message)
            {
                uint returnValue;
                fixed (All* categories_ptr = &categories)
                fixed (DebugSeverity* severities_ptr = &severities)
                fixed (uint* ids_ptr = &ids)
                fixed (int* lengths_ptr = &lengths)
                {
                    var message_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    returnValue = GetDebugMessageLogAMD(count, bufSize, categories_ptr, severities_ptr, ids_ptr, lengths_ptr, message_ptr);
                    message = Marshal.PtrToStringUTF8((IntPtr)message_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)message_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetFramebufferParameterfvAMD(FramebufferTarget, FramebufferAttachmentParameterName, uint, uint, int, float*)"/>
            public static unsafe void GetFramebufferParameterfvAMD(FramebufferTarget target, FramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, Span<float> values)
            {
                fixed (float* values_ptr = values)
                {
                    GetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameterfvAMD(FramebufferTarget, FramebufferAttachmentParameterName, uint, uint, int, float*)"/>
            public static unsafe void GetFramebufferParameterfvAMD(FramebufferTarget target, FramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, float[] values)
            {
                fixed (float* values_ptr = values)
                {
                    GetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameterfvAMD(FramebufferTarget, FramebufferAttachmentParameterName, uint, uint, int, float*)"/>
            public static unsafe void GetFramebufferParameterfvAMD(FramebufferTarget target, FramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, ref float values)
            {
                fixed (float* values_ptr = &values)
                {
                    GetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameterfvAMD(int, All, uint, uint, int, float*)"/>
            public static unsafe void GetNamedFramebufferParameterfvAMD(int framebuffer, All pname, uint numsamples, uint pixelindex, int size, Span<float> values)
            {
                fixed (float* values_ptr = values)
                {
                    GetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameterfvAMD(int, All, uint, uint, int, float*)"/>
            public static unsafe void GetNamedFramebufferParameterfvAMD(int framebuffer, All pname, uint numsamples, uint pixelindex, int size, float[] values)
            {
                fixed (float* values_ptr = values)
                {
                    GetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameterfvAMD(int, All, uint, uint, int, float*)"/>
            public static unsafe void GetNamedFramebufferParameterfvAMD(int framebuffer, All pname, uint numsamples, uint pixelindex, int size, ref float values)
            {
                fixed (float* values_ptr = &values)
                {
                    GetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterDataAMD(uint, All, int, uint*, int*)"/>
            public static unsafe int GetPerfMonitorCounterDataAMD(uint monitor, All pname, int dataSize, Span<uint> data)
            {
                int bytesWritten;
                int* bytesWritten_ptr = &bytesWritten;
                {
                    fixed (uint* data_ptr = data)
                    {
                        GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                    }
                }
                return bytesWritten;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterDataAMD(uint, All, int, uint*, int*)"/>
            public static unsafe void GetPerfMonitorCounterDataAMD(uint monitor, All pname, int dataSize, Span<uint> data, out int bytesWritten)
            {
                fixed (int* bytesWritten_ptr = &bytesWritten)
                {
                    fixed (uint* data_ptr = data)
                    {
                        GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterDataAMD(uint, All, int, uint*, int*)"/>
            public static unsafe int GetPerfMonitorCounterDataAMD(uint monitor, All pname, int dataSize, uint[] data)
            {
                int bytesWritten;
                int* bytesWritten_ptr = &bytesWritten;
                {
                    fixed (uint* data_ptr = data)
                    {
                        GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                    }
                }
                return bytesWritten;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterDataAMD(uint, All, int, uint*, int*)"/>
            public static unsafe void GetPerfMonitorCounterDataAMD(uint monitor, All pname, int dataSize, uint[] data, out int bytesWritten)
            {
                fixed (int* bytesWritten_ptr = &bytesWritten)
                {
                    fixed (uint* data_ptr = data)
                    {
                        GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterDataAMD(uint, All, int, uint*, int*)"/>
            public static unsafe int GetPerfMonitorCounterDataAMD(uint monitor, All pname, int dataSize, ref uint data)
            {
                int bytesWritten;
                int* bytesWritten_ptr = &bytesWritten;
                fixed (uint* data_ptr = &data)
                {
                    GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                }
                return bytesWritten;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterDataAMD(uint, All, int, uint*, int*)"/>
            public static unsafe void GetPerfMonitorCounterDataAMD(uint monitor, All pname, int dataSize, ref uint data, out int bytesWritten)
            {
                fixed (uint* data_ptr = &data)
                fixed (int* bytesWritten_ptr = &bytesWritten)
                {
                    GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data_ptr, bytesWritten_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterInfoAMD(uint, uint, All, void*)"/>
            public static unsafe void GetPerfMonitorCounterInfoAMD(uint group, uint counter, All pname, IntPtr data)
            {
                void* data_vptr = (void*)data;
                GetPerfMonitorCounterInfoAMD(group, counter, pname, data_vptr);
            }
            /// <inheritdoc cref="GetPerfMonitorCounterInfoAMD(uint, uint, All, void*)"/>
            public static unsafe void GetPerfMonitorCounterInfoAMD<T1>(uint group, uint counter, All pname, Span<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetPerfMonitorCounterInfoAMD(group, counter, pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterInfoAMD(uint, uint, All, void*)"/>
            public static unsafe void GetPerfMonitorCounterInfoAMD<T1>(uint group, uint counter, All pname, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetPerfMonitorCounterInfoAMD(group, counter, pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterInfoAMD(uint, uint, All, void*)"/>
            public static unsafe T1 GetPerfMonitorCounterInfoAMD<T1>(uint group, uint counter, All pname)
                where T1 : unmanaged
            {
                T1 data;
                void* data_ptr = &data;
                {
                    GetPerfMonitorCounterInfoAMD(group, counter, pname, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterInfoAMD(uint, uint, All, void*)"/>
            public static unsafe void GetPerfMonitorCounterInfoAMD<T1>(uint group, uint counter, All pname, out T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    GetPerfMonitorCounterInfoAMD(group, counter, pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCountersAMD(uint, int*, int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorCountersAMD(uint group, out int numCounters, out int maxActiveCounters, int counterSize, Span<uint> counters)
            {
                fixed (int* numCounters_ptr = &numCounters)
                fixed (int* maxActiveCounters_ptr = &maxActiveCounters)
                {
                    fixed (uint* counters_ptr = counters)
                    {
                        GetPerfMonitorCountersAMD(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCountersAMD(uint, int*, int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorCountersAMD(uint group, out int numCounters, out int maxActiveCounters, int counterSize, uint[] counters)
            {
                fixed (int* numCounters_ptr = &numCounters)
                fixed (int* maxActiveCounters_ptr = &maxActiveCounters)
                {
                    fixed (uint* counters_ptr = counters)
                    {
                        GetPerfMonitorCountersAMD(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCountersAMD(uint, int*, int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorCountersAMD(uint group, out int numCounters, out int maxActiveCounters, int counterSize, ref uint counters)
            {
                fixed (int* numCounters_ptr = &numCounters)
                fixed (int* maxActiveCounters_ptr = &maxActiveCounters)
                fixed (uint* counters_ptr = &counters)
                {
                    GetPerfMonitorCountersAMD(group, numCounters_ptr, maxActiveCounters_ptr, counterSize, counters_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorCounterStringAMD(uint, uint, int, int*, byte*)"/>
            public static unsafe string GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, out int length)
            {
                string counterString;
                fixed (int* length_ptr = &length)
                {
                    var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                    counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
                }
                return counterString;
            }
            /// <inheritdoc cref="GetPerfMonitorCounterStringAMD(uint, uint, int, int*, byte*)"/>
            public static unsafe void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, out int length, out string counterString)
            {
                fixed (int* length_ptr = &length)
                {
                    var counterString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorCounterStringAMD(group, counter, bufSize, length_ptr, counterString_ptr);
                    counterString = Marshal.PtrToStringUTF8((IntPtr)counterString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterString_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroupsAMD(int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorGroupsAMD(out int numGroups, int groupsSize, Span<uint> groups)
            {
                fixed (int* numGroups_ptr = &numGroups)
                {
                    fixed (uint* groups_ptr = groups)
                    {
                        GetPerfMonitorGroupsAMD(numGroups_ptr, groupsSize, groups_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroupsAMD(int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorGroupsAMD(out int numGroups, int groupsSize, uint[] groups)
            {
                fixed (int* numGroups_ptr = &numGroups)
                {
                    fixed (uint* groups_ptr = groups)
                    {
                        GetPerfMonitorGroupsAMD(numGroups_ptr, groupsSize, groups_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroupsAMD(int*, int, uint*)"/>
            public static unsafe void GetPerfMonitorGroupsAMD(out int numGroups, int groupsSize, ref uint groups)
            {
                fixed (int* numGroups_ptr = &numGroups)
                fixed (uint* groups_ptr = &groups)
                {
                    GetPerfMonitorGroupsAMD(numGroups_ptr, groupsSize, groups_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfMonitorGroupStringAMD(uint, int, int*, byte*)"/>
            public static unsafe string GetPerfMonitorGroupStringAMD(uint group, int bufSize, out int length)
            {
                string groupString;
                fixed (int* length_ptr = &length)
                {
                    var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                    groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
                }
                return groupString;
            }
            /// <inheritdoc cref="GetPerfMonitorGroupStringAMD(uint, int, int*, byte*)"/>
            public static unsafe void GetPerfMonitorGroupStringAMD(uint group, int bufSize, out int length, out string groupString)
            {
                fixed (int* length_ptr = &length)
                {
                    var groupString_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetPerfMonitorGroupStringAMD(group, bufSize, length_ptr, groupString_ptr);
                    groupString = Marshal.PtrToStringUTF8((IntPtr)groupString_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)groupString_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe void GetUniformi64vNV(int program, int location, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe void GetUniformi64vNV(int program, int location, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe long GetUniformi64vNV(int program, int location)
            {
                long parameters;
                long* parameters_ptr = &parameters;
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe void GetUniformi64vNV(int program, int location, out long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vNV(int program, int location, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vNV(int program, int location, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe ulong GetUniformui64vNV(int program, int location)
            {
                ulong parameters;
                ulong* parameters_ptr = &parameters;
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vNV(int program, int location, out ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectAMD(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectAMD(PrimitiveType mode, IntPtr indirect, int primcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawArraysIndirectAMD(mode, indirect_vptr, primcount, stride);
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectAMD(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectAMD<T1>(PrimitiveType mode, ReadOnlySpan<T1> indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirectAMD(mode, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectAMD(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectAMD<T1>(PrimitiveType mode, T1[] indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirectAMD(mode, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectAMD(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectAMD<T1>(PrimitiveType mode, ref readonly T1 indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawArraysIndirectAMD(mode, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectAMD(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectAMD(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int primcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawElementsIndirectAMD(mode, type, indirect_vptr, primcount, stride);
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectAMD(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectAMD<T1>(PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirectAMD(mode, type, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectAMD(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectAMD<T1>(PrimitiveType mode, DrawElementsType type, T1[] indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirectAMD(mode, type, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectAMD(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectAMD<T1>(PrimitiveType mode, DrawElementsType type, ref readonly T1 indirect, int primcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawElementsIndirectAMD(mode, type, indirect_ptr, primcount, stride);
                }
            }
            /// <inheritdoc cref="NamedFramebufferSamplePositionsfvAMD(int, uint, uint, float*)"/>
            public static unsafe void NamedFramebufferSamplePositionsfvAMD(int framebuffer, uint numsamples, uint pixelindex, ReadOnlySpan<float> values)
            {
                fixed (float* values_ptr = values)
                {
                    NamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferSamplePositionsfvAMD(int, uint, uint, float*)"/>
            public static unsafe void NamedFramebufferSamplePositionsfvAMD(int framebuffer, uint numsamples, uint pixelindex, float[] values)
            {
                fixed (float* values_ptr = values)
                {
                    NamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferSamplePositionsfvAMD(int, uint, uint, float*)"/>
            public static unsafe void NamedFramebufferSamplePositionsfvAMD(int framebuffer, uint numsamples, uint pixelindex, ref readonly float values)
            {
                fixed (float* values_ptr = &values)
                {
                    NamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform1i64vNV(int program, int location, int count, ref readonly long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform1i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform1ui64vNV(int program, int location, int count, ref readonly ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform1ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, ref readonly Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, ref readonly System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, ref readonly Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, ref readonly System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, ref readonly Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, ref readonly System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, ref readonly Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, ref readonly System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, ref readonly Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, ref readonly System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, ref readonly Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, ref readonly System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="SelectPerfMonitorCountersAMD(uint, bool, uint, int, uint*)"/>
            public static unsafe void SelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, int numCounters, Span<uint> counterList)
            {
                fixed (uint* counterList_ptr = counterList)
                {
                    SelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList_ptr);
                }
            }
            /// <inheritdoc cref="SelectPerfMonitorCountersAMD(uint, bool, uint, int, uint*)"/>
            public static unsafe void SelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, int numCounters, uint[] counterList)
            {
                fixed (uint* counterList_ptr = counterList)
                {
                    SelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList_ptr);
                }
            }
            /// <inheritdoc cref="SelectPerfMonitorCountersAMD(uint, bool, uint, int, uint*)"/>
            public static unsafe void SelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, int numCounters, ref readonly uint counterList)
            {
                fixed (uint* counterList_ptr = &counterList)
                {
                    SelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList_ptr);
                }
            }
            /// <inheritdoc cref="SetMultisamplefvAMD(All, uint, float*)"/>
            public static unsafe void SetMultisamplefvAMD(All pname, uint index, ReadOnlySpan<float> val)
            {
                fixed (float* val_ptr = val)
                {
                    SetMultisamplefvAMD(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="SetMultisamplefvAMD(All, uint, float*)"/>
            public static unsafe void SetMultisamplefvAMD(All pname, uint index, float[] val)
            {
                fixed (float* val_ptr = val)
                {
                    SetMultisamplefvAMD(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="SetMultisamplefvAMD(All, uint, float*)"/>
            public static unsafe void SetMultisamplefvAMD(All pname, uint index, ref readonly float val)
            {
                fixed (float* val_ptr = &val)
                {
                    SetMultisamplefvAMD(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vNV(int, int, long*)"/>
            public static unsafe void Uniform1i64vNV(int location, int count, ref readonly long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vNV(int, int, long*)"/>
            public static unsafe void Uniform1i64vNV(int location, int count, ReadOnlySpan<long> value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vNV(int, int, long*)"/>
            public static unsafe void Uniform1i64vNV(int location, int count, long[] value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vNV(int location, int count, ref readonly ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vNV(int location, int count, ReadOnlySpan<ulong> value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vNV(int location, int count, ulong[] value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, ref readonly Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, ref readonly System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, ref readonly Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, ref readonly System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, ref readonly Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, ref readonly System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, ref readonly Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, ref readonly System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, ref readonly Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, ref readonly System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, ref readonly Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, ref readonly System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
        }
        public static unsafe partial class APPLE
        {
            /// <inheritdoc cref="DeleteFencesAPPLE(int, uint*)"/>
            public static unsafe void DeleteFencesAPPLE(int n, ReadOnlySpan<uint> fences)
            {
                fixed (uint* fences_ptr = fences)
                {
                    DeleteFencesAPPLE(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFencesAPPLE(int, uint*)"/>
            public static unsafe void DeleteFencesAPPLE(int n, uint[] fences)
            {
                fixed (uint* fences_ptr = fences)
                {
                    DeleteFencesAPPLE(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFencesAPPLE(int, uint*)"/>
            public static unsafe void DeleteFencesAPPLE(int n, ref readonly uint fences)
            {
                fixed (uint* fences_ptr = &fences)
                {
                    DeleteFencesAPPLE(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArraysAPPLE(int, int*)"/>
            public static unsafe void DeleteVertexArraysAPPLE(int n, ReadOnlySpan<int> arrays)
            {
                fixed (int* arrays_ptr = arrays)
                {
                    DeleteVertexArraysAPPLE(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArraysAPPLE(int, int*)"/>
            public static unsafe void DeleteVertexArraysAPPLE(int n, int[] arrays)
            {
                fixed (int* arrays_ptr = arrays)
                {
                    DeleteVertexArraysAPPLE(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArraysAPPLE(int, int*)"/>
            public static unsafe void DeleteVertexArraysAPPLE(int n, ref readonly int arrays)
            {
                fixed (int* arrays_ptr = &arrays)
                {
                    DeleteVertexArraysAPPLE(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointerAPPLE(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerAPPLE(ElementPointerTypeATI type, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                ElementPointerAPPLE(type, pointer_vptr);
            }
            /// <inheritdoc cref="ElementPointerAPPLE(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerAPPLE<T1>(ElementPointerTypeATI type, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ElementPointerAPPLE(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointerAPPLE(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerAPPLE<T1>(ElementPointerTypeATI type, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ElementPointerAPPLE(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointerAPPLE(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerAPPLE<T1>(ElementPointerTypeATI type, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    ElementPointerAPPLE(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FlushVertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void FlushVertexArrayRangeAPPLE(int length, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                FlushVertexArrayRangeAPPLE(length, pointer_vptr);
            }
            /// <inheritdoc cref="FlushVertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void FlushVertexArrayRangeAPPLE<T1>(int length, Span<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    FlushVertexArrayRangeAPPLE(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FlushVertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void FlushVertexArrayRangeAPPLE<T1>(int length, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    FlushVertexArrayRangeAPPLE(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FlushVertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void FlushVertexArrayRangeAPPLE<T1>(int length, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    FlushVertexArrayRangeAPPLE(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="GenFencesAPPLE(int, uint*)"/>
            public static unsafe void GenFencesAPPLE(int n, Span<uint> fences)
            {
                fixed (uint* fences_ptr = fences)
                {
                    GenFencesAPPLE(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenFencesAPPLE(int, uint*)"/>
            public static unsafe void GenFencesAPPLE(int n, uint[] fences)
            {
                fixed (uint* fences_ptr = fences)
                {
                    GenFencesAPPLE(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenFencesAPPLE(int, uint*)"/>
            public static unsafe void GenFencesAPPLE(int n, ref uint fences)
            {
                fixed (uint* fences_ptr = &fences)
                {
                    GenFencesAPPLE(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArraysAPPLE(int, int*)"/>
            public static unsafe void GenVertexArraysAPPLE(int n, Span<int> arrays)
            {
                fixed (int* arrays_ptr = arrays)
                {
                    GenVertexArraysAPPLE(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArraysAPPLE(int, int*)"/>
            public static unsafe void GenVertexArraysAPPLE(int n, int[] arrays)
            {
                fixed (int* arrays_ptr = arrays)
                {
                    GenVertexArraysAPPLE(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArraysAPPLE(int, int*)"/>
            public static unsafe void GenVertexArraysAPPLE(int n, ref int arrays)
            {
                fixed (int* arrays_ptr = &arrays)
                {
                    GenVertexArraysAPPLE(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterivAPPLE(All, uint, All, int*)"/>
            public static unsafe void GetObjectParameterivAPPLE(All objectType, uint name, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectParameterivAPPLE(objectType, name, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterivAPPLE(All, uint, All, int*)"/>
            public static unsafe void GetObjectParameterivAPPLE(All objectType, uint name, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectParameterivAPPLE(objectType, name, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterivAPPLE(All, uint, All, int*)"/>
            public static unsafe int GetObjectParameterivAPPLE(All objectType, uint name, All pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetObjectParameterivAPPLE(objectType, name, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetObjectParameterivAPPLE(All, uint, All, int*)"/>
            public static unsafe void GetObjectParameterivAPPLE(All objectType, uint name, All pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetObjectParameterivAPPLE(objectType, name, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1dAPPLE(uint, uint, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, ReadOnlySpan<double> points)
            {
                fixed (double* points_ptr = points)
                {
                    MapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1dAPPLE(uint, uint, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, double[] points)
            {
                fixed (double* points_ptr = points)
                {
                    MapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1dAPPLE(uint, uint, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, ref readonly double points)
            {
                fixed (double* points_ptr = &points)
                {
                    MapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1fAPPLE(uint, uint, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, ReadOnlySpan<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    MapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1fAPPLE(uint, uint, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    MapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib1fAPPLE(uint, uint, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, ref readonly float points)
            {
                fixed (float* points_ptr = &points)
                {
                    MapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2dAPPLE(uint, uint, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ReadOnlySpan<double> points)
            {
                fixed (double* points_ptr = points)
                {
                    MapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2dAPPLE(uint, uint, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points)
            {
                fixed (double* points_ptr = points)
                {
                    MapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2dAPPLE(uint, uint, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void MapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref readonly double points)
            {
                fixed (double* points_ptr = &points)
                {
                    MapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2fAPPLE(uint, uint, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ReadOnlySpan<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    MapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2fAPPLE(uint, uint, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    MapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MapVertexAttrib2fAPPLE(uint, uint, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void MapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref readonly float points)
            {
                fixed (float* points_ptr = &points)
                {
                    MapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawElementArrayAPPLE(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawElementArrayAPPLE(PrimitiveType mode, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int primcount)
            {
                fixed (int* count_ptr = count)
                {
                    fixed (int* first_ptr = first)
                    {
                        MultiDrawElementArrayAPPLE(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawElementArrayAPPLE(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawElementArrayAPPLE(PrimitiveType mode, int[] first, int[] count, int primcount)
            {
                fixed (int* count_ptr = count)
                {
                    fixed (int* first_ptr = first)
                    {
                        MultiDrawElementArrayAPPLE(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawElementArrayAPPLE(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawElementArrayAPPLE(PrimitiveType mode, ref readonly int first, ref readonly int count, int primcount)
            {
                fixed (int* first_ptr = &first)
                fixed (int* count_ptr = &count)
                {
                    MultiDrawElementArrayAPPLE(mode, first_ptr, count_ptr, primcount);
                }
            }
            /// <inheritdoc cref="MultiDrawRangeElementArrayAPPLE(PrimitiveType, uint, uint, int*, int*, int)"/>
            public static unsafe void MultiDrawRangeElementArrayAPPLE(PrimitiveType mode, uint start, uint end, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int primcount)
            {
                fixed (int* count_ptr = count)
                {
                    fixed (int* first_ptr = first)
                    {
                        MultiDrawRangeElementArrayAPPLE(mode, start, end, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawRangeElementArrayAPPLE(PrimitiveType, uint, uint, int*, int*, int)"/>
            public static unsafe void MultiDrawRangeElementArrayAPPLE(PrimitiveType mode, uint start, uint end, int[] first, int[] count, int primcount)
            {
                fixed (int* count_ptr = count)
                {
                    fixed (int* first_ptr = first)
                    {
                        MultiDrawRangeElementArrayAPPLE(mode, start, end, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawRangeElementArrayAPPLE(PrimitiveType, uint, uint, int*, int*, int)"/>
            public static unsafe void MultiDrawRangeElementArrayAPPLE(PrimitiveType mode, uint start, uint end, ref readonly int first, ref readonly int count, int primcount)
            {
                fixed (int* first_ptr = &first)
                fixed (int* count_ptr = &count)
                {
                    MultiDrawRangeElementArrayAPPLE(mode, start, end, first_ptr, count_ptr, primcount);
                }
            }
            /// <inheritdoc cref="TextureRangeAPPLE(All, int, void*)"/>
            public static unsafe void TextureRangeAPPLE(All target, int length, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                TextureRangeAPPLE(target, length, pointer_vptr);
            }
            /// <inheritdoc cref="TextureRangeAPPLE(All, int, void*)"/>
            public static unsafe void TextureRangeAPPLE<T1>(All target, int length, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    TextureRangeAPPLE(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TextureRangeAPPLE(All, int, void*)"/>
            public static unsafe void TextureRangeAPPLE<T1>(All target, int length, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    TextureRangeAPPLE(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TextureRangeAPPLE(All, int, void*)"/>
            public static unsafe void TextureRangeAPPLE<T1>(All target, int length, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    TextureRangeAPPLE(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void VertexArrayRangeAPPLE(int length, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexArrayRangeAPPLE(length, pointer_vptr);
            }
            /// <inheritdoc cref="VertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void VertexArrayRangeAPPLE<T1>(int length, Span<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexArrayRangeAPPLE(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void VertexArrayRangeAPPLE<T1>(int length, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexArrayRangeAPPLE(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRangeAPPLE(int, void*)"/>
            public static unsafe void VertexArrayRangeAPPLE<T1>(int length, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexArrayRangeAPPLE(length, pointer_ptr);
                }
            }
        }
        public static unsafe partial class ARB
        {
            /// <inheritdoc cref="BindAttribLocationARB(GLHandleARB, uint, byte*)"/>
            public static unsafe void BindAttribLocationARB(GLHandleARB programObj, uint index, string name)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                BindAttribLocationARB(programObj, index, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="BindBuffersBase(BufferTarget, uint, int, int*)"/>
            public static unsafe void BindBuffersBase(BufferTarget target, uint first, int count, ReadOnlySpan<int> buffers)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    BindBuffersBase(target, first, count, buffers_ptr);
                }
            }
            /// <inheritdoc cref="BindBuffersBase(BufferTarget, uint, int, int*)"/>
            public static unsafe void BindBuffersBase(BufferTarget target, uint first, int count, int[] buffers)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    BindBuffersBase(target, first, count, buffers_ptr);
                }
            }
            /// <inheritdoc cref="BindBuffersBase(BufferTarget, uint, int, int*)"/>
            public static unsafe void BindBuffersBase(BufferTarget target, uint first, int count, ref readonly int buffers)
            {
                fixed (int* buffers_ptr = &buffers)
                {
                    BindBuffersBase(target, first, count, buffers_ptr);
                }
            }
            /// <inheritdoc cref="BindBuffersRange(BufferTarget, uint, int, int*, IntPtr*, nint*)"/>
            public static unsafe void BindBuffersRange(BufferTarget target, uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<nint> sizes)
            {
                fixed (nint* sizes_ptr = sizes)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (int* buffers_ptr = buffers)
                        {
                            BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="BindBuffersRange(BufferTarget, uint, int, int*, IntPtr*, nint*)"/>
            public static unsafe void BindBuffersRange(BufferTarget target, uint first, int count, int[] buffers, IntPtr[] offsets, nint[] sizes)
            {
                fixed (nint* sizes_ptr = sizes)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (int* buffers_ptr = buffers)
                        {
                            BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="BindBuffersRange(BufferTarget, uint, int, int*, IntPtr*, nint*)"/>
            public static unsafe void BindBuffersRange(BufferTarget target, uint first, int count, ref readonly int buffers, ref readonly IntPtr offsets, ref readonly nint sizes)
            {
                fixed (int* buffers_ptr = &buffers)
                fixed (IntPtr* offsets_ptr = &offsets)
                fixed (nint* sizes_ptr = &sizes)
                {
                    BindBuffersRange(target, first, count, buffers_ptr, offsets_ptr, sizes_ptr);
                }
            }
            /// <inheritdoc cref="BindFragDataLocationIndexed(int, uint, uint, byte*)"/>
            public static unsafe void BindFragDataLocationIndexed(int program, uint colorNumber, uint index, string name)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                BindFragDataLocationIndexed(program, colorNumber, index, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
            public static unsafe void BindImageTextures(uint first, int count, ReadOnlySpan<int> textures)
            {
                fixed (int* textures_ptr = textures)
                {
                    BindImageTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
            public static unsafe void BindImageTextures(uint first, int count, int[] textures)
            {
                fixed (int* textures_ptr = textures)
                {
                    BindImageTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindImageTextures(uint, int, int*)"/>
            public static unsafe void BindImageTextures(uint first, int count, ref readonly int textures)
            {
                fixed (int* textures_ptr = &textures)
                {
                    BindImageTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
            public static unsafe void BindSamplers(uint first, int count, ReadOnlySpan<int> samplers)
            {
                fixed (int* samplers_ptr = samplers)
                {
                    BindSamplers(first, count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
            public static unsafe void BindSamplers(uint first, int count, int[] samplers)
            {
                fixed (int* samplers_ptr = samplers)
                {
                    BindSamplers(first, count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="BindSamplers(uint, int, int*)"/>
            public static unsafe void BindSamplers(uint first, int count, ref readonly int samplers)
            {
                fixed (int* samplers_ptr = &samplers)
                {
                    BindSamplers(first, count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
            public static unsafe void BindTextures(uint first, int count, ReadOnlySpan<int> textures)
            {
                fixed (int* textures_ptr = textures)
                {
                    BindTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
            public static unsafe void BindTextures(uint first, int count, int[] textures)
            {
                fixed (int* textures_ptr = textures)
                {
                    BindTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindTextures(uint, int, int*)"/>
            public static unsafe void BindTextures(uint first, int count, ref readonly int textures)
            {
                fixed (int* textures_ptr = &textures)
                {
                    BindTextures(first, count, textures_ptr);
                }
            }
            /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void BindVertexBuffers(uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<int> strides)
            {
                fixed (int* strides_ptr = strides)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (int* buffers_ptr = buffers)
                        {
                            BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void BindVertexBuffers(uint first, int count, int[] buffers, IntPtr[] offsets, int[] strides)
            {
                fixed (int* strides_ptr = strides)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (int* buffers_ptr = buffers)
                        {
                            BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="BindVertexBuffers(uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void BindVertexBuffers(uint first, int count, ref readonly int buffers, ref readonly IntPtr offsets, ref readonly int strides)
            {
                fixed (int* buffers_ptr = &buffers)
                fixed (IntPtr* offsets_ptr = &offsets)
                fixed (int* strides_ptr = &strides)
                {
                    BindVertexBuffers(first, count, buffers_ptr, offsets_ptr, strides_ptr);
                }
            }
            /// <inheritdoc cref="BufferDataARB(BufferTarget, nint, void*, BufferUsage)"/>
            public static unsafe void BufferDataARB(BufferTarget target, nint size, IntPtr data, BufferUsage usage)
            {
                void* data_vptr = (void*)data;
                BufferDataARB(target, size, data_vptr, usage);
            }
            /// <inheritdoc cref="BufferDataARB(BufferTarget, nint, void*, BufferUsage)"/>
            public static unsafe void BufferDataARB<T1>(BufferTarget target, nint size, ReadOnlySpan<T1> data, BufferUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    BufferDataARB(target, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="BufferDataARB(BufferTarget, nint, void*, BufferUsage)"/>
            public static unsafe void BufferDataARB<T1>(BufferTarget target, nint size, T1[] data, BufferUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    BufferDataARB(target, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="BufferDataARB(BufferTarget, nint, void*, BufferUsage)"/>
            public static unsafe void BufferDataARB<T1>(BufferTarget target, nint size, ref readonly T1 data, BufferUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    BufferDataARB(target, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorage(BufferStorageTarget target, nint size, IntPtr data, BufferStorageMask flags)
            {
                void* data_vptr = (void*)data;
                BufferStorage(target, size, data_vptr, flags);
            }
            /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorage<T1>(BufferStorageTarget target, nint size, ReadOnlySpan<T1> data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    BufferStorage(target, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorage<T1>(BufferStorageTarget target, nint size, T1[] data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    BufferStorage(target, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="BufferStorage(BufferStorageTarget, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorage<T1>(BufferStorageTarget target, nint size, ref readonly T1 data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    BufferStorage(target, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="BufferSubDataARB(BufferTarget, IntPtr, nint, void*)"/>
            public static unsafe void BufferSubDataARB(BufferTarget target, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                BufferSubDataARB(target, offset, size, data_vptr);
            }
            /// <inheritdoc cref="BufferSubDataARB(BufferTarget, IntPtr, nint, void*)"/>
            public static unsafe void BufferSubDataARB<T1>(BufferTarget target, IntPtr offset, nint size, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    BufferSubDataARB(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="BufferSubDataARB(BufferTarget, IntPtr, nint, void*)"/>
            public static unsafe void BufferSubDataARB<T1>(BufferTarget target, IntPtr offset, nint size, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    BufferSubDataARB(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="BufferSubDataARB(BufferTarget, IntPtr, nint, void*)"/>
            public static unsafe void BufferSubDataARB<T1>(BufferTarget target, IntPtr offset, nint size, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    BufferSubDataARB(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearBufferData(target, internalformat, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearBufferData(target, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearBufferData(target, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferData(BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferData<T1>(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearBufferData(target, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferSubData(BufferTarget, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferSubData(BufferTarget target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearBufferSubData(target, internalformat, offset, size, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearBufferSubData(BufferTarget, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferSubData<T1>(BufferTarget target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferSubData(BufferTarget, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferSubData<T1>(BufferTarget target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearBufferSubData(BufferTarget, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearBufferSubData<T1>(BufferTarget target, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearBufferSubData(target, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearNamedBufferData(buffer, internalformat, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferData(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferData<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearNamedBufferData(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubData(int, SizedInternalFormat, IntPtr, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubData<T1>(int buffer, SizedInternalFormat internalformat, IntPtr offset, nint size, PixelFormat format, PixelType type, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferfi(int, Buffer, int, float, int)"/>
            public static unsafe void ClearNamedFramebuffer(int framebuffer, Buffer buffer, int drawbuffer, float depth, int stencil)
            {
                ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
            }
            /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
            public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
            public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferfv(int, Buffer, int, float*)"/>
            public static unsafe void ClearNamedFramebufferf(int framebuffer, Buffer buffer, int drawbuffer, ref readonly float value)
            {
                fixed (float* value_ptr = &value)
                {
                    ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
            public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<int> value)
            {
                fixed (int* value_ptr = value)
                {
                    ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
            public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, int[] value)
            {
                fixed (int* value_ptr = value)
                {
                    ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferiv(int, Buffer, int, int*)"/>
            public static unsafe void ClearNamedFramebufferi(int framebuffer, Buffer buffer, int drawbuffer, ref readonly int value)
            {
                fixed (int* value_ptr = &value)
                {
                    ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
            public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, ReadOnlySpan<uint> value)
            {
                fixed (uint* value_ptr = value)
                {
                    ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
            public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, uint[] value)
            {
                fixed (uint* value_ptr = value)
                {
                    ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedFramebufferuiv(int, Buffer, int, uint*)"/>
            public static unsafe void ClearNamedFramebufferui(int framebuffer, Buffer buffer, int drawbuffer, ref readonly uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexImage(int texture, int level, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearTexImage(texture, level, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearTexImage(texture, level, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearTexImage(texture, level, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexImage(int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexImage<T1>(int texture, int level, PixelFormat format, PixelType type, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearTexImage(texture, level, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearTexSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearTexSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorP3uiv(ColorPointerType, uint*)"/>
            public static unsafe void ColorP3ui(ColorPointerType type, ref readonly uint color)
            {
                fixed (uint* color_ptr = &color)
                {
                    ColorP3uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="ColorP4uiv(ColorPointerType, uint*)"/>
            public static unsafe void ColorP4ui(ColorPointerType type, ref readonly uint color)
            {
                fixed (uint* color_ptr = &color)
                {
                    ColorP4uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ColorSubTable(target, start, count, format, type, data_vptr);
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ColorSubTable(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ColorSubTable(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTable(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTable<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ColorSubTable(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
            {
                void* table_vptr = (void*)table;
                ColorTable(target, internalformat, width, format, type, table_vptr);
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable<T1>(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTable(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable<T1>(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTable(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTable(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTable<T1>(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ref readonly T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    ColorTable(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void ColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, ref readonly Color4<Rgba> parameters)
            {
                fixed (Color4<Rgba>* tmp_parameters = &parameters)
                {
                    float* parameters_ptr = (float*)tmp_parameters;
                    ColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CompileShaderIncludeARB(int, int, byte**, int*)"/>
            public static unsafe void CompileShaderIncludeARB(int shader, int count, string[] path, ReadOnlySpan<int> length)
            {
                fixed (int* length_ptr = length)
                {
                    byte** path_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(path);
                    CompileShaderIncludeARB(shader, count, path_ptr, length_ptr);
                    MarshalTk.FreeStringArrayCoTaskMem((IntPtr)path_ptr, path.Length);
                }
            }
            /// <inheritdoc cref="CompileShaderIncludeARB(int, int, byte**, int*)"/>
            public static unsafe void CompileShaderIncludeARB(int shader, int count, string[] path, int[] length)
            {
                fixed (int* length_ptr = length)
                {
                    byte** path_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(path);
                    CompileShaderIncludeARB(shader, count, path_ptr, length_ptr);
                    MarshalTk.FreeStringArrayCoTaskMem((IntPtr)path_ptr, path.Length);
                }
            }
            /// <inheritdoc cref="CompileShaderIncludeARB(int, int, byte**, int*)"/>
            public static unsafe void CompileShaderIncludeARB(int shader, int count, string[] path, ref readonly int length)
            {
                fixed (int* length_ptr = &length)
                {
                    byte** path_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(path);
                    CompileShaderIncludeARB(shader, count, path_ptr, length_ptr);
                    MarshalTk.FreeStringArrayCoTaskMem((IntPtr)path_ptr, path.Length);
                }
            }
            /// <inheritdoc cref="CompressedTexImage1DARB(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage1DARB(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexImage1DARB(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage1DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage1DARB(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage1DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage1DARB(TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage1DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage2DARB(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage2DARB(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexImage2DARB(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage2DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage2DARB(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage2DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage2DARB(TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage2DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage3DARB(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage3DARB(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexImage3DARB(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage3DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage3DARB(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage3DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexImage3DARB(TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTexImage3DARB<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage1DARB(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage1DARB(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexSubImage1DARB(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage1DARB<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage1DARB(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage1DARB<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage1DARB(TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage1DARB<T1>(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage2DARB(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage2DARB(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexSubImage2DARB(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage2DARB<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage2DARB(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage2DARB<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage2DARB(TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage2DARB<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage3DARB(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage3DARB(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTexSubImage3DARB(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage3DARB<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage3DARB(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage3DARB<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTexSubImage3DARB(TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTexSubImage3DARB<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1D(int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1D<T1>(int texture, int level, int xoffset, int width, InternalFormat format, int imageSize, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2D(int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3D(int, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                ConvolutionFilter1D(target, internalformat, width, format, type, image_vptr);
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter1D(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter1D(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1D(ConvolutionTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ref readonly T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    ConvolutionFilter1D(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTarget, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                ConvolutionFilter2D(target, internalformat, width, height, format, type, image_vptr);
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTarget, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter2D(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTarget, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter2D(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2D(ConvolutionTarget, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2D<T1>(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ref readonly T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    ConvolutionFilter2D(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CreateBuffers(int, int*)"/>
            public static unsafe int CreateBuffer()
            {
                int buffer;
                int n = 1;
                Unsafe.SkipInit(out buffer);
                int* buffers_handle = &buffer;
                CreateBuffers(n, buffers_handle);
                return buffer;
            }
            /// <inheritdoc cref="CreateBuffers(int, int*)"/>
            public static unsafe void CreateBuffer(out int buffer)
            {
                int n = 1;
                Unsafe.SkipInit(out buffer);
                fixed(int* buffers_handle = &buffer)
                {
                    CreateBuffers(n, buffers_handle);
                }
            }
            /// <inheritdoc cref="CreateBuffers(int, int*)"/>
            public static unsafe void CreateBuffers(int n, Span<int> buffers)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    CreateBuffers(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateBuffers(int, int*)"/>
            public static unsafe void CreateBuffers(int n, int[] buffers)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    CreateBuffers(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateBuffers(int, int*)"/>
            public static unsafe void CreateBuffers(int n, ref int buffers)
            {
                fixed (int* buffers_ptr = &buffers)
                {
                    CreateBuffers(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
            public static unsafe int CreateFramebuffer()
            {
                int framebuffer;
                int n = 1;
                Unsafe.SkipInit(out framebuffer);
                int* framebuffers_handle = &framebuffer;
                CreateFramebuffers(n, framebuffers_handle);
                return framebuffer;
            }
            /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
            public static unsafe void CreateFramebuffer(out int framebuffer)
            {
                int n = 1;
                Unsafe.SkipInit(out framebuffer);
                fixed(int* framebuffers_handle = &framebuffer)
                {
                    CreateFramebuffers(n, framebuffers_handle);
                }
            }
            /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
            public static unsafe void CreateFramebuffers(int n, Span<int> framebuffers)
            {
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    CreateFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
            public static unsafe void CreateFramebuffers(int n, int[] framebuffers)
            {
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    CreateFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateFramebuffers(int, int*)"/>
            public static unsafe void CreateFramebuffers(int n, ref int framebuffers)
            {
                fixed (int* framebuffers_ptr = &framebuffers)
                {
                    CreateFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
            public static unsafe int CreateProgramPipeline()
            {
                int pipeline;
                int n = 1;
                Unsafe.SkipInit(out pipeline);
                int* pipelines_handle = &pipeline;
                CreateProgramPipelines(n, pipelines_handle);
                return pipeline;
            }
            /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
            public static unsafe void CreateProgramPipeline(out int pipeline)
            {
                int n = 1;
                Unsafe.SkipInit(out pipeline);
                fixed(int* pipelines_handle = &pipeline)
                {
                    CreateProgramPipelines(n, pipelines_handle);
                }
            }
            /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
            public static unsafe void CreateProgramPipelines(int n, Span<int> pipelines)
            {
                fixed (int* pipelines_ptr = pipelines)
                {
                    CreateProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
            public static unsafe void CreateProgramPipelines(int n, int[] pipelines)
            {
                fixed (int* pipelines_ptr = pipelines)
                {
                    CreateProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="CreateProgramPipelines(int, int*)"/>
            public static unsafe void CreateProgramPipelines(int n, ref int pipelines)
            {
                fixed (int* pipelines_ptr = &pipelines)
                {
                    CreateProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
            public static unsafe int CreateQuery(QueryTarget target)
            {
                int id;
                int n = 1;
                Unsafe.SkipInit(out id);
                int* ids_handle = &id;
                CreateQueries(target, n, ids_handle);
                return id;
            }
            /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
            public static unsafe void CreateQuery(QueryTarget target, out int id)
            {
                int n = 1;
                Unsafe.SkipInit(out id);
                fixed(int* ids_handle = &id)
                {
                    CreateQueries(target, n, ids_handle);
                }
            }
            /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
            public static unsafe void CreateQueries(QueryTarget target, int n, Span<int> ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    CreateQueries(target, n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
            public static unsafe void CreateQueries(QueryTarget target, int n, int[] ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    CreateQueries(target, n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateQueries(QueryTarget, int, int*)"/>
            public static unsafe void CreateQueries(QueryTarget target, int n, ref int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    CreateQueries(target, n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
            public static unsafe int CreateRenderbuffer()
            {
                int renderbuffer;
                int n = 1;
                Unsafe.SkipInit(out renderbuffer);
                int* renderbuffers_handle = &renderbuffer;
                CreateRenderbuffers(n, renderbuffers_handle);
                return renderbuffer;
            }
            /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
            public static unsafe void CreateRenderbuffer(out int renderbuffer)
            {
                int n = 1;
                Unsafe.SkipInit(out renderbuffer);
                fixed(int* renderbuffers_handle = &renderbuffer)
                {
                    CreateRenderbuffers(n, renderbuffers_handle);
                }
            }
            /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
            public static unsafe void CreateRenderbuffers(int n, Span<int> renderbuffers)
            {
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    CreateRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
            public static unsafe void CreateRenderbuffers(int n, int[] renderbuffers)
            {
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    CreateRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateRenderbuffers(int, int*)"/>
            public static unsafe void CreateRenderbuffers(int n, ref int renderbuffers)
            {
                fixed (int* renderbuffers_ptr = &renderbuffers)
                {
                    CreateRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="CreateSamplers(int, int*)"/>
            public static unsafe int CreateSampler()
            {
                int sampler;
                int n = 1;
                Unsafe.SkipInit(out sampler);
                int* samplers_handle = &sampler;
                CreateSamplers(n, samplers_handle);
                return sampler;
            }
            /// <inheritdoc cref="CreateSamplers(int, int*)"/>
            public static unsafe void CreateSampler(out int sampler)
            {
                int n = 1;
                Unsafe.SkipInit(out sampler);
                fixed(int* samplers_handle = &sampler)
                {
                    CreateSamplers(n, samplers_handle);
                }
            }
            /// <inheritdoc cref="CreateSamplers(int, int*)"/>
            public static unsafe void CreateSamplers(int n, Span<int> samplers)
            {
                fixed (int* samplers_ptr = samplers)
                {
                    CreateSamplers(n, samplers_ptr);
                }
            }
            /// <inheritdoc cref="CreateSamplers(int, int*)"/>
            public static unsafe void CreateSamplers(int n, int[] samplers)
            {
                fixed (int* samplers_ptr = samplers)
                {
                    CreateSamplers(n, samplers_ptr);
                }
            }
            /// <inheritdoc cref="CreateSamplers(int, int*)"/>
            public static unsafe void CreateSamplers(int n, ref int samplers)
            {
                fixed (int* samplers_ptr = &samplers)
                {
                    CreateSamplers(n, samplers_ptr);
                }
            }
            /// <inheritdoc cref="CreateShaderProgramv(ShaderType, int, byte**)"/>
            public static unsafe int CreateShaderProgram(ShaderType type, int count, string[] strings)
            {
                int returnValue;
                byte** strings_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(strings);
                returnValue = CreateShaderProgramv(type, count, strings_ptr);
                MarshalTk.FreeStringArrayCoTaskMem((IntPtr)strings_ptr, strings.Length);
                return returnValue;
            }
            /// <inheritdoc cref="CreateSyncFromCLeventARB(CLContext*, CLEvent*, uint)"/>
            public static unsafe GLSync CreateSyncFromCLeventARB(Span<CLContext> context, Span<CLEvent> @event, uint flags)
            {
                GLSync returnValue;
                fixed (CLEvent* @event_ptr = @event)
                {
                    fixed (CLContext* context_ptr = context)
                    {
                        returnValue = CreateSyncFromCLeventARB(context_ptr, @event_ptr, flags);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="CreateSyncFromCLeventARB(CLContext*, CLEvent*, uint)"/>
            public static unsafe GLSync CreateSyncFromCLeventARB(CLContext[] context, CLEvent[] @event, uint flags)
            {
                GLSync returnValue;
                fixed (CLEvent* @event_ptr = @event)
                {
                    fixed (CLContext* context_ptr = context)
                    {
                        returnValue = CreateSyncFromCLeventARB(context_ptr, @event_ptr, flags);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="CreateSyncFromCLeventARB(CLContext*, CLEvent*, uint)"/>
            public static unsafe GLSync CreateSyncFromCLeventARB(ref CLContext context, ref CLEvent @event, uint flags)
            {
                GLSync returnValue;
                fixed (CLContext* context_ptr = &context)
                fixed (CLEvent* @event_ptr = &@event)
                {
                    returnValue = CreateSyncFromCLeventARB(context_ptr, @event_ptr, flags);
                }
                return returnValue;
            }
            /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
            public static unsafe int CreateTexture(TextureTarget target)
            {
                int texture;
                int n = 1;
                Unsafe.SkipInit(out texture);
                int* textures_handle = &texture;
                CreateTextures(target, n, textures_handle);
                return texture;
            }
            /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
            public static unsafe void CreateTexture(TextureTarget target, out int texture)
            {
                int n = 1;
                Unsafe.SkipInit(out texture);
                fixed(int* textures_handle = &texture)
                {
                    CreateTextures(target, n, textures_handle);
                }
            }
            /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
            public static unsafe void CreateTextures(TextureTarget target, int n, Span<int> textures)
            {
                fixed (int* textures_ptr = textures)
                {
                    CreateTextures(target, n, textures_ptr);
                }
            }
            /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
            public static unsafe void CreateTextures(TextureTarget target, int n, int[] textures)
            {
                fixed (int* textures_ptr = textures)
                {
                    CreateTextures(target, n, textures_ptr);
                }
            }
            /// <inheritdoc cref="CreateTextures(TextureTarget, int, int*)"/>
            public static unsafe void CreateTextures(TextureTarget target, int n, ref int textures)
            {
                fixed (int* textures_ptr = &textures)
                {
                    CreateTextures(target, n, textures_ptr);
                }
            }
            /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
            public static unsafe int CreateTransformFeedback()
            {
                int id;
                int n = 1;
                Unsafe.SkipInit(out id);
                int* ids_handle = &id;
                CreateTransformFeedbacks(n, ids_handle);
                return id;
            }
            /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
            public static unsafe void CreateTransformFeedback(out int id)
            {
                int n = 1;
                Unsafe.SkipInit(out id);
                fixed(int* ids_handle = &id)
                {
                    CreateTransformFeedbacks(n, ids_handle);
                }
            }
            /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
            public static unsafe void CreateTransformFeedbacks(int n, Span<int> ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    CreateTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
            public static unsafe void CreateTransformFeedbacks(int n, int[] ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    CreateTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateTransformFeedbacks(int, int*)"/>
            public static unsafe void CreateTransformFeedbacks(int n, ref int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    CreateTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
            public static unsafe int CreateVertexArray()
            {
                int array;
                int n = 1;
                Unsafe.SkipInit(out array);
                int* arrays_handle = &array;
                CreateVertexArrays(n, arrays_handle);
                return array;
            }
            /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
            public static unsafe void CreateVertexArray(out int array)
            {
                int n = 1;
                Unsafe.SkipInit(out array);
                fixed(int* arrays_handle = &array)
                {
                    CreateVertexArrays(n, arrays_handle);
                }
            }
            /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
            public static unsafe void CreateVertexArrays(int n, Span<int> arrays)
            {
                fixed (int* arrays_ptr = arrays)
                {
                    CreateVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
            public static unsafe void CreateVertexArrays(int n, int[] arrays)
            {
                fixed (int* arrays_ptr = arrays)
                {
                    CreateVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="CreateVertexArrays(int, int*)"/>
            public static unsafe void CreateVertexArrays(int n, ref int arrays)
            {
                fixed (int* arrays_ptr = &arrays)
                {
                    CreateVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallbackARB(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackARB(GLDebugProcARB callback, IntPtr userParam)
            {
                void* userParam_vptr = (void*)userParam;
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallbackARB(callback_ptr, userParam_vptr);
            }
            /// <inheritdoc cref="DebugMessageCallbackARB(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackARB<T1>(GLDebugProcARB callback, ReadOnlySpan<T1> userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallbackARB(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallbackARB(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackARB<T1>(GLDebugProcARB callback, T1[] userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallbackARB(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallbackARB(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackARB<T1>(GLDebugProcARB callback, ref readonly T1 userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = &userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallbackARB(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageControlARB(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControlARB(DebugSource source, DebugType type, DebugSeverity severity, int count, ReadOnlySpan<uint> ids, bool enabled)
            {
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageControlARB(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControlARB(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControlARB(DebugSource source, DebugType type, DebugSeverity severity, int count, uint[] ids, bool enabled)
            {
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageControlARB(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControlARB(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControlARB(DebugSource source, DebugType type, DebugSeverity severity, int count, ref readonly uint ids, bool enabled)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    DebugMessageControlARB(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageInsertARB(DebugSource, DebugType, uint, DebugSeverity, int, byte*)"/>
            public static unsafe void DebugMessageInsertARB(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
            {
                byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
                DebugMessageInsertARB(source, type, id, severity, length, buf_ptr);
                Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
            }
            /// <inheritdoc cref="DeleteBuffersARB(int, int*)"/>
            public static unsafe void DeleteBuffersARB(int n, ReadOnlySpan<int> buffers)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    DeleteBuffersARB(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteBuffersARB(int, int*)"/>
            public static unsafe void DeleteBuffersARB(int n, int[] buffers)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    DeleteBuffersARB(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteBuffersARB(int, int*)"/>
            public static unsafe void DeleteBuffersARB(int n, ref readonly int buffers)
            {
                fixed (int* buffers_ptr = &buffers)
                {
                    DeleteBuffersARB(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
            public static unsafe void DeleteFramebuffer(int framebuffer)
            {
                int n = 1;
                int* framebuffers_handle = &framebuffer;
                DeleteFramebuffers(n, framebuffers_handle);
            }
            /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
            public static unsafe void DeleteFramebuffers(int n, ReadOnlySpan<int> framebuffers)
            {
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    DeleteFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
            public static unsafe void DeleteFramebuffers(int n, int[] framebuffers)
            {
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    DeleteFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffers(int, int*)"/>
            public static unsafe void DeleteFramebuffers(int n, ref readonly int framebuffers)
            {
                fixed (int* framebuffers_ptr = &framebuffers)
                {
                    DeleteFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteNamedStringARB(int, byte*)"/>
            public static unsafe void DeleteNamedStringARB(int namelen, string name)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                DeleteNamedStringARB(namelen, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
            public static unsafe void DeleteProgramPipeline(int pipeline)
            {
                int n = 1;
                int* pipelines_handle = &pipeline;
                DeleteProgramPipelines(n, pipelines_handle);
            }
            /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
            public static unsafe void DeleteProgramPipelines(int n, ReadOnlySpan<int> pipelines)
            {
                fixed (int* pipelines_ptr = pipelines)
                {
                    DeleteProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
            public static unsafe void DeleteProgramPipelines(int n, int[] pipelines)
            {
                fixed (int* pipelines_ptr = pipelines)
                {
                    DeleteProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelines(int, int*)"/>
            public static unsafe void DeleteProgramPipelines(int n, ref readonly int pipelines)
            {
                fixed (int* pipelines_ptr = &pipelines)
                {
                    DeleteProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramsARB(int, int*)"/>
            public static unsafe void DeleteProgramsARB(int n, ReadOnlySpan<int> programs)
            {
                fixed (int* programs_ptr = programs)
                {
                    DeleteProgramsARB(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramsARB(int, int*)"/>
            public static unsafe void DeleteProgramsARB(int n, int[] programs)
            {
                fixed (int* programs_ptr = programs)
                {
                    DeleteProgramsARB(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramsARB(int, int*)"/>
            public static unsafe void DeleteProgramsARB(int n, ref readonly int programs)
            {
                fixed (int* programs_ptr = &programs)
                {
                    DeleteProgramsARB(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueriesARB(int, int*)"/>
            public static unsafe void DeleteQueriesARB(int n, ReadOnlySpan<int> ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    DeleteQueriesARB(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueriesARB(int, int*)"/>
            public static unsafe void DeleteQueriesARB(int n, int[] ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    DeleteQueriesARB(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueriesARB(int, int*)"/>
            public static unsafe void DeleteQueriesARB(int n, ref readonly int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    DeleteQueriesARB(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
            public static unsafe void DeleteRenderbuffer(int renderbuffer)
            {
                int n = 1;
                int* renderbuffers_handle = &renderbuffer;
                DeleteRenderbuffers(n, renderbuffers_handle);
            }
            /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
            public static unsafe void DeleteRenderbuffers(int n, ReadOnlySpan<int> renderbuffers)
            {
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    DeleteRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
            public static unsafe void DeleteRenderbuffers(int n, int[] renderbuffers)
            {
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    DeleteRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffers(int, int*)"/>
            public static unsafe void DeleteRenderbuffers(int n, ref readonly int renderbuffers)
            {
                fixed (int* renderbuffers_ptr = &renderbuffers)
                {
                    DeleteRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
            public static unsafe void DeleteSampler(int sampler)
            {
                int count = 1;
                int* samplers_handle = &sampler;
                DeleteSamplers(count, samplers_handle);
            }
            /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
            public static unsafe void DeleteSamplers(int count, ReadOnlySpan<int> samplers)
            {
                fixed (int* samplers_ptr = samplers)
                {
                    DeleteSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
            public static unsafe void DeleteSamplers(int count, int[] samplers)
            {
                fixed (int* samplers_ptr = samplers)
                {
                    DeleteSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSamplers(int, int*)"/>
            public static unsafe void DeleteSamplers(int count, ref readonly int samplers)
            {
                fixed (int* samplers_ptr = &samplers)
                {
                    DeleteSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
            public static unsafe void DeleteTransformFeedback(int id)
            {
                int n = 1;
                int* ids_handle = &id;
                DeleteTransformFeedbacks(n, ids_handle);
            }
            /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacks(int n, ReadOnlySpan<int> ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    DeleteTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacks(int n, int[] ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    DeleteTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacks(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacks(int n, ref readonly int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    DeleteTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
            public static unsafe void DeleteVertexArray(int array)
            {
                int n = 1;
                int* arrays_handle = &array;
                DeleteVertexArrays(n, arrays_handle);
            }
            /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
            public static unsafe void DeleteVertexArrays(int n, ReadOnlySpan<int> arrays)
            {
                fixed (int* arrays_ptr = arrays)
                {
                    DeleteVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
            public static unsafe void DeleteVertexArrays(int n, int[] arrays)
            {
                fixed (int* arrays_ptr = arrays)
                {
                    DeleteVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DeleteVertexArrays(int, int*)"/>
            public static unsafe void DeleteVertexArrays(int n, ref readonly int arrays)
            {
                fixed (int* arrays_ptr = &arrays)
                {
                    DeleteVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="DepthRangeArraydvNV(uint, int, double*)"/>
            public static unsafe void DepthRangeArraydvNV(uint first, int count, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    DepthRangeArraydvNV(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="DepthRangeArraydvNV(uint, int, double*)"/>
            public static unsafe void DepthRangeArraydvNV(uint first, int count, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    DepthRangeArraydvNV(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="DepthRangeArraydvNV(uint, int, double*)"/>
            public static unsafe void DepthRangeArraydvNV(uint first, int count, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    DepthRangeArraydvNV(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
            public static unsafe void DepthRangeArray(uint first, int count, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    DepthRangeArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
            public static unsafe void DepthRangeArray(uint first, int count, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    DepthRangeArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="DepthRangeArrayv(uint, int, double*)"/>
            public static unsafe void DepthRangeArray(uint first, int count, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    DepthRangeArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
            public static unsafe void DrawArraysIndirect(PrimitiveType mode, IntPtr indirect)
            {
                void* indirect_vptr = (void*)indirect;
                DrawArraysIndirect(mode, indirect_vptr);
            }
            /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
            public static unsafe void DrawArraysIndirect<T1>(PrimitiveType mode, ReadOnlySpan<T1> indirect)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    DrawArraysIndirect(mode, indirect_ptr);
                }
            }
            /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
            public static unsafe void DrawArraysIndirect<T1>(PrimitiveType mode, T1[] indirect)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    DrawArraysIndirect(mode, indirect_ptr);
                }
            }
            /// <inheritdoc cref="DrawArraysIndirect(PrimitiveType, void*)"/>
            public static unsafe void DrawArraysIndirect<T1>(PrimitiveType mode, ref readonly T1 indirect)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    DrawArraysIndirect(mode, indirect_ptr);
                }
            }
            /// <inheritdoc cref="DrawBuffersARB(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffersARB(int n, ReadOnlySpan<DrawBufferMode> bufs)
            {
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    DrawBuffersARB(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="DrawBuffersARB(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffersARB(int n, DrawBufferMode[] bufs)
            {
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    DrawBuffersARB(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="DrawBuffersARB(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffersARB(int n, ref readonly DrawBufferMode bufs)
            {
                fixed (DrawBufferMode* bufs_ptr = &bufs)
                {
                    DrawBuffersARB(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="DrawElementsBaseVertex(PrimitiveType, int, DrawElementsType, void*, int)"/>
            public static unsafe void DrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint offset, int basevertex)
            {
                void* indices = (void*)offset;
                DrawElementsBaseVertex(mode, count, type, indices, basevertex);
            }
            /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
            public static unsafe void DrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect)
            {
                void* indirect_vptr = (void*)indirect;
                DrawElementsIndirect(mode, type, indirect_vptr);
            }
            /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
            public static unsafe void DrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    DrawElementsIndirect(mode, type, indirect_ptr);
                }
            }
            /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
            public static unsafe void DrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, T1[] indirect)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    DrawElementsIndirect(mode, type, indirect_ptr);
                }
            }
            /// <inheritdoc cref="DrawElementsIndirect(PrimitiveType, DrawElementsType, void*)"/>
            public static unsafe void DrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, ref readonly T1 indirect)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    DrawElementsIndirect(mode, type, indirect_ptr);
                }
            }
            /// <inheritdoc cref="DrawElementsInstancedARB(PrimitiveType, int, DrawElementsType, void*, int)"/>
            public static unsafe void DrawElementsInstancedARB(PrimitiveType mode, int count, DrawElementsType type, nint offset, int primcount)
            {
                void* indices = (void*)offset;
                DrawElementsInstancedARB(mode, count, type, indices, primcount);
            }
            /// <inheritdoc cref="DrawElementsInstancedBaseInstance(PrimitiveType, int, DrawElementsType, void*, int, uint)"/>
            public static unsafe void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, uint baseinstance)
            {
                void* indices = (void*)offset;
                DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
            }
            /// <inheritdoc cref="DrawElementsInstancedBaseVertex(PrimitiveType, int, DrawElementsType, void*, int, int)"/>
            public static unsafe void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, int basevertex)
            {
                void* indices = (void*)offset;
                DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
            }
            /// <inheritdoc cref="DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType, int, DrawElementsType, void*, int, int, uint)"/>
            public static unsafe void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint offset, int instancecount, int basevertex, uint baseinstance)
            {
                void* indices = (void*)offset;
                DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
            }
            /// <inheritdoc cref="DrawRangeElementsBaseVertex(PrimitiveType, uint, uint, int, DrawElementsType, void*, int)"/>
            public static unsafe void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint offset, int basevertex)
            {
                void* indices = (void*)offset;
                DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
            }
            /// <inheritdoc cref="FramebufferSampleLocationsfvARB(FramebufferTarget, uint, int, float*)"/>
            public static unsafe void FramebufferSampleLocationsfvARB(FramebufferTarget target, uint start, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    FramebufferSampleLocationsfvARB(target, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferSampleLocationsfvARB(FramebufferTarget, uint, int, float*)"/>
            public static unsafe void FramebufferSampleLocationsfvARB(FramebufferTarget target, uint start, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    FramebufferSampleLocationsfvARB(target, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferSampleLocationsfvARB(FramebufferTarget, uint, int, float*)"/>
            public static unsafe void FramebufferSampleLocationsfvARB(FramebufferTarget target, uint start, int count, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    FramebufferSampleLocationsfvARB(target, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="GenBuffersARB(int, int*)"/>
            public static unsafe void GenBuffersARB(int n, Span<int> buffers)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    GenBuffersARB(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="GenBuffersARB(int, int*)"/>
            public static unsafe void GenBuffersARB(int n, int[] buffers)
            {
                fixed (int* buffers_ptr = buffers)
                {
                    GenBuffersARB(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="GenBuffersARB(int, int*)"/>
            public static unsafe void GenBuffersARB(int n, ref int buffers)
            {
                fixed (int* buffers_ptr = &buffers)
                {
                    GenBuffersARB(n, buffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe int GenFramebuffer()
            {
                int framebuffer;
                int n = 1;
                Unsafe.SkipInit(out framebuffer);
                int* framebuffers_handle = &framebuffer;
                GenFramebuffers(n, framebuffers_handle);
                return framebuffer;
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe void GenFramebuffer(out int framebuffer)
            {
                int n = 1;
                Unsafe.SkipInit(out framebuffer);
                fixed(int* framebuffers_handle = &framebuffer)
                {
                    GenFramebuffers(n, framebuffers_handle);
                }
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe void GenFramebuffers(int n, Span<int> framebuffers)
            {
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    GenFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe void GenFramebuffers(int n, int[] framebuffers)
            {
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    GenFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffers(int, int*)"/>
            public static unsafe void GenFramebuffers(int n, ref int framebuffers)
            {
                fixed (int* framebuffers_ptr = &framebuffers)
                {
                    GenFramebuffers(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe int GenProgramPipeline()
            {
                int pipeline;
                int n = 1;
                Unsafe.SkipInit(out pipeline);
                int* pipelines_handle = &pipeline;
                GenProgramPipelines(n, pipelines_handle);
                return pipeline;
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe void GenProgramPipeline(out int pipeline)
            {
                int n = 1;
                Unsafe.SkipInit(out pipeline);
                fixed(int* pipelines_handle = &pipeline)
                {
                    GenProgramPipelines(n, pipelines_handle);
                }
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe void GenProgramPipelines(int n, Span<int> pipelines)
            {
                fixed (int* pipelines_ptr = pipelines)
                {
                    GenProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe void GenProgramPipelines(int n, int[] pipelines)
            {
                fixed (int* pipelines_ptr = pipelines)
                {
                    GenProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelines(int, int*)"/>
            public static unsafe void GenProgramPipelines(int n, ref int pipelines)
            {
                fixed (int* pipelines_ptr = &pipelines)
                {
                    GenProgramPipelines(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramsARB(int, int*)"/>
            public static unsafe void GenProgramsARB(int n, Span<int> programs)
            {
                fixed (int* programs_ptr = programs)
                {
                    GenProgramsARB(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramsARB(int, int*)"/>
            public static unsafe void GenProgramsARB(int n, int[] programs)
            {
                fixed (int* programs_ptr = programs)
                {
                    GenProgramsARB(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramsARB(int, int*)"/>
            public static unsafe void GenProgramsARB(int n, ref int programs)
            {
                fixed (int* programs_ptr = &programs)
                {
                    GenProgramsARB(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenQueriesARB(int, int*)"/>
            public static unsafe void GenQueriesARB(int n, Span<int> ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    GenQueriesARB(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenQueriesARB(int, int*)"/>
            public static unsafe void GenQueriesARB(int n, int[] ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    GenQueriesARB(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenQueriesARB(int, int*)"/>
            public static unsafe void GenQueriesARB(int n, ref int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    GenQueriesARB(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe int GenRenderbuffer()
            {
                int renderbuffer;
                int n = 1;
                Unsafe.SkipInit(out renderbuffer);
                int* renderbuffers_handle = &renderbuffer;
                GenRenderbuffers(n, renderbuffers_handle);
                return renderbuffer;
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe void GenRenderbuffer(out int renderbuffer)
            {
                int n = 1;
                Unsafe.SkipInit(out renderbuffer);
                fixed(int* renderbuffers_handle = &renderbuffer)
                {
                    GenRenderbuffers(n, renderbuffers_handle);
                }
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe void GenRenderbuffers(int n, Span<int> renderbuffers)
            {
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    GenRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe void GenRenderbuffers(int n, int[] renderbuffers)
            {
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    GenRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffers(int, int*)"/>
            public static unsafe void GenRenderbuffers(int n, ref int renderbuffers)
            {
                fixed (int* renderbuffers_ptr = &renderbuffers)
                {
                    GenRenderbuffers(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenSamplers(int, int*)"/>
            public static unsafe int GenSampler()
            {
                int sampler;
                int count = 1;
                Unsafe.SkipInit(out sampler);
                int* samplers_handle = &sampler;
                GenSamplers(count, samplers_handle);
                return sampler;
            }
            /// <inheritdoc cref="GenSamplers(int, int*)"/>
            public static unsafe void GenSampler(out int sampler)
            {
                int count = 1;
                Unsafe.SkipInit(out sampler);
                fixed(int* samplers_handle = &sampler)
                {
                    GenSamplers(count, samplers_handle);
                }
            }
            /// <inheritdoc cref="GenSamplers(int, int*)"/>
            public static unsafe void GenSamplers(int count, Span<int> samplers)
            {
                fixed (int* samplers_ptr = samplers)
                {
                    GenSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="GenSamplers(int, int*)"/>
            public static unsafe void GenSamplers(int count, int[] samplers)
            {
                fixed (int* samplers_ptr = samplers)
                {
                    GenSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="GenSamplers(int, int*)"/>
            public static unsafe void GenSamplers(int count, ref int samplers)
            {
                fixed (int* samplers_ptr = &samplers)
                {
                    GenSamplers(count, samplers_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe int GenTransformFeedback()
            {
                int id;
                int n = 1;
                Unsafe.SkipInit(out id);
                int* ids_handle = &id;
                GenTransformFeedbacks(n, ids_handle);
                return id;
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe void GenTransformFeedback(out int id)
            {
                int n = 1;
                Unsafe.SkipInit(out id);
                fixed(int* ids_handle = &id)
                {
                    GenTransformFeedbacks(n, ids_handle);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe void GenTransformFeedbacks(int n, Span<int> ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    GenTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe void GenTransformFeedbacks(int n, int[] ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    GenTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacks(int, int*)"/>
            public static unsafe void GenTransformFeedbacks(int n, ref int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    GenTransformFeedbacks(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe int GenVertexArray()
            {
                int array;
                int n = 1;
                Unsafe.SkipInit(out array);
                int* arrays_handle = &array;
                GenVertexArrays(n, arrays_handle);
                return array;
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe void GenVertexArray(out int array)
            {
                int n = 1;
                Unsafe.SkipInit(out array);
                fixed(int* arrays_handle = &array)
                {
                    GenVertexArrays(n, arrays_handle);
                }
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe void GenVertexArrays(int n, Span<int> arrays)
            {
                fixed (int* arrays_ptr = arrays)
                {
                    GenVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe void GenVertexArrays(int n, int[] arrays)
            {
                fixed (int* arrays_ptr = arrays)
                {
                    GenVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GenVertexArrays(int, int*)"/>
            public static unsafe void GenVertexArrays(int n, ref int arrays)
            {
                fixed (int* arrays_ptr = &arrays)
                {
                    GenVertexArrays(n, arrays_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
            public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
            public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
            public static unsafe int GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetActiveAtomicCounterBufferiv(int, uint, AtomicCounterBufferPName, int*)"/>
            public static unsafe void GetActiveAtomicCounterBufferi(int program, uint bufferIndex, AtomicCounterBufferPName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveAttribARB(GLHandleARB, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe string GetActiveAttribARB(GLHandleARB programObj, uint index, int maxLength, out int length, out int size, out AttributeType type)
            {
                string name;
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (AttributeType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveAttribARB(GLHandleARB, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe void GetActiveAttribARB(GLHandleARB programObj, uint index, int maxLength, out int length, out int size, out AttributeType type, out string name)
            {
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (AttributeType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, out int length)
            {
                string name;
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveSubroutineName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, uint index, int bufSize, out int length, out string name)
            {
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
            public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, Span<int> values)
            {
                fixed (int* values_ptr = values)
                {
                    GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
            public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, int[] values)
            {
                fixed (int* values_ptr = values)
                {
                    GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
            public static unsafe int GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname)
            {
                int values;
                int* values_ptr = &values;
                {
                    GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
                }
                return values;
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformiv(int, ShaderType, uint, SubroutineParameterName, int*)"/>
            public static unsafe void GetActiveSubroutineUniformi(int program, ShaderType shadertype, uint index, SubroutineParameterName pname, out int values)
            {
                fixed (int* values_ptr = &values)
                {
                    GetActiveSubroutineUniformiv(program, shadertype, index, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, out int length)
            {
                string name;
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveSubroutineUniformName(int, ShaderType, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, uint index, int bufSize, out int length, out string name)
            {
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformARB(GLHandleARB, uint, int, int*, int*, UniformType*, byte*)"/>
            public static unsafe string GetActiveUniformARB(GLHandleARB programObj, uint index, int maxLength, out int length, out int size, out UniformType type)
            {
                string name;
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (UniformType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveUniformARB(GLHandleARB, uint, int, int*, int*, UniformType*, byte*)"/>
            public static unsafe void GetActiveUniformARB(GLHandleARB programObj, uint index, int maxLength, out int length, out int size, out UniformType type, out string name)
            {
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (UniformType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
            public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
            public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
            public static unsafe int GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetActiveUniformBlockiv(int, uint, UniformBlockPName, int*)"/>
            public static unsafe void GetActiveUniformBlocki(int program, uint uniformBlockIndex, UniformBlockPName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetActiveUniformBlockiv(program, uniformBlockIndex, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, out int length)
            {
                string uniformBlockName;
                fixed (int* length_ptr = &length)
                {
                    var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                    uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                }
                return uniformBlockName;
            }
            /// <inheritdoc cref="GetActiveUniformBlockName(int, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveUniformBlockName(int program, uint uniformBlockIndex, int bufSize, out int length, out string uniformBlockName)
            {
                fixed (int* length_ptr = &length)
                {
                    var uniformBlockName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length_ptr, uniformBlockName_ptr);
                    uniformBlockName = Marshal.PtrToStringUTF8((IntPtr)uniformBlockName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
            public static unsafe string GetActiveUniformName(int program, uint uniformIndex, int bufSize, out int length)
            {
                string uniformName;
                fixed (int* length_ptr = &length)
                {
                    var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                    uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
                }
                return uniformName;
            }
            /// <inheritdoc cref="GetActiveUniformName(int, uint, int, int*, byte*)"/>
            public static unsafe void GetActiveUniformName(int program, uint uniformIndex, int bufSize, out int length, out string uniformName)
            {
                fixed (int* length_ptr = &length)
                {
                    var uniformName_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveUniformName(program, uniformIndex, bufSize, length_ptr, uniformName_ptr);
                    uniformName = Marshal.PtrToStringUTF8((IntPtr)uniformName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)uniformName_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
            public static unsafe void GetActiveUniformsi(int program, int uniformCount, ReadOnlySpan<uint> uniformIndices, UniformPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    fixed (uint* uniformIndices_ptr = uniformIndices)
                    {
                        GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
            public static unsafe void GetActiveUniformsi(int program, int uniformCount, uint[] uniformIndices, UniformPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    fixed (uint* uniformIndices_ptr = uniformIndices)
                    {
                        GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
            public static unsafe int GetActiveUniformsi(int program, int uniformCount, ref readonly uint uniformIndices, UniformPName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                fixed (uint* uniformIndices_ptr = &uniformIndices)
                {
                    GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetActiveUniformsiv(int, int, uint*, UniformPName, int*)"/>
            public static unsafe void GetActiveUniformsi(int program, int uniformCount, ref readonly uint uniformIndices, UniformPName pname, out int parameters)
            {
                fixed (uint* uniformIndices_ptr = &uniformIndices)
                fixed (int* parameters_ptr = &parameters)
                {
                    GetActiveUniformsiv(program, uniformCount, uniformIndices_ptr, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetAttachedObjectsARB(GLHandleARB, int, int*, GLHandleARB*)"/>
            public static unsafe void GetAttachedObjectsARB(GLHandleARB containerObj, int maxCount, out int count, Span<GLHandleARB> obj)
            {
                fixed (int* count_ptr = &count)
                {
                    fixed (GLHandleARB* obj_ptr = obj)
                    {
                        GetAttachedObjectsARB(containerObj, maxCount, count_ptr, obj_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetAttachedObjectsARB(GLHandleARB, int, int*, GLHandleARB*)"/>
            public static unsafe void GetAttachedObjectsARB(GLHandleARB containerObj, int maxCount, out int count, GLHandleARB[] obj)
            {
                fixed (int* count_ptr = &count)
                {
                    fixed (GLHandleARB* obj_ptr = obj)
                    {
                        GetAttachedObjectsARB(containerObj, maxCount, count_ptr, obj_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetAttachedObjectsARB(GLHandleARB, int, int*, GLHandleARB*)"/>
            public static unsafe void GetAttachedObjectsARB(GLHandleARB containerObj, int maxCount, out int count, ref GLHandleARB obj)
            {
                fixed (int* count_ptr = &count)
                fixed (GLHandleARB* obj_ptr = &obj)
                {
                    GetAttachedObjectsARB(containerObj, maxCount, count_ptr, obj_ptr);
                }
            }
            /// <inheritdoc cref="GetAttribLocationARB(GLHandleARB, byte*)"/>
            public static unsafe int GetAttribLocationARB(GLHandleARB programObj, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetAttribLocationARB(programObj, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetBufferParameterivARB(BufferTarget, BufferPName, int*)"/>
            public static unsafe void GetBufferParameterivARB(BufferTarget target, BufferPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetBufferParameterivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameterivARB(BufferTarget, BufferPName, int*)"/>
            public static unsafe void GetBufferParameterivARB(BufferTarget target, BufferPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetBufferParameterivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameterivARB(BufferTarget, BufferPName, int*)"/>
            public static unsafe int GetBufferParameterivARB(BufferTarget target, BufferPName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetBufferParameterivARB(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetBufferParameterivARB(BufferTarget, BufferPName, int*)"/>
            public static unsafe void GetBufferParameterivARB(BufferTarget target, BufferPName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetBufferParameterivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferSubDataARB(BufferTarget, IntPtr, nint, void*)"/>
            public static unsafe void GetBufferSubDataARB(BufferTarget target, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                GetBufferSubDataARB(target, offset, size, data_vptr);
            }
            /// <inheritdoc cref="GetBufferSubDataARB(BufferTarget, IntPtr, nint, void*)"/>
            public static unsafe void GetBufferSubDataARB<T1>(BufferTarget target, IntPtr offset, nint size, Span<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetBufferSubDataARB(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferSubDataARB(BufferTarget, IntPtr, nint, void*)"/>
            public static unsafe void GetBufferSubDataARB<T1>(BufferTarget target, IntPtr offset, nint size, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetBufferSubDataARB(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferSubDataARB(BufferTarget, IntPtr, nint, void*)"/>
            public static unsafe void GetBufferSubDataARB<T1>(BufferTarget target, IntPtr offset, nint size, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    GetBufferSubDataARB(target, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, IntPtr table)
            {
                void* table_vptr = (void*)table;
                GetColorTable(target, format, type, table_vptr);
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, Span<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    GetColorTable(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    GetColorTable(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe T1 GetColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type)
                where T1 : unmanaged
            {
                T1 table;
                void* table_ptr = &table;
                {
                    GetColorTable(target, format, type, table_ptr);
                }
                return table;
            }
            /// <inheritdoc cref="GetColorTable(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTable<T1>(ColorTableTarget target, PixelFormat format, PixelType type, out T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    GetColorTable(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe float GetColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetColorTableParameterfv(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterf(ColorTableTarget target, ColorTableParameterPName pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetColorTableParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe int GetColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetColorTableParameteriv(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameteri(ColorTableTarget target, ColorTableParameterPName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetColorTableParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTexImageARB(TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTexImageARB(TextureTarget target, int level, IntPtr img)
            {
                void* img_vptr = (void*)img;
                GetCompressedTexImageARB(target, level, img_vptr);
            }
            /// <inheritdoc cref="GetCompressedTexImageARB(TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTexImageARB<T1>(TextureTarget target, int level, Span<T1> img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedTexImageARB(target, level, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTexImageARB(TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTexImageARB<T1>(TextureTarget target, int level, T1[] img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedTexImageARB(target, level, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTexImageARB(TextureTarget, int, void*)"/>
            public static unsafe T1 GetCompressedTexImageARB<T1>(TextureTarget target, int level)
                where T1 : unmanaged
            {
                T1 img;
                void* img_ptr = &img;
                {
                    GetCompressedTexImageARB(target, level, img_ptr);
                }
                return img;
            }
            /// <inheritdoc cref="GetCompressedTexImageARB(TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTexImageARB<T1>(TextureTarget target, int level, out T1 img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = &img)
                {
                    GetCompressedTexImageARB(target, level, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureImage(int texture, int level, int bufSize, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetCompressedTextureImage(texture, level, bufSize, pixels_vptr);
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, int bufSize, Span<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, int bufSize, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImage(int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureImage<T1>(int texture, int level, int bufSize, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetCompressedTextureImage(texture, level, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_vptr);
            }
            /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, Span<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureSubImage(int, int, int, int, int, int, int, int, int, void*)"/>
            public static unsafe void GetCompressedTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                GetConvolutionFilter(target, format, type, image_vptr);
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, Span<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    GetConvolutionFilter(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    GetConvolutionFilter(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe T1 GetConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type)
                where T1 : unmanaged
            {
                T1 image;
                void* image_ptr = &image;
                {
                    GetConvolutionFilter(target, format, type, image_ptr);
                }
                return image;
            }
            /// <inheritdoc cref="GetConvolutionFilter(ConvolutionTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilter<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, out T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    GetConvolutionFilter(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe float GetConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetConvolutionParameterfv(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetConvolutionParameterfv(ConvolutionTarget, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetConvolutionParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe int GetConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetConvolutionParameteriv(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetConvolutionParameteriv(ConvolutionTarget, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetConvolutionParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetDebugMessageLogARB(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogARB(uint count, int bufSize, Span<DebugSource> sources, Span<DebugType> types, Span<uint> ids, Span<DebugSeverity> severities, Span<int> lengths, out string messageLog)
            {
                uint returnValue;
                fixed (int* lengths_ptr = lengths)
                {
                    fixed (DebugSeverity* severities_ptr = severities)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugType* types_ptr = types)
                            {
                                fixed (DebugSource* sources_ptr = sources)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLogARB(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogARB(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogARB(uint count, int bufSize, DebugSource[] sources, DebugType[] types, uint[] ids, DebugSeverity[] severities, int[] lengths, out string messageLog)
            {
                uint returnValue;
                fixed (int* lengths_ptr = lengths)
                {
                    fixed (DebugSeverity* severities_ptr = severities)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugType* types_ptr = types)
                            {
                                fixed (DebugSource* sources_ptr = sources)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLogARB(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogARB(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogARB(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = &sources)
                fixed (DebugType* types_ptr = &types)
                fixed (uint* ids_ptr = &ids)
                fixed (DebugSeverity* severities_ptr = &severities)
                fixed (int* lengths_ptr = &lengths)
                {
                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    returnValue = GetDebugMessageLogARB(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
            public static unsafe void GetDouble(GetPName target, uint index, Span<double> data)
            {
                fixed (double* data_ptr = data)
                {
                    GetDoublei_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
            public static unsafe void GetDouble(GetPName target, uint index, double[] data)
            {
                fixed (double* data_ptr = data)
                {
                    GetDoublei_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
            public static unsafe double GetDouble(GetPName target, uint index)
            {
                double data;
                double* data_ptr = &data;
                {
                    GetDoublei_v(target, index, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetDoublei_v(GetPName, uint, double*)"/>
            public static unsafe void GetDouble(GetPName target, uint index, out double data)
            {
                fixed (double* data_ptr = &data)
                {
                    GetDoublei_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
            public static unsafe void GetFloat(GetPName target, uint index, Span<float> data)
            {
                fixed (float* data_ptr = data)
                {
                    GetFloati_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
            public static unsafe void GetFloat(GetPName target, uint index, float[] data)
            {
                fixed (float* data_ptr = data)
                {
                    GetFloati_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
            public static unsafe float GetFloat(GetPName target, uint index)
            {
                float data;
                float* data_ptr = &data;
                {
                    GetFloati_v(target, index, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetFloati_v(GetPName, uint, float*)"/>
            public static unsafe void GetFloat(GetPName target, uint index, out float data)
            {
                fixed (float* data_ptr = &data)
                {
                    GetFloati_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFragDataIndex(int, byte*)"/>
            public static unsafe int GetFragDataIndex(int program, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetFragDataIndex(program, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe int GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameteriv(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameteri(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFramebufferAttachmentParameteriv(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe int GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetFramebufferParameteriv(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetFramebufferParameteriv(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameteri(FramebufferTarget target, FramebufferAttachmentParameterName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFramebufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetHistogram(target, reset, format, type, values_vptr);
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetHistogram(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetHistogram(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe T1 GetHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type)
                where T1 : unmanaged
            {
                T1 values;
                void* values_ptr = &values;
                {
                    GetHistogram(target, reset, format, type, values_ptr);
                }
                return values;
            }
            /// <inheritdoc cref="GetHistogram(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogram<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, out T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetHistogram(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfv(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterf(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetHistogramParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfv(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterf(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetHistogramParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfv(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe float GetHistogramParameterf(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetHistogramParameterfv(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetHistogramParameterfv(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterf(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetHistogramParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameteriv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameteri(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameteriv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameteri(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameteriv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe int GetHistogramParameteri(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetHistogramParameteriv(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetHistogramParameteriv(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameteri(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetHistogramParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInfoLogARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe string GetInfoLogARB(GLHandleARB obj, int maxLength, out int length)
            {
                string infoLog;
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetInfoLogARB(obj, maxLength, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetInfoLogARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe void GetInfoLogARB(GLHandleARB obj, int maxLength, out int length, out string infoLog)
            {
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetInfoLogARB(obj, maxLength, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
            public static unsafe void GetInteger64(GetPName pname, Span<long> data)
            {
                fixed (long* data_ptr = data)
                {
                    GetInteger64v(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
            public static unsafe void GetInteger64(GetPName pname, long[] data)
            {
                fixed (long* data_ptr = data)
                {
                    GetInteger64v(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
            public static unsafe long GetInteger64(GetPName pname)
            {
                long data;
                long* data_ptr = &data;
                {
                    GetInteger64v(pname, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetInteger64v(GetPName, long*)"/>
            public static unsafe void GetInteger64(GetPName pname, out long data)
            {
                fixed (long* data_ptr = &data)
                {
                    GetInteger64v(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
            public static unsafe void GetInteger(GetPName target, uint index, Span<int> data)
            {
                fixed (int* data_ptr = data)
                {
                    GetIntegeri_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
            public static unsafe void GetInteger(GetPName target, uint index, int[] data)
            {
                fixed (int* data_ptr = data)
                {
                    GetIntegeri_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
            public static unsafe int GetInteger(GetPName target, uint index)
            {
                int data;
                int* data_ptr = &data;
                {
                    GetIntegeri_v(target, index, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetIntegeri_v(GetPName, uint, int*)"/>
            public static unsafe void GetInteger(GetPName target, uint index, out int data)
            {
                fixed (int* data_ptr = &data)
                {
                    GetIntegeri_v(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
            public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
            public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformati64v(TextureTarget, InternalFormat, InternalFormatPName, int, long*)"/>
            public static unsafe void GetInternalformati64(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetInternalformati64v(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformativ(TextureTarget, InternalFormat, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformati(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetInternalformativ(target, internalformat, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetMinmax(target, reset, format, type, values_vptr);
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetMinmax(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetMinmax(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe T1 GetMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type)
                where T1 : unmanaged
            {
                T1 values;
                void* values_ptr = &values;
                {
                    GetMinmax(target, reset, format, type, values_ptr);
                }
                return values;
            }
            /// <inheritdoc cref="GetMinmax(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmax<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, out T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetMinmax(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterf(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMinmaxParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterf(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMinmaxParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe float GetMinmaxParameterf(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetMinmaxParameterfv(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMinmaxParameterfv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterf(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMinmaxParameterfv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameteriv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameteri(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMinmaxParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameteriv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameteri(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMinmaxParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameteriv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe int GetMinmaxParameteri(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetMinmaxParameteriv(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMinmaxParameteriv(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameteri(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMinmaxParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, Span<float> val)
            {
                fixed (float* val_ptr = val)
                {
                    GetMultisamplefv(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, float[] val)
            {
                fixed (float* val_ptr = val)
                {
                    GetMultisamplefv(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe float GetMultisamplef(GetMultisamplePNameNV pname, uint index)
            {
                float val;
                float* val_ptr = &val;
                {
                    GetMultisamplefv(pname, index, val_ptr);
                }
                return val;
            }
            /// <inheritdoc cref="GetMultisamplefv(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplef(GetMultisamplePNameNV pname, uint index, out float val)
            {
                fixed (float* val_ptr = &val)
                {
                    GetMultisamplefv(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameteri64v(int, BufferPName, long*)"/>
            public static unsafe void GetNamedBufferParameteri64(int buffer, BufferPName pname, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetNamedBufferParameteri64v(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameteri64v(int, BufferPName, long*)"/>
            public static unsafe void GetNamedBufferParameteri64(int buffer, BufferPName pname, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetNamedBufferParameteri64v(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameteri64v(int, BufferPName, long*)"/>
            public static unsafe void GetNamedBufferParameteri64(int buffer, BufferPName pname, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetNamedBufferParameteri64v(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameteriv(int, BufferPName, int*)"/>
            public static unsafe void GetNamedBufferParameteri(int buffer, BufferPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedBufferParameteriv(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameteriv(int, BufferPName, int*)"/>
            public static unsafe void GetNamedBufferParameteri(int buffer, BufferPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedBufferParameteriv(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameteriv(int, BufferPName, int*)"/>
            public static unsafe void GetNamedBufferParameteri(int buffer, BufferPName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedBufferParameteriv(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferPointerv(int, BufferPointerNameARB, void**)"/>
            public static unsafe void GetNamedBufferPointer(int buffer, BufferPointerNameARB pname, void** parameters)
            {
                GetNamedBufferPointerv(buffer, pname, parameters);
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData(int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                GetNamedBufferSubData(buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, Span<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetNamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetNamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    GetNamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameteriv(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetNamedFramebufferAttachmentParameteri(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameteriv(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetNamedFramebufferAttachmentParameteri(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameteriv(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetNamedFramebufferAttachmentParameteri(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetNamedFramebufferParameteri(int framebuffer, GetFramebufferParameter pname, Span<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    GetNamedFramebufferParameteriv(framebuffer, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetNamedFramebufferParameteri(int framebuffer, GetFramebufferParameter pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    GetNamedFramebufferParameteriv(framebuffer, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameteriv(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetNamedFramebufferParameteri(int framebuffer, GetFramebufferParameter pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetNamedFramebufferParameteriv(framebuffer, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameteriv(int, RenderbufferParameterName, int*)"/>
            public static unsafe void GetNamedRenderbufferParameteri(int renderbuffer, RenderbufferParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedRenderbufferParameteriv(renderbuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameteriv(int, RenderbufferParameterName, int*)"/>
            public static unsafe void GetNamedRenderbufferParameteri(int renderbuffer, RenderbufferParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedRenderbufferParameteriv(renderbuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameteriv(int, RenderbufferParameterName, int*)"/>
            public static unsafe void GetNamedRenderbufferParameteri(int renderbuffer, RenderbufferParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedRenderbufferParameteriv(renderbuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedStringARB(int, byte*, int, int*, byte*)"/>
            public static unsafe string GetNamedStringARB(int namelen, string name, int bufSize, out int stringlen)
            {
                string str;
                fixed (int* stringlen_ptr = &stringlen)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    var str_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetNamedStringARB(namelen, name_ptr, bufSize, stringlen_ptr, str_ptr);
                    str = Marshal.PtrToStringUTF8((IntPtr)str_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return str;
            }
            /// <inheritdoc cref="GetNamedStringARB(int, byte*, int, int*, byte*)"/>
            public static unsafe void GetNamedStringARB(int namelen, string name, int bufSize, out int stringlen, out string str)
            {
                fixed (int* stringlen_ptr = &stringlen)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    var str_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetNamedStringARB(namelen, name_ptr, bufSize, stringlen_ptr, str_ptr);
                    str = Marshal.PtrToStringUTF8((IntPtr)str_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedStringivARB(int, byte*, All, int*)"/>
            public static unsafe void GetNamedStringivARB(int namelen, string name, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    GetNamedStringivARB(namelen, name_ptr, pname, parameters_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedStringivARB(int, byte*, All, int*)"/>
            public static unsafe void GetNamedStringivARB(int namelen, string name, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    GetNamedStringivARB(namelen, name_ptr, pname, parameters_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedStringivARB(int, byte*, All, int*)"/>
            public static unsafe int GetNamedStringivARB(int namelen, string name, All pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    GetNamedStringivARB(namelen, name_ptr, pname, parameters_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetNamedStringivARB(int, byte*, All, int*)"/>
            public static unsafe void GetNamedStringivARB(int namelen, string name, All pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                    GetNamedStringivARB(namelen, name_ptr, pname, parameters_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetnColorTableARB(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnColorTableARB(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr table)
            {
                void* table_vptr = (void*)table;
                GetnColorTableARB(target, format, type, bufSize, table_vptr);
            }
            /// <inheritdoc cref="GetnColorTableARB(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnColorTableARB<T1>(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, Span<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    GetnColorTableARB(target, format, type, bufSize, table_ptr);
                }
            }
            /// <inheritdoc cref="GetnColorTableARB(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnColorTableARB<T1>(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    GetnColorTableARB(target, format, type, bufSize, table_ptr);
                }
            }
            /// <inheritdoc cref="GetnColorTableARB(ColorTableTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnColorTableARB<T1>(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, ref T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    GetnColorTableARB(target, format, type, bufSize, table_ptr);
                }
            }
            /// <inheritdoc cref="GetnCompressedTexImageARB(TextureTarget, int, int, void*)"/>
            public static unsafe void GetnCompressedTexImageARB(TextureTarget target, int lod, int bufSize, IntPtr img)
            {
                void* img_vptr = (void*)img;
                GetnCompressedTexImageARB(target, lod, bufSize, img_vptr);
            }
            /// <inheritdoc cref="GetnCompressedTexImageARB(TextureTarget, int, int, void*)"/>
            public static unsafe void GetnCompressedTexImageARB<T1>(TextureTarget target, int lod, int bufSize, Span<T1> img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetnCompressedTexImageARB(target, lod, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnCompressedTexImageARB(TextureTarget, int, int, void*)"/>
            public static unsafe void GetnCompressedTexImageARB<T1>(TextureTarget target, int lod, int bufSize, T1[] img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetnCompressedTexImageARB(target, lod, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnCompressedTexImageARB(TextureTarget, int, int, void*)"/>
            public static unsafe void GetnCompressedTexImageARB<T1>(TextureTarget target, int lod, int bufSize, ref T1 img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = &img)
                {
                    GetnCompressedTexImageARB(target, lod, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnConvolutionFilterARB(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnConvolutionFilterARB(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr image)
            {
                void* image_vptr = (void*)image;
                GetnConvolutionFilterARB(target, format, type, bufSize, image_vptr);
            }
            /// <inheritdoc cref="GetnConvolutionFilterARB(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnConvolutionFilterARB<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, Span<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    GetnConvolutionFilterARB(target, format, type, bufSize, image_ptr);
                }
            }
            /// <inheritdoc cref="GetnConvolutionFilterARB(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnConvolutionFilterARB<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    GetnConvolutionFilterARB(target, format, type, bufSize, image_ptr);
                }
            }
            /// <inheritdoc cref="GetnConvolutionFilterARB(ConvolutionTarget, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnConvolutionFilterARB<T1>(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, ref T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    GetnConvolutionFilterARB(target, format, type, bufSize, image_ptr);
                }
            }
            /// <inheritdoc cref="GetnHistogramARB(HistogramTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnHistogramARB(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetnHistogramARB(target, reset, format, type, bufSize, values_vptr);
            }
            /// <inheritdoc cref="GetnHistogramARB(HistogramTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnHistogramARB<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, Span<T1> values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetnHistogramARB(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnHistogramARB(HistogramTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnHistogramARB<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, T1[] values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetnHistogramARB(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnHistogramARB(HistogramTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnHistogramARB<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, ref T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetnHistogramARB(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapdvARB(MapTarget, MapQuery, int, double*)"/>
            public static unsafe void GetnMapdvARB(MapTarget target, MapQuery query, int bufSize, Span<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    GetnMapdvARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapdvARB(MapTarget, MapQuery, int, double*)"/>
            public static unsafe void GetnMapdvARB(MapTarget target, MapQuery query, int bufSize, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    GetnMapdvARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapdvARB(MapTarget, MapQuery, int, double*)"/>
            public static unsafe void GetnMapdvARB(MapTarget target, MapQuery query, int bufSize, ref double v)
            {
                fixed (double* v_ptr = &v)
                {
                    GetnMapdvARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapfvARB(MapTarget, MapQuery, int, float*)"/>
            public static unsafe void GetnMapfvARB(MapTarget target, MapQuery query, int bufSize, Span<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    GetnMapfvARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapfvARB(MapTarget, MapQuery, int, float*)"/>
            public static unsafe void GetnMapfvARB(MapTarget target, MapQuery query, int bufSize, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    GetnMapfvARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapfvARB(MapTarget, MapQuery, int, float*)"/>
            public static unsafe void GetnMapfvARB(MapTarget target, MapQuery query, int bufSize, ref float v)
            {
                fixed (float* v_ptr = &v)
                {
                    GetnMapfvARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapivARB(MapTarget, MapQuery, int, int*)"/>
            public static unsafe void GetnMapivARB(MapTarget target, MapQuery query, int bufSize, Span<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    GetnMapivARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapivARB(MapTarget, MapQuery, int, int*)"/>
            public static unsafe void GetnMapivARB(MapTarget target, MapQuery query, int bufSize, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    GetnMapivARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMapivARB(MapTarget, MapQuery, int, int*)"/>
            public static unsafe void GetnMapivARB(MapTarget target, MapQuery query, int bufSize, ref int v)
            {
                fixed (int* v_ptr = &v)
                {
                    GetnMapivARB(target, query, bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetnMinmaxARB(MinmaxTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnMinmaxARB(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetnMinmaxARB(target, reset, format, type, bufSize, values_vptr);
            }
            /// <inheritdoc cref="GetnMinmaxARB(MinmaxTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnMinmaxARB<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, Span<T1> values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetnMinmaxARB(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnMinmaxARB(MinmaxTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnMinmaxARB<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, T1[] values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetnMinmaxARB(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnMinmaxARB(MinmaxTargetEXT, bool, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnMinmaxARB<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, ref T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetnMinmaxARB(target, reset, format, type, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapfvARB(PixelMap, int, float*)"/>
            public static unsafe void GetnPixelMapfvARB(PixelMap map, int bufSize, Span<float> values)
            {
                fixed (float* values_ptr = values)
                {
                    GetnPixelMapfvARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapfvARB(PixelMap, int, float*)"/>
            public static unsafe void GetnPixelMapfvARB(PixelMap map, int bufSize, float[] values)
            {
                fixed (float* values_ptr = values)
                {
                    GetnPixelMapfvARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapfvARB(PixelMap, int, float*)"/>
            public static unsafe void GetnPixelMapfvARB(PixelMap map, int bufSize, ref float values)
            {
                fixed (float* values_ptr = &values)
                {
                    GetnPixelMapfvARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapuivARB(PixelMap, int, uint*)"/>
            public static unsafe void GetnPixelMapuivARB(PixelMap map, int bufSize, Span<uint> values)
            {
                fixed (uint* values_ptr = values)
                {
                    GetnPixelMapuivARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapuivARB(PixelMap, int, uint*)"/>
            public static unsafe void GetnPixelMapuivARB(PixelMap map, int bufSize, uint[] values)
            {
                fixed (uint* values_ptr = values)
                {
                    GetnPixelMapuivARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapuivARB(PixelMap, int, uint*)"/>
            public static unsafe void GetnPixelMapuivARB(PixelMap map, int bufSize, ref uint values)
            {
                fixed (uint* values_ptr = &values)
                {
                    GetnPixelMapuivARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapusvARB(PixelMap, int, ushort*)"/>
            public static unsafe void GetnPixelMapusvARB(PixelMap map, int bufSize, Span<ushort> values)
            {
                fixed (ushort* values_ptr = values)
                {
                    GetnPixelMapusvARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapusvARB(PixelMap, int, ushort*)"/>
            public static unsafe void GetnPixelMapusvARB(PixelMap map, int bufSize, ushort[] values)
            {
                fixed (ushort* values_ptr = values)
                {
                    GetnPixelMapusvARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPixelMapusvARB(PixelMap, int, ushort*)"/>
            public static unsafe void GetnPixelMapusvARB(PixelMap map, int bufSize, ref ushort values)
            {
                fixed (ushort* values_ptr = &values)
                {
                    GetnPixelMapusvARB(map, bufSize, values_ptr);
                }
            }
            /// <inheritdoc cref="GetnPolygonStippleARB(int, byte*)"/>
            public static unsafe void GetnPolygonStippleARB(int bufSize, Span<byte> pattern)
            {
                fixed (byte* pattern_ptr = pattern)
                {
                    GetnPolygonStippleARB(bufSize, pattern_ptr);
                }
            }
            /// <inheritdoc cref="GetnPolygonStippleARB(int, byte*)"/>
            public static unsafe void GetnPolygonStippleARB(int bufSize, byte[] pattern)
            {
                fixed (byte* pattern_ptr = pattern)
                {
                    GetnPolygonStippleARB(bufSize, pattern_ptr);
                }
            }
            /// <inheritdoc cref="GetnPolygonStippleARB(int, byte*)"/>
            public static unsafe void GetnPolygonStippleARB(int bufSize, ref byte pattern)
            {
                fixed (byte* pattern_ptr = &pattern)
                {
                    GetnPolygonStippleARB(bufSize, pattern_ptr);
                }
            }
            /// <inheritdoc cref="GetnSeparableFilterARB(SeparableTargetEXT, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
            public static unsafe void GetnSeparableFilterARB(SeparableTargetEXT target, PixelFormat format, PixelType type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span)
            {
                void* row_vptr = (void*)row;
                void* column_vptr = (void*)column;
                void* span_vptr = (void*)span;
                GetnSeparableFilterARB(target, format, type, rowBufSize, row_vptr, columnBufSize, column_vptr, span_vptr);
            }
            /// <inheritdoc cref="GetnSeparableFilterARB(SeparableTargetEXT, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
            public static unsafe void GetnSeparableFilterARB<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, int rowBufSize, Span<T1> row, int columnBufSize, Span<T2> column, Span<T3> span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* span_ptr = span)
                {
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* row_ptr = row)
                        {
                            GetnSeparableFilterARB(target, format, type, rowBufSize, row_ptr, columnBufSize, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetnSeparableFilterARB(SeparableTargetEXT, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
            public static unsafe void GetnSeparableFilterARB<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, int rowBufSize, T1[] row, int columnBufSize, T2[] column, T3[] span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* span_ptr = span)
                {
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* row_ptr = row)
                        {
                            GetnSeparableFilterARB(target, format, type, rowBufSize, row_ptr, columnBufSize, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetnSeparableFilterARB(SeparableTargetEXT, PixelFormat, PixelType, int, void*, int, void*, void*)"/>
            public static unsafe void GetnSeparableFilterARB<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, int rowBufSize, ref T1 row, int columnBufSize, ref T2 column, ref T3 span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                fixed (void* span_ptr = &span)
                {
                    GetnSeparableFilterARB(target, format, type, rowBufSize, row_ptr, columnBufSize, column_ptr, span_ptr);
                }
            }
            /// <inheritdoc cref="GetnTexImageARB(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnTexImageARB(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, IntPtr img)
            {
                void* img_vptr = (void*)img;
                GetnTexImageARB(target, level, format, type, bufSize, img_vptr);
            }
            /// <inheritdoc cref="GetnTexImageARB(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnTexImageARB<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, Span<T1> img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetnTexImageARB(target, level, format, type, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnTexImageARB(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnTexImageARB<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, T1[] img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetnTexImageARB(target, level, format, type, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnTexImageARB(TextureTarget, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetnTexImageARB<T1>(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, ref T1 img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = &img)
                {
                    GetnTexImageARB(target, level, format, type, bufSize, img_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformdvARB(int, int, int, double*)"/>
            public static unsafe void GetnUniformdvARB(int program, int location, int bufSize, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetnUniformdvARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformdvARB(int, int, int, double*)"/>
            public static unsafe void GetnUniformdvARB(int program, int location, int bufSize, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetnUniformdvARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformdvARB(int, int, int, double*)"/>
            public static unsafe void GetnUniformdvARB(int program, int location, int bufSize, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetnUniformdvARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfvARB(int, int, int, float*)"/>
            public static unsafe void GetnUniformfvARB(int program, int location, int bufSize, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfvARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfvARB(int, int, int, float*)"/>
            public static unsafe void GetnUniformfvARB(int program, int location, int bufSize, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfvARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfvARB(int, int, int, float*)"/>
            public static unsafe void GetnUniformfvARB(int program, int location, int bufSize, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetnUniformfvARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformi64vARB(int, int, int, long*)"/>
            public static unsafe void GetnUniformi64vARB(int program, int location, int bufSize, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetnUniformi64vARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformi64vARB(int, int, int, long*)"/>
            public static unsafe void GetnUniformi64vARB(int program, int location, int bufSize, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetnUniformi64vARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformi64vARB(int, int, int, long*)"/>
            public static unsafe void GetnUniformi64vARB(int program, int location, int bufSize, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetnUniformi64vARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformivARB(int, int, int, int*)"/>
            public static unsafe void GetnUniformivARB(int program, int location, int bufSize, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformivARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformivARB(int, int, int, int*)"/>
            public static unsafe void GetnUniformivARB(int program, int location, int bufSize, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformivARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformivARB(int, int, int, int*)"/>
            public static unsafe void GetnUniformivARB(int program, int location, int bufSize, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetnUniformivARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformui64vARB(int, int, int, ulong*)"/>
            public static unsafe void GetnUniformui64vARB(int program, int location, int bufSize, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetnUniformui64vARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformui64vARB(int, int, int, ulong*)"/>
            public static unsafe void GetnUniformui64vARB(int program, int location, int bufSize, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetnUniformui64vARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformui64vARB(int, int, int, ulong*)"/>
            public static unsafe void GetnUniformui64vARB(int program, int location, int bufSize, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetnUniformui64vARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuivARB(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuivARB(int program, int location, int bufSize, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuivARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuivARB(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuivARB(int program, int location, int bufSize, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuivARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuivARB(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuivARB(int program, int location, int bufSize, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetnUniformuivARB(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterfvARB(GLHandleARB, All, float*)"/>
            public static unsafe void GetObjectParameterfvARB(GLHandleARB obj, All pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetObjectParameterfvARB(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterfvARB(GLHandleARB, All, float*)"/>
            public static unsafe void GetObjectParameterfvARB(GLHandleARB obj, All pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetObjectParameterfvARB(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterfvARB(GLHandleARB, All, float*)"/>
            public static unsafe float GetObjectParameterfvARB(GLHandleARB obj, All pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetObjectParameterfvARB(obj, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetObjectParameterfvARB(GLHandleARB, All, float*)"/>
            public static unsafe void GetObjectParameterfvARB(GLHandleARB obj, All pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetObjectParameterfvARB(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterivARB(GLHandleARB, All, int*)"/>
            public static unsafe void GetObjectParameterivARB(GLHandleARB obj, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectParameterivARB(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterivARB(GLHandleARB, All, int*)"/>
            public static unsafe void GetObjectParameterivARB(GLHandleARB obj, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetObjectParameterivARB(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectParameterivARB(GLHandleARB, All, int*)"/>
            public static unsafe int GetObjectParameterivARB(GLHandleARB obj, All pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetObjectParameterivARB(obj, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetObjectParameterivARB(GLHandleARB, All, int*)"/>
            public static unsafe void GetObjectParameterivARB(GLHandleARB obj, All pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetObjectParameterivARB(obj, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary(int program, int bufSize, out int length, out All binaryFormat, IntPtr binary)
            {
                fixed (int* length_ptr = &length)
                fixed (All* binaryFormat_ptr = &binaryFormat)
                {
                    void* binary_vptr = (void*)binary;
                    GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_vptr);
                }
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary<T1>(int program, int bufSize, out int length, out All binaryFormat, Span<T1> binary)
                where T1 : unmanaged
            {
                fixed (int* length_ptr = &length)
                fixed (All* binaryFormat_ptr = &binaryFormat)
                {
                    fixed (void* binary_ptr = binary)
                    {
                        GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary<T1>(int program, int bufSize, out int length, out All binaryFormat, T1[] binary)
                where T1 : unmanaged
            {
                fixed (int* length_ptr = &length)
                fixed (All* binaryFormat_ptr = &binaryFormat)
                {
                    fixed (void* binary_ptr = binary)
                    {
                        GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramBinary(int, int, int*, All*, void*)"/>
            public static unsafe void GetProgramBinary<T1>(int program, int bufSize, out int length, out All binaryFormat, ref T1 binary)
                where T1 : unmanaged
            {
                fixed (int* length_ptr = &length)
                fixed (All* binaryFormat_ptr = &binaryFormat)
                fixed (void* binary_ptr = &binary)
                {
                    GetProgramBinary(program, bufSize, length_ptr, binaryFormat_ptr, binary_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterdvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramEnvParameterdvARB(ProgramTarget target, uint index, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterdvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterdvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramEnvParameterdvARB(ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterdvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterdvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramEnvParameterdvARB(ProgramTarget target, uint index, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetProgramEnvParameterdvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterfvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramEnvParameterfvARB(ProgramTarget target, uint index, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterfvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterfvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramEnvParameterfvARB(ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterfvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterfvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramEnvParameterfvARB(ProgramTarget target, uint index, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetProgramEnvParameterfvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
            public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
            public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
            public static unsafe int GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetProgramInterfaceiv(int, ProgramInterface, ProgramInterfacePName, int*)"/>
            public static unsafe void GetProgramInterfacei(int program, ProgramInterface programInterface, ProgramInterfacePName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramInterfaceiv(program, programInterface, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramivARB(ProgramTarget, ProgramProperty, int*)"/>
            public static unsafe int GetProgramivARB(ProgramTarget target, ProgramProperty pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetProgramivARB(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetProgramivARB(ProgramTarget, ProgramProperty, int*)"/>
            public static unsafe void GetProgramivARB(ProgramTarget target, ProgramProperty pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterdvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramLocalParameterdvARB(ProgramTarget target, uint index, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterdvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterdvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramLocalParameterdvARB(ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterdvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterdvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void GetProgramLocalParameterdvARB(ProgramTarget target, uint index, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetProgramLocalParameterdvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterfvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramLocalParameterfvARB(ProgramTarget target, uint index, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterfvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterfvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramLocalParameterfvARB(ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterfvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterfvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void GetProgramLocalParameterfvARB(ProgramTarget target, uint index, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetProgramLocalParameterfvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe string GetProgramPipelineInfoLog(int pipeline, int bufSize, out int length)
            {
                string infoLog;
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLog(int, int, int*, byte*)"/>
            public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, out int length, out string infoLog)
            {
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLog(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
            public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramPipelineiv(pipeline, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
            public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramPipelineiv(pipeline, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
            public static unsafe int GetProgramPipelinei(int pipeline, PipelineParameterName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetProgramPipelineiv(pipeline, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetProgramPipelineiv(int, PipelineParameterName, int*)"/>
            public static unsafe void GetProgramPipelinei(int pipeline, PipelineParameterName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramPipelineiv(pipeline, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramResourceIndex(int, ProgramInterface, byte*)"/>
            public static unsafe uint GetProgramResourceIndex(int program, ProgramInterface programInterface, string name)
            {
                uint returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetProgramResourceIndex(program, programInterface, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
            public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, int propCount, ReadOnlySpan<ProgramResourceProperty> props, int count, out int length, Span<int> parameters)
            {
                fixed (int* length_ptr = &length)
                {
                    fixed (int* parameters_ptr = parameters)
                    {
                        fixed (ProgramResourceProperty* props_ptr = props)
                        {
                            GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
            public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, int propCount, ProgramResourceProperty[] props, int count, out int length, int[] parameters)
            {
                fixed (int* length_ptr = &length)
                {
                    fixed (int* parameters_ptr = parameters)
                    {
                        fixed (ProgramResourceProperty* props_ptr = props)
                        {
                            GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramResourceiv(int, ProgramInterface, uint, int, ProgramResourceProperty*, int, int*, int*)"/>
            public static unsafe void GetProgramResourcei(int program, ProgramInterface programInterface, uint index, int propCount, ref readonly ProgramResourceProperty props, int count, out int length, ref int parameters)
            {
                fixed (ProgramResourceProperty* props_ptr = &props)
                fixed (int* length_ptr = &length)
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramResourceiv(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramResourceLocation(int, ProgramInterface, byte*)"/>
            public static unsafe int GetProgramResourceLocation(int program, ProgramInterface programInterface, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetProgramResourceLocation(program, programInterface, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetProgramResourceLocationIndex(int, ProgramInterface, byte*)"/>
            public static unsafe int GetProgramResourceLocationIndex(int program, ProgramInterface programInterface, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetProgramResourceLocationIndex(program, programInterface, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
            public static unsafe string GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, out int length)
            {
                string name;
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetProgramResourceName(int, ProgramInterface, uint, int, int*, byte*)"/>
            public static unsafe void GetProgramResourceName(int program, ProgramInterface programInterface, uint index, int bufSize, out int length, out string name)
            {
                fixed (int* length_ptr = &length)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramResourceName(program, programInterface, index, bufSize, length_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
            public static unsafe int GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname)
            {
                int values;
                int* values_ptr = &values;
                {
                    GetProgramStageiv(program, shadertype, pname, values_ptr);
                }
                return values;
            }
            /// <inheritdoc cref="GetProgramStageiv(int, ShaderType, ProgramStagePName, int*)"/>
            public static unsafe void GetProgramStagei(int program, ShaderType shadertype, ProgramStagePName pname, out int values)
            {
                fixed (int* values_ptr = &values)
                {
                    GetProgramStageiv(program, shadertype, pname, values_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStringARB(ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetProgramStringARB(ProgramTarget target, ProgramStringProperty pname, IntPtr str)
            {
                void* str_vptr = (void*)str;
                GetProgramStringARB(target, pname, str_vptr);
            }
            /// <inheritdoc cref="GetProgramStringARB(ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetProgramStringARB<T1>(ProgramTarget target, ProgramStringProperty pname, Span<T1> str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    GetProgramStringARB(target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStringARB(ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetProgramStringARB<T1>(ProgramTarget target, ProgramStringProperty pname, T1[] str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    GetProgramStringARB(target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStringARB(ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe T1 GetProgramStringARB<T1>(ProgramTarget target, ProgramStringProperty pname)
                where T1 : unmanaged
            {
                T1 str;
                void* str_ptr = &str;
                {
                    GetProgramStringARB(target, pname, str_ptr);
                }
                return str;
            }
            /// <inheritdoc cref="GetProgramStringARB(ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetProgramStringARB<T1>(ProgramTarget target, ProgramStringProperty pname, out T1 str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = &str)
                {
                    GetProgramStringARB(target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryBufferObjecti64v(int, int, QueryObjectParameterName, IntPtr)"/>
            public static unsafe void GetQueryBufferObjecti64(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
            {
                GetQueryBufferObjecti64v(id, buffer, pname, offset);
            }
            /// <inheritdoc cref="GetQueryBufferObjectiv(int, int, QueryObjectParameterName, IntPtr)"/>
            public static unsafe void GetQueryBufferObjecti(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
            {
                GetQueryBufferObjectiv(id, buffer, pname, offset);
            }
            /// <inheritdoc cref="GetQueryBufferObjectui64v(int, int, QueryObjectParameterName, IntPtr)"/>
            public static unsafe void GetQueryBufferObjectui64(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
            {
                GetQueryBufferObjectui64v(id, buffer, pname, offset);
            }
            /// <inheritdoc cref="GetQueryBufferObjectuiv(int, int, QueryObjectParameterName, IntPtr)"/>
            public static unsafe void GetQueryBufferObjectui(int id, int buffer, QueryObjectParameterName pname, IntPtr offset)
            {
                GetQueryBufferObjectuiv(id, buffer, pname, offset);
            }
            /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
            public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryIndexediv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
            public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryIndexediv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
            public static unsafe int GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetQueryIndexediv(target, index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetQueryIndexediv(QueryTarget, uint, QueryParameterName, int*)"/>
            public static unsafe void GetQueryIndexedi(QueryTarget target, uint index, QueryParameterName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetQueryIndexediv(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryivARB(QueryTarget, QueryParameterName, int*)"/>
            public static unsafe void GetQueryivARB(QueryTarget target, QueryParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryivARB(QueryTarget, QueryParameterName, int*)"/>
            public static unsafe void GetQueryivARB(QueryTarget target, QueryParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryivARB(QueryTarget, QueryParameterName, int*)"/>
            public static unsafe int GetQueryivARB(QueryTarget target, QueryParameterName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetQueryivARB(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetQueryivARB(QueryTarget, QueryParameterName, int*)"/>
            public static unsafe void GetQueryivARB(QueryTarget target, QueryParameterName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetQueryivARB(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetQueryObjecti64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetQueryObjecti64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
            public static unsafe long GetQueryObjecti64(int id, QueryObjectParameterName pname)
            {
                long parameters;
                long* parameters_ptr = &parameters;
                {
                    GetQueryObjecti64v(id, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetQueryObjecti64v(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64(int id, QueryObjectParameterName pname, out long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetQueryObjecti64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectivARB(int, QueryObjectParameterName, int*)"/>
            public static unsafe void GetQueryObjectivARB(int id, QueryObjectParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryObjectivARB(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectivARB(int, QueryObjectParameterName, int*)"/>
            public static unsafe void GetQueryObjectivARB(int id, QueryObjectParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetQueryObjectivARB(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectivARB(int, QueryObjectParameterName, int*)"/>
            public static unsafe int GetQueryObjectivARB(int id, QueryObjectParameterName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetQueryObjectivARB(id, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetQueryObjectivARB(int, QueryObjectParameterName, int*)"/>
            public static unsafe void GetQueryObjectivARB(int id, QueryObjectParameterName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetQueryObjectivARB(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetQueryObjectui64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetQueryObjectui64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe ulong GetQueryObjectui64(int id, QueryObjectParameterName pname)
            {
                ulong parameters;
                ulong* parameters_ptr = &parameters;
                {
                    GetQueryObjectui64v(id, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetQueryObjectui64v(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64(int id, QueryObjectParameterName pname, out ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetQueryObjectui64v(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectuivARB(int, QueryObjectParameterName, uint*)"/>
            public static unsafe void GetQueryObjectuivARB(int id, QueryObjectParameterName pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetQueryObjectuivARB(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectuivARB(int, QueryObjectParameterName, uint*)"/>
            public static unsafe void GetQueryObjectuivARB(int id, QueryObjectParameterName pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetQueryObjectuivARB(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectuivARB(int, QueryObjectParameterName, uint*)"/>
            public static unsafe uint GetQueryObjectuivARB(int id, QueryObjectParameterName pname)
            {
                uint parameters;
                uint* parameters_ptr = &parameters;
                {
                    GetQueryObjectuivARB(id, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetQueryObjectuivARB(int, QueryObjectParameterName, uint*)"/>
            public static unsafe void GetQueryObjectuivARB(int id, QueryObjectParameterName pname, out uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetQueryObjectuivARB(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetRenderbufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetRenderbufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe int GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetRenderbufferParameteriv(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetRenderbufferParameteriv(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameteri(RenderbufferTarget target, RenderbufferParameterName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetRenderbufferParameteriv(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetSamplerParameterfv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetSamplerParameterfv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe float GetSamplerParameterf(int sampler, SamplerParameterF pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetSamplerParameterfv(sampler, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetSamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void GetSamplerParameterf(int sampler, SamplerParameterF pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetSamplerParameterfv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetSamplerParameterIiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetSamplerParameterIiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe int GetSamplerParameterIi(int sampler, SamplerParameterI pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetSamplerParameterIiv(sampler, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetSamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameterIi(int sampler, SamplerParameterI pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetSamplerParameterIiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe uint GetSamplerParameterIui(int sampler, SamplerParameterI pname)
            {
                uint parameters;
                uint* parameters_ptr = &parameters;
                {
                    GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetSamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void GetSamplerParameterIui(int sampler, SamplerParameterI pname, out uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetSamplerParameterIuiv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetSamplerParameteriv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetSamplerParameteriv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe int GetSamplerParameteri(int sampler, SamplerParameterI pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetSamplerParameteriv(sampler, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetSamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void GetSamplerParameteri(int sampler, SamplerParameterI pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetSamplerParameteriv(sampler, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter(SeparableTargetEXT target, PixelFormat format, PixelType type, IntPtr row, IntPtr column, IntPtr span)
            {
                void* row_vptr = (void*)row;
                void* column_vptr = (void*)column;
                void* span_vptr = (void*)span;
                GetSeparableFilter(target, format, type, row_vptr, column_vptr, span_vptr);
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, Span<T1> row, Span<T2> column, Span<T3> span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* span_ptr = span)
                {
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* row_ptr = row)
                        {
                            GetSeparableFilter(target, format, type, row_ptr, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, T1[] row, T2[] column, T3[] span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* span_ptr = span)
                {
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* row_ptr = row)
                        {
                            GetSeparableFilter(target, format, type, row_ptr, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe T3 GetSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, out T1 row, out T2 column)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                T3 span;
                void* span_ptr = &span;
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                {
                    GetSeparableFilter(target, format, type, row_ptr, column_ptr, span_ptr);
                }
                return span;
            }
            /// <inheritdoc cref="GetSeparableFilter(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilter<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, out T1 row, out T2 column, out T3 span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                fixed (void* span_ptr = &span)
                {
                    GetSeparableFilter(target, format, type, row_ptr, column_ptr, span_ptr);
                }
            }
            /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
            public static unsafe int GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, Span<int> range)
            {
                int precision;
                int* precision_ptr = &precision;
                {
                    fixed (int* range_ptr = range)
                    {
                        GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                    }
                }
                return precision;
            }
            /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
            public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, Span<int> range, out int precision)
            {
                fixed (int* precision_ptr = &precision)
                {
                    fixed (int* range_ptr = range)
                    {
                        GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
            public static unsafe int GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, int[] range)
            {
                int precision;
                int* precision_ptr = &precision;
                {
                    fixed (int* range_ptr = range)
                    {
                        GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                    }
                }
                return precision;
            }
            /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
            public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, int[] range, out int precision)
            {
                fixed (int* precision_ptr = &precision)
                {
                    fixed (int* range_ptr = range)
                    {
                        GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
            public static unsafe int GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, ref int range)
            {
                int precision;
                int* precision_ptr = &precision;
                fixed (int* range_ptr = &range)
                {
                    GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                }
                return precision;
            }
            /// <inheritdoc cref="GetShaderPrecisionFormat(ShaderType, PrecisionType, int*, int*)"/>
            public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, ref int range, out int precision)
            {
                fixed (int* range_ptr = &range)
                fixed (int* precision_ptr = &precision)
                {
                    GetShaderPrecisionFormat(shadertype, precisiontype, range_ptr, precision_ptr);
                }
            }
            /// <inheritdoc cref="GetShaderSourceARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe string GetShaderSourceARB(GLHandleARB obj, int maxLength, out int length)
            {
                string source;
                fixed (int* length_ptr = &length)
                {
                    var source_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetShaderSourceARB(obj, maxLength, length_ptr, source_ptr);
                    source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)source_ptr);
                }
                return source;
            }
            /// <inheritdoc cref="GetShaderSourceARB(GLHandleARB, int, int*, byte*)"/>
            public static unsafe void GetShaderSourceARB(GLHandleARB obj, int maxLength, out int length, out string source)
            {
                fixed (int* length_ptr = &length)
                {
                    var source_ptr = (byte*)Marshal.AllocCoTaskMem(maxLength);
                    GetShaderSourceARB(obj, maxLength, length_ptr, source_ptr);
                    source = Marshal.PtrToStringUTF8((IntPtr)source_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)source_ptr);
                }
            }
            /// <inheritdoc cref="GetSubroutineIndex(int, ShaderType, byte*)"/>
            public static unsafe uint GetSubroutineIndex(int program, ShaderType shadertype, string name)
            {
                uint returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetSubroutineIndex(program, shadertype, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetSubroutineUniformLocation(int, ShaderType, byte*)"/>
            public static unsafe int GetSubroutineUniformLocation(int program, ShaderType shadertype, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetSubroutineUniformLocation(program, shadertype, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
            public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, int count, out int length, Span<int> values)
            {
                fixed (int* length_ptr = &length)
                {
                    fixed (int* values_ptr = values)
                    {
                        GetSynciv(sync, pname, count, length_ptr, values_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
            public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, int count, out int length, int[] values)
            {
                fixed (int* length_ptr = &length)
                {
                    fixed (int* values_ptr = values)
                    {
                        GetSynciv(sync, pname, count, length_ptr, values_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetSynciv(GLSync, SyncParameterName, int, int*, int*)"/>
            public static unsafe void GetSynci(GLSync sync, SyncParameterName pname, int count, out int length, ref int values)
            {
                fixed (int* length_ptr = &length)
                fixed (int* values_ptr = &values)
                {
                    GetSynciv(sync, pname, count, length_ptr, values_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureImage(int texture, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetTextureImage(texture, level, format, type, bufSize, pixels_vptr);
            }
            /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, int bufSize, Span<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, int bufSize, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImage(int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureImage<T1>(int texture, int level, PixelFormat format, PixelType type, int bufSize, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetTextureImage(texture, level, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfv(int, int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureLevelParameterf(int texture, int level, GetTextureParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureLevelParameterfv(texture, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfv(int, int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureLevelParameterf(int texture, int level, GetTextureParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureLevelParameterfv(texture, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfv(int, int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureLevelParameterf(int texture, int level, GetTextureParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetTextureLevelParameterfv(texture, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameteriv(int, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureLevelParameteri(int texture, int level, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureLevelParameteriv(texture, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameteriv(int, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureLevelParameteri(int texture, int level, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureLevelParameteriv(texture, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameteriv(int, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureLevelParameteri(int texture, int level, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureLevelParameteriv(texture, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterfv(int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureParameterf(int texture, GetTextureParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureParameterfv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterfv(int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureParameterf(int texture, GetTextureParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureParameterfv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterfv(int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureParameterf(int texture, GetTextureParameter pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetTextureParameterfv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIiv(int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterIi(int texture, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameterIiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIiv(int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterIi(int texture, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameterIiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIiv(int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterIi(int texture, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureParameterIiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIuiv(int, GetTextureParameter, uint*)"/>
            public static unsafe void GetTextureParameterIui(int texture, GetTextureParameter pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetTextureParameterIuiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIuiv(int, GetTextureParameter, uint*)"/>
            public static unsafe void GetTextureParameterIui(int texture, GetTextureParameter pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetTextureParameterIuiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIuiv(int, GetTextureParameter, uint*)"/>
            public static unsafe void GetTextureParameterIui(int texture, GetTextureParameter pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetTextureParameterIuiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameteriv(int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameteri(int texture, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameteriv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameteriv(int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameteri(int texture, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameteriv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameteriv(int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameteri(int texture, GetTextureParameter pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureParameteriv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_vptr);
            }
            /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, Span<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureSubImage(int, int, int, int, int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void GetTextureSubImage<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, ref T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbacki_v(int, TransformFeedbackPName, uint, int*)"/>
            public static unsafe void GetTransformFeedback(int xfb, TransformFeedbackPName pname, uint index, Span<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    GetTransformFeedbacki_v(xfb, pname, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbacki_v(int, TransformFeedbackPName, uint, int*)"/>
            public static unsafe void GetTransformFeedback(int xfb, TransformFeedbackPName pname, uint index, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    GetTransformFeedbacki_v(xfb, pname, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbacki_v(int, TransformFeedbackPName, uint, int*)"/>
            public static unsafe void GetTransformFeedback(int xfb, TransformFeedbackPName pname, uint index, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetTransformFeedbacki_v(xfb, pname, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbacki64_v(int, TransformFeedbackPName, uint, long*)"/>
            public static unsafe void GetTransformFeedbacki64_(int xfb, TransformFeedbackPName pname, uint index, Span<long> param)
            {
                fixed (long* param_ptr = param)
                {
                    GetTransformFeedbacki64_v(xfb, pname, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbacki64_v(int, TransformFeedbackPName, uint, long*)"/>
            public static unsafe void GetTransformFeedbacki64_(int xfb, TransformFeedbackPName pname, uint index, long[] param)
            {
                fixed (long* param_ptr = param)
                {
                    GetTransformFeedbacki64_v(xfb, pname, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbacki64_v(int, TransformFeedbackPName, uint, long*)"/>
            public static unsafe void GetTransformFeedbacki64_(int xfb, TransformFeedbackPName pname, uint index, ref long param)
            {
                fixed (long* param_ptr = &param)
                {
                    GetTransformFeedbacki64_v(xfb, pname, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackiv(int, TransformFeedbackPName, int*)"/>
            public static unsafe void GetTransformFeedbacki(int xfb, TransformFeedbackPName pname, Span<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    GetTransformFeedbackiv(xfb, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackiv(int, TransformFeedbackPName, int*)"/>
            public static unsafe void GetTransformFeedbacki(int xfb, TransformFeedbackPName pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    GetTransformFeedbackiv(xfb, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackiv(int, TransformFeedbackPName, int*)"/>
            public static unsafe void GetTransformFeedbacki(int xfb, TransformFeedbackPName pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetTransformFeedbackiv(xfb, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformBlockIndex(int, byte*)"/>
            public static unsafe uint GetUniformBlockIndex(int program, string uniformBlockName)
            {
                uint returnValue;
                byte* uniformBlockName_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(uniformBlockName);
                returnValue = GetUniformBlockIndex(program, uniformBlockName_ptr);
                Marshal.FreeCoTaskMem((IntPtr)uniformBlockName_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
            public static unsafe void GetUniformd(int program, int location, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetUniformdv(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
            public static unsafe void GetUniformd(int program, int location, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetUniformdv(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
            public static unsafe double GetUniformd(int program, int location)
            {
                double parameters;
                double* parameters_ptr = &parameters;
                {
                    GetUniformdv(program, location, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetUniformdv(int, int, double*)"/>
            public static unsafe void GetUniformd(int program, int location, out double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetUniformdv(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformfvARB(GLHandleARB, int, float*)"/>
            public static unsafe void GetUniformfvARB(GLHandleARB programObj, int location, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetUniformfvARB(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformfvARB(GLHandleARB, int, float*)"/>
            public static unsafe void GetUniformfvARB(GLHandleARB programObj, int location, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetUniformfvARB(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformfvARB(GLHandleARB, int, float*)"/>
            public static unsafe float GetUniformfvARB(GLHandleARB programObj, int location)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetUniformfvARB(programObj, location, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetUniformfvARB(GLHandleARB, int, float*)"/>
            public static unsafe void GetUniformfvARB(GLHandleARB programObj, int location, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetUniformfvARB(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vARB(int, int, long*)"/>
            public static unsafe void GetUniformi64vARB(int program, int location, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64vARB(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vARB(int, int, long*)"/>
            public static unsafe void GetUniformi64vARB(int program, int location, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64vARB(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vARB(int, int, long*)"/>
            public static unsafe long GetUniformi64vARB(int program, int location)
            {
                long parameters;
                long* parameters_ptr = &parameters;
                {
                    GetUniformi64vARB(program, location, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetUniformi64vARB(int, int, long*)"/>
            public static unsafe void GetUniformi64vARB(int program, int location, out long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetUniformi64vARB(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
            public static unsafe void GetUniformIndices(int program, int uniformCount, string[] uniformNames, Span<uint> uniformIndices)
            {
                fixed (uint* uniformIndices_ptr = uniformIndices)
                {
                    byte** uniformNames_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(uniformNames);
                    GetUniformIndices(program, uniformCount, uniformNames_ptr, uniformIndices_ptr);
                    MarshalTk.FreeStringArrayCoTaskMem((IntPtr)uniformNames_ptr, uniformNames.Length);
                }
            }
            /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
            public static unsafe void GetUniformIndices(int program, int uniformCount, string[] uniformNames, uint[] uniformIndices)
            {
                fixed (uint* uniformIndices_ptr = uniformIndices)
                {
                    byte** uniformNames_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(uniformNames);
                    GetUniformIndices(program, uniformCount, uniformNames_ptr, uniformIndices_ptr);
                    MarshalTk.FreeStringArrayCoTaskMem((IntPtr)uniformNames_ptr, uniformNames.Length);
                }
            }
            /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
            public static unsafe uint GetUniformIndices(int program, int uniformCount, string[] uniformNames)
            {
                uint uniformIndices;
                uint* uniformIndices_ptr = &uniformIndices;
                {
                    byte** uniformNames_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(uniformNames);
                    GetUniformIndices(program, uniformCount, uniformNames_ptr, uniformIndices_ptr);
                    MarshalTk.FreeStringArrayCoTaskMem((IntPtr)uniformNames_ptr, uniformNames.Length);
                }
                return uniformIndices;
            }
            /// <inheritdoc cref="GetUniformIndices(int, int, byte**, uint*)"/>
            public static unsafe void GetUniformIndices(int program, int uniformCount, string[] uniformNames, out uint uniformIndices)
            {
                fixed (uint* uniformIndices_ptr = &uniformIndices)
                {
                    byte** uniformNames_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(uniformNames);
                    GetUniformIndices(program, uniformCount, uniformNames_ptr, uniformIndices_ptr);
                    MarshalTk.FreeStringArrayCoTaskMem((IntPtr)uniformNames_ptr, uniformNames.Length);
                }
            }
            /// <inheritdoc cref="GetUniformivARB(GLHandleARB, int, int*)"/>
            public static unsafe void GetUniformivARB(GLHandleARB programObj, int location, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetUniformivARB(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformivARB(GLHandleARB, int, int*)"/>
            public static unsafe void GetUniformivARB(GLHandleARB programObj, int location, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetUniformivARB(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformivARB(GLHandleARB, int, int*)"/>
            public static unsafe int GetUniformivARB(GLHandleARB programObj, int location)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetUniformivARB(programObj, location, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetUniformivARB(GLHandleARB, int, int*)"/>
            public static unsafe void GetUniformivARB(GLHandleARB programObj, int location, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetUniformivARB(programObj, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformLocationARB(GLHandleARB, byte*)"/>
            public static unsafe int GetUniformLocationARB(GLHandleARB programObj, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetUniformLocationARB(programObj, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
            public static unsafe uint GetUniformSubroutineui(ShaderType shadertype, int location)
            {
                uint parameters;
                uint* parameters_ptr = &parameters;
                {
                    GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetUniformSubroutineuiv(ShaderType, int, uint*)"/>
            public static unsafe void GetUniformSubroutineui(ShaderType shadertype, int location, out uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetUniformSubroutineuiv(shadertype, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vARB(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vARB(int program, int location, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64vARB(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vARB(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vARB(int program, int location, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64vARB(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vARB(int, int, ulong*)"/>
            public static unsafe ulong GetUniformui64vARB(int program, int location)
            {
                ulong parameters;
                ulong* parameters_ptr = &parameters;
                {
                    GetUniformui64vARB(program, location, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetUniformui64vARB(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vARB(int program, int location, out ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetUniformui64vARB(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIndexed64iv(int, uint, VertexArrayPName, long*)"/>
            public static unsafe void GetVertexArrayIndexed64iv(int vaobj, uint index, VertexArrayPName pname, Span<long> param)
            {
                fixed (long* param_ptr = param)
                {
                    GetVertexArrayIndexed64iv(vaobj, index, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIndexed64iv(int, uint, VertexArrayPName, long*)"/>
            public static unsafe void GetVertexArrayIndexed64iv(int vaobj, uint index, VertexArrayPName pname, long[] param)
            {
                fixed (long* param_ptr = param)
                {
                    GetVertexArrayIndexed64iv(vaobj, index, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIndexed64iv(int, uint, VertexArrayPName, long*)"/>
            public static unsafe void GetVertexArrayIndexed64iv(int vaobj, uint index, VertexArrayPName pname, ref long param)
            {
                fixed (long* param_ptr = &param)
                {
                    GetVertexArrayIndexed64iv(vaobj, index, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIndexediv(int, uint, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayIndexedi(int vaobj, uint index, VertexArrayPName pname, Span<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    GetVertexArrayIndexediv(vaobj, index, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIndexediv(int, uint, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayIndexedi(int vaobj, uint index, VertexArrayPName pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    GetVertexArrayIndexediv(vaobj, index, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIndexediv(int, uint, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayIndexedi(int vaobj, uint index, VertexArrayPName pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetVertexArrayIndexediv(vaobj, index, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayiv(int, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayi(int vaobj, VertexArrayPName pname, Span<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    GetVertexArrayiv(vaobj, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayiv(int, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayi(int vaobj, VertexArrayPName pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    GetVertexArrayiv(vaobj, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayiv(int, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayi(int vaobj, VertexArrayPName pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetVertexArrayiv(vaobj, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribdvARB(uint, VertexAttribPropertyARB, double*)"/>
            public static unsafe void GetVertexAttribdvARB(uint index, VertexAttribPropertyARB pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribdvARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribdvARB(uint, VertexAttribPropertyARB, double*)"/>
            public static unsafe void GetVertexAttribdvARB(uint index, VertexAttribPropertyARB pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribdvARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribdvARB(uint, VertexAttribPropertyARB, double*)"/>
            public static unsafe void GetVertexAttribdvARB(uint index, VertexAttribPropertyARB pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetVertexAttribdvARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfvARB(uint, VertexAttribPropertyARB, float*)"/>
            public static unsafe void GetVertexAttribfvARB(uint index, VertexAttribPropertyARB pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribfvARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfvARB(uint, VertexAttribPropertyARB, float*)"/>
            public static unsafe void GetVertexAttribfvARB(uint index, VertexAttribPropertyARB pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribfvARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfvARB(uint, VertexAttribPropertyARB, float*)"/>
            public static unsafe void GetVertexAttribfvARB(uint index, VertexAttribPropertyARB pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetVertexAttribfvARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribivARB(uint, VertexAttribPropertyARB, int*)"/>
            public static unsafe void GetVertexAttribivARB(uint index, VertexAttribPropertyARB pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribivARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribivARB(uint, VertexAttribPropertyARB, int*)"/>
            public static unsafe void GetVertexAttribivARB(uint index, VertexAttribPropertyARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribivARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribivARB(uint, VertexAttribPropertyARB, int*)"/>
            public static unsafe void GetVertexAttribivARB(uint index, VertexAttribPropertyARB pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVertexAttribivARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribLdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribLdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
            public static unsafe double GetVertexAttribLd(uint index, VertexAttribEnum pname)
            {
                double parameters;
                double* parameters_ptr = &parameters;
                {
                    GetVertexAttribLdv(index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVertexAttribLdv(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLd(uint index, VertexAttribEnum pname, out double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetVertexAttribLdv(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLui64vARB(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe void GetVertexAttribLui64vARB(uint index, VertexAttribEnum pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetVertexAttribLui64vARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLui64vARB(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe void GetVertexAttribLui64vARB(uint index, VertexAttribEnum pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetVertexAttribLui64vARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLui64vARB(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe void GetVertexAttribLui64vARB(uint index, VertexAttribEnum pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetVertexAttribLui64vARB(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
            public static unsafe void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, ReadOnlySpan<InvalidateFramebufferAttachment> attachments)
            {
                fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateFramebuffer(target, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
            public static unsafe void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, InvalidateFramebufferAttachment[] attachments)
            {
                fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateFramebuffer(target, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*)"/>
            public static unsafe void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, ref readonly InvalidateFramebufferAttachment attachments)
            {
                fixed (InvalidateFramebufferAttachment* attachments_ptr = &attachments)
                {
                    InvalidateFramebuffer(target, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
            public static unsafe void InvalidateNamedFramebufferData(int framebuffer, int numAttachments, ReadOnlySpan<FramebufferAttachment> attachments)
            {
                fixed (FramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
            public static unsafe void InvalidateNamedFramebufferData(int framebuffer, int numAttachments, FramebufferAttachment[] attachments)
            {
                fixed (FramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferData(int, int, FramebufferAttachment*)"/>
            public static unsafe void InvalidateNamedFramebufferData(int framebuffer, int numAttachments, ref readonly FramebufferAttachment attachments)
            {
                fixed (FramebufferAttachment* attachments_ptr = &attachments)
                {
                    InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments_ptr);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, int numAttachments, ReadOnlySpan<FramebufferAttachment> attachments, int x, int y, int width, int height)
            {
                fixed (FramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, int numAttachments, FramebufferAttachment[] attachments, int x, int y, int width, int height)
            {
                fixed (FramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="InvalidateNamedFramebufferSubData(int, int, FramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateNamedFramebufferSubData(int framebuffer, int numAttachments, ref readonly FramebufferAttachment attachments, int x, int y, int width, int height)
            {
                fixed (FramebufferAttachment* attachments_ptr = &attachments)
                {
                    InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, ReadOnlySpan<InvalidateFramebufferAttachment> attachments, int x, int y, int width, int height)
            {
                fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, InvalidateFramebufferAttachment[] attachments, int x, int y, int width, int height)
            {
                fixed (InvalidateFramebufferAttachment* attachments_ptr = attachments)
                {
                    InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="InvalidateSubFramebuffer(FramebufferTarget, int, InvalidateFramebufferAttachment*, int, int, int, int)"/>
            public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, ref readonly InvalidateFramebufferAttachment attachments, int x, int y, int width, int height)
            {
                fixed (InvalidateFramebufferAttachment* attachments_ptr = &attachments)
                {
                    InvalidateSubFramebuffer(target, numAttachments, attachments_ptr, x, y, width, height);
                }
            }
            /// <inheritdoc cref="IsNamedStringARB(int, byte*)"/>
            public static unsafe bool IsNamedStringARB(int namelen, string name)
            {
                bool returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = IsNamedStringARB(namelen, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="LoadTransposeMatrixdARB(double*)"/>
            public static unsafe void LoadTransposeMatrixdARB(ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    LoadTransposeMatrixdARB(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixdARB(double*)"/>
            public static unsafe void LoadTransposeMatrixdARB(double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    LoadTransposeMatrixdARB(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixdARB(double*)"/>
            public static unsafe void LoadTransposeMatrixdARB(ref readonly double m)
            {
                fixed (double* m_ptr = &m)
                {
                    LoadTransposeMatrixdARB(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixfARB(float*)"/>
            public static unsafe void LoadTransposeMatrixfARB(ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    LoadTransposeMatrixfARB(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixfARB(float*)"/>
            public static unsafe void LoadTransposeMatrixfARB(float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    LoadTransposeMatrixfARB(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixfARB(float*)"/>
            public static unsafe void LoadTransposeMatrixfARB(ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    LoadTransposeMatrixfARB(m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexPointerARB(int, MatrixIndexPointerTypeARB, int, void*)"/>
            public static unsafe void MatrixIndexPointerARB(int size, MatrixIndexPointerTypeARB type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                MatrixIndexPointerARB(size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="MatrixIndexPointerARB(int, MatrixIndexPointerTypeARB, int, void*)"/>
            public static unsafe void MatrixIndexPointerARB<T1>(int size, MatrixIndexPointerTypeARB type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    MatrixIndexPointerARB(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexPointerARB(int, MatrixIndexPointerTypeARB, int, void*)"/>
            public static unsafe void MatrixIndexPointerARB<T1>(int size, MatrixIndexPointerTypeARB type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    MatrixIndexPointerARB(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexPointerARB(int, MatrixIndexPointerTypeARB, int, void*)"/>
            public static unsafe void MatrixIndexPointerARB<T1>(int size, MatrixIndexPointerTypeARB type, int stride, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    MatrixIndexPointerARB(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexubvARB(int, byte*)"/>
            public static unsafe void MatrixIndexubvARB(int size, ReadOnlySpan<byte> indices)
            {
                fixed (byte* indices_ptr = indices)
                {
                    MatrixIndexubvARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexubvARB(int, byte*)"/>
            public static unsafe void MatrixIndexubvARB(int size, byte[] indices)
            {
                fixed (byte* indices_ptr = indices)
                {
                    MatrixIndexubvARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexubvARB(int, byte*)"/>
            public static unsafe void MatrixIndexubvARB(int size, ref readonly byte indices)
            {
                fixed (byte* indices_ptr = &indices)
                {
                    MatrixIndexubvARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexuivARB(int, uint*)"/>
            public static unsafe void MatrixIndexuivARB(int size, ReadOnlySpan<uint> indices)
            {
                fixed (uint* indices_ptr = indices)
                {
                    MatrixIndexuivARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexuivARB(int, uint*)"/>
            public static unsafe void MatrixIndexuivARB(int size, uint[] indices)
            {
                fixed (uint* indices_ptr = indices)
                {
                    MatrixIndexuivARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexuivARB(int, uint*)"/>
            public static unsafe void MatrixIndexuivARB(int size, ref readonly uint indices)
            {
                fixed (uint* indices_ptr = &indices)
                {
                    MatrixIndexuivARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexusvARB(int, ushort*)"/>
            public static unsafe void MatrixIndexusvARB(int size, ReadOnlySpan<ushort> indices)
            {
                fixed (ushort* indices_ptr = indices)
                {
                    MatrixIndexusvARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexusvARB(int, ushort*)"/>
            public static unsafe void MatrixIndexusvARB(int size, ushort[] indices)
            {
                fixed (ushort* indices_ptr = indices)
                {
                    MatrixIndexusvARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MatrixIndexusvARB(int, ushort*)"/>
            public static unsafe void MatrixIndexusvARB(int size, ref readonly ushort indices)
            {
                fixed (ushort* indices_ptr = &indices)
                {
                    MatrixIndexusvARB(size, indices_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect(PrimitiveType mode, IntPtr indirect, int drawcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawArraysIndirect(mode, indirect_vptr, drawcount, stride);
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, ReadOnlySpan<T1> indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, T1[] indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirect(PrimitiveType, void*, int, int)"/>
            public static unsafe void MultiDrawArraysIndirect<T1>(PrimitiveType mode, ref readonly T1 indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawArraysIndirect(mode, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectCountARB(PrimitiveType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectCountARB(PrimitiveType mode, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawArraysIndirectCountARB(mode, indirect_vptr, drawcount, maxdrawcount, stride);
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectCountARB(PrimitiveType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectCountARB<T1>(PrimitiveType mode, ReadOnlySpan<T1> indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirectCountARB(mode, indirect_ptr, drawcount, maxdrawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectCountARB(PrimitiveType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectCountARB<T1>(PrimitiveType mode, T1[] indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirectCountARB(mode, indirect_ptr, drawcount, maxdrawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectCountARB(PrimitiveType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectCountARB<T1>(PrimitiveType mode, ref readonly T1 indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawArraysIndirectCountARB(mode, indirect_ptr, drawcount, maxdrawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
            public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int drawcount, ReadOnlySpan<int> basevertex)
            {
                fixed (int* basevertex_ptr = basevertex)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
            public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int drawcount, int[] basevertex)
            {
                fixed (int* basevertex_ptr = basevertex)
                {
                    fixed (int* count_ptr = count)
                    {
                        MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawElementsBaseVertex(PrimitiveType, int*, DrawElementsType, void**, int, int*)"/>
            public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, ref readonly int count, DrawElementsType type, void** indices, int drawcount, ref readonly int basevertex)
            {
                fixed (int* count_ptr = &count)
                fixed (int* basevertex_ptr = &basevertex)
                {
                    MultiDrawElementsBaseVertex(mode, count_ptr, type, indices, drawcount, basevertex_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawElementsIndirect(mode, type, indirect_vptr, drawcount, stride);
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, T1[] indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirect(PrimitiveType, DrawElementsType, void*, int, int)"/>
            public static unsafe void MultiDrawElementsIndirect<T1>(PrimitiveType mode, DrawElementsType type, ref readonly T1 indirect, int drawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawElementsIndirect(mode, type, indirect_ptr, drawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectCountARB(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectCountARB(PrimitiveType mode, DrawElementsType type, IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawElementsIndirectCountARB(mode, type, indirect_vptr, drawcount, maxdrawcount, stride);
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectCountARB(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectCountARB<T1>(PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirectCountARB(mode, type, indirect_ptr, drawcount, maxdrawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectCountARB(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectCountARB<T1>(PrimitiveType mode, DrawElementsType type, T1[] indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirectCountARB(mode, type, indirect_ptr, drawcount, maxdrawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectCountARB(PrimitiveType, DrawElementsType, void*, IntPtr, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectCountARB<T1>(PrimitiveType mode, DrawElementsType type, ref readonly T1 indirect, IntPtr drawcount, int maxdrawcount, int stride)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawElementsIndirectCountARB(mode, type, indirect_ptr, drawcount, maxdrawcount, stride);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord1dvARB(TextureUnit target, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    MultiTexCoord1dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord1fvARB(TextureUnit target, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MultiTexCoord1fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord1ivARB(TextureUnit target, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    MultiTexCoord1ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord1svARB(TextureUnit target, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    MultiTexCoord1svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord2dvARB(TextureUnit target, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord2dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord2dvARB(TextureUnit target, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord2dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord2dvARB(TextureUnit target, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    MultiTexCoord2dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord2fvARB(TextureUnit target, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord2fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord2fvARB(TextureUnit target, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord2fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord2fvARB(TextureUnit target, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MultiTexCoord2fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2ivARB(TextureUnit target, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord2ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2ivARB(TextureUnit target, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord2ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2ivARB(TextureUnit target, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    MultiTexCoord2ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord2svARB(TextureUnit target, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord2svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord2svARB(TextureUnit target, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord2svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord2svARB(TextureUnit target, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    MultiTexCoord2svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord3dvARB(TextureUnit target, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord3dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord3dvARB(TextureUnit target, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord3dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord3dvARB(TextureUnit target, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    MultiTexCoord3dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord3fvARB(TextureUnit target, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord3fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord3fvARB(TextureUnit target, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord3fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord3fvARB(TextureUnit target, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MultiTexCoord3fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3ivARB(TextureUnit target, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord3ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3ivARB(TextureUnit target, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord3ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3ivARB(TextureUnit target, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    MultiTexCoord3ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord3svARB(TextureUnit target, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord3svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord3svARB(TextureUnit target, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord3svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord3svARB(TextureUnit target, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    MultiTexCoord3svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord4dvARB(TextureUnit target, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord4dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord4dvARB(TextureUnit target, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    MultiTexCoord4dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4dvARB(TextureUnit, double*)"/>
            public static unsafe void MultiTexCoord4dvARB(TextureUnit target, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    MultiTexCoord4dvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord4fvARB(TextureUnit target, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord4fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord4fvARB(TextureUnit target, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    MultiTexCoord4fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4fvARB(TextureUnit, float*)"/>
            public static unsafe void MultiTexCoord4fvARB(TextureUnit target, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MultiTexCoord4fvARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4ivARB(TextureUnit target, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord4ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4ivARB(TextureUnit target, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    MultiTexCoord4ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4ivARB(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4ivARB(TextureUnit target, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    MultiTexCoord4ivARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord4svARB(TextureUnit target, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord4svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord4svARB(TextureUnit target, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    MultiTexCoord4svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4svARB(TextureUnit, short*)"/>
            public static unsafe void MultiTexCoord4svARB(TextureUnit target, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    MultiTexCoord4svARB(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP1uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, ref readonly uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    MultiTexCoordP1uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP2uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, ref readonly uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    MultiTexCoordP2uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP3uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, ref readonly uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    MultiTexCoordP3uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordP4uiv(TextureUnit, TexCoordPointerType, uint*)"/>
            public static unsafe void MultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, ref readonly uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    MultiTexCoordP4uiv(texture, type, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixdARB(double*)"/>
            public static unsafe void MultTransposeMatrixdARB(ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MultTransposeMatrixdARB(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixdARB(double*)"/>
            public static unsafe void MultTransposeMatrixdARB(double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MultTransposeMatrixdARB(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixdARB(double*)"/>
            public static unsafe void MultTransposeMatrixdARB(ref readonly double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MultTransposeMatrixdARB(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixfARB(float*)"/>
            public static unsafe void MultTransposeMatrixfARB(ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MultTransposeMatrixfARB(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixfARB(float*)"/>
            public static unsafe void MultTransposeMatrixfARB(float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MultTransposeMatrixfARB(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixfARB(float*)"/>
            public static unsafe void MultTransposeMatrixfARB(ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MultTransposeMatrixfARB(m_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, BufferUsage)"/>
            public static unsafe void NamedBufferData(int buffer, nint size, IntPtr data, BufferUsage usage)
            {
                void* data_vptr = (void*)data;
                NamedBufferData(buffer, size, data_vptr, usage);
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, BufferUsage)"/>
            public static unsafe void NamedBufferData<T1>(int buffer, nint size, ReadOnlySpan<T1> data, BufferUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferData(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, BufferUsage)"/>
            public static unsafe void NamedBufferData<T1>(int buffer, nint size, T1[] data, BufferUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferData(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferData(int, nint, void*, BufferUsage)"/>
            public static unsafe void NamedBufferData<T1>(int buffer, nint size, ref readonly T1 data, BufferUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferData(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage(int buffer, nint size, IntPtr data, BufferStorageMask flags)
            {
                void* data_vptr = (void*)data;
                NamedBufferStorage(buffer, size, data_vptr, flags);
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage<T1>(int buffer, nint size, ReadOnlySpan<T1> data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferStorage(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage<T1>(int buffer, nint size, T1[] data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferStorage(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorage(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorage<T1>(int buffer, nint size, ref readonly T1 data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferStorage(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData(int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                NamedBufferSubData(buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferSubData(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubData<T1>(int buffer, IntPtr offset, nint size, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferSubData(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
            public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, int n, ReadOnlySpan<ColorBuffer> bufs)
            {
                fixed (ColorBuffer* bufs_ptr = bufs)
                {
                    NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
            public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, int n, ColorBuffer[] bufs)
            {
                fixed (ColorBuffer* bufs_ptr = bufs)
                {
                    NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferDrawBuffers(int, int, ColorBuffer*)"/>
            public static unsafe void NamedFramebufferDrawBuffers(int framebuffer, int n, ref readonly ColorBuffer bufs)
            {
                fixed (ColorBuffer* bufs_ptr = &bufs)
                {
                    NamedFramebufferDrawBuffers(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferSampleLocationsfvARB(int, uint, int, float*)"/>
            public static unsafe void NamedFramebufferSampleLocationsfvARB(int framebuffer, uint start, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    NamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferSampleLocationsfvARB(int, uint, int, float*)"/>
            public static unsafe void NamedFramebufferSampleLocationsfvARB(int framebuffer, uint start, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    NamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferSampleLocationsfvARB(int, uint, int, float*)"/>
            public static unsafe void NamedFramebufferSampleLocationsfvARB(int framebuffer, uint start, int count, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    NamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="NamedStringARB(All, int, byte*, int, byte*)"/>
            public static unsafe void NamedStringARB(All type, int namelen, string name, int stringlen, string str)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                byte* str_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(str);
                NamedStringARB(type, namelen, name_ptr, stringlen, str_ptr);
                Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="NormalP3uiv(NormalPointerType, uint*)"/>
            public static unsafe void NormalP3ui(NormalPointerType type, ref readonly uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    NormalP3uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
            public static unsafe void PatchParameterf(PatchParameterName pname, ReadOnlySpan<float> values)
            {
                fixed (float* values_ptr = values)
                {
                    PatchParameterfv(pname, values_ptr);
                }
            }
            /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
            public static unsafe void PatchParameterf(PatchParameterName pname, float[] values)
            {
                fixed (float* values_ptr = values)
                {
                    PatchParameterfv(pname, values_ptr);
                }
            }
            /// <inheritdoc cref="PatchParameterfv(PatchParameterName, float*)"/>
            public static unsafe void PatchParameterf(PatchParameterName pname, ref readonly float values)
            {
                fixed (float* values_ptr = &values)
                {
                    PatchParameterfv(pname, values_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvARB(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvARB(PointParameterNameARB pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfvARB(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvARB(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvARB(PointParameterNameARB pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfvARB(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvARB(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvARB(PointParameterNameARB pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    PointParameterfvARB(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
            public static unsafe void ProgramBinary(int program, All binaryFormat, IntPtr binary, int length)
            {
                void* binary_vptr = (void*)binary;
                ProgramBinary(program, binaryFormat, binary_vptr, length);
            }
            /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
            public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, ReadOnlySpan<T1> binary, int length)
                where T1 : unmanaged
            {
                fixed (void* binary_ptr = binary)
                {
                    ProgramBinary(program, binaryFormat, binary_ptr, length);
                }
            }
            /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
            public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, T1[] binary, int length)
                where T1 : unmanaged
            {
                fixed (void* binary_ptr = binary)
                {
                    ProgramBinary(program, binaryFormat, binary_ptr, length);
                }
            }
            /// <inheritdoc cref="ProgramBinary(int, All, void*, int)"/>
            public static unsafe void ProgramBinary<T1>(int program, All binaryFormat, ref readonly T1 binary, int length)
                where T1 : unmanaged
            {
                fixed (void* binary_ptr = &binary)
                {
                    ProgramBinary(program, binaryFormat, binary_ptr, length);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4dvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramEnvParameter4dvARB(ProgramTarget target, uint index, ReadOnlySpan<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    ProgramEnvParameter4dvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4dvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramEnvParameter4dvARB(ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    ProgramEnvParameter4dvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4dvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramEnvParameter4dvARB(ProgramTarget target, uint index, ref readonly double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    ProgramEnvParameter4dvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4fvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramEnvParameter4fvARB(ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramEnvParameter4fvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4fvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramEnvParameter4fvARB(ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramEnvParameter4fvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameter4fvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramEnvParameter4fvARB(ProgramTarget target, uint index, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ProgramEnvParameter4fvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4dvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramLocalParameter4dvARB(ProgramTarget target, uint index, ReadOnlySpan<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    ProgramLocalParameter4dvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4dvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramLocalParameter4dvARB(ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    ProgramLocalParameter4dvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4dvARB(ProgramTarget, uint, double*)"/>
            public static unsafe void ProgramLocalParameter4dvARB(ProgramTarget target, uint index, ref readonly double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    ProgramLocalParameter4dvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4fvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramLocalParameter4fvARB(ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramLocalParameter4fvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4fvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramLocalParameter4fvARB(ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramLocalParameter4fvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameter4fvARB(ProgramTarget, uint, float*)"/>
            public static unsafe void ProgramLocalParameter4fvARB(ProgramTarget target, uint index, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ProgramLocalParameter4fvARB(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramStringARB(ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void ProgramStringARB(ProgramTarget target, ProgramFormat format, int len, IntPtr str)
            {
                void* str_vptr = (void*)str;
                ProgramStringARB(target, format, len, str_vptr);
            }
            /// <inheritdoc cref="ProgramStringARB(ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void ProgramStringARB<T1>(ProgramTarget target, ProgramFormat format, int len, ReadOnlySpan<T1> str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    ProgramStringARB(target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="ProgramStringARB(ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void ProgramStringARB<T1>(ProgramTarget target, ProgramFormat format, int len, T1[] str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    ProgramStringARB(target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="ProgramStringARB(ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void ProgramStringARB<T1>(ProgramTarget target, ProgramFormat format, int len, ref readonly T1 str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = &str)
                {
                    ProgramStringARB(target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform1d(int program, int location, int count, ref readonly double value)
            {
                fixed (double* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform1dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform1f(int program, int location, int count, ref readonly float value)
            {
                fixed (float* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform1fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform1i64vARB(int program, int location, int count, ref readonly long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform1i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform1i(int program, int location, int count, ref readonly int value)
            {
                fixed (int* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform1iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform1ui64vARB(int program, int location, int count, ref readonly ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform1ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform1ui(int program, int location, int count, ref readonly uint value)
            {
                fixed (uint* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform1uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2d(int program, int location, int count, ref readonly Vector2d value)
            {
                fixed (Vector2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2d(int program, int location, int count, ReadOnlySpan<Vector2d> value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2d(int program, int location, int count, Vector2d[] value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, ref readonly Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, ref readonly System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2f(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vARB(int program, int location, int count, ref readonly Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vARB(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vARB(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vARB(int program, int location, int count, ref readonly System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vARB(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vARB(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2i(int program, int location, int count, ref readonly Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2i(int program, int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2i(int program, int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vARB(int program, int location, int count, ref readonly Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vARB(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vARB(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vARB(int program, int location, int count, ref readonly System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vARB(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vARB(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2ui(int program, int location, int count, ref readonly Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2ui(int program, int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2ui(int program, int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3d(int program, int location, int count, ref readonly Vector3d value)
            {
                fixed (Vector3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3d(int program, int location, int count, ReadOnlySpan<Vector3d> value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3d(int program, int location, int count, Vector3d[] value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, ref readonly Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, ref readonly System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3f(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vARB(int program, int location, int count, ref readonly Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vARB(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vARB(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vARB(int program, int location, int count, ref readonly System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vARB(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vARB(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3i(int program, int location, int count, ref readonly Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3i(int program, int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3i(int program, int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vARB(int program, int location, int count, ref readonly Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vARB(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vARB(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vARB(int program, int location, int count, ref readonly System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vARB(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vARB(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3ui(int program, int location, int count, ref readonly Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3ui(int program, int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3ui(int program, int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4d(int program, int location, int count, ref readonly Vector4d value)
            {
                fixed (Vector4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4d(int program, int location, int count, ReadOnlySpan<Vector4d> value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dv(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4d(int program, int location, int count, Vector4d[] value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, ref readonly Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, ref readonly System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fv(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4f(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vARB(int program, int location, int count, ref readonly Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vARB(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vARB(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vARB(int program, int location, int count, ref readonly System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vARB(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vARB(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vARB(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4i(int program, int location, int count, ref readonly Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4i(int program, int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4iv(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4i(int program, int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4iv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vARB(int program, int location, int count, ref readonly Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vARB(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vARB(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vARB(int program, int location, int count, ref readonly System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vARB(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vARB(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vARB(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4ui(int program, int location, int count, ref readonly Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4ui(int program, int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uiv(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4ui(int program, int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uiv(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64vARB(int program, int location, int count, ReadOnlySpan<ulong> values)
            {
                fixed (ulong* values_ptr = values)
                {
                    ProgramUniformHandleui64vARB(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64vARB(int program, int location, int count, ulong[] values)
            {
                fixed (ulong* values_ptr = values)
                {
                    ProgramUniformHandleui64vARB(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64vARB(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64vARB(int program, int location, int count, ref readonly ulong values)
            {
                fixed (ulong* values_ptr = &values)
                {
                    ProgramUniformHandleui64vARB(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, ref readonly Matrix2d value)
            {
                fixed (Matrix2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2d> value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2d(int program, int location, int count, bool transpose, Matrix2d[] value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, ref readonly Matrix2 value)
            {
                fixed (Matrix2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2> value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2f(int program, int location, int count, bool transpose, Matrix2[] value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, ref readonly Matrix2x3d value)
            {
                fixed (Matrix2x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3d> value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3d(int program, int location, int count, bool transpose, Matrix2x3d[] value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, ref readonly Matrix2x3 value)
            {
                fixed (Matrix2x3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3> value)
            {
                fixed (Matrix2x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3f(int program, int location, int count, bool transpose, Matrix2x3[] value)
            {
                fixed (Matrix2x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, ref readonly Matrix2x4d value)
            {
                fixed (Matrix2x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4d> value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4d(int program, int location, int count, bool transpose, Matrix2x4d[] value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, ref readonly Matrix2x4 value)
            {
                fixed (Matrix2x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4> value)
            {
                fixed (Matrix2x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4f(int program, int location, int count, bool transpose, Matrix2x4[] value)
            {
                fixed (Matrix2x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, ref readonly Matrix3d value)
            {
                fixed (Matrix3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3d> value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3d(int program, int location, int count, bool transpose, Matrix3d[] value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, ref readonly Matrix3 value)
            {
                fixed (Matrix3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3> value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3f(int program, int location, int count, bool transpose, Matrix3[] value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, ref readonly Matrix3x2d value)
            {
                fixed (Matrix3x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2d> value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2d(int program, int location, int count, bool transpose, Matrix3x2d[] value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ref readonly Matrix3x2 value)
            {
                fixed (Matrix3x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2> value)
            {
                fixed (Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, Matrix3x2[] value)
            {
                fixed (Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ref readonly System.Numerics.Matrix3x2 value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix3x2> value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2f(int program, int location, int count, bool transpose, System.Numerics.Matrix3x2[] value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, ref readonly Matrix3x4d value)
            {
                fixed (Matrix3x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4d> value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4d(int program, int location, int count, bool transpose, Matrix3x4d[] value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, ref readonly Matrix3x4 value)
            {
                fixed (Matrix3x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4> value)
            {
                fixed (Matrix3x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4f(int program, int location, int count, bool transpose, Matrix3x4[] value)
            {
                fixed (Matrix3x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, ref readonly Matrix4d value)
            {
                fixed (Matrix4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4d> value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4d(int program, int location, int count, bool transpose, Matrix4d[] value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ref readonly Matrix4 value)
            {
                fixed (Matrix4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4> value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, Matrix4[] value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ref readonly System.Numerics.Matrix4x4 value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix4x4> value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4f(int program, int location, int count, bool transpose, System.Numerics.Matrix4x4[] value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, ref readonly Matrix4x2d value)
            {
                fixed (Matrix4x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2d> value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2d(int program, int location, int count, bool transpose, Matrix4x2d[] value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, ref readonly Matrix4x2 value)
            {
                fixed (Matrix4x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2> value)
            {
                fixed (Matrix4x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2f(int program, int location, int count, bool transpose, Matrix4x2[] value)
            {
                fixed (Matrix4x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, ref readonly Matrix4x3d value)
            {
                fixed (Matrix4x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3d> value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dv(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3d(int program, int location, int count, bool transpose, Matrix4x3d[] value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, ref readonly Matrix4x3 value)
            {
                fixed (Matrix4x3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3> value)
            {
                fixed (Matrix4x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fv(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3f(int program, int location, int count, bool transpose, Matrix4x3[] value)
            {
                fixed (Matrix4x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fv(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixelsARB(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsARB(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ReadnPixelsARB(x, y, width, height, format, type, bufSize, data_vptr);
            }
            /// <inheritdoc cref="ReadnPixelsARB(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsARB<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, Span<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ReadnPixelsARB(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixelsARB(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsARB<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ReadnPixelsARB(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixelsARB(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsARB<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ReadnPixelsARB(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, ReadOnlySpan<float> param)
            {
                fixed (float* param_ptr = param)
                {
                    SamplerParameterfv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, float[] param)
            {
                fixed (float* param_ptr = param)
                {
                    SamplerParameterfv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterfv(int, SamplerParameterF, float*)"/>
            public static unsafe void SamplerParameterf(int sampler, SamplerParameterF pname, ref readonly float param)
            {
                fixed (float* param_ptr = &param)
                {
                    SamplerParameterfv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    SamplerParameterIiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    SamplerParameterIiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIiv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameterIi(int sampler, SamplerParameterI pname, ref readonly int param)
            {
                fixed (int* param_ptr = &param)
                {
                    SamplerParameterIiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, ReadOnlySpan<uint> param)
            {
                fixed (uint* param_ptr = param)
                {
                    SamplerParameterIuiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, uint[] param)
            {
                fixed (uint* param_ptr = param)
                {
                    SamplerParameterIuiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameterIuiv(int, SamplerParameterI, uint*)"/>
            public static unsafe void SamplerParameterIui(int sampler, SamplerParameterI pname, ref readonly uint param)
            {
                fixed (uint* param_ptr = &param)
                {
                    SamplerParameterIuiv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    SamplerParameteriv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    SamplerParameteriv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="SamplerParameteriv(int, SamplerParameterI, int*)"/>
            public static unsafe void SamplerParameteri(int sampler, SamplerParameterI pname, ref readonly int param)
            {
                fixed (int* param_ptr = &param)
                {
                    SamplerParameteriv(sampler, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
            public static unsafe void ScissorArray(uint first, int count, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
            public static unsafe void ScissorArray(uint first, int count, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorArrayv(uint, int, int*)"/>
            public static unsafe void ScissorArray(uint first, int count, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    ScissorArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
            public static unsafe void ScissorIndexed(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorIndexedv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
            public static unsafe void ScissorIndexed(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorIndexedv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorIndexedv(uint, int*)"/>
            public static unsafe void ScissorIndexed(uint index, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    ScissorIndexedv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorP3uiv(ColorPointerType, uint*)"/>
            public static unsafe void SecondaryColorP3ui(ColorPointerType type, ref readonly uint color)
            {
                fixed (uint* color_ptr = &color)
                {
                    SecondaryColorP3uiv(type, color_ptr);
                }
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column)
            {
                void* row_vptr = (void*)row;
                void* column_vptr = (void*)column;
                SeparableFilter2D(target, internalformat, width, height, format, type, row_vptr, column_vptr);
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> row, ReadOnlySpan<T2> column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* column_ptr = column)
                {
                    fixed (void* row_ptr = row)
                    {
                        SeparableFilter2D(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T1[] row, T2[] column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* column_ptr = column)
                {
                    fixed (void* row_ptr = row)
                    {
                        SeparableFilter2D(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SeparableFilter2D(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2D<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ref readonly T1 row, ref readonly T2 column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                {
                    SeparableFilter2D(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary(int count, ReadOnlySpan<int> shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
            {
                fixed (int* shaders_ptr = shaders)
                {
                    void* binary_vptr = (void*)binary;
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary(int count, int[] shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
            {
                fixed (int* shaders_ptr = shaders)
                {
                    void* binary_vptr = (void*)binary;
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary(int count, ref readonly int shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
            {
                fixed (int* shaders_ptr = &shaders)
                {
                    void* binary_vptr = (void*)binary;
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_vptr, length);
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary<T1>(int count, ReadOnlySpan<int> shaders, ShaderBinaryFormat binaryFormat, ReadOnlySpan<T1> binary, int length)
                where T1 : unmanaged
            {
                fixed (void* binary_ptr = binary)
                {
                    fixed (int* shaders_ptr = shaders)
                    {
                        ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
                    }
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary<T1>(int count, int[] shaders, ShaderBinaryFormat binaryFormat, T1[] binary, int length)
                where T1 : unmanaged
            {
                fixed (void* binary_ptr = binary)
                {
                    fixed (int* shaders_ptr = shaders)
                    {
                        ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
                    }
                }
            }
            /// <inheritdoc cref="ShaderBinary(int, int*, ShaderBinaryFormat, void*, int)"/>
            public static unsafe void ShaderBinary<T1>(int count, ref readonly int shaders, ShaderBinaryFormat binaryFormat, ref readonly T1 binary, int length)
                where T1 : unmanaged
            {
                fixed (int* shaders_ptr = &shaders)
                fixed (void* binary_ptr = &binary)
                {
                    ShaderBinary(count, shaders_ptr, binaryFormat, binary_ptr, length);
                }
            }
            /// <inheritdoc cref="ShaderSourceARB(GLHandleARB, int, byte**, int*)"/>
            public static unsafe void ShaderSourceARB(GLHandleARB shaderObj, int count, string[] str, ReadOnlySpan<int> length)
            {
                fixed (int* length_ptr = length)
                {
                    byte** str_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(str);
                    ShaderSourceARB(shaderObj, count, str_ptr, length_ptr);
                    MarshalTk.FreeStringArrayCoTaskMem((IntPtr)str_ptr, str.Length);
                }
            }
            /// <inheritdoc cref="ShaderSourceARB(GLHandleARB, int, byte**, int*)"/>
            public static unsafe void ShaderSourceARB(GLHandleARB shaderObj, int count, string[] str, int[] length)
            {
                fixed (int* length_ptr = length)
                {
                    byte** str_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(str);
                    ShaderSourceARB(shaderObj, count, str_ptr, length_ptr);
                    MarshalTk.FreeStringArrayCoTaskMem((IntPtr)str_ptr, str.Length);
                }
            }
            /// <inheritdoc cref="ShaderSourceARB(GLHandleARB, int, byte**, int*)"/>
            public static unsafe void ShaderSourceARB(GLHandleARB shaderObj, int count, string[] str, ref readonly int length)
            {
                fixed (int* length_ptr = &length)
                {
                    byte** str_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(str);
                    ShaderSourceARB(shaderObj, count, str_ptr, length_ptr);
                    MarshalTk.FreeStringArrayCoTaskMem((IntPtr)str_ptr, str.Length);
                }
            }
            /// <inheritdoc cref="SpecializeShaderARB(int, byte*, uint, uint*, uint*)"/>
            public static unsafe void SpecializeShaderARB(int shader, string pEntryPoint, uint numSpecializationConstants, ReadOnlySpan<uint> pConstantIndex, ReadOnlySpan<uint> pConstantValue)
            {
                fixed (uint* pConstantValue_ptr = pConstantValue)
                {
                    fixed (uint* pConstantIndex_ptr = pConstantIndex)
                    {
                        byte* pEntryPoint_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(pEntryPoint);
                        SpecializeShaderARB(shader, pEntryPoint_ptr, numSpecializationConstants, pConstantIndex_ptr, pConstantValue_ptr);
                        Marshal.FreeCoTaskMem((IntPtr)pEntryPoint_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SpecializeShaderARB(int, byte*, uint, uint*, uint*)"/>
            public static unsafe void SpecializeShaderARB(int shader, string pEntryPoint, uint numSpecializationConstants, uint[] pConstantIndex, uint[] pConstantValue)
            {
                fixed (uint* pConstantValue_ptr = pConstantValue)
                {
                    fixed (uint* pConstantIndex_ptr = pConstantIndex)
                    {
                        byte* pEntryPoint_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(pEntryPoint);
                        SpecializeShaderARB(shader, pEntryPoint_ptr, numSpecializationConstants, pConstantIndex_ptr, pConstantValue_ptr);
                        Marshal.FreeCoTaskMem((IntPtr)pEntryPoint_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SpecializeShaderARB(int, byte*, uint, uint*, uint*)"/>
            public static unsafe void SpecializeShaderARB(int shader, string pEntryPoint, uint numSpecializationConstants, ref readonly uint pConstantIndex, ref readonly uint pConstantValue)
            {
                fixed (uint* pConstantIndex_ptr = &pConstantIndex)
                fixed (uint* pConstantValue_ptr = &pConstantValue)
                {
                    byte* pEntryPoint_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(pEntryPoint);
                    SpecializeShaderARB(shader, pEntryPoint_ptr, numSpecializationConstants, pConstantIndex_ptr, pConstantValue_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)pEntryPoint_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP1uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP1ui(TexCoordPointerType type, ref readonly uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    TexCoordP1uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP2uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP2ui(TexCoordPointerType type, ref readonly uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    TexCoordP2uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP3uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP3ui(TexCoordPointerType type, ref readonly uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    TexCoordP3uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordP4uiv(TexCoordPointerType, uint*)"/>
            public static unsafe void TexCoordP4ui(TexCoordPointerType type, ref readonly uint coords)
            {
                fixed (uint* coords_ptr = &coords)
                {
                    TexCoordP4uiv(type, coords_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterf(int texture, TextureParameterName pname, ReadOnlySpan<float> param)
            {
                fixed (float* param_ptr = param)
                {
                    TextureParameterfv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterf(int texture, TextureParameterName pname, float[] param)
            {
                fixed (float* param_ptr = param)
                {
                    TextureParameterfv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfv(int, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterf(int texture, TextureParameterName pname, ref readonly float param)
            {
                fixed (float* param_ptr = &param)
                {
                    TextureParameterfv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterIiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterIiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIiv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIi(int texture, TextureParameterName pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TextureParameterIiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TextureParameterIuiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TextureParameterIuiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuiv(int, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIui(int texture, TextureParameterName pname, ref readonly uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    TextureParameterIuiv(texture, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameteri(int texture, TextureParameterName pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    TextureParameteriv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameteri(int texture, TextureParameterName pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    TextureParameteriv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameteriv(int, TextureParameterName, int*)"/>
            public static unsafe void TextureParameteri(int texture, TextureParameterName pname, ref readonly int param)
            {
                fixed (int* param_ptr = &param)
                {
                    TextureParameteriv(texture, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1D(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1D<T1>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1D<T1>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage1D(int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1D<T1>(int texture, int level, int xoffset, int width, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage1D(texture, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage2D(int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2D<T1>(int texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage3D(int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3D<T1>(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
            public static unsafe void Uniform1d(int location, int count, ref readonly double value)
            {
                fixed (double* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform1dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
            public static unsafe void Uniform1d(int location, int count, ReadOnlySpan<double> value)
            {
                fixed (double* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform1dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1dv(int, int, double*)"/>
            public static unsafe void Uniform1d(int location, int count, double[] value)
            {
                fixed (double* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform1dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1fvARB(int, int, float*)"/>
            public static unsafe void Uniform1fvARB(int location, int count, ref readonly float value)
            {
                fixed (float* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform1fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1fvARB(int, int, float*)"/>
            public static unsafe void Uniform1fvARB(int location, int count, ReadOnlySpan<float> value)
            {
                fixed (float* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform1fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1fvARB(int, int, float*)"/>
            public static unsafe void Uniform1fvARB(int location, int count, float[] value)
            {
                fixed (float* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform1fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vARB(int, int, long*)"/>
            public static unsafe void Uniform1i64vARB(int location, int count, ref readonly long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vARB(int, int, long*)"/>
            public static unsafe void Uniform1i64vARB(int location, int count, ReadOnlySpan<long> value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vARB(int, int, long*)"/>
            public static unsafe void Uniform1i64vARB(int location, int count, long[] value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ivARB(int, int, int*)"/>
            public static unsafe void Uniform1ivARB(int location, int count, ref readonly int value)
            {
                fixed (int* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform1ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ivARB(int, int, int*)"/>
            public static unsafe void Uniform1ivARB(int location, int count, ReadOnlySpan<int> value)
            {
                fixed (int* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform1ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ivARB(int, int, int*)"/>
            public static unsafe void Uniform1ivARB(int location, int count, int[] value)
            {
                fixed (int* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform1ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vARB(int location, int count, ref readonly ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vARB(int location, int count, ReadOnlySpan<ulong> value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vARB(int location, int count, ulong[] value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
            public static unsafe void Uniform2d(int location, int count, ref readonly Vector2d value)
            {
                fixed (Vector2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform2dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
            public static unsafe void Uniform2d(int location, int count, ReadOnlySpan<Vector2d> value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform2dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2dv(int, int, double*)"/>
            public static unsafe void Uniform2d(int location, int count, Vector2d[] value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform2dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fvARB(int, int, float*)"/>
            public static unsafe void Uniform2fvARB(int location, int count, ref readonly Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fvARB(int, int, float*)"/>
            public static unsafe void Uniform2fvARB(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fvARB(int, int, float*)"/>
            public static unsafe void Uniform2fvARB(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fvARB(int, int, float*)"/>
            public static unsafe void Uniform2fvARB(int location, int count, ref readonly System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fvARB(int, int, float*)"/>
            public static unsafe void Uniform2fvARB(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2fvARB(int, int, float*)"/>
            public static unsafe void Uniform2fvARB(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform2fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vARB(int, int, long*)"/>
            public static unsafe void Uniform2i64vARB(int location, int count, ref readonly Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vARB(int, int, long*)"/>
            public static unsafe void Uniform2i64vARB(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vARB(int, int, long*)"/>
            public static unsafe void Uniform2i64vARB(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vARB(int, int, long*)"/>
            public static unsafe void Uniform2i64vARB(int location, int count, ref readonly System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vARB(int, int, long*)"/>
            public static unsafe void Uniform2i64vARB(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vARB(int, int, long*)"/>
            public static unsafe void Uniform2i64vARB(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ivARB(int, int, int*)"/>
            public static unsafe void Uniform2ivARB(int location, int count, ref readonly Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform2ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ivARB(int, int, int*)"/>
            public static unsafe void Uniform2ivARB(int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform2ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ivARB(int, int, int*)"/>
            public static unsafe void Uniform2ivARB(int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform2ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vARB(int location, int count, ref readonly Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vARB(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vARB(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vARB(int location, int count, ref readonly System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vARB(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vARB(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
            public static unsafe void Uniform3d(int location, int count, ref readonly Vector3d value)
            {
                fixed (Vector3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform3dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
            public static unsafe void Uniform3d(int location, int count, ReadOnlySpan<Vector3d> value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform3dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3dv(int, int, double*)"/>
            public static unsafe void Uniform3d(int location, int count, Vector3d[] value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform3dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fvARB(int, int, float*)"/>
            public static unsafe void Uniform3fvARB(int location, int count, ref readonly Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fvARB(int, int, float*)"/>
            public static unsafe void Uniform3fvARB(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fvARB(int, int, float*)"/>
            public static unsafe void Uniform3fvARB(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fvARB(int, int, float*)"/>
            public static unsafe void Uniform3fvARB(int location, int count, ref readonly System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fvARB(int, int, float*)"/>
            public static unsafe void Uniform3fvARB(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3fvARB(int, int, float*)"/>
            public static unsafe void Uniform3fvARB(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform3fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vARB(int, int, long*)"/>
            public static unsafe void Uniform3i64vARB(int location, int count, ref readonly Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vARB(int, int, long*)"/>
            public static unsafe void Uniform3i64vARB(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vARB(int, int, long*)"/>
            public static unsafe void Uniform3i64vARB(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vARB(int, int, long*)"/>
            public static unsafe void Uniform3i64vARB(int location, int count, ref readonly System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vARB(int, int, long*)"/>
            public static unsafe void Uniform3i64vARB(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vARB(int, int, long*)"/>
            public static unsafe void Uniform3i64vARB(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ivARB(int, int, int*)"/>
            public static unsafe void Uniform3ivARB(int location, int count, ref readonly Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform3ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ivARB(int, int, int*)"/>
            public static unsafe void Uniform3ivARB(int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform3ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ivARB(int, int, int*)"/>
            public static unsafe void Uniform3ivARB(int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform3ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vARB(int location, int count, ref readonly Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vARB(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vARB(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vARB(int location, int count, ref readonly System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vARB(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vARB(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
            public static unsafe void Uniform4d(int location, int count, ref readonly Vector4d value)
            {
                fixed (Vector4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform4dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
            public static unsafe void Uniform4d(int location, int count, ReadOnlySpan<Vector4d> value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform4dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4dv(int, int, double*)"/>
            public static unsafe void Uniform4d(int location, int count, Vector4d[] value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    Uniform4dv(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fvARB(int, int, float*)"/>
            public static unsafe void Uniform4fvARB(int location, int count, ref readonly Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fvARB(int, int, float*)"/>
            public static unsafe void Uniform4fvARB(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fvARB(int, int, float*)"/>
            public static unsafe void Uniform4fvARB(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fvARB(int, int, float*)"/>
            public static unsafe void Uniform4fvARB(int location, int count, ref readonly System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fvARB(int, int, float*)"/>
            public static unsafe void Uniform4fvARB(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4fvARB(int, int, float*)"/>
            public static unsafe void Uniform4fvARB(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    Uniform4fvARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vARB(int, int, long*)"/>
            public static unsafe void Uniform4i64vARB(int location, int count, ref readonly Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vARB(int, int, long*)"/>
            public static unsafe void Uniform4i64vARB(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vARB(int, int, long*)"/>
            public static unsafe void Uniform4i64vARB(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vARB(int, int, long*)"/>
            public static unsafe void Uniform4i64vARB(int location, int count, ref readonly System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vARB(int, int, long*)"/>
            public static unsafe void Uniform4i64vARB(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vARB(int, int, long*)"/>
            public static unsafe void Uniform4i64vARB(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ivARB(int, int, int*)"/>
            public static unsafe void Uniform4ivARB(int location, int count, ref readonly Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform4ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ivARB(int, int, int*)"/>
            public static unsafe void Uniform4ivARB(int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform4ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ivARB(int, int, int*)"/>
            public static unsafe void Uniform4ivARB(int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    Uniform4ivARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vARB(int location, int count, ref readonly Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vARB(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vARB(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vARB(int location, int count, ref readonly System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vARB(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vARB(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vARB(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64vARB(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64vARB(int location, int count, ReadOnlySpan<ulong> value)
            {
                fixed (ulong* value_ptr = value)
                {
                    UniformHandleui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64vARB(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64vARB(int location, int count, ulong[] value)
            {
                fixed (ulong* value_ptr = value)
                {
                    UniformHandleui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64vARB(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64vARB(int location, int count, ref readonly ulong value)
            {
                fixed (ulong* value_ptr = &value)
                {
                    UniformHandleui64vARB(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2d(int location, int count, bool transpose, ref readonly Matrix2d value)
            {
                fixed (Matrix2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2d(int location, int count, bool transpose, ReadOnlySpan<Matrix2d> value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2d(int location, int count, bool transpose, Matrix2d[] value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix2fvARB(int location, int count, bool transpose, ref readonly Matrix2 value)
            {
                fixed (Matrix2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix2fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix2fvARB(int location, int count, bool transpose, ReadOnlySpan<Matrix2> value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix2fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix2fvARB(int location, int count, bool transpose, Matrix2[] value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix2fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, ref readonly Matrix2x3d value)
            {
                fixed (Matrix2x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, ReadOnlySpan<Matrix2x3d> value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x3d(int location, int count, bool transpose, Matrix2x3d[] value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, ref readonly Matrix2x4d value)
            {
                fixed (Matrix2x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, ReadOnlySpan<Matrix2x4d> value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix2x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix2x4d(int location, int count, bool transpose, Matrix2x4d[] value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix2x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3d(int location, int count, bool transpose, ref readonly Matrix3d value)
            {
                fixed (Matrix3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3d(int location, int count, bool transpose, ReadOnlySpan<Matrix3d> value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3d(int location, int count, bool transpose, Matrix3d[] value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix3fvARB(int location, int count, bool transpose, ref readonly Matrix3 value)
            {
                fixed (Matrix3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix3fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix3fvARB(int location, int count, bool transpose, ReadOnlySpan<Matrix3> value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix3fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix3fvARB(int location, int count, bool transpose, Matrix3[] value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix3fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, ref readonly Matrix3x2d value)
            {
                fixed (Matrix3x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, ReadOnlySpan<Matrix3x2d> value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x2d(int location, int count, bool transpose, Matrix3x2d[] value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, ref readonly Matrix3x4d value)
            {
                fixed (Matrix3x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, ReadOnlySpan<Matrix3x4d> value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix3x4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix3x4d(int location, int count, bool transpose, Matrix3x4d[] value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix3x4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4d(int location, int count, bool transpose, ref readonly Matrix4d value)
            {
                fixed (Matrix4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4d(int location, int count, bool transpose, ReadOnlySpan<Matrix4d> value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4d(int location, int count, bool transpose, Matrix4d[] value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fvARB(int location, int count, bool transpose, ref readonly Matrix4 value)
            {
                fixed (Matrix4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fvARB(int location, int count, bool transpose, ReadOnlySpan<Matrix4> value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fvARB(int location, int count, bool transpose, Matrix4[] value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fvARB(int location, int count, bool transpose, ref readonly System.Numerics.Matrix4x4 value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fvARB(int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix4x4> value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4fvARB(int, int, bool, float*)"/>
            public static unsafe void UniformMatrix4fvARB(int location, int count, bool transpose, System.Numerics.Matrix4x4[] value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    UniformMatrix4fvARB(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, ref readonly Matrix4x2d value)
            {
                fixed (Matrix4x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, ReadOnlySpan<Matrix4x2d> value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x2dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x2d(int location, int count, bool transpose, Matrix4x2d[] value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x2dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, ref readonly Matrix4x3d value)
            {
                fixed (Matrix4x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, ReadOnlySpan<Matrix4x3d> value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformMatrix4x3dv(int, int, bool, double*)"/>
            public static unsafe void UniformMatrix4x3d(int location, int count, bool transpose, Matrix4x3d[] value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    UniformMatrix4x3dv(location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
            public static unsafe void UniformSubroutinesui(ShaderType shadertype, int count, ReadOnlySpan<uint> indices)
            {
                fixed (uint* indices_ptr = indices)
                {
                    UniformSubroutinesuiv(shadertype, count, indices_ptr);
                }
            }
            /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
            public static unsafe void UniformSubroutinesui(ShaderType shadertype, int count, uint[] indices)
            {
                fixed (uint* indices_ptr = indices)
                {
                    UniformSubroutinesuiv(shadertype, count, indices_ptr);
                }
            }
            /// <inheritdoc cref="UniformSubroutinesuiv(ShaderType, int, uint*)"/>
            public static unsafe void UniformSubroutinesui(ShaderType shadertype, int count, ref readonly uint indices)
            {
                fixed (uint* indices_ptr = &indices)
                {
                    UniformSubroutinesuiv(shadertype, count, indices_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, ReadOnlySpan<int> buffers, ReadOnlySpan<IntPtr> offsets, ReadOnlySpan<int> strides)
            {
                fixed (int* strides_ptr = strides)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (int* buffers_ptr = buffers)
                        {
                            VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, int[] buffers, IntPtr[] offsets, int[] strides)
            {
                fixed (int* strides_ptr = strides)
                {
                    fixed (IntPtr* offsets_ptr = offsets)
                    {
                        fixed (int* buffers_ptr = buffers)
                        {
                            VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="VertexArrayVertexBuffers(int, uint, int, int*, IntPtr*, int*)"/>
            public static unsafe void VertexArrayVertexBuffers(int vaobj, uint first, int count, ref readonly int buffers, ref readonly IntPtr offsets, ref readonly int strides)
            {
                fixed (int* buffers_ptr = &buffers)
                fixed (IntPtr* offsets_ptr = &offsets)
                fixed (int* strides_ptr = &strides)
                {
                    VertexArrayVertexBuffers(vaobj, first, count, buffers_ptr, offsets_ptr, strides_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib1dvARB(uint index, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib1dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib1fvARB(uint index, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib1fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1svARB(uint, short*)"/>
            public static unsafe void VertexAttrib1svARB(uint index, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib1svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib2dvARB(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib2dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib2dvARB(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib2dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib2dvARB(uint index, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib2dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib2fvARB(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib2fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib2fvARB(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib2fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib2fvARB(uint index, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib2fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2svARB(uint, short*)"/>
            public static unsafe void VertexAttrib2svARB(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib2svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2svARB(uint, short*)"/>
            public static unsafe void VertexAttrib2svARB(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib2svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2svARB(uint, short*)"/>
            public static unsafe void VertexAttrib2svARB(uint index, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib2svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib3dvARB(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib3dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib3dvARB(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib3dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib3dvARB(uint index, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib3dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib3fvARB(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib3fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib3fvARB(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib3fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib3fvARB(uint index, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib3fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3svARB(uint, short*)"/>
            public static unsafe void VertexAttrib3svARB(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib3svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3svARB(uint, short*)"/>
            public static unsafe void VertexAttrib3svARB(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib3svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3svARB(uint, short*)"/>
            public static unsafe void VertexAttrib3svARB(uint index, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib3svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4bvARB(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4bvARB(uint index, ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttrib4bvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4bvARB(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4bvARB(uint index, sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttrib4bvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4bvARB(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4bvARB(uint index, ref readonly sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    VertexAttrib4bvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib4dvARB(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib4dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib4dvARB(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib4dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dvARB(uint, double*)"/>
            public static unsafe void VertexAttrib4dvARB(uint index, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib4dvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib4fvARB(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib4fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib4fvARB(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib4fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fvARB(uint, float*)"/>
            public static unsafe void VertexAttrib4fvARB(uint index, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib4fvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ivARB(uint, int*)"/>
            public static unsafe void VertexAttrib4ivARB(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttrib4ivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ivARB(uint, int*)"/>
            public static unsafe void VertexAttrib4ivARB(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttrib4ivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ivARB(uint, int*)"/>
            public static unsafe void VertexAttrib4ivARB(uint index, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttrib4ivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NbvARB(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4NbvARB(uint index, ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttrib4NbvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NbvARB(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4NbvARB(uint index, sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttrib4NbvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NbvARB(uint, sbyte*)"/>
            public static unsafe void VertexAttrib4NbvARB(uint index, ref readonly sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    VertexAttrib4NbvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NivARB(uint, int*)"/>
            public static unsafe void VertexAttrib4NivARB(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttrib4NivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NivARB(uint, int*)"/>
            public static unsafe void VertexAttrib4NivARB(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttrib4NivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NivARB(uint, int*)"/>
            public static unsafe void VertexAttrib4NivARB(uint index, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttrib4NivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NsvARB(uint, short*)"/>
            public static unsafe void VertexAttrib4NsvARB(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4NsvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NsvARB(uint, short*)"/>
            public static unsafe void VertexAttrib4NsvARB(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4NsvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NsvARB(uint, short*)"/>
            public static unsafe void VertexAttrib4NsvARB(uint index, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib4NsvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NubvARB(uint, byte*)"/>
            public static unsafe void VertexAttrib4NubvARB(uint index, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4NubvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NubvARB(uint, byte*)"/>
            public static unsafe void VertexAttrib4NubvARB(uint index, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4NubvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NubvARB(uint, byte*)"/>
            public static unsafe void VertexAttrib4NubvARB(uint index, ref readonly byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttrib4NubvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NuivARB(uint, uint*)"/>
            public static unsafe void VertexAttrib4NuivARB(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttrib4NuivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NuivARB(uint, uint*)"/>
            public static unsafe void VertexAttrib4NuivARB(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttrib4NuivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NuivARB(uint, uint*)"/>
            public static unsafe void VertexAttrib4NuivARB(uint index, ref readonly uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttrib4NuivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NusvARB(uint, ushort*)"/>
            public static unsafe void VertexAttrib4NusvARB(uint index, ReadOnlySpan<ushort> v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttrib4NusvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NusvARB(uint, ushort*)"/>
            public static unsafe void VertexAttrib4NusvARB(uint index, ushort[] v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttrib4NusvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4NusvARB(uint, ushort*)"/>
            public static unsafe void VertexAttrib4NusvARB(uint index, ref readonly ushort v)
            {
                fixed (ushort* v_ptr = &v)
                {
                    VertexAttrib4NusvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4svARB(uint, short*)"/>
            public static unsafe void VertexAttrib4svARB(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4svARB(uint, short*)"/>
            public static unsafe void VertexAttrib4svARB(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4svARB(uint, short*)"/>
            public static unsafe void VertexAttrib4svARB(uint index, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib4svARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubvARB(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubvARB(uint index, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4ubvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubvARB(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubvARB(uint index, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4ubvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubvARB(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubvARB(uint index, ref readonly byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttrib4ubvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4uivARB(uint, uint*)"/>
            public static unsafe void VertexAttrib4uivARB(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttrib4uivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4uivARB(uint, uint*)"/>
            public static unsafe void VertexAttrib4uivARB(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttrib4uivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4uivARB(uint, uint*)"/>
            public static unsafe void VertexAttrib4uivARB(uint index, ref readonly uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttrib4uivARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4usvARB(uint, ushort*)"/>
            public static unsafe void VertexAttrib4usvARB(uint index, ReadOnlySpan<ushort> v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttrib4usvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4usvARB(uint, ushort*)"/>
            public static unsafe void VertexAttrib4usvARB(uint index, ushort[] v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttrib4usvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4usvARB(uint, ushort*)"/>
            public static unsafe void VertexAttrib4usvARB(uint index, ref readonly ushort v)
            {
                fixed (ushort* v_ptr = &v)
                {
                    VertexAttrib4usvARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1dv(uint, double*)"/>
            public static unsafe void VertexAttribL1d(uint index, ref readonly double v)
            {
                fixed (double* tmp_v = &v)
                {
                    double* v_ptr = (double*)tmp_v;
                    VertexAttribL1dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1ui64vARB(uint, ulong*)"/>
            public static unsafe void VertexAttribL1ui64vARB(uint index, ReadOnlySpan<ulong> v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL1ui64vARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1ui64vARB(uint, ulong*)"/>
            public static unsafe void VertexAttribL1ui64vARB(uint index, ulong[] v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL1ui64vARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1ui64vARB(uint, ulong*)"/>
            public static unsafe void VertexAttribL1ui64vARB(uint index, ref readonly ulong v)
            {
                fixed (ulong* v_ptr = &v)
                {
                    VertexAttribL1ui64vARB(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2dv(uint, double*)"/>
            public static unsafe void VertexAttribL2d(uint index, ref readonly Vector2d v)
            {
                fixed (Vector2d* tmp_v = &v)
                {
                    double* v_ptr = (double*)tmp_v;
                    VertexAttribL2dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3dv(uint, double*)"/>
            public static unsafe void VertexAttribL3d(uint index, ref readonly Vector3d v)
            {
                fixed (Vector3d* tmp_v = &v)
                {
                    double* v_ptr = (double*)tmp_v;
                    VertexAttribL3dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4dv(uint, double*)"/>
            public static unsafe void VertexAttribL4d(uint index, ref readonly Vector4d v)
            {
                fixed (Vector4d* tmp_v = &v)
                {
                    double* v_ptr = (double*)tmp_v;
                    VertexAttribL4dv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribLPointer(uint, int, VertexAttribLType, int, void*)"/>
            public static unsafe void VertexAttribLPointer(uint index, int size, VertexAttribLType type, int stride, nint offset)
            {
                void* pointer = (void*)offset;
                VertexAttribLPointer(index, size, type, stride, pointer);
            }
            /// <inheritdoc cref="VertexAttribP1uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, ref readonly uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexAttribP1uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP2uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, ref readonly uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexAttribP2uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP3uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, ref readonly uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexAttribP3uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribP4uiv(uint, VertexAttribPointerType, bool, uint*)"/>
            public static unsafe void VertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, ref readonly uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexAttribP4uiv(index, type, normalized, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointerARB(uint, int, VertexAttribPointerType, bool, int, void*)"/>
            public static unsafe void VertexAttribPointerARB(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexAttribPointerARB(index, size, type, normalized, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexAttribPointerARB(uint, int, VertexAttribPointerType, bool, int, void*)"/>
            public static unsafe void VertexAttribPointerARB<T1>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribPointerARB(index, size, type, normalized, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointerARB(uint, int, VertexAttribPointerType, bool, int, void*)"/>
            public static unsafe void VertexAttribPointerARB<T1>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribPointerARB(index, size, type, normalized, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointerARB(uint, int, VertexAttribPointerType, bool, int, void*)"/>
            public static unsafe void VertexAttribPointerARB<T1>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexAttribPointerARB(index, size, type, normalized, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexP2uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP2ui(VertexPointerType type, ref readonly uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexP2uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP3uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP3ui(VertexPointerType type, ref readonly uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexP3uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="VertexP4uiv(VertexPointerType, uint*)"/>
            public static unsafe void VertexP4ui(VertexPointerType type, ref readonly uint value)
            {
                fixed (uint* value_ptr = &value)
                {
                    VertexP4uiv(type, value_ptr);
                }
            }
            /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
            public static unsafe void ViewportArray(uint first, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    ViewportArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
            public static unsafe void ViewportArray(uint first, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    ViewportArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ViewportArrayv(uint, int, float*)"/>
            public static unsafe void ViewportArray(uint first, int count, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    ViewportArrayv(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
            public static unsafe void ViewportIndexedf(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    ViewportIndexedfv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
            public static unsafe void ViewportIndexedf(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    ViewportIndexedfv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="ViewportIndexedfv(uint, float*)"/>
            public static unsafe void ViewportIndexedf(uint index, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    ViewportIndexedfv(index, v_ptr);
                }
            }
            /// <inheritdoc cref="WeightbvARB(int, sbyte*)"/>
            public static unsafe void WeightbvARB(int size, ReadOnlySpan<sbyte> weights)
            {
                fixed (sbyte* weights_ptr = weights)
                {
                    WeightbvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightbvARB(int, sbyte*)"/>
            public static unsafe void WeightbvARB(int size, sbyte[] weights)
            {
                fixed (sbyte* weights_ptr = weights)
                {
                    WeightbvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightbvARB(int, sbyte*)"/>
            public static unsafe void WeightbvARB(int size, ref readonly sbyte weights)
            {
                fixed (sbyte* weights_ptr = &weights)
                {
                    WeightbvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightdvARB(int, double*)"/>
            public static unsafe void WeightdvARB(int size, ReadOnlySpan<double> weights)
            {
                fixed (double* weights_ptr = weights)
                {
                    WeightdvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightdvARB(int, double*)"/>
            public static unsafe void WeightdvARB(int size, double[] weights)
            {
                fixed (double* weights_ptr = weights)
                {
                    WeightdvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightdvARB(int, double*)"/>
            public static unsafe void WeightdvARB(int size, ref readonly double weights)
            {
                fixed (double* weights_ptr = &weights)
                {
                    WeightdvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightfvARB(int, float*)"/>
            public static unsafe void WeightfvARB(int size, ReadOnlySpan<float> weights)
            {
                fixed (float* weights_ptr = weights)
                {
                    WeightfvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightfvARB(int, float*)"/>
            public static unsafe void WeightfvARB(int size, float[] weights)
            {
                fixed (float* weights_ptr = weights)
                {
                    WeightfvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightfvARB(int, float*)"/>
            public static unsafe void WeightfvARB(int size, ref readonly float weights)
            {
                fixed (float* weights_ptr = &weights)
                {
                    WeightfvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightivARB(int, int*)"/>
            public static unsafe void WeightivARB(int size, ReadOnlySpan<int> weights)
            {
                fixed (int* weights_ptr = weights)
                {
                    WeightivARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightivARB(int, int*)"/>
            public static unsafe void WeightivARB(int size, int[] weights)
            {
                fixed (int* weights_ptr = weights)
                {
                    WeightivARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightivARB(int, int*)"/>
            public static unsafe void WeightivARB(int size, ref readonly int weights)
            {
                fixed (int* weights_ptr = &weights)
                {
                    WeightivARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightPointerARB(int, WeightPointerTypeARB, int, void*)"/>
            public static unsafe void WeightPointerARB(int size, WeightPointerTypeARB type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                WeightPointerARB(size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="WeightPointerARB(int, WeightPointerTypeARB, int, void*)"/>
            public static unsafe void WeightPointerARB<T1>(int size, WeightPointerTypeARB type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    WeightPointerARB(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="WeightPointerARB(int, WeightPointerTypeARB, int, void*)"/>
            public static unsafe void WeightPointerARB<T1>(int size, WeightPointerTypeARB type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    WeightPointerARB(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="WeightPointerARB(int, WeightPointerTypeARB, int, void*)"/>
            public static unsafe void WeightPointerARB<T1>(int size, WeightPointerTypeARB type, int stride, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    WeightPointerARB(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="WeightsvARB(int, short*)"/>
            public static unsafe void WeightsvARB(int size, ReadOnlySpan<short> weights)
            {
                fixed (short* weights_ptr = weights)
                {
                    WeightsvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightsvARB(int, short*)"/>
            public static unsafe void WeightsvARB(int size, short[] weights)
            {
                fixed (short* weights_ptr = weights)
                {
                    WeightsvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightsvARB(int, short*)"/>
            public static unsafe void WeightsvARB(int size, ref readonly short weights)
            {
                fixed (short* weights_ptr = &weights)
                {
                    WeightsvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightubvARB(int, byte*)"/>
            public static unsafe void WeightubvARB(int size, ReadOnlySpan<byte> weights)
            {
                fixed (byte* weights_ptr = weights)
                {
                    WeightubvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightubvARB(int, byte*)"/>
            public static unsafe void WeightubvARB(int size, byte[] weights)
            {
                fixed (byte* weights_ptr = weights)
                {
                    WeightubvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightubvARB(int, byte*)"/>
            public static unsafe void WeightubvARB(int size, ref readonly byte weights)
            {
                fixed (byte* weights_ptr = &weights)
                {
                    WeightubvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightuivARB(int, uint*)"/>
            public static unsafe void WeightuivARB(int size, ReadOnlySpan<uint> weights)
            {
                fixed (uint* weights_ptr = weights)
                {
                    WeightuivARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightuivARB(int, uint*)"/>
            public static unsafe void WeightuivARB(int size, uint[] weights)
            {
                fixed (uint* weights_ptr = weights)
                {
                    WeightuivARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightuivARB(int, uint*)"/>
            public static unsafe void WeightuivARB(int size, ref readonly uint weights)
            {
                fixed (uint* weights_ptr = &weights)
                {
                    WeightuivARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightusvARB(int, ushort*)"/>
            public static unsafe void WeightusvARB(int size, ReadOnlySpan<ushort> weights)
            {
                fixed (ushort* weights_ptr = weights)
                {
                    WeightusvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightusvARB(int, ushort*)"/>
            public static unsafe void WeightusvARB(int size, ushort[] weights)
            {
                fixed (ushort* weights_ptr = weights)
                {
                    WeightusvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WeightusvARB(int, ushort*)"/>
            public static unsafe void WeightusvARB(int size, ref readonly ushort weights)
            {
                fixed (ushort* weights_ptr = &weights)
                {
                    WeightusvARB(size, weights_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dvARB(double*)"/>
            public static unsafe void WindowPos2dvARB(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos2dvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dvARB(double*)"/>
            public static unsafe void WindowPos2dvARB(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos2dvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dvARB(double*)"/>
            public static unsafe void WindowPos2dvARB(ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    WindowPos2dvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fvARB(float*)"/>
            public static unsafe void WindowPos2fvARB(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos2fvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fvARB(float*)"/>
            public static unsafe void WindowPos2fvARB(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos2fvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fvARB(float*)"/>
            public static unsafe void WindowPos2fvARB(ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    WindowPos2fvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2ivARB(int*)"/>
            public static unsafe void WindowPos2ivARB(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos2ivARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2ivARB(int*)"/>
            public static unsafe void WindowPos2ivARB(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos2ivARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2ivARB(int*)"/>
            public static unsafe void WindowPos2ivARB(ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    WindowPos2ivARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2svARB(short*)"/>
            public static unsafe void WindowPos2svARB(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos2svARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2svARB(short*)"/>
            public static unsafe void WindowPos2svARB(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos2svARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2svARB(short*)"/>
            public static unsafe void WindowPos2svARB(ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    WindowPos2svARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dvARB(double*)"/>
            public static unsafe void WindowPos3dvARB(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos3dvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dvARB(double*)"/>
            public static unsafe void WindowPos3dvARB(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos3dvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dvARB(double*)"/>
            public static unsafe void WindowPos3dvARB(ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    WindowPos3dvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fvARB(float*)"/>
            public static unsafe void WindowPos3fvARB(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos3fvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fvARB(float*)"/>
            public static unsafe void WindowPos3fvARB(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos3fvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fvARB(float*)"/>
            public static unsafe void WindowPos3fvARB(ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    WindowPos3fvARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3ivARB(int*)"/>
            public static unsafe void WindowPos3ivARB(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos3ivARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3ivARB(int*)"/>
            public static unsafe void WindowPos3ivARB(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos3ivARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3ivARB(int*)"/>
            public static unsafe void WindowPos3ivARB(ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    WindowPos3ivARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3svARB(short*)"/>
            public static unsafe void WindowPos3svARB(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos3svARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3svARB(short*)"/>
            public static unsafe void WindowPos3svARB(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos3svARB(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3svARB(short*)"/>
            public static unsafe void WindowPos3svARB(ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    WindowPos3svARB(v_ptr);
                }
            }
        }
        public static unsafe partial class ATI
        {
            /// <inheritdoc cref="DrawBuffersATI(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffersATI(int n, ReadOnlySpan<DrawBufferMode> bufs)
            {
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    DrawBuffersATI(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="DrawBuffersATI(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffersATI(int n, DrawBufferMode[] bufs)
            {
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    DrawBuffersATI(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="DrawBuffersATI(int, DrawBufferMode*)"/>
            public static unsafe void DrawBuffersATI(int n, ref readonly DrawBufferMode bufs)
            {
                fixed (DrawBufferMode* bufs_ptr = &bufs)
                {
                    DrawBuffersATI(n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointerATI(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerATI(ElementPointerTypeATI type, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                ElementPointerATI(type, pointer_vptr);
            }
            /// <inheritdoc cref="ElementPointerATI(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerATI<T1>(ElementPointerTypeATI type, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ElementPointerATI(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointerATI(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerATI<T1>(ElementPointerTypeATI type, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ElementPointerATI(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ElementPointerATI(ElementPointerTypeATI, void*)"/>
            public static unsafe void ElementPointerATI<T1>(ElementPointerTypeATI type, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    ElementPointerATI(type, pointer_ptr);
                }
            }
            /// <inheritdoc cref="GetArrayObjectfvATI(EnableCap, ArrayObjectPNameATI, float*)"/>
            public static unsafe float GetArrayObjectfvATI(EnableCap array, ArrayObjectPNameATI pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetArrayObjectfvATI(array, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetArrayObjectfvATI(EnableCap, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetArrayObjectfvATI(EnableCap array, ArrayObjectPNameATI pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetArrayObjectfvATI(array, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetArrayObjectivATI(EnableCap, ArrayObjectPNameATI, int*)"/>
            public static unsafe int GetArrayObjectivATI(EnableCap array, ArrayObjectPNameATI pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetArrayObjectivATI(array, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetArrayObjectivATI(EnableCap, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetArrayObjectivATI(EnableCap array, ArrayObjectPNameATI pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetArrayObjectivATI(array, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectBufferfvATI(int, ArrayObjectPNameATI, float*)"/>
            public static unsafe float GetObjectBufferfvATI(int buffer, ArrayObjectPNameATI pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetObjectBufferfvATI(buffer, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetObjectBufferfvATI(int, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetObjectBufferfvATI(int buffer, ArrayObjectPNameATI pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetObjectBufferfvATI(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectBufferivATI(int, ArrayObjectPNameATI, int*)"/>
            public static unsafe int GetObjectBufferivATI(int buffer, ArrayObjectPNameATI pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetObjectBufferivATI(buffer, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetObjectBufferivATI(int, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetObjectBufferivATI(int buffer, ArrayObjectPNameATI pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetObjectBufferivATI(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameterfvATI(GetTexBumpParameterATI, float*)"/>
            public static unsafe void GetTexBumpParameterfvATI(GetTexBumpParameterATI pname, Span<float> param)
            {
                fixed (float* param_ptr = param)
                {
                    GetTexBumpParameterfvATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameterfvATI(GetTexBumpParameterATI, float*)"/>
            public static unsafe void GetTexBumpParameterfvATI(GetTexBumpParameterATI pname, float[] param)
            {
                fixed (float* param_ptr = param)
                {
                    GetTexBumpParameterfvATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameterfvATI(GetTexBumpParameterATI, float*)"/>
            public static unsafe float GetTexBumpParameterfvATI(GetTexBumpParameterATI pname)
            {
                float param;
                float* param_ptr = &param;
                {
                    GetTexBumpParameterfvATI(pname, param_ptr);
                }
                return param;
            }
            /// <inheritdoc cref="GetTexBumpParameterfvATI(GetTexBumpParameterATI, float*)"/>
            public static unsafe void GetTexBumpParameterfvATI(GetTexBumpParameterATI pname, out float param)
            {
                fixed (float* param_ptr = &param)
                {
                    GetTexBumpParameterfvATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameterivATI(GetTexBumpParameterATI, int*)"/>
            public static unsafe void GetTexBumpParameterivATI(GetTexBumpParameterATI pname, Span<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    GetTexBumpParameterivATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameterivATI(GetTexBumpParameterATI, int*)"/>
            public static unsafe void GetTexBumpParameterivATI(GetTexBumpParameterATI pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    GetTexBumpParameterivATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetTexBumpParameterivATI(GetTexBumpParameterATI, int*)"/>
            public static unsafe int GetTexBumpParameterivATI(GetTexBumpParameterATI pname)
            {
                int param;
                int* param_ptr = &param;
                {
                    GetTexBumpParameterivATI(pname, param_ptr);
                }
                return param;
            }
            /// <inheritdoc cref="GetTexBumpParameterivATI(GetTexBumpParameterATI, int*)"/>
            public static unsafe void GetTexBumpParameterivATI(GetTexBumpParameterATI pname, out int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetTexBumpParameterivATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantArrayObjectfvATI(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe float GetVariantArrayObjectfvATI(uint id, ArrayObjectPNameATI pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetVariantArrayObjectfvATI(id, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVariantArrayObjectfvATI(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVariantArrayObjectfvATI(uint id, ArrayObjectPNameATI pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetVariantArrayObjectfvATI(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantArrayObjectivATI(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe int GetVariantArrayObjectivATI(uint id, ArrayObjectPNameATI pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetVariantArrayObjectivATI(id, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVariantArrayObjectivATI(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVariantArrayObjectivATI(uint id, ArrayObjectPNameATI pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVariantArrayObjectivATI(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectfvATI(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVertexAttribArrayObjectfvATI(uint index, ArrayObjectPNameATI pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribArrayObjectfvATI(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectfvATI(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVertexAttribArrayObjectfvATI(uint index, ArrayObjectPNameATI pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVertexAttribArrayObjectfvATI(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectfvATI(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe float GetVertexAttribArrayObjectfvATI(uint index, ArrayObjectPNameATI pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetVertexAttribArrayObjectfvATI(index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectfvATI(uint, ArrayObjectPNameATI, float*)"/>
            public static unsafe void GetVertexAttribArrayObjectfvATI(uint index, ArrayObjectPNameATI pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetVertexAttribArrayObjectfvATI(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectivATI(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVertexAttribArrayObjectivATI(uint index, ArrayObjectPNameATI pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribArrayObjectivATI(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectivATI(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVertexAttribArrayObjectivATI(uint index, ArrayObjectPNameATI pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVertexAttribArrayObjectivATI(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectivATI(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe int GetVertexAttribArrayObjectivATI(uint index, ArrayObjectPNameATI pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetVertexAttribArrayObjectivATI(index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVertexAttribArrayObjectivATI(uint, ArrayObjectPNameATI, int*)"/>
            public static unsafe void GetVertexAttribArrayObjectivATI(uint index, ArrayObjectPNameATI pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVertexAttribArrayObjectivATI(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NewObjectBufferATI(int, void*, ArrayObjectUsageATI)"/>
            public static unsafe uint NewObjectBufferATI(int size, IntPtr pointer, ArrayObjectUsageATI usage)
            {
                uint returnValue;
                void* pointer_vptr = (void*)pointer;
                returnValue = NewObjectBufferATI(size, pointer_vptr, usage);
                return returnValue;
            }
            /// <inheritdoc cref="NewObjectBufferATI(int, void*, ArrayObjectUsageATI)"/>
            public static unsafe uint NewObjectBufferATI<T1>(int size, ReadOnlySpan<T1> pointer, ArrayObjectUsageATI usage)
                where T1 : unmanaged
            {
                uint returnValue;
                fixed (void* pointer_ptr = pointer)
                {
                    returnValue = NewObjectBufferATI(size, pointer_ptr, usage);
                }
                return returnValue;
            }
            /// <inheritdoc cref="NewObjectBufferATI(int, void*, ArrayObjectUsageATI)"/>
            public static unsafe uint NewObjectBufferATI<T1>(int size, T1[] pointer, ArrayObjectUsageATI usage)
                where T1 : unmanaged
            {
                uint returnValue;
                fixed (void* pointer_ptr = pointer)
                {
                    returnValue = NewObjectBufferATI(size, pointer_ptr, usage);
                }
                return returnValue;
            }
            /// <inheritdoc cref="NewObjectBufferATI(int, void*, ArrayObjectUsageATI)"/>
            public static unsafe uint NewObjectBufferATI<T1>(int size, ref readonly T1 pointer, ArrayObjectUsageATI usage)
                where T1 : unmanaged
            {
                uint returnValue;
                fixed (void* pointer_ptr = &pointer)
                {
                    returnValue = NewObjectBufferATI(size, pointer_ptr, usage);
                }
                return returnValue;
            }
            /// <inheritdoc cref="NormalStream3bvATI(VertexStreamATI, sbyte*)"/>
            public static unsafe void NormalStream3bvATI(VertexStreamATI stream, ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    NormalStream3bvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3bvATI(VertexStreamATI, sbyte*)"/>
            public static unsafe void NormalStream3bvATI(VertexStreamATI stream, sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    NormalStream3bvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3bvATI(VertexStreamATI, sbyte*)"/>
            public static unsafe void NormalStream3bvATI(VertexStreamATI stream, ref readonly sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    NormalStream3bvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3dvATI(VertexStreamATI, double*)"/>
            public static unsafe void NormalStream3dvATI(VertexStreamATI stream, ReadOnlySpan<double> coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    NormalStream3dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3dvATI(VertexStreamATI, double*)"/>
            public static unsafe void NormalStream3dvATI(VertexStreamATI stream, double[] coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    NormalStream3dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3dvATI(VertexStreamATI, double*)"/>
            public static unsafe void NormalStream3dvATI(VertexStreamATI stream, ref readonly double coords)
            {
                fixed (double* coords_ptr = &coords)
                {
                    NormalStream3dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3fvATI(VertexStreamATI, float*)"/>
            public static unsafe void NormalStream3fvATI(VertexStreamATI stream, ReadOnlySpan<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    NormalStream3fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3fvATI(VertexStreamATI, float*)"/>
            public static unsafe void NormalStream3fvATI(VertexStreamATI stream, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    NormalStream3fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3fvATI(VertexStreamATI, float*)"/>
            public static unsafe void NormalStream3fvATI(VertexStreamATI stream, ref readonly float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    NormalStream3fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3ivATI(VertexStreamATI, int*)"/>
            public static unsafe void NormalStream3ivATI(VertexStreamATI stream, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    NormalStream3ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3ivATI(VertexStreamATI, int*)"/>
            public static unsafe void NormalStream3ivATI(VertexStreamATI stream, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    NormalStream3ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3ivATI(VertexStreamATI, int*)"/>
            public static unsafe void NormalStream3ivATI(VertexStreamATI stream, ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    NormalStream3ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3svATI(VertexStreamATI, short*)"/>
            public static unsafe void NormalStream3svATI(VertexStreamATI stream, ReadOnlySpan<short> coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    NormalStream3svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3svATI(VertexStreamATI, short*)"/>
            public static unsafe void NormalStream3svATI(VertexStreamATI stream, short[] coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    NormalStream3svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="NormalStream3svATI(VertexStreamATI, short*)"/>
            public static unsafe void NormalStream3svATI(VertexStreamATI stream, ref readonly short coords)
            {
                fixed (short* coords_ptr = &coords)
                {
                    NormalStream3svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="SetFragmentShaderConstantATI(FragmentShaderConATI, float*)"/>
            public static unsafe void SetFragmentShaderConstantATI(FragmentShaderConATI dst, ReadOnlySpan<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    SetFragmentShaderConstantATI(dst, value_ptr);
                }
            }
            /// <inheritdoc cref="SetFragmentShaderConstantATI(FragmentShaderConATI, float*)"/>
            public static unsafe void SetFragmentShaderConstantATI(FragmentShaderConATI dst, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    SetFragmentShaderConstantATI(dst, value_ptr);
                }
            }
            /// <inheritdoc cref="SetFragmentShaderConstantATI(FragmentShaderConATI, float*)"/>
            public static unsafe void SetFragmentShaderConstantATI(FragmentShaderConATI dst, ref readonly float value)
            {
                fixed (float* value_ptr = &value)
                {
                    SetFragmentShaderConstantATI(dst, value_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameterfvATI(TexBumpParameterATI, float*)"/>
            public static unsafe void TexBumpParameterfvATI(TexBumpParameterATI pname, ReadOnlySpan<float> param)
            {
                fixed (float* param_ptr = param)
                {
                    TexBumpParameterfvATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameterfvATI(TexBumpParameterATI, float*)"/>
            public static unsafe void TexBumpParameterfvATI(TexBumpParameterATI pname, float[] param)
            {
                fixed (float* param_ptr = param)
                {
                    TexBumpParameterfvATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameterfvATI(TexBumpParameterATI, float*)"/>
            public static unsafe void TexBumpParameterfvATI(TexBumpParameterATI pname, ref readonly float param)
            {
                fixed (float* param_ptr = &param)
                {
                    TexBumpParameterfvATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameterivATI(TexBumpParameterATI, int*)"/>
            public static unsafe void TexBumpParameterivATI(TexBumpParameterATI pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    TexBumpParameterivATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameterivATI(TexBumpParameterATI, int*)"/>
            public static unsafe void TexBumpParameterivATI(TexBumpParameterATI pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    TexBumpParameterivATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="TexBumpParameterivATI(TexBumpParameterATI, int*)"/>
            public static unsafe void TexBumpParameterivATI(TexBumpParameterATI pname, ref readonly int param)
            {
                fixed (int* param_ptr = &param)
                {
                    TexBumpParameterivATI(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="UpdateObjectBufferATI(int, uint, int, void*, PreserveModeATI)"/>
            public static unsafe void UpdateObjectBufferATI(int buffer, uint offset, int size, IntPtr pointer, PreserveModeATI preserve)
            {
                void* pointer_vptr = (void*)pointer;
                UpdateObjectBufferATI(buffer, offset, size, pointer_vptr, preserve);
            }
            /// <inheritdoc cref="UpdateObjectBufferATI(int, uint, int, void*, PreserveModeATI)"/>
            public static unsafe void UpdateObjectBufferATI<T1>(int buffer, uint offset, int size, ReadOnlySpan<T1> pointer, PreserveModeATI preserve)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    UpdateObjectBufferATI(buffer, offset, size, pointer_ptr, preserve);
                }
            }
            /// <inheritdoc cref="UpdateObjectBufferATI(int, uint, int, void*, PreserveModeATI)"/>
            public static unsafe void UpdateObjectBufferATI<T1>(int buffer, uint offset, int size, T1[] pointer, PreserveModeATI preserve)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    UpdateObjectBufferATI(buffer, offset, size, pointer_ptr, preserve);
                }
            }
            /// <inheritdoc cref="UpdateObjectBufferATI(int, uint, int, void*, PreserveModeATI)"/>
            public static unsafe void UpdateObjectBufferATI<T1>(int buffer, uint offset, int size, ref readonly T1 pointer, PreserveModeATI preserve)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    UpdateObjectBufferATI(buffer, offset, size, pointer_ptr, preserve);
                }
            }
            /// <inheritdoc cref="VertexStream1dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream1dvATI(VertexStreamATI stream, ref readonly double coords)
            {
                fixed (double* coords_ptr = &coords)
                {
                    VertexStream1dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream1fvATI(VertexStreamATI stream, ref readonly float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    VertexStream1fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream1ivATI(VertexStreamATI stream, ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    VertexStream1ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream1svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream1svATI(VertexStreamATI stream, ref readonly short coords)
            {
                fixed (short* coords_ptr = &coords)
                {
                    VertexStream1svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream2dvATI(VertexStreamATI stream, ReadOnlySpan<double> coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream2dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream2dvATI(VertexStreamATI stream, double[] coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream2dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream2dvATI(VertexStreamATI stream, ref readonly double coords)
            {
                fixed (double* coords_ptr = &coords)
                {
                    VertexStream2dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream2fvATI(VertexStreamATI stream, ReadOnlySpan<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream2fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream2fvATI(VertexStreamATI stream, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream2fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream2fvATI(VertexStreamATI stream, ref readonly float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    VertexStream2fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream2ivATI(VertexStreamATI stream, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream2ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream2ivATI(VertexStreamATI stream, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream2ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream2ivATI(VertexStreamATI stream, ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    VertexStream2ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream2svATI(VertexStreamATI stream, ReadOnlySpan<short> coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream2svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream2svATI(VertexStreamATI stream, short[] coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream2svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream2svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream2svATI(VertexStreamATI stream, ref readonly short coords)
            {
                fixed (short* coords_ptr = &coords)
                {
                    VertexStream2svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream3dvATI(VertexStreamATI stream, ReadOnlySpan<double> coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream3dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream3dvATI(VertexStreamATI stream, double[] coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream3dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream3dvATI(VertexStreamATI stream, ref readonly double coords)
            {
                fixed (double* coords_ptr = &coords)
                {
                    VertexStream3dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream3fvATI(VertexStreamATI stream, ReadOnlySpan<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream3fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream3fvATI(VertexStreamATI stream, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream3fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream3fvATI(VertexStreamATI stream, ref readonly float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    VertexStream3fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream3ivATI(VertexStreamATI stream, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream3ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream3ivATI(VertexStreamATI stream, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream3ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream3ivATI(VertexStreamATI stream, ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    VertexStream3ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream3svATI(VertexStreamATI stream, ReadOnlySpan<short> coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream3svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream3svATI(VertexStreamATI stream, short[] coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream3svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream3svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream3svATI(VertexStreamATI stream, ref readonly short coords)
            {
                fixed (short* coords_ptr = &coords)
                {
                    VertexStream3svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream4dvATI(VertexStreamATI stream, ReadOnlySpan<double> coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream4dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream4dvATI(VertexStreamATI stream, double[] coords)
            {
                fixed (double* coords_ptr = coords)
                {
                    VertexStream4dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4dvATI(VertexStreamATI, double*)"/>
            public static unsafe void VertexStream4dvATI(VertexStreamATI stream, ref readonly double coords)
            {
                fixed (double* coords_ptr = &coords)
                {
                    VertexStream4dvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream4fvATI(VertexStreamATI stream, ReadOnlySpan<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream4fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream4fvATI(VertexStreamATI stream, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    VertexStream4fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4fvATI(VertexStreamATI, float*)"/>
            public static unsafe void VertexStream4fvATI(VertexStreamATI stream, ref readonly float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    VertexStream4fvATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream4ivATI(VertexStreamATI stream, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream4ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream4ivATI(VertexStreamATI stream, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    VertexStream4ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4ivATI(VertexStreamATI, int*)"/>
            public static unsafe void VertexStream4ivATI(VertexStreamATI stream, ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    VertexStream4ivATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream4svATI(VertexStreamATI stream, ReadOnlySpan<short> coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream4svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream4svATI(VertexStreamATI stream, short[] coords)
            {
                fixed (short* coords_ptr = coords)
                {
                    VertexStream4svATI(stream, coords_ptr);
                }
            }
            /// <inheritdoc cref="VertexStream4svATI(VertexStreamATI, short*)"/>
            public static unsafe void VertexStream4svATI(VertexStreamATI stream, ref readonly short coords)
            {
                fixed (short* coords_ptr = &coords)
                {
                    VertexStream4svATI(stream, coords_ptr);
                }
            }
        }
        public static unsafe partial class EXT
        {
            /// <inheritdoc cref="AreTexturesResidentEXT(int, int*, bool*)"/>
            public static unsafe bool AreTexturesResidentEXT(int n, ReadOnlySpan<int> textures, Span<bool> residences)
            {
                bool returnValue;
                fixed (bool* residences_ptr = residences)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        returnValue = AreTexturesResidentEXT(n, textures_ptr, residences_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AreTexturesResidentEXT(int, int*, bool*)"/>
            public static unsafe bool AreTexturesResidentEXT(int n, int[] textures, bool[] residences)
            {
                bool returnValue;
                fixed (bool* residences_ptr = residences)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        returnValue = AreTexturesResidentEXT(n, textures_ptr, residences_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AreTexturesResidentEXT(int, int*, bool*)"/>
            public static unsafe bool AreTexturesResidentEXT(int n, ref readonly int textures, ref bool residences)
            {
                bool returnValue;
                fixed (int* textures_ptr = &textures)
                fixed (bool* residences_ptr = &residences)
                {
                    returnValue = AreTexturesResidentEXT(n, textures_ptr, residences_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="BindFragDataLocationEXT(int, uint, byte*)"/>
            public static unsafe void BindFragDataLocationEXT(int program, uint color, string name)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                BindFragDataLocationEXT(program, color, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="Binormal3bvEXT(sbyte*)"/>
            public static unsafe void Binormal3bvEXT(ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    Binormal3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3bvEXT(sbyte*)"/>
            public static unsafe void Binormal3bvEXT(sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    Binormal3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3bvEXT(sbyte*)"/>
            public static unsafe void Binormal3bvEXT(ref readonly sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    Binormal3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3dvEXT(double*)"/>
            public static unsafe void Binormal3dvEXT(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    Binormal3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3dvEXT(double*)"/>
            public static unsafe void Binormal3dvEXT(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    Binormal3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3dvEXT(double*)"/>
            public static unsafe void Binormal3dvEXT(ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    Binormal3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3fvEXT(float*)"/>
            public static unsafe void Binormal3fvEXT(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    Binormal3fvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3fvEXT(float*)"/>
            public static unsafe void Binormal3fvEXT(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    Binormal3fvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3fvEXT(float*)"/>
            public static unsafe void Binormal3fvEXT(ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    Binormal3fvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3ivEXT(int*)"/>
            public static unsafe void Binormal3ivEXT(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    Binormal3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3ivEXT(int*)"/>
            public static unsafe void Binormal3ivEXT(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    Binormal3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3ivEXT(int*)"/>
            public static unsafe void Binormal3ivEXT(ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    Binormal3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3svEXT(short*)"/>
            public static unsafe void Binormal3svEXT(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    Binormal3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3svEXT(short*)"/>
            public static unsafe void Binormal3svEXT(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    Binormal3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Binormal3svEXT(short*)"/>
            public static unsafe void Binormal3svEXT(ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    Binormal3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="BinormalPointerEXT(BinormalPointerTypeEXT, int, void*)"/>
            public static unsafe void BinormalPointerEXT(BinormalPointerTypeEXT type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                BinormalPointerEXT(type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="BinormalPointerEXT(BinormalPointerTypeEXT, int, void*)"/>
            public static unsafe void BinormalPointerEXT<T1>(BinormalPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    BinormalPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="BinormalPointerEXT(BinormalPointerTypeEXT, int, void*)"/>
            public static unsafe void BinormalPointerEXT<T1>(BinormalPointerTypeEXT type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    BinormalPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="BinormalPointerEXT(BinormalPointerTypeEXT, int, void*)"/>
            public static unsafe void BinormalPointerEXT<T1>(BinormalPointerTypeEXT type, int stride, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    BinormalPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="BufferStorageExternalEXT(All, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorageExternalEXT(All target, IntPtr offset, nint size, IntPtr clientBuffer, BufferStorageMask flags)
            {
                void* clientBuffer_vptr = (void*)clientBuffer;
                BufferStorageExternalEXT(target, offset, size, clientBuffer_vptr, flags);
            }
            /// <inheritdoc cref="BufferStorageExternalEXT(All, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorageExternalEXT<T1>(All target, IntPtr offset, nint size, Span<T1> clientBuffer, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* clientBuffer_ptr = clientBuffer)
                {
                    BufferStorageExternalEXT(target, offset, size, clientBuffer_ptr, flags);
                }
            }
            /// <inheritdoc cref="BufferStorageExternalEXT(All, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorageExternalEXT<T1>(All target, IntPtr offset, nint size, T1[] clientBuffer, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* clientBuffer_ptr = clientBuffer)
                {
                    BufferStorageExternalEXT(target, offset, size, clientBuffer_ptr, flags);
                }
            }
            /// <inheritdoc cref="BufferStorageExternalEXT(All, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void BufferStorageExternalEXT<T1>(All target, IntPtr offset, nint size, ref T1 clientBuffer, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* clientBuffer_ptr = &clientBuffer)
                {
                    BufferStorageExternalEXT(target, offset, size, clientBuffer_ptr, flags);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferDataEXT(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferDataEXT(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearNamedBufferDataEXT(buffer, internalformat, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearNamedBufferDataEXT(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferDataEXT<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferDataEXT(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferDataEXT(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferDataEXT<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferDataEXT(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferDataEXT(int, SizedInternalFormat, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferDataEXT<T1>(int buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearNamedBufferDataEXT(buffer, internalformat, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubDataEXT(int, SizedInternalFormat, nint, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubDataEXT(int buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data_vptr);
            }
            /// <inheritdoc cref="ClearNamedBufferSubDataEXT(int, SizedInternalFormat, nint, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubDataEXT<T1>(int buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubDataEXT(int, SizedInternalFormat, nint, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubDataEXT<T1>(int buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ClearNamedBufferSubDataEXT(int, SizedInternalFormat, nint, nint, PixelFormat, PixelType, void*)"/>
            public static unsafe void ClearNamedBufferSubDataEXT<T1>(int buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorPointerEXT(int, ColorPointerType, int, int, void*)"/>
            public static unsafe void ColorPointerEXT(int size, ColorPointerType type, int stride, int count, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                ColorPointerEXT(size, type, stride, count, pointer_vptr);
            }
            /// <inheritdoc cref="ColorPointerEXT(int, ColorPointerType, int, int, void*)"/>
            public static unsafe void ColorPointerEXT<T1>(int size, ColorPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ColorPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ColorPointerEXT(int, ColorPointerType, int, int, void*)"/>
            public static unsafe void ColorPointerEXT<T1>(int size, ColorPointerType type, int stride, int count, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    ColorPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ColorPointerEXT(int, ColorPointerType, int, int, void*)"/>
            public static unsafe void ColorPointerEXT<T1>(int size, ColorPointerType type, int stride, int count, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    ColorPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTableEXT(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTableEXT(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ColorSubTableEXT(target, start, count, format, type, data_vptr);
            }
            /// <inheritdoc cref="ColorSubTableEXT(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTableEXT<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ColorSubTableEXT(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTableEXT(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTableEXT<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ColorSubTableEXT(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorSubTableEXT(ColorTableTarget, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorSubTableEXT<T1>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ColorSubTableEXT(target, start, count, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableEXT(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableEXT(ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, IntPtr table)
            {
                void* table_vptr = (void*)table;
                ColorTableEXT(target, internalFormat, width, format, type, table_vptr);
            }
            /// <inheritdoc cref="ColorTableEXT(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableEXT<T1>(ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTableEXT(target, internalFormat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableEXT(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableEXT<T1>(ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTableEXT(target, internalFormat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableEXT(ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableEXT<T1>(ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, ref readonly T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    ColorTableEXT(target, internalFormat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, T1[] bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, ref readonly T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, T1[] bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, ref readonly T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, T1[] bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedMultiTexImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, ref readonly T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, T1[] bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, ref readonly T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, T1[] bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, ref readonly T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, T1[] bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedMultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedMultiTexSubImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, ref readonly T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage1DEXT(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage1DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage1DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, T1[] bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage1DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, ref readonly T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage2DEXT(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage2DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage2DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, T1[] bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage2DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, ref readonly T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage3DEXT(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage3DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage3DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, T1[] bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, int, void*)"/>
            public static unsafe void CompressedTextureImage3DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, ref readonly T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1DEXT(int, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1DEXT(int texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage1DEXT(int, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1DEXT(int, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, T1[] bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage1DEXT(int, TextureTarget, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage1DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, ref readonly T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2DEXT(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, T1[] bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage2DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, ref readonly T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3DEXT(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr bits)
            {
                void* bits_vptr = (void*)bits;
                CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_vptr);
            }
            /// <inheritdoc cref="CompressedTextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, ReadOnlySpan<T1> bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, T1[] bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = bits)
                {
                    CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="CompressedTextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, void*)"/>
            public static unsafe void CompressedTextureSubImage3DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, ref readonly T1 bits)
                where T1 : unmanaged
            {
                fixed (void* bits_ptr = &bits)
                {
                    CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1DEXT(ConvolutionTargetEXT, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                ConvolutionFilter1DEXT(target, internalformat, width, format, type, image_vptr);
            }
            /// <inheritdoc cref="ConvolutionFilter1DEXT(ConvolutionTargetEXT, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1DEXT<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter1DEXT(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1DEXT(ConvolutionTargetEXT, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1DEXT<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter1DEXT(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter1DEXT(ConvolutionTargetEXT, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter1DEXT<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ref readonly T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    ConvolutionFilter1DEXT(target, internalformat, width, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2DEXT(ConvolutionTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                ConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image_vptr);
            }
            /// <inheritdoc cref="ConvolutionFilter2DEXT(ConvolutionTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2DEXT<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2DEXT(ConvolutionTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2DEXT<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    ConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionFilter2DEXT(ConvolutionTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ConvolutionFilter2DEXT<T1>(ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ref readonly T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    ConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfvEXT(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ConvolutionParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfvEXT(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ConvolutionParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterfvEXT(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void ConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ConvolutionParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterivEXT(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterivEXT(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterivEXT(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ConvolutionParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CreateMemoryObjectsEXT(int, uint*)"/>
            public static unsafe void CreateMemoryObjectsEXT(int n, Span<uint> memoryObjects)
            {
                fixed (uint* memoryObjects_ptr = memoryObjects)
                {
                    CreateMemoryObjectsEXT(n, memoryObjects_ptr);
                }
            }
            /// <inheritdoc cref="CreateMemoryObjectsEXT(int, uint*)"/>
            public static unsafe void CreateMemoryObjectsEXT(int n, uint[] memoryObjects)
            {
                fixed (uint* memoryObjects_ptr = memoryObjects)
                {
                    CreateMemoryObjectsEXT(n, memoryObjects_ptr);
                }
            }
            /// <inheritdoc cref="CreateMemoryObjectsEXT(int, uint*)"/>
            public static unsafe void CreateMemoryObjectsEXT(int n, ref uint memoryObjects)
            {
                fixed (uint* memoryObjects_ptr = &memoryObjects)
                {
                    CreateMemoryObjectsEXT(n, memoryObjects_ptr);
                }
            }
            /// <inheritdoc cref="CreateShaderProgramEXT(ShaderType, byte*)"/>
            public static unsafe int CreateShaderProgramEXT(ShaderType type, string str)
            {
                int returnValue;
                byte* str_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(str);
                returnValue = CreateShaderProgramEXT(type, str_ptr);
                Marshal.FreeCoTaskMem((IntPtr)str_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="CreateShaderProgramvEXT(ShaderType, int, byte**)"/>
            public static unsafe int CreateShaderProgramvEXT(ShaderType type, int count, string[] strings)
            {
                int returnValue;
                byte** strings_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(strings);
                returnValue = CreateShaderProgramvEXT(type, count, strings_ptr);
                MarshalTk.FreeStringArrayCoTaskMem((IntPtr)strings_ptr, strings.Length);
                return returnValue;
            }
            /// <inheritdoc cref="CullParameterdvEXT(CullParameterEXT, double*)"/>
            public static unsafe void CullParameterdvEXT(CullParameterEXT pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    CullParameterdvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterdvEXT(CullParameterEXT, double*)"/>
            public static unsafe void CullParameterdvEXT(CullParameterEXT pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    CullParameterdvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterdvEXT(CullParameterEXT, double*)"/>
            public static unsafe void CullParameterdvEXT(CullParameterEXT pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    CullParameterdvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterfvEXT(CullParameterEXT, float*)"/>
            public static unsafe void CullParameterfvEXT(CullParameterEXT pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CullParameterfvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterfvEXT(CullParameterEXT, float*)"/>
            public static unsafe void CullParameterfvEXT(CullParameterEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CullParameterfvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CullParameterfvEXT(CullParameterEXT, float*)"/>
            public static unsafe void CullParameterfvEXT(CullParameterEXT pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    CullParameterfvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffersEXT(int, int*)"/>
            public static unsafe void DeleteFramebuffersEXT(int n, ReadOnlySpan<int> framebuffers)
            {
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    DeleteFramebuffersEXT(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffersEXT(int, int*)"/>
            public static unsafe void DeleteFramebuffersEXT(int n, int[] framebuffers)
            {
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    DeleteFramebuffersEXT(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFramebuffersEXT(int, int*)"/>
            public static unsafe void DeleteFramebuffersEXT(int n, ref readonly int framebuffers)
            {
                fixed (int* framebuffers_ptr = &framebuffers)
                {
                    DeleteFramebuffersEXT(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteMemoryObjectsEXT(int, uint*)"/>
            public static unsafe void DeleteMemoryObjectsEXT(int n, ReadOnlySpan<uint> memoryObjects)
            {
                fixed (uint* memoryObjects_ptr = memoryObjects)
                {
                    DeleteMemoryObjectsEXT(n, memoryObjects_ptr);
                }
            }
            /// <inheritdoc cref="DeleteMemoryObjectsEXT(int, uint*)"/>
            public static unsafe void DeleteMemoryObjectsEXT(int n, uint[] memoryObjects)
            {
                fixed (uint* memoryObjects_ptr = memoryObjects)
                {
                    DeleteMemoryObjectsEXT(n, memoryObjects_ptr);
                }
            }
            /// <inheritdoc cref="DeleteMemoryObjectsEXT(int, uint*)"/>
            public static unsafe void DeleteMemoryObjectsEXT(int n, ref readonly uint memoryObjects)
            {
                fixed (uint* memoryObjects_ptr = &memoryObjects)
                {
                    DeleteMemoryObjectsEXT(n, memoryObjects_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelinesEXT(int, int*)"/>
            public static unsafe void DeleteProgramPipelinesEXT(int n, ReadOnlySpan<int> pipelines)
            {
                fixed (int* pipelines_ptr = pipelines)
                {
                    DeleteProgramPipelinesEXT(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelinesEXT(int, int*)"/>
            public static unsafe void DeleteProgramPipelinesEXT(int n, int[] pipelines)
            {
                fixed (int* pipelines_ptr = pipelines)
                {
                    DeleteProgramPipelinesEXT(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramPipelinesEXT(int, int*)"/>
            public static unsafe void DeleteProgramPipelinesEXT(int n, ref readonly int pipelines)
            {
                fixed (int* pipelines_ptr = &pipelines)
                {
                    DeleteProgramPipelinesEXT(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffersEXT(int, int*)"/>
            public static unsafe void DeleteRenderbuffersEXT(int n, ReadOnlySpan<int> renderbuffers)
            {
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    DeleteRenderbuffersEXT(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffersEXT(int, int*)"/>
            public static unsafe void DeleteRenderbuffersEXT(int n, int[] renderbuffers)
            {
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    DeleteRenderbuffersEXT(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteRenderbuffersEXT(int, int*)"/>
            public static unsafe void DeleteRenderbuffersEXT(int n, ref readonly int renderbuffers)
            {
                fixed (int* renderbuffers_ptr = &renderbuffers)
                {
                    DeleteRenderbuffersEXT(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSemaphoresEXT(int, uint*)"/>
            public static unsafe void DeleteSemaphoresEXT(int n, ReadOnlySpan<uint> semaphores)
            {
                fixed (uint* semaphores_ptr = semaphores)
                {
                    DeleteSemaphoresEXT(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSemaphoresEXT(int, uint*)"/>
            public static unsafe void DeleteSemaphoresEXT(int n, uint[] semaphores)
            {
                fixed (uint* semaphores_ptr = semaphores)
                {
                    DeleteSemaphoresEXT(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="DeleteSemaphoresEXT(int, uint*)"/>
            public static unsafe void DeleteSemaphoresEXT(int n, ref readonly uint semaphores)
            {
                fixed (uint* semaphores_ptr = &semaphores)
                {
                    DeleteSemaphoresEXT(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTexturesEXT(int, int*)"/>
            public static unsafe void DeleteTexturesEXT(int n, ReadOnlySpan<int> textures)
            {
                fixed (int* textures_ptr = textures)
                {
                    DeleteTexturesEXT(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTexturesEXT(int, int*)"/>
            public static unsafe void DeleteTexturesEXT(int n, int[] textures)
            {
                fixed (int* textures_ptr = textures)
                {
                    DeleteTexturesEXT(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTexturesEXT(int, int*)"/>
            public static unsafe void DeleteTexturesEXT(int n, ref readonly int textures)
            {
                fixed (int* textures_ptr = &textures)
                {
                    DeleteTexturesEXT(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="DrawElementsInstancedEXT(PrimitiveType, int, DrawElementsType, void*, int)"/>
            public static unsafe void DrawElementsInstancedEXT(PrimitiveType mode, int count, DrawElementsType type, nint offset, int primcount)
            {
                void* indices = (void*)offset;
                DrawElementsInstancedEXT(mode, count, type, indices, primcount);
            }
            /// <inheritdoc cref="DrawRangeElementsEXT(PrimitiveType, uint, uint, int, DrawElementsType, void*)"/>
            public static unsafe void DrawRangeElementsEXT(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint offset)
            {
                void* indices = (void*)offset;
                DrawRangeElementsEXT(mode, start, end, count, type, indices);
            }
            /// <inheritdoc cref="EdgeFlagPointerEXT(int, int, bool*)"/>
            public static unsafe void EdgeFlagPointerEXT(int stride, int count, ReadOnlySpan<bool> pointer)
            {
                fixed (bool* pointer_ptr = pointer)
                {
                    EdgeFlagPointerEXT(stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="EdgeFlagPointerEXT(int, int, bool*)"/>
            public static unsafe void EdgeFlagPointerEXT(int stride, int count, bool[] pointer)
            {
                fixed (bool* pointer_ptr = pointer)
                {
                    EdgeFlagPointerEXT(stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="EdgeFlagPointerEXT(int, int, bool*)"/>
            public static unsafe void EdgeFlagPointerEXT(int stride, int count, ref readonly bool pointer)
            {
                fixed (bool* pointer_ptr = &pointer)
                {
                    EdgeFlagPointerEXT(stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="EGLImageTargetTexStorageEXT(All, void*, int*)"/>
            public static unsafe void EGLImageTargetTexStorageEXT(All target, IntPtr image, ReadOnlySpan<int> attrib_list)
            {
                fixed (int* attrib_list_ptr = attrib_list)
                {
                    void* image_vptr = (void*)image;
                    EGLImageTargetTexStorageEXT(target, image_vptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="EGLImageTargetTexStorageEXT(All, void*, int*)"/>
            public static unsafe void EGLImageTargetTexStorageEXT(All target, IntPtr image, int[] attrib_list)
            {
                fixed (int* attrib_list_ptr = attrib_list)
                {
                    void* image_vptr = (void*)image;
                    EGLImageTargetTexStorageEXT(target, image_vptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="EGLImageTargetTexStorageEXT(All, void*, int*)"/>
            public static unsafe void EGLImageTargetTexStorageEXT(All target, IntPtr image, ref readonly int attrib_list)
            {
                fixed (int* attrib_list_ptr = &attrib_list)
                {
                    void* image_vptr = (void*)image;
                    EGLImageTargetTexStorageEXT(target, image_vptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="EGLImageTargetTexStorageEXT(All, void*, int*)"/>
            public static unsafe void EGLImageTargetTexStorageEXT<T1>(All target, Span<T1> image, ReadOnlySpan<int> attrib_list)
                where T1 : unmanaged
            {
                fixed (int* attrib_list_ptr = attrib_list)
                {
                    fixed (void* image_ptr = image)
                    {
                        EGLImageTargetTexStorageEXT(target, image_ptr, attrib_list_ptr);
                    }
                }
            }
            /// <inheritdoc cref="EGLImageTargetTexStorageEXT(All, void*, int*)"/>
            public static unsafe void EGLImageTargetTexStorageEXT<T1>(All target, T1[] image, int[] attrib_list)
                where T1 : unmanaged
            {
                fixed (int* attrib_list_ptr = attrib_list)
                {
                    fixed (void* image_ptr = image)
                    {
                        EGLImageTargetTexStorageEXT(target, image_ptr, attrib_list_ptr);
                    }
                }
            }
            /// <inheritdoc cref="EGLImageTargetTexStorageEXT(All, void*, int*)"/>
            public static unsafe void EGLImageTargetTexStorageEXT<T1>(All target, ref T1 image, ref readonly int attrib_list)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                fixed (int* attrib_list_ptr = &attrib_list)
                {
                    EGLImageTargetTexStorageEXT(target, image_ptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="EGLImageTargetTextureStorageEXT(int, void*, int*)"/>
            public static unsafe void EGLImageTargetTextureStorageEXT(int texture, IntPtr image, ReadOnlySpan<int> attrib_list)
            {
                fixed (int* attrib_list_ptr = attrib_list)
                {
                    void* image_vptr = (void*)image;
                    EGLImageTargetTextureStorageEXT(texture, image_vptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="EGLImageTargetTextureStorageEXT(int, void*, int*)"/>
            public static unsafe void EGLImageTargetTextureStorageEXT(int texture, IntPtr image, int[] attrib_list)
            {
                fixed (int* attrib_list_ptr = attrib_list)
                {
                    void* image_vptr = (void*)image;
                    EGLImageTargetTextureStorageEXT(texture, image_vptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="EGLImageTargetTextureStorageEXT(int, void*, int*)"/>
            public static unsafe void EGLImageTargetTextureStorageEXT(int texture, IntPtr image, ref readonly int attrib_list)
            {
                fixed (int* attrib_list_ptr = &attrib_list)
                {
                    void* image_vptr = (void*)image;
                    EGLImageTargetTextureStorageEXT(texture, image_vptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="EGLImageTargetTextureStorageEXT(int, void*, int*)"/>
            public static unsafe void EGLImageTargetTextureStorageEXT<T1>(int texture, Span<T1> image, ReadOnlySpan<int> attrib_list)
                where T1 : unmanaged
            {
                fixed (int* attrib_list_ptr = attrib_list)
                {
                    fixed (void* image_ptr = image)
                    {
                        EGLImageTargetTextureStorageEXT(texture, image_ptr, attrib_list_ptr);
                    }
                }
            }
            /// <inheritdoc cref="EGLImageTargetTextureStorageEXT(int, void*, int*)"/>
            public static unsafe void EGLImageTargetTextureStorageEXT<T1>(int texture, T1[] image, int[] attrib_list)
                where T1 : unmanaged
            {
                fixed (int* attrib_list_ptr = attrib_list)
                {
                    fixed (void* image_ptr = image)
                    {
                        EGLImageTargetTextureStorageEXT(texture, image_ptr, attrib_list_ptr);
                    }
                }
            }
            /// <inheritdoc cref="EGLImageTargetTextureStorageEXT(int, void*, int*)"/>
            public static unsafe void EGLImageTargetTextureStorageEXT<T1>(int texture, ref T1 image, ref readonly int attrib_list)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                fixed (int* attrib_list_ptr = &attrib_list)
                {
                    EGLImageTargetTextureStorageEXT(texture, image_ptr, attrib_list_ptr);
                }
            }
            /// <inheritdoc cref="FogCoorddvEXT(double*)"/>
            public static unsafe void FogCoorddvEXT(ref readonly double coord)
            {
                fixed (double* coord_ptr = &coord)
                {
                    FogCoorddvEXT(coord_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordfvEXT(float*)"/>
            public static unsafe void FogCoordfvEXT(ref readonly float coord)
            {
                fixed (float* coord_ptr = &coord)
                {
                    FogCoordfvEXT(coord_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordPointerEXT(FogPointerTypeEXT, int, void*)"/>
            public static unsafe void FogCoordPointerEXT(FogPointerTypeEXT type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                FogCoordPointerEXT(type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="FogCoordPointerEXT(FogPointerTypeEXT, int, void*)"/>
            public static unsafe void FogCoordPointerEXT<T1>(FogPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    FogCoordPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordPointerEXT(FogPointerTypeEXT, int, void*)"/>
            public static unsafe void FogCoordPointerEXT<T1>(FogPointerTypeEXT type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    FogCoordPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordPointerEXT(FogPointerTypeEXT, int, void*)"/>
            public static unsafe void FogCoordPointerEXT<T1>(FogPointerTypeEXT type, int stride, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    FogCoordPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferDrawBuffersEXT(int, int, DrawBufferMode*)"/>
            public static unsafe void FramebufferDrawBuffersEXT(int framebuffer, int n, ReadOnlySpan<DrawBufferMode> bufs)
            {
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    FramebufferDrawBuffersEXT(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferDrawBuffersEXT(int, int, DrawBufferMode*)"/>
            public static unsafe void FramebufferDrawBuffersEXT(int framebuffer, int n, DrawBufferMode[] bufs)
            {
                fixed (DrawBufferMode* bufs_ptr = bufs)
                {
                    FramebufferDrawBuffersEXT(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferDrawBuffersEXT(int, int, DrawBufferMode*)"/>
            public static unsafe void FramebufferDrawBuffersEXT(int framebuffer, int n, ref readonly DrawBufferMode bufs)
            {
                fixed (DrawBufferMode* bufs_ptr = &bufs)
                {
                    FramebufferDrawBuffersEXT(framebuffer, n, bufs_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffersEXT(int, int*)"/>
            public static unsafe void GenFramebuffersEXT(int n, Span<int> framebuffers)
            {
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    GenFramebuffersEXT(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffersEXT(int, int*)"/>
            public static unsafe void GenFramebuffersEXT(int n, int[] framebuffers)
            {
                fixed (int* framebuffers_ptr = framebuffers)
                {
                    GenFramebuffersEXT(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenFramebuffersEXT(int, int*)"/>
            public static unsafe void GenFramebuffersEXT(int n, ref int framebuffers)
            {
                fixed (int* framebuffers_ptr = &framebuffers)
                {
                    GenFramebuffersEXT(n, framebuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelinesEXT(int, int*)"/>
            public static unsafe void GenProgramPipelinesEXT(int n, Span<int> pipelines)
            {
                fixed (int* pipelines_ptr = pipelines)
                {
                    GenProgramPipelinesEXT(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelinesEXT(int, int*)"/>
            public static unsafe void GenProgramPipelinesEXT(int n, int[] pipelines)
            {
                fixed (int* pipelines_ptr = pipelines)
                {
                    GenProgramPipelinesEXT(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramPipelinesEXT(int, int*)"/>
            public static unsafe void GenProgramPipelinesEXT(int n, ref int pipelines)
            {
                fixed (int* pipelines_ptr = &pipelines)
                {
                    GenProgramPipelinesEXT(n, pipelines_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffersEXT(int, int*)"/>
            public static unsafe void GenRenderbuffersEXT(int n, Span<int> renderbuffers)
            {
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    GenRenderbuffersEXT(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffersEXT(int, int*)"/>
            public static unsafe void GenRenderbuffersEXT(int n, int[] renderbuffers)
            {
                fixed (int* renderbuffers_ptr = renderbuffers)
                {
                    GenRenderbuffersEXT(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenRenderbuffersEXT(int, int*)"/>
            public static unsafe void GenRenderbuffersEXT(int n, ref int renderbuffers)
            {
                fixed (int* renderbuffers_ptr = &renderbuffers)
                {
                    GenRenderbuffersEXT(n, renderbuffers_ptr);
                }
            }
            /// <inheritdoc cref="GenSemaphoresEXT(int, uint*)"/>
            public static unsafe void GenSemaphoresEXT(int n, Span<uint> semaphores)
            {
                fixed (uint* semaphores_ptr = semaphores)
                {
                    GenSemaphoresEXT(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="GenSemaphoresEXT(int, uint*)"/>
            public static unsafe void GenSemaphoresEXT(int n, uint[] semaphores)
            {
                fixed (uint* semaphores_ptr = semaphores)
                {
                    GenSemaphoresEXT(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="GenSemaphoresEXT(int, uint*)"/>
            public static unsafe void GenSemaphoresEXT(int n, ref uint semaphores)
            {
                fixed (uint* semaphores_ptr = &semaphores)
                {
                    GenSemaphoresEXT(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="GenTexturesEXT(int, int*)"/>
            public static unsafe void GenTexturesEXT(int n, Span<int> textures)
            {
                fixed (int* textures_ptr = textures)
                {
                    GenTexturesEXT(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="GenTexturesEXT(int, int*)"/>
            public static unsafe void GenTexturesEXT(int n, int[] textures)
            {
                fixed (int* textures_ptr = textures)
                {
                    GenTexturesEXT(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="GenTexturesEXT(int, int*)"/>
            public static unsafe void GenTexturesEXT(int n, ref int textures)
            {
                fixed (int* textures_ptr = &textures)
                {
                    GenTexturesEXT(n, textures_ptr);
                }
            }
            /// <inheritdoc cref="GetBooleanIndexedvEXT(BufferTarget, uint, bool*)"/>
            public static unsafe void GetBooleanIndexedvEXT(BufferTarget target, uint index, Span<bool> data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetBooleanIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBooleanIndexedvEXT(BufferTarget, uint, bool*)"/>
            public static unsafe void GetBooleanIndexedvEXT(BufferTarget target, uint index, bool[] data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetBooleanIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetBooleanIndexedvEXT(BufferTarget, uint, bool*)"/>
            public static unsafe bool GetBooleanIndexedvEXT(BufferTarget target, uint index)
            {
                bool data;
                bool* data_ptr = &data;
                {
                    GetBooleanIndexedvEXT(target, index, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetBooleanIndexedvEXT(BufferTarget, uint, bool*)"/>
            public static unsafe void GetBooleanIndexedvEXT(BufferTarget target, uint index, out bool data)
            {
                fixed (bool* data_ptr = &data)
                {
                    GetBooleanIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableEXT(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableEXT(ColorTableTarget target, PixelFormat format, PixelType type, IntPtr data)
            {
                void* data_vptr = (void*)data;
                GetColorTableEXT(target, format, type, data_vptr);
            }
            /// <inheritdoc cref="GetColorTableEXT(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableEXT<T1>(ColorTableTarget target, PixelFormat format, PixelType type, Span<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetColorTableEXT(target, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableEXT(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableEXT<T1>(ColorTableTarget target, PixelFormat format, PixelType type, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetColorTableEXT(target, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableEXT(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe T1 GetColorTableEXT<T1>(ColorTableTarget target, PixelFormat format, PixelType type)
                where T1 : unmanaged
            {
                T1 data;
                void* data_ptr = &data;
                {
                    GetColorTableEXT(target, format, type, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetColorTableEXT(ColorTableTarget, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableEXT<T1>(ColorTableTarget target, PixelFormat format, PixelType type, out T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    GetColorTableEXT(target, format, type, data_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfvEXT(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfvEXT(ColorTableTarget target, ColorTableParameterPName pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfvEXT(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfvEXT(ColorTableTarget target, ColorTableParameterPName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfvEXT(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe float GetColorTableParameterfvEXT(ColorTableTarget target, ColorTableParameterPName pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetColorTableParameterfvEXT(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetColorTableParameterfvEXT(ColorTableTarget, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfvEXT(ColorTableTarget target, ColorTableParameterPName pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetColorTableParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterivEXT(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameterivEXT(ColorTableTarget target, ColorTableParameterPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterivEXT(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameterivEXT(ColorTableTarget target, ColorTableParameterPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterivEXT(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe int GetColorTableParameterivEXT(ColorTableTarget target, ColorTableParameterPName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetColorTableParameterivEXT(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetColorTableParameterivEXT(ColorTableTarget, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameterivEXT(ColorTableTarget target, ColorTableParameterPName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetColorTableParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedMultiTexImageEXT(TextureUnit, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int lod, IntPtr img)
            {
                void* img_vptr = (void*)img;
                GetCompressedMultiTexImageEXT(texunit, target, lod, img_vptr);
            }
            /// <inheritdoc cref="GetCompressedMultiTexImageEXT(TextureUnit, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedMultiTexImageEXT<T1>(TextureUnit texunit, TextureTarget target, int lod, Span<T1> img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedMultiTexImageEXT(texunit, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedMultiTexImageEXT(TextureUnit, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedMultiTexImageEXT<T1>(TextureUnit texunit, TextureTarget target, int lod, T1[] img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedMultiTexImageEXT(texunit, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedMultiTexImageEXT(TextureUnit, TextureTarget, int, void*)"/>
            public static unsafe T1 GetCompressedMultiTexImageEXT<T1>(TextureUnit texunit, TextureTarget target, int lod)
                where T1 : unmanaged
            {
                T1 img;
                void* img_ptr = &img;
                {
                    GetCompressedMultiTexImageEXT(texunit, target, lod, img_ptr);
                }
                return img;
            }
            /// <inheritdoc cref="GetCompressedMultiTexImageEXT(TextureUnit, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedMultiTexImageEXT<T1>(TextureUnit texunit, TextureTarget target, int lod, out T1 img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = &img)
                {
                    GetCompressedMultiTexImageEXT(texunit, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImageEXT(int, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTextureImageEXT(int texture, TextureTarget target, int lod, IntPtr img)
            {
                void* img_vptr = (void*)img;
                GetCompressedTextureImageEXT(texture, target, lod, img_vptr);
            }
            /// <inheritdoc cref="GetCompressedTextureImageEXT(int, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTextureImageEXT<T1>(int texture, TextureTarget target, int lod, Span<T1> img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedTextureImageEXT(texture, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImageEXT(int, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTextureImageEXT<T1>(int texture, TextureTarget target, int lod, T1[] img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = img)
                {
                    GetCompressedTextureImageEXT(texture, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetCompressedTextureImageEXT(int, TextureTarget, int, void*)"/>
            public static unsafe T1 GetCompressedTextureImageEXT<T1>(int texture, TextureTarget target, int lod)
                where T1 : unmanaged
            {
                T1 img;
                void* img_ptr = &img;
                {
                    GetCompressedTextureImageEXT(texture, target, lod, img_ptr);
                }
                return img;
            }
            /// <inheritdoc cref="GetCompressedTextureImageEXT(int, TextureTarget, int, void*)"/>
            public static unsafe void GetCompressedTextureImageEXT<T1>(int texture, TextureTarget target, int lod, out T1 img)
                where T1 : unmanaged
            {
                fixed (void* img_ptr = &img)
                {
                    GetCompressedTextureImageEXT(texture, target, lod, img_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilterEXT(ConvolutionTargetEXT, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilterEXT(ConvolutionTargetEXT target, PixelFormat format, PixelType type, IntPtr image)
            {
                void* image_vptr = (void*)image;
                GetConvolutionFilterEXT(target, format, type, image_vptr);
            }
            /// <inheritdoc cref="GetConvolutionFilterEXT(ConvolutionTargetEXT, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilterEXT<T1>(ConvolutionTargetEXT target, PixelFormat format, PixelType type, Span<T1> image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    GetConvolutionFilterEXT(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilterEXT(ConvolutionTargetEXT, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilterEXT<T1>(ConvolutionTargetEXT target, PixelFormat format, PixelType type, T1[] image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = image)
                {
                    GetConvolutionFilterEXT(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionFilterEXT(ConvolutionTargetEXT, PixelFormat, PixelType, void*)"/>
            public static unsafe T1 GetConvolutionFilterEXT<T1>(ConvolutionTargetEXT target, PixelFormat format, PixelType type)
                where T1 : unmanaged
            {
                T1 image;
                void* image_ptr = &image;
                {
                    GetConvolutionFilterEXT(target, format, type, image_ptr);
                }
                return image;
            }
            /// <inheritdoc cref="GetConvolutionFilterEXT(ConvolutionTargetEXT, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetConvolutionFilterEXT<T1>(ConvolutionTargetEXT target, PixelFormat format, PixelType type, out T1 image)
                where T1 : unmanaged
            {
                fixed (void* image_ptr = &image)
                {
                    GetConvolutionFilterEXT(target, format, type, image_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfvEXT(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetConvolutionParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfvEXT(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetConvolutionParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterfvEXT(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe float GetConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetConvolutionParameterfvEXT(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetConvolutionParameterfvEXT(ConvolutionTargetEXT, ConvolutionParameter, float*)"/>
            public static unsafe void GetConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetConvolutionParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterivEXT(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterivEXT(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterivEXT(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe int GetConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetConvolutionParameterivEXT(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetConvolutionParameterivEXT(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void GetConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetConvolutionParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_vEXT(GetPName, uint, double*)"/>
            public static unsafe void GetDoublei_vEXT(GetPName pname, uint index, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetDoublei_vEXT(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_vEXT(GetPName, uint, double*)"/>
            public static unsafe void GetDoublei_vEXT(GetPName pname, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetDoublei_vEXT(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetDoublei_vEXT(GetPName, uint, double*)"/>
            public static unsafe double GetDoublei_vEXT(GetPName pname, uint index)
            {
                double parameters;
                double* parameters_ptr = &parameters;
                {
                    GetDoublei_vEXT(pname, index, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetDoublei_vEXT(GetPName, uint, double*)"/>
            public static unsafe void GetDoublei_vEXT(GetPName pname, uint index, out double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetDoublei_vEXT(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetDoubleIndexedvEXT(GetPName, uint, double*)"/>
            public static unsafe void GetDoubleIndexedvEXT(GetPName target, uint index, Span<double> data)
            {
                fixed (double* data_ptr = data)
                {
                    GetDoubleIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoubleIndexedvEXT(GetPName, uint, double*)"/>
            public static unsafe void GetDoubleIndexedvEXT(GetPName target, uint index, double[] data)
            {
                fixed (double* data_ptr = data)
                {
                    GetDoubleIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetDoubleIndexedvEXT(GetPName, uint, double*)"/>
            public static unsafe double GetDoubleIndexedvEXT(GetPName target, uint index)
            {
                double data;
                double* data_ptr = &data;
                {
                    GetDoubleIndexedvEXT(target, index, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetDoubleIndexedvEXT(GetPName, uint, double*)"/>
            public static unsafe void GetDoubleIndexedvEXT(GetPName target, uint index, out double data)
            {
                fixed (double* data_ptr = &data)
                {
                    GetDoubleIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_vEXT(GetPName, uint, float*)"/>
            public static unsafe void GetFloati_vEXT(GetPName pname, uint index, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFloati_vEXT(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_vEXT(GetPName, uint, float*)"/>
            public static unsafe void GetFloati_vEXT(GetPName pname, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFloati_vEXT(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFloati_vEXT(GetPName, uint, float*)"/>
            public static unsafe float GetFloati_vEXT(GetPName pname, uint index)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetFloati_vEXT(pname, index, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetFloati_vEXT(GetPName, uint, float*)"/>
            public static unsafe void GetFloati_vEXT(GetPName pname, uint index, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetFloati_vEXT(pname, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFloatIndexedvEXT(GetPName, uint, float*)"/>
            public static unsafe void GetFloatIndexedvEXT(GetPName target, uint index, Span<float> data)
            {
                fixed (float* data_ptr = data)
                {
                    GetFloatIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloatIndexedvEXT(GetPName, uint, float*)"/>
            public static unsafe void GetFloatIndexedvEXT(GetPName target, uint index, float[] data)
            {
                fixed (float* data_ptr = data)
                {
                    GetFloatIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFloatIndexedvEXT(GetPName, uint, float*)"/>
            public static unsafe float GetFloatIndexedvEXT(GetPName target, uint index)
            {
                float data;
                float* data_ptr = &data;
                {
                    GetFloatIndexedvEXT(target, index, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetFloatIndexedvEXT(GetPName, uint, float*)"/>
            public static unsafe void GetFloatIndexedvEXT(GetPName target, uint index, out float data)
            {
                fixed (float* data_ptr = &data)
                {
                    GetFloatIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetFragDataLocationEXT(int, byte*)"/>
            public static unsafe int GetFragDataLocationEXT(int program, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetFragDataLocationEXT(program, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameterivEXT(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameterivEXT(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferAttachmentParameterivEXT(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameterivEXT(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameterivEXT(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferAttachmentParameterivEXT(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameterivEXT(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe int GetFramebufferAttachmentParameterivEXT(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetFramebufferAttachmentParameterivEXT(target, attachment, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetFramebufferAttachmentParameterivEXT(FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferAttachmentParameterivEXT(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFramebufferAttachmentParameterivEXT(target, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe int GetFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramEXT(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogramEXT(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetHistogramEXT(target, reset, format, type, values_vptr);
            }
            /// <inheritdoc cref="GetHistogramEXT(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogramEXT<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetHistogramEXT(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramEXT(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogramEXT<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetHistogramEXT(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramEXT(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe T1 GetHistogramEXT<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type)
                where T1 : unmanaged
            {
                T1 values;
                void* values_ptr = &values;
                {
                    GetHistogramEXT(target, reset, format, type, values_ptr);
                }
                return values;
            }
            /// <inheritdoc cref="GetHistogramEXT(HistogramTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetHistogramEXT<T1>(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, out T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetHistogramEXT(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfvEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterfvEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetHistogramParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfvEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterfvEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetHistogramParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterfvEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe float GetHistogramParameterfvEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetHistogramParameterfvEXT(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetHistogramParameterfvEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, float*)"/>
            public static unsafe void GetHistogramParameterfvEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetHistogramParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterivEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameterivEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterivEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameterivEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterivEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe int GetHistogramParameterivEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetHistogramParameterivEXT(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetHistogramParameterivEXT(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameterivEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetHistogramParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerIndexedvEXT(GetPName, uint, int*)"/>
            public static unsafe void GetIntegerIndexedvEXT(GetPName target, uint index, Span<int> data)
            {
                fixed (int* data_ptr = data)
                {
                    GetIntegerIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerIndexedvEXT(GetPName, uint, int*)"/>
            public static unsafe void GetIntegerIndexedvEXT(GetPName target, uint index, int[] data)
            {
                fixed (int* data_ptr = data)
                {
                    GetIntegerIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerIndexedvEXT(GetPName, uint, int*)"/>
            public static unsafe int GetIntegerIndexedvEXT(GetPName target, uint index)
            {
                int data;
                int* data_ptr = &data;
                {
                    GetIntegerIndexedvEXT(target, index, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetIntegerIndexedvEXT(GetPName, uint, int*)"/>
            public static unsafe void GetIntegerIndexedvEXT(GetPName target, uint index, out int data)
            {
                fixed (int* data_ptr = &data)
                {
                    GetIntegerIndexedvEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetInvariantBooleanvEXT(uint id, GetVariantValueEXT value, Span<bool> data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetInvariantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetInvariantBooleanvEXT(uint id, GetVariantValueEXT value, bool[] data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetInvariantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe bool GetInvariantBooleanvEXT(uint id, GetVariantValueEXT value)
            {
                bool data;
                bool* data_ptr = &data;
                {
                    GetInvariantBooleanvEXT(id, value, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetInvariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetInvariantBooleanvEXT(uint id, GetVariantValueEXT value, out bool data)
            {
                fixed (bool* data_ptr = &data)
                {
                    GetInvariantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetInvariantFloatvEXT(uint id, GetVariantValueEXT value, Span<float> data)
            {
                fixed (float* data_ptr = data)
                {
                    GetInvariantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetInvariantFloatvEXT(uint id, GetVariantValueEXT value, float[] data)
            {
                fixed (float* data_ptr = data)
                {
                    GetInvariantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe float GetInvariantFloatvEXT(uint id, GetVariantValueEXT value)
            {
                float data;
                float* data_ptr = &data;
                {
                    GetInvariantFloatvEXT(id, value, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetInvariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetInvariantFloatvEXT(uint id, GetVariantValueEXT value, out float data)
            {
                fixed (float* data_ptr = &data)
                {
                    GetInvariantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetInvariantIntegervEXT(uint id, GetVariantValueEXT value, Span<int> data)
            {
                fixed (int* data_ptr = data)
                {
                    GetInvariantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetInvariantIntegervEXT(uint id, GetVariantValueEXT value, int[] data)
            {
                fixed (int* data_ptr = data)
                {
                    GetInvariantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetInvariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe int GetInvariantIntegervEXT(uint id, GetVariantValueEXT value)
            {
                int data;
                int* data_ptr = &data;
                {
                    GetInvariantIntegervEXT(id, value, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetInvariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetInvariantIntegervEXT(uint id, GetVariantValueEXT value, out int data)
            {
                fixed (int* data_ptr = &data)
                {
                    GetInvariantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetLocalConstantBooleanvEXT(uint id, GetVariantValueEXT value, Span<bool> data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetLocalConstantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetLocalConstantBooleanvEXT(uint id, GetVariantValueEXT value, bool[] data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetLocalConstantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe bool GetLocalConstantBooleanvEXT(uint id, GetVariantValueEXT value)
            {
                bool data;
                bool* data_ptr = &data;
                {
                    GetLocalConstantBooleanvEXT(id, value, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetLocalConstantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetLocalConstantBooleanvEXT(uint id, GetVariantValueEXT value, out bool data)
            {
                fixed (bool* data_ptr = &data)
                {
                    GetLocalConstantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetLocalConstantFloatvEXT(uint id, GetVariantValueEXT value, Span<float> data)
            {
                fixed (float* data_ptr = data)
                {
                    GetLocalConstantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetLocalConstantFloatvEXT(uint id, GetVariantValueEXT value, float[] data)
            {
                fixed (float* data_ptr = data)
                {
                    GetLocalConstantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe float GetLocalConstantFloatvEXT(uint id, GetVariantValueEXT value)
            {
                float data;
                float* data_ptr = &data;
                {
                    GetLocalConstantFloatvEXT(id, value, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetLocalConstantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetLocalConstantFloatvEXT(uint id, GetVariantValueEXT value, out float data)
            {
                fixed (float* data_ptr = &data)
                {
                    GetLocalConstantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetLocalConstantIntegervEXT(uint id, GetVariantValueEXT value, Span<int> data)
            {
                fixed (int* data_ptr = data)
                {
                    GetLocalConstantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetLocalConstantIntegervEXT(uint id, GetVariantValueEXT value, int[] data)
            {
                fixed (int* data_ptr = data)
                {
                    GetLocalConstantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetLocalConstantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe int GetLocalConstantIntegervEXT(uint id, GetVariantValueEXT value)
            {
                int data;
                int* data_ptr = &data;
                {
                    GetLocalConstantIntegervEXT(id, value, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetLocalConstantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetLocalConstantIntegervEXT(uint id, GetVariantValueEXT value, out int data)
            {
                fixed (int* data_ptr = &data)
                {
                    GetLocalConstantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetMemoryObjectParameterivEXT(uint, MemoryObjectParameterName, int*)"/>
            public static unsafe void GetMemoryObjectParameterivEXT(uint memoryObject, MemoryObjectParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMemoryObjectParameterivEXT(memoryObject, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMemoryObjectParameterivEXT(uint, MemoryObjectParameterName, int*)"/>
            public static unsafe void GetMemoryObjectParameterivEXT(uint memoryObject, MemoryObjectParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMemoryObjectParameterivEXT(memoryObject, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMemoryObjectParameterivEXT(uint, MemoryObjectParameterName, int*)"/>
            public static unsafe void GetMemoryObjectParameterivEXT(uint memoryObject, MemoryObjectParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMemoryObjectParameterivEXT(memoryObject, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxEXT(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmaxEXT(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, IntPtr values)
            {
                void* values_vptr = (void*)values;
                GetMinmaxEXT(target, reset, format, type, values_vptr);
            }
            /// <inheritdoc cref="GetMinmaxEXT(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmaxEXT<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, Span<T1> values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetMinmaxEXT(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxEXT(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmaxEXT<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, T1[] values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = values)
                {
                    GetMinmaxEXT(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxEXT(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe T1 GetMinmaxEXT<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type)
                where T1 : unmanaged
            {
                T1 values;
                void* values_ptr = &values;
                {
                    GetMinmaxEXT(target, reset, format, type, values_ptr);
                }
                return values;
            }
            /// <inheritdoc cref="GetMinmaxEXT(MinmaxTargetEXT, bool, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMinmaxEXT<T1>(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, out T1 values)
                where T1 : unmanaged
            {
                fixed (void* values_ptr = &values)
                {
                    GetMinmaxEXT(target, reset, format, type, values_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfvEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterfvEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMinmaxParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfvEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterfvEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMinmaxParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterfvEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe float GetMinmaxParameterfvEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetMinmaxParameterfvEXT(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMinmaxParameterfvEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, float*)"/>
            public static unsafe void GetMinmaxParameterfvEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMinmaxParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterivEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameterivEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMinmaxParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterivEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameterivEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMinmaxParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMinmaxParameterivEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe int GetMinmaxParameterivEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetMinmaxParameterivEXT(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMinmaxParameterivEXT(MinmaxTargetEXT, GetMinmaxParameterPNameEXT, int*)"/>
            public static unsafe void GetMinmaxParameterivEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMinmaxParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnvfvEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void GetMultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnvfvEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void GetMultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnvfvEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe float GetMultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetMultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMultiTexEnvfvEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void GetMultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnvivEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetMultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnvivEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetMultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexEnvivEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe int GetMultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetMultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMultiTexEnvivEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetMultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGendvEXT(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void GetMultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetMultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGendvEXT(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void GetMultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetMultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGendvEXT(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe double GetMultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname)
            {
                double parameters;
                double* parameters_ptr = &parameters;
                {
                    GetMultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMultiTexGendvEXT(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void GetMultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, out double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetMultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGenfvEXT(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void GetMultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGenfvEXT(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void GetMultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGenfvEXT(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe float GetMultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetMultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMultiTexGenfvEXT(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void GetMultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGenivEXT(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetMultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGenivEXT(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetMultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexGenivEXT(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe int GetMultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetMultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMultiTexGenivEXT(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetMultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexImageEXT(TextureUnit, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetMultiTexImageEXT(texunit, target, level, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="GetMultiTexImageEXT(TextureUnit, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMultiTexImageEXT<T1>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, Span<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetMultiTexImageEXT(texunit, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexImageEXT(TextureUnit, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMultiTexImageEXT<T1>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetMultiTexImageEXT(texunit, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexImageEXT(TextureUnit, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe T1 GetMultiTexImageEXT<T1>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type)
                where T1 : unmanaged
            {
                T1 pixels;
                void* pixels_ptr = &pixels;
                {
                    GetMultiTexImageEXT(texunit, target, level, format, type, pixels_ptr);
                }
                return pixels;
            }
            /// <inheritdoc cref="GetMultiTexImageEXT(TextureUnit, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetMultiTexImageEXT<T1>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, out T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetMultiTexImageEXT(texunit, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterfvEXT(TextureUnit, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexLevelParameterfvEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexLevelParameterfvEXT(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterfvEXT(TextureUnit, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexLevelParameterfvEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexLevelParameterfvEXT(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterfvEXT(TextureUnit, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe float GetMultiTexLevelParameterfvEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetMultiTexLevelParameterfvEXT(texunit, target, level, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterfvEXT(TextureUnit, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexLevelParameterfvEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMultiTexLevelParameterfvEXT(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterivEXT(TextureUnit, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexLevelParameterivEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexLevelParameterivEXT(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterivEXT(TextureUnit, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexLevelParameterivEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexLevelParameterivEXT(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterivEXT(TextureUnit, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe int GetMultiTexLevelParameterivEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetMultiTexLevelParameterivEXT(texunit, target, level, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMultiTexLevelParameterivEXT(TextureUnit, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexLevelParameterivEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMultiTexLevelParameterivEXT(texunit, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterfvEXT(TextureUnit, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterfvEXT(TextureUnit, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterfvEXT(TextureUnit, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe float GetMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetMultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMultiTexParameterfvEXT(TextureUnit, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe int GetMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetMultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMultiTexParameterIivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIuivEXT(TextureUnit, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetMultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIuivEXT(TextureUnit, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetMultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterIuivEXT(TextureUnit, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe uint GetMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname)
            {
                uint parameters;
                uint* parameters_ptr = &parameters;
                {
                    GetMultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMultiTexParameterIuivEXT(TextureUnit, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetMultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultiTexParameterivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe int GetMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetMultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMultiTexParameterivEXT(TextureUnit, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameterivEXT(int, BufferPName, int*)"/>
            public static unsafe void GetNamedBufferParameterivEXT(int buffer, BufferPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedBufferParameterivEXT(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameterivEXT(int, BufferPName, int*)"/>
            public static unsafe void GetNamedBufferParameterivEXT(int buffer, BufferPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedBufferParameterivEXT(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameterivEXT(int, BufferPName, int*)"/>
            public static unsafe int GetNamedBufferParameterivEXT(int buffer, BufferPName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetNamedBufferParameterivEXT(buffer, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetNamedBufferParameterivEXT(int, BufferPName, int*)"/>
            public static unsafe void GetNamedBufferParameterivEXT(int buffer, BufferPName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedBufferParameterivEXT(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubDataEXT(int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                GetNamedBufferSubDataEXT(buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="GetNamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubDataEXT<T1>(int buffer, IntPtr offset, nint size, Span<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetNamedBufferSubDataEXT(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubDataEXT<T1>(int buffer, IntPtr offset, nint size, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    GetNamedBufferSubDataEXT(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe T1 GetNamedBufferSubDataEXT<T1>(int buffer, IntPtr offset, nint size)
                where T1 : unmanaged
            {
                T1 data;
                void* data_ptr = &data;
                {
                    GetNamedBufferSubDataEXT(buffer, offset, size, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetNamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void GetNamedBufferSubDataEXT<T1>(int buffer, IntPtr offset, nint size, out T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    GetNamedBufferSubDataEXT(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameterivEXT(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetNamedFramebufferAttachmentParameterivEXT(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameterivEXT(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetNamedFramebufferAttachmentParameterivEXT(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameterivEXT(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe int GetNamedFramebufferAttachmentParameterivEXT(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetNamedFramebufferAttachmentParameterivEXT(int, FramebufferAttachment, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetNamedFramebufferAttachmentParameterivEXT(int framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetNamedFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetNamedFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe int GetNamedFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetNamedFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetNamedFramebufferParameterivEXT(int, GetFramebufferParameter, int*)"/>
            public static unsafe void GetNamedFramebufferParameterivEXT(int framebuffer, GetFramebufferParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedFramebufferParameterivEXT(framebuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramivEXT(int, ProgramTarget, ProgramProperty, int*)"/>
            public static unsafe int GetNamedProgramivEXT(int program, ProgramTarget target, ProgramProperty pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetNamedProgramivEXT(program, target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetNamedProgramivEXT(int, ProgramTarget, ProgramProperty, int*)"/>
            public static unsafe void GetNamedProgramivEXT(int program, ProgramTarget target, ProgramProperty pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedProgramivEXT(program, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterdvEXT(int, ProgramTarget, uint, double*)"/>
            public static unsafe void GetNamedProgramLocalParameterdvEXT(int program, ProgramTarget target, uint index, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterdvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterdvEXT(int, ProgramTarget, uint, double*)"/>
            public static unsafe void GetNamedProgramLocalParameterdvEXT(int program, ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterdvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterdvEXT(int, ProgramTarget, uint, double*)"/>
            public static unsafe void GetNamedProgramLocalParameterdvEXT(int program, ProgramTarget target, uint index, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetNamedProgramLocalParameterdvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterfvEXT(int, ProgramTarget, uint, float*)"/>
            public static unsafe void GetNamedProgramLocalParameterfvEXT(int program, ProgramTarget target, uint index, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterfvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterfvEXT(int, ProgramTarget, uint, float*)"/>
            public static unsafe void GetNamedProgramLocalParameterfvEXT(int program, ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterfvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterfvEXT(int, ProgramTarget, uint, float*)"/>
            public static unsafe void GetNamedProgramLocalParameterfvEXT(int program, ProgramTarget target, uint index, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetNamedProgramLocalParameterfvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIivEXT(int, ProgramTarget, uint, int*)"/>
            public static unsafe void GetNamedProgramLocalParameterIivEXT(int program, ProgramTarget target, uint index, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterIivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIivEXT(int, ProgramTarget, uint, int*)"/>
            public static unsafe void GetNamedProgramLocalParameterIivEXT(int program, ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterIivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIivEXT(int, ProgramTarget, uint, int*)"/>
            public static unsafe void GetNamedProgramLocalParameterIivEXT(int program, ProgramTarget target, uint index, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedProgramLocalParameterIivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIuivEXT(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void GetNamedProgramLocalParameterIuivEXT(int program, ProgramTarget target, uint index, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterIuivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIuivEXT(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void GetNamedProgramLocalParameterIuivEXT(int program, ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetNamedProgramLocalParameterIuivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramLocalParameterIuivEXT(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void GetNamedProgramLocalParameterIuivEXT(int program, ProgramTarget target, uint index, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetNamedProgramLocalParameterIuivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramStringEXT(int, ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetNamedProgramStringEXT(int program, ProgramTarget target, ProgramStringProperty pname, IntPtr str)
            {
                void* str_vptr = (void*)str;
                GetNamedProgramStringEXT(program, target, pname, str_vptr);
            }
            /// <inheritdoc cref="GetNamedProgramStringEXT(int, ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetNamedProgramStringEXT<T1>(int program, ProgramTarget target, ProgramStringProperty pname, Span<T1> str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    GetNamedProgramStringEXT(program, target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramStringEXT(int, ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetNamedProgramStringEXT<T1>(int program, ProgramTarget target, ProgramStringProperty pname, T1[] str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    GetNamedProgramStringEXT(program, target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedProgramStringEXT(int, ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe T1 GetNamedProgramStringEXT<T1>(int program, ProgramTarget target, ProgramStringProperty pname)
                where T1 : unmanaged
            {
                T1 str;
                void* str_ptr = &str;
                {
                    GetNamedProgramStringEXT(program, target, pname, str_ptr);
                }
                return str;
            }
            /// <inheritdoc cref="GetNamedProgramStringEXT(int, ProgramTarget, ProgramStringProperty, void*)"/>
            public static unsafe void GetNamedProgramStringEXT<T1>(int program, ProgramTarget target, ProgramStringProperty pname, out T1 str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = &str)
                {
                    GetNamedProgramStringEXT(program, target, pname, str_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameterivEXT(int, RenderbufferParameterName, int*)"/>
            public static unsafe void GetNamedRenderbufferParameterivEXT(int renderbuffer, RenderbufferParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedRenderbufferParameterivEXT(renderbuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameterivEXT(int, RenderbufferParameterName, int*)"/>
            public static unsafe void GetNamedRenderbufferParameterivEXT(int renderbuffer, RenderbufferParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetNamedRenderbufferParameterivEXT(renderbuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameterivEXT(int, RenderbufferParameterName, int*)"/>
            public static unsafe int GetNamedRenderbufferParameterivEXT(int renderbuffer, RenderbufferParameterName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetNamedRenderbufferParameterivEXT(renderbuffer, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetNamedRenderbufferParameterivEXT(int, RenderbufferParameterName, int*)"/>
            public static unsafe void GetNamedRenderbufferParameterivEXT(int renderbuffer, RenderbufferParameterName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetNamedRenderbufferParameterivEXT(renderbuffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectLabelEXT(All, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabelEXT(All type, uint obj, int bufSize, out int length)
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabelEXT(All, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabelEXT(All type, uint obj, int bufSize, out int length, out string label)
            {
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabelEXT(type, obj, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterfvEXT(All, All, float*)"/>
            public static unsafe void GetPixelTransformParameterfvEXT(All target, All pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetPixelTransformParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterfvEXT(All, All, float*)"/>
            public static unsafe void GetPixelTransformParameterfvEXT(All target, All pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetPixelTransformParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterfvEXT(All, All, float*)"/>
            public static unsafe float GetPixelTransformParameterfvEXT(All target, All pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetPixelTransformParameterfvEXT(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetPixelTransformParameterfvEXT(All, All, float*)"/>
            public static unsafe void GetPixelTransformParameterfvEXT(All target, All pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetPixelTransformParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterivEXT(All, All, int*)"/>
            public static unsafe void GetPixelTransformParameterivEXT(All target, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetPixelTransformParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterivEXT(All, All, int*)"/>
            public static unsafe void GetPixelTransformParameterivEXT(All target, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetPixelTransformParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTransformParameterivEXT(All, All, int*)"/>
            public static unsafe int GetPixelTransformParameterivEXT(All target, All pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetPixelTransformParameterivEXT(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetPixelTransformParameterivEXT(All, All, int*)"/>
            public static unsafe void GetPixelTransformParameterivEXT(All target, All pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetPixelTransformParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLogEXT(int, int, int*, byte*)"/>
            public static unsafe string GetProgramPipelineInfoLogEXT(int pipeline, int bufSize, out int length)
            {
                string infoLog;
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
                return infoLog;
            }
            /// <inheritdoc cref="GetProgramPipelineInfoLogEXT(int, int, int*, byte*)"/>
            public static unsafe void GetProgramPipelineInfoLogEXT(int pipeline, int bufSize, out int length, out string infoLog)
            {
                fixed (int* length_ptr = &length)
                {
                    var infoLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetProgramPipelineInfoLogEXT(pipeline, bufSize, length_ptr, infoLog_ptr);
                    infoLog = Marshal.PtrToStringUTF8((IntPtr)infoLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)infoLog_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineivEXT(int, PipelineParameterName, int*)"/>
            public static unsafe void GetProgramPipelineivEXT(int pipeline, PipelineParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramPipelineivEXT(pipeline, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineivEXT(int, PipelineParameterName, int*)"/>
            public static unsafe void GetProgramPipelineivEXT(int pipeline, PipelineParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramPipelineivEXT(pipeline, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramPipelineivEXT(int, PipelineParameterName, int*)"/>
            public static unsafe void GetProgramPipelineivEXT(int pipeline, PipelineParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramPipelineivEXT(pipeline, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64vEXT(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64vEXT(int id, QueryObjectParameterName pname, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetQueryObjecti64vEXT(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64vEXT(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64vEXT(int id, QueryObjectParameterName pname, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetQueryObjecti64vEXT(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjecti64vEXT(int, QueryObjectParameterName, long*)"/>
            public static unsafe long GetQueryObjecti64vEXT(int id, QueryObjectParameterName pname)
            {
                long parameters;
                long* parameters_ptr = &parameters;
                {
                    GetQueryObjecti64vEXT(id, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetQueryObjecti64vEXT(int, QueryObjectParameterName, long*)"/>
            public static unsafe void GetQueryObjecti64vEXT(int id, QueryObjectParameterName pname, out long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetQueryObjecti64vEXT(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64vEXT(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64vEXT(int id, QueryObjectParameterName pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetQueryObjectui64vEXT(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64vEXT(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64vEXT(int id, QueryObjectParameterName pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetQueryObjectui64vEXT(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetQueryObjectui64vEXT(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe ulong GetQueryObjectui64vEXT(int id, QueryObjectParameterName pname)
            {
                ulong parameters;
                ulong* parameters_ptr = &parameters;
                {
                    GetQueryObjectui64vEXT(id, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetQueryObjectui64vEXT(int, QueryObjectParameterName, ulong*)"/>
            public static unsafe void GetQueryObjectui64vEXT(int id, QueryObjectParameterName pname, out ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetQueryObjectui64vEXT(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameterivEXT(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameterivEXT(RenderbufferTarget target, RenderbufferParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetRenderbufferParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameterivEXT(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameterivEXT(RenderbufferTarget target, RenderbufferParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetRenderbufferParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetRenderbufferParameterivEXT(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe int GetRenderbufferParameterivEXT(RenderbufferTarget target, RenderbufferParameterName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetRenderbufferParameterivEXT(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetRenderbufferParameterivEXT(RenderbufferTarget, RenderbufferParameterName, int*)"/>
            public static unsafe void GetRenderbufferParameterivEXT(RenderbufferTarget target, RenderbufferParameterName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetRenderbufferParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSemaphoreParameterui64vEXT(uint, SemaphoreParameterName, ulong*)"/>
            public static unsafe void GetSemaphoreParameterui64vEXT(uint semaphore, SemaphoreParameterName pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetSemaphoreParameterui64vEXT(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSemaphoreParameterui64vEXT(uint, SemaphoreParameterName, ulong*)"/>
            public static unsafe void GetSemaphoreParameterui64vEXT(uint semaphore, SemaphoreParameterName pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetSemaphoreParameterui64vEXT(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSemaphoreParameterui64vEXT(uint, SemaphoreParameterName, ulong*)"/>
            public static unsafe void GetSemaphoreParameterui64vEXT(uint semaphore, SemaphoreParameterName pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetSemaphoreParameterui64vEXT(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSeparableFilterEXT(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilterEXT(SeparableTargetEXT target, PixelFormat format, PixelType type, IntPtr row, IntPtr column, IntPtr span)
            {
                void* row_vptr = (void*)row;
                void* column_vptr = (void*)column;
                void* span_vptr = (void*)span;
                GetSeparableFilterEXT(target, format, type, row_vptr, column_vptr, span_vptr);
            }
            /// <inheritdoc cref="GetSeparableFilterEXT(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilterEXT<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, Span<T1> row, Span<T2> column, Span<T3> span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* span_ptr = span)
                {
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* row_ptr = row)
                        {
                            GetSeparableFilterEXT(target, format, type, row_ptr, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetSeparableFilterEXT(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilterEXT<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, T1[] row, T2[] column, T3[] span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* span_ptr = span)
                {
                    fixed (void* column_ptr = column)
                    {
                        fixed (void* row_ptr = row)
                        {
                            GetSeparableFilterEXT(target, format, type, row_ptr, column_ptr, span_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetSeparableFilterEXT(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe T3 GetSeparableFilterEXT<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, out T1 row, out T2 column)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                T3 span;
                void* span_ptr = &span;
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                {
                    GetSeparableFilterEXT(target, format, type, row_ptr, column_ptr, span_ptr);
                }
                return span;
            }
            /// <inheritdoc cref="GetSeparableFilterEXT(SeparableTargetEXT, PixelFormat, PixelType, void*, void*, void*)"/>
            public static unsafe void GetSeparableFilterEXT<T1, T2, T3>(SeparableTargetEXT target, PixelFormat format, PixelType type, out T1 row, out T2 column, out T3 span)
                where T1 : unmanaged
                where T2 : unmanaged
                where T3 : unmanaged
            {
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                fixed (void* span_ptr = &span)
                {
                    GetSeparableFilterEXT(target, format, type, row_ptr, column_ptr, span_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIivEXT(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterIivEXT(TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexParameterIivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIivEXT(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterIivEXT(TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexParameterIivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIivEXT(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe int GetTexParameterIivEXT(TextureTarget target, GetTextureParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetTexParameterIivEXT(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetTexParameterIivEXT(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterIivEXT(TextureTarget target, GetTextureParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTexParameterIivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIuivEXT(TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTexParameterIuivEXT(TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetTexParameterIuivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIuivEXT(TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTexParameterIuivEXT(TextureTarget target, GetTextureParameter pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetTexParameterIuivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterIuivEXT(TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe uint GetTexParameterIuivEXT(TextureTarget target, GetTextureParameter pname)
            {
                uint parameters;
                uint* parameters_ptr = &parameters;
                {
                    GetTexParameterIuivEXT(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetTexParameterIuivEXT(TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTexParameterIuivEXT(TextureTarget target, GetTextureParameter pname, out uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetTexParameterIuivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImageEXT(int, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetTextureImageEXT(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                GetTextureImageEXT(texture, target, level, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="GetTextureImageEXT(int, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetTextureImageEXT<T1>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, Span<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureImageEXT(texture, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImageEXT(int, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetTextureImageEXT<T1>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    GetTextureImageEXT(texture, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureImageEXT(int, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe T1 GetTextureImageEXT<T1>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type)
                where T1 : unmanaged
            {
                T1 pixels;
                void* pixels_ptr = &pixels;
                {
                    GetTextureImageEXT(texture, target, level, format, type, pixels_ptr);
                }
                return pixels;
            }
            /// <inheritdoc cref="GetTextureImageEXT(int, TextureTarget, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetTextureImageEXT<T1>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, out T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    GetTextureImageEXT(texture, target, level, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfvEXT(int, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureLevelParameterfvEXT(int texture, TextureTarget target, int level, GetTextureParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureLevelParameterfvEXT(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfvEXT(int, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureLevelParameterfvEXT(int texture, TextureTarget target, int level, GetTextureParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureLevelParameterfvEXT(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterfvEXT(int, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe float GetTextureLevelParameterfvEXT(int texture, TextureTarget target, int level, GetTextureParameter pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetTextureLevelParameterfvEXT(texture, target, level, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetTextureLevelParameterfvEXT(int, TextureTarget, int, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureLevelParameterfvEXT(int texture, TextureTarget target, int level, GetTextureParameter pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetTextureLevelParameterfvEXT(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterivEXT(int, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureLevelParameterivEXT(int texture, TextureTarget target, int level, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureLevelParameterivEXT(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterivEXT(int, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureLevelParameterivEXT(int texture, TextureTarget target, int level, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureLevelParameterivEXT(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureLevelParameterivEXT(int, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe int GetTextureLevelParameterivEXT(int texture, TextureTarget target, int level, GetTextureParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetTextureLevelParameterivEXT(texture, target, level, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetTextureLevelParameterivEXT(int, TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureLevelParameterivEXT(int texture, TextureTarget target, int level, GetTextureParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureLevelParameterivEXT(texture, target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterfvEXT(int, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureParameterfvEXT(int texture, TextureTarget target, GetTextureParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureParameterfvEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterfvEXT(int, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureParameterfvEXT(int texture, TextureTarget target, GetTextureParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetTextureParameterfvEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterfvEXT(int, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe float GetTextureParameterfvEXT(int texture, TextureTarget target, GetTextureParameter pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetTextureParameterfvEXT(texture, target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetTextureParameterfvEXT(int, TextureTarget, GetTextureParameter, float*)"/>
            public static unsafe void GetTextureParameterfvEXT(int texture, TextureTarget target, GetTextureParameter pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetTextureParameterfvEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterIivEXT(int texture, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameterIivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterIivEXT(int texture, TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameterIivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe int GetTextureParameterIivEXT(int texture, TextureTarget target, GetTextureParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetTextureParameterIivEXT(texture, target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetTextureParameterIivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterIivEXT(int texture, TextureTarget target, GetTextureParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureParameterIivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIuivEXT(int, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTextureParameterIuivEXT(int texture, TextureTarget target, GetTextureParameter pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetTextureParameterIuivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIuivEXT(int, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTextureParameterIuivEXT(int texture, TextureTarget target, GetTextureParameter pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetTextureParameterIuivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterIuivEXT(int, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe uint GetTextureParameterIuivEXT(int texture, TextureTarget target, GetTextureParameter pname)
            {
                uint parameters;
                uint* parameters_ptr = &parameters;
                {
                    GetTextureParameterIuivEXT(texture, target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetTextureParameterIuivEXT(int, TextureTarget, GetTextureParameter, uint*)"/>
            public static unsafe void GetTextureParameterIuivEXT(int texture, TextureTarget target, GetTextureParameter pname, out uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetTextureParameterIuivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterivEXT(int texture, TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameterivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterivEXT(int texture, TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTextureParameterivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTextureParameterivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe int GetTextureParameterivEXT(int texture, TextureTarget target, GetTextureParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetTextureParameterivEXT(texture, target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetTextureParameterivEXT(int, TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTextureParameterivEXT(int texture, TextureTarget target, GetTextureParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTextureParameterivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackVaryingEXT(int, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe string GetTransformFeedbackVaryingEXT(int program, uint index, int bufSize, out int length, out int size, out AttributeType type)
            {
                string name;
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (AttributeType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetTransformFeedbackVaryingEXT(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetTransformFeedbackVaryingEXT(int, uint, int, int*, int*, AttributeType*, byte*)"/>
            public static unsafe void GetTransformFeedbackVaryingEXT(int program, uint index, int bufSize, out int length, out int size, out AttributeType type, out string name)
            {
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (AttributeType* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetTransformFeedbackVaryingEXT(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformuivEXT(int, int, uint*)"/>
            public static unsafe void GetUniformuivEXT(int program, int location, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetUniformuivEXT(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformuivEXT(int, int, uint*)"/>
            public static unsafe void GetUniformuivEXT(int program, int location, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetUniformuivEXT(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformuivEXT(int, int, uint*)"/>
            public static unsafe uint GetUniformuivEXT(int program, int location)
            {
                uint parameters;
                uint* parameters_ptr = &parameters;
                {
                    GetUniformuivEXT(program, location, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetUniformuivEXT(int, int, uint*)"/>
            public static unsafe void GetUniformuivEXT(int program, int location, out uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetUniformuivEXT(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytei_vEXT(All, uint, byte*)"/>
            public static unsafe void GetUnsignedBytei_vEXT(All target, uint index, Span<byte> data)
            {
                fixed (byte* data_ptr = data)
                {
                    GetUnsignedBytei_vEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytei_vEXT(All, uint, byte*)"/>
            public static unsafe void GetUnsignedBytei_vEXT(All target, uint index, byte[] data)
            {
                fixed (byte* data_ptr = data)
                {
                    GetUnsignedBytei_vEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytei_vEXT(All, uint, byte*)"/>
            public static unsafe byte GetUnsignedBytei_vEXT(All target, uint index)
            {
                byte data;
                byte* data_ptr = &data;
                {
                    GetUnsignedBytei_vEXT(target, index, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetUnsignedBytei_vEXT(All, uint, byte*)"/>
            public static unsafe void GetUnsignedBytei_vEXT(All target, uint index, out byte data)
            {
                fixed (byte* data_ptr = &data)
                {
                    GetUnsignedBytei_vEXT(target, index, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytevEXT(GetPName, byte*)"/>
            public static unsafe void GetUnsignedBytevEXT(GetPName pname, Span<byte> data)
            {
                fixed (byte* data_ptr = data)
                {
                    GetUnsignedBytevEXT(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytevEXT(GetPName, byte*)"/>
            public static unsafe void GetUnsignedBytevEXT(GetPName pname, byte[] data)
            {
                fixed (byte* data_ptr = data)
                {
                    GetUnsignedBytevEXT(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetUnsignedBytevEXT(GetPName, byte*)"/>
            public static unsafe byte GetUnsignedBytevEXT(GetPName pname)
            {
                byte data;
                byte* data_ptr = &data;
                {
                    GetUnsignedBytevEXT(pname, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetUnsignedBytevEXT(GetPName, byte*)"/>
            public static unsafe void GetUnsignedBytevEXT(GetPName pname, out byte data)
            {
                fixed (byte* data_ptr = &data)
                {
                    GetUnsignedBytevEXT(pname, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetVariantBooleanvEXT(uint id, GetVariantValueEXT value, Span<bool> data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetVariantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetVariantBooleanvEXT(uint id, GetVariantValueEXT value, bool[] data)
            {
                fixed (bool* data_ptr = data)
                {
                    GetVariantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe bool GetVariantBooleanvEXT(uint id, GetVariantValueEXT value)
            {
                bool data;
                bool* data_ptr = &data;
                {
                    GetVariantBooleanvEXT(id, value, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetVariantBooleanvEXT(uint, GetVariantValueEXT, bool*)"/>
            public static unsafe void GetVariantBooleanvEXT(uint id, GetVariantValueEXT value, out bool data)
            {
                fixed (bool* data_ptr = &data)
                {
                    GetVariantBooleanvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetVariantFloatvEXT(uint id, GetVariantValueEXT value, Span<float> data)
            {
                fixed (float* data_ptr = data)
                {
                    GetVariantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetVariantFloatvEXT(uint id, GetVariantValueEXT value, float[] data)
            {
                fixed (float* data_ptr = data)
                {
                    GetVariantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe float GetVariantFloatvEXT(uint id, GetVariantValueEXT value)
            {
                float data;
                float* data_ptr = &data;
                {
                    GetVariantFloatvEXT(id, value, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetVariantFloatvEXT(uint, GetVariantValueEXT, float*)"/>
            public static unsafe void GetVariantFloatvEXT(uint id, GetVariantValueEXT value, out float data)
            {
                fixed (float* data_ptr = &data)
                {
                    GetVariantFloatvEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetVariantIntegervEXT(uint id, GetVariantValueEXT value, Span<int> data)
            {
                fixed (int* data_ptr = data)
                {
                    GetVariantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetVariantIntegervEXT(uint id, GetVariantValueEXT value, int[] data)
            {
                fixed (int* data_ptr = data)
                {
                    GetVariantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe int GetVariantIntegervEXT(uint id, GetVariantValueEXT value)
            {
                int data;
                int* data_ptr = &data;
                {
                    GetVariantIntegervEXT(id, value, data_ptr);
                }
                return data;
            }
            /// <inheritdoc cref="GetVariantIntegervEXT(uint, GetVariantValueEXT, int*)"/>
            public static unsafe void GetVariantIntegervEXT(uint id, GetVariantValueEXT value, out int data)
            {
                fixed (int* data_ptr = &data)
                {
                    GetVariantIntegervEXT(id, value, data_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIntegeri_vEXT(int, uint, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayIntegeri_vEXT(int vaobj, uint index, VertexArrayPName pname, Span<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    GetVertexArrayIntegeri_vEXT(vaobj, index, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIntegeri_vEXT(int, uint, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayIntegeri_vEXT(int vaobj, uint index, VertexArrayPName pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    GetVertexArrayIntegeri_vEXT(vaobj, index, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIntegeri_vEXT(int, uint, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayIntegeri_vEXT(int vaobj, uint index, VertexArrayPName pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetVertexArrayIntegeri_vEXT(vaobj, index, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIntegervEXT(int, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayIntegervEXT(int vaobj, VertexArrayPName pname, Span<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    GetVertexArrayIntegervEXT(vaobj, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIntegervEXT(int, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayIntegervEXT(int vaobj, VertexArrayPName pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    GetVertexArrayIntegervEXT(vaobj, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexArrayIntegervEXT(int, VertexArrayPName, int*)"/>
            public static unsafe void GetVertexArrayIntegervEXT(int vaobj, VertexArrayPName pname, ref int param)
            {
                fixed (int* param_ptr = &param)
                {
                    GetVertexArrayIntegervEXT(vaobj, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIivEXT(uint, VertexAttribEnum, int*)"/>
            public static unsafe int GetVertexAttribIivEXT(uint index, VertexAttribEnum pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetVertexAttribIivEXT(index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVertexAttribIivEXT(uint, VertexAttribEnum, int*)"/>
            public static unsafe void GetVertexAttribIivEXT(uint index, VertexAttribEnum pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVertexAttribIivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIuivEXT(uint, VertexAttribEnum, uint*)"/>
            public static unsafe uint GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname)
            {
                uint parameters;
                uint* parameters_ptr = &parameters;
                {
                    GetVertexAttribIuivEXT(index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVertexAttribIuivEXT(uint, VertexAttribEnum, uint*)"/>
            public static unsafe void GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname, out uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetVertexAttribIuivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdvEXT(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLdvEXT(uint index, VertexAttribEnum pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribLdvEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdvEXT(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLdvEXT(uint index, VertexAttribEnum pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVertexAttribLdvEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLdvEXT(uint, VertexAttribEnum, double*)"/>
            public static unsafe double GetVertexAttribLdvEXT(uint index, VertexAttribEnum pname)
            {
                double parameters;
                double* parameters_ptr = &parameters;
                {
                    GetVertexAttribLdvEXT(index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVertexAttribLdvEXT(uint, VertexAttribEnum, double*)"/>
            public static unsafe void GetVertexAttribLdvEXT(uint index, VertexAttribEnum pname, out double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetVertexAttribLdvEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImportMemoryWin32HandleEXT(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32HandleEXT(uint memory, ulong size, ExternalHandleType handleType, IntPtr handle)
            {
                void* handle_vptr = (void*)handle;
                ImportMemoryWin32HandleEXT(memory, size, handleType, handle_vptr);
            }
            /// <inheritdoc cref="ImportMemoryWin32HandleEXT(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32HandleEXT<T1>(uint memory, ulong size, ExternalHandleType handleType, Span<T1> handle)
                where T1 : unmanaged
            {
                fixed (void* handle_ptr = handle)
                {
                    ImportMemoryWin32HandleEXT(memory, size, handleType, handle_ptr);
                }
            }
            /// <inheritdoc cref="ImportMemoryWin32HandleEXT(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32HandleEXT<T1>(uint memory, ulong size, ExternalHandleType handleType, T1[] handle)
                where T1 : unmanaged
            {
                fixed (void* handle_ptr = handle)
                {
                    ImportMemoryWin32HandleEXT(memory, size, handleType, handle_ptr);
                }
            }
            /// <inheritdoc cref="ImportMemoryWin32HandleEXT(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32HandleEXT<T1>(uint memory, ulong size, ExternalHandleType handleType, ref readonly T1 handle)
                where T1 : unmanaged
            {
                fixed (void* handle_ptr = &handle)
                {
                    ImportMemoryWin32HandleEXT(memory, size, handleType, handle_ptr);
                }
            }
            /// <inheritdoc cref="ImportMemoryWin32NameEXT(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32NameEXT(uint memory, ulong size, ExternalHandleType handleType, IntPtr name)
            {
                void* name_vptr = (void*)name;
                ImportMemoryWin32NameEXT(memory, size, handleType, name_vptr);
            }
            /// <inheritdoc cref="ImportMemoryWin32NameEXT(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32NameEXT<T1>(uint memory, ulong size, ExternalHandleType handleType, ReadOnlySpan<T1> name)
                where T1 : unmanaged
            {
                fixed (void* name_ptr = name)
                {
                    ImportMemoryWin32NameEXT(memory, size, handleType, name_ptr);
                }
            }
            /// <inheritdoc cref="ImportMemoryWin32NameEXT(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32NameEXT<T1>(uint memory, ulong size, ExternalHandleType handleType, T1[] name)
                where T1 : unmanaged
            {
                fixed (void* name_ptr = name)
                {
                    ImportMemoryWin32NameEXT(memory, size, handleType, name_ptr);
                }
            }
            /// <inheritdoc cref="ImportMemoryWin32NameEXT(uint, ulong, ExternalHandleType, void*)"/>
            public static unsafe void ImportMemoryWin32NameEXT<T1>(uint memory, ulong size, ExternalHandleType handleType, ref readonly T1 name)
                where T1 : unmanaged
            {
                fixed (void* name_ptr = &name)
                {
                    ImportMemoryWin32NameEXT(memory, size, handleType, name_ptr);
                }
            }
            /// <inheritdoc cref="ImportSemaphoreWin32HandleEXT(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32HandleEXT(uint semaphore, ExternalHandleType handleType, IntPtr handle)
            {
                void* handle_vptr = (void*)handle;
                ImportSemaphoreWin32HandleEXT(semaphore, handleType, handle_vptr);
            }
            /// <inheritdoc cref="ImportSemaphoreWin32HandleEXT(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32HandleEXT<T1>(uint semaphore, ExternalHandleType handleType, Span<T1> handle)
                where T1 : unmanaged
            {
                fixed (void* handle_ptr = handle)
                {
                    ImportSemaphoreWin32HandleEXT(semaphore, handleType, handle_ptr);
                }
            }
            /// <inheritdoc cref="ImportSemaphoreWin32HandleEXT(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32HandleEXT<T1>(uint semaphore, ExternalHandleType handleType, T1[] handle)
                where T1 : unmanaged
            {
                fixed (void* handle_ptr = handle)
                {
                    ImportSemaphoreWin32HandleEXT(semaphore, handleType, handle_ptr);
                }
            }
            /// <inheritdoc cref="ImportSemaphoreWin32HandleEXT(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32HandleEXT<T1>(uint semaphore, ExternalHandleType handleType, ref T1 handle)
                where T1 : unmanaged
            {
                fixed (void* handle_ptr = &handle)
                {
                    ImportSemaphoreWin32HandleEXT(semaphore, handleType, handle_ptr);
                }
            }
            /// <inheritdoc cref="ImportSemaphoreWin32NameEXT(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32NameEXT(uint semaphore, ExternalHandleType handleType, IntPtr name)
            {
                void* name_vptr = (void*)name;
                ImportSemaphoreWin32NameEXT(semaphore, handleType, name_vptr);
            }
            /// <inheritdoc cref="ImportSemaphoreWin32NameEXT(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32NameEXT<T1>(uint semaphore, ExternalHandleType handleType, ReadOnlySpan<T1> name)
                where T1 : unmanaged
            {
                fixed (void* name_ptr = name)
                {
                    ImportSemaphoreWin32NameEXT(semaphore, handleType, name_ptr);
                }
            }
            /// <inheritdoc cref="ImportSemaphoreWin32NameEXT(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32NameEXT<T1>(uint semaphore, ExternalHandleType handleType, T1[] name)
                where T1 : unmanaged
            {
                fixed (void* name_ptr = name)
                {
                    ImportSemaphoreWin32NameEXT(semaphore, handleType, name_ptr);
                }
            }
            /// <inheritdoc cref="ImportSemaphoreWin32NameEXT(uint, ExternalHandleType, void*)"/>
            public static unsafe void ImportSemaphoreWin32NameEXT<T1>(uint semaphore, ExternalHandleType handleType, ref readonly T1 name)
                where T1 : unmanaged
            {
                fixed (void* name_ptr = &name)
                {
                    ImportSemaphoreWin32NameEXT(semaphore, handleType, name_ptr);
                }
            }
            /// <inheritdoc cref="IndexPointerEXT(IndexPointerType, int, int, void*)"/>
            public static unsafe void IndexPointerEXT(IndexPointerType type, int stride, int count, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                IndexPointerEXT(type, stride, count, pointer_vptr);
            }
            /// <inheritdoc cref="IndexPointerEXT(IndexPointerType, int, int, void*)"/>
            public static unsafe void IndexPointerEXT<T1>(IndexPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    IndexPointerEXT(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="IndexPointerEXT(IndexPointerType, int, int, void*)"/>
            public static unsafe void IndexPointerEXT<T1>(IndexPointerType type, int stride, int count, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    IndexPointerEXT(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="IndexPointerEXT(IndexPointerType, int, int, void*)"/>
            public static unsafe void IndexPointerEXT<T1>(IndexPointerType type, int stride, int count, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    IndexPointerEXT(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="InsertEventMarkerEXT(int, byte*)"/>
            public static unsafe void InsertEventMarkerEXT(int length, string marker)
            {
                byte* marker_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(marker);
                InsertEventMarkerEXT(length, marker_ptr);
                Marshal.FreeCoTaskMem((IntPtr)marker_ptr);
            }
            /// <inheritdoc cref="LabelObjectEXT(All, uint, int, byte*)"/>
            public static unsafe void LabelObjectEXT(All type, uint obj, int length, string label)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                LabelObjectEXT(type, obj, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            /// <inheritdoc cref="MatrixLoaddEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoaddEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoaddEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoaddEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoaddEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoaddEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoaddEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoaddEXT(MatrixMode mode, ref readonly double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixLoaddEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadfEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadfEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadfEXT(MatrixMode mode, ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoadfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposedEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoadTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposedEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoadTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposedEXT(MatrixMode mode, ref readonly double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixLoadTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposefEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposefEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposefEXT(MatrixMode mode, ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoadTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultdEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultdEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultdEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultdEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultdEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultdEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultdEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultdEXT(MatrixMode mode, ref readonly double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixMultdEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultfEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultfEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultfEXT(MatrixMode mode, ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMultfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposedEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposedEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposedEXT(MatrixMode mode, ref readonly double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixMultTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposefEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposefEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposefEXT(MatrixMode mode, ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMultTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MemoryObjectParameterivEXT(uint, MemoryObjectParameterName, int*)"/>
            public static unsafe void MemoryObjectParameterivEXT(uint memoryObject, MemoryObjectParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MemoryObjectParameterivEXT(memoryObject, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MemoryObjectParameterivEXT(uint, MemoryObjectParameterName, int*)"/>
            public static unsafe void MemoryObjectParameterivEXT(uint memoryObject, MemoryObjectParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MemoryObjectParameterivEXT(memoryObject, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MemoryObjectParameterivEXT(uint, MemoryObjectParameterName, int*)"/>
            public static unsafe void MemoryObjectParameterivEXT(uint memoryObject, MemoryObjectParameterName pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MemoryObjectParameterivEXT(memoryObject, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysEXT(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawArraysEXT(PrimitiveType mode, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int primcount)
            {
                fixed (int* count_ptr = count)
                {
                    fixed (int* first_ptr = first)
                    {
                        MultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawArraysEXT(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawArraysEXT(PrimitiveType mode, int[] first, int[] count, int primcount)
            {
                fixed (int* count_ptr = count)
                {
                    fixed (int* first_ptr = first)
                    {
                        MultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            /// <inheritdoc cref="MultiDrawArraysEXT(PrimitiveType, int*, int*, int)"/>
            public static unsafe void MultiDrawArraysEXT(PrimitiveType mode, ref readonly int first, ref readonly int count, int primcount)
            {
                fixed (int* first_ptr = &first)
                fixed (int* count_ptr = &count)
                {
                    MultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsEXT(PrimitiveType, int*, DrawElementsType, void**, int)"/>
            public static unsafe void MultiDrawElementsEXT(PrimitiveType mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int primcount)
            {
                fixed (int* count_ptr = count)
                {
                    MultiDrawElementsEXT(mode, count_ptr, type, indices, primcount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsEXT(PrimitiveType, int*, DrawElementsType, void**, int)"/>
            public static unsafe void MultiDrawElementsEXT(PrimitiveType mode, int[] count, DrawElementsType type, void** indices, int primcount)
            {
                fixed (int* count_ptr = count)
                {
                    MultiDrawElementsEXT(mode, count_ptr, type, indices, primcount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsEXT(PrimitiveType, int*, DrawElementsType, void**, int)"/>
            public static unsafe void MultiDrawElementsEXT(PrimitiveType mode, ref readonly int count, DrawElementsType type, void** indices, int primcount)
            {
                fixed (int* count_ptr = &count)
                {
                    MultiDrawElementsEXT(mode, count_ptr, type, indices, primcount);
                }
            }
            /// <inheritdoc cref="MultiTexCoordPointerEXT(TextureUnit, int, TexCoordPointerType, int, void*)"/>
            public static unsafe void MultiTexCoordPointerEXT(TextureUnit texunit, int size, TexCoordPointerType type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                MultiTexCoordPointerEXT(texunit, size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="MultiTexCoordPointerEXT(TextureUnit, int, TexCoordPointerType, int, void*)"/>
            public static unsafe void MultiTexCoordPointerEXT<T1>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    MultiTexCoordPointerEXT(texunit, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordPointerEXT(TextureUnit, int, TexCoordPointerType, int, void*)"/>
            public static unsafe void MultiTexCoordPointerEXT<T1>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    MultiTexCoordPointerEXT(texunit, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoordPointerEXT(TextureUnit, int, TexCoordPointerType, int, void*)"/>
            public static unsafe void MultiTexCoordPointerEXT<T1>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    MultiTexCoordPointerEXT(texunit, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnvfvEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void MultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnvfvEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void MultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnvfvEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, float*)"/>
            public static unsafe void MultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    MultiTexEnvfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnvivEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void MultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnvivEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void MultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexEnvivEXT(TextureUnit, TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void MultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MultiTexEnvivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGendvEXT(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void MultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    MultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGendvEXT(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void MultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    MultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGendvEXT(TextureUnit, TextureCoordName, TextureGenParameter, double*)"/>
            public static unsafe void MultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref readonly double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    MultiTexGendvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGenfvEXT(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void MultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGenfvEXT(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void MultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGenfvEXT(TextureUnit, TextureCoordName, TextureGenParameter, float*)"/>
            public static unsafe void MultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    MultiTexGenfvEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGenivEXT(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void MultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGenivEXT(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void MultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexGenivEXT(TextureUnit, TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void MultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MultiTexGenivEXT(texunit, coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage1DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage2DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexImage3DEXT(TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterfvEXT(TextureUnit, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void MultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterfvEXT(TextureUnit, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void MultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterfvEXT(TextureUnit, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void MultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    MultiTexParameterfvEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIivEXT(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIivEXT(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIivEXT(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MultiTexParameterIivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIuivEXT(TextureUnit, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void MultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    MultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIuivEXT(TextureUnit, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void MultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    MultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterIuivEXT(TextureUnit, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void MultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ref readonly uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    MultiTexParameterIuivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterivEXT(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterivEXT(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexParameterivEXT(TextureUnit, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void MultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MultiTexParameterivEXT(texunit, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage1DEXT(TextureUnit, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage1DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage2DEXT(TextureUnit, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage2DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="MultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexSubImage3DEXT(TextureUnit, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void MultiTexSubImage3DEXT<T1>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferDataEXT(int, nint, void*, BufferUsage)"/>
            public static unsafe void NamedBufferDataEXT(int buffer, nint size, IntPtr data, BufferUsage usage)
            {
                void* data_vptr = (void*)data;
                NamedBufferDataEXT(buffer, size, data_vptr, usage);
            }
            /// <inheritdoc cref="NamedBufferDataEXT(int, nint, void*, BufferUsage)"/>
            public static unsafe void NamedBufferDataEXT<T1>(int buffer, nint size, ReadOnlySpan<T1> data, BufferUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferDataEXT(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferDataEXT(int, nint, void*, BufferUsage)"/>
            public static unsafe void NamedBufferDataEXT<T1>(int buffer, nint size, T1[] data, BufferUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferDataEXT(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferDataEXT(int, nint, void*, BufferUsage)"/>
            public static unsafe void NamedBufferDataEXT<T1>(int buffer, nint size, ref readonly T1 data, BufferUsage usage)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferDataEXT(buffer, size, data_ptr, usage);
                }
            }
            /// <inheritdoc cref="NamedBufferStorageEXT(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageEXT(int buffer, nint size, IntPtr data, BufferStorageMask flags)
            {
                void* data_vptr = (void*)data;
                NamedBufferStorageEXT(buffer, size, data_vptr, flags);
            }
            /// <inheritdoc cref="NamedBufferStorageEXT(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageEXT<T1>(int buffer, nint size, ReadOnlySpan<T1> data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferStorageEXT(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorageEXT(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageEXT<T1>(int buffer, nint size, T1[] data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferStorageEXT(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorageEXT(int, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageEXT<T1>(int buffer, nint size, ref readonly T1 data, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferStorageEXT(buffer, size, data_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorageExternalEXT(int, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageExternalEXT(int buffer, IntPtr offset, nint size, IntPtr clientBuffer, BufferStorageMask flags)
            {
                void* clientBuffer_vptr = (void*)clientBuffer;
                NamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer_vptr, flags);
            }
            /// <inheritdoc cref="NamedBufferStorageExternalEXT(int, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageExternalEXT<T1>(int buffer, IntPtr offset, nint size, Span<T1> clientBuffer, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* clientBuffer_ptr = clientBuffer)
                {
                    NamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorageExternalEXT(int, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageExternalEXT<T1>(int buffer, IntPtr offset, nint size, T1[] clientBuffer, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* clientBuffer_ptr = clientBuffer)
                {
                    NamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferStorageExternalEXT(int, IntPtr, nint, void*, BufferStorageMask)"/>
            public static unsafe void NamedBufferStorageExternalEXT<T1>(int buffer, IntPtr offset, nint size, ref T1 clientBuffer, BufferStorageMask flags)
                where T1 : unmanaged
            {
                fixed (void* clientBuffer_ptr = &clientBuffer)
                {
                    NamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer_ptr, flags);
                }
            }
            /// <inheritdoc cref="NamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubDataEXT(int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                NamedBufferSubDataEXT(buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="NamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubDataEXT<T1>(int buffer, IntPtr offset, nint size, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferSubDataEXT(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubDataEXT<T1>(int buffer, IntPtr offset, nint size, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    NamedBufferSubDataEXT(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedBufferSubDataEXT(int, IntPtr, nint, void*)"/>
            public static unsafe void NamedBufferSubDataEXT<T1>(int buffer, IntPtr offset, nint size, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    NamedBufferSubDataEXT(buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4dvEXT(int, ProgramTarget, uint, double*)"/>
            public static unsafe void NamedProgramLocalParameter4dvEXT(int program, ProgramTarget target, uint index, ReadOnlySpan<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameter4dvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4dvEXT(int, ProgramTarget, uint, double*)"/>
            public static unsafe void NamedProgramLocalParameter4dvEXT(int program, ProgramTarget target, uint index, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameter4dvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4dvEXT(int, ProgramTarget, uint, double*)"/>
            public static unsafe void NamedProgramLocalParameter4dvEXT(int program, ProgramTarget target, uint index, ref readonly double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParameter4dvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4fvEXT(int, ProgramTarget, uint, float*)"/>
            public static unsafe void NamedProgramLocalParameter4fvEXT(int program, ProgramTarget target, uint index, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameter4fvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4fvEXT(int, ProgramTarget, uint, float*)"/>
            public static unsafe void NamedProgramLocalParameter4fvEXT(int program, ProgramTarget target, uint index, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameter4fvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameter4fvEXT(int, ProgramTarget, uint, float*)"/>
            public static unsafe void NamedProgramLocalParameter4fvEXT(int program, ProgramTarget target, uint index, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParameter4fvEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4ivEXT(int, ProgramTarget, uint, int*)"/>
            public static unsafe void NamedProgramLocalParameterI4ivEXT(int program, ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameterI4ivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4ivEXT(int, ProgramTarget, uint, int*)"/>
            public static unsafe void NamedProgramLocalParameterI4ivEXT(int program, ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameterI4ivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4ivEXT(int, ProgramTarget, uint, int*)"/>
            public static unsafe void NamedProgramLocalParameterI4ivEXT(int program, ProgramTarget target, uint index, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParameterI4ivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4uivEXT(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void NamedProgramLocalParameterI4uivEXT(int program, ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameterI4uivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4uivEXT(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void NamedProgramLocalParameterI4uivEXT(int program, ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameterI4uivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameterI4uivEXT(int, ProgramTarget, uint, uint*)"/>
            public static unsafe void NamedProgramLocalParameterI4uivEXT(int program, ProgramTarget target, uint index, ref readonly uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParameterI4uivEXT(program, target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameters4fvEXT(int, ProgramTarget, uint, int, float*)"/>
            public static unsafe void NamedProgramLocalParameters4fvEXT(int program, ProgramTarget target, uint index, int count, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameters4fvEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameters4fvEXT(int, ProgramTarget, uint, int, float*)"/>
            public static unsafe void NamedProgramLocalParameters4fvEXT(int program, ProgramTarget target, uint index, int count, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    NamedProgramLocalParameters4fvEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParameters4fvEXT(int, ProgramTarget, uint, int, float*)"/>
            public static unsafe void NamedProgramLocalParameters4fvEXT(int program, ProgramTarget target, uint index, int count, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParameters4fvEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4ivEXT(int, ProgramTarget, uint, int, int*)"/>
            public static unsafe void NamedProgramLocalParametersI4ivEXT(int program, ProgramTarget target, uint index, int count, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    NamedProgramLocalParametersI4ivEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4ivEXT(int, ProgramTarget, uint, int, int*)"/>
            public static unsafe void NamedProgramLocalParametersI4ivEXT(int program, ProgramTarget target, uint index, int count, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    NamedProgramLocalParametersI4ivEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4ivEXT(int, ProgramTarget, uint, int, int*)"/>
            public static unsafe void NamedProgramLocalParametersI4ivEXT(int program, ProgramTarget target, uint index, int count, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParametersI4ivEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4uivEXT(int, ProgramTarget, uint, int, uint*)"/>
            public static unsafe void NamedProgramLocalParametersI4uivEXT(int program, ProgramTarget target, uint index, int count, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    NamedProgramLocalParametersI4uivEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4uivEXT(int, ProgramTarget, uint, int, uint*)"/>
            public static unsafe void NamedProgramLocalParametersI4uivEXT(int program, ProgramTarget target, uint index, int count, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    NamedProgramLocalParametersI4uivEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramLocalParametersI4uivEXT(int, ProgramTarget, uint, int, uint*)"/>
            public static unsafe void NamedProgramLocalParametersI4uivEXT(int program, ProgramTarget target, uint index, int count, ref readonly uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    NamedProgramLocalParametersI4uivEXT(program, target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramStringEXT(int, ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void NamedProgramStringEXT(int program, ProgramTarget target, ProgramFormat format, int len, IntPtr str)
            {
                void* str_vptr = (void*)str;
                NamedProgramStringEXT(program, target, format, len, str_vptr);
            }
            /// <inheritdoc cref="NamedProgramStringEXT(int, ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void NamedProgramStringEXT<T1>(int program, ProgramTarget target, ProgramFormat format, int len, ReadOnlySpan<T1> str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    NamedProgramStringEXT(program, target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramStringEXT(int, ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void NamedProgramStringEXT<T1>(int program, ProgramTarget target, ProgramFormat format, int len, T1[] str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    NamedProgramStringEXT(program, target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="NamedProgramStringEXT(int, ProgramTarget, ProgramFormat, int, void*)"/>
            public static unsafe void NamedProgramStringEXT<T1>(int program, ProgramTarget target, ProgramFormat format, int len, ref readonly T1 str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = &str)
                {
                    NamedProgramStringEXT(program, target, format, len, str_ptr);
                }
            }
            /// <inheritdoc cref="NormalPointerEXT(NormalPointerType, int, int, void*)"/>
            public static unsafe void NormalPointerEXT(NormalPointerType type, int stride, int count, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                NormalPointerEXT(type, stride, count, pointer_vptr);
            }
            /// <inheritdoc cref="NormalPointerEXT(NormalPointerType, int, int, void*)"/>
            public static unsafe void NormalPointerEXT<T1>(NormalPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    NormalPointerEXT(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="NormalPointerEXT(NormalPointerType, int, int, void*)"/>
            public static unsafe void NormalPointerEXT<T1>(NormalPointerType type, int stride, int count, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    NormalPointerEXT(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="NormalPointerEXT(NormalPointerType, int, int, void*)"/>
            public static unsafe void NormalPointerEXT<T1>(NormalPointerType type, int stride, int count, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    NormalPointerEXT(type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="PixelTransformParameterfvEXT(PixelTransformTargetEXT, PixelTransformPNameEXT, float*)"/>
            public static unsafe void PixelTransformParameterfvEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    PixelTransformParameterfvEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTransformParameterivEXT(PixelTransformTargetEXT, PixelTransformPNameEXT, int*)"/>
            public static unsafe void PixelTransformParameterivEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    PixelTransformParameterivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvEXT(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvEXT(PointParameterNameARB pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvEXT(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvEXT(PointParameterNameARB pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvEXT(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvEXT(PointParameterNameARB pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    PointParameterfvEXT(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PrioritizeTexturesEXT(int, int*, float*)"/>
            public static unsafe void PrioritizeTexturesEXT(int n, ReadOnlySpan<int> textures, ReadOnlySpan<float> priorities)
            {
                fixed (float* priorities_ptr = priorities)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        PrioritizeTexturesEXT(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PrioritizeTexturesEXT(int, int*, float*)"/>
            public static unsafe void PrioritizeTexturesEXT(int n, int[] textures, float[] priorities)
            {
                fixed (float* priorities_ptr = priorities)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        PrioritizeTexturesEXT(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PrioritizeTexturesEXT(int, int*, float*)"/>
            public static unsafe void PrioritizeTexturesEXT(int n, ref readonly int textures, ref readonly float priorities)
            {
                fixed (int* textures_ptr = &textures)
                fixed (float* priorities_ptr = &priorities)
                {
                    PrioritizeTexturesEXT(n, textures_ptr, priorities_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameters4fvEXT(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramEnvParameters4fvEXT(ProgramTarget target, uint index, int count, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramEnvParameters4fvEXT(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameters4fvEXT(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramEnvParameters4fvEXT(ProgramTarget target, uint index, int count, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramEnvParameters4fvEXT(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameters4fvEXT(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramEnvParameters4fvEXT(ProgramTarget target, uint index, int count, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ProgramEnvParameters4fvEXT(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameters4fvEXT(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramLocalParameters4fvEXT(ProgramTarget target, uint index, int count, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramLocalParameters4fvEXT(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameters4fvEXT(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramLocalParameters4fvEXT(ProgramTarget target, uint index, int count, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramLocalParameters4fvEXT(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameters4fvEXT(ProgramTarget, uint, int, float*)"/>
            public static unsafe void ProgramLocalParameters4fvEXT(ProgramTarget target, uint index, int count, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ProgramLocalParameters4fvEXT(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform1dvEXT(int program, int location, int count, ref readonly double value)
            {
                fixed (double* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform1dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform1fvEXT(int program, int location, int count, ref readonly float value)
            {
                fixed (float* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform1fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform1ivEXT(int program, int location, int count, ref readonly int value)
            {
                fixed (int* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform1ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform1uivEXT(int program, int location, int count, ref readonly uint value)
            {
                fixed (uint* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform1uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2dvEXT(int program, int location, int count, ref readonly Vector2d value)
            {
                fixed (Vector2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2dvEXT(int program, int location, int count, ReadOnlySpan<Vector2d> value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform2dvEXT(int program, int location, int count, Vector2d[] value)
            {
                fixed (Vector2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform2dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fvEXT(int program, int location, int count, ref readonly Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fvEXT(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fvEXT(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fvEXT(int program, int location, int count, ref readonly System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fvEXT(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform2fvEXT(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform2fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2ivEXT(int program, int location, int count, ref readonly Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2ivEXT(int program, int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform2ivEXT(int program, int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform2ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2uivEXT(int program, int location, int count, ref readonly Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2uivEXT(int program, int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform2uivEXT(int program, int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform2uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3dvEXT(int program, int location, int count, ref readonly Vector3d value)
            {
                fixed (Vector3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3dvEXT(int program, int location, int count, ReadOnlySpan<Vector3d> value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform3dvEXT(int program, int location, int count, Vector3d[] value)
            {
                fixed (Vector3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform3dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fvEXT(int program, int location, int count, ref readonly Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fvEXT(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fvEXT(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fvEXT(int program, int location, int count, ref readonly System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fvEXT(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform3fvEXT(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform3fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3ivEXT(int program, int location, int count, ref readonly Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3ivEXT(int program, int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform3ivEXT(int program, int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform3ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3uivEXT(int program, int location, int count, ref readonly Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3uivEXT(int program, int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform3uivEXT(int program, int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform3uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4dvEXT(int program, int location, int count, ref readonly Vector4d value)
            {
                fixed (Vector4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4dvEXT(int program, int location, int count, ReadOnlySpan<Vector4d> value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4dvEXT(int, int, int, double*)"/>
            public static unsafe void ProgramUniform4dvEXT(int program, int location, int count, Vector4d[] value)
            {
                fixed (Vector4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniform4dvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fvEXT(int program, int location, int count, ref readonly Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fvEXT(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fvEXT(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fvEXT(int program, int location, int count, ref readonly System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fvEXT(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4fvEXT(int, int, int, float*)"/>
            public static unsafe void ProgramUniform4fvEXT(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniform4fvEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4ivEXT(int program, int location, int count, ref readonly Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4ivEXT(int program, int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ivEXT(int, int, int, int*)"/>
            public static unsafe void ProgramUniform4ivEXT(int program, int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    int* value_ptr = (int*)tmp_value;
                    ProgramUniform4ivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4uivEXT(int program, int location, int count, ref readonly Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4uivEXT(int program, int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4uivEXT(int, int, int, uint*)"/>
            public static unsafe void ProgramUniform4uivEXT(int program, int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    ProgramUniform4uivEXT(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2dvEXT(int program, int location, int count, bool transpose, ref readonly Matrix2d value)
            {
                fixed (Matrix2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2d> value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2dvEXT(int program, int location, int count, bool transpose, Matrix2d[] value)
            {
                fixed (Matrix2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2fvEXT(int program, int location, int count, bool transpose, ref readonly Matrix2 value)
            {
                fixed (Matrix2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2> value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2fvEXT(int program, int location, int count, bool transpose, Matrix2[] value)
            {
                fixed (Matrix2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3dvEXT(int program, int location, int count, bool transpose, ref readonly Matrix2x3d value)
            {
                fixed (Matrix2x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3d> value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x3dvEXT(int program, int location, int count, bool transpose, Matrix2x3d[] value)
            {
                fixed (Matrix2x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3fvEXT(int program, int location, int count, bool transpose, ref readonly Matrix2x3 value)
            {
                fixed (Matrix2x3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x3> value)
            {
                fixed (Matrix2x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x3fvEXT(int program, int location, int count, bool transpose, Matrix2x3[] value)
            {
                fixed (Matrix2x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4dvEXT(int program, int location, int count, bool transpose, ref readonly Matrix2x4d value)
            {
                fixed (Matrix2x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4d> value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix2x4dvEXT(int program, int location, int count, bool transpose, Matrix2x4d[] value)
            {
                fixed (Matrix2x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4fvEXT(int program, int location, int count, bool transpose, ref readonly Matrix2x4 value)
            {
                fixed (Matrix2x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix2x4> value)
            {
                fixed (Matrix2x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix2x4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix2x4fvEXT(int program, int location, int count, bool transpose, Matrix2x4[] value)
            {
                fixed (Matrix2x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3dvEXT(int program, int location, int count, bool transpose, ref readonly Matrix3d value)
            {
                fixed (Matrix3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3d> value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3dvEXT(int program, int location, int count, bool transpose, Matrix3d[] value)
            {
                fixed (Matrix3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3fvEXT(int program, int location, int count, bool transpose, ref readonly Matrix3 value)
            {
                fixed (Matrix3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3> value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3fvEXT(int program, int location, int count, bool transpose, Matrix3[] value)
            {
                fixed (Matrix3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2dvEXT(int program, int location, int count, bool transpose, ref readonly Matrix3x2d value)
            {
                fixed (Matrix3x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2d> value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x2dvEXT(int program, int location, int count, bool transpose, Matrix3x2d[] value)
            {
                fixed (Matrix3x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fvEXT(int program, int location, int count, bool transpose, ref readonly Matrix3x2 value)
            {
                fixed (Matrix3x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x2> value)
            {
                fixed (Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fvEXT(int program, int location, int count, bool transpose, Matrix3x2[] value)
            {
                fixed (Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fvEXT(int program, int location, int count, bool transpose, ref readonly System.Numerics.Matrix3x2 value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix3x2> value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x2fvEXT(int program, int location, int count, bool transpose, System.Numerics.Matrix3x2[] value)
            {
                fixed (System.Numerics.Matrix3x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4dvEXT(int program, int location, int count, bool transpose, ref readonly Matrix3x4d value)
            {
                fixed (Matrix3x4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4d> value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix3x4dvEXT(int program, int location, int count, bool transpose, Matrix3x4d[] value)
            {
                fixed (Matrix3x4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4fvEXT(int program, int location, int count, bool transpose, ref readonly Matrix3x4 value)
            {
                fixed (Matrix3x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix3x4> value)
            {
                fixed (Matrix3x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix3x4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix3x4fvEXT(int program, int location, int count, bool transpose, Matrix3x4[] value)
            {
                fixed (Matrix3x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4dvEXT(int program, int location, int count, bool transpose, ref readonly Matrix4d value)
            {
                fixed (Matrix4d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4d> value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4dvEXT(int program, int location, int count, bool transpose, Matrix4d[] value)
            {
                fixed (Matrix4d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fvEXT(int program, int location, int count, bool transpose, ref readonly Matrix4 value)
            {
                fixed (Matrix4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4> value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fvEXT(int program, int location, int count, bool transpose, Matrix4[] value)
            {
                fixed (Matrix4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fvEXT(int program, int location, int count, bool transpose, ref readonly System.Numerics.Matrix4x4 value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<System.Numerics.Matrix4x4> value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4fvEXT(int program, int location, int count, bool transpose, System.Numerics.Matrix4x4[] value)
            {
                fixed (System.Numerics.Matrix4x4* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2dvEXT(int program, int location, int count, bool transpose, ref readonly Matrix4x2d value)
            {
                fixed (Matrix4x2d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2d> value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x2dvEXT(int program, int location, int count, bool transpose, Matrix4x2d[] value)
            {
                fixed (Matrix4x2d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2fvEXT(int program, int location, int count, bool transpose, ref readonly Matrix4x2 value)
            {
                fixed (Matrix4x2* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x2> value)
            {
                fixed (Matrix4x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x2fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x2fvEXT(int program, int location, int count, bool transpose, Matrix4x2[] value)
            {
                fixed (Matrix4x2* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3dvEXT(int program, int location, int count, bool transpose, ref readonly Matrix4x3d value)
            {
                fixed (Matrix4x3d* tmp_value = &value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3dvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3d> value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3dvEXT(int, int, int, bool, double*)"/>
            public static unsafe void ProgramUniformMatrix4x3dvEXT(int program, int location, int count, bool transpose, Matrix4x3d[] value)
            {
                fixed (Matrix4x3d* tmp_value = value)
                {
                    double* value_ptr = (double*)tmp_value;
                    ProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3fvEXT(int program, int location, int count, bool transpose, ref readonly Matrix4x3 value)
            {
                fixed (Matrix4x3* tmp_value = &value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3fvEXT(int program, int location, int count, bool transpose, ReadOnlySpan<Matrix4x3> value)
            {
                fixed (Matrix4x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformMatrix4x3fvEXT(int, int, int, bool, float*)"/>
            public static unsafe void ProgramUniformMatrix4x3fvEXT(int program, int location, int count, bool transpose, Matrix4x3[] value)
            {
                fixed (Matrix4x3* tmp_value = value)
                {
                    float* value_ptr = (float*)tmp_value;
                    ProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value_ptr);
                }
            }
            /// <inheritdoc cref="PushGroupMarkerEXT(int, byte*)"/>
            public static unsafe void PushGroupMarkerEXT(int length, string marker)
            {
                byte* marker_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(marker);
                PushGroupMarkerEXT(length, marker_ptr);
                Marshal.FreeCoTaskMem((IntPtr)marker_ptr);
            }
            /// <inheritdoc cref="SecondaryColor3bvEXT(sbyte*)"/>
            public static unsafe void SecondaryColor3bvEXT(ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    SecondaryColor3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3bvEXT(sbyte*)"/>
            public static unsafe void SecondaryColor3bvEXT(sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    SecondaryColor3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3bvEXT(sbyte*)"/>
            public static unsafe void SecondaryColor3bvEXT(ref readonly sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    SecondaryColor3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3dvEXT(double*)"/>
            public static unsafe void SecondaryColor3dvEXT(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    SecondaryColor3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3dvEXT(double*)"/>
            public static unsafe void SecondaryColor3dvEXT(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    SecondaryColor3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3dvEXT(double*)"/>
            public static unsafe void SecondaryColor3dvEXT(ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    SecondaryColor3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3fvEXT(float*)"/>
            public static unsafe void SecondaryColor3fvEXT(ref readonly Color3<Rgb> v)
            {
                fixed (Color3<Rgb>* tmp_v = &v)
                {
                    float* v_ptr = (float*)tmp_v;
                    SecondaryColor3fvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3ivEXT(int*)"/>
            public static unsafe void SecondaryColor3ivEXT(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    SecondaryColor3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3ivEXT(int*)"/>
            public static unsafe void SecondaryColor3ivEXT(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    SecondaryColor3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3ivEXT(int*)"/>
            public static unsafe void SecondaryColor3ivEXT(ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    SecondaryColor3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3svEXT(short*)"/>
            public static unsafe void SecondaryColor3svEXT(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    SecondaryColor3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3svEXT(short*)"/>
            public static unsafe void SecondaryColor3svEXT(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    SecondaryColor3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3svEXT(short*)"/>
            public static unsafe void SecondaryColor3svEXT(ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    SecondaryColor3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3ubvEXT(byte*)"/>
            public static unsafe void SecondaryColor3ubvEXT(ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    SecondaryColor3ubvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3ubvEXT(byte*)"/>
            public static unsafe void SecondaryColor3ubvEXT(byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    SecondaryColor3ubvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3ubvEXT(byte*)"/>
            public static unsafe void SecondaryColor3ubvEXT(ref readonly byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    SecondaryColor3ubvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3uivEXT(uint*)"/>
            public static unsafe void SecondaryColor3uivEXT(ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    SecondaryColor3uivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3uivEXT(uint*)"/>
            public static unsafe void SecondaryColor3uivEXT(uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    SecondaryColor3uivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3uivEXT(uint*)"/>
            public static unsafe void SecondaryColor3uivEXT(ref readonly uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    SecondaryColor3uivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3usvEXT(ushort*)"/>
            public static unsafe void SecondaryColor3usvEXT(ReadOnlySpan<ushort> v)
            {
                fixed (ushort* v_ptr = v)
                {
                    SecondaryColor3usvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3usvEXT(ushort*)"/>
            public static unsafe void SecondaryColor3usvEXT(ushort[] v)
            {
                fixed (ushort* v_ptr = v)
                {
                    SecondaryColor3usvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3usvEXT(ushort*)"/>
            public static unsafe void SecondaryColor3usvEXT(ref readonly ushort v)
            {
                fixed (ushort* v_ptr = &v)
                {
                    SecondaryColor3usvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorPointerEXT(int, ColorPointerType, int, void*)"/>
            public static unsafe void SecondaryColorPointerEXT(int size, ColorPointerType type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                SecondaryColorPointerEXT(size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="SecondaryColorPointerEXT(int, ColorPointerType, int, void*)"/>
            public static unsafe void SecondaryColorPointerEXT<T1>(int size, ColorPointerType type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    SecondaryColorPointerEXT(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorPointerEXT(int, ColorPointerType, int, void*)"/>
            public static unsafe void SecondaryColorPointerEXT<T1>(int size, ColorPointerType type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    SecondaryColorPointerEXT(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColorPointerEXT(int, ColorPointerType, int, void*)"/>
            public static unsafe void SecondaryColorPointerEXT<T1>(int size, ColorPointerType type, int stride, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    SecondaryColorPointerEXT(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="SemaphoreParameterui64vEXT(uint, SemaphoreParameterName, ulong*)"/>
            public static unsafe void SemaphoreParameterui64vEXT(uint semaphore, SemaphoreParameterName pname, ReadOnlySpan<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    SemaphoreParameterui64vEXT(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SemaphoreParameterui64vEXT(uint, SemaphoreParameterName, ulong*)"/>
            public static unsafe void SemaphoreParameterui64vEXT(uint semaphore, SemaphoreParameterName pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    SemaphoreParameterui64vEXT(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SemaphoreParameterui64vEXT(uint, SemaphoreParameterName, ulong*)"/>
            public static unsafe void SemaphoreParameterui64vEXT(uint semaphore, SemaphoreParameterName pname, ref readonly ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    SemaphoreParameterui64vEXT(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SeparableFilter2DEXT(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2DEXT(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column)
            {
                void* row_vptr = (void*)row;
                void* column_vptr = (void*)column;
                SeparableFilter2DEXT(target, internalformat, width, height, format, type, row_vptr, column_vptr);
            }
            /// <inheritdoc cref="SeparableFilter2DEXT(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2DEXT<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> row, ReadOnlySpan<T2> column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* column_ptr = column)
                {
                    fixed (void* row_ptr = row)
                    {
                        SeparableFilter2DEXT(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SeparableFilter2DEXT(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2DEXT<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, T1[] row, T2[] column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* column_ptr = column)
                {
                    fixed (void* row_ptr = row)
                    {
                        SeparableFilter2DEXT(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SeparableFilter2DEXT(SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, void*, void*)"/>
            public static unsafe void SeparableFilter2DEXT<T1, T2>(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, ref readonly T1 row, ref readonly T2 column)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* row_ptr = &row)
                fixed (void* column_ptr = &column)
                {
                    SeparableFilter2DEXT(target, internalformat, width, height, format, type, row_ptr, column_ptr);
                }
            }
            /// <inheritdoc cref="SetInvariantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetInvariantEXT(uint id, ScalarType type, IntPtr addr)
            {
                void* addr_vptr = (void*)addr;
                SetInvariantEXT(id, type, addr_vptr);
            }
            /// <inheritdoc cref="SetInvariantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetInvariantEXT<T1>(uint id, ScalarType type, ReadOnlySpan<T1> addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    SetInvariantEXT(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SetInvariantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetInvariantEXT<T1>(uint id, ScalarType type, T1[] addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    SetInvariantEXT(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SetInvariantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetInvariantEXT<T1>(uint id, ScalarType type, ref readonly T1 addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = &addr)
                {
                    SetInvariantEXT(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SetLocalConstantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetLocalConstantEXT(uint id, ScalarType type, IntPtr addr)
            {
                void* addr_vptr = (void*)addr;
                SetLocalConstantEXT(id, type, addr_vptr);
            }
            /// <inheritdoc cref="SetLocalConstantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetLocalConstantEXT<T1>(uint id, ScalarType type, ReadOnlySpan<T1> addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    SetLocalConstantEXT(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SetLocalConstantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetLocalConstantEXT<T1>(uint id, ScalarType type, T1[] addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    SetLocalConstantEXT(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SetLocalConstantEXT(uint, ScalarType, void*)"/>
            public static unsafe void SetLocalConstantEXT<T1>(uint id, ScalarType type, ref readonly T1 addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = &addr)
                {
                    SetLocalConstantEXT(id, type, addr_ptr);
                }
            }
            /// <inheritdoc cref="SignalSemaphoreEXT(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void SignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, ReadOnlySpan<int> buffers, uint numTextureBarriers, ReadOnlySpan<int> textures, ReadOnlySpan<TextureLayout> dstLayouts)
            {
                fixed (TextureLayout* dstLayouts_ptr = dstLayouts)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        fixed (int* buffers_ptr = buffers)
                        {
                            SignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, dstLayouts_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="SignalSemaphoreEXT(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void SignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, int[] buffers, uint numTextureBarriers, int[] textures, TextureLayout[] dstLayouts)
            {
                fixed (TextureLayout* dstLayouts_ptr = dstLayouts)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        fixed (int* buffers_ptr = buffers)
                        {
                            SignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, dstLayouts_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="SignalSemaphoreEXT(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void SignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, ref readonly int buffers, uint numTextureBarriers, ref readonly int textures, ref readonly TextureLayout dstLayouts)
            {
                fixed (int* buffers_ptr = &buffers)
                fixed (int* textures_ptr = &textures)
                fixed (TextureLayout* dstLayouts_ptr = &dstLayouts)
                {
                    SignalSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, dstLayouts_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3bvEXT(sbyte*)"/>
            public static unsafe void Tangent3bvEXT(ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    Tangent3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3bvEXT(sbyte*)"/>
            public static unsafe void Tangent3bvEXT(sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    Tangent3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3bvEXT(sbyte*)"/>
            public static unsafe void Tangent3bvEXT(ref readonly sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    Tangent3bvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3dvEXT(double*)"/>
            public static unsafe void Tangent3dvEXT(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    Tangent3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3dvEXT(double*)"/>
            public static unsafe void Tangent3dvEXT(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    Tangent3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3dvEXT(double*)"/>
            public static unsafe void Tangent3dvEXT(ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    Tangent3dvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3fvEXT(float*)"/>
            public static unsafe void Tangent3fvEXT(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    Tangent3fvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3fvEXT(float*)"/>
            public static unsafe void Tangent3fvEXT(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    Tangent3fvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3fvEXT(float*)"/>
            public static unsafe void Tangent3fvEXT(ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    Tangent3fvEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3ivEXT(int*)"/>
            public static unsafe void Tangent3ivEXT(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    Tangent3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3ivEXT(int*)"/>
            public static unsafe void Tangent3ivEXT(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    Tangent3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3ivEXT(int*)"/>
            public static unsafe void Tangent3ivEXT(ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    Tangent3ivEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3svEXT(short*)"/>
            public static unsafe void Tangent3svEXT(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    Tangent3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3svEXT(short*)"/>
            public static unsafe void Tangent3svEXT(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    Tangent3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="Tangent3svEXT(short*)"/>
            public static unsafe void Tangent3svEXT(ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    Tangent3svEXT(v_ptr);
                }
            }
            /// <inheritdoc cref="TangentPointerEXT(TangentPointerTypeEXT, int, void*)"/>
            public static unsafe void TangentPointerEXT(TangentPointerTypeEXT type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                TangentPointerEXT(type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="TangentPointerEXT(TangentPointerTypeEXT, int, void*)"/>
            public static unsafe void TangentPointerEXT<T1>(TangentPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    TangentPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TangentPointerEXT(TangentPointerTypeEXT, int, void*)"/>
            public static unsafe void TangentPointerEXT<T1>(TangentPointerTypeEXT type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    TangentPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TangentPointerEXT(TangentPointerTypeEXT, int, void*)"/>
            public static unsafe void TangentPointerEXT<T1>(TangentPointerTypeEXT type, int stride, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    TangentPointerEXT(type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordPointerEXT(int, TexCoordPointerType, int, int, void*)"/>
            public static unsafe void TexCoordPointerEXT(int size, TexCoordPointerType type, int stride, int count, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                TexCoordPointerEXT(size, type, stride, count, pointer_vptr);
            }
            /// <inheritdoc cref="TexCoordPointerEXT(int, TexCoordPointerType, int, int, void*)"/>
            public static unsafe void TexCoordPointerEXT<T1>(int size, TexCoordPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    TexCoordPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordPointerEXT(int, TexCoordPointerType, int, int, void*)"/>
            public static unsafe void TexCoordPointerEXT<T1>(int size, TexCoordPointerType type, int stride, int count, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    TexCoordPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TexCoordPointerEXT(int, TexCoordPointerType, int, int, void*)"/>
            public static unsafe void TexCoordPointerEXT<T1>(int size, TexCoordPointerType type, int stride, int count, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    TexCoordPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="TexImage3DEXT(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage3DEXT(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexImage3DEXT(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage3DEXT<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexImage3DEXT(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage3DEXT<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexImage3DEXT(TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage3DEXT<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIivEXT(TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TexParameterIivEXT(TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexParameterIivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIivEXT(TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TexParameterIivEXT(TextureTarget target, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexParameterIivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIivEXT(TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TexParameterIivEXT(TextureTarget target, TextureParameterName pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TexParameterIivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIuivEXT(TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TexParameterIuivEXT(TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TexParameterIuivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIuivEXT(TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TexParameterIuivEXT(TextureTarget target, TextureParameterName pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TexParameterIuivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterIuivEXT(TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TexParameterIuivEXT(TextureTarget target, TextureParameterName pname, ref readonly uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    TexParameterIuivEXT(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage1DEXT(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage1DEXT(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexSubImage1DEXT(target, level, xoffset, width, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexSubImage1DEXT(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage1DEXT<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage1DEXT(target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage1DEXT(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage1DEXT<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage1DEXT(target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage1DEXT(TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage1DEXT<T1>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexSubImage1DEXT(target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage2DEXT(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage2DEXT(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexSubImage2DEXT(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage2DEXT<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage2DEXT(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage2DEXT<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage2DEXT(TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage2DEXT<T1>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage3DEXT(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage3DEXT(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexSubImage3DEXT(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage3DEXT<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage3DEXT(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage3DEXT<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage3DEXT(TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage3DEXT<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage1DEXT(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage1DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage1DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage1DEXT(int, TextureTarget, int, InternalFormat, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage1DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage2DEXT(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage2DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage2DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage2DEXT(int, TextureTarget, int, InternalFormat, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage2DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage3DEXT(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage3DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage3DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureImage3DEXT(int, TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureImage3DEXT<T1>(int texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfvEXT(int, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterfvEXT(int texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    TextureParameterfvEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfvEXT(int, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterfvEXT(int texture, TextureTarget target, TextureParameterName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    TextureParameterfvEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterfvEXT(int, TextureTarget, TextureParameterName, float*)"/>
            public static unsafe void TextureParameterfvEXT(int texture, TextureTarget target, TextureParameterName pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    TextureParameterfvEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIivEXT(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIivEXT(int texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterIivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIivEXT(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIivEXT(int texture, TextureTarget target, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterIivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIivEXT(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterIivEXT(int texture, TextureTarget target, TextureParameterName pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TextureParameterIivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuivEXT(int, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIuivEXT(int texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TextureParameterIuivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuivEXT(int, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIuivEXT(int texture, TextureTarget target, TextureParameterName pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    TextureParameterIuivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterIuivEXT(int, TextureTarget, TextureParameterName, uint*)"/>
            public static unsafe void TextureParameterIuivEXT(int texture, TextureTarget target, TextureParameterName pname, ref readonly uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    TextureParameterIuivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterivEXT(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterivEXT(int texture, TextureTarget target, TextureParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterivEXT(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterivEXT(int texture, TextureTarget target, TextureParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TextureParameterivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureParameterivEXT(int, TextureTarget, TextureParameterName, int*)"/>
            public static unsafe void TextureParameterivEXT(int texture, TextureTarget target, TextureParameterName pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TextureParameterivEXT(texture, target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage1DEXT(int, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1DEXT(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage1DEXT(int, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage1DEXT(int, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage1DEXT(int, TextureTarget, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage1DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2DEXT(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage2DEXT(int, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage2DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3DEXT(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TextureSubImage3DEXT(int, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TextureSubImage3DEXT<T1>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TransformFeedbackVaryingsEXT(int, int, byte**, TransformFeedbackBufferMode)"/>
            public static unsafe void TransformFeedbackVaryingsEXT(int program, int count, string[] varyings, TransformFeedbackBufferMode bufferMode)
            {
                byte** varyings_ptr = (byte**)MarshalTk.StringArrayToCoTaskMemUTF8(varyings);
                TransformFeedbackVaryingsEXT(program, count, varyings_ptr, bufferMode);
                MarshalTk.FreeStringArrayCoTaskMem((IntPtr)varyings_ptr, varyings.Length);
            }
            /// <inheritdoc cref="Uniform1uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform1uivEXT(int location, int count, ref readonly uint value)
            {
                fixed (uint* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform1uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform1uivEXT(int location, int count, ReadOnlySpan<uint> value)
            {
                fixed (uint* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform1uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform1uivEXT(int location, int count, uint[] value)
            {
                fixed (uint* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform1uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform2uivEXT(int location, int count, ref readonly Vector2i value)
            {
                fixed (Vector2i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform2uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform2uivEXT(int location, int count, ReadOnlySpan<Vector2i> value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform2uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform2uivEXT(int location, int count, Vector2i[] value)
            {
                fixed (Vector2i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform2uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform3uivEXT(int location, int count, ref readonly Vector3i value)
            {
                fixed (Vector3i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform3uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform3uivEXT(int location, int count, ReadOnlySpan<Vector3i> value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform3uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform3uivEXT(int location, int count, Vector3i[] value)
            {
                fixed (Vector3i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform3uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform4uivEXT(int location, int count, ref readonly Vector4i value)
            {
                fixed (Vector4i* tmp_value = &value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform4uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform4uivEXT(int location, int count, ReadOnlySpan<Vector4i> value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform4uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4uivEXT(int, int, uint*)"/>
            public static unsafe void Uniform4uivEXT(int location, int count, Vector4i[] value)
            {
                fixed (Vector4i* tmp_value = value)
                {
                    uint* value_ptr = (uint*)tmp_value;
                    Uniform4uivEXT(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="VariantbvEXT(uint, sbyte*)"/>
            public static unsafe void VariantbvEXT(uint id, ReadOnlySpan<sbyte> addr)
            {
                fixed (sbyte* addr_ptr = addr)
                {
                    VariantbvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantbvEXT(uint, sbyte*)"/>
            public static unsafe void VariantbvEXT(uint id, sbyte[] addr)
            {
                fixed (sbyte* addr_ptr = addr)
                {
                    VariantbvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantbvEXT(uint, sbyte*)"/>
            public static unsafe void VariantbvEXT(uint id, ref readonly sbyte addr)
            {
                fixed (sbyte* addr_ptr = &addr)
                {
                    VariantbvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantdvEXT(uint, double*)"/>
            public static unsafe void VariantdvEXT(uint id, ReadOnlySpan<double> addr)
            {
                fixed (double* addr_ptr = addr)
                {
                    VariantdvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantdvEXT(uint, double*)"/>
            public static unsafe void VariantdvEXT(uint id, double[] addr)
            {
                fixed (double* addr_ptr = addr)
                {
                    VariantdvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantdvEXT(uint, double*)"/>
            public static unsafe void VariantdvEXT(uint id, ref readonly double addr)
            {
                fixed (double* addr_ptr = &addr)
                {
                    VariantdvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantfvEXT(uint, float*)"/>
            public static unsafe void VariantfvEXT(uint id, ReadOnlySpan<float> addr)
            {
                fixed (float* addr_ptr = addr)
                {
                    VariantfvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantfvEXT(uint, float*)"/>
            public static unsafe void VariantfvEXT(uint id, float[] addr)
            {
                fixed (float* addr_ptr = addr)
                {
                    VariantfvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantfvEXT(uint, float*)"/>
            public static unsafe void VariantfvEXT(uint id, ref readonly float addr)
            {
                fixed (float* addr_ptr = &addr)
                {
                    VariantfvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantivEXT(uint, int*)"/>
            public static unsafe void VariantivEXT(uint id, ReadOnlySpan<int> addr)
            {
                fixed (int* addr_ptr = addr)
                {
                    VariantivEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantivEXT(uint, int*)"/>
            public static unsafe void VariantivEXT(uint id, int[] addr)
            {
                fixed (int* addr_ptr = addr)
                {
                    VariantivEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantivEXT(uint, int*)"/>
            public static unsafe void VariantivEXT(uint id, ref readonly int addr)
            {
                fixed (int* addr_ptr = &addr)
                {
                    VariantivEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantPointerEXT(uint, ScalarType, uint, void*)"/>
            public static unsafe void VariantPointerEXT(uint id, ScalarType type, uint stride, IntPtr addr)
            {
                void* addr_vptr = (void*)addr;
                VariantPointerEXT(id, type, stride, addr_vptr);
            }
            /// <inheritdoc cref="VariantPointerEXT(uint, ScalarType, uint, void*)"/>
            public static unsafe void VariantPointerEXT<T1>(uint id, ScalarType type, uint stride, ReadOnlySpan<T1> addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    VariantPointerEXT(id, type, stride, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantPointerEXT(uint, ScalarType, uint, void*)"/>
            public static unsafe void VariantPointerEXT<T1>(uint id, ScalarType type, uint stride, T1[] addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = addr)
                {
                    VariantPointerEXT(id, type, stride, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantPointerEXT(uint, ScalarType, uint, void*)"/>
            public static unsafe void VariantPointerEXT<T1>(uint id, ScalarType type, uint stride, ref readonly T1 addr)
                where T1 : unmanaged
            {
                fixed (void* addr_ptr = &addr)
                {
                    VariantPointerEXT(id, type, stride, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantsvEXT(uint, short*)"/>
            public static unsafe void VariantsvEXT(uint id, ReadOnlySpan<short> addr)
            {
                fixed (short* addr_ptr = addr)
                {
                    VariantsvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantsvEXT(uint, short*)"/>
            public static unsafe void VariantsvEXT(uint id, short[] addr)
            {
                fixed (short* addr_ptr = addr)
                {
                    VariantsvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantsvEXT(uint, short*)"/>
            public static unsafe void VariantsvEXT(uint id, ref readonly short addr)
            {
                fixed (short* addr_ptr = &addr)
                {
                    VariantsvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantubvEXT(uint, byte*)"/>
            public static unsafe void VariantubvEXT(uint id, ReadOnlySpan<byte> addr)
            {
                fixed (byte* addr_ptr = addr)
                {
                    VariantubvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantubvEXT(uint, byte*)"/>
            public static unsafe void VariantubvEXT(uint id, byte[] addr)
            {
                fixed (byte* addr_ptr = addr)
                {
                    VariantubvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantubvEXT(uint, byte*)"/>
            public static unsafe void VariantubvEXT(uint id, ref readonly byte addr)
            {
                fixed (byte* addr_ptr = &addr)
                {
                    VariantubvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantuivEXT(uint, uint*)"/>
            public static unsafe void VariantuivEXT(uint id, ReadOnlySpan<uint> addr)
            {
                fixed (uint* addr_ptr = addr)
                {
                    VariantuivEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantuivEXT(uint, uint*)"/>
            public static unsafe void VariantuivEXT(uint id, uint[] addr)
            {
                fixed (uint* addr_ptr = addr)
                {
                    VariantuivEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantuivEXT(uint, uint*)"/>
            public static unsafe void VariantuivEXT(uint id, ref readonly uint addr)
            {
                fixed (uint* addr_ptr = &addr)
                {
                    VariantuivEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantusvEXT(uint, ushort*)"/>
            public static unsafe void VariantusvEXT(uint id, ReadOnlySpan<ushort> addr)
            {
                fixed (ushort* addr_ptr = addr)
                {
                    VariantusvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantusvEXT(uint, ushort*)"/>
            public static unsafe void VariantusvEXT(uint id, ushort[] addr)
            {
                fixed (ushort* addr_ptr = addr)
                {
                    VariantusvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VariantusvEXT(uint, ushort*)"/>
            public static unsafe void VariantusvEXT(uint id, ref readonly ushort addr)
            {
                fixed (ushort* addr_ptr = &addr)
                {
                    VariantusvEXT(id, addr_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI1ivEXT(uint index, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI1ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI1uivEXT(uint index, ref readonly uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI1uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI2ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI2ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI2ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI2ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI2ivEXT(uint index, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI2ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI2uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI2uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI2uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI2uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI2uivEXT(uint index, ref readonly uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI2uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI3ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI3ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI3ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI3ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI3ivEXT(uint index, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI3ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI3uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI3uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI3uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI3uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI3uivEXT(uint index, ref readonly uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI3uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bvEXT(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bvEXT(uint index, ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttribI4bvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bvEXT(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bvEXT(uint index, sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttribI4bvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bvEXT(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bvEXT(uint index, ref readonly sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    VertexAttribI4bvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI4ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI4ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI4ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI4ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI4ivEXT(uint index, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI4ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4svEXT(uint, short*)"/>
            public static unsafe void VertexAttribI4svEXT(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribI4svEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4svEXT(uint, short*)"/>
            public static unsafe void VertexAttribI4svEXT(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribI4svEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4svEXT(uint, short*)"/>
            public static unsafe void VertexAttribI4svEXT(uint index, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribI4svEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubvEXT(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubvEXT(uint index, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttribI4ubvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubvEXT(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubvEXT(uint index, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttribI4ubvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubvEXT(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubvEXT(uint index, ref readonly byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttribI4ubvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI4uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI4uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI4uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI4uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI4uivEXT(uint index, ref readonly uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI4uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usvEXT(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usvEXT(uint index, ReadOnlySpan<ushort> v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttribI4usvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usvEXT(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usvEXT(uint index, ushort[] v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttribI4usvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usvEXT(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usvEXT(uint index, ref readonly ushort v)
            {
                fixed (ushort* v_ptr = &v)
                {
                    VertexAttribI4usvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT(uint index, int size, VertexAttribIType type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexAttribIPointerEXT(index, size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT<T1>(uint index, int size, VertexAttribIType type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT<T1>(uint index, int size, VertexAttribIType type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT<T1>(uint index, int size, VertexAttribIType type, int stride, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL1dvEXT(uint index, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribL1dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL2dvEXT(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL2dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL2dvEXT(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL2dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL2dvEXT(uint index, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribL2dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL3dvEXT(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL3dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL3dvEXT(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL3dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL3dvEXT(uint index, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribL3dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL4dvEXT(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL4dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL4dvEXT(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribL4dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4dvEXT(uint, double*)"/>
            public static unsafe void VertexAttribL4dvEXT(uint index, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribL4dvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribLPointerEXT(uint, int, VertexAttribLType, int, void*)"/>
            public static unsafe void VertexAttribLPointerEXT(uint index, int size, VertexAttribLType type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexAttribLPointerEXT(index, size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexAttribLPointerEXT(uint, int, VertexAttribLType, int, void*)"/>
            public static unsafe void VertexAttribLPointerEXT<T1>(uint index, int size, VertexAttribLType type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribLPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribLPointerEXT(uint, int, VertexAttribLType, int, void*)"/>
            public static unsafe void VertexAttribLPointerEXT<T1>(uint index, int size, VertexAttribLType type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribLPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribLPointerEXT(uint, int, VertexAttribLType, int, void*)"/>
            public static unsafe void VertexAttribLPointerEXT<T1>(uint index, int size, VertexAttribLType type, int stride, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexAttribLPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexPointerEXT(int, VertexPointerType, int, int, void*)"/>
            public static unsafe void VertexPointerEXT(int size, VertexPointerType type, int stride, int count, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexPointerEXT(size, type, stride, count, pointer_vptr);
            }
            /// <inheritdoc cref="VertexPointerEXT(int, VertexPointerType, int, int, void*)"/>
            public static unsafe void VertexPointerEXT<T1>(int size, VertexPointerType type, int stride, int count, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexPointerEXT(int, VertexPointerType, int, int, void*)"/>
            public static unsafe void VertexPointerEXT<T1>(int size, VertexPointerType type, int stride, int count, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexPointerEXT(int, VertexPointerType, int, int, void*)"/>
            public static unsafe void VertexPointerEXT<T1>(int size, VertexPointerType type, int stride, int count, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexPointerEXT(size, type, stride, count, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightfvEXT(float*)"/>
            public static unsafe void VertexWeightfvEXT(ref readonly float weight)
            {
                fixed (float* weight_ptr = &weight)
                {
                    VertexWeightfvEXT(weight_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightPointerEXT(int, VertexWeightPointerTypeEXT, int, void*)"/>
            public static unsafe void VertexWeightPointerEXT(int size, VertexWeightPointerTypeEXT type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexWeightPointerEXT(size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexWeightPointerEXT(int, VertexWeightPointerTypeEXT, int, void*)"/>
            public static unsafe void VertexWeightPointerEXT<T1>(int size, VertexWeightPointerTypeEXT type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexWeightPointerEXT(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightPointerEXT(int, VertexWeightPointerTypeEXT, int, void*)"/>
            public static unsafe void VertexWeightPointerEXT<T1>(int size, VertexWeightPointerTypeEXT type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexWeightPointerEXT(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeightPointerEXT(int, VertexWeightPointerTypeEXT, int, void*)"/>
            public static unsafe void VertexWeightPointerEXT<T1>(int size, VertexWeightPointerTypeEXT type, int stride, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexWeightPointerEXT(size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="WaitSemaphoreEXT(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void WaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, ReadOnlySpan<int> buffers, uint numTextureBarriers, ReadOnlySpan<int> textures, ReadOnlySpan<TextureLayout> srcLayouts)
            {
                fixed (TextureLayout* srcLayouts_ptr = srcLayouts)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        fixed (int* buffers_ptr = buffers)
                        {
                            WaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, srcLayouts_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="WaitSemaphoreEXT(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void WaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, int[] buffers, uint numTextureBarriers, int[] textures, TextureLayout[] srcLayouts)
            {
                fixed (TextureLayout* srcLayouts_ptr = srcLayouts)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        fixed (int* buffers_ptr = buffers)
                        {
                            WaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, srcLayouts_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="WaitSemaphoreEXT(uint, uint, int*, uint, int*, TextureLayout*)"/>
            public static unsafe void WaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, ref readonly int buffers, uint numTextureBarriers, ref readonly int textures, ref readonly TextureLayout srcLayouts)
            {
                fixed (int* buffers_ptr = &buffers)
                fixed (int* textures_ptr = &textures)
                fixed (TextureLayout* srcLayouts_ptr = &srcLayouts)
                {
                    WaitSemaphoreEXT(semaphore, numBufferBarriers, buffers_ptr, numTextureBarriers, textures_ptr, srcLayouts_ptr);
                }
            }
            /// <inheritdoc cref="WindowRectanglesEXT(All, int, int*)"/>
            public static unsafe void WindowRectanglesEXT(All mode, int count, ReadOnlySpan<int> box)
            {
                fixed (int* box_ptr = box)
                {
                    WindowRectanglesEXT(mode, count, box_ptr);
                }
            }
            /// <inheritdoc cref="WindowRectanglesEXT(All, int, int*)"/>
            public static unsafe void WindowRectanglesEXT(All mode, int count, int[] box)
            {
                fixed (int* box_ptr = box)
                {
                    WindowRectanglesEXT(mode, count, box_ptr);
                }
            }
            /// <inheritdoc cref="WindowRectanglesEXT(All, int, int*)"/>
            public static unsafe void WindowRectanglesEXT(All mode, int count, ref readonly int box)
            {
                fixed (int* box_ptr = &box)
                {
                    WindowRectanglesEXT(mode, count, box_ptr);
                }
            }
        }
        public static unsafe partial class GREMEDY
        {
            /// <inheritdoc cref="StringMarkerGREMEDY(int, void*)"/>
            public static unsafe void StringMarkerGREMEDY(int len, IntPtr str)
            {
                void* str_vptr = (void*)str;
                StringMarkerGREMEDY(len, str_vptr);
            }
            /// <inheritdoc cref="StringMarkerGREMEDY(int, void*)"/>
            public static unsafe void StringMarkerGREMEDY<T1>(int len, ReadOnlySpan<T1> str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    StringMarkerGREMEDY(len, str_ptr);
                }
            }
            /// <inheritdoc cref="StringMarkerGREMEDY(int, void*)"/>
            public static unsafe void StringMarkerGREMEDY<T1>(int len, T1[] str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = str)
                {
                    StringMarkerGREMEDY(len, str_ptr);
                }
            }
            /// <inheritdoc cref="StringMarkerGREMEDY(int, void*)"/>
            public static unsafe void StringMarkerGREMEDY<T1>(int len, ref readonly T1 str)
                where T1 : unmanaged
            {
                fixed (void* str_ptr = &str)
                {
                    StringMarkerGREMEDY(len, str_ptr);
                }
            }
        }
        public static unsafe partial class HP
        {
            /// <inheritdoc cref="GetImageTransformParameterfvHP(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void GetImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetImageTransformParameterfvHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameterfvHP(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void GetImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetImageTransformParameterfvHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameterfvHP(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe float GetImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetImageTransformParameterfvHP(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetImageTransformParameterfvHP(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void GetImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetImageTransformParameterfvHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameterivHP(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void GetImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetImageTransformParameterivHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameterivHP(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void GetImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetImageTransformParameterivHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetImageTransformParameterivHP(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe int GetImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetImageTransformParameterivHP(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetImageTransformParameterivHP(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void GetImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetImageTransformParameterivHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameterfvHP(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void ImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ImageTransformParameterfvHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameterfvHP(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void ImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ImageTransformParameterfvHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameterfvHP(ImageTransformTargetHP, ImageTransformPNameHP, float*)"/>
            public static unsafe void ImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ImageTransformParameterfvHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameterivHP(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void ImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ImageTransformParameterivHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameterivHP(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void ImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ImageTransformParameterivHP(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ImageTransformParameterivHP(ImageTransformTargetHP, ImageTransformPNameHP, int*)"/>
            public static unsafe void ImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ImageTransformParameterivHP(target, pname, parameters_ptr);
                }
            }
        }
        public static unsafe partial class IBM
        {
            /// <inheritdoc cref="MultiModeDrawArraysIBM(PrimitiveType*, int*, int*, int, int)"/>
            public static unsafe void MultiModeDrawArraysIBM(ReadOnlySpan<PrimitiveType> mode, ReadOnlySpan<int> first, ReadOnlySpan<int> count, int primcount, int modestride)
            {
                fixed (int* count_ptr = count)
                {
                    fixed (int* first_ptr = first)
                    {
                        fixed (PrimitiveType* mode_ptr = mode)
                        {
                            MultiModeDrawArraysIBM(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                        }
                    }
                }
            }
            /// <inheritdoc cref="MultiModeDrawArraysIBM(PrimitiveType*, int*, int*, int, int)"/>
            public static unsafe void MultiModeDrawArraysIBM(PrimitiveType[] mode, int[] first, int[] count, int primcount, int modestride)
            {
                fixed (int* count_ptr = count)
                {
                    fixed (int* first_ptr = first)
                    {
                        fixed (PrimitiveType* mode_ptr = mode)
                        {
                            MultiModeDrawArraysIBM(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                        }
                    }
                }
            }
            /// <inheritdoc cref="MultiModeDrawArraysIBM(PrimitiveType*, int*, int*, int, int)"/>
            public static unsafe void MultiModeDrawArraysIBM(ref readonly PrimitiveType mode, ref readonly int first, ref readonly int count, int primcount, int modestride)
            {
                fixed (PrimitiveType* mode_ptr = &mode)
                fixed (int* first_ptr = &first)
                fixed (int* count_ptr = &count)
                {
                    MultiModeDrawArraysIBM(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                }
            }
            /// <inheritdoc cref="MultiModeDrawElementsIBM(PrimitiveType*, int*, DrawElementsType, void**, int, int)"/>
            public static unsafe void MultiModeDrawElementsIBM(ReadOnlySpan<PrimitiveType> mode, ReadOnlySpan<int> count, DrawElementsType type, void** indices, int primcount, int modestride)
            {
                fixed (int* count_ptr = count)
                {
                    fixed (PrimitiveType* mode_ptr = mode)
                    {
                        MultiModeDrawElementsIBM(mode_ptr, count_ptr, type, indices, primcount, modestride);
                    }
                }
            }
            /// <inheritdoc cref="MultiModeDrawElementsIBM(PrimitiveType*, int*, DrawElementsType, void**, int, int)"/>
            public static unsafe void MultiModeDrawElementsIBM(PrimitiveType[] mode, int[] count, DrawElementsType type, void** indices, int primcount, int modestride)
            {
                fixed (int* count_ptr = count)
                {
                    fixed (PrimitiveType* mode_ptr = mode)
                    {
                        MultiModeDrawElementsIBM(mode_ptr, count_ptr, type, indices, primcount, modestride);
                    }
                }
            }
            /// <inheritdoc cref="MultiModeDrawElementsIBM(PrimitiveType*, int*, DrawElementsType, void**, int, int)"/>
            public static unsafe void MultiModeDrawElementsIBM(ref readonly PrimitiveType mode, ref readonly int count, DrawElementsType type, void** indices, int primcount, int modestride)
            {
                fixed (PrimitiveType* mode_ptr = &mode)
                fixed (int* count_ptr = &count)
                {
                    MultiModeDrawElementsIBM(mode_ptr, count_ptr, type, indices, primcount, modestride);
                }
            }
        }
        public static unsafe partial class INGR
        {
        }
        public static unsafe partial class INTEL
        {
            /// <inheritdoc cref="CreatePerfQueryINTEL(uint, int*)"/>
            public static unsafe void CreatePerfQueryINTEL(uint queryId, Span<int> queryHandle)
            {
                fixed (int* queryHandle_ptr = queryHandle)
                {
                    CreatePerfQueryINTEL(queryId, queryHandle_ptr);
                }
            }
            /// <inheritdoc cref="CreatePerfQueryINTEL(uint, int*)"/>
            public static unsafe void CreatePerfQueryINTEL(uint queryId, int[] queryHandle)
            {
                fixed (int* queryHandle_ptr = queryHandle)
                {
                    CreatePerfQueryINTEL(queryId, queryHandle_ptr);
                }
            }
            /// <inheritdoc cref="CreatePerfQueryINTEL(uint, int*)"/>
            public static unsafe void CreatePerfQueryINTEL(uint queryId, ref int queryHandle)
            {
                fixed (int* queryHandle_ptr = &queryHandle)
                {
                    CreatePerfQueryINTEL(queryId, queryHandle_ptr);
                }
            }
            /// <inheritdoc cref="GetFirstPerfQueryIdINTEL(uint*)"/>
            public static unsafe void GetFirstPerfQueryIdINTEL(Span<uint> queryId)
            {
                fixed (uint* queryId_ptr = queryId)
                {
                    GetFirstPerfQueryIdINTEL(queryId_ptr);
                }
            }
            /// <inheritdoc cref="GetFirstPerfQueryIdINTEL(uint*)"/>
            public static unsafe void GetFirstPerfQueryIdINTEL(uint[] queryId)
            {
                fixed (uint* queryId_ptr = queryId)
                {
                    GetFirstPerfQueryIdINTEL(queryId_ptr);
                }
            }
            /// <inheritdoc cref="GetFirstPerfQueryIdINTEL(uint*)"/>
            public static unsafe void GetFirstPerfQueryIdINTEL(ref uint queryId)
            {
                fixed (uint* queryId_ptr = &queryId)
                {
                    GetFirstPerfQueryIdINTEL(queryId_ptr);
                }
            }
            /// <inheritdoc cref="GetNextPerfQueryIdINTEL(uint, uint*)"/>
            public static unsafe void GetNextPerfQueryIdINTEL(uint queryId, Span<uint> nextQueryId)
            {
                fixed (uint* nextQueryId_ptr = nextQueryId)
                {
                    GetNextPerfQueryIdINTEL(queryId, nextQueryId_ptr);
                }
            }
            /// <inheritdoc cref="GetNextPerfQueryIdINTEL(uint, uint*)"/>
            public static unsafe void GetNextPerfQueryIdINTEL(uint queryId, uint[] nextQueryId)
            {
                fixed (uint* nextQueryId_ptr = nextQueryId)
                {
                    GetNextPerfQueryIdINTEL(queryId, nextQueryId_ptr);
                }
            }
            /// <inheritdoc cref="GetNextPerfQueryIdINTEL(uint, uint*)"/>
            public static unsafe void GetNextPerfQueryIdINTEL(uint queryId, ref uint nextQueryId)
            {
                fixed (uint* nextQueryId_ptr = &nextQueryId)
                {
                    GetNextPerfQueryIdINTEL(queryId, nextQueryId_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfCounterInfoINTEL(uint, uint, uint, byte*, uint, byte*, uint*, uint*, uint*, uint*, ulong*)"/>
            public static unsafe void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, out string counterName, uint counterDescLength, out string counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
            {
                fixed (ulong* rawCounterMaxValue_ptr = rawCounterMaxValue)
                {
                    fixed (uint* counterDataTypeEnum_ptr = counterDataTypeEnum)
                    {
                        fixed (uint* counterTypeEnum_ptr = counterTypeEnum)
                        {
                            fixed (uint* counterDataSize_ptr = counterDataSize)
                            {
                                fixed (uint* counterOffset_ptr = counterOffset)
                                {
                                    var counterName_ptr = (byte*)Marshal.AllocCoTaskMem((int)counterNameLength);
                                    var counterDesc_ptr = (byte*)Marshal.AllocCoTaskMem((int)counterDescLength);
                                    GetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName_ptr, counterDescLength, counterDesc_ptr, counterOffset_ptr, counterDataSize_ptr, counterTypeEnum_ptr, counterDataTypeEnum_ptr, rawCounterMaxValue_ptr);
                                    counterDesc = Marshal.PtrToStringUTF8((IntPtr)counterDesc_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)counterDesc_ptr);
                                    counterName = Marshal.PtrToStringUTF8((IntPtr)counterName_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)counterName_ptr);
                                }
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetPerfCounterInfoINTEL(uint, uint, uint, byte*, uint, byte*, uint*, uint*, uint*, uint*, ulong*)"/>
            public static unsafe void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, out string counterName, uint counterDescLength, out string counterDesc, uint[] counterOffset, uint[] counterDataSize, uint[] counterTypeEnum, uint[] counterDataTypeEnum, ulong[] rawCounterMaxValue)
            {
                fixed (ulong* rawCounterMaxValue_ptr = rawCounterMaxValue)
                {
                    fixed (uint* counterDataTypeEnum_ptr = counterDataTypeEnum)
                    {
                        fixed (uint* counterTypeEnum_ptr = counterTypeEnum)
                        {
                            fixed (uint* counterDataSize_ptr = counterDataSize)
                            {
                                fixed (uint* counterOffset_ptr = counterOffset)
                                {
                                    var counterName_ptr = (byte*)Marshal.AllocCoTaskMem((int)counterNameLength);
                                    var counterDesc_ptr = (byte*)Marshal.AllocCoTaskMem((int)counterDescLength);
                                    GetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName_ptr, counterDescLength, counterDesc_ptr, counterOffset_ptr, counterDataSize_ptr, counterTypeEnum_ptr, counterDataTypeEnum_ptr, rawCounterMaxValue_ptr);
                                    counterDesc = Marshal.PtrToStringUTF8((IntPtr)counterDesc_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)counterDesc_ptr);
                                    counterName = Marshal.PtrToStringUTF8((IntPtr)counterName_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)counterName_ptr);
                                }
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetPerfCounterInfoINTEL(uint, uint, uint, byte*, uint, byte*, uint*, uint*, uint*, uint*, ulong*)"/>
            public static unsafe void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, out string counterName, uint counterDescLength, out string counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
            {
                fixed (uint* counterOffset_ptr = &counterOffset)
                fixed (uint* counterDataSize_ptr = &counterDataSize)
                fixed (uint* counterTypeEnum_ptr = &counterTypeEnum)
                fixed (uint* counterDataTypeEnum_ptr = &counterDataTypeEnum)
                fixed (ulong* rawCounterMaxValue_ptr = &rawCounterMaxValue)
                {
                    var counterName_ptr = (byte*)Marshal.AllocCoTaskMem((int)counterNameLength);
                    var counterDesc_ptr = (byte*)Marshal.AllocCoTaskMem((int)counterDescLength);
                    GetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName_ptr, counterDescLength, counterDesc_ptr, counterOffset_ptr, counterDataSize_ptr, counterTypeEnum_ptr, counterDataTypeEnum_ptr, rawCounterMaxValue_ptr);
                    counterDesc = Marshal.PtrToStringUTF8((IntPtr)counterDesc_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterDesc_ptr);
                    counterName = Marshal.PtrToStringUTF8((IntPtr)counterName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)counterName_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryDataINTEL(int, PerfQueryDataFlags, int, void*, uint*)"/>
            public static unsafe void GetPerfQueryDataINTEL(int queryHandle, PerfQueryDataFlags flags, int dataSize, IntPtr data, Span<uint> bytesWritten)
            {
                fixed (uint* bytesWritten_ptr = bytesWritten)
                {
                    void* data_vptr = (void*)data;
                    GetPerfQueryDataINTEL(queryHandle, flags, dataSize, data_vptr, bytesWritten_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryDataINTEL(int, PerfQueryDataFlags, int, void*, uint*)"/>
            public static unsafe void GetPerfQueryDataINTEL(int queryHandle, PerfQueryDataFlags flags, int dataSize, IntPtr data, uint[] bytesWritten)
            {
                fixed (uint* bytesWritten_ptr = bytesWritten)
                {
                    void* data_vptr = (void*)data;
                    GetPerfQueryDataINTEL(queryHandle, flags, dataSize, data_vptr, bytesWritten_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryDataINTEL(int, PerfQueryDataFlags, int, void*, uint*)"/>
            public static unsafe void GetPerfQueryDataINTEL(int queryHandle, PerfQueryDataFlags flags, int dataSize, IntPtr data, ref uint bytesWritten)
            {
                fixed (uint* bytesWritten_ptr = &bytesWritten)
                {
                    void* data_vptr = (void*)data;
                    GetPerfQueryDataINTEL(queryHandle, flags, dataSize, data_vptr, bytesWritten_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryDataINTEL(int, PerfQueryDataFlags, int, void*, uint*)"/>
            public static unsafe void GetPerfQueryDataINTEL<T1>(int queryHandle, PerfQueryDataFlags flags, int dataSize, Span<T1> data, Span<uint> bytesWritten)
                where T1 : unmanaged
            {
                fixed (uint* bytesWritten_ptr = bytesWritten)
                {
                    fixed (void* data_ptr = data)
                    {
                        GetPerfQueryDataINTEL(queryHandle, flags, dataSize, data_ptr, bytesWritten_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfQueryDataINTEL(int, PerfQueryDataFlags, int, void*, uint*)"/>
            public static unsafe void GetPerfQueryDataINTEL<T1>(int queryHandle, PerfQueryDataFlags flags, int dataSize, T1[] data, uint[] bytesWritten)
                where T1 : unmanaged
            {
                fixed (uint* bytesWritten_ptr = bytesWritten)
                {
                    fixed (void* data_ptr = data)
                    {
                        GetPerfQueryDataINTEL(queryHandle, flags, dataSize, data_ptr, bytesWritten_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPerfQueryDataINTEL(int, PerfQueryDataFlags, int, void*, uint*)"/>
            public static unsafe void GetPerfQueryDataINTEL<T1>(int queryHandle, PerfQueryDataFlags flags, int dataSize, ref T1 data, ref uint bytesWritten)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                fixed (uint* bytesWritten_ptr = &bytesWritten)
                {
                    GetPerfQueryDataINTEL(queryHandle, flags, dataSize, data_ptr, bytesWritten_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryIdByNameINTEL(byte*, uint*)"/>
            public static unsafe void GetPerfQueryIdByNameINTEL(byte* queryName, Span<uint> queryId)
            {
                fixed (uint* queryId_ptr = queryId)
                {
                    GetPerfQueryIdByNameINTEL(queryName, queryId_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryIdByNameINTEL(byte*, uint*)"/>
            public static unsafe void GetPerfQueryIdByNameINTEL(byte* queryName, uint[] queryId)
            {
                fixed (uint* queryId_ptr = queryId)
                {
                    GetPerfQueryIdByNameINTEL(queryName, queryId_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryIdByNameINTEL(byte*, uint*)"/>
            public static unsafe void GetPerfQueryIdByNameINTEL(byte* queryName, ref uint queryId)
            {
                fixed (uint* queryId_ptr = &queryId)
                {
                    GetPerfQueryIdByNameINTEL(queryName, queryId_ptr);
                }
            }
            /// <inheritdoc cref="GetPerfQueryInfoINTEL(uint, uint, byte*, uint*, uint*, uint*, PerformanceQueryCapsMaskINTEL*)"/>
            public static unsafe void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, out string queryName, Span<uint> dataSize, Span<uint> noCounters, Span<uint> noInstances, Span<PerformanceQueryCapsMaskINTEL> capsMask)
            {
                fixed (PerformanceQueryCapsMaskINTEL* capsMask_ptr = capsMask)
                {
                    fixed (uint* noInstances_ptr = noInstances)
                    {
                        fixed (uint* noCounters_ptr = noCounters)
                        {
                            fixed (uint* dataSize_ptr = dataSize)
                            {
                                var queryName_ptr = (byte*)Marshal.AllocCoTaskMem((int)queryNameLength);
                                GetPerfQueryInfoINTEL(queryId, queryNameLength, queryName_ptr, dataSize_ptr, noCounters_ptr, noInstances_ptr, capsMask_ptr);
                                queryName = Marshal.PtrToStringUTF8((IntPtr)queryName_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)queryName_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetPerfQueryInfoINTEL(uint, uint, byte*, uint*, uint*, uint*, PerformanceQueryCapsMaskINTEL*)"/>
            public static unsafe void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, out string queryName, uint[] dataSize, uint[] noCounters, uint[] noInstances, PerformanceQueryCapsMaskINTEL[] capsMask)
            {
                fixed (PerformanceQueryCapsMaskINTEL* capsMask_ptr = capsMask)
                {
                    fixed (uint* noInstances_ptr = noInstances)
                    {
                        fixed (uint* noCounters_ptr = noCounters)
                        {
                            fixed (uint* dataSize_ptr = dataSize)
                            {
                                var queryName_ptr = (byte*)Marshal.AllocCoTaskMem((int)queryNameLength);
                                GetPerfQueryInfoINTEL(queryId, queryNameLength, queryName_ptr, dataSize_ptr, noCounters_ptr, noInstances_ptr, capsMask_ptr);
                                queryName = Marshal.PtrToStringUTF8((IntPtr)queryName_ptr)!;
                                Marshal.FreeCoTaskMem((IntPtr)queryName_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetPerfQueryInfoINTEL(uint, uint, byte*, uint*, uint*, uint*, PerformanceQueryCapsMaskINTEL*)"/>
            public static unsafe void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, out string queryName, ref uint dataSize, ref uint noCounters, ref uint noInstances, ref PerformanceQueryCapsMaskINTEL capsMask)
            {
                fixed (uint* dataSize_ptr = &dataSize)
                fixed (uint* noCounters_ptr = &noCounters)
                fixed (uint* noInstances_ptr = &noInstances)
                fixed (PerformanceQueryCapsMaskINTEL* capsMask_ptr = &capsMask)
                {
                    var queryName_ptr = (byte*)Marshal.AllocCoTaskMem((int)queryNameLength);
                    GetPerfQueryInfoINTEL(queryId, queryNameLength, queryName_ptr, dataSize_ptr, noCounters_ptr, noInstances_ptr, capsMask_ptr);
                    queryName = Marshal.PtrToStringUTF8((IntPtr)queryName_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)queryName_ptr);
                }
            }
            /// <inheritdoc cref="MapTexture2DINTEL(int, int, uint, int*, All*)"/>
            public static unsafe void* MapTexture2DINTEL(int texture, int level, uint access, out int stride, out All layout)
            {
                void* returnValue;
                fixed (int* stride_ptr = &stride)
                fixed (All* layout_ptr = &layout)
                {
                    returnValue = MapTexture2DINTEL(texture, level, access, stride_ptr, layout_ptr);
                }
                return returnValue;
            }
        }
        public static unsafe partial class KHR
        {
            /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallback(GLDebugProc callback, IntPtr userParam)
            {
                void* userParam_vptr = (void*)userParam;
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallback(callback_ptr, userParam_vptr);
            }
            /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallback<T1>(GLDebugProc callback, ReadOnlySpan<T1> userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallback(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallback<T1>(GLDebugProc callback, T1[] userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallback(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallback(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallback<T1>(GLDebugProc callback, ref readonly T1 userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = &userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallback(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallbackKHR(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackKHR(GLDebugProcKHR callback, IntPtr userParam)
            {
                void* userParam_vptr = (void*)userParam;
                IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                DebugMessageCallbackKHR(callback_ptr, userParam_vptr);
            }
            /// <inheritdoc cref="DebugMessageCallbackKHR(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackKHR<T1>(GLDebugProcKHR callback, ReadOnlySpan<T1> userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallbackKHR(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallbackKHR(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackKHR<T1>(GLDebugProcKHR callback, T1[] userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallbackKHR(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageCallbackKHR(IntPtr, void*)"/>
            public static unsafe void DebugMessageCallbackKHR<T1>(GLDebugProcKHR callback, ref readonly T1 userParam)
                where T1 : unmanaged
            {
                fixed (void* userParam_ptr = &userParam)
                {
                    IntPtr callback_ptr = Marshal.GetFunctionPointerForDelegate(callback);
                    DebugMessageCallbackKHR(callback_ptr, userParam_ptr);
                }
            }
            /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, ReadOnlySpan<uint> ids, bool enabled)
            {
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, uint[] ids, bool enabled)
            {
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControl(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, ref readonly uint ids, bool enabled)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    DebugMessageControl(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControlKHR(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControlKHR(DebugSource source, DebugType type, DebugSeverity severity, int count, ReadOnlySpan<uint> ids, bool enabled)
            {
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageControlKHR(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControlKHR(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControlKHR(DebugSource source, DebugType type, DebugSeverity severity, int count, uint[] ids, bool enabled)
            {
                fixed (uint* ids_ptr = ids)
                {
                    DebugMessageControlKHR(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageControlKHR(DebugSource, DebugType, DebugSeverity, int, uint*, bool)"/>
            public static unsafe void DebugMessageControlKHR(DebugSource source, DebugType type, DebugSeverity severity, int count, ref readonly uint ids, bool enabled)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    DebugMessageControlKHR(source, type, severity, count, ids_ptr, enabled);
                }
            }
            /// <inheritdoc cref="DebugMessageInsert(DebugSource, DebugType, uint, DebugSeverity, int, byte*)"/>
            public static unsafe void DebugMessageInsert(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
            {
                byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
                DebugMessageInsert(source, type, id, severity, length, buf_ptr);
                Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
            }
            /// <inheritdoc cref="DebugMessageInsertKHR(DebugSource, DebugType, uint, DebugSeverity, int, byte*)"/>
            public static unsafe void DebugMessageInsertKHR(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, string buf)
            {
                byte* buf_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(buf);
                DebugMessageInsertKHR(source, type, id, severity, length, buf_ptr);
                Marshal.FreeCoTaskMem((IntPtr)buf_ptr);
            }
            /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, Span<DebugSource> sources, Span<DebugType> types, Span<uint> ids, Span<DebugSeverity> severities, Span<int> lengths, out string messageLog)
            {
                uint returnValue;
                fixed (int* lengths_ptr = lengths)
                {
                    fixed (DebugSeverity* severities_ptr = severities)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugType* types_ptr = types)
                            {
                                fixed (DebugSource* sources_ptr = sources)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, DebugSource[] sources, DebugType[] types, uint[] ids, DebugSeverity[] severities, int[] lengths, out string messageLog)
            {
                uint returnValue;
                fixed (int* lengths_ptr = lengths)
                {
                    fixed (DebugSeverity* severities_ptr = severities)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugType* types_ptr = types)
                            {
                                fixed (DebugSource* sources_ptr = sources)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLog(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLog(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = &sources)
                fixed (DebugType* types_ptr = &types)
                fixed (uint* ids_ptr = &ids)
                fixed (DebugSeverity* severities_ptr = &severities)
                fixed (int* lengths_ptr = &lengths)
                {
                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    returnValue = GetDebugMessageLog(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogKHR(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogKHR(uint count, int bufSize, Span<DebugSource> sources, Span<DebugType> types, Span<uint> ids, Span<DebugSeverity> severities, Span<int> lengths, out string messageLog)
            {
                uint returnValue;
                fixed (int* lengths_ptr = lengths)
                {
                    fixed (DebugSeverity* severities_ptr = severities)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugType* types_ptr = types)
                            {
                                fixed (DebugSource* sources_ptr = sources)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLogKHR(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogKHR(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogKHR(uint count, int bufSize, DebugSource[] sources, DebugType[] types, uint[] ids, DebugSeverity[] severities, int[] lengths, out string messageLog)
            {
                uint returnValue;
                fixed (int* lengths_ptr = lengths)
                {
                    fixed (DebugSeverity* severities_ptr = severities)
                    {
                        fixed (uint* ids_ptr = ids)
                        {
                            fixed (DebugType* types_ptr = types)
                            {
                                fixed (DebugSource* sources_ptr = sources)
                                {
                                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                                    returnValue = GetDebugMessageLogKHR(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                                }
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetDebugMessageLogKHR(uint, int, DebugSource*, DebugType*, uint*, DebugSeverity*, int*, byte*)"/>
            public static unsafe uint GetDebugMessageLogKHR(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, out string messageLog)
            {
                uint returnValue;
                fixed (DebugSource* sources_ptr = &sources)
                fixed (DebugType* types_ptr = &types)
                fixed (uint* ids_ptr = &ids)
                fixed (DebugSeverity* severities_ptr = &severities)
                fixed (int* lengths_ptr = &lengths)
                {
                    var messageLog_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    returnValue = GetDebugMessageLogKHR(count, bufSize, sources_ptr, types_ptr, ids_ptr, severities_ptr, lengths_ptr, messageLog_ptr);
                    messageLog = Marshal.PtrToStringUTF8((IntPtr)messageLog_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)messageLog_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
            public static unsafe void GetnUniformf(int program, int location, int bufSize, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
            public static unsafe void GetnUniformf(int program, int location, int bufSize, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfv(int, int, int, float*)"/>
            public static unsafe void GetnUniformf(int program, int location, int bufSize, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetnUniformfv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfvKHR(int, int, int, float*)"/>
            public static unsafe void GetnUniformfvKHR(int program, int location, int bufSize, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfvKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfvKHR(int, int, int, float*)"/>
            public static unsafe void GetnUniformfvKHR(int program, int location, int bufSize, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetnUniformfvKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformfvKHR(int, int, int, float*)"/>
            public static unsafe void GetnUniformfvKHR(int program, int location, int bufSize, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetnUniformfvKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
            public static unsafe void GetnUniformi(int program, int location, int bufSize, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
            public static unsafe void GetnUniformi(int program, int location, int bufSize, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformiv(int, int, int, int*)"/>
            public static unsafe void GetnUniformi(int program, int location, int bufSize, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetnUniformiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformivKHR(int, int, int, int*)"/>
            public static unsafe void GetnUniformivKHR(int program, int location, int bufSize, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformivKHR(int, int, int, int*)"/>
            public static unsafe void GetnUniformivKHR(int program, int location, int bufSize, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetnUniformivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformivKHR(int, int, int, int*)"/>
            public static unsafe void GetnUniformivKHR(int program, int location, int bufSize, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetnUniformivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
            public static unsafe void GetnUniformui(int program, int location, int bufSize, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
            public static unsafe void GetnUniformui(int program, int location, int bufSize, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuiv(int, int, int, uint*)"/>
            public static unsafe void GetnUniformui(int program, int location, int bufSize, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetnUniformuiv(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuivKHR(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuivKHR(int program, int location, int bufSize, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuivKHR(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuivKHR(int program, int location, int bufSize, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetnUniformuivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetnUniformuivKHR(int, int, int, uint*)"/>
            public static unsafe void GetnUniformuivKHR(int program, int location, int bufSize, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetnUniformuivKHR(program, location, bufSize, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, out int length)
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabel(ObjectIdentifier, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, out int length, out string label)
            {
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabel(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectLabelKHR(All, uint, int, int*, byte*)"/>
            public static unsafe string GetObjectLabelKHR(All identifier, uint name, int bufSize, out int length)
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabelKHR(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectLabelKHR(All, uint, int, int*, byte*)"/>
            public static unsafe void GetObjectLabelKHR(All identifier, uint name, int bufSize, out int length, out string label)
            {
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectLabelKHR(identifier, name, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel(IntPtr ptr, int bufSize, out int length)
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, out int length, out string label)
            {
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabel(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel<T1>(ReadOnlySpan<T1> ptr, int bufSize, out int length)
                where T1 : unmanaged
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    fixed (void* ptr_ptr = ptr)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel<T1>(ReadOnlySpan<T1> ptr, int bufSize, out int length, out string label)
                where T1 : unmanaged
            {
                fixed (int* length_ptr = &length)
                {
                    fixed (void* ptr_ptr = ptr)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel<T1>(T1[] ptr, int bufSize, out int length)
                where T1 : unmanaged
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    fixed (void* ptr_ptr = ptr)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel<T1>(T1[] ptr, int bufSize, out int length, out string label)
                where T1 : unmanaged
            {
                fixed (int* length_ptr = &length)
                {
                    fixed (void* ptr_ptr = ptr)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabel<T1>(ref readonly T1 ptr, int bufSize, out int length)
                where T1 : unmanaged
            {
                string label;
                fixed (void* ptr_ptr = &ptr)
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabel(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabel<T1>(ref readonly T1 ptr, int bufSize, out int length, out string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabel(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR(IntPtr ptr, int bufSize, out int length)
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR(IntPtr ptr, int bufSize, out int length, out string label)
            {
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    void* ptr_vptr = (void*)ptr;
                    GetObjectPtrLabelKHR(ptr_vptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR<T1>(ReadOnlySpan<T1> ptr, int bufSize, out int length)
                where T1 : unmanaged
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    fixed (void* ptr_ptr = ptr)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR<T1>(ReadOnlySpan<T1> ptr, int bufSize, out int length, out string label)
                where T1 : unmanaged
            {
                fixed (int* length_ptr = &length)
                {
                    fixed (void* ptr_ptr = ptr)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR<T1>(T1[] ptr, int bufSize, out int length)
                where T1 : unmanaged
            {
                string label;
                fixed (int* length_ptr = &length)
                {
                    fixed (void* ptr_ptr = ptr)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR<T1>(T1[] ptr, int bufSize, out int length, out string label)
                where T1 : unmanaged
            {
                fixed (int* length_ptr = &length)
                {
                    fixed (void* ptr_ptr = ptr)
                    {
                        var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                        GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                        label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                        Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe string GetObjectPtrLabelKHR<T1>(ref readonly T1 ptr, int bufSize, out int length)
                where T1 : unmanaged
            {
                string label;
                fixed (void* ptr_ptr = &ptr)
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
                return label;
            }
            /// <inheritdoc cref="GetObjectPtrLabelKHR(void*, int, int*, byte*)"/>
            public static unsafe void GetObjectPtrLabelKHR<T1>(ref readonly T1 ptr, int bufSize, out int length, out string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                fixed (int* length_ptr = &length)
                {
                    var label_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetObjectPtrLabelKHR(ptr_ptr, bufSize, length_ptr, label_ptr);
                    label = Marshal.PtrToStringUTF8((IntPtr)label_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="GetPointerv(GetPointervPName, void**)"/>
            public static unsafe void GetPointer(GetPointervPName pname, void** parameters)
            {
                GetPointerv(pname, parameters);
            }
            /// <inheritdoc cref="ObjectLabel(ObjectIdentifier, uint, int, byte*)"/>
            public static unsafe void ObjectLabel(ObjectIdentifier identifier, uint name, int length, string label)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                ObjectLabel(identifier, name, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            /// <inheritdoc cref="ObjectLabelKHR(ObjectIdentifier, uint, int, byte*)"/>
            public static unsafe void ObjectLabelKHR(ObjectIdentifier identifier, uint name, int length, string label)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                ObjectLabelKHR(identifier, name, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabel(IntPtr ptr, int length, string label)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                void* ptr_vptr = (void*)ptr;
                ObjectPtrLabel(ptr_vptr, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabel<T1>(ReadOnlySpan<T1> ptr, int length, string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = ptr)
                {
                    byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                    ObjectPtrLabel(ptr_ptr, length, label_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabel<T1>(T1[] ptr, int length, string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = ptr)
                {
                    byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                    ObjectPtrLabel(ptr_ptr, length, label_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="ObjectPtrLabel(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabel<T1>(ref readonly T1 ptr, int length, string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                {
                    byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                    ObjectPtrLabel(ptr_ptr, length, label_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="ObjectPtrLabelKHR(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabelKHR(IntPtr ptr, int length, string label)
            {
                byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                void* ptr_vptr = (void*)ptr;
                ObjectPtrLabelKHR(ptr_vptr, length, label_ptr);
                Marshal.FreeCoTaskMem((IntPtr)label_ptr);
            }
            /// <inheritdoc cref="ObjectPtrLabelKHR(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabelKHR<T1>(ReadOnlySpan<T1> ptr, int length, string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = ptr)
                {
                    byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                    ObjectPtrLabelKHR(ptr_ptr, length, label_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="ObjectPtrLabelKHR(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabelKHR<T1>(T1[] ptr, int length, string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = ptr)
                {
                    byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                    ObjectPtrLabelKHR(ptr_ptr, length, label_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="ObjectPtrLabelKHR(void*, int, byte*)"/>
            public static unsafe void ObjectPtrLabelKHR<T1>(ref readonly T1 ptr, int length, string label)
                where T1 : unmanaged
            {
                fixed (void* ptr_ptr = &ptr)
                {
                    byte* label_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(label);
                    ObjectPtrLabelKHR(ptr_ptr, length, label_ptr);
                    Marshal.FreeCoTaskMem((IntPtr)label_ptr);
                }
            }
            /// <inheritdoc cref="PushDebugGroup(DebugSource, uint, int, byte*)"/>
            public static unsafe void PushDebugGroup(DebugSource source, uint id, int length, string message)
            {
                byte* message_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(message);
                PushDebugGroup(source, id, length, message_ptr);
                Marshal.FreeCoTaskMem((IntPtr)message_ptr);
            }
            /// <inheritdoc cref="PushDebugGroupKHR(DebugSource, uint, int, byte*)"/>
            public static unsafe void PushDebugGroupKHR(DebugSource source, uint id, int length, string message)
            {
                byte* message_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(message);
                PushDebugGroupKHR(source, id, length, message_ptr);
                Marshal.FreeCoTaskMem((IntPtr)message_ptr);
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ReadnPixels(x, y, width, height, format, type, bufSize, data_vptr);
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, Span<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixels(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixels<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ReadnPixels(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixelsKHR(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsKHR(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
            {
                void* data_vptr = (void*)data;
                ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_vptr);
            }
            /// <inheritdoc cref="ReadnPixelsKHR(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsKHR<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, Span<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixelsKHR(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsKHR<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
            /// <inheritdoc cref="ReadnPixelsKHR(int, int, int, int, PixelFormat, PixelType, int, void*)"/>
            public static unsafe void ReadnPixelsKHR<T1>(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, ref T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data_ptr);
                }
            }
        }
        public static unsafe partial class MESA
        {
            /// <inheritdoc cref="GetFramebufferParameterivMESA(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameterivMESA(FramebufferTarget target, FramebufferAttachmentParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameterivMESA(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameterivMESA(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameterivMESA(FramebufferTarget target, FramebufferAttachmentParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFramebufferParameterivMESA(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFramebufferParameterivMESA(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe int GetFramebufferParameterivMESA(FramebufferTarget target, FramebufferAttachmentParameterName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetFramebufferParameterivMESA(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetFramebufferParameterivMESA(FramebufferTarget, FramebufferAttachmentParameterName, int*)"/>
            public static unsafe void GetFramebufferParameterivMESA(FramebufferTarget target, FramebufferAttachmentParameterName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFramebufferParameterivMESA(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dvMESA(double*)"/>
            public static unsafe void WindowPos2dvMESA(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos2dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dvMESA(double*)"/>
            public static unsafe void WindowPos2dvMESA(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos2dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2dvMESA(double*)"/>
            public static unsafe void WindowPos2dvMESA(ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    WindowPos2dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fvMESA(float*)"/>
            public static unsafe void WindowPos2fvMESA(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos2fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fvMESA(float*)"/>
            public static unsafe void WindowPos2fvMESA(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos2fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2fvMESA(float*)"/>
            public static unsafe void WindowPos2fvMESA(ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    WindowPos2fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2ivMESA(int*)"/>
            public static unsafe void WindowPos2ivMESA(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos2ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2ivMESA(int*)"/>
            public static unsafe void WindowPos2ivMESA(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos2ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2ivMESA(int*)"/>
            public static unsafe void WindowPos2ivMESA(ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    WindowPos2ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2svMESA(short*)"/>
            public static unsafe void WindowPos2svMESA(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos2svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2svMESA(short*)"/>
            public static unsafe void WindowPos2svMESA(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos2svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos2svMESA(short*)"/>
            public static unsafe void WindowPos2svMESA(ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    WindowPos2svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dvMESA(double*)"/>
            public static unsafe void WindowPos3dvMESA(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos3dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dvMESA(double*)"/>
            public static unsafe void WindowPos3dvMESA(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos3dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3dvMESA(double*)"/>
            public static unsafe void WindowPos3dvMESA(ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    WindowPos3dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fvMESA(float*)"/>
            public static unsafe void WindowPos3fvMESA(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos3fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fvMESA(float*)"/>
            public static unsafe void WindowPos3fvMESA(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos3fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3fvMESA(float*)"/>
            public static unsafe void WindowPos3fvMESA(ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    WindowPos3fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3ivMESA(int*)"/>
            public static unsafe void WindowPos3ivMESA(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos3ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3ivMESA(int*)"/>
            public static unsafe void WindowPos3ivMESA(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos3ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3ivMESA(int*)"/>
            public static unsafe void WindowPos3ivMESA(ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    WindowPos3ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3svMESA(short*)"/>
            public static unsafe void WindowPos3svMESA(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos3svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3svMESA(short*)"/>
            public static unsafe void WindowPos3svMESA(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos3svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos3svMESA(short*)"/>
            public static unsafe void WindowPos3svMESA(ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    WindowPos3svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4dvMESA(double*)"/>
            public static unsafe void WindowPos4dvMESA(ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos4dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4dvMESA(double*)"/>
            public static unsafe void WindowPos4dvMESA(double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    WindowPos4dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4dvMESA(double*)"/>
            public static unsafe void WindowPos4dvMESA(ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    WindowPos4dvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4fvMESA(float*)"/>
            public static unsafe void WindowPos4fvMESA(ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos4fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4fvMESA(float*)"/>
            public static unsafe void WindowPos4fvMESA(float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    WindowPos4fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4fvMESA(float*)"/>
            public static unsafe void WindowPos4fvMESA(ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    WindowPos4fvMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4ivMESA(int*)"/>
            public static unsafe void WindowPos4ivMESA(ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos4ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4ivMESA(int*)"/>
            public static unsafe void WindowPos4ivMESA(int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    WindowPos4ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4ivMESA(int*)"/>
            public static unsafe void WindowPos4ivMESA(ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    WindowPos4ivMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4svMESA(short*)"/>
            public static unsafe void WindowPos4svMESA(ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos4svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4svMESA(short*)"/>
            public static unsafe void WindowPos4svMESA(short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    WindowPos4svMESA(v_ptr);
                }
            }
            /// <inheritdoc cref="WindowPos4svMESA(short*)"/>
            public static unsafe void WindowPos4svMESA(ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    WindowPos4svMESA(v_ptr);
                }
            }
        }
        public static unsafe partial class NV
        {
            /// <inheritdoc cref="ActiveVaryingNV(int, byte*)"/>
            public static unsafe void ActiveVaryingNV(int program, string name)
            {
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                ActiveVaryingNV(program, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
            }
            /// <inheritdoc cref="AreProgramsResidentNV(int, int*, bool*)"/>
            public static unsafe bool AreProgramsResidentNV(int n, ReadOnlySpan<int> programs, Span<bool> residences)
            {
                bool returnValue;
                fixed (bool* residences_ptr = residences)
                {
                    fixed (int* programs_ptr = programs)
                    {
                        returnValue = AreProgramsResidentNV(n, programs_ptr, residences_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AreProgramsResidentNV(int, int*, bool*)"/>
            public static unsafe bool AreProgramsResidentNV(int n, int[] programs, bool[] residences)
            {
                bool returnValue;
                fixed (bool* residences_ptr = residences)
                {
                    fixed (int* programs_ptr = programs)
                    {
                        returnValue = AreProgramsResidentNV(n, programs_ptr, residences_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AreProgramsResidentNV(int, int*, bool*)"/>
            public static unsafe bool AreProgramsResidentNV(int n, ref readonly int programs, ref bool residences)
            {
                bool returnValue;
                fixed (int* programs_ptr = &programs)
                fixed (bool* residences_ptr = &residences)
                {
                    returnValue = AreProgramsResidentNV(n, programs_ptr, residences_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="Color3hvNV(Half*)"/>
            public static unsafe void Color3hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Color3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Color3hvNV(Half*)"/>
            public static unsafe void Color3hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Color3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Color3hvNV(Half*)"/>
            public static unsafe void Color3hvNV(ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Color3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Color4hvNV(Half*)"/>
            public static unsafe void Color4hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Color4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Color4hvNV(Half*)"/>
            public static unsafe void Color4hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Color4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Color4hvNV(Half*)"/>
            public static unsafe void Color4hvNV(ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Color4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameterfvNV(CombinerParameterNV, float*)"/>
            public static unsafe void CombinerParameterfvNV(CombinerParameterNV pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CombinerParameterfvNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameterfvNV(CombinerParameterNV, float*)"/>
            public static unsafe void CombinerParameterfvNV(CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CombinerParameterfvNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameterfvNV(CombinerParameterNV, float*)"/>
            public static unsafe void CombinerParameterfvNV(CombinerParameterNV pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    CombinerParameterfvNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameterivNV(CombinerParameterNV, int*)"/>
            public static unsafe void CombinerParameterivNV(CombinerParameterNV pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    CombinerParameterivNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameterivNV(CombinerParameterNV, int*)"/>
            public static unsafe void CombinerParameterivNV(CombinerParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    CombinerParameterivNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerParameterivNV(CombinerParameterNV, int*)"/>
            public static unsafe void CombinerParameterivNV(CombinerParameterNV pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    CombinerParameterivNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerStageParameterfvNV(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void CombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CombinerStageParameterfvNV(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerStageParameterfvNV(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void CombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    CombinerStageParameterfvNV(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CombinerStageParameterfvNV(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void CombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    CombinerStageParameterfvNV(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="CoverageModulationTableNV(int, float*)"/>
            public static unsafe void CoverageModulationTableNV(int n, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    CoverageModulationTableNV(n, v_ptr);
                }
            }
            /// <inheritdoc cref="CoverageModulationTableNV(int, float*)"/>
            public static unsafe void CoverageModulationTableNV(int n, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    CoverageModulationTableNV(n, v_ptr);
                }
            }
            /// <inheritdoc cref="CoverageModulationTableNV(int, float*)"/>
            public static unsafe void CoverageModulationTableNV(int n, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    CoverageModulationTableNV(n, v_ptr);
                }
            }
            /// <inheritdoc cref="CoverFillPathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverFillPathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverFillPathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ref readonly float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverFillPathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        CoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="CoverFillPathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        CoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="CoverFillPathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ref readonly T1 paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ref readonly float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    CoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ref readonly float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    CoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        CoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        CoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="CoverStrokePathInstancedNV(int, PathElementType, void*, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void CoverStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ref readonly T1 paths, uint pathBase, InstancedPathCoverMode coverMode, PathTransformType transformType, ref readonly float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    CoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="CreateCommandListsNV(int, uint*)"/>
            public static unsafe void CreateCommandListsNV(int n, Span<uint> lists)
            {
                fixed (uint* lists_ptr = lists)
                {
                    CreateCommandListsNV(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="CreateCommandListsNV(int, uint*)"/>
            public static unsafe void CreateCommandListsNV(int n, uint[] lists)
            {
                fixed (uint* lists_ptr = lists)
                {
                    CreateCommandListsNV(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="CreateCommandListsNV(int, uint*)"/>
            public static unsafe void CreateCommandListsNV(int n, ref uint lists)
            {
                fixed (uint* lists_ptr = &lists)
                {
                    CreateCommandListsNV(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="CreateSemaphoresNV(int, uint*)"/>
            public static unsafe void CreateSemaphoresNV(int n, Span<uint> semaphores)
            {
                fixed (uint* semaphores_ptr = semaphores)
                {
                    CreateSemaphoresNV(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="CreateSemaphoresNV(int, uint*)"/>
            public static unsafe void CreateSemaphoresNV(int n, uint[] semaphores)
            {
                fixed (uint* semaphores_ptr = semaphores)
                {
                    CreateSemaphoresNV(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="CreateSemaphoresNV(int, uint*)"/>
            public static unsafe void CreateSemaphoresNV(int n, ref uint semaphores)
            {
                fixed (uint* semaphores_ptr = &semaphores)
                {
                    CreateSemaphoresNV(n, semaphores_ptr);
                }
            }
            /// <inheritdoc cref="CreateStatesNV(int, uint*)"/>
            public static unsafe void CreateStatesNV(int n, Span<uint> states)
            {
                fixed (uint* states_ptr = states)
                {
                    CreateStatesNV(n, states_ptr);
                }
            }
            /// <inheritdoc cref="CreateStatesNV(int, uint*)"/>
            public static unsafe void CreateStatesNV(int n, uint[] states)
            {
                fixed (uint* states_ptr = states)
                {
                    CreateStatesNV(n, states_ptr);
                }
            }
            /// <inheritdoc cref="CreateStatesNV(int, uint*)"/>
            public static unsafe void CreateStatesNV(int n, ref uint states)
            {
                fixed (uint* states_ptr = &states)
                {
                    CreateStatesNV(n, states_ptr);
                }
            }
            /// <inheritdoc cref="DeleteCommandListsNV(int, uint*)"/>
            public static unsafe void DeleteCommandListsNV(int n, ReadOnlySpan<uint> lists)
            {
                fixed (uint* lists_ptr = lists)
                {
                    DeleteCommandListsNV(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="DeleteCommandListsNV(int, uint*)"/>
            public static unsafe void DeleteCommandListsNV(int n, uint[] lists)
            {
                fixed (uint* lists_ptr = lists)
                {
                    DeleteCommandListsNV(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="DeleteCommandListsNV(int, uint*)"/>
            public static unsafe void DeleteCommandListsNV(int n, ref readonly uint lists)
            {
                fixed (uint* lists_ptr = &lists)
                {
                    DeleteCommandListsNV(n, lists_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFencesNV(int, uint*)"/>
            public static unsafe void DeleteFencesNV(int n, ReadOnlySpan<uint> fences)
            {
                fixed (uint* fences_ptr = fences)
                {
                    DeleteFencesNV(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFencesNV(int, uint*)"/>
            public static unsafe void DeleteFencesNV(int n, uint[] fences)
            {
                fixed (uint* fences_ptr = fences)
                {
                    DeleteFencesNV(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteFencesNV(int, uint*)"/>
            public static unsafe void DeleteFencesNV(int n, ref readonly uint fences)
            {
                fixed (uint* fences_ptr = &fences)
                {
                    DeleteFencesNV(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="DeleteOcclusionQueriesNV(int, uint*)"/>
            public static unsafe void DeleteOcclusionQueriesNV(int n, ReadOnlySpan<uint> ids)
            {
                fixed (uint* ids_ptr = ids)
                {
                    DeleteOcclusionQueriesNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteOcclusionQueriesNV(int, uint*)"/>
            public static unsafe void DeleteOcclusionQueriesNV(int n, uint[] ids)
            {
                fixed (uint* ids_ptr = ids)
                {
                    DeleteOcclusionQueriesNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteOcclusionQueriesNV(int, uint*)"/>
            public static unsafe void DeleteOcclusionQueriesNV(int n, ref readonly uint ids)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    DeleteOcclusionQueriesNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramsNV(int, int*)"/>
            public static unsafe void DeleteProgramsNV(int n, ReadOnlySpan<int> programs)
            {
                fixed (int* programs_ptr = programs)
                {
                    DeleteProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramsNV(int, int*)"/>
            public static unsafe void DeleteProgramsNV(int n, int[] programs)
            {
                fixed (int* programs_ptr = programs)
                {
                    DeleteProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeleteProgramsNV(int, int*)"/>
            public static unsafe void DeleteProgramsNV(int n, ref readonly int programs)
            {
                fixed (int* programs_ptr = &programs)
                {
                    DeleteProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueryResourceTagNV(int, int*)"/>
            public static unsafe void DeleteQueryResourceTagNV(int n, ReadOnlySpan<int> tagIds)
            {
                fixed (int* tagIds_ptr = tagIds)
                {
                    DeleteQueryResourceTagNV(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueryResourceTagNV(int, int*)"/>
            public static unsafe void DeleteQueryResourceTagNV(int n, int[] tagIds)
            {
                fixed (int* tagIds_ptr = tagIds)
                {
                    DeleteQueryResourceTagNV(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="DeleteQueryResourceTagNV(int, int*)"/>
            public static unsafe void DeleteQueryResourceTagNV(int n, ref readonly int tagIds)
            {
                fixed (int* tagIds_ptr = &tagIds)
                {
                    DeleteQueryResourceTagNV(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="DeleteStatesNV(int, uint*)"/>
            public static unsafe void DeleteStatesNV(int n, ReadOnlySpan<uint> states)
            {
                fixed (uint* states_ptr = states)
                {
                    DeleteStatesNV(n, states_ptr);
                }
            }
            /// <inheritdoc cref="DeleteStatesNV(int, uint*)"/>
            public static unsafe void DeleteStatesNV(int n, uint[] states)
            {
                fixed (uint* states_ptr = states)
                {
                    DeleteStatesNV(n, states_ptr);
                }
            }
            /// <inheritdoc cref="DeleteStatesNV(int, uint*)"/>
            public static unsafe void DeleteStatesNV(int n, ref readonly uint states)
            {
                fixed (uint* states_ptr = &states)
                {
                    DeleteStatesNV(n, states_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacksNV(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacksNV(int n, ReadOnlySpan<int> ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    DeleteTransformFeedbacksNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacksNV(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacksNV(int n, int[] ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    DeleteTransformFeedbacksNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DeleteTransformFeedbacksNV(int, int*)"/>
            public static unsafe void DeleteTransformFeedbacksNV(int n, ref readonly int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    DeleteTransformFeedbacksNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="DrawCommandsAddressNV(All, ulong*, int*, uint)"/>
            public static unsafe void DrawCommandsAddressNV(All primitiveMode, ReadOnlySpan<ulong> indirects, ReadOnlySpan<int> sizes, uint count)
            {
                fixed (int* sizes_ptr = sizes)
                {
                    fixed (ulong* indirects_ptr = indirects)
                    {
                        DrawCommandsAddressNV(primitiveMode, indirects_ptr, sizes_ptr, count);
                    }
                }
            }
            /// <inheritdoc cref="DrawCommandsAddressNV(All, ulong*, int*, uint)"/>
            public static unsafe void DrawCommandsAddressNV(All primitiveMode, ulong[] indirects, int[] sizes, uint count)
            {
                fixed (int* sizes_ptr = sizes)
                {
                    fixed (ulong* indirects_ptr = indirects)
                    {
                        DrawCommandsAddressNV(primitiveMode, indirects_ptr, sizes_ptr, count);
                    }
                }
            }
            /// <inheritdoc cref="DrawCommandsAddressNV(All, ulong*, int*, uint)"/>
            public static unsafe void DrawCommandsAddressNV(All primitiveMode, ref readonly ulong indirects, ref readonly int sizes, uint count)
            {
                fixed (ulong* indirects_ptr = &indirects)
                fixed (int* sizes_ptr = &sizes)
                {
                    DrawCommandsAddressNV(primitiveMode, indirects_ptr, sizes_ptr, count);
                }
            }
            /// <inheritdoc cref="DrawCommandsNV(All, uint, IntPtr*, int*, uint)"/>
            public static unsafe void DrawCommandsNV(All primitiveMode, uint buffer, ReadOnlySpan<IntPtr> indirects, ReadOnlySpan<int> sizes, uint count)
            {
                fixed (int* sizes_ptr = sizes)
                {
                    fixed (IntPtr* indirects_ptr = indirects)
                    {
                        DrawCommandsNV(primitiveMode, buffer, indirects_ptr, sizes_ptr, count);
                    }
                }
            }
            /// <inheritdoc cref="DrawCommandsNV(All, uint, IntPtr*, int*, uint)"/>
            public static unsafe void DrawCommandsNV(All primitiveMode, uint buffer, IntPtr[] indirects, int[] sizes, uint count)
            {
                fixed (int* sizes_ptr = sizes)
                {
                    fixed (IntPtr* indirects_ptr = indirects)
                    {
                        DrawCommandsNV(primitiveMode, buffer, indirects_ptr, sizes_ptr, count);
                    }
                }
            }
            /// <inheritdoc cref="DrawCommandsNV(All, uint, IntPtr*, int*, uint)"/>
            public static unsafe void DrawCommandsNV(All primitiveMode, uint buffer, ref readonly IntPtr indirects, ref readonly int sizes, uint count)
            {
                fixed (IntPtr* indirects_ptr = &indirects)
                fixed (int* sizes_ptr = &sizes)
                {
                    DrawCommandsNV(primitiveMode, buffer, indirects_ptr, sizes_ptr, count);
                }
            }
            /// <inheritdoc cref="DrawCommandsStatesAddressNV(ulong*, int*, uint*, uint*, uint)"/>
            public static unsafe void DrawCommandsStatesAddressNV(ReadOnlySpan<ulong> indirects, ReadOnlySpan<int> sizes, ReadOnlySpan<uint> states, ReadOnlySpan<uint> fbos, uint count)
            {
                fixed (uint* fbos_ptr = fbos)
                {
                    fixed (uint* states_ptr = states)
                    {
                        fixed (int* sizes_ptr = sizes)
                        {
                            fixed (ulong* indirects_ptr = indirects)
                            {
                                DrawCommandsStatesAddressNV(indirects_ptr, sizes_ptr, states_ptr, fbos_ptr, count);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="DrawCommandsStatesAddressNV(ulong*, int*, uint*, uint*, uint)"/>
            public static unsafe void DrawCommandsStatesAddressNV(ulong[] indirects, int[] sizes, uint[] states, uint[] fbos, uint count)
            {
                fixed (uint* fbos_ptr = fbos)
                {
                    fixed (uint* states_ptr = states)
                    {
                        fixed (int* sizes_ptr = sizes)
                        {
                            fixed (ulong* indirects_ptr = indirects)
                            {
                                DrawCommandsStatesAddressNV(indirects_ptr, sizes_ptr, states_ptr, fbos_ptr, count);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="DrawCommandsStatesAddressNV(ulong*, int*, uint*, uint*, uint)"/>
            public static unsafe void DrawCommandsStatesAddressNV(ref readonly ulong indirects, ref readonly int sizes, ref readonly uint states, ref readonly uint fbos, uint count)
            {
                fixed (ulong* indirects_ptr = &indirects)
                fixed (int* sizes_ptr = &sizes)
                fixed (uint* states_ptr = &states)
                fixed (uint* fbos_ptr = &fbos)
                {
                    DrawCommandsStatesAddressNV(indirects_ptr, sizes_ptr, states_ptr, fbos_ptr, count);
                }
            }
            /// <inheritdoc cref="DrawCommandsStatesNV(int, IntPtr*, int*, uint*, uint*, uint)"/>
            public static unsafe void DrawCommandsStatesNV(int buffer, ReadOnlySpan<IntPtr> indirects, ReadOnlySpan<int> sizes, ReadOnlySpan<uint> states, ReadOnlySpan<uint> fbos, uint count)
            {
                fixed (uint* fbos_ptr = fbos)
                {
                    fixed (uint* states_ptr = states)
                    {
                        fixed (int* sizes_ptr = sizes)
                        {
                            fixed (IntPtr* indirects_ptr = indirects)
                            {
                                DrawCommandsStatesNV(buffer, indirects_ptr, sizes_ptr, states_ptr, fbos_ptr, count);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="DrawCommandsStatesNV(int, IntPtr*, int*, uint*, uint*, uint)"/>
            public static unsafe void DrawCommandsStatesNV(int buffer, IntPtr[] indirects, int[] sizes, uint[] states, uint[] fbos, uint count)
            {
                fixed (uint* fbos_ptr = fbos)
                {
                    fixed (uint* states_ptr = states)
                    {
                        fixed (int* sizes_ptr = sizes)
                        {
                            fixed (IntPtr* indirects_ptr = indirects)
                            {
                                DrawCommandsStatesNV(buffer, indirects_ptr, sizes_ptr, states_ptr, fbos_ptr, count);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="DrawCommandsStatesNV(int, IntPtr*, int*, uint*, uint*, uint)"/>
            public static unsafe void DrawCommandsStatesNV(int buffer, ref readonly IntPtr indirects, ref readonly int sizes, ref readonly uint states, ref readonly uint fbos, uint count)
            {
                fixed (IntPtr* indirects_ptr = &indirects)
                fixed (int* sizes_ptr = &sizes)
                fixed (uint* states_ptr = &states)
                fixed (uint* fbos_ptr = &fbos)
                {
                    DrawCommandsStatesNV(buffer, indirects_ptr, sizes_ptr, states_ptr, fbos_ptr, count);
                }
            }
            /// <inheritdoc cref="ExecuteProgramNV(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ExecuteProgramNV(VertexAttribEnumNV target, uint id, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ExecuteProgramNV(target, id, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ExecuteProgramNV(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ExecuteProgramNV(VertexAttribEnumNV target, uint id, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ExecuteProgramNV(target, id, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ExecuteProgramNV(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ExecuteProgramNV(VertexAttribEnumNV target, uint id, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ExecuteProgramNV(target, id, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FogCoordhvNV(Half*)"/>
            public static unsafe void FogCoordhvNV(ref readonly Half fog)
            {
                fixed (Half* fog_ptr = &fog)
                {
                    FogCoordhvNV(fog_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferSampleLocationsfvNV(FramebufferTarget, uint, int, float*)"/>
            public static unsafe void FramebufferSampleLocationsfvNV(FramebufferTarget target, uint start, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    FramebufferSampleLocationsfvNV(target, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferSampleLocationsfvNV(FramebufferTarget, uint, int, float*)"/>
            public static unsafe void FramebufferSampleLocationsfvNV(FramebufferTarget target, uint start, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    FramebufferSampleLocationsfvNV(target, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="FramebufferSampleLocationsfvNV(FramebufferTarget, uint, int, float*)"/>
            public static unsafe void FramebufferSampleLocationsfvNV(FramebufferTarget target, uint start, int count, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    FramebufferSampleLocationsfvNV(target, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="GenFencesNV(int, uint*)"/>
            public static unsafe void GenFencesNV(int n, Span<uint> fences)
            {
                fixed (uint* fences_ptr = fences)
                {
                    GenFencesNV(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenFencesNV(int, uint*)"/>
            public static unsafe void GenFencesNV(int n, uint[] fences)
            {
                fixed (uint* fences_ptr = fences)
                {
                    GenFencesNV(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenFencesNV(int, uint*)"/>
            public static unsafe void GenFencesNV(int n, ref uint fences)
            {
                fixed (uint* fences_ptr = &fences)
                {
                    GenFencesNV(n, fences_ptr);
                }
            }
            /// <inheritdoc cref="GenOcclusionQueriesNV(int, uint*)"/>
            public static unsafe void GenOcclusionQueriesNV(int n, Span<uint> ids)
            {
                fixed (uint* ids_ptr = ids)
                {
                    GenOcclusionQueriesNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenOcclusionQueriesNV(int, uint*)"/>
            public static unsafe void GenOcclusionQueriesNV(int n, uint[] ids)
            {
                fixed (uint* ids_ptr = ids)
                {
                    GenOcclusionQueriesNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenOcclusionQueriesNV(int, uint*)"/>
            public static unsafe void GenOcclusionQueriesNV(int n, ref uint ids)
            {
                fixed (uint* ids_ptr = &ids)
                {
                    GenOcclusionQueriesNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramsNV(int, int*)"/>
            public static unsafe void GenProgramsNV(int n, Span<int> programs)
            {
                fixed (int* programs_ptr = programs)
                {
                    GenProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramsNV(int, int*)"/>
            public static unsafe void GenProgramsNV(int n, int[] programs)
            {
                fixed (int* programs_ptr = programs)
                {
                    GenProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenProgramsNV(int, int*)"/>
            public static unsafe void GenProgramsNV(int n, ref int programs)
            {
                fixed (int* programs_ptr = &programs)
                {
                    GenProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="GenQueryResourceTagNV(int, int*)"/>
            public static unsafe void GenQueryResourceTagNV(int n, Span<int> tagIds)
            {
                fixed (int* tagIds_ptr = tagIds)
                {
                    GenQueryResourceTagNV(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="GenQueryResourceTagNV(int, int*)"/>
            public static unsafe void GenQueryResourceTagNV(int n, int[] tagIds)
            {
                fixed (int* tagIds_ptr = tagIds)
                {
                    GenQueryResourceTagNV(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="GenQueryResourceTagNV(int, int*)"/>
            public static unsafe void GenQueryResourceTagNV(int n, ref int tagIds)
            {
                fixed (int* tagIds_ptr = &tagIds)
                {
                    GenQueryResourceTagNV(n, tagIds_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacksNV(int, int*)"/>
            public static unsafe void GenTransformFeedbacksNV(int n, Span<int> ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    GenTransformFeedbacksNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacksNV(int, int*)"/>
            public static unsafe void GenTransformFeedbacksNV(int n, int[] ids)
            {
                fixed (int* ids_ptr = ids)
                {
                    GenTransformFeedbacksNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GenTransformFeedbacksNV(int, int*)"/>
            public static unsafe void GenTransformFeedbacksNV(int n, ref int ids)
            {
                fixed (int* ids_ptr = &ids)
                {
                    GenTransformFeedbacksNV(n, ids_ptr);
                }
            }
            /// <inheritdoc cref="GetActiveVaryingNV(int, uint, int, int*, int*, All*, byte*)"/>
            public static unsafe string GetActiveVaryingNV(int program, uint index, int bufSize, out int length, out int size, out All type)
            {
                string name;
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (All* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
                return name;
            }
            /// <inheritdoc cref="GetActiveVaryingNV(int, uint, int, int*, int*, All*, byte*)"/>
            public static unsafe void GetActiveVaryingNV(int program, uint index, int bufSize, out int length, out int size, out All type, out string name)
            {
                fixed (int* length_ptr = &length)
                fixed (int* size_ptr = &size)
                fixed (All* type_ptr = &type)
                {
                    var name_ptr = (byte*)Marshal.AllocCoTaskMem(bufSize);
                    GetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name_ptr);
                    name = Marshal.PtrToStringUTF8((IntPtr)name_ptr)!;
                    Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameterui64vNV(BufferTarget, All, ulong*)"/>
            public static unsafe void GetBufferParameterui64vNV(BufferTarget target, All pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetBufferParameterui64vNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameterui64vNV(BufferTarget, All, ulong*)"/>
            public static unsafe void GetBufferParameterui64vNV(BufferTarget target, All pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetBufferParameterui64vNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetBufferParameterui64vNV(BufferTarget, All, ulong*)"/>
            public static unsafe ulong GetBufferParameterui64vNV(BufferTarget target, All pname)
            {
                ulong parameters;
                ulong* parameters_ptr = &parameters;
                {
                    GetBufferParameterui64vNV(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetBufferParameterui64vNV(BufferTarget, All, ulong*)"/>
            public static unsafe void GetBufferParameterui64vNV(BufferTarget target, All pname, out ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetBufferParameterui64vNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerInputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerInputParameterfvNV(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerInputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerInputParameterfvNV(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe float GetCombinerInputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetCombinerInputParameterfvNV(stage, portion, variable, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetCombinerInputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerInputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetCombinerInputParameterfvNV(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerInputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetCombinerInputParameterivNV(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerInputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetCombinerInputParameterivNV(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerInputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe int GetCombinerInputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetCombinerInputParameterivNV(stage, portion, variable, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetCombinerInputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerInputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetCombinerInputParameterivNV(stage, portion, variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerOutputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerOutputParameterfvNV(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerOutputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerOutputParameterfvNV(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, float*)"/>
            public static unsafe float GetCombinerOutputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetCombinerOutputParameterfvNV(stage, portion, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetCombinerOutputParameterfvNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerOutputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetCombinerOutputParameterfvNV(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerOutputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetCombinerOutputParameterivNV(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerOutputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetCombinerOutputParameterivNV(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerOutputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, int*)"/>
            public static unsafe int GetCombinerOutputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetCombinerOutputParameterivNV(stage, portion, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetCombinerOutputParameterivNV(CombinerStageNV, CombinerPortionNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetCombinerOutputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetCombinerOutputParameterivNV(stage, portion, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerStageParameterfvNV(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerStageParameterfvNV(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerStageParameterfvNV(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetCombinerStageParameterfvNV(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCombinerStageParameterfvNV(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe float GetCombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetCombinerStageParameterfvNV(stage, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetCombinerStageParameterfvNV(CombinerStageNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetCombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetCombinerStageParameterfvNV(stage, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetCoverageModulationTableNV(int, float*)"/>
            public static unsafe void GetCoverageModulationTableNV(int bufSize, Span<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    GetCoverageModulationTableNV(bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetCoverageModulationTableNV(int, float*)"/>
            public static unsafe void GetCoverageModulationTableNV(int bufSize, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    GetCoverageModulationTableNV(bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetCoverageModulationTableNV(int, float*)"/>
            public static unsafe void GetCoverageModulationTableNV(int bufSize, ref float v)
            {
                fixed (float* v_ptr = &v)
                {
                    GetCoverageModulationTableNV(bufSize, v_ptr);
                }
            }
            /// <inheritdoc cref="GetFenceivNV(uint, FenceParameterNameNV, int*)"/>
            public static unsafe void GetFenceivNV(uint fence, FenceParameterNameNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFenceivNV(fence, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFenceivNV(uint, FenceParameterNameNV, int*)"/>
            public static unsafe void GetFenceivNV(uint fence, FenceParameterNameNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFenceivNV(fence, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFenceivNV(uint, FenceParameterNameNV, int*)"/>
            public static unsafe int GetFenceivNV(uint fence, FenceParameterNameNV pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetFenceivNV(fence, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetFenceivNV(uint, FenceParameterNameNV, int*)"/>
            public static unsafe void GetFenceivNV(uint fence, FenceParameterNameNV pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFenceivNV(fence, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterfvNV(CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetFinalCombinerInputParameterfvNV(CombinerVariableNV variable, CombinerParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFinalCombinerInputParameterfvNV(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterfvNV(CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetFinalCombinerInputParameterfvNV(CombinerVariableNV variable, CombinerParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFinalCombinerInputParameterfvNV(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterfvNV(CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe float GetFinalCombinerInputParameterfvNV(CombinerVariableNV variable, CombinerParameterNV pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetFinalCombinerInputParameterfvNV(variable, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterfvNV(CombinerVariableNV, CombinerParameterNV, float*)"/>
            public static unsafe void GetFinalCombinerInputParameterfvNV(CombinerVariableNV variable, CombinerParameterNV pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetFinalCombinerInputParameterfvNV(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterivNV(CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetFinalCombinerInputParameterivNV(CombinerVariableNV variable, CombinerParameterNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFinalCombinerInputParameterivNV(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterivNV(CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetFinalCombinerInputParameterivNV(CombinerVariableNV variable, CombinerParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFinalCombinerInputParameterivNV(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterivNV(CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe int GetFinalCombinerInputParameterivNV(CombinerVariableNV variable, CombinerParameterNV pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetFinalCombinerInputParameterivNV(variable, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetFinalCombinerInputParameterivNV(CombinerVariableNV, CombinerParameterNV, int*)"/>
            public static unsafe void GetFinalCombinerInputParameterivNV(CombinerVariableNV variable, CombinerParameterNV pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFinalCombinerInputParameterivNV(variable, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64i_vNV(All, uint, ulong*)"/>
            public static unsafe void GetIntegerui64i_vNV(All value, uint index, Span<ulong> result)
            {
                fixed (ulong* result_ptr = result)
                {
                    GetIntegerui64i_vNV(value, index, result_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64i_vNV(All, uint, ulong*)"/>
            public static unsafe void GetIntegerui64i_vNV(All value, uint index, ulong[] result)
            {
                fixed (ulong* result_ptr = result)
                {
                    GetIntegerui64i_vNV(value, index, result_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64i_vNV(All, uint, ulong*)"/>
            public static unsafe ulong GetIntegerui64i_vNV(All value, uint index)
            {
                ulong result;
                ulong* result_ptr = &result;
                {
                    GetIntegerui64i_vNV(value, index, result_ptr);
                }
                return result;
            }
            /// <inheritdoc cref="GetIntegerui64i_vNV(All, uint, ulong*)"/>
            public static unsafe void GetIntegerui64i_vNV(All value, uint index, out ulong result)
            {
                fixed (ulong* result_ptr = &result)
                {
                    GetIntegerui64i_vNV(value, index, result_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64vNV(All, ulong*)"/>
            public static unsafe void GetIntegerui64vNV(All value, Span<ulong> result)
            {
                fixed (ulong* result_ptr = result)
                {
                    GetIntegerui64vNV(value, result_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64vNV(All, ulong*)"/>
            public static unsafe void GetIntegerui64vNV(All value, ulong[] result)
            {
                fixed (ulong* result_ptr = result)
                {
                    GetIntegerui64vNV(value, result_ptr);
                }
            }
            /// <inheritdoc cref="GetIntegerui64vNV(All, ulong*)"/>
            public static unsafe ulong GetIntegerui64vNV(All value)
            {
                ulong result;
                ulong* result_ptr = &result;
                {
                    GetIntegerui64vNV(value, result_ptr);
                }
                return result;
            }
            /// <inheritdoc cref="GetIntegerui64vNV(All, ulong*)"/>
            public static unsafe void GetIntegerui64vNV(All value, out ulong result)
            {
                fixed (ulong* result_ptr = &result)
                {
                    GetIntegerui64vNV(value, result_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformatSampleivNV(TextureTarget, InternalFormat, int, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformatSampleivNV(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, int count, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetInternalformatSampleivNV(target, internalformat, samples, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformatSampleivNV(TextureTarget, InternalFormat, int, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformatSampleivNV(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, int count, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetInternalformatSampleivNV(target, internalformat, samples, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetInternalformatSampleivNV(TextureTarget, InternalFormat, int, InternalFormatPName, int, int*)"/>
            public static unsafe void GetInternalformatSampleivNV(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, int count, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetInternalformatSampleivNV(target, internalformat, samples, pname, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameterfvNV(EvalTargetNV, uint, MapAttribParameterNV, float*)"/>
            public static unsafe void GetMapAttribParameterfvNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMapAttribParameterfvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameterfvNV(EvalTargetNV, uint, MapAttribParameterNV, float*)"/>
            public static unsafe void GetMapAttribParameterfvNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMapAttribParameterfvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameterfvNV(EvalTargetNV, uint, MapAttribParameterNV, float*)"/>
            public static unsafe float GetMapAttribParameterfvNV(EvalTargetNV target, uint index, MapAttribParameterNV pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetMapAttribParameterfvNV(target, index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMapAttribParameterfvNV(EvalTargetNV, uint, MapAttribParameterNV, float*)"/>
            public static unsafe void GetMapAttribParameterfvNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMapAttribParameterfvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameterivNV(EvalTargetNV, uint, MapAttribParameterNV, int*)"/>
            public static unsafe void GetMapAttribParameterivNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMapAttribParameterivNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameterivNV(EvalTargetNV, uint, MapAttribParameterNV, int*)"/>
            public static unsafe void GetMapAttribParameterivNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMapAttribParameterivNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapAttribParameterivNV(EvalTargetNV, uint, MapAttribParameterNV, int*)"/>
            public static unsafe int GetMapAttribParameterivNV(EvalTargetNV target, uint index, MapAttribParameterNV pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetMapAttribParameterivNV(target, index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMapAttribParameterivNV(EvalTargetNV, uint, MapAttribParameterNV, int*)"/>
            public static unsafe void GetMapAttribParameterivNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMapAttribParameterivNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, bool, void*)"/>
            public static unsafe void GetMapControlPointsNV(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, IntPtr points)
            {
                void* points_vptr = (void*)points;
                GetMapControlPointsNV(target, index, type, ustride, vstride, packed, points_vptr);
            }
            /// <inheritdoc cref="GetMapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, bool, void*)"/>
            public static unsafe void GetMapControlPointsNV<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, Span<T1> points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = points)
                {
                    GetMapControlPointsNV(target, index, type, ustride, vstride, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="GetMapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, bool, void*)"/>
            public static unsafe void GetMapControlPointsNV<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, T1[] points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = points)
                {
                    GetMapControlPointsNV(target, index, type, ustride, vstride, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="GetMapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, bool, void*)"/>
            public static unsafe T1 GetMapControlPointsNV<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed)
                where T1 : unmanaged
            {
                T1 points;
                void* points_ptr = &points;
                {
                    GetMapControlPointsNV(target, index, type, ustride, vstride, packed, points_ptr);
                }
                return points;
            }
            /// <inheritdoc cref="GetMapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, bool, void*)"/>
            public static unsafe void GetMapControlPointsNV<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, out T1 points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = &points)
                {
                    GetMapControlPointsNV(target, index, type, ustride, vstride, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterfvNV(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void GetMapParameterfvNV(EvalTargetNV target, MapParameterNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMapParameterfvNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterfvNV(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void GetMapParameterfvNV(EvalTargetNV target, MapParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetMapParameterfvNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterfvNV(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe float GetMapParameterfvNV(EvalTargetNV target, MapParameterNV pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetMapParameterfvNV(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMapParameterfvNV(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void GetMapParameterfvNV(EvalTargetNV target, MapParameterNV pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetMapParameterfvNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterivNV(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void GetMapParameterivNV(EvalTargetNV target, MapParameterNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMapParameterivNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterivNV(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void GetMapParameterivNV(EvalTargetNV target, MapParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMapParameterivNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapParameterivNV(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe int GetMapParameterivNV(EvalTargetNV target, MapParameterNV pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetMapParameterivNV(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMapParameterivNV(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void GetMapParameterivNV(EvalTargetNV target, MapParameterNV pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMapParameterivNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMemoryObjectDetachedResourcesuivNV(uint, All, int, int, uint*)"/>
            public static unsafe void GetMemoryObjectDetachedResourcesuivNV(uint memory, All pname, int first, int count, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMemoryObjectDetachedResourcesuivNV(uint, All, int, int, uint*)"/>
            public static unsafe void GetMemoryObjectDetachedResourcesuivNV(uint memory, All pname, int first, int count, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMemoryObjectDetachedResourcesuivNV(uint, All, int, int, uint*)"/>
            public static unsafe void GetMemoryObjectDetachedResourcesuivNV(uint memory, All pname, int first, int count, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefvNV(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplefvNV(GetMultisamplePNameNV pname, uint index, Span<float> val)
            {
                fixed (float* val_ptr = val)
                {
                    GetMultisamplefvNV(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefvNV(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplefvNV(GetMultisamplePNameNV pname, uint index, float[] val)
            {
                fixed (float* val_ptr = val)
                {
                    GetMultisamplefvNV(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetMultisamplefvNV(GetMultisamplePNameNV, uint, float*)"/>
            public static unsafe void GetMultisamplefvNV(GetMultisamplePNameNV pname, uint index, ref float val)
            {
                fixed (float* val_ptr = &val)
                {
                    GetMultisamplefvNV(pname, index, val_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameterui64vNV(int, BufferPName, ulong*)"/>
            public static unsafe void GetNamedBufferParameterui64vNV(int buffer, BufferPName pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetNamedBufferParameterui64vNV(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameterui64vNV(int, BufferPName, ulong*)"/>
            public static unsafe void GetNamedBufferParameterui64vNV(int buffer, BufferPName pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetNamedBufferParameterui64vNV(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetNamedBufferParameterui64vNV(int, BufferPName, ulong*)"/>
            public static unsafe ulong GetNamedBufferParameterui64vNV(int buffer, BufferPName pname)
            {
                ulong parameters;
                ulong* parameters_ptr = &parameters;
                {
                    GetNamedBufferParameterui64vNV(buffer, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetNamedBufferParameterui64vNV(int, BufferPName, ulong*)"/>
            public static unsafe void GetNamedBufferParameterui64vNV(int buffer, BufferPName pname, out ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetNamedBufferParameterui64vNV(buffer, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryivNV(uint, OcclusionQueryParameterNameNV, int*)"/>
            public static unsafe void GetOcclusionQueryivNV(uint id, OcclusionQueryParameterNameNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetOcclusionQueryivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryivNV(uint, OcclusionQueryParameterNameNV, int*)"/>
            public static unsafe void GetOcclusionQueryivNV(uint id, OcclusionQueryParameterNameNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetOcclusionQueryivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryivNV(uint, OcclusionQueryParameterNameNV, int*)"/>
            public static unsafe int GetOcclusionQueryivNV(uint id, OcclusionQueryParameterNameNV pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetOcclusionQueryivNV(id, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetOcclusionQueryivNV(uint, OcclusionQueryParameterNameNV, int*)"/>
            public static unsafe void GetOcclusionQueryivNV(uint id, OcclusionQueryParameterNameNV pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetOcclusionQueryivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryuivNV(uint, OcclusionQueryParameterNameNV, uint*)"/>
            public static unsafe void GetOcclusionQueryuivNV(uint id, OcclusionQueryParameterNameNV pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetOcclusionQueryuivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryuivNV(uint, OcclusionQueryParameterNameNV, uint*)"/>
            public static unsafe void GetOcclusionQueryuivNV(uint id, OcclusionQueryParameterNameNV pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetOcclusionQueryuivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetOcclusionQueryuivNV(uint, OcclusionQueryParameterNameNV, uint*)"/>
            public static unsafe uint GetOcclusionQueryuivNV(uint id, OcclusionQueryParameterNameNV pname)
            {
                uint parameters;
                uint* parameters_ptr = &parameters;
                {
                    GetOcclusionQueryuivNV(id, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetOcclusionQueryuivNV(uint, OcclusionQueryParameterNameNV, uint*)"/>
            public static unsafe void GetOcclusionQueryuivNV(uint id, OcclusionQueryParameterNameNV pname, out uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetOcclusionQueryuivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGenfvNV(PathColor, PathGenMode, float*)"/>
            public static unsafe void GetPathColorGenfvNV(PathColor color, PathGenMode pname, Span<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathColorGenfvNV(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGenfvNV(PathColor, PathGenMode, float*)"/>
            public static unsafe void GetPathColorGenfvNV(PathColor color, PathGenMode pname, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathColorGenfvNV(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGenfvNV(PathColor, PathGenMode, float*)"/>
            public static unsafe float GetPathColorGenfvNV(PathColor color, PathGenMode pname)
            {
                float value;
                float* value_ptr = &value;
                {
                    GetPathColorGenfvNV(color, pname, value_ptr);
                }
                return value;
            }
            /// <inheritdoc cref="GetPathColorGenfvNV(PathColor, PathGenMode, float*)"/>
            public static unsafe void GetPathColorGenfvNV(PathColor color, PathGenMode pname, out float value)
            {
                fixed (float* value_ptr = &value)
                {
                    GetPathColorGenfvNV(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGenivNV(PathColor, PathGenMode, int*)"/>
            public static unsafe void GetPathColorGenivNV(PathColor color, PathGenMode pname, Span<int> value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathColorGenivNV(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGenivNV(PathColor, PathGenMode, int*)"/>
            public static unsafe void GetPathColorGenivNV(PathColor color, PathGenMode pname, int[] value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathColorGenivNV(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathColorGenivNV(PathColor, PathGenMode, int*)"/>
            public static unsafe int GetPathColorGenivNV(PathColor color, PathGenMode pname)
            {
                int value;
                int* value_ptr = &value;
                {
                    GetPathColorGenivNV(color, pname, value_ptr);
                }
                return value;
            }
            /// <inheritdoc cref="GetPathColorGenivNV(PathColor, PathGenMode, int*)"/>
            public static unsafe void GetPathColorGenivNV(PathColor color, PathGenMode pname, out int value)
            {
                fixed (int* value_ptr = &value)
                {
                    GetPathColorGenivNV(color, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCommandsNV(uint, byte*)"/>
            public static unsafe void GetPathCommandsNV(uint path, Span<byte> commands)
            {
                fixed (byte* commands_ptr = commands)
                {
                    GetPathCommandsNV(path, commands_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCommandsNV(uint, byte*)"/>
            public static unsafe void GetPathCommandsNV(uint path, byte[] commands)
            {
                fixed (byte* commands_ptr = commands)
                {
                    GetPathCommandsNV(path, commands_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCommandsNV(uint, byte*)"/>
            public static unsafe byte GetPathCommandsNV(uint path)
            {
                byte commands;
                byte* commands_ptr = &commands;
                {
                    GetPathCommandsNV(path, commands_ptr);
                }
                return commands;
            }
            /// <inheritdoc cref="GetPathCommandsNV(uint, byte*)"/>
            public static unsafe void GetPathCommandsNV(uint path, out byte commands)
            {
                fixed (byte* commands_ptr = &commands)
                {
                    GetPathCommandsNV(path, commands_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCoordsNV(uint, float*)"/>
            public static unsafe void GetPathCoordsNV(uint path, Span<float> coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    GetPathCoordsNV(path, coords_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCoordsNV(uint, float*)"/>
            public static unsafe void GetPathCoordsNV(uint path, float[] coords)
            {
                fixed (float* coords_ptr = coords)
                {
                    GetPathCoordsNV(path, coords_ptr);
                }
            }
            /// <inheritdoc cref="GetPathCoordsNV(uint, float*)"/>
            public static unsafe float GetPathCoordsNV(uint path)
            {
                float coords;
                float* coords_ptr = &coords;
                {
                    GetPathCoordsNV(path, coords_ptr);
                }
                return coords;
            }
            /// <inheritdoc cref="GetPathCoordsNV(uint, float*)"/>
            public static unsafe void GetPathCoordsNV(uint path, out float coords)
            {
                fixed (float* coords_ptr = &coords)
                {
                    GetPathCoordsNV(path, coords_ptr);
                }
            }
            /// <inheritdoc cref="GetPathDashArrayNV(uint, float*)"/>
            public static unsafe void GetPathDashArrayNV(uint path, Span<float> dashArray)
            {
                fixed (float* dashArray_ptr = dashArray)
                {
                    GetPathDashArrayNV(path, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="GetPathDashArrayNV(uint, float*)"/>
            public static unsafe void GetPathDashArrayNV(uint path, float[] dashArray)
            {
                fixed (float* dashArray_ptr = dashArray)
                {
                    GetPathDashArrayNV(path, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="GetPathDashArrayNV(uint, float*)"/>
            public static unsafe float GetPathDashArrayNV(uint path)
            {
                float dashArray;
                float* dashArray_ptr = &dashArray;
                {
                    GetPathDashArrayNV(path, dashArray_ptr);
                }
                return dashArray;
            }
            /// <inheritdoc cref="GetPathDashArrayNV(uint, float*)"/>
            public static unsafe void GetPathDashArrayNV(uint path, out float dashArray)
            {
                fixed (float* dashArray_ptr = &dashArray)
                {
                    GetPathDashArrayNV(path, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricRangeNV(PathMetricMask, uint, int, int, float*)"/>
            public static unsafe void GetPathMetricRangeNV(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, Span<float> metrics)
            {
                fixed (float* metrics_ptr = metrics)
                {
                    GetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricRangeNV(PathMetricMask, uint, int, int, float*)"/>
            public static unsafe void GetPathMetricRangeNV(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, float[] metrics)
            {
                fixed (float* metrics_ptr = metrics)
                {
                    GetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricRangeNV(PathMetricMask, uint, int, int, float*)"/>
            public static unsafe float GetPathMetricRangeNV(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride)
            {
                float metrics;
                float* metrics_ptr = &metrics;
                {
                    GetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics_ptr);
                }
                return metrics;
            }
            /// <inheritdoc cref="GetPathMetricRangeNV(PathMetricMask, uint, int, int, float*)"/>
            public static unsafe void GetPathMetricRangeNV(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, out float metrics)
            {
                fixed (float* metrics_ptr = &metrics)
                {
                    GetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetricsNV(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride, Span<float> metrics)
            {
                fixed (float* metrics_ptr = metrics)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_vptr, pathBase, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetricsNV(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride, float[] metrics)
            {
                fixed (float* metrics_ptr = metrics)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_vptr, pathBase, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe float GetPathMetricsNV(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride)
            {
                float metrics;
                float* metrics_ptr = &metrics;
                {
                    void* paths_vptr = (void*)paths;
                    GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_vptr, pathBase, stride, metrics_ptr);
                }
                return metrics;
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetricsNV(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride, out float metrics)
            {
                fixed (float* metrics_ptr = &metrics)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_vptr, pathBase, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetricsNV<T1>(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, int stride, Span<float> metrics)
                where T1 : unmanaged
            {
                fixed (float* metrics_ptr = metrics)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetricsNV<T1>(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, int stride, float[] metrics)
                where T1 : unmanaged
            {
                fixed (float* metrics_ptr = metrics)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe float GetPathMetricsNV<T1>(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, ref readonly T1 paths, uint pathBase, int stride)
                where T1 : unmanaged
            {
                float metrics;
                float* metrics_ptr = &metrics;
                fixed (void* paths_ptr = &paths)
                {
                    GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics_ptr);
                }
                return metrics;
            }
            /// <inheritdoc cref="GetPathMetricsNV(PathMetricMask, int, PathElementType, void*, uint, int, float*)"/>
            public static unsafe void GetPathMetricsNV<T1>(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, ref readonly T1 paths, uint pathBase, int stride, out float metrics)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* metrics_ptr = &metrics)
                {
                    GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths_ptr, pathBase, stride, metrics_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameterfvNV(uint, PathParameter, float*)"/>
            public static unsafe void GetPathParameterfvNV(uint path, PathParameter pname, Span<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathParameterfvNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameterfvNV(uint, PathParameter, float*)"/>
            public static unsafe void GetPathParameterfvNV(uint path, PathParameter pname, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathParameterfvNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameterfvNV(uint, PathParameter, float*)"/>
            public static unsafe void GetPathParameterfvNV(uint path, PathParameter pname, ref float value)
            {
                fixed (float* value_ptr = &value)
                {
                    GetPathParameterfvNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameterivNV(uint, PathParameter, int*)"/>
            public static unsafe void GetPathParameterivNV(uint path, PathParameter pname, Span<int> value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathParameterivNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameterivNV(uint, PathParameter, int*)"/>
            public static unsafe void GetPathParameterivNV(uint path, PathParameter pname, int[] value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathParameterivNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathParameterivNV(uint, PathParameter, int*)"/>
            public static unsafe void GetPathParameterivNV(uint path, PathParameter pname, ref int value)
            {
                fixed (int* value_ptr = &value)
                {
                    GetPathParameterivNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, Span<float> returnedSpacing)
            {
                fixed (float* returnedSpacing_ptr = returnedSpacing)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_vptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, float[] returnedSpacing)
            {
                fixed (float* returnedSpacing_ptr = returnedSpacing)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_vptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe float GetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType)
            {
                float returnedSpacing;
                float* returnedSpacing_ptr = &returnedSpacing;
                {
                    void* paths_vptr = (void*)paths;
                    GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_vptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
                return returnedSpacing;
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, out float returnedSpacing)
            {
                fixed (float* returnedSpacing_ptr = &returnedSpacing)
                {
                    void* paths_vptr = (void*)paths;
                    GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_vptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacingNV<T1>(PathListMode pathListMode, int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, Span<float> returnedSpacing)
                where T1 : unmanaged
            {
                fixed (float* returnedSpacing_ptr = returnedSpacing)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacingNV<T1>(PathListMode pathListMode, int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, float[] returnedSpacing)
                where T1 : unmanaged
            {
                fixed (float* returnedSpacing_ptr = returnedSpacing)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe float GetPathSpacingNV<T1>(PathListMode pathListMode, int numPaths, PathElementType pathNameType, ref readonly T1 paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType)
                where T1 : unmanaged
            {
                float returnedSpacing;
                float* returnedSpacing_ptr = &returnedSpacing;
                fixed (void* paths_ptr = &paths)
                {
                    GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
                return returnedSpacing;
            }
            /// <inheritdoc cref="GetPathSpacingNV(PathListMode, int, PathElementType, void*, uint, float, float, PathTransformType, float*)"/>
            public static unsafe void GetPathSpacingNV<T1>(PathListMode pathListMode, int numPaths, PathElementType pathNameType, ref readonly T1 paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, out float returnedSpacing)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* returnedSpacing_ptr = &returnedSpacing)
                {
                    GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths_ptr, pathBase, advanceScale, kerningScale, transformType, returnedSpacing_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGenfvNV(TextureUnit, PathGenMode, float*)"/>
            public static unsafe void GetPathTexGenfvNV(TextureUnit texCoordSet, PathGenMode pname, Span<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathTexGenfvNV(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGenfvNV(TextureUnit, PathGenMode, float*)"/>
            public static unsafe void GetPathTexGenfvNV(TextureUnit texCoordSet, PathGenMode pname, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    GetPathTexGenfvNV(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGenfvNV(TextureUnit, PathGenMode, float*)"/>
            public static unsafe float GetPathTexGenfvNV(TextureUnit texCoordSet, PathGenMode pname)
            {
                float value;
                float* value_ptr = &value;
                {
                    GetPathTexGenfvNV(texCoordSet, pname, value_ptr);
                }
                return value;
            }
            /// <inheritdoc cref="GetPathTexGenfvNV(TextureUnit, PathGenMode, float*)"/>
            public static unsafe void GetPathTexGenfvNV(TextureUnit texCoordSet, PathGenMode pname, out float value)
            {
                fixed (float* value_ptr = &value)
                {
                    GetPathTexGenfvNV(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGenivNV(TextureUnit, PathGenMode, int*)"/>
            public static unsafe void GetPathTexGenivNV(TextureUnit texCoordSet, PathGenMode pname, Span<int> value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathTexGenivNV(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGenivNV(TextureUnit, PathGenMode, int*)"/>
            public static unsafe void GetPathTexGenivNV(TextureUnit texCoordSet, PathGenMode pname, int[] value)
            {
                fixed (int* value_ptr = value)
                {
                    GetPathTexGenivNV(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetPathTexGenivNV(TextureUnit, PathGenMode, int*)"/>
            public static unsafe int GetPathTexGenivNV(TextureUnit texCoordSet, PathGenMode pname)
            {
                int value;
                int* value_ptr = &value;
                {
                    GetPathTexGenivNV(texCoordSet, pname, value_ptr);
                }
                return value;
            }
            /// <inheritdoc cref="GetPathTexGenivNV(TextureUnit, PathGenMode, int*)"/>
            public static unsafe void GetPathTexGenivNV(TextureUnit texCoordSet, PathGenMode pname, out int value)
            {
                fixed (int* value_ptr = &value)
                {
                    GetPathTexGenivNV(texCoordSet, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramEnvParameterIivNV(ProgramTarget target, uint index, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterIivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramEnvParameterIivNV(ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterIivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramEnvParameterIivNV(ProgramTarget target, uint index, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramEnvParameterIivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIuivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramEnvParameterIuivNV(ProgramTarget target, uint index, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterIuivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIuivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramEnvParameterIuivNV(ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetProgramEnvParameterIuivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramEnvParameterIuivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramEnvParameterIuivNV(ProgramTarget target, uint index, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetProgramEnvParameterIuivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramivNV(int, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetProgramivNV(int id, VertexAttribEnumNV pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramivNV(int, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetProgramivNV(int id, VertexAttribEnumNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramivNV(int, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetProgramivNV(int id, VertexAttribEnumNV pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramivNV(id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramLocalParameterIivNV(ProgramTarget target, uint index, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterIivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramLocalParameterIivNV(ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterIivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void GetProgramLocalParameterIivNV(ProgramTarget target, uint index, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetProgramLocalParameterIivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIuivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramLocalParameterIuivNV(ProgramTarget target, uint index, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterIuivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIuivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramLocalParameterIuivNV(ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetProgramLocalParameterIuivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramLocalParameterIuivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void GetProgramLocalParameterIuivNV(ProgramTarget target, uint index, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetProgramLocalParameterIuivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterdvNV(int, int, byte*, double*)"/>
            public static unsafe void GetProgramNamedParameterdvNV(int id, int len, ref readonly byte name, Span<double> parameters)
            {
                fixed (byte* name_ptr = &name)
                {
                    fixed (double* parameters_ptr = parameters)
                    {
                        GetProgramNamedParameterdvNV(id, len, name_ptr, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterdvNV(int, int, byte*, double*)"/>
            public static unsafe void GetProgramNamedParameterdvNV(int id, int len, ref readonly byte name, double[] parameters)
            {
                fixed (byte* name_ptr = &name)
                {
                    fixed (double* parameters_ptr = parameters)
                    {
                        GetProgramNamedParameterdvNV(id, len, name_ptr, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterdvNV(int, int, byte*, double*)"/>
            public static unsafe void GetProgramNamedParameterdvNV(int id, int len, ref readonly byte name, ref double parameters)
            {
                fixed (byte* name_ptr = &name)
                fixed (double* parameters_ptr = &parameters)
                {
                    GetProgramNamedParameterdvNV(id, len, name_ptr, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterfvNV(int, int, byte*, float*)"/>
            public static unsafe void GetProgramNamedParameterfvNV(int id, int len, ref readonly byte name, Span<float> parameters)
            {
                fixed (byte* name_ptr = &name)
                {
                    fixed (float* parameters_ptr = parameters)
                    {
                        GetProgramNamedParameterfvNV(id, len, name_ptr, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterfvNV(int, int, byte*, float*)"/>
            public static unsafe void GetProgramNamedParameterfvNV(int id, int len, ref readonly byte name, float[] parameters)
            {
                fixed (byte* name_ptr = &name)
                {
                    fixed (float* parameters_ptr = parameters)
                    {
                        GetProgramNamedParameterfvNV(id, len, name_ptr, parameters_ptr);
                    }
                }
            }
            /// <inheritdoc cref="GetProgramNamedParameterfvNV(int, int, byte*, float*)"/>
            public static unsafe void GetProgramNamedParameterfvNV(int id, int len, ref readonly byte name, ref float parameters)
            {
                fixed (byte* name_ptr = &name)
                fixed (float* parameters_ptr = &parameters)
                {
                    GetProgramNamedParameterfvNV(id, len, name_ptr, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterdvNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetProgramParameterdvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramParameterdvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterdvNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetProgramParameterdvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetProgramParameterdvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterdvNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetProgramParameterdvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, ref double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetProgramParameterdvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterfvNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetProgramParameterfvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramParameterfvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterfvNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetProgramParameterfvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetProgramParameterfvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramParameterfvNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetProgramParameterfvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, ref float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetProgramParameterfvNV(target, index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramResourcefvNV(int, ProgramInterface, uint, int, All*, int, int*, float*)"/>
            public static unsafe void GetProgramResourcefvNV(int program, ProgramInterface programInterface, uint index, int propCount, ReadOnlySpan<All> props, int count, out int length, Span<float> parameters)
            {
                fixed (int* length_ptr = &length)
                {
                    fixed (float* parameters_ptr = parameters)
                    {
                        fixed (All* props_ptr = props)
                        {
                            GetProgramResourcefvNV(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramResourcefvNV(int, ProgramInterface, uint, int, All*, int, int*, float*)"/>
            public static unsafe void GetProgramResourcefvNV(int program, ProgramInterface programInterface, uint index, int propCount, All[] props, int count, out int length, float[] parameters)
            {
                fixed (int* length_ptr = &length)
                {
                    fixed (float* parameters_ptr = parameters)
                    {
                        fixed (All* props_ptr = props)
                        {
                            GetProgramResourcefvNV(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="GetProgramResourcefvNV(int, ProgramInterface, uint, int, All*, int, int*, float*)"/>
            public static unsafe void GetProgramResourcefvNV(int program, ProgramInterface programInterface, uint index, int propCount, ref readonly All props, int count, out int length, ref float parameters)
            {
                fixed (All* props_ptr = &props)
                fixed (int* length_ptr = &length)
                fixed (float* parameters_ptr = &parameters)
                {
                    GetProgramResourcefvNV(program, programInterface, index, propCount, props_ptr, count, length_ptr, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramStringNV(int, VertexAttribEnumNV, byte*)"/>
            public static unsafe void GetProgramStringNV(int id, VertexAttribEnumNV pname, string program)
            {
                byte* program_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(program);
                GetProgramStringNV(id, pname, program_ptr);
                Marshal.FreeCoTaskMem((IntPtr)program_ptr);
            }
            /// <inheritdoc cref="GetProgramSubroutineParameteruivNV(All, uint, uint*)"/>
            public static unsafe void GetProgramSubroutineParameteruivNV(All target, uint index, Span<uint> param)
            {
                fixed (uint* param_ptr = param)
                {
                    GetProgramSubroutineParameteruivNV(target, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramSubroutineParameteruivNV(All, uint, uint*)"/>
            public static unsafe void GetProgramSubroutineParameteruivNV(All target, uint index, uint[] param)
            {
                fixed (uint* param_ptr = param)
                {
                    GetProgramSubroutineParameteruivNV(target, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetProgramSubroutineParameteruivNV(All, uint, uint*)"/>
            public static unsafe uint GetProgramSubroutineParameteruivNV(All target, uint index)
            {
                uint param;
                uint* param_ptr = &param;
                {
                    GetProgramSubroutineParameteruivNV(target, index, param_ptr);
                }
                return param;
            }
            /// <inheritdoc cref="GetProgramSubroutineParameteruivNV(All, uint, uint*)"/>
            public static unsafe void GetProgramSubroutineParameteruivNV(All target, uint index, out uint param)
            {
                fixed (uint* param_ptr = &param)
                {
                    GetProgramSubroutineParameteruivNV(target, index, param_ptr);
                }
            }
            /// <inheritdoc cref="GetSemaphoreParameterivNV(uint, SemaphoreParameterName, int*)"/>
            public static unsafe void GetSemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetSemaphoreParameterivNV(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSemaphoreParameterivNV(uint, SemaphoreParameterName, int*)"/>
            public static unsafe void GetSemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetSemaphoreParameterivNV(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSemaphoreParameterivNV(uint, SemaphoreParameterName, int*)"/>
            public static unsafe void GetSemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetSemaphoreParameterivNV(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateImagePaletteNV(uint, uint, All*)"/>
            public static unsafe All GetShadingRateImagePaletteNV(uint viewport, uint entry)
            {
                All rate;
                All* rate_ptr = &rate;
                {
                    GetShadingRateImagePaletteNV(viewport, entry, rate_ptr);
                }
                return rate;
            }
            /// <inheritdoc cref="GetShadingRateImagePaletteNV(uint, uint, All*)"/>
            public static unsafe void GetShadingRateImagePaletteNV(uint viewport, uint entry, out All rate)
            {
                fixed (All* rate_ptr = &rate)
                {
                    GetShadingRateImagePaletteNV(viewport, entry, rate_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateSampleLocationivNV(All, uint, uint, int*)"/>
            public static unsafe void GetShadingRateSampleLocationivNV(All rate, uint samples, uint index, Span<int> location)
            {
                fixed (int* location_ptr = location)
                {
                    GetShadingRateSampleLocationivNV(rate, samples, index, location_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateSampleLocationivNV(All, uint, uint, int*)"/>
            public static unsafe void GetShadingRateSampleLocationivNV(All rate, uint samples, uint index, int[] location)
            {
                fixed (int* location_ptr = location)
                {
                    GetShadingRateSampleLocationivNV(rate, samples, index, location_ptr);
                }
            }
            /// <inheritdoc cref="GetShadingRateSampleLocationivNV(All, uint, uint, int*)"/>
            public static unsafe void GetShadingRateSampleLocationivNV(All rate, uint samples, uint index, ref int location)
            {
                fixed (int* location_ptr = &location)
                {
                    GetShadingRateSampleLocationivNV(rate, samples, index, location_ptr);
                }
            }
            /// <inheritdoc cref="GetTrackMatrixivNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, int*)"/>
            public static unsafe int GetTrackMatrixivNV(VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetTrackMatrixivNV(target, address, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetTrackMatrixivNV(VertexAttribEnumNV, uint, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetTrackMatrixivNV(VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTrackMatrixivNV(target, address, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTransformFeedbackVaryingNV(int, uint, int*)"/>
            public static unsafe int GetTransformFeedbackVaryingNV(int program, uint index)
            {
                int location;
                int* location_ptr = &location;
                {
                    GetTransformFeedbackVaryingNV(program, index, location_ptr);
                }
                return location;
            }
            /// <inheritdoc cref="GetTransformFeedbackVaryingNV(int, uint, int*)"/>
            public static unsafe void GetTransformFeedbackVaryingNV(int program, uint index, out int location)
            {
                fixed (int* location_ptr = &location)
                {
                    GetTransformFeedbackVaryingNV(program, index, location_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe void GetUniformi64vNV(int program, int location, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe void GetUniformi64vNV(int program, int location, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe long GetUniformi64vNV(int program, int location)
            {
                long parameters;
                long* parameters_ptr = &parameters;
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetUniformi64vNV(int, int, long*)"/>
            public static unsafe void GetUniformi64vNV(int program, int location, out long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetUniformi64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vNV(int program, int location, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vNV(int program, int location, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe ulong GetUniformui64vNV(int program, int location)
            {
                ulong parameters;
                ulong* parameters_ptr = &parameters;
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetUniformui64vNV(int, int, ulong*)"/>
            public static unsafe void GetUniformui64vNV(int program, int location, out ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetUniformui64vNV(program, location, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVaryingLocationNV(int, byte*)"/>
            public static unsafe int GetVaryingLocationNV(int program, string name)
            {
                int returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetVaryingLocationNV(program, name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="GetVertexAttribdvNV(uint, VertexAttribEnumNV, double*)"/>
            public static unsafe double GetVertexAttribdvNV(uint index, VertexAttribEnumNV pname)
            {
                double parameters;
                double* parameters_ptr = &parameters;
                {
                    GetVertexAttribdvNV(index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVertexAttribdvNV(uint, VertexAttribEnumNV, double*)"/>
            public static unsafe void GetVertexAttribdvNV(uint index, VertexAttribEnumNV pname, out double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetVertexAttribdvNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribfvNV(uint, VertexAttribEnumNV, float*)"/>
            public static unsafe float GetVertexAttribfvNV(uint index, VertexAttribEnumNV pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetVertexAttribfvNV(index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVertexAttribfvNV(uint, VertexAttribEnumNV, float*)"/>
            public static unsafe void GetVertexAttribfvNV(uint index, VertexAttribEnumNV pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetVertexAttribfvNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIivEXT(uint, VertexAttribEnum, int*)"/>
            public static unsafe int GetVertexAttribIivEXT(uint index, VertexAttribEnum pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetVertexAttribIivEXT(index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVertexAttribIivEXT(uint, VertexAttribEnum, int*)"/>
            public static unsafe void GetVertexAttribIivEXT(uint index, VertexAttribEnum pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVertexAttribIivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribIuivEXT(uint, VertexAttribEnum, uint*)"/>
            public static unsafe uint GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname)
            {
                uint parameters;
                uint* parameters_ptr = &parameters;
                {
                    GetVertexAttribIuivEXT(index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVertexAttribIuivEXT(uint, VertexAttribEnum, uint*)"/>
            public static unsafe void GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname, out uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetVertexAttribIuivEXT(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribivNV(uint, VertexAttribEnumNV, int*)"/>
            public static unsafe int GetVertexAttribivNV(uint index, VertexAttribEnumNV pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetVertexAttribivNV(index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVertexAttribivNV(uint, VertexAttribEnumNV, int*)"/>
            public static unsafe void GetVertexAttribivNV(uint index, VertexAttribEnumNV pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVertexAttribivNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLi64vNV(uint, VertexAttribEnum, long*)"/>
            public static unsafe void GetVertexAttribLi64vNV(uint index, VertexAttribEnum pname, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetVertexAttribLi64vNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLi64vNV(uint, VertexAttribEnum, long*)"/>
            public static unsafe void GetVertexAttribLi64vNV(uint index, VertexAttribEnum pname, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetVertexAttribLi64vNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLi64vNV(uint, VertexAttribEnum, long*)"/>
            public static unsafe long GetVertexAttribLi64vNV(uint index, VertexAttribEnum pname)
            {
                long parameters;
                long* parameters_ptr = &parameters;
                {
                    GetVertexAttribLi64vNV(index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVertexAttribLi64vNV(uint, VertexAttribEnum, long*)"/>
            public static unsafe void GetVertexAttribLi64vNV(uint index, VertexAttribEnum pname, out long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetVertexAttribLi64vNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLui64vNV(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe void GetVertexAttribLui64vNV(uint index, VertexAttribEnum pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetVertexAttribLui64vNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLui64vNV(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe void GetVertexAttribLui64vNV(uint index, VertexAttribEnum pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetVertexAttribLui64vNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVertexAttribLui64vNV(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe ulong GetVertexAttribLui64vNV(uint index, VertexAttribEnum pname)
            {
                ulong parameters;
                ulong* parameters_ptr = &parameters;
                {
                    GetVertexAttribLui64vNV(index, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVertexAttribLui64vNV(uint, VertexAttribEnum, ulong*)"/>
            public static unsafe void GetVertexAttribLui64vNV(uint index, VertexAttribEnum pname, out ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetVertexAttribLui64vNV(index, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureivNV(uint, All, int*)"/>
            public static unsafe void GetVideoCaptureivNV(uint video_capture_slot, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoCaptureivNV(video_capture_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureivNV(uint, All, int*)"/>
            public static unsafe void GetVideoCaptureivNV(uint video_capture_slot, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoCaptureivNV(video_capture_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureivNV(uint, All, int*)"/>
            public static unsafe int GetVideoCaptureivNV(uint video_capture_slot, All pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetVideoCaptureivNV(video_capture_slot, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVideoCaptureivNV(uint, All, int*)"/>
            public static unsafe void GetVideoCaptureivNV(uint video_capture_slot, All pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVideoCaptureivNV(video_capture_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamdvNV(uint, uint, All, double*)"/>
            public static unsafe void GetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, All pname, Span<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamdvNV(uint, uint, All, double*)"/>
            public static unsafe void GetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, All pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamdvNV(uint, uint, All, double*)"/>
            public static unsafe double GetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, All pname)
            {
                double parameters;
                double* parameters_ptr = &parameters;
                {
                    GetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVideoCaptureStreamdvNV(uint, uint, All, double*)"/>
            public static unsafe void GetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, All pname, out double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    GetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamfvNV(uint, uint, All, float*)"/>
            public static unsafe void GetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, All pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamfvNV(uint, uint, All, float*)"/>
            public static unsafe void GetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, All pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamfvNV(uint, uint, All, float*)"/>
            public static unsafe float GetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, All pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVideoCaptureStreamfvNV(uint, uint, All, float*)"/>
            public static unsafe void GetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, All pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamivNV(uint, uint, All, int*)"/>
            public static unsafe void GetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamivNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamivNV(uint, uint, All, int*)"/>
            public static unsafe void GetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoCaptureStreamivNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoCaptureStreamivNV(uint, uint, All, int*)"/>
            public static unsafe int GetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, All pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetVideoCaptureStreamivNV(video_capture_slot, stream, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVideoCaptureStreamivNV(uint, uint, All, int*)"/>
            public static unsafe void GetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, All pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVideoCaptureStreamivNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoi64vNV(uint, All, long*)"/>
            public static unsafe void GetVideoi64vNV(uint video_slot, All pname, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetVideoi64vNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoi64vNV(uint, All, long*)"/>
            public static unsafe void GetVideoi64vNV(uint video_slot, All pname, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    GetVideoi64vNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoi64vNV(uint, All, long*)"/>
            public static unsafe long GetVideoi64vNV(uint video_slot, All pname)
            {
                long parameters;
                long* parameters_ptr = &parameters;
                {
                    GetVideoi64vNV(video_slot, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVideoi64vNV(uint, All, long*)"/>
            public static unsafe void GetVideoi64vNV(uint video_slot, All pname, out long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    GetVideoi64vNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoivNV(uint, All, int*)"/>
            public static unsafe void GetVideoivNV(uint video_slot, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoivNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoivNV(uint, All, int*)"/>
            public static unsafe void GetVideoivNV(uint video_slot, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetVideoivNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoivNV(uint, All, int*)"/>
            public static unsafe int GetVideoivNV(uint video_slot, All pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetVideoivNV(video_slot, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVideoivNV(uint, All, int*)"/>
            public static unsafe void GetVideoivNV(uint video_slot, All pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetVideoivNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoui64vNV(uint, All, ulong*)"/>
            public static unsafe void GetVideoui64vNV(uint video_slot, All pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetVideoui64vNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoui64vNV(uint, All, ulong*)"/>
            public static unsafe void GetVideoui64vNV(uint video_slot, All pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    GetVideoui64vNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideoui64vNV(uint, All, ulong*)"/>
            public static unsafe ulong GetVideoui64vNV(uint video_slot, All pname)
            {
                ulong parameters;
                ulong* parameters_ptr = &parameters;
                {
                    GetVideoui64vNV(video_slot, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVideoui64vNV(uint, All, ulong*)"/>
            public static unsafe void GetVideoui64vNV(uint video_slot, All pname, out ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    GetVideoui64vNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideouivNV(uint, All, uint*)"/>
            public static unsafe void GetVideouivNV(uint video_slot, All pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetVideouivNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideouivNV(uint, All, uint*)"/>
            public static unsafe void GetVideouivNV(uint video_slot, All pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    GetVideouivNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVideouivNV(uint, All, uint*)"/>
            public static unsafe uint GetVideouivNV(uint video_slot, All pname)
            {
                uint parameters;
                uint* parameters_ptr = &parameters;
                {
                    GetVideouivNV(video_slot, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetVideouivNV(uint, All, uint*)"/>
            public static unsafe void GetVideouivNV(uint video_slot, All pname, out uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    GetVideouivNV(video_slot, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetVkProcAddrNV(byte*)"/>
            public static unsafe IntPtr GetVkProcAddrNV(string name)
            {
                IntPtr returnValue;
                byte* name_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(name);
                returnValue = GetVkProcAddrNV(name_ptr);
                Marshal.FreeCoTaskMem((IntPtr)name_ptr);
                return returnValue;
            }
            /// <inheritdoc cref="ListDrawCommandsStatesClientNV(uint, uint, void**, int*, uint*, uint*, uint)"/>
            public static unsafe void ListDrawCommandsStatesClientNV(uint list, uint segment, void** indirects, ReadOnlySpan<int> sizes, ReadOnlySpan<uint> states, ReadOnlySpan<uint> fbos, uint count)
            {
                fixed (uint* fbos_ptr = fbos)
                {
                    fixed (uint* states_ptr = states)
                    {
                        fixed (int* sizes_ptr = sizes)
                        {
                            ListDrawCommandsStatesClientNV(list, segment, indirects, sizes_ptr, states_ptr, fbos_ptr, count);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ListDrawCommandsStatesClientNV(uint, uint, void**, int*, uint*, uint*, uint)"/>
            public static unsafe void ListDrawCommandsStatesClientNV(uint list, uint segment, void** indirects, int[] sizes, uint[] states, uint[] fbos, uint count)
            {
                fixed (uint* fbos_ptr = fbos)
                {
                    fixed (uint* states_ptr = states)
                    {
                        fixed (int* sizes_ptr = sizes)
                        {
                            ListDrawCommandsStatesClientNV(list, segment, indirects, sizes_ptr, states_ptr, fbos_ptr, count);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ListDrawCommandsStatesClientNV(uint, uint, void**, int*, uint*, uint*, uint)"/>
            public static unsafe void ListDrawCommandsStatesClientNV(uint list, uint segment, void** indirects, ref readonly int sizes, ref readonly uint states, ref readonly uint fbos, uint count)
            {
                fixed (int* sizes_ptr = &sizes)
                fixed (uint* states_ptr = &states)
                fixed (uint* fbos_ptr = &fbos)
                {
                    ListDrawCommandsStatesClientNV(list, segment, indirects, sizes_ptr, states_ptr, fbos_ptr, count);
                }
            }
            /// <inheritdoc cref="LoadProgramNV(VertexAttribEnumNV, uint, int, byte*)"/>
            public static unsafe void LoadProgramNV(VertexAttribEnumNV target, uint id, int len, ReadOnlySpan<byte> program)
            {
                fixed (byte* program_ptr = program)
                {
                    LoadProgramNV(target, id, len, program_ptr);
                }
            }
            /// <inheritdoc cref="LoadProgramNV(VertexAttribEnumNV, uint, int, byte*)"/>
            public static unsafe void LoadProgramNV(VertexAttribEnumNV target, uint id, int len, byte[] program)
            {
                fixed (byte* program_ptr = program)
                {
                    LoadProgramNV(target, id, len, program_ptr);
                }
            }
            /// <inheritdoc cref="LoadProgramNV(VertexAttribEnumNV, uint, int, byte*)"/>
            public static unsafe void LoadProgramNV(VertexAttribEnumNV target, uint id, int len, ref readonly byte program)
            {
                fixed (byte* program_ptr = &program)
                {
                    LoadProgramNV(target, id, len, program_ptr);
                }
            }
            /// <inheritdoc cref="MapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, int, int, bool, void*)"/>
            public static unsafe void MapControlPointsNV(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points)
            {
                void* points_vptr = (void*)points;
                MapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points_vptr);
            }
            /// <inheritdoc cref="MapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, int, int, bool, void*)"/>
            public static unsafe void MapControlPointsNV<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, ReadOnlySpan<T1> points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = points)
                {
                    MapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="MapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, int, int, bool, void*)"/>
            public static unsafe void MapControlPointsNV<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, T1[] points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = points)
                {
                    MapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="MapControlPointsNV(EvalTargetNV, uint, MapTypeNV, int, int, int, int, bool, void*)"/>
            public static unsafe void MapControlPointsNV<T1>(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, ref readonly T1 points)
                where T1 : unmanaged
            {
                fixed (void* points_ptr = &points)
                {
                    MapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points_ptr);
                }
            }
            /// <inheritdoc cref="MapParameterfvNV(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void MapParameterfvNV(EvalTargetNV target, MapParameterNV pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MapParameterfvNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapParameterfvNV(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void MapParameterfvNV(EvalTargetNV target, MapParameterNV pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    MapParameterfvNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapParameterfvNV(EvalTargetNV, MapParameterNV, float*)"/>
            public static unsafe void MapParameterfvNV(EvalTargetNV target, MapParameterNV pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    MapParameterfvNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapParameterivNV(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void MapParameterivNV(EvalTargetNV target, MapParameterNV pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MapParameterivNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapParameterivNV(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void MapParameterivNV(EvalTargetNV target, MapParameterNV pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MapParameterivNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MapParameterivNV(EvalTargetNV, MapParameterNV, int*)"/>
            public static unsafe void MapParameterivNV(EvalTargetNV target, MapParameterNV pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MapParameterivNV(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoad3x2fNV(All, float*)"/>
            public static unsafe void MatrixLoad3x2fNV(All matrixMode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoad3x2fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoad3x2fNV(All, float*)"/>
            public static unsafe void MatrixLoad3x2fNV(All matrixMode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoad3x2fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoad3x2fNV(All, float*)"/>
            public static unsafe void MatrixLoad3x2fNV(All matrixMode, ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoad3x2fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoad3x3fNV(All, float*)"/>
            public static unsafe void MatrixLoad3x3fNV(All matrixMode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoad3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoad3x3fNV(All, float*)"/>
            public static unsafe void MatrixLoad3x3fNV(All matrixMode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoad3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoad3x3fNV(All, float*)"/>
            public static unsafe void MatrixLoad3x3fNV(All matrixMode, ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoad3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoaddEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoaddEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoaddEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoaddEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoaddEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoaddEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoaddEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoaddEXT(MatrixMode mode, ref readonly double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixLoaddEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadfEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadfEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadfEXT(MatrixMode mode, ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoadfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTranspose3x3fNV(All, float*)"/>
            public static unsafe void MatrixLoadTranspose3x3fNV(All matrixMode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadTranspose3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTranspose3x3fNV(All, float*)"/>
            public static unsafe void MatrixLoadTranspose3x3fNV(All matrixMode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadTranspose3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTranspose3x3fNV(All, float*)"/>
            public static unsafe void MatrixLoadTranspose3x3fNV(All matrixMode, ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoadTranspose3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposedEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoadTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposedEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixLoadTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixLoadTransposedEXT(MatrixMode mode, ref readonly double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixLoadTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposefEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposefEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixLoadTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixLoadTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixLoadTransposefEXT(MatrixMode mode, ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixLoadTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMult3x2fNV(All, float*)"/>
            public static unsafe void MatrixMult3x2fNV(All matrixMode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMult3x2fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMult3x2fNV(All, float*)"/>
            public static unsafe void MatrixMult3x2fNV(All matrixMode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMult3x2fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMult3x2fNV(All, float*)"/>
            public static unsafe void MatrixMult3x2fNV(All matrixMode, ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMult3x2fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMult3x3fNV(All, float*)"/>
            public static unsafe void MatrixMult3x3fNV(All matrixMode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMult3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMult3x3fNV(All, float*)"/>
            public static unsafe void MatrixMult3x3fNV(All matrixMode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMult3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMult3x3fNV(All, float*)"/>
            public static unsafe void MatrixMult3x3fNV(All matrixMode, ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMult3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultdEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultdEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultdEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultdEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultdEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultdEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultdEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultdEXT(MatrixMode mode, ref readonly double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixMultdEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultfEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultfEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultfEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultfEXT(MatrixMode mode, ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMultfEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTranspose3x3fNV(All, float*)"/>
            public static unsafe void MatrixMultTranspose3x3fNV(All matrixMode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultTranspose3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTranspose3x3fNV(All, float*)"/>
            public static unsafe void MatrixMultTranspose3x3fNV(All matrixMode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultTranspose3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTranspose3x3fNV(All, float*)"/>
            public static unsafe void MatrixMultTranspose3x3fNV(All matrixMode, ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMultTranspose3x3fNV(matrixMode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposedEXT(MatrixMode mode, ReadOnlySpan<double> m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposedEXT(MatrixMode mode, double[] m)
            {
                fixed (double* m_ptr = m)
                {
                    MatrixMultTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposedEXT(MatrixMode, double*)"/>
            public static unsafe void MatrixMultTransposedEXT(MatrixMode mode, ref readonly double m)
            {
                fixed (double* m_ptr = &m)
                {
                    MatrixMultTransposedEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposefEXT(MatrixMode mode, ReadOnlySpan<float> m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposefEXT(MatrixMode mode, float[] m)
            {
                fixed (float* m_ptr = m)
                {
                    MatrixMultTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MatrixMultTransposefEXT(MatrixMode, float*)"/>
            public static unsafe void MatrixMultTransposefEXT(MatrixMode mode, ref readonly float m)
            {
                fixed (float* m_ptr = &m)
                {
                    MatrixMultTransposefEXT(mode, m_ptr);
                }
            }
            /// <inheritdoc cref="MulticastBufferSubDataNV(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void MulticastBufferSubDataNV(uint gpuMask, int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                MulticastBufferSubDataNV(gpuMask, buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="MulticastBufferSubDataNV(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void MulticastBufferSubDataNV<T1>(uint gpuMask, int buffer, IntPtr offset, nint size, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    MulticastBufferSubDataNV(gpuMask, buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="MulticastBufferSubDataNV(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void MulticastBufferSubDataNV<T1>(uint gpuMask, int buffer, IntPtr offset, nint size, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    MulticastBufferSubDataNV(gpuMask, buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="MulticastBufferSubDataNV(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void MulticastBufferSubDataNV<T1>(uint gpuMask, int buffer, IntPtr offset, nint size, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    MulticastBufferSubDataNV(gpuMask, buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="MulticastFramebufferSampleLocationsfvNV(uint, int, uint, int, float*)"/>
            public static unsafe void MulticastFramebufferSampleLocationsfvNV(uint gpu, int framebuffer, uint start, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    MulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastFramebufferSampleLocationsfvNV(uint, int, uint, int, float*)"/>
            public static unsafe void MulticastFramebufferSampleLocationsfvNV(uint gpu, int framebuffer, uint start, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    MulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastFramebufferSampleLocationsfvNV(uint, int, uint, int, float*)"/>
            public static unsafe void MulticastFramebufferSampleLocationsfvNV(uint gpu, int framebuffer, uint start, int count, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjecti64vNV(uint, uint, All, long*)"/>
            public static unsafe void MulticastGetQueryObjecti64vNV(uint gpu, uint id, All pname, Span<long> parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    MulticastGetQueryObjecti64vNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjecti64vNV(uint, uint, All, long*)"/>
            public static unsafe void MulticastGetQueryObjecti64vNV(uint gpu, uint id, All pname, long[] parameters)
            {
                fixed (long* parameters_ptr = parameters)
                {
                    MulticastGetQueryObjecti64vNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjecti64vNV(uint, uint, All, long*)"/>
            public static unsafe void MulticastGetQueryObjecti64vNV(uint gpu, uint id, All pname, ref long parameters)
            {
                fixed (long* parameters_ptr = &parameters)
                {
                    MulticastGetQueryObjecti64vNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjectivNV(uint, uint, All, int*)"/>
            public static unsafe void MulticastGetQueryObjectivNV(uint gpu, uint id, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MulticastGetQueryObjectivNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjectivNV(uint, uint, All, int*)"/>
            public static unsafe void MulticastGetQueryObjectivNV(uint gpu, uint id, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    MulticastGetQueryObjectivNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjectivNV(uint, uint, All, int*)"/>
            public static unsafe void MulticastGetQueryObjectivNV(uint gpu, uint id, All pname, ref int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    MulticastGetQueryObjectivNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjectui64vNV(uint, uint, All, ulong*)"/>
            public static unsafe void MulticastGetQueryObjectui64vNV(uint gpu, uint id, All pname, Span<ulong> parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    MulticastGetQueryObjectui64vNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjectui64vNV(uint, uint, All, ulong*)"/>
            public static unsafe void MulticastGetQueryObjectui64vNV(uint gpu, uint id, All pname, ulong[] parameters)
            {
                fixed (ulong* parameters_ptr = parameters)
                {
                    MulticastGetQueryObjectui64vNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjectui64vNV(uint, uint, All, ulong*)"/>
            public static unsafe void MulticastGetQueryObjectui64vNV(uint gpu, uint id, All pname, ref ulong parameters)
            {
                fixed (ulong* parameters_ptr = &parameters)
                {
                    MulticastGetQueryObjectui64vNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjectuivNV(uint, uint, All, uint*)"/>
            public static unsafe void MulticastGetQueryObjectuivNV(uint gpu, uint id, All pname, Span<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    MulticastGetQueryObjectuivNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjectuivNV(uint, uint, All, uint*)"/>
            public static unsafe void MulticastGetQueryObjectuivNV(uint gpu, uint id, All pname, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    MulticastGetQueryObjectuivNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MulticastGetQueryObjectuivNV(uint, uint, All, uint*)"/>
            public static unsafe void MulticastGetQueryObjectuivNV(uint gpu, uint id, All pname, ref uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    MulticastGetQueryObjectuivNV(gpu, id, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindlessCountNV(PrimitiveType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindlessCountNV(PrimitiveType mode, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawArraysIndirectBindlessCountNV(mode, indirect_vptr, drawCount, maxDrawCount, stride, vertexBufferCount);
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindlessCountNV(PrimitiveType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindlessCountNV<T1>(PrimitiveType mode, ReadOnlySpan<T1> indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirectBindlessCountNV(mode, indirect_ptr, drawCount, maxDrawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindlessCountNV(PrimitiveType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindlessCountNV<T1>(PrimitiveType mode, T1[] indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirectBindlessCountNV(mode, indirect_ptr, drawCount, maxDrawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindlessCountNV(PrimitiveType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindlessCountNV<T1>(PrimitiveType mode, ref readonly T1 indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawArraysIndirectBindlessCountNV(mode, indirect_ptr, drawCount, maxDrawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindlessNV(PrimitiveType, void*, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindlessNV(PrimitiveType mode, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawArraysIndirectBindlessNV(mode, indirect_vptr, drawCount, stride, vertexBufferCount);
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindlessNV(PrimitiveType, void*, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindlessNV<T1>(PrimitiveType mode, ReadOnlySpan<T1> indirect, int drawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirectBindlessNV(mode, indirect_ptr, drawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindlessNV(PrimitiveType, void*, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindlessNV<T1>(PrimitiveType mode, T1[] indirect, int drawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawArraysIndirectBindlessNV(mode, indirect_ptr, drawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawArraysIndirectBindlessNV(PrimitiveType, void*, int, int, int)"/>
            public static unsafe void MultiDrawArraysIndirectBindlessNV<T1>(PrimitiveType mode, ref readonly T1 indirect, int drawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawArraysIndirectBindlessNV(mode, indirect_ptr, drawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindlessCountNV(PrimitiveType, DrawElementsType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindlessCountNV(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawElementsIndirectBindlessCountNV(mode, type, indirect_vptr, drawCount, maxDrawCount, stride, vertexBufferCount);
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindlessCountNV(PrimitiveType, DrawElementsType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindlessCountNV<T1>(PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirectBindlessCountNV(mode, type, indirect_ptr, drawCount, maxDrawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindlessCountNV(PrimitiveType, DrawElementsType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindlessCountNV<T1>(PrimitiveType mode, DrawElementsType type, T1[] indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirectBindlessCountNV(mode, type, indirect_ptr, drawCount, maxDrawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindlessCountNV(PrimitiveType, DrawElementsType, void*, int, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindlessCountNV<T1>(PrimitiveType mode, DrawElementsType type, ref readonly T1 indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawElementsIndirectBindlessCountNV(mode, type, indirect_ptr, drawCount, maxDrawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindlessNV(PrimitiveType, DrawElementsType, void*, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindlessNV(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
            {
                void* indirect_vptr = (void*)indirect;
                MultiDrawElementsIndirectBindlessNV(mode, type, indirect_vptr, drawCount, stride, vertexBufferCount);
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindlessNV(PrimitiveType, DrawElementsType, void*, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindlessNV<T1>(PrimitiveType mode, DrawElementsType type, ReadOnlySpan<T1> indirect, int drawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirectBindlessNV(mode, type, indirect_ptr, drawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindlessNV(PrimitiveType, DrawElementsType, void*, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindlessNV<T1>(PrimitiveType mode, DrawElementsType type, T1[] indirect, int drawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = indirect)
                {
                    MultiDrawElementsIndirectBindlessNV(mode, type, indirect_ptr, drawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiDrawElementsIndirectBindlessNV(PrimitiveType, DrawElementsType, void*, int, int, int)"/>
            public static unsafe void MultiDrawElementsIndirectBindlessNV<T1>(PrimitiveType mode, DrawElementsType type, ref readonly T1 indirect, int drawCount, int stride, int vertexBufferCount)
                where T1 : unmanaged
            {
                fixed (void* indirect_ptr = &indirect)
                {
                    MultiDrawElementsIndirectBindlessNV(mode, type, indirect_ptr, drawCount, stride, vertexBufferCount);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord1hvNV(TextureUnit target, ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    MultiTexCoord1hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord2hvNV(TextureUnit target, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord2hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord2hvNV(TextureUnit target, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord2hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord2hvNV(TextureUnit target, ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    MultiTexCoord2hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord3hvNV(TextureUnit target, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord3hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord3hvNV(TextureUnit target, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord3hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord3hvNV(TextureUnit target, ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    MultiTexCoord3hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord4hvNV(TextureUnit target, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord4hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord4hvNV(TextureUnit target, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    MultiTexCoord4hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4hvNV(TextureUnit, Half*)"/>
            public static unsafe void MultiTexCoord4hvNV(TextureUnit target, ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    MultiTexCoord4hvNV(target, v_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferSampleLocationsfvNV(int, uint, int, float*)"/>
            public static unsafe void NamedFramebufferSampleLocationsfvNV(int framebuffer, uint start, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    NamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferSampleLocationsfvNV(int, uint, int, float*)"/>
            public static unsafe void NamedFramebufferSampleLocationsfvNV(int framebuffer, uint start, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    NamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="NamedFramebufferSampleLocationsfvNV(int, uint, int, float*)"/>
            public static unsafe void NamedFramebufferSampleLocationsfvNV(int framebuffer, uint start, int count, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    NamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v_ptr);
                }
            }
            /// <inheritdoc cref="Normal3hvNV(Half*)"/>
            public static unsafe void Normal3hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Normal3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Normal3hvNV(Half*)"/>
            public static unsafe void Normal3hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Normal3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Normal3hvNV(Half*)"/>
            public static unsafe void Normal3hvNV(ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Normal3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="PathColorGenNV(PathColor, PathGenMode, PathColorFormat, float*)"/>
            public static unsafe void PathColorGenNV(PathColor color, PathGenMode genMode, PathColorFormat colorFormat, ReadOnlySpan<float> coeffs)
            {
                fixed (float* coeffs_ptr = coeffs)
                {
                    PathColorGenNV(color, genMode, colorFormat, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PathColorGenNV(PathColor, PathGenMode, PathColorFormat, float*)"/>
            public static unsafe void PathColorGenNV(PathColor color, PathGenMode genMode, PathColorFormat colorFormat, float[] coeffs)
            {
                fixed (float* coeffs_ptr = coeffs)
                {
                    PathColorGenNV(color, genMode, colorFormat, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PathColorGenNV(PathColor, PathGenMode, PathColorFormat, float*)"/>
            public static unsafe void PathColorGenNV(PathColor color, PathGenMode genMode, PathColorFormat colorFormat, ref readonly float coeffs)
            {
                fixed (float* coeffs_ptr = &coeffs)
                {
                    PathColorGenNV(color, genMode, colorFormat, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PathCommandsNV(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommandsNV(uint path, int numCommands, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                fixed (byte* commands_ptr = commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathCommandsNV(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommandsNV(uint path, int numCommands, byte[] commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                fixed (byte* commands_ptr = commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathCommandsNV(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommandsNV(uint path, int numCommands, ref readonly byte commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                fixed (byte* commands_ptr = &commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathCommandsNV(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommandsNV<T1>(uint path, int numCommands, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    fixed (byte* commands_ptr = commands)
                    {
                        PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PathCommandsNV(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommandsNV<T1>(uint path, int numCommands, byte[] commands, int numCoords, PathCoordType coordType, T1[] coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    fixed (byte* commands_ptr = commands)
                    {
                        PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PathCommandsNV(uint, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathCommandsNV<T1>(uint path, int numCommands, ref readonly byte commands, int numCoords, PathCoordType coordType, ref readonly T1 coords)
                where T1 : unmanaged
            {
                fixed (byte* commands_ptr = &commands)
                fixed (void* coords_ptr = &coords)
                {
                    PathCommandsNV(path, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathCoordsNV(uint, int, PathCoordType, void*)"/>
            public static unsafe void PathCoordsNV(uint path, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                void* coords_vptr = (void*)coords;
                PathCoordsNV(path, numCoords, coordType, coords_vptr);
            }
            /// <inheritdoc cref="PathCoordsNV(uint, int, PathCoordType, void*)"/>
            public static unsafe void PathCoordsNV<T1>(uint path, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    PathCoordsNV(path, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathCoordsNV(uint, int, PathCoordType, void*)"/>
            public static unsafe void PathCoordsNV<T1>(uint path, int numCoords, PathCoordType coordType, T1[] coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    PathCoordsNV(path, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathCoordsNV(uint, int, PathCoordType, void*)"/>
            public static unsafe void PathCoordsNV<T1>(uint path, int numCoords, PathCoordType coordType, ref readonly T1 coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = &coords)
                {
                    PathCoordsNV(path, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathDashArrayNV(uint, int, float*)"/>
            public static unsafe void PathDashArrayNV(uint path, int dashCount, ReadOnlySpan<float> dashArray)
            {
                fixed (float* dashArray_ptr = dashArray)
                {
                    PathDashArrayNV(path, dashCount, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="PathDashArrayNV(uint, int, float*)"/>
            public static unsafe void PathDashArrayNV(uint path, int dashCount, float[] dashArray)
            {
                fixed (float* dashArray_ptr = dashArray)
                {
                    PathDashArrayNV(path, dashCount, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="PathDashArrayNV(uint, int, float*)"/>
            public static unsafe void PathDashArrayNV(uint path, int dashCount, ref readonly float dashArray)
            {
                fixed (float* dashArray_ptr = &dashArray)
                {
                    PathDashArrayNV(path, dashCount, dashArray_ptr);
                }
            }
            /// <inheritdoc cref="PathGlyphIndexArrayNV(uint, All, void*, PathFontStyle, uint, int, uint, float)"/>
            public static unsafe All PathGlyphIndexArrayNV(uint firstPathName, All fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
            {
                All returnValue;
                void* fontName_vptr = (void*)fontName;
                returnValue = PathGlyphIndexArrayNV(firstPathName, fontTarget, fontName_vptr, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexArrayNV(uint, All, void*, PathFontStyle, uint, int, uint, float)"/>
            public static unsafe All PathGlyphIndexArrayNV<T1>(uint firstPathName, All fontTarget, ReadOnlySpan<T1> fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontName_ptr = fontName)
                {
                    returnValue = PathGlyphIndexArrayNV(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexArrayNV(uint, All, void*, PathFontStyle, uint, int, uint, float)"/>
            public static unsafe All PathGlyphIndexArrayNV<T1>(uint firstPathName, All fontTarget, T1[] fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontName_ptr = fontName)
                {
                    returnValue = PathGlyphIndexArrayNV(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexArrayNV(uint, All, void*, PathFontStyle, uint, int, uint, float)"/>
            public static unsafe All PathGlyphIndexArrayNV<T1>(uint firstPathName, All fontTarget, ref readonly T1 fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontName_ptr = &fontName)
                {
                    returnValue = PathGlyphIndexArrayNV(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRangeNV(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRangeNV(All fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, Span<uint> baseAndCount)
            {
                All returnValue;
                fixed (uint* baseAndCount_ptr = baseAndCount)
                {
                    void* fontName_vptr = (void*)fontName;
                    returnValue = PathGlyphIndexRangeNV(fontTarget, fontName_vptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRangeNV(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRangeNV(All fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint[] baseAndCount)
            {
                All returnValue;
                fixed (uint* baseAndCount_ptr = baseAndCount)
                {
                    void* fontName_vptr = (void*)fontName;
                    returnValue = PathGlyphIndexRangeNV(fontTarget, fontName_vptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRangeNV(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRangeNV(All fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, ref uint baseAndCount)
            {
                All returnValue;
                fixed (uint* baseAndCount_ptr = &baseAndCount)
                {
                    void* fontName_vptr = (void*)fontName;
                    returnValue = PathGlyphIndexRangeNV(fontTarget, fontName_vptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRangeNV(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRangeNV<T1>(All fontTarget, ReadOnlySpan<T1> fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, Span<uint> baseAndCount)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (uint* baseAndCount_ptr = baseAndCount)
                {
                    fixed (void* fontName_ptr = fontName)
                    {
                        returnValue = PathGlyphIndexRangeNV(fontTarget, fontName_ptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRangeNV(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRangeNV<T1>(All fontTarget, T1[] fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, uint[] baseAndCount)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (uint* baseAndCount_ptr = baseAndCount)
                {
                    fixed (void* fontName_ptr = fontName)
                    {
                        returnValue = PathGlyphIndexRangeNV(fontTarget, fontName_ptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphIndexRangeNV(All, void*, PathFontStyle, uint, float, uint*)"/>
            public static unsafe All PathGlyphIndexRangeNV<T1>(All fontTarget, ref readonly T1 fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, ref uint baseAndCount)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontName_ptr = &fontName)
                fixed (uint* baseAndCount_ptr = &baseAndCount)
                {
                    returnValue = PathGlyphIndexRangeNV(fontTarget, fontName_ptr, fontStyle, pathParameterTemplate, emScale, baseAndCount_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathGlyphRangeNV(uint, PathFontTarget, void*, PathFontStyle, uint, int, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphRangeNV(uint firstPathName, PathFontTarget fontTarget, IntPtr fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
            {
                void* fontName_vptr = (void*)fontName;
                PathGlyphRangeNV(firstPathName, fontTarget, fontName_vptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
            }
            /// <inheritdoc cref="PathGlyphRangeNV(uint, PathFontTarget, void*, PathFontStyle, uint, int, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphRangeNV<T1>(uint firstPathName, PathFontTarget fontTarget, ReadOnlySpan<T1> fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                fixed (void* fontName_ptr = fontName)
                {
                    PathGlyphRangeNV(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
                }
            }
            /// <inheritdoc cref="PathGlyphRangeNV(uint, PathFontTarget, void*, PathFontStyle, uint, int, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphRangeNV<T1>(uint firstPathName, PathFontTarget fontTarget, T1[] fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                fixed (void* fontName_ptr = fontName)
                {
                    PathGlyphRangeNV(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
                }
            }
            /// <inheritdoc cref="PathGlyphRangeNV(uint, PathFontTarget, void*, PathFontStyle, uint, int, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphRangeNV<T1>(uint firstPathName, PathFontTarget fontTarget, ref readonly T1 fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                fixed (void* fontName_ptr = &fontName)
                {
                    PathGlyphRangeNV(firstPathName, fontTarget, fontName_ptr, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
                }
            }
            /// <inheritdoc cref="PathGlyphsNV(uint, PathFontTarget, void*, PathFontStyle, int, PathElementType, void*, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphsNV(uint firstPathName, PathFontTarget fontTarget, IntPtr fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, IntPtr charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
            {
                void* fontName_vptr = (void*)fontName;
                void* charcodes_vptr = (void*)charcodes;
                PathGlyphsNV(firstPathName, fontTarget, fontName_vptr, fontStyle, numGlyphs, type, charcodes_vptr, handleMissingGlyphs, pathParameterTemplate, emScale);
            }
            /// <inheritdoc cref="PathGlyphsNV(uint, PathFontTarget, void*, PathFontStyle, int, PathElementType, void*, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphsNV<T1, T2>(uint firstPathName, PathFontTarget fontTarget, ReadOnlySpan<T1> fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, ReadOnlySpan<T2> charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* charcodes_ptr = charcodes)
                {
                    fixed (void* fontName_ptr = fontName)
                    {
                        PathGlyphsNV(firstPathName, fontTarget, fontName_ptr, fontStyle, numGlyphs, type, charcodes_ptr, handleMissingGlyphs, pathParameterTemplate, emScale);
                    }
                }
            }
            /// <inheritdoc cref="PathGlyphsNV(uint, PathFontTarget, void*, PathFontStyle, int, PathElementType, void*, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphsNV<T1, T2>(uint firstPathName, PathFontTarget fontTarget, T1[] fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, T2[] charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* charcodes_ptr = charcodes)
                {
                    fixed (void* fontName_ptr = fontName)
                    {
                        PathGlyphsNV(firstPathName, fontTarget, fontName_ptr, fontStyle, numGlyphs, type, charcodes_ptr, handleMissingGlyphs, pathParameterTemplate, emScale);
                    }
                }
            }
            /// <inheritdoc cref="PathGlyphsNV(uint, PathFontTarget, void*, PathFontStyle, int, PathElementType, void*, PathHandleMissingGlyphs, uint, float)"/>
            public static unsafe void PathGlyphsNV<T1, T2>(uint firstPathName, PathFontTarget fontTarget, ref readonly T1 fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, ref readonly T2 charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* fontName_ptr = &fontName)
                fixed (void* charcodes_ptr = &charcodes)
                {
                    PathGlyphsNV(firstPathName, fontTarget, fontName_ptr, fontStyle, numGlyphs, type, charcodes_ptr, handleMissingGlyphs, pathParameterTemplate, emScale);
                }
            }
            /// <inheritdoc cref="PathMemoryGlyphIndexArrayNV(uint, All, nint, void*, int, uint, int, uint, float)"/>
            public static unsafe All PathMemoryGlyphIndexArrayNV(uint firstPathName, All fontTarget, nint fontSize, IntPtr fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
            {
                All returnValue;
                void* fontData_vptr = (void*)fontData;
                returnValue = PathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData_vptr, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                return returnValue;
            }
            /// <inheritdoc cref="PathMemoryGlyphIndexArrayNV(uint, All, nint, void*, int, uint, int, uint, float)"/>
            public static unsafe All PathMemoryGlyphIndexArrayNV<T1>(uint firstPathName, All fontTarget, nint fontSize, ReadOnlySpan<T1> fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontData_ptr = fontData)
                {
                    returnValue = PathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData_ptr, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathMemoryGlyphIndexArrayNV(uint, All, nint, void*, int, uint, int, uint, float)"/>
            public static unsafe All PathMemoryGlyphIndexArrayNV<T1>(uint firstPathName, All fontTarget, nint fontSize, T1[] fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontData_ptr = fontData)
                {
                    returnValue = PathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData_ptr, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathMemoryGlyphIndexArrayNV(uint, All, nint, void*, int, uint, int, uint, float)"/>
            public static unsafe All PathMemoryGlyphIndexArrayNV<T1>(uint firstPathName, All fontTarget, nint fontSize, ref readonly T1 fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
                where T1 : unmanaged
            {
                All returnValue;
                fixed (void* fontData_ptr = &fontData)
                {
                    returnValue = PathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData_ptr, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PathParameterfvNV(uint, PathParameter, float*)"/>
            public static unsafe void PathParameterfvNV(uint path, PathParameter pname, ReadOnlySpan<float> value)
            {
                fixed (float* value_ptr = value)
                {
                    PathParameterfvNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathParameterfvNV(uint, PathParameter, float*)"/>
            public static unsafe void PathParameterfvNV(uint path, PathParameter pname, float[] value)
            {
                fixed (float* value_ptr = value)
                {
                    PathParameterfvNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathParameterfvNV(uint, PathParameter, float*)"/>
            public static unsafe void PathParameterfvNV(uint path, PathParameter pname, ref readonly float value)
            {
                fixed (float* value_ptr = &value)
                {
                    PathParameterfvNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathParameterivNV(uint, PathParameter, int*)"/>
            public static unsafe void PathParameterivNV(uint path, PathParameter pname, ReadOnlySpan<int> value)
            {
                fixed (int* value_ptr = value)
                {
                    PathParameterivNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathParameterivNV(uint, PathParameter, int*)"/>
            public static unsafe void PathParameterivNV(uint path, PathParameter pname, int[] value)
            {
                fixed (int* value_ptr = value)
                {
                    PathParameterivNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathParameterivNV(uint, PathParameter, int*)"/>
            public static unsafe void PathParameterivNV(uint path, PathParameter pname, ref readonly int value)
            {
                fixed (int* value_ptr = &value)
                {
                    PathParameterivNV(path, pname, value_ptr);
                }
            }
            /// <inheritdoc cref="PathStringNV(uint, PathStringFormat, int, void*)"/>
            public static unsafe void PathStringNV(uint path, PathStringFormat format, int length, IntPtr pathString)
            {
                void* pathString_vptr = (void*)pathString;
                PathStringNV(path, format, length, pathString_vptr);
            }
            /// <inheritdoc cref="PathStringNV(uint, PathStringFormat, int, void*)"/>
            public static unsafe void PathStringNV<T1>(uint path, PathStringFormat format, int length, ReadOnlySpan<T1> pathString)
                where T1 : unmanaged
            {
                fixed (void* pathString_ptr = pathString)
                {
                    PathStringNV(path, format, length, pathString_ptr);
                }
            }
            /// <inheritdoc cref="PathStringNV(uint, PathStringFormat, int, void*)"/>
            public static unsafe void PathStringNV<T1>(uint path, PathStringFormat format, int length, T1[] pathString)
                where T1 : unmanaged
            {
                fixed (void* pathString_ptr = pathString)
                {
                    PathStringNV(path, format, length, pathString_ptr);
                }
            }
            /// <inheritdoc cref="PathStringNV(uint, PathStringFormat, int, void*)"/>
            public static unsafe void PathStringNV<T1>(uint path, PathStringFormat format, int length, ref readonly T1 pathString)
                where T1 : unmanaged
            {
                fixed (void* pathString_ptr = &pathString)
                {
                    PathStringNV(path, format, length, pathString_ptr);
                }
            }
            /// <inheritdoc cref="PathSubCommandsNV(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                fixed (byte* commands_ptr = commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathSubCommandsNV(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                fixed (byte* commands_ptr = commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathSubCommandsNV(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, ref readonly byte commands, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                fixed (byte* commands_ptr = &commands)
                {
                    void* coords_vptr = (void*)coords;
                    PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_vptr);
                }
            }
            /// <inheritdoc cref="PathSubCommandsNV(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommandsNV<T1>(uint path, int commandStart, int commandsToDelete, int numCommands, ReadOnlySpan<byte> commands, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    fixed (byte* commands_ptr = commands)
                    {
                        PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PathSubCommandsNV(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommandsNV<T1>(uint path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, PathCoordType coordType, T1[] coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    fixed (byte* commands_ptr = commands)
                    {
                        PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PathSubCommandsNV(uint, int, int, int, byte*, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCommandsNV<T1>(uint path, int commandStart, int commandsToDelete, int numCommands, ref readonly byte commands, int numCoords, PathCoordType coordType, ref readonly T1 coords)
                where T1 : unmanaged
            {
                fixed (byte* commands_ptr = &commands)
                fixed (void* coords_ptr = &coords)
                {
                    PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands_ptr, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathSubCoordsNV(uint, int, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCoordsNV(uint path, int coordStart, int numCoords, PathCoordType coordType, IntPtr coords)
            {
                void* coords_vptr = (void*)coords;
                PathSubCoordsNV(path, coordStart, numCoords, coordType, coords_vptr);
            }
            /// <inheritdoc cref="PathSubCoordsNV(uint, int, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCoordsNV<T1>(uint path, int coordStart, int numCoords, PathCoordType coordType, ReadOnlySpan<T1> coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    PathSubCoordsNV(path, coordStart, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathSubCoordsNV(uint, int, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCoordsNV<T1>(uint path, int coordStart, int numCoords, PathCoordType coordType, T1[] coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = coords)
                {
                    PathSubCoordsNV(path, coordStart, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathSubCoordsNV(uint, int, int, PathCoordType, void*)"/>
            public static unsafe void PathSubCoordsNV<T1>(uint path, int coordStart, int numCoords, PathCoordType coordType, ref readonly T1 coords)
                where T1 : unmanaged
            {
                fixed (void* coords_ptr = &coords)
                {
                    PathSubCoordsNV(path, coordStart, numCoords, coordType, coords_ptr);
                }
            }
            /// <inheritdoc cref="PathTexGenNV(PathColor, PathGenMode, int, float*)"/>
            public static unsafe void PathTexGenNV(PathColor texCoordSet, PathGenMode genMode, int components, ReadOnlySpan<float> coeffs)
            {
                fixed (float* coeffs_ptr = coeffs)
                {
                    PathTexGenNV(texCoordSet, genMode, components, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PathTexGenNV(PathColor, PathGenMode, int, float*)"/>
            public static unsafe void PathTexGenNV(PathColor texCoordSet, PathGenMode genMode, int components, float[] coeffs)
            {
                fixed (float* coeffs_ptr = coeffs)
                {
                    PathTexGenNV(texCoordSet, genMode, components, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PathTexGenNV(PathColor, PathGenMode, int, float*)"/>
            public static unsafe void PathTexGenNV(PathColor texCoordSet, PathGenMode genMode, int components, ref readonly float coeffs)
            {
                fixed (float* coeffs_ptr = &coeffs)
                {
                    PathTexGenNV(texCoordSet, genMode, components, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="PixelDataRangeNV(PixelDataRangeTargetNV, int, void*)"/>
            public static unsafe void PixelDataRangeNV(PixelDataRangeTargetNV target, int length, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                PixelDataRangeNV(target, length, pointer_vptr);
            }
            /// <inheritdoc cref="PixelDataRangeNV(PixelDataRangeTargetNV, int, void*)"/>
            public static unsafe void PixelDataRangeNV<T1>(PixelDataRangeTargetNV target, int length, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    PixelDataRangeNV(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="PixelDataRangeNV(PixelDataRangeTargetNV, int, void*)"/>
            public static unsafe void PixelDataRangeNV<T1>(PixelDataRangeTargetNV target, int length, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    PixelDataRangeNV(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="PixelDataRangeNV(PixelDataRangeTargetNV, int, void*)"/>
            public static unsafe void PixelDataRangeNV<T1>(PixelDataRangeTargetNV target, int length, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    PixelDataRangeNV(target, length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="PointAlongPathNV(uint, int, int, float, float*, float*, float*, float*)"/>
            public static unsafe bool PointAlongPathNV(uint path, int startSegment, int numSegments, float distance, out float x, out float y, out float tangentX, out float tangentY)
            {
                bool returnValue;
                fixed (float* x_ptr = &x)
                fixed (float* y_ptr = &y)
                fixed (float* tangentX_ptr = &tangentX)
                fixed (float* tangentY_ptr = &tangentY)
                {
                    returnValue = PointAlongPathNV(path, startSegment, numSegments, distance, x_ptr, y_ptr, tangentX_ptr, tangentY_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PointParameterivNV(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameterivNV(PointParameterNameARB pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PointParameterivNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterivNV(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameterivNV(PointParameterNameARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PointParameterivNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterivNV(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameterivNV(PointParameterNameARB pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    PointParameterivNV(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersfvNV(ProgramTarget, uint, uint, int, float*)"/>
            public static unsafe void ProgramBufferParametersfvNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersfvNV(ProgramTarget, uint, uint, int, float*)"/>
            public static unsafe void ProgramBufferParametersfvNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersfvNV(ProgramTarget, uint, uint, int, float*)"/>
            public static unsafe void ProgramBufferParametersfvNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIivNV(ProgramTarget, uint, uint, int, int*)"/>
            public static unsafe void ProgramBufferParametersIivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIivNV(ProgramTarget, uint, uint, int, int*)"/>
            public static unsafe void ProgramBufferParametersIivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIivNV(ProgramTarget, uint, uint, int, int*)"/>
            public static unsafe void ProgramBufferParametersIivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIuivNV(ProgramTarget, uint, uint, int, uint*)"/>
            public static unsafe void ProgramBufferParametersIuivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIuivNV(ProgramTarget, uint, uint, int, uint*)"/>
            public static unsafe void ProgramBufferParametersIuivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramBufferParametersIuivNV(ProgramTarget, uint, uint, int, uint*)"/>
            public static unsafe void ProgramBufferParametersIuivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, ref readonly uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4ivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramEnvParameterI4ivNV(ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramEnvParameterI4ivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4ivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramEnvParameterI4ivNV(ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramEnvParameterI4ivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4ivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramEnvParameterI4ivNV(ProgramTarget target, uint index, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ProgramEnvParameterI4ivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4uivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramEnvParameterI4uivNV(ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramEnvParameterI4uivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4uivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramEnvParameterI4uivNV(ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramEnvParameterI4uivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParameterI4uivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramEnvParameterI4uivNV(ProgramTarget target, uint index, ref readonly uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramEnvParameterI4uivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4ivNV(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramEnvParametersI4ivNV(ProgramTarget target, uint index, int count, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramEnvParametersI4ivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4ivNV(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramEnvParametersI4ivNV(ProgramTarget target, uint index, int count, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramEnvParametersI4ivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4ivNV(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramEnvParametersI4ivNV(ProgramTarget target, uint index, int count, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ProgramEnvParametersI4ivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4uivNV(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramEnvParametersI4uivNV(ProgramTarget target, uint index, int count, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramEnvParametersI4uivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4uivNV(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramEnvParametersI4uivNV(ProgramTarget target, uint index, int count, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramEnvParametersI4uivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramEnvParametersI4uivNV(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramEnvParametersI4uivNV(ProgramTarget target, uint index, int count, ref readonly uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramEnvParametersI4uivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4ivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramLocalParameterI4ivNV(ProgramTarget target, uint index, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramLocalParameterI4ivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4ivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramLocalParameterI4ivNV(ProgramTarget target, uint index, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramLocalParameterI4ivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4ivNV(ProgramTarget, uint, int*)"/>
            public static unsafe void ProgramLocalParameterI4ivNV(ProgramTarget target, uint index, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ProgramLocalParameterI4ivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4uivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramLocalParameterI4uivNV(ProgramTarget target, uint index, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramLocalParameterI4uivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4uivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramLocalParameterI4uivNV(ProgramTarget target, uint index, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramLocalParameterI4uivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParameterI4uivNV(ProgramTarget, uint, uint*)"/>
            public static unsafe void ProgramLocalParameterI4uivNV(ProgramTarget target, uint index, ref readonly uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramLocalParameterI4uivNV(target, index, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4ivNV(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramLocalParametersI4ivNV(ProgramTarget target, uint index, int count, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramLocalParametersI4ivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4ivNV(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramLocalParametersI4ivNV(ProgramTarget target, uint index, int count, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ProgramLocalParametersI4ivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4ivNV(ProgramTarget, uint, int, int*)"/>
            public static unsafe void ProgramLocalParametersI4ivNV(ProgramTarget target, uint index, int count, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ProgramLocalParametersI4ivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4uivNV(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramLocalParametersI4uivNV(ProgramTarget target, uint index, int count, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramLocalParametersI4uivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4uivNV(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramLocalParametersI4uivNV(ProgramTarget target, uint index, int count, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramLocalParametersI4uivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramLocalParametersI4uivNV(ProgramTarget, uint, int, uint*)"/>
            public static unsafe void ProgramLocalParametersI4uivNV(ProgramTarget target, uint index, int count, ref readonly uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramLocalParametersI4uivNV(target, index, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4dNV(int, int, byte*, double, double, double, double)"/>
            public static unsafe void ProgramNamedParameter4dNV(int id, int len, ref readonly byte name, double x, double y, double z, double w)
            {
                fixed (byte* name_ptr = &name)
                {
                    ProgramNamedParameter4dNV(id, len, name_ptr, x, y, z, w);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4dvNV(int, int, byte*, double*)"/>
            public static unsafe void ProgramNamedParameter4dvNV(int id, int len, ref readonly byte name, ReadOnlySpan<double> v)
            {
                fixed (byte* name_ptr = &name)
                {
                    fixed (double* v_ptr = v)
                    {
                        ProgramNamedParameter4dvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4dvNV(int, int, byte*, double*)"/>
            public static unsafe void ProgramNamedParameter4dvNV(int id, int len, ref readonly byte name, double[] v)
            {
                fixed (byte* name_ptr = &name)
                {
                    fixed (double* v_ptr = v)
                    {
                        ProgramNamedParameter4dvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4dvNV(int, int, byte*, double*)"/>
            public static unsafe void ProgramNamedParameter4dvNV(int id, int len, ref readonly byte name, ref readonly double v)
            {
                fixed (byte* name_ptr = &name)
                fixed (double* v_ptr = &v)
                {
                    ProgramNamedParameter4dvNV(id, len, name_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4fNV(int, int, byte*, float, float, float, float)"/>
            public static unsafe void ProgramNamedParameter4fNV(int id, int len, ref readonly byte name, float x, float y, float z, float w)
            {
                fixed (byte* name_ptr = &name)
                {
                    ProgramNamedParameter4fNV(id, len, name_ptr, x, y, z, w);
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4fvNV(int, int, byte*, float*)"/>
            public static unsafe void ProgramNamedParameter4fvNV(int id, int len, ref readonly byte name, ReadOnlySpan<float> v)
            {
                fixed (byte* name_ptr = &name)
                {
                    fixed (float* v_ptr = v)
                    {
                        ProgramNamedParameter4fvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4fvNV(int, int, byte*, float*)"/>
            public static unsafe void ProgramNamedParameter4fvNV(int id, int len, ref readonly byte name, float[] v)
            {
                fixed (byte* name_ptr = &name)
                {
                    fixed (float* v_ptr = v)
                    {
                        ProgramNamedParameter4fvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ProgramNamedParameter4fvNV(int, int, byte*, float*)"/>
            public static unsafe void ProgramNamedParameter4fvNV(int id, int len, ref readonly byte name, ref readonly float v)
            {
                fixed (byte* name_ptr = &name)
                fixed (float* v_ptr = &v)
                {
                    ProgramNamedParameter4fvNV(id, len, name_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4dvNV(VertexAttribEnumNV, uint, double*)"/>
            public static unsafe void ProgramParameter4dvNV(VertexAttribEnumNV target, uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    ProgramParameter4dvNV(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4dvNV(VertexAttribEnumNV, uint, double*)"/>
            public static unsafe void ProgramParameter4dvNV(VertexAttribEnumNV target, uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    ProgramParameter4dvNV(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4dvNV(VertexAttribEnumNV, uint, double*)"/>
            public static unsafe void ProgramParameter4dvNV(VertexAttribEnumNV target, uint index, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    ProgramParameter4dvNV(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4fvNV(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ProgramParameter4fvNV(VertexAttribEnumNV target, uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    ProgramParameter4fvNV(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4fvNV(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ProgramParameter4fvNV(VertexAttribEnumNV target, uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    ProgramParameter4fvNV(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameter4fvNV(VertexAttribEnumNV, uint, float*)"/>
            public static unsafe void ProgramParameter4fvNV(VertexAttribEnumNV target, uint index, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    ProgramParameter4fvNV(target, index, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4dvNV(VertexAttribEnumNV, uint, int, double*)"/>
            public static unsafe void ProgramParameters4dvNV(VertexAttribEnumNV target, uint index, int count, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    ProgramParameters4dvNV(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4dvNV(VertexAttribEnumNV, uint, int, double*)"/>
            public static unsafe void ProgramParameters4dvNV(VertexAttribEnumNV target, uint index, int count, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    ProgramParameters4dvNV(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4dvNV(VertexAttribEnumNV, uint, int, double*)"/>
            public static unsafe void ProgramParameters4dvNV(VertexAttribEnumNV target, uint index, int count, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    ProgramParameters4dvNV(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4fvNV(VertexAttribEnumNV, uint, int, float*)"/>
            public static unsafe void ProgramParameters4fvNV(VertexAttribEnumNV target, uint index, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    ProgramParameters4fvNV(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4fvNV(VertexAttribEnumNV, uint, int, float*)"/>
            public static unsafe void ProgramParameters4fvNV(VertexAttribEnumNV target, uint index, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    ProgramParameters4fvNV(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramParameters4fvNV(VertexAttribEnumNV, uint, int, float*)"/>
            public static unsafe void ProgramParameters4fvNV(VertexAttribEnumNV target, uint index, int count, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    ProgramParameters4fvNV(target, index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ProgramPathFragmentInputGenNV(int, int, All, int, float*)"/>
            public static unsafe void ProgramPathFragmentInputGenNV(int program, int location, All genMode, int components, ReadOnlySpan<float> coeffs)
            {
                fixed (float* coeffs_ptr = coeffs)
                {
                    ProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="ProgramPathFragmentInputGenNV(int, int, All, int, float*)"/>
            public static unsafe void ProgramPathFragmentInputGenNV(int program, int location, All genMode, int components, float[] coeffs)
            {
                fixed (float* coeffs_ptr = coeffs)
                {
                    ProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="ProgramPathFragmentInputGenNV(int, int, All, int, float*)"/>
            public static unsafe void ProgramPathFragmentInputGenNV(int program, int location, All genMode, int components, ref readonly float coeffs)
            {
                fixed (float* coeffs_ptr = &coeffs)
                {
                    ProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs_ptr);
                }
            }
            /// <inheritdoc cref="ProgramSubroutineParametersuivNV(All, int, uint*)"/>
            public static unsafe void ProgramSubroutineParametersuivNV(All target, int count, ReadOnlySpan<uint> parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramSubroutineParametersuivNV(target, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramSubroutineParametersuivNV(All, int, uint*)"/>
            public static unsafe void ProgramSubroutineParametersuivNV(All target, int count, uint[] parameters)
            {
                fixed (uint* parameters_ptr = parameters)
                {
                    ProgramSubroutineParametersuivNV(target, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramSubroutineParametersuivNV(All, int, uint*)"/>
            public static unsafe void ProgramSubroutineParametersuivNV(All target, int count, ref readonly uint parameters)
            {
                fixed (uint* parameters_ptr = &parameters)
                {
                    ProgramSubroutineParametersuivNV(target, count, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform1i64vNV(int program, int location, int count, ref readonly long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform1i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform1ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform1ui64vNV(int program, int location, int count, ref readonly ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform1ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, ref readonly Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, ref readonly System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform2i64vNV(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform2i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, ref readonly Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, ref readonly System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform2ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform2ui64vNV(int program, int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform2ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, ref readonly Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, ref readonly System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform3i64vNV(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform3i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, ref readonly Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, ref readonly System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform3ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform3ui64vNV(int program, int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform3ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, ref readonly Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, ref readonly System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4i64vNV(int, int, int, long*)"/>
            public static unsafe void ProgramUniform4i64vNV(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    ProgramUniform4i64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, ref readonly Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, ref readonly System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniform4ui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniform4ui64vNV(int program, int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    ProgramUniform4ui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64vNV(int program, int location, int count, ReadOnlySpan<ulong> values)
            {
                fixed (ulong* values_ptr = values)
                {
                    ProgramUniformHandleui64vNV(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64vNV(int program, int location, int count, ulong[] values)
            {
                fixed (ulong* values_ptr = values)
                {
                    ProgramUniformHandleui64vNV(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformHandleui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformHandleui64vNV(int program, int location, int count, ref readonly ulong values)
            {
                fixed (ulong* values_ptr = &values)
                {
                    ProgramUniformHandleui64vNV(program, location, count, values_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformui64vNV(int program, int location, int count, ReadOnlySpan<ulong> value)
            {
                fixed (ulong* value_ptr = value)
                {
                    ProgramUniformui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformui64vNV(int program, int location, int count, ulong[] value)
            {
                fixed (ulong* value_ptr = value)
                {
                    ProgramUniformui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="ProgramUniformui64vNV(int, int, int, ulong*)"/>
            public static unsafe void ProgramUniformui64vNV(int program, int location, int count, ref readonly ulong value)
            {
                fixed (ulong* value_ptr = &value)
                {
                    ProgramUniformui64vNV(program, location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="QueryResourceNV(All, int, uint, int*)"/>
            public static unsafe int QueryResourceNV(All queryType, int tagId, uint count, Span<int> buffer)
            {
                int returnValue;
                fixed (int* buffer_ptr = buffer)
                {
                    returnValue = QueryResourceNV(queryType, tagId, count, buffer_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="QueryResourceNV(All, int, uint, int*)"/>
            public static unsafe int QueryResourceNV(All queryType, int tagId, uint count, int[] buffer)
            {
                int returnValue;
                fixed (int* buffer_ptr = buffer)
                {
                    returnValue = QueryResourceNV(queryType, tagId, count, buffer_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="QueryResourceNV(All, int, uint, int*)"/>
            public static unsafe int QueryResourceNV(All queryType, int tagId, uint count, ref int buffer)
            {
                int returnValue;
                fixed (int* buffer_ptr = &buffer)
                {
                    returnValue = QueryResourceNV(queryType, tagId, count, buffer_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="QueryResourceTagNV(int, byte*)"/>
            public static unsafe void QueryResourceTagNV(int tagId, string tagString)
            {
                byte* tagString_ptr = (byte*)Marshal.StringToCoTaskMemUTF8(tagString);
                QueryResourceTagNV(tagId, tagString_ptr);
                Marshal.FreeCoTaskMem((IntPtr)tagString_ptr);
            }
            /// <inheritdoc cref="RequestResidentProgramsNV(int, int*)"/>
            public static unsafe void RequestResidentProgramsNV(int n, ReadOnlySpan<int> programs)
            {
                fixed (int* programs_ptr = programs)
                {
                    RequestResidentProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="RequestResidentProgramsNV(int, int*)"/>
            public static unsafe void RequestResidentProgramsNV(int n, int[] programs)
            {
                fixed (int* programs_ptr = programs)
                {
                    RequestResidentProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="RequestResidentProgramsNV(int, int*)"/>
            public static unsafe void RequestResidentProgramsNV(int n, ref readonly int programs)
            {
                fixed (int* programs_ptr = &programs)
                {
                    RequestResidentProgramsNV(n, programs_ptr);
                }
            }
            /// <inheritdoc cref="ScissorExclusiveArrayvNV(uint, int, int*)"/>
            public static unsafe void ScissorExclusiveArrayvNV(uint first, int count, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorExclusiveArrayvNV(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorExclusiveArrayvNV(uint, int, int*)"/>
            public static unsafe void ScissorExclusiveArrayvNV(uint first, int count, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    ScissorExclusiveArrayvNV(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="ScissorExclusiveArrayvNV(uint, int, int*)"/>
            public static unsafe void ScissorExclusiveArrayvNV(uint first, int count, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    ScissorExclusiveArrayvNV(first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3hvNV(Half*)"/>
            public static unsafe void SecondaryColor3hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    SecondaryColor3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3hvNV(Half*)"/>
            public static unsafe void SecondaryColor3hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    SecondaryColor3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="SecondaryColor3hvNV(Half*)"/>
            public static unsafe void SecondaryColor3hvNV(ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    SecondaryColor3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="SemaphoreParameterivNV(uint, SemaphoreParameterName, int*)"/>
            public static unsafe void SemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    SemaphoreParameterivNV(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SemaphoreParameterivNV(uint, SemaphoreParameterName, int*)"/>
            public static unsafe void SemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    SemaphoreParameterivNV(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SemaphoreParameterivNV(uint, SemaphoreParameterName, int*)"/>
            public static unsafe void SemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    SemaphoreParameterivNV(semaphore, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateImagePaletteNV(uint, uint, int, All*)"/>
            public static unsafe void ShadingRateImagePaletteNV(uint viewport, uint first, int count, ReadOnlySpan<All> rates)
            {
                fixed (All* rates_ptr = rates)
                {
                    ShadingRateImagePaletteNV(viewport, first, count, rates_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateImagePaletteNV(uint, uint, int, All*)"/>
            public static unsafe void ShadingRateImagePaletteNV(uint viewport, uint first, int count, All[] rates)
            {
                fixed (All* rates_ptr = rates)
                {
                    ShadingRateImagePaletteNV(viewport, first, count, rates_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateImagePaletteNV(uint, uint, int, All*)"/>
            public static unsafe void ShadingRateImagePaletteNV(uint viewport, uint first, int count, ref readonly All rates)
            {
                fixed (All* rates_ptr = &rates)
                {
                    ShadingRateImagePaletteNV(viewport, first, count, rates_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateSampleOrderCustomNV(All, uint, int*)"/>
            public static unsafe void ShadingRateSampleOrderCustomNV(All rate, uint samples, ReadOnlySpan<int> locations)
            {
                fixed (int* locations_ptr = locations)
                {
                    ShadingRateSampleOrderCustomNV(rate, samples, locations_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateSampleOrderCustomNV(All, uint, int*)"/>
            public static unsafe void ShadingRateSampleOrderCustomNV(All rate, uint samples, int[] locations)
            {
                fixed (int* locations_ptr = locations)
                {
                    ShadingRateSampleOrderCustomNV(rate, samples, locations_ptr);
                }
            }
            /// <inheritdoc cref="ShadingRateSampleOrderCustomNV(All, uint, int*)"/>
            public static unsafe void ShadingRateSampleOrderCustomNV(All rate, uint samples, ref readonly int locations)
            {
                fixed (int* locations_ptr = &locations)
                {
                    ShadingRateSampleOrderCustomNV(rate, samples, locations_ptr);
                }
            }
            /// <inheritdoc cref="StencilFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, ref readonly float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        StencilFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        StencilFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, PathTransformType, float*)"/>
            public static unsafe void StencilFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ref readonly T1 paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, ref readonly float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    StencilFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, PathTransformType transformType, ref readonly float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, int reference, uint mask, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        StencilStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, int reference, uint mask, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        StencilStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, PathTransformType, float*)"/>
            public static unsafe void StencilStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ref readonly T1 paths, uint pathBase, int reference, uint mask, PathTransformType transformType, ref readonly float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    StencilStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ref readonly float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilThenCoverFillPathInstancedNV(int, PathElementType, void*, uint, PathFillMode, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverFillPathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ref readonly T1 paths, uint pathBase, PathFillMode fillMode, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ref readonly float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, fillMode, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ref readonly float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    void* paths_vptr = (void*)paths;
                    StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths_vptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ReadOnlySpan<T1> paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ReadOnlySpan<float> transformValues)
                where T1 : unmanaged
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, T1[] paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, float[] transformValues)
                where T1 : unmanaged
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    fixed (void* paths_ptr = paths)
                    {
                        StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                    }
                }
            }
            /// <inheritdoc cref="StencilThenCoverStrokePathInstancedNV(int, PathElementType, void*, uint, int, uint, InstancedPathCoverMode, PathTransformType, float*)"/>
            public static unsafe void StencilThenCoverStrokePathInstancedNV<T1>(int numPaths, PathElementType pathNameType, ref readonly T1 paths, uint pathBase, int reference, uint mask, InstancedPathCoverMode coverMode, PathTransformType transformType, ref readonly float transformValues)
                where T1 : unmanaged
            {
                fixed (void* paths_ptr = &paths)
                fixed (float* transformValues_ptr = &transformValues)
                {
                    StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths_ptr, pathBase, reference, mask, coverMode, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1hvNV(Half*)"/>
            public static unsafe void TexCoord1hvNV(ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    TexCoord1hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2hvNV(Half*)"/>
            public static unsafe void TexCoord2hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord2hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2hvNV(Half*)"/>
            public static unsafe void TexCoord2hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord2hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2hvNV(Half*)"/>
            public static unsafe void TexCoord2hvNV(ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    TexCoord2hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3hvNV(Half*)"/>
            public static unsafe void TexCoord3hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3hvNV(Half*)"/>
            public static unsafe void TexCoord3hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3hvNV(Half*)"/>
            public static unsafe void TexCoord3hvNV(ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    TexCoord3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4hvNV(Half*)"/>
            public static unsafe void TexCoord4hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4hvNV(Half*)"/>
            public static unsafe void TexCoord4hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    TexCoord4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4hvNV(Half*)"/>
            public static unsafe void TexCoord4hvNV(ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    TexCoord4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="TransformFeedbackAttribsNV(int, int*, All)"/>
            public static unsafe void TransformFeedbackAttribsNV(int count, ReadOnlySpan<int> attribs, All bufferMode)
            {
                fixed (int* attribs_ptr = attribs)
                {
                    TransformFeedbackAttribsNV(count, attribs_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackAttribsNV(int, int*, All)"/>
            public static unsafe void TransformFeedbackAttribsNV(int count, int[] attribs, All bufferMode)
            {
                fixed (int* attribs_ptr = attribs)
                {
                    TransformFeedbackAttribsNV(count, attribs_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackAttribsNV(int, int*, All)"/>
            public static unsafe void TransformFeedbackAttribsNV(int count, ref readonly int attribs, All bufferMode)
            {
                fixed (int* attribs_ptr = &attribs)
                {
                    TransformFeedbackAttribsNV(count, attribs_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackStreamAttribsNV(int, int*, int, int*, All)"/>
            public static unsafe void TransformFeedbackStreamAttribsNV(int count, ReadOnlySpan<int> attribs, int nbuffers, ReadOnlySpan<int> bufstreams, All bufferMode)
            {
                fixed (int* bufstreams_ptr = bufstreams)
                {
                    fixed (int* attribs_ptr = attribs)
                    {
                        TransformFeedbackStreamAttribsNV(count, attribs_ptr, nbuffers, bufstreams_ptr, bufferMode);
                    }
                }
            }
            /// <inheritdoc cref="TransformFeedbackStreamAttribsNV(int, int*, int, int*, All)"/>
            public static unsafe void TransformFeedbackStreamAttribsNV(int count, int[] attribs, int nbuffers, int[] bufstreams, All bufferMode)
            {
                fixed (int* bufstreams_ptr = bufstreams)
                {
                    fixed (int* attribs_ptr = attribs)
                    {
                        TransformFeedbackStreamAttribsNV(count, attribs_ptr, nbuffers, bufstreams_ptr, bufferMode);
                    }
                }
            }
            /// <inheritdoc cref="TransformFeedbackStreamAttribsNV(int, int*, int, int*, All)"/>
            public static unsafe void TransformFeedbackStreamAttribsNV(int count, ref readonly int attribs, int nbuffers, ref readonly int bufstreams, All bufferMode)
            {
                fixed (int* attribs_ptr = &attribs)
                fixed (int* bufstreams_ptr = &bufstreams)
                {
                    TransformFeedbackStreamAttribsNV(count, attribs_ptr, nbuffers, bufstreams_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackVaryingsNV(int, int, TransformFeedbackTokenNV*, TransformFeedbackBufferMode)"/>
            public static unsafe void TransformFeedbackVaryingsNV(int program, int count, ReadOnlySpan<TransformFeedbackTokenNV> locations, TransformFeedbackBufferMode bufferMode)
            {
                fixed (TransformFeedbackTokenNV* locations_ptr = locations)
                {
                    TransformFeedbackVaryingsNV(program, count, locations_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackVaryingsNV(int, int, TransformFeedbackTokenNV*, TransformFeedbackBufferMode)"/>
            public static unsafe void TransformFeedbackVaryingsNV(int program, int count, TransformFeedbackTokenNV[] locations, TransformFeedbackBufferMode bufferMode)
            {
                fixed (TransformFeedbackTokenNV* locations_ptr = locations)
                {
                    TransformFeedbackVaryingsNV(program, count, locations_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformFeedbackVaryingsNV(int, int, TransformFeedbackTokenNV*, TransformFeedbackBufferMode)"/>
            public static unsafe void TransformFeedbackVaryingsNV(int program, int count, ref readonly TransformFeedbackTokenNV locations, TransformFeedbackBufferMode bufferMode)
            {
                fixed (TransformFeedbackTokenNV* locations_ptr = &locations)
                {
                    TransformFeedbackVaryingsNV(program, count, locations_ptr, bufferMode);
                }
            }
            /// <inheritdoc cref="TransformPathNV(uint, uint, PathTransformType, float*)"/>
            public static unsafe void TransformPathNV(uint resultPath, uint srcPath, PathTransformType transformType, ReadOnlySpan<float> transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    TransformPathNV(resultPath, srcPath, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="TransformPathNV(uint, uint, PathTransformType, float*)"/>
            public static unsafe void TransformPathNV(uint resultPath, uint srcPath, PathTransformType transformType, float[] transformValues)
            {
                fixed (float* transformValues_ptr = transformValues)
                {
                    TransformPathNV(resultPath, srcPath, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="TransformPathNV(uint, uint, PathTransformType, float*)"/>
            public static unsafe void TransformPathNV(uint resultPath, uint srcPath, PathTransformType transformType, ref readonly float transformValues)
            {
                fixed (float* transformValues_ptr = &transformValues)
                {
                    TransformPathNV(resultPath, srcPath, transformType, transformValues_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vNV(int, int, long*)"/>
            public static unsafe void Uniform1i64vNV(int location, int count, ref readonly long value)
            {
                fixed (long* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vNV(int, int, long*)"/>
            public static unsafe void Uniform1i64vNV(int location, int count, ReadOnlySpan<long> value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1i64vNV(int, int, long*)"/>
            public static unsafe void Uniform1i64vNV(int location, int count, long[] value)
            {
                fixed (long* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform1i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vNV(int location, int count, ref readonly ulong value)
            {
                fixed (ulong* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vNV(int location, int count, ReadOnlySpan<ulong> value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform1ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform1ui64vNV(int location, int count, ulong[] value)
            {
                fixed (ulong* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform1ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, ref readonly Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, ref readonly System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2i64vNV(int, int, long*)"/>
            public static unsafe void Uniform2i64vNV(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform2i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, ref readonly Vector2 value)
            {
                fixed (Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, ReadOnlySpan<Vector2> value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, Vector2[] value)
            {
                fixed (Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, ref readonly System.Numerics.Vector2 value)
            {
                fixed (System.Numerics.Vector2* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector2> value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform2ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform2ui64vNV(int location, int count, System.Numerics.Vector2[] value)
            {
                fixed (System.Numerics.Vector2* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform2ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, ref readonly Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, ref readonly System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3i64vNV(int, int, long*)"/>
            public static unsafe void Uniform3i64vNV(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform3i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, ref readonly Vector3 value)
            {
                fixed (Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, ReadOnlySpan<Vector3> value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, Vector3[] value)
            {
                fixed (Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, ref readonly System.Numerics.Vector3 value)
            {
                fixed (System.Numerics.Vector3* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector3> value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform3ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform3ui64vNV(int location, int count, System.Numerics.Vector3[] value)
            {
                fixed (System.Numerics.Vector3* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform3ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, ref readonly Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, ref readonly System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4i64vNV(int, int, long*)"/>
            public static unsafe void Uniform4i64vNV(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    long* value_ptr = (long*)tmp_value;
                    Uniform4i64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, ref readonly Vector4 value)
            {
                fixed (Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, ReadOnlySpan<Vector4> value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, Vector4[] value)
            {
                fixed (Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, ref readonly System.Numerics.Vector4 value)
            {
                fixed (System.Numerics.Vector4* tmp_value = &value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, ReadOnlySpan<System.Numerics.Vector4> value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniform4ui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniform4ui64vNV(int location, int count, System.Numerics.Vector4[] value)
            {
                fixed (System.Numerics.Vector4* tmp_value = value)
                {
                    ulong* value_ptr = (ulong*)tmp_value;
                    Uniform4ui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64vNV(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64vNV(int location, int count, ReadOnlySpan<ulong> value)
            {
                fixed (ulong* value_ptr = value)
                {
                    UniformHandleui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64vNV(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64vNV(int location, int count, ulong[] value)
            {
                fixed (ulong* value_ptr = value)
                {
                    UniformHandleui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="UniformHandleui64vNV(int, int, ulong*)"/>
            public static unsafe void UniformHandleui64vNV(int location, int count, ref readonly ulong value)
            {
                fixed (ulong* value_ptr = &value)
                {
                    UniformHandleui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniformui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniformui64vNV(int location, int count, ReadOnlySpan<ulong> value)
            {
                fixed (ulong* value_ptr = value)
                {
                    Uniformui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniformui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniformui64vNV(int location, int count, ulong[] value)
            {
                fixed (ulong* value_ptr = value)
                {
                    Uniformui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="Uniformui64vNV(int, int, ulong*)"/>
            public static unsafe void Uniformui64vNV(int location, int count, ref readonly ulong value)
            {
                fixed (ulong* value_ptr = &value)
                {
                    Uniformui64vNV(location, count, value_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUGetSurfaceivNV(IntPtr, All, int, int*, int*)"/>
            public static unsafe void VDPAUGetSurfaceivNV(IntPtr surface, All pname, int count, Span<int> length, Span<int> values)
            {
                fixed (int* values_ptr = values)
                {
                    fixed (int* length_ptr = length)
                    {
                        VDPAUGetSurfaceivNV(surface, pname, count, length_ptr, values_ptr);
                    }
                }
            }
            /// <inheritdoc cref="VDPAUGetSurfaceivNV(IntPtr, All, int, int*, int*)"/>
            public static unsafe void VDPAUGetSurfaceivNV(IntPtr surface, All pname, int count, int[] length, int[] values)
            {
                fixed (int* values_ptr = values)
                {
                    fixed (int* length_ptr = length)
                    {
                        VDPAUGetSurfaceivNV(surface, pname, count, length_ptr, values_ptr);
                    }
                }
            }
            /// <inheritdoc cref="VDPAUGetSurfaceivNV(IntPtr, All, int, int*, int*)"/>
            public static unsafe void VDPAUGetSurfaceivNV(IntPtr surface, All pname, int count, ref int length, ref int values)
            {
                fixed (int* length_ptr = &length)
                fixed (int* values_ptr = &values)
                {
                    VDPAUGetSurfaceivNV(surface, pname, count, length_ptr, values_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUInitNV(void*, void*)"/>
            public static unsafe void VDPAUInitNV(IntPtr vdpDevice, IntPtr getProcAddress)
            {
                void* vdpDevice_vptr = (void*)vdpDevice;
                void* getProcAddress_vptr = (void*)getProcAddress;
                VDPAUInitNV(vdpDevice_vptr, getProcAddress_vptr);
            }
            /// <inheritdoc cref="VDPAUInitNV(void*, void*)"/>
            public static unsafe void VDPAUInitNV<T1, T2>(ReadOnlySpan<T1> vdpDevice, ReadOnlySpan<T2> getProcAddress)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* getProcAddress_ptr = getProcAddress)
                {
                    fixed (void* vdpDevice_ptr = vdpDevice)
                    {
                        VDPAUInitNV(vdpDevice_ptr, getProcAddress_ptr);
                    }
                }
            }
            /// <inheritdoc cref="VDPAUInitNV(void*, void*)"/>
            public static unsafe void VDPAUInitNV<T1, T2>(T1[] vdpDevice, T2[] getProcAddress)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* getProcAddress_ptr = getProcAddress)
                {
                    fixed (void* vdpDevice_ptr = vdpDevice)
                    {
                        VDPAUInitNV(vdpDevice_ptr, getProcAddress_ptr);
                    }
                }
            }
            /// <inheritdoc cref="VDPAUInitNV(void*, void*)"/>
            public static unsafe void VDPAUInitNV<T1, T2>(ref readonly T1 vdpDevice, ref readonly T2 getProcAddress)
                where T1 : unmanaged
                where T2 : unmanaged
            {
                fixed (void* vdpDevice_ptr = &vdpDevice)
                fixed (void* getProcAddress_ptr = &getProcAddress)
                {
                    VDPAUInitNV(vdpDevice_ptr, getProcAddress_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUMapSurfacesNV(int, IntPtr*)"/>
            public static unsafe void VDPAUMapSurfacesNV(int numSurfaces, ReadOnlySpan<IntPtr> surfaces)
            {
                fixed (IntPtr* surfaces_ptr = surfaces)
                {
                    VDPAUMapSurfacesNV(numSurfaces, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUMapSurfacesNV(int, IntPtr*)"/>
            public static unsafe void VDPAUMapSurfacesNV(int numSurfaces, IntPtr[] surfaces)
            {
                fixed (IntPtr* surfaces_ptr = surfaces)
                {
                    VDPAUMapSurfacesNV(numSurfaces, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUMapSurfacesNV(int, IntPtr*)"/>
            public static unsafe void VDPAUMapSurfacesNV(int numSurfaces, ref readonly IntPtr surfaces)
            {
                fixed (IntPtr* surfaces_ptr = &surfaces)
                {
                    VDPAUMapSurfacesNV(numSurfaces, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurfaceNV(IntPtr vdpSurface, All target, int numTextureNames, ReadOnlySpan<uint> textureNames)
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterOutputSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurfaceNV(IntPtr vdpSurface, All target, int numTextureNames, uint[] textureNames)
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterOutputSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurfaceNV(IntPtr vdpSurface, All target, int numTextureNames, ref readonly uint textureNames)
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterOutputSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurfaceNV<T1>(ReadOnlySpan<T1> vdpSurface, All target, int numTextureNames, ReadOnlySpan<uint> textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = textureNames)
                {
                    fixed (void* vdpSurface_ptr = vdpSurface)
                    {
                        returnValue = VDPAURegisterOutputSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurfaceNV<T1>(T1[] vdpSurface, All target, int numTextureNames, uint[] textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = textureNames)
                {
                    fixed (void* vdpSurface_ptr = vdpSurface)
                    {
                        returnValue = VDPAURegisterOutputSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterOutputSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterOutputSurfaceNV<T1>(ref readonly T1 vdpSurface, All target, int numTextureNames, ref readonly uint textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    returnValue = VDPAURegisterOutputSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceNV(IntPtr vdpSurface, All target, int numTextureNames, ReadOnlySpan<uint> textureNames)
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceNV(IntPtr vdpSurface, All target, int numTextureNames, uint[] textureNames)
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceNV(IntPtr vdpSurface, All target, int numTextureNames, ref readonly uint textureNames)
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurfaceNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceNV<T1>(ReadOnlySpan<T1> vdpSurface, All target, int numTextureNames, ReadOnlySpan<uint> textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = textureNames)
                {
                    fixed (void* vdpSurface_ptr = vdpSurface)
                    {
                        returnValue = VDPAURegisterVideoSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceNV<T1>(T1[] vdpSurface, All target, int numTextureNames, uint[] textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = textureNames)
                {
                    fixed (void* vdpSurface_ptr = vdpSurface)
                    {
                        returnValue = VDPAURegisterVideoSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceNV(void*, All, int, uint*)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceNV<T1>(ref readonly T1 vdpSurface, All target, int numTextureNames, ref readonly uint textureNames)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    returnValue = VDPAURegisterVideoSurfaceNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructureNV(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV(IntPtr vdpSurface, All target, int numTextureNames, ReadOnlySpan<uint> textureNames, bool isFrameStructure)
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructureNV(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV(IntPtr vdpSurface, All target, int numTextureNames, uint[] textureNames, bool isFrameStructure)
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructureNV(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV(IntPtr vdpSurface, All target, int numTextureNames, ref readonly uint textureNames, bool isFrameStructure)
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    void* vdpSurface_vptr = (void*)vdpSurface;
                    returnValue = VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_vptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructureNV(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV<T1>(ReadOnlySpan<T1> vdpSurface, All target, int numTextureNames, ReadOnlySpan<uint> textureNames, bool isFrameStructure)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = textureNames)
                {
                    fixed (void* vdpSurface_ptr = vdpSurface)
                    {
                        returnValue = VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructureNV(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV<T1>(T1[] vdpSurface, All target, int numTextureNames, uint[] textureNames, bool isFrameStructure)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (uint* textureNames_ptr = textureNames)
                {
                    fixed (void* vdpSurface_ptr = vdpSurface)
                    {
                        returnValue = VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAURegisterVideoSurfaceWithPictureStructureNV(void*, All, int, uint*, bool)"/>
            public static unsafe IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV<T1>(ref readonly T1 vdpSurface, All target, int numTextureNames, ref readonly uint textureNames, bool isFrameStructure)
                where T1 : unmanaged
            {
                IntPtr returnValue;
                fixed (void* vdpSurface_ptr = &vdpSurface)
                fixed (uint* textureNames_ptr = &textureNames)
                {
                    returnValue = VDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface_ptr, target, numTextureNames, textureNames_ptr, isFrameStructure);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VDPAUUnmapSurfacesNV(int, IntPtr*)"/>
            public static unsafe void VDPAUUnmapSurfacesNV(int numSurface, ReadOnlySpan<IntPtr> surfaces)
            {
                fixed (IntPtr* surfaces_ptr = surfaces)
                {
                    VDPAUUnmapSurfacesNV(numSurface, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUUnmapSurfacesNV(int, IntPtr*)"/>
            public static unsafe void VDPAUUnmapSurfacesNV(int numSurface, IntPtr[] surfaces)
            {
                fixed (IntPtr* surfaces_ptr = surfaces)
                {
                    VDPAUUnmapSurfacesNV(numSurface, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="VDPAUUnmapSurfacesNV(int, IntPtr*)"/>
            public static unsafe void VDPAUUnmapSurfacesNV(int numSurface, ref readonly IntPtr surfaces)
            {
                fixed (IntPtr* surfaces_ptr = &surfaces)
                {
                    VDPAUUnmapSurfacesNV(numSurface, surfaces_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2hvNV(Half*)"/>
            public static unsafe void Vertex2hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex2hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2hvNV(Half*)"/>
            public static unsafe void Vertex2hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex2hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2hvNV(Half*)"/>
            public static unsafe void Vertex2hvNV(ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Vertex2hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3hvNV(Half*)"/>
            public static unsafe void Vertex3hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3hvNV(Half*)"/>
            public static unsafe void Vertex3hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3hvNV(Half*)"/>
            public static unsafe void Vertex3hvNV(ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Vertex3hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4hvNV(Half*)"/>
            public static unsafe void Vertex4hvNV(ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4hvNV(Half*)"/>
            public static unsafe void Vertex4hvNV(Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    Vertex4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4hvNV(Half*)"/>
            public static unsafe void Vertex4hvNV(ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    Vertex4hvNV(v_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRangeNV(int, void*)"/>
            public static unsafe void VertexArrayRangeNV(int length, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexArrayRangeNV(length, pointer_vptr);
            }
            /// <inheritdoc cref="VertexArrayRangeNV(int, void*)"/>
            public static unsafe void VertexArrayRangeNV<T1>(int length, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexArrayRangeNV(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRangeNV(int, void*)"/>
            public static unsafe void VertexArrayRangeNV<T1>(int length, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexArrayRangeNV(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexArrayRangeNV(int, void*)"/>
            public static unsafe void VertexArrayRangeNV<T1>(int length, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexArrayRangeNV(length, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib1dvNV(uint index, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib1dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib1fvNV(uint index, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib1fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib1hvNV(uint index, ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttrib1hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib1svNV(uint, short*)"/>
            public static unsafe void VertexAttrib1svNV(uint index, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib1svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib2dvNV(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib2dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib2dvNV(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib2dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib2dvNV(uint index, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib2dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib2fvNV(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib2fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib2fvNV(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib2fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib2fvNV(uint index, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib2fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib2hvNV(uint index, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib2hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib2hvNV(uint index, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib2hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib2hvNV(uint index, ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttrib2hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2svNV(uint, short*)"/>
            public static unsafe void VertexAttrib2svNV(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib2svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2svNV(uint, short*)"/>
            public static unsafe void VertexAttrib2svNV(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib2svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib2svNV(uint, short*)"/>
            public static unsafe void VertexAttrib2svNV(uint index, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib2svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib3dvNV(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib3dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib3dvNV(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib3dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib3dvNV(uint index, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib3dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib3fvNV(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib3fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib3fvNV(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib3fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib3fvNV(uint index, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib3fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib3hvNV(uint index, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib3hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib3hvNV(uint index, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib3hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib3hvNV(uint index, ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttrib3hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3svNV(uint, short*)"/>
            public static unsafe void VertexAttrib3svNV(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib3svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3svNV(uint, short*)"/>
            public static unsafe void VertexAttrib3svNV(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib3svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib3svNV(uint, short*)"/>
            public static unsafe void VertexAttrib3svNV(uint index, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib3svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib4dvNV(uint index, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib4dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib4dvNV(uint index, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttrib4dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4dvNV(uint, double*)"/>
            public static unsafe void VertexAttrib4dvNV(uint index, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttrib4dvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib4fvNV(uint index, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib4fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib4fvNV(uint index, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttrib4fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4fvNV(uint, float*)"/>
            public static unsafe void VertexAttrib4fvNV(uint index, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttrib4fvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib4hvNV(uint index, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib4hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib4hvNV(uint index, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttrib4hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4hvNV(uint, Half*)"/>
            public static unsafe void VertexAttrib4hvNV(uint index, ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttrib4hvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4svNV(uint, short*)"/>
            public static unsafe void VertexAttrib4svNV(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4svNV(uint, short*)"/>
            public static unsafe void VertexAttrib4svNV(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttrib4svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4svNV(uint, short*)"/>
            public static unsafe void VertexAttrib4svNV(uint index, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttrib4svNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubvNV(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubvNV(uint index, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4ubvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubvNV(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubvNV(uint index, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttrib4ubvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttrib4ubvNV(uint, byte*)"/>
            public static unsafe void VertexAttrib4ubvNV(uint index, ref readonly byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttrib4ubvNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI1ivEXT(uint index, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI1ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI1uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI1uivEXT(uint index, ref readonly uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI1uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI2ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI2ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI2ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI2ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI2ivEXT(uint index, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI2ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI2uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI2uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI2uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI2uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI2uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI2uivEXT(uint index, ref readonly uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI2uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI3ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI3ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI3ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI3ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI3ivEXT(uint index, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI3ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI3uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI3uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI3uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI3uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI3uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI3uivEXT(uint index, ref readonly uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI3uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bvEXT(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bvEXT(uint index, ReadOnlySpan<sbyte> v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttribI4bvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bvEXT(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bvEXT(uint index, sbyte[] v)
            {
                fixed (sbyte* v_ptr = v)
                {
                    VertexAttribI4bvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4bvEXT(uint, sbyte*)"/>
            public static unsafe void VertexAttribI4bvEXT(uint index, ref readonly sbyte v)
            {
                fixed (sbyte* v_ptr = &v)
                {
                    VertexAttribI4bvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI4ivEXT(uint index, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI4ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI4ivEXT(uint index, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    VertexAttribI4ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ivEXT(uint, int*)"/>
            public static unsafe void VertexAttribI4ivEXT(uint index, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    VertexAttribI4ivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4svEXT(uint, short*)"/>
            public static unsafe void VertexAttribI4svEXT(uint index, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribI4svEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4svEXT(uint, short*)"/>
            public static unsafe void VertexAttribI4svEXT(uint index, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribI4svEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4svEXT(uint, short*)"/>
            public static unsafe void VertexAttribI4svEXT(uint index, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribI4svEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubvEXT(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubvEXT(uint index, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttribI4ubvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubvEXT(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubvEXT(uint index, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttribI4ubvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4ubvEXT(uint, byte*)"/>
            public static unsafe void VertexAttribI4ubvEXT(uint index, ref readonly byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttribI4ubvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI4uivEXT(uint index, ReadOnlySpan<uint> v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI4uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI4uivEXT(uint index, uint[] v)
            {
                fixed (uint* v_ptr = v)
                {
                    VertexAttribI4uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4uivEXT(uint, uint*)"/>
            public static unsafe void VertexAttribI4uivEXT(uint index, ref readonly uint v)
            {
                fixed (uint* v_ptr = &v)
                {
                    VertexAttribI4uivEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usvEXT(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usvEXT(uint index, ReadOnlySpan<ushort> v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttribI4usvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usvEXT(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usvEXT(uint index, ushort[] v)
            {
                fixed (ushort* v_ptr = v)
                {
                    VertexAttribI4usvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribI4usvEXT(uint, ushort*)"/>
            public static unsafe void VertexAttribI4usvEXT(uint index, ref readonly ushort v)
            {
                fixed (ushort* v_ptr = &v)
                {
                    VertexAttribI4usvEXT(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT(uint index, int size, VertexAttribIType type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexAttribIPointerEXT(index, size, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT<T1>(uint index, int size, VertexAttribIType type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT<T1>(uint index, int size, VertexAttribIType type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribIPointerEXT(uint, int, VertexAttribIType, int, void*)"/>
            public static unsafe void VertexAttribIPointerEXT<T1>(uint index, int size, VertexAttribIType type, int stride, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexAttribIPointerEXT(index, size, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL1i64vNV(uint index, ref readonly long v)
            {
                fixed (long* v_ptr = &v)
                {
                    VertexAttribL1i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL1ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL1ui64vNV(uint index, ref readonly ulong v)
            {
                fixed (ulong* v_ptr = &v)
                {
                    VertexAttribL1ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL2i64vNV(uint index, ReadOnlySpan<long> v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL2i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL2i64vNV(uint index, long[] v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL2i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL2i64vNV(uint index, ref readonly long v)
            {
                fixed (long* v_ptr = &v)
                {
                    VertexAttribL2i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL2ui64vNV(uint index, ReadOnlySpan<ulong> v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL2ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL2ui64vNV(uint index, ulong[] v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL2ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL2ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL2ui64vNV(uint index, ref readonly ulong v)
            {
                fixed (ulong* v_ptr = &v)
                {
                    VertexAttribL2ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL3i64vNV(uint index, ReadOnlySpan<long> v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL3i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL3i64vNV(uint index, long[] v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL3i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL3i64vNV(uint index, ref readonly long v)
            {
                fixed (long* v_ptr = &v)
                {
                    VertexAttribL3i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL3ui64vNV(uint index, ReadOnlySpan<ulong> v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL3ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL3ui64vNV(uint index, ulong[] v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL3ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL3ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL3ui64vNV(uint index, ref readonly ulong v)
            {
                fixed (ulong* v_ptr = &v)
                {
                    VertexAttribL3ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL4i64vNV(uint index, ReadOnlySpan<long> v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL4i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL4i64vNV(uint index, long[] v)
            {
                fixed (long* v_ptr = v)
                {
                    VertexAttribL4i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4i64vNV(uint, long*)"/>
            public static unsafe void VertexAttribL4i64vNV(uint index, ref readonly long v)
            {
                fixed (long* v_ptr = &v)
                {
                    VertexAttribL4i64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL4ui64vNV(uint index, ReadOnlySpan<ulong> v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL4ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL4ui64vNV(uint index, ulong[] v)
            {
                fixed (ulong* v_ptr = v)
                {
                    VertexAttribL4ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribL4ui64vNV(uint, ulong*)"/>
            public static unsafe void VertexAttribL4ui64vNV(uint index, ref readonly ulong v)
            {
                fixed (ulong* v_ptr = &v)
                {
                    VertexAttribL4ui64vNV(index, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointerNV(uint, int, VertexAttribEnumNV, int, void*)"/>
            public static unsafe void VertexAttribPointerNV(uint index, int fsize, VertexAttribEnumNV type, int stride, IntPtr pointer)
            {
                void* pointer_vptr = (void*)pointer;
                VertexAttribPointerNV(index, fsize, type, stride, pointer_vptr);
            }
            /// <inheritdoc cref="VertexAttribPointerNV(uint, int, VertexAttribEnumNV, int, void*)"/>
            public static unsafe void VertexAttribPointerNV<T1>(uint index, int fsize, VertexAttribEnumNV type, int stride, ReadOnlySpan<T1> pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribPointerNV(index, fsize, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointerNV(uint, int, VertexAttribEnumNV, int, void*)"/>
            public static unsafe void VertexAttribPointerNV<T1>(uint index, int fsize, VertexAttribEnumNV type, int stride, T1[] pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = pointer)
                {
                    VertexAttribPointerNV(index, fsize, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribPointerNV(uint, int, VertexAttribEnumNV, int, void*)"/>
            public static unsafe void VertexAttribPointerNV<T1>(uint index, int fsize, VertexAttribEnumNV type, int stride, ref readonly T1 pointer)
                where T1 : unmanaged
            {
                fixed (void* pointer_ptr = &pointer)
                {
                    VertexAttribPointerNV(index, fsize, type, stride, pointer_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs1dvNV(uint index, int count, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribs1dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs1dvNV(uint index, int count, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribs1dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs1dvNV(uint index, int count, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribs1dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs1fvNV(uint index, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttribs1fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs1fvNV(uint index, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttribs1fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs1fvNV(uint index, int count, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttribs1fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs1hvNV(uint index, int n, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs1hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs1hvNV(uint index, int n, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs1hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs1hvNV(uint index, int n, ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttribs1hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs1svNV(uint index, int count, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribs1svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs1svNV(uint index, int count, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribs1svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs1svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs1svNV(uint index, int count, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribs1svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs2dvNV(uint index, int count, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribs2dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs2dvNV(uint index, int count, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribs2dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs2dvNV(uint index, int count, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribs2dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs2fvNV(uint index, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttribs2fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs2fvNV(uint index, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttribs2fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs2fvNV(uint index, int count, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttribs2fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs2hvNV(uint index, int n, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs2hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs2hvNV(uint index, int n, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs2hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs2hvNV(uint index, int n, ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttribs2hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs2svNV(uint index, int count, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribs2svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs2svNV(uint index, int count, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribs2svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs2svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs2svNV(uint index, int count, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribs2svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs3dvNV(uint index, int count, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribs3dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs3dvNV(uint index, int count, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribs3dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs3dvNV(uint index, int count, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribs3dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs3fvNV(uint index, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttribs3fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs3fvNV(uint index, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttribs3fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs3fvNV(uint index, int count, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttribs3fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs3hvNV(uint index, int n, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs3hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs3hvNV(uint index, int n, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs3hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs3hvNV(uint index, int n, ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttribs3hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs3svNV(uint index, int count, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribs3svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs3svNV(uint index, int count, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribs3svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs3svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs3svNV(uint index, int count, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribs3svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs4dvNV(uint index, int count, ReadOnlySpan<double> v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribs4dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs4dvNV(uint index, int count, double[] v)
            {
                fixed (double* v_ptr = v)
                {
                    VertexAttribs4dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4dvNV(uint, int, double*)"/>
            public static unsafe void VertexAttribs4dvNV(uint index, int count, ref readonly double v)
            {
                fixed (double* v_ptr = &v)
                {
                    VertexAttribs4dvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs4fvNV(uint index, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttribs4fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs4fvNV(uint index, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    VertexAttribs4fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4fvNV(uint, int, float*)"/>
            public static unsafe void VertexAttribs4fvNV(uint index, int count, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    VertexAttribs4fvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs4hvNV(uint index, int n, ReadOnlySpan<Half> v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs4hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs4hvNV(uint index, int n, Half[] v)
            {
                fixed (Half* v_ptr = v)
                {
                    VertexAttribs4hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4hvNV(uint, int, Half*)"/>
            public static unsafe void VertexAttribs4hvNV(uint index, int n, ref readonly Half v)
            {
                fixed (Half* v_ptr = &v)
                {
                    VertexAttribs4hvNV(index, n, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs4svNV(uint index, int count, ReadOnlySpan<short> v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribs4svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs4svNV(uint index, int count, short[] v)
            {
                fixed (short* v_ptr = v)
                {
                    VertexAttribs4svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4svNV(uint, int, short*)"/>
            public static unsafe void VertexAttribs4svNV(uint index, int count, ref readonly short v)
            {
                fixed (short* v_ptr = &v)
                {
                    VertexAttribs4svNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4ubvNV(uint, int, byte*)"/>
            public static unsafe void VertexAttribs4ubvNV(uint index, int count, ReadOnlySpan<byte> v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttribs4ubvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4ubvNV(uint, int, byte*)"/>
            public static unsafe void VertexAttribs4ubvNV(uint index, int count, byte[] v)
            {
                fixed (byte* v_ptr = v)
                {
                    VertexAttribs4ubvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexAttribs4ubvNV(uint, int, byte*)"/>
            public static unsafe void VertexAttribs4ubvNV(uint index, int count, ref readonly byte v)
            {
                fixed (byte* v_ptr = &v)
                {
                    VertexAttribs4ubvNV(index, count, v_ptr);
                }
            }
            /// <inheritdoc cref="VertexWeighthvNV(Half*)"/>
            public static unsafe void VertexWeighthvNV(ref readonly Half weight)
            {
                fixed (Half* weight_ptr = &weight)
                {
                    VertexWeighthvNV(weight_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureNV(uint, uint*, ulong*)"/>
            public static unsafe All VideoCaptureNV(uint video_capture_slot, Span<uint> sequence_num, Span<ulong> capture_time)
            {
                All returnValue;
                fixed (ulong* capture_time_ptr = capture_time)
                {
                    fixed (uint* sequence_num_ptr = sequence_num)
                    {
                        returnValue = VideoCaptureNV(video_capture_slot, sequence_num_ptr, capture_time_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VideoCaptureNV(uint, uint*, ulong*)"/>
            public static unsafe All VideoCaptureNV(uint video_capture_slot, uint[] sequence_num, ulong[] capture_time)
            {
                All returnValue;
                fixed (ulong* capture_time_ptr = capture_time)
                {
                    fixed (uint* sequence_num_ptr = sequence_num)
                    {
                        returnValue = VideoCaptureNV(video_capture_slot, sequence_num_ptr, capture_time_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="VideoCaptureNV(uint, uint*, ulong*)"/>
            public static unsafe All VideoCaptureNV(uint video_capture_slot, ref uint sequence_num, ref ulong capture_time)
            {
                All returnValue;
                fixed (uint* sequence_num_ptr = &sequence_num)
                fixed (ulong* capture_time_ptr = &capture_time)
                {
                    returnValue = VideoCaptureNV(video_capture_slot, sequence_num_ptr, capture_time_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterdvNV(uint, uint, All, double*)"/>
            public static unsafe void VideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, All pname, ReadOnlySpan<double> parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterdvNV(uint, uint, All, double*)"/>
            public static unsafe void VideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, All pname, double[] parameters)
            {
                fixed (double* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterdvNV(uint, uint, All, double*)"/>
            public static unsafe void VideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, All pname, ref readonly double parameters)
            {
                fixed (double* parameters_ptr = &parameters)
                {
                    VideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterfvNV(uint, uint, All, float*)"/>
            public static unsafe void VideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, All pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterfvNV(uint, uint, All, float*)"/>
            public static unsafe void VideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, All pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterfvNV(uint, uint, All, float*)"/>
            public static unsafe void VideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, All pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    VideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterivNV(uint, uint, All, int*)"/>
            public static unsafe void VideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, All pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterivNV(uint, uint, All, int*)"/>
            public static unsafe void VideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    VideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="VideoCaptureStreamParameterivNV(uint, uint, All, int*)"/>
            public static unsafe void VideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, All pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    VideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="WeightPathsNV(uint, int, uint*, float*)"/>
            public static unsafe void WeightPathsNV(uint resultPath, int numPaths, ReadOnlySpan<uint> paths, ReadOnlySpan<float> weights)
            {
                fixed (float* weights_ptr = weights)
                {
                    fixed (uint* paths_ptr = paths)
                    {
                        WeightPathsNV(resultPath, numPaths, paths_ptr, weights_ptr);
                    }
                }
            }
            /// <inheritdoc cref="WeightPathsNV(uint, int, uint*, float*)"/>
            public static unsafe void WeightPathsNV(uint resultPath, int numPaths, uint[] paths, float[] weights)
            {
                fixed (float* weights_ptr = weights)
                {
                    fixed (uint* paths_ptr = paths)
                    {
                        WeightPathsNV(resultPath, numPaths, paths_ptr, weights_ptr);
                    }
                }
            }
            /// <inheritdoc cref="WeightPathsNV(uint, int, uint*, float*)"/>
            public static unsafe void WeightPathsNV(uint resultPath, int numPaths, ref readonly uint paths, ref readonly float weights)
            {
                fixed (uint* paths_ptr = &paths)
                fixed (float* weights_ptr = &weights)
                {
                    WeightPathsNV(resultPath, numPaths, paths_ptr, weights_ptr);
                }
            }
        }
        public static unsafe partial class NVX
        {
            /// <inheritdoc cref="AsyncCopyBufferSubDataNVX(int, uint*, ulong*, uint, uint, int, int, IntPtr, IntPtr, nint, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyBufferSubDataNVX(int waitSemaphoreCount, ReadOnlySpan<uint> waitSemaphoreArray, ReadOnlySpan<ulong> fenceValueArray, uint readGpu, uint writeGpuMask, int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size, int signalSemaphoreCount, ReadOnlySpan<uint> signalSemaphoreArray, ReadOnlySpan<ulong> signalValueArray)
            {
                uint returnValue;
                fixed (ulong* signalValueArray_ptr = signalValueArray)
                {
                    fixed (uint* signalSemaphoreArray_ptr = signalSemaphoreArray)
                    {
                        fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                        {
                            fixed (uint* waitSemaphoreArray_ptr = waitSemaphoreArray)
                            {
                                returnValue = AsyncCopyBufferSubDataNVX(waitSemaphoreCount, waitSemaphoreArray_ptr, fenceValueArray_ptr, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AsyncCopyBufferSubDataNVX(int, uint*, ulong*, uint, uint, int, int, IntPtr, IntPtr, nint, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyBufferSubDataNVX(int waitSemaphoreCount, uint[] waitSemaphoreArray, ulong[] fenceValueArray, uint readGpu, uint writeGpuMask, int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size, int signalSemaphoreCount, uint[] signalSemaphoreArray, ulong[] signalValueArray)
            {
                uint returnValue;
                fixed (ulong* signalValueArray_ptr = signalValueArray)
                {
                    fixed (uint* signalSemaphoreArray_ptr = signalSemaphoreArray)
                    {
                        fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                        {
                            fixed (uint* waitSemaphoreArray_ptr = waitSemaphoreArray)
                            {
                                returnValue = AsyncCopyBufferSubDataNVX(waitSemaphoreCount, waitSemaphoreArray_ptr, fenceValueArray_ptr, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AsyncCopyBufferSubDataNVX(int, uint*, ulong*, uint, uint, int, int, IntPtr, IntPtr, nint, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyBufferSubDataNVX(int waitSemaphoreCount, ref readonly uint waitSemaphoreArray, ref readonly ulong fenceValueArray, uint readGpu, uint writeGpuMask, int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size, int signalSemaphoreCount, ref readonly uint signalSemaphoreArray, ref readonly ulong signalValueArray)
            {
                uint returnValue;
                fixed (uint* waitSemaphoreArray_ptr = &waitSemaphoreArray)
                fixed (ulong* fenceValueArray_ptr = &fenceValueArray)
                fixed (uint* signalSemaphoreArray_ptr = &signalSemaphoreArray)
                fixed (ulong* signalValueArray_ptr = &signalValueArray)
                {
                    returnValue = AsyncCopyBufferSubDataNVX(waitSemaphoreCount, waitSemaphoreArray_ptr, fenceValueArray_ptr, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="AsyncCopyImageSubDataNVX(int, uint*, ulong*, uint, uint, uint, All, int, int, int, int, uint, All, int, int, int, int, int, int, int, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyImageSubDataNVX(int waitSemaphoreCount, ReadOnlySpan<uint> waitSemaphoreArray, ReadOnlySpan<ulong> waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, All srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, All dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, ReadOnlySpan<uint> signalSemaphoreArray, ReadOnlySpan<ulong> signalValueArray)
            {
                uint returnValue;
                fixed (ulong* signalValueArray_ptr = signalValueArray)
                {
                    fixed (uint* signalSemaphoreArray_ptr = signalSemaphoreArray)
                    {
                        fixed (ulong* waitValueArray_ptr = waitValueArray)
                        {
                            fixed (uint* waitSemaphoreArray_ptr = waitSemaphoreArray)
                            {
                                returnValue = AsyncCopyImageSubDataNVX(waitSemaphoreCount, waitSemaphoreArray_ptr, waitValueArray_ptr, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AsyncCopyImageSubDataNVX(int, uint*, ulong*, uint, uint, uint, All, int, int, int, int, uint, All, int, int, int, int, int, int, int, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyImageSubDataNVX(int waitSemaphoreCount, uint[] waitSemaphoreArray, ulong[] waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, All srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, All dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, uint[] signalSemaphoreArray, ulong[] signalValueArray)
            {
                uint returnValue;
                fixed (ulong* signalValueArray_ptr = signalValueArray)
                {
                    fixed (uint* signalSemaphoreArray_ptr = signalSemaphoreArray)
                    {
                        fixed (ulong* waitValueArray_ptr = waitValueArray)
                        {
                            fixed (uint* waitSemaphoreArray_ptr = waitSemaphoreArray)
                            {
                                returnValue = AsyncCopyImageSubDataNVX(waitSemaphoreCount, waitSemaphoreArray_ptr, waitValueArray_ptr, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                            }
                        }
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="AsyncCopyImageSubDataNVX(int, uint*, ulong*, uint, uint, uint, All, int, int, int, int, uint, All, int, int, int, int, int, int, int, int, uint*, ulong*)"/>
            public static unsafe uint AsyncCopyImageSubDataNVX(int waitSemaphoreCount, ref readonly uint waitSemaphoreArray, ref readonly ulong waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, All srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, All dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, ref readonly uint signalSemaphoreArray, ref readonly ulong signalValueArray)
            {
                uint returnValue;
                fixed (uint* waitSemaphoreArray_ptr = &waitSemaphoreArray)
                fixed (ulong* waitValueArray_ptr = &waitValueArray)
                fixed (uint* signalSemaphoreArray_ptr = &signalSemaphoreArray)
                fixed (ulong* signalValueArray_ptr = &signalValueArray)
                {
                    returnValue = AsyncCopyImageSubDataNVX(waitSemaphoreCount, waitSemaphoreArray_ptr, waitValueArray_ptr, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray_ptr, signalValueArray_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="ClientWaitSemaphoreui64NVX(int, uint*, ulong*)"/>
            public static unsafe void ClientWaitSemaphoreui64NVX(int fenceObjectCount, ReadOnlySpan<uint> semaphoreArray, ReadOnlySpan<ulong> fenceValueArray)
            {
                fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                {
                    fixed (uint* semaphoreArray_ptr = semaphoreArray)
                    {
                        ClientWaitSemaphoreui64NVX(fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ClientWaitSemaphoreui64NVX(int, uint*, ulong*)"/>
            public static unsafe void ClientWaitSemaphoreui64NVX(int fenceObjectCount, uint[] semaphoreArray, ulong[] fenceValueArray)
            {
                fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                {
                    fixed (uint* semaphoreArray_ptr = semaphoreArray)
                    {
                        ClientWaitSemaphoreui64NVX(fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ClientWaitSemaphoreui64NVX(int, uint*, ulong*)"/>
            public static unsafe void ClientWaitSemaphoreui64NVX(int fenceObjectCount, ref readonly uint semaphoreArray, ref readonly ulong fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = &semaphoreArray)
                fixed (ulong* fenceValueArray_ptr = &fenceValueArray)
                {
                    ClientWaitSemaphoreui64NVX(fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                }
            }
            /// <inheritdoc cref="LGPUNamedBufferSubDataNVX(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void LGPUNamedBufferSubDataNVX(uint gpuMask, int buffer, IntPtr offset, nint size, IntPtr data)
            {
                void* data_vptr = (void*)data;
                LGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data_vptr);
            }
            /// <inheritdoc cref="LGPUNamedBufferSubDataNVX(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void LGPUNamedBufferSubDataNVX<T1>(uint gpuMask, int buffer, IntPtr offset, nint size, ReadOnlySpan<T1> data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    LGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="LGPUNamedBufferSubDataNVX(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void LGPUNamedBufferSubDataNVX<T1>(uint gpuMask, int buffer, IntPtr offset, nint size, T1[] data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = data)
                {
                    LGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="LGPUNamedBufferSubDataNVX(uint, int, IntPtr, nint, void*)"/>
            public static unsafe void LGPUNamedBufferSubDataNVX<T1>(uint gpuMask, int buffer, IntPtr offset, nint size, ref readonly T1 data)
                where T1 : unmanaged
            {
                fixed (void* data_ptr = &data)
                {
                    LGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data_ptr);
                }
            }
            /// <inheritdoc cref="MulticastScissorArrayvNVX(uint, uint, int, int*)"/>
            public static unsafe void MulticastScissorArrayvNVX(uint gpu, uint first, int count, ReadOnlySpan<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    MulticastScissorArrayvNVX(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastScissorArrayvNVX(uint, uint, int, int*)"/>
            public static unsafe void MulticastScissorArrayvNVX(uint gpu, uint first, int count, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    MulticastScissorArrayvNVX(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastScissorArrayvNVX(uint, uint, int, int*)"/>
            public static unsafe void MulticastScissorArrayvNVX(uint gpu, uint first, int count, ref readonly int v)
            {
                fixed (int* v_ptr = &v)
                {
                    MulticastScissorArrayvNVX(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastViewportArrayvNVX(uint, uint, int, float*)"/>
            public static unsafe void MulticastViewportArrayvNVX(uint gpu, uint first, int count, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    MulticastViewportArrayvNVX(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastViewportArrayvNVX(uint, uint, int, float*)"/>
            public static unsafe void MulticastViewportArrayvNVX(uint gpu, uint first, int count, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    MulticastViewportArrayvNVX(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="MulticastViewportArrayvNVX(uint, uint, int, float*)"/>
            public static unsafe void MulticastViewportArrayvNVX(uint gpu, uint first, int count, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    MulticastViewportArrayvNVX(gpu, first, count, v_ptr);
                }
            }
            /// <inheritdoc cref="SignalSemaphoreui64NVX(uint, int, uint*, ulong*)"/>
            public static unsafe void SignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, ReadOnlySpan<uint> semaphoreArray, ReadOnlySpan<ulong> fenceValueArray)
            {
                fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                {
                    fixed (uint* semaphoreArray_ptr = semaphoreArray)
                    {
                        SignalSemaphoreui64NVX(signalGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SignalSemaphoreui64NVX(uint, int, uint*, ulong*)"/>
            public static unsafe void SignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, uint[] semaphoreArray, ulong[] fenceValueArray)
            {
                fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                {
                    fixed (uint* semaphoreArray_ptr = semaphoreArray)
                    {
                        SignalSemaphoreui64NVX(signalGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="SignalSemaphoreui64NVX(uint, int, uint*, ulong*)"/>
            public static unsafe void SignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, ref readonly uint semaphoreArray, ref readonly ulong fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = &semaphoreArray)
                fixed (ulong* fenceValueArray_ptr = &fenceValueArray)
                {
                    SignalSemaphoreui64NVX(signalGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                }
            }
            /// <inheritdoc cref="WaitSemaphoreui64NVX(uint, int, uint*, ulong*)"/>
            public static unsafe void WaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, ReadOnlySpan<uint> semaphoreArray, ReadOnlySpan<ulong> fenceValueArray)
            {
                fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                {
                    fixed (uint* semaphoreArray_ptr = semaphoreArray)
                    {
                        WaitSemaphoreui64NVX(waitGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="WaitSemaphoreui64NVX(uint, int, uint*, ulong*)"/>
            public static unsafe void WaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, uint[] semaphoreArray, ulong[] fenceValueArray)
            {
                fixed (ulong* fenceValueArray_ptr = fenceValueArray)
                {
                    fixed (uint* semaphoreArray_ptr = semaphoreArray)
                    {
                        WaitSemaphoreui64NVX(waitGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                    }
                }
            }
            /// <inheritdoc cref="WaitSemaphoreui64NVX(uint, int, uint*, ulong*)"/>
            public static unsafe void WaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, ref readonly uint semaphoreArray, ref readonly ulong fenceValueArray)
            {
                fixed (uint* semaphoreArray_ptr = &semaphoreArray)
                fixed (ulong* fenceValueArray_ptr = &fenceValueArray)
                {
                    WaitSemaphoreui64NVX(waitGpu, fenceObjectCount, semaphoreArray_ptr, fenceValueArray_ptr);
                }
            }
        }
        public static unsafe partial class OES
        {
            /// <inheritdoc cref="BitmapxOES(int, int, int, int, int, int, byte*)"/>
            public static unsafe void BitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, ReadOnlySpan<byte> bitmap)
            {
                fixed (byte* bitmap_ptr = bitmap)
                {
                    BitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
                }
            }
            /// <inheritdoc cref="BitmapxOES(int, int, int, int, int, int, byte*)"/>
            public static unsafe void BitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, byte[] bitmap)
            {
                fixed (byte* bitmap_ptr = bitmap)
                {
                    BitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
                }
            }
            /// <inheritdoc cref="BitmapxOES(int, int, int, int, int, int, byte*)"/>
            public static unsafe void BitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, ref readonly byte bitmap)
            {
                fixed (byte* bitmap_ptr = &bitmap)
                {
                    BitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanefOES(ClipPlaneName, float*)"/>
            public static unsafe void ClipPlanefOES(ClipPlaneName plane, ReadOnlySpan<float> equation)
            {
                fixed (float* equation_ptr = equation)
                {
                    ClipPlanefOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanefOES(ClipPlaneName, float*)"/>
            public static unsafe void ClipPlanefOES(ClipPlaneName plane, float[] equation)
            {
                fixed (float* equation_ptr = equation)
                {
                    ClipPlanefOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanefOES(ClipPlaneName, float*)"/>
            public static unsafe void ClipPlanefOES(ClipPlaneName plane, ref readonly float equation)
            {
                fixed (float* equation_ptr = &equation)
                {
                    ClipPlanefOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanexOES(ClipPlaneName, int*)"/>
            public static unsafe void ClipPlanexOES(ClipPlaneName plane, ReadOnlySpan<int> equation)
            {
                fixed (int* equation_ptr = equation)
                {
                    ClipPlanexOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanexOES(ClipPlaneName, int*)"/>
            public static unsafe void ClipPlanexOES(ClipPlaneName plane, int[] equation)
            {
                fixed (int* equation_ptr = equation)
                {
                    ClipPlanexOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="ClipPlanexOES(ClipPlaneName, int*)"/>
            public static unsafe void ClipPlanexOES(ClipPlaneName plane, ref readonly int equation)
            {
                fixed (int* equation_ptr = &equation)
                {
                    ClipPlanexOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="Color3xvOES(int*)"/>
            public static unsafe void Color3xvOES(ReadOnlySpan<int> components)
            {
                fixed (int* components_ptr = components)
                {
                    Color3xvOES(components_ptr);
                }
            }
            /// <inheritdoc cref="Color3xvOES(int*)"/>
            public static unsafe void Color3xvOES(int[] components)
            {
                fixed (int* components_ptr = components)
                {
                    Color3xvOES(components_ptr);
                }
            }
            /// <inheritdoc cref="Color3xvOES(int*)"/>
            public static unsafe void Color3xvOES(ref readonly int components)
            {
                fixed (int* components_ptr = &components)
                {
                    Color3xvOES(components_ptr);
                }
            }
            /// <inheritdoc cref="Color4xvOES(int*)"/>
            public static unsafe void Color4xvOES(ReadOnlySpan<int> components)
            {
                fixed (int* components_ptr = components)
                {
                    Color4xvOES(components_ptr);
                }
            }
            /// <inheritdoc cref="Color4xvOES(int*)"/>
            public static unsafe void Color4xvOES(int[] components)
            {
                fixed (int* components_ptr = components)
                {
                    Color4xvOES(components_ptr);
                }
            }
            /// <inheritdoc cref="Color4xvOES(int*)"/>
            public static unsafe void Color4xvOES(ref readonly int components)
            {
                fixed (int* components_ptr = &components)
                {
                    Color4xvOES(components_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterxvOES(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameterxvOES(ConvolutionTargetEXT target, ConvolutionParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterxvOES(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameterxvOES(ConvolutionTargetEXT target, ConvolutionParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ConvolutionParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ConvolutionParameterxvOES(ConvolutionTargetEXT, ConvolutionParameter, int*)"/>
            public static unsafe void ConvolutionParameterxvOES(ConvolutionTargetEXT target, ConvolutionParameter pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ConvolutionParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord1xvOES(int*)"/>
            public static unsafe void EvalCoord1xvOES(ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    EvalCoord1xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord2xvOES(int*)"/>
            public static unsafe void EvalCoord2xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    EvalCoord2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord2xvOES(int*)"/>
            public static unsafe void EvalCoord2xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    EvalCoord2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="EvalCoord2xvOES(int*)"/>
            public static unsafe void EvalCoord2xvOES(ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    EvalCoord2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="FeedbackBufferxOES(int, All, int*)"/>
            public static unsafe void FeedbackBufferxOES(int n, All type, ReadOnlySpan<int> buffer)
            {
                fixed (int* buffer_ptr = buffer)
                {
                    FeedbackBufferxOES(n, type, buffer_ptr);
                }
            }
            /// <inheritdoc cref="FeedbackBufferxOES(int, All, int*)"/>
            public static unsafe void FeedbackBufferxOES(int n, All type, int[] buffer)
            {
                fixed (int* buffer_ptr = buffer)
                {
                    FeedbackBufferxOES(n, type, buffer_ptr);
                }
            }
            /// <inheritdoc cref="FeedbackBufferxOES(int, All, int*)"/>
            public static unsafe void FeedbackBufferxOES(int n, All type, ref readonly int buffer)
            {
                fixed (int* buffer_ptr = &buffer)
                {
                    FeedbackBufferxOES(n, type, buffer_ptr);
                }
            }
            /// <inheritdoc cref="FogxvOES(FogPName, int*)"/>
            public static unsafe void FogxvOES(FogPName pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    FogxvOES(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="FogxvOES(FogPName, int*)"/>
            public static unsafe void FogxvOES(FogPName pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    FogxvOES(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="FogxvOES(FogPName, int*)"/>
            public static unsafe void FogxvOES(FogPName pname, ref readonly int param)
            {
                fixed (int* param_ptr = &param)
                {
                    FogxvOES(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanefOES(ClipPlaneName, float*)"/>
            public static unsafe void GetClipPlanefOES(ClipPlaneName plane, Span<float> equation)
            {
                fixed (float* equation_ptr = equation)
                {
                    GetClipPlanefOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanefOES(ClipPlaneName, float*)"/>
            public static unsafe void GetClipPlanefOES(ClipPlaneName plane, float[] equation)
            {
                fixed (float* equation_ptr = equation)
                {
                    GetClipPlanefOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanefOES(ClipPlaneName, float*)"/>
            public static unsafe void GetClipPlanefOES(ClipPlaneName plane, ref float equation)
            {
                fixed (float* equation_ptr = &equation)
                {
                    GetClipPlanefOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanexOES(ClipPlaneName, int*)"/>
            public static unsafe void GetClipPlanexOES(ClipPlaneName plane, Span<int> equation)
            {
                fixed (int* equation_ptr = equation)
                {
                    GetClipPlanexOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanexOES(ClipPlaneName, int*)"/>
            public static unsafe void GetClipPlanexOES(ClipPlaneName plane, int[] equation)
            {
                fixed (int* equation_ptr = equation)
                {
                    GetClipPlanexOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetClipPlanexOES(ClipPlaneName, int*)"/>
            public static unsafe void GetClipPlanexOES(ClipPlaneName plane, ref int equation)
            {
                fixed (int* equation_ptr = &equation)
                {
                    GetClipPlanexOES(plane, equation_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterxvOES(All, All, int*)"/>
            public static unsafe void GetConvolutionParameterxvOES(All target, All pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterxvOES(All, All, int*)"/>
            public static unsafe void GetConvolutionParameterxvOES(All target, All pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetConvolutionParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetConvolutionParameterxvOES(All, All, int*)"/>
            public static unsafe int GetConvolutionParameterxvOES(All target, All pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetConvolutionParameterxvOES(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetConvolutionParameterxvOES(All, All, int*)"/>
            public static unsafe void GetConvolutionParameterxvOES(All target, All pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetConvolutionParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFixedvOES(GetPName, int*)"/>
            public static unsafe void GetFixedvOES(GetPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFixedvOES(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFixedvOES(GetPName, int*)"/>
            public static unsafe void GetFixedvOES(GetPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFixedvOES(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFixedvOES(GetPName, int*)"/>
            public static unsafe int GetFixedvOES(GetPName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetFixedvOES(pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetFixedvOES(GetPName, int*)"/>
            public static unsafe void GetFixedvOES(GetPName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFixedvOES(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterxvOES(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameterxvOES(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterxvOES(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameterxvOES(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetHistogramParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetHistogramParameterxvOES(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe int GetHistogramParameterxvOES(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetHistogramParameterxvOES(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetHistogramParameterxvOES(HistogramTargetEXT, GetHistogramParameterPNameEXT, int*)"/>
            public static unsafe void GetHistogramParameterxvOES(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetHistogramParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightxOES(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightxOES(LightName light, LightParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetLightxOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightxOES(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightxOES(LightName light, LightParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetLightxOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightxOES(LightName, LightParameter, int*)"/>
            public static unsafe int GetLightxOES(LightName light, LightParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetLightxOES(light, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetLightxOES(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightxOES(LightName light, LightParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetLightxOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightxvOES(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightxvOES(LightName light, LightParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetLightxvOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightxvOES(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightxvOES(LightName light, LightParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetLightxvOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetLightxvOES(LightName, LightParameter, int*)"/>
            public static unsafe int GetLightxvOES(LightName light, LightParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetLightxvOES(light, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetLightxvOES(LightName, LightParameter, int*)"/>
            public static unsafe void GetLightxvOES(LightName light, LightParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetLightxvOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMapxvOES(MapTarget, GetMapQuery, int*)"/>
            public static unsafe void GetMapxvOES(MapTarget target, GetMapQuery query, Span<int> v)
            {
                fixed (int* v_ptr = v)
                {
                    GetMapxvOES(target, query, v_ptr);
                }
            }
            /// <inheritdoc cref="GetMapxvOES(MapTarget, GetMapQuery, int*)"/>
            public static unsafe void GetMapxvOES(MapTarget target, GetMapQuery query, int[] v)
            {
                fixed (int* v_ptr = v)
                {
                    GetMapxvOES(target, query, v_ptr);
                }
            }
            /// <inheritdoc cref="GetMapxvOES(MapTarget, GetMapQuery, int*)"/>
            public static unsafe int GetMapxvOES(MapTarget target, GetMapQuery query)
            {
                int v;
                int* v_ptr = &v;
                {
                    GetMapxvOES(target, query, v_ptr);
                }
                return v;
            }
            /// <inheritdoc cref="GetMapxvOES(MapTarget, GetMapQuery, int*)"/>
            public static unsafe void GetMapxvOES(MapTarget target, GetMapQuery query, out int v)
            {
                fixed (int* v_ptr = &v)
                {
                    GetMapxvOES(target, query, v_ptr);
                }
            }
            /// <inheritdoc cref="GetMaterialxvOES(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetMaterialxvOES(TriangleFace face, MaterialParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMaterialxvOES(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMaterialxvOES(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetMaterialxvOES(TriangleFace face, MaterialParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetMaterialxvOES(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetMaterialxvOES(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe int GetMaterialxvOES(TriangleFace face, MaterialParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetMaterialxvOES(face, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetMaterialxvOES(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetMaterialxvOES(TriangleFace face, MaterialParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetMaterialxvOES(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelMapxv(PixelMap, int, int*)"/>
            public static unsafe void GetPixelMapx(PixelMap map, int size, Span<int> values)
            {
                fixed (int* values_ptr = values)
                {
                    GetPixelMapxv(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelMapxv(PixelMap, int, int*)"/>
            public static unsafe void GetPixelMapx(PixelMap map, int size, int[] values)
            {
                fixed (int* values_ptr = values)
                {
                    GetPixelMapxv(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelMapxv(PixelMap, int, int*)"/>
            public static unsafe void GetPixelMapx(PixelMap map, int size, ref int values)
            {
                fixed (int* values_ptr = &values)
                {
                    GetPixelMapxv(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="GetTexEnvxvOES(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetTexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexEnvxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexEnvxvOES(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetTexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexEnvxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexEnvxvOES(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe int GetTexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetTexEnvxvOES(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetTexEnvxvOES(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void GetTexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTexEnvxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexGenxvOES(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetTexGenxvOES(TextureCoordName coord, TextureGenParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexGenxvOES(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexGenxvOES(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetTexGenxvOES(TextureCoordName coord, TextureGenParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexGenxvOES(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexGenxvOES(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe int GetTexGenxvOES(TextureCoordName coord, TextureGenParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetTexGenxvOES(coord, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetTexGenxvOES(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void GetTexGenxvOES(TextureCoordName coord, TextureGenParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTexGenxvOES(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexLevelParameterxvOES(TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTexLevelParameterxvOES(TextureTarget target, int level, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexLevelParameterxvOES(target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexLevelParameterxvOES(TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTexLevelParameterxvOES(TextureTarget target, int level, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexLevelParameterxvOES(target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexLevelParameterxvOES(TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe int GetTexLevelParameterxvOES(TextureTarget target, int level, GetTextureParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetTexLevelParameterxvOES(target, level, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetTexLevelParameterxvOES(TextureTarget, int, GetTextureParameter, int*)"/>
            public static unsafe void GetTexLevelParameterxvOES(TextureTarget target, int level, GetTextureParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTexLevelParameterxvOES(target, level, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterxvOES(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterxvOES(TextureTarget target, GetTextureParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterxvOES(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterxvOES(TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetTexParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetTexParameterxvOES(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe int GetTexParameterxvOES(TextureTarget target, GetTextureParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetTexParameterxvOES(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetTexParameterxvOES(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void GetTexParameterxvOES(TextureTarget target, GetTextureParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetTexParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="IndexxvOES(int*)"/>
            public static unsafe void IndexxvOES(ref readonly int component)
            {
                fixed (int* component_ptr = &component)
                {
                    IndexxvOES(component_ptr);
                }
            }
            /// <inheritdoc cref="LightModelxvOES(LightModelParameter, int*)"/>
            public static unsafe void LightModelxvOES(LightModelParameter pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    LightModelxvOES(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="LightModelxvOES(LightModelParameter, int*)"/>
            public static unsafe void LightModelxvOES(LightModelParameter pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    LightModelxvOES(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="LightModelxvOES(LightModelParameter, int*)"/>
            public static unsafe void LightModelxvOES(LightModelParameter pname, ref readonly int param)
            {
                fixed (int* param_ptr = &param)
                {
                    LightModelxvOES(pname, param_ptr);
                }
            }
            /// <inheritdoc cref="LightxvOES(LightName, LightParameter, int*)"/>
            public static unsafe void LightxvOES(LightName light, LightParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    LightxvOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="LightxvOES(LightName, LightParameter, int*)"/>
            public static unsafe void LightxvOES(LightName light, LightParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    LightxvOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="LightxvOES(LightName, LightParameter, int*)"/>
            public static unsafe void LightxvOES(LightName light, LightParameter pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    LightxvOES(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="LoadMatrixxOES(int*)"/>
            public static unsafe void LoadMatrixxOES(ReadOnlySpan<int> m)
            {
                fixed (int* m_ptr = m)
                {
                    LoadMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadMatrixxOES(int*)"/>
            public static unsafe void LoadMatrixxOES(int[] m)
            {
                fixed (int* m_ptr = m)
                {
                    LoadMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadMatrixxOES(int*)"/>
            public static unsafe void LoadMatrixxOES(ref readonly int m)
            {
                fixed (int* m_ptr = &m)
                {
                    LoadMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixxOES(int*)"/>
            public static unsafe void LoadTransposeMatrixxOES(ReadOnlySpan<int> m)
            {
                fixed (int* m_ptr = m)
                {
                    LoadTransposeMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixxOES(int*)"/>
            public static unsafe void LoadTransposeMatrixxOES(int[] m)
            {
                fixed (int* m_ptr = m)
                {
                    LoadTransposeMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="LoadTransposeMatrixxOES(int*)"/>
            public static unsafe void LoadTransposeMatrixxOES(ref readonly int m)
            {
                fixed (int* m_ptr = &m)
                {
                    LoadTransposeMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="MaterialxvOES(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void MaterialxvOES(TriangleFace face, MaterialParameter pname, ReadOnlySpan<int> param)
            {
                fixed (int* param_ptr = param)
                {
                    MaterialxvOES(face, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="MaterialxvOES(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void MaterialxvOES(TriangleFace face, MaterialParameter pname, int[] param)
            {
                fixed (int* param_ptr = param)
                {
                    MaterialxvOES(face, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="MaterialxvOES(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void MaterialxvOES(TriangleFace face, MaterialParameter pname, ref readonly int param)
            {
                fixed (int* param_ptr = &param)
                {
                    MaterialxvOES(face, pname, param_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord1bvOES(TextureUnit texture, ref readonly sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    MultiTexCoord1bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord1xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord1xvOES(TextureUnit texture, ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    MultiTexCoord1xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord2bvOES(TextureUnit texture, ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord2bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord2bvOES(TextureUnit texture, sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord2bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord2bvOES(TextureUnit texture, ref readonly sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    MultiTexCoord2bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2xvOES(TextureUnit texture, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord2xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2xvOES(TextureUnit texture, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord2xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord2xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord2xvOES(TextureUnit texture, ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    MultiTexCoord2xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord3bvOES(TextureUnit texture, ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord3bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord3bvOES(TextureUnit texture, sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord3bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord3bvOES(TextureUnit texture, ref readonly sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    MultiTexCoord3bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3xvOES(TextureUnit texture, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord3xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3xvOES(TextureUnit texture, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord3xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord3xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord3xvOES(TextureUnit texture, ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    MultiTexCoord3xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord4bvOES(TextureUnit texture, ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord4bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord4bvOES(TextureUnit texture, sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    MultiTexCoord4bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4bvOES(TextureUnit, sbyte*)"/>
            public static unsafe void MultiTexCoord4bvOES(TextureUnit texture, ref readonly sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    MultiTexCoord4bvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4xvOES(TextureUnit texture, ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord4xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4xvOES(TextureUnit texture, int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    MultiTexCoord4xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultiTexCoord4xvOES(TextureUnit, int*)"/>
            public static unsafe void MultiTexCoord4xvOES(TextureUnit texture, ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    MultiTexCoord4xvOES(texture, coords_ptr);
                }
            }
            /// <inheritdoc cref="MultMatrixxOES(int*)"/>
            public static unsafe void MultMatrixxOES(ReadOnlySpan<int> m)
            {
                fixed (int* m_ptr = m)
                {
                    MultMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="MultMatrixxOES(int*)"/>
            public static unsafe void MultMatrixxOES(int[] m)
            {
                fixed (int* m_ptr = m)
                {
                    MultMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="MultMatrixxOES(int*)"/>
            public static unsafe void MultMatrixxOES(ref readonly int m)
            {
                fixed (int* m_ptr = &m)
                {
                    MultMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixxOES(int*)"/>
            public static unsafe void MultTransposeMatrixxOES(ReadOnlySpan<int> m)
            {
                fixed (int* m_ptr = m)
                {
                    MultTransposeMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixxOES(int*)"/>
            public static unsafe void MultTransposeMatrixxOES(int[] m)
            {
                fixed (int* m_ptr = m)
                {
                    MultTransposeMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="MultTransposeMatrixxOES(int*)"/>
            public static unsafe void MultTransposeMatrixxOES(ref readonly int m)
            {
                fixed (int* m_ptr = &m)
                {
                    MultTransposeMatrixxOES(m_ptr);
                }
            }
            /// <inheritdoc cref="Normal3xvOES(int*)"/>
            public static unsafe void Normal3xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Normal3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Normal3xvOES(int*)"/>
            public static unsafe void Normal3xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Normal3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Normal3xvOES(int*)"/>
            public static unsafe void Normal3xvOES(ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    Normal3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="PixelMapx(PixelMap, int, int*)"/>
            public static unsafe void PixelMapx(PixelMap map, int size, ReadOnlySpan<int> values)
            {
                fixed (int* values_ptr = values)
                {
                    PixelMapx(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="PixelMapx(PixelMap, int, int*)"/>
            public static unsafe void PixelMapx(PixelMap map, int size, int[] values)
            {
                fixed (int* values_ptr = values)
                {
                    PixelMapx(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="PixelMapx(PixelMap, int, int*)"/>
            public static unsafe void PixelMapx(PixelMap map, int size, ref readonly int values)
            {
                fixed (int* values_ptr = &values)
                {
                    PixelMapx(map, size, values_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterxvOES(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameterxvOES(PointParameterNameARB pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PointParameterxvOES(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterxvOES(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameterxvOES(PointParameterNameARB pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PointParameterxvOES(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterxvOES(PointParameterNameARB, int*)"/>
            public static unsafe void PointParameterxvOES(PointParameterNameARB pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    PointParameterxvOES(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PrioritizeTexturesxOES(int, int*, int*)"/>
            public static unsafe void PrioritizeTexturesxOES(int n, ReadOnlySpan<int> textures, ReadOnlySpan<int> priorities)
            {
                fixed (int* priorities_ptr = priorities)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        PrioritizeTexturesxOES(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PrioritizeTexturesxOES(int, int*, int*)"/>
            public static unsafe void PrioritizeTexturesxOES(int n, int[] textures, int[] priorities)
            {
                fixed (int* priorities_ptr = priorities)
                {
                    fixed (int* textures_ptr = textures)
                    {
                        PrioritizeTexturesxOES(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            /// <inheritdoc cref="PrioritizeTexturesxOES(int, int*, int*)"/>
            public static unsafe void PrioritizeTexturesxOES(int n, ref readonly int textures, ref readonly int priorities)
            {
                fixed (int* textures_ptr = &textures)
                fixed (int* priorities_ptr = &priorities)
                {
                    PrioritizeTexturesxOES(n, textures_ptr, priorities_ptr);
                }
            }
            /// <inheritdoc cref="QueryMatrixxOES(int*, int*)"/>
            public static unsafe uint QueryMatrixxOES(Span<int> mantissa, Span<int> exponent)
            {
                uint returnValue;
                fixed (int* exponent_ptr = exponent)
                {
                    fixed (int* mantissa_ptr = mantissa)
                    {
                        returnValue = QueryMatrixxOES(mantissa_ptr, exponent_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="QueryMatrixxOES(int*, int*)"/>
            public static unsafe uint QueryMatrixxOES(int[] mantissa, int[] exponent)
            {
                uint returnValue;
                fixed (int* exponent_ptr = exponent)
                {
                    fixed (int* mantissa_ptr = mantissa)
                    {
                        returnValue = QueryMatrixxOES(mantissa_ptr, exponent_ptr);
                    }
                }
                return returnValue;
            }
            /// <inheritdoc cref="QueryMatrixxOES(int*, int*)"/>
            public static unsafe uint QueryMatrixxOES(ref int mantissa, ref int exponent)
            {
                uint returnValue;
                fixed (int* mantissa_ptr = &mantissa)
                fixed (int* exponent_ptr = &exponent)
                {
                    returnValue = QueryMatrixxOES(mantissa_ptr, exponent_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="RasterPos2xvOES(int*)"/>
            public static unsafe void RasterPos2xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos2xvOES(int*)"/>
            public static unsafe void RasterPos2xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos2xvOES(int*)"/>
            public static unsafe void RasterPos2xvOES(ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    RasterPos2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos3xvOES(int*)"/>
            public static unsafe void RasterPos3xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos3xvOES(int*)"/>
            public static unsafe void RasterPos3xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos3xvOES(int*)"/>
            public static unsafe void RasterPos3xvOES(ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    RasterPos3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos4xvOES(int*)"/>
            public static unsafe void RasterPos4xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos4xvOES(int*)"/>
            public static unsafe void RasterPos4xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    RasterPos4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RasterPos4xvOES(int*)"/>
            public static unsafe void RasterPos4xvOES(ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    RasterPos4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="RectxvOES(int*, int*)"/>
            public static unsafe void RectxvOES(ReadOnlySpan<int> v1, ReadOnlySpan<int> v2)
            {
                fixed (int* v2_ptr = v2)
                {
                    fixed (int* v1_ptr = v1)
                    {
                        RectxvOES(v1_ptr, v2_ptr);
                    }
                }
            }
            /// <inheritdoc cref="RectxvOES(int*, int*)"/>
            public static unsafe void RectxvOES(int[] v1, int[] v2)
            {
                fixed (int* v2_ptr = v2)
                {
                    fixed (int* v1_ptr = v1)
                    {
                        RectxvOES(v1_ptr, v2_ptr);
                    }
                }
            }
            /// <inheritdoc cref="RectxvOES(int*, int*)"/>
            public static unsafe void RectxvOES(ref readonly int v1, ref readonly int v2)
            {
                fixed (int* v1_ptr = &v1)
                fixed (int* v2_ptr = &v2)
                {
                    RectxvOES(v1_ptr, v2_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1bvOES(sbyte*)"/>
            public static unsafe void TexCoord1bvOES(ref readonly sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    TexCoord1bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord1xvOES(int*)"/>
            public static unsafe void TexCoord1xvOES(ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    TexCoord1xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2bvOES(sbyte*)"/>
            public static unsafe void TexCoord2bvOES(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord2bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2bvOES(sbyte*)"/>
            public static unsafe void TexCoord2bvOES(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord2bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2bvOES(sbyte*)"/>
            public static unsafe void TexCoord2bvOES(ref readonly sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    TexCoord2bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2xvOES(int*)"/>
            public static unsafe void TexCoord2xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2xvOES(int*)"/>
            public static unsafe void TexCoord2xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2xvOES(int*)"/>
            public static unsafe void TexCoord2xvOES(ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    TexCoord2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3bvOES(sbyte*)"/>
            public static unsafe void TexCoord3bvOES(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord3bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3bvOES(sbyte*)"/>
            public static unsafe void TexCoord3bvOES(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord3bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3bvOES(sbyte*)"/>
            public static unsafe void TexCoord3bvOES(ref readonly sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    TexCoord3bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3xvOES(int*)"/>
            public static unsafe void TexCoord3xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3xvOES(int*)"/>
            public static unsafe void TexCoord3xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord3xvOES(int*)"/>
            public static unsafe void TexCoord3xvOES(ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    TexCoord3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4bvOES(sbyte*)"/>
            public static unsafe void TexCoord4bvOES(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord4bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4bvOES(sbyte*)"/>
            public static unsafe void TexCoord4bvOES(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    TexCoord4bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4bvOES(sbyte*)"/>
            public static unsafe void TexCoord4bvOES(ref readonly sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    TexCoord4bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4xvOES(int*)"/>
            public static unsafe void TexCoord4xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4xvOES(int*)"/>
            public static unsafe void TexCoord4xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    TexCoord4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4xvOES(int*)"/>
            public static unsafe void TexCoord4xvOES(ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    TexCoord4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="TexEnvxvOES(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void TexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexEnvxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexEnvxvOES(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void TexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexEnvxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexEnvxvOES(TextureEnvTarget, TextureEnvParameter, int*)"/>
            public static unsafe void TexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TexEnvxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexGenxvOES(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void TexGenxvOES(TextureCoordName coord, TextureGenParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexGenxvOES(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexGenxvOES(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void TexGenxvOES(TextureCoordName coord, TextureGenParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexGenxvOES(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexGenxvOES(TextureCoordName, TextureGenParameter, int*)"/>
            public static unsafe void TexGenxvOES(TextureCoordName coord, TextureGenParameter pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TexGenxvOES(coord, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterxvOES(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void TexParameterxvOES(TextureTarget target, GetTextureParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterxvOES(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void TexParameterxvOES(TextureTarget target, GetTextureParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    TexParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="TexParameterxvOES(TextureTarget, GetTextureParameter, int*)"/>
            public static unsafe void TexParameterxvOES(TextureTarget target, GetTextureParameter pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    TexParameterxvOES(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2bvOES(sbyte*)"/>
            public static unsafe void Vertex2bvOES(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex2bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2bvOES(sbyte*)"/>
            public static unsafe void Vertex2bvOES(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex2bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2bvOES(sbyte*)"/>
            public static unsafe void Vertex2bvOES(ref readonly sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    Vertex2bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2xvOES(int*)"/>
            public static unsafe void Vertex2xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2xvOES(int*)"/>
            public static unsafe void Vertex2xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex2xvOES(int*)"/>
            public static unsafe void Vertex2xvOES(ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    Vertex2xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3bvOES(sbyte*)"/>
            public static unsafe void Vertex3bvOES(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex3bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3bvOES(sbyte*)"/>
            public static unsafe void Vertex3bvOES(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex3bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3bvOES(sbyte*)"/>
            public static unsafe void Vertex3bvOES(ref readonly sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    Vertex3bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3xvOES(int*)"/>
            public static unsafe void Vertex3xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3xvOES(int*)"/>
            public static unsafe void Vertex3xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex3xvOES(int*)"/>
            public static unsafe void Vertex3xvOES(ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    Vertex3xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4bvOES(sbyte*)"/>
            public static unsafe void Vertex4bvOES(ReadOnlySpan<sbyte> coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex4bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4bvOES(sbyte*)"/>
            public static unsafe void Vertex4bvOES(sbyte[] coords)
            {
                fixed (sbyte* coords_ptr = coords)
                {
                    Vertex4bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4bvOES(sbyte*)"/>
            public static unsafe void Vertex4bvOES(ref readonly sbyte coords)
            {
                fixed (sbyte* coords_ptr = &coords)
                {
                    Vertex4bvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4xvOES(int*)"/>
            public static unsafe void Vertex4xvOES(ReadOnlySpan<int> coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4xvOES(int*)"/>
            public static unsafe void Vertex4xvOES(int[] coords)
            {
                fixed (int* coords_ptr = coords)
                {
                    Vertex4xvOES(coords_ptr);
                }
            }
            /// <inheritdoc cref="Vertex4xvOES(int*)"/>
            public static unsafe void Vertex4xvOES(ref readonly int coords)
            {
                fixed (int* coords_ptr = &coords)
                {
                    Vertex4xvOES(coords_ptr);
                }
            }
        }
        public static unsafe partial class OVR
        {
        }
        public static unsafe partial class PGI
        {
        }
        public static unsafe partial class SGI
        {
            /// <inheritdoc cref="ColorTableParameterfvSGI(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void ColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, ref readonly Color4<Rgba> parameters)
            {
                fixed (Color4<Rgba>* tmp_parameters = &parameters)
                {
                    float* parameters_ptr = (float*)tmp_parameters;
                    ColorTableParameterfvSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterivSGI(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ColorTableParameterivSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterivSGI(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ColorTableParameterivSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableParameterivSGI(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void ColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ColorTableParameterivSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableSGI(ColorTableTargetSGI, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableSGI(ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
            {
                void* table_vptr = (void*)table;
                ColorTableSGI(target, internalformat, width, format, type, table_vptr);
            }
            /// <inheritdoc cref="ColorTableSGI(ColorTableTargetSGI, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableSGI<T1>(ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ReadOnlySpan<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTableSGI(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableSGI(ColorTableTargetSGI, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableSGI<T1>(ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    ColorTableSGI(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="ColorTableSGI(ColorTableTargetSGI, InternalFormat, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void ColorTableSGI<T1>(ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, ref readonly T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    ColorTableSGI(target, internalformat, width, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfvSGI(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfvSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfvSGI(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetColorTableParameterfvSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterfvSGI(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe float GetColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetColorTableParameterfvSGI(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetColorTableParameterfvSGI(ColorTableTargetSGI, ColorTableParameterPName, float*)"/>
            public static unsafe void GetColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetColorTableParameterfvSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterivSGI(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameterivSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterivSGI(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetColorTableParameterivSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableParameterivSGI(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe int GetColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetColorTableParameterivSGI(target, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetColorTableParameterivSGI(ColorTableTargetSGI, ColorTableParameterPName, int*)"/>
            public static unsafe void GetColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetColorTableParameterivSGI(target, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableSGI(ColorTableTargetSGI, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableSGI(ColorTableTargetSGI target, PixelFormat format, PixelType type, IntPtr table)
            {
                void* table_vptr = (void*)table;
                GetColorTableSGI(target, format, type, table_vptr);
            }
            /// <inheritdoc cref="GetColorTableSGI(ColorTableTargetSGI, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableSGI<T1>(ColorTableTargetSGI target, PixelFormat format, PixelType type, Span<T1> table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    GetColorTableSGI(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableSGI(ColorTableTargetSGI, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableSGI<T1>(ColorTableTargetSGI target, PixelFormat format, PixelType type, T1[] table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = table)
                {
                    GetColorTableSGI(target, format, type, table_ptr);
                }
            }
            /// <inheritdoc cref="GetColorTableSGI(ColorTableTargetSGI, PixelFormat, PixelType, void*)"/>
            public static unsafe T1 GetColorTableSGI<T1>(ColorTableTargetSGI target, PixelFormat format, PixelType type)
                where T1 : unmanaged
            {
                T1 table;
                void* table_ptr = &table;
                {
                    GetColorTableSGI(target, format, type, table_ptr);
                }
                return table;
            }
            /// <inheritdoc cref="GetColorTableSGI(ColorTableTargetSGI, PixelFormat, PixelType, void*)"/>
            public static unsafe void GetColorTableSGI<T1>(ColorTableTargetSGI target, PixelFormat format, PixelType type, out T1 table)
                where T1 : unmanaged
            {
                fixed (void* table_ptr = &table)
                {
                    GetColorTableSGI(target, format, type, table_ptr);
                }
            }
        }
        public static unsafe partial class SGIS
        {
            /// <inheritdoc cref="DetailTexFuncSGIS(TextureTarget, int, float*)"/>
            public static unsafe void DetailTexFuncSGIS(TextureTarget target, int n, ReadOnlySpan<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    DetailTexFuncSGIS(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="DetailTexFuncSGIS(TextureTarget, int, float*)"/>
            public static unsafe void DetailTexFuncSGIS(TextureTarget target, int n, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    DetailTexFuncSGIS(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="DetailTexFuncSGIS(TextureTarget, int, float*)"/>
            public static unsafe void DetailTexFuncSGIS(TextureTarget target, int n, ref readonly float points)
            {
                fixed (float* points_ptr = &points)
                {
                    DetailTexFuncSGIS(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="FogFuncSGIS(int, float*)"/>
            public static unsafe void FogFuncSGIS(int n, ReadOnlySpan<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    FogFuncSGIS(n, points_ptr);
                }
            }
            /// <inheritdoc cref="FogFuncSGIS(int, float*)"/>
            public static unsafe void FogFuncSGIS(int n, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    FogFuncSGIS(n, points_ptr);
                }
            }
            /// <inheritdoc cref="FogFuncSGIS(int, float*)"/>
            public static unsafe void FogFuncSGIS(int n, ref readonly float points)
            {
                fixed (float* points_ptr = &points)
                {
                    FogFuncSGIS(n, points_ptr);
                }
            }
            /// <inheritdoc cref="GetDetailTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe void GetDetailTexFuncSGIS(TextureTarget target, Span<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    GetDetailTexFuncSGIS(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetDetailTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe void GetDetailTexFuncSGIS(TextureTarget target, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    GetDetailTexFuncSGIS(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetDetailTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe float GetDetailTexFuncSGIS(TextureTarget target)
            {
                float points;
                float* points_ptr = &points;
                {
                    GetDetailTexFuncSGIS(target, points_ptr);
                }
                return points;
            }
            /// <inheritdoc cref="GetDetailTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe void GetDetailTexFuncSGIS(TextureTarget target, out float points)
            {
                fixed (float* points_ptr = &points)
                {
                    GetDetailTexFuncSGIS(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetFogFuncSGIS(float*)"/>
            public static unsafe void GetFogFuncSGIS(Span<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    GetFogFuncSGIS(points_ptr);
                }
            }
            /// <inheritdoc cref="GetFogFuncSGIS(float*)"/>
            public static unsafe void GetFogFuncSGIS(float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    GetFogFuncSGIS(points_ptr);
                }
            }
            /// <inheritdoc cref="GetFogFuncSGIS(float*)"/>
            public static unsafe float GetFogFuncSGIS()
            {
                float points;
                float* points_ptr = &points;
                {
                    GetFogFuncSGIS(points_ptr);
                }
                return points;
            }
            /// <inheritdoc cref="GetFogFuncSGIS(float*)"/>
            public static unsafe void GetFogFuncSGIS(out float points)
            {
                fixed (float* points_ptr = &points)
                {
                    GetFogFuncSGIS(points_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetPixelTexGenParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetPixelTexGenParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe float GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetPixelTexGenParameterfvSGIS(pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetPixelTexGenParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetPixelTexGenParameterivSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetPixelTexGenParameterivSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe int GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetPixelTexGenParameterivSGIS(pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetPixelTexGenParameterivSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetSharpenTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe void GetSharpenTexFuncSGIS(TextureTarget target, Span<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    GetSharpenTexFuncSGIS(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetSharpenTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe void GetSharpenTexFuncSGIS(TextureTarget target, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    GetSharpenTexFuncSGIS(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetSharpenTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe float GetSharpenTexFuncSGIS(TextureTarget target)
            {
                float points;
                float* points_ptr = &points;
                {
                    GetSharpenTexFuncSGIS(target, points_ptr);
                }
                return points;
            }
            /// <inheritdoc cref="GetSharpenTexFuncSGIS(TextureTarget, float*)"/>
            public static unsafe void GetSharpenTexFuncSGIS(TextureTarget target, out float points)
            {
                fixed (float* points_ptr = &points)
                {
                    GetSharpenTexFuncSGIS(target, points_ptr);
                }
            }
            /// <inheritdoc cref="GetTexFilterFuncSGIS(TextureTarget, TextureFilterSGIS, float*)"/>
            public static unsafe void GetTexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, Span<float> weights)
            {
                fixed (float* weights_ptr = weights)
                {
                    GetTexFilterFuncSGIS(target, filter, weights_ptr);
                }
            }
            /// <inheritdoc cref="GetTexFilterFuncSGIS(TextureTarget, TextureFilterSGIS, float*)"/>
            public static unsafe void GetTexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, float[] weights)
            {
                fixed (float* weights_ptr = weights)
                {
                    GetTexFilterFuncSGIS(target, filter, weights_ptr);
                }
            }
            /// <inheritdoc cref="GetTexFilterFuncSGIS(TextureTarget, TextureFilterSGIS, float*)"/>
            public static unsafe float GetTexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter)
            {
                float weights;
                float* weights_ptr = &weights;
                {
                    GetTexFilterFuncSGIS(target, filter, weights_ptr);
                }
                return weights;
            }
            /// <inheritdoc cref="GetTexFilterFuncSGIS(TextureTarget, TextureFilterSGIS, float*)"/>
            public static unsafe void GetTexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, out float weights)
            {
                fixed (float* weights_ptr = &weights)
                {
                    GetTexFilterFuncSGIS(target, filter, weights_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void PixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PixelTexGenParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void PixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PixelTexGenParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS, float*)"/>
            public static unsafe void PixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    PixelTexGenParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void PixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PixelTexGenParameterivSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void PixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    PixelTexGenParameterivSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS, int*)"/>
            public static unsafe void PixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    PixelTexGenParameterivSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvSGIS(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvSGIS(PointParameterNameARB pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvSGIS(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvSGIS(PointParameterNameARB pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    PointParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PointParameterfvSGIS(PointParameterNameARB, float*)"/>
            public static unsafe void PointParameterfvSGIS(PointParameterNameARB pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    PointParameterfvSGIS(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SharpenTexFuncSGIS(TextureTarget, int, float*)"/>
            public static unsafe void SharpenTexFuncSGIS(TextureTarget target, int n, ReadOnlySpan<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    SharpenTexFuncSGIS(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="SharpenTexFuncSGIS(TextureTarget, int, float*)"/>
            public static unsafe void SharpenTexFuncSGIS(TextureTarget target, int n, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    SharpenTexFuncSGIS(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="SharpenTexFuncSGIS(TextureTarget, int, float*)"/>
            public static unsafe void SharpenTexFuncSGIS(TextureTarget target, int n, ref readonly float points)
            {
                fixed (float* points_ptr = &points)
                {
                    SharpenTexFuncSGIS(target, n, points_ptr);
                }
            }
            /// <inheritdoc cref="TexFilterFuncSGIS(TextureTarget, TextureFilterSGIS, int, float*)"/>
            public static unsafe void TexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, int n, ReadOnlySpan<float> weights)
            {
                fixed (float* weights_ptr = weights)
                {
                    TexFilterFuncSGIS(target, filter, n, weights_ptr);
                }
            }
            /// <inheritdoc cref="TexFilterFuncSGIS(TextureTarget, TextureFilterSGIS, int, float*)"/>
            public static unsafe void TexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, int n, float[] weights)
            {
                fixed (float* weights_ptr = weights)
                {
                    TexFilterFuncSGIS(target, filter, n, weights_ptr);
                }
            }
            /// <inheritdoc cref="TexFilterFuncSGIS(TextureTarget, TextureFilterSGIS, int, float*)"/>
            public static unsafe void TexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, int n, ref readonly float weights)
            {
                fixed (float* weights_ptr = &weights)
                {
                    TexFilterFuncSGIS(target, filter, n, weights_ptr);
                }
            }
            /// <inheritdoc cref="TexImage4DSGIS(TextureTarget, int, InternalFormat, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage4DSGIS(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexImage4DSGIS(TextureTarget, int, InternalFormat, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage4DSGIS<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexImage4DSGIS(TextureTarget, int, InternalFormat, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage4DSGIS<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexImage4DSGIS(TextureTarget, int, InternalFormat, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexImage4DSGIS<T1>(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage4DSGIS(TextureTarget, int, int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage4DSGIS(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, IntPtr pixels)
            {
                void* pixels_vptr = (void*)pixels;
                TexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels_vptr);
            }
            /// <inheritdoc cref="TexSubImage4DSGIS(TextureTarget, int, int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage4DSGIS<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, ReadOnlySpan<T1> pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage4DSGIS(TextureTarget, int, int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage4DSGIS<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, T1[] pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = pixels)
                {
                    TexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels_ptr);
                }
            }
            /// <inheritdoc cref="TexSubImage4DSGIS(TextureTarget, int, int, int, int, int, int, int, int, int, PixelFormat, PixelType, void*)"/>
            public static unsafe void TexSubImage4DSGIS<T1>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, ref readonly T1 pixels)
                where T1 : unmanaged
            {
                fixed (void* pixels_ptr = &pixels)
                {
                    TexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels_ptr);
                }
            }
        }
        public static unsafe partial class SGIX
        {
            /// <inheritdoc cref="DeformationMap3dSGIX(FfdTargetSGIX, double, double, int, int, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void DeformationMap3dSGIX(FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, ReadOnlySpan<double> points)
            {
                fixed (double* points_ptr = points)
                {
                    DeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3dSGIX(FfdTargetSGIX, double, double, int, int, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void DeformationMap3dSGIX(FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double[] points)
            {
                fixed (double* points_ptr = points)
                {
                    DeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3dSGIX(FfdTargetSGIX, double, double, int, int, double, double, int, int, double, double, int, int, double*)"/>
            public static unsafe void DeformationMap3dSGIX(FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, ref readonly double points)
            {
                fixed (double* points_ptr = &points)
                {
                    DeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3fSGIX(FfdTargetSGIX, float, float, int, int, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void DeformationMap3fSGIX(FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, ReadOnlySpan<float> points)
            {
                fixed (float* points_ptr = points)
                {
                    DeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3fSGIX(FfdTargetSGIX, float, float, int, int, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void DeformationMap3fSGIX(FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float[] points)
            {
                fixed (float* points_ptr = points)
                {
                    DeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="DeformationMap3fSGIX(FfdTargetSGIX, float, float, int, int, float, float, int, int, float, float, int, int, float*)"/>
            public static unsafe void DeformationMap3fSGIX(FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, ref readonly float points)
            {
                fixed (float* points_ptr = &points)
                {
                    DeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                }
            }
            /// <inheritdoc cref="FinishAsyncSGIX(uint*)"/>
            public static unsafe int FinishAsyncSGIX(out uint markerp)
            {
                int returnValue;
                fixed (uint* markerp_ptr = &markerp)
                {
                    returnValue = FinishAsyncSGIX(markerp_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="FragmentLightfvSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void FragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentLightfvSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightfvSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void FragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentLightfvSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightfvSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void FragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    FragmentLightfvSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightivSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void FragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentLightivSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightivSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void FragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentLightivSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightivSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void FragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    FragmentLightivSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModelfvSGIX(FragmentLightModelParameterSGIX, float*)"/>
            public static unsafe void FragmentLightModelfvSGIX(FragmentLightModelParameterSGIX pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentLightModelfvSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModelfvSGIX(FragmentLightModelParameterSGIX, float*)"/>
            public static unsafe void FragmentLightModelfvSGIX(FragmentLightModelParameterSGIX pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentLightModelfvSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModelfvSGIX(FragmentLightModelParameterSGIX, float*)"/>
            public static unsafe void FragmentLightModelfvSGIX(FragmentLightModelParameterSGIX pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    FragmentLightModelfvSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModelivSGIX(FragmentLightModelParameterSGIX, int*)"/>
            public static unsafe void FragmentLightModelivSGIX(FragmentLightModelParameterSGIX pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentLightModelivSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModelivSGIX(FragmentLightModelParameterSGIX, int*)"/>
            public static unsafe void FragmentLightModelivSGIX(FragmentLightModelParameterSGIX pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentLightModelivSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentLightModelivSGIX(FragmentLightModelParameterSGIX, int*)"/>
            public static unsafe void FragmentLightModelivSGIX(FragmentLightModelParameterSGIX pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    FragmentLightModelivSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialfvSGIX(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void FragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentMaterialfvSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialfvSGIX(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void FragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    FragmentMaterialfvSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialfvSGIX(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void FragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    FragmentMaterialfvSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialivSGIX(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void FragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentMaterialivSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialivSGIX(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void FragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    FragmentMaterialivSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="FragmentMaterialivSGIX(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void FragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    FragmentMaterialivSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightfvSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void GetFragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFragmentLightfvSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightfvSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void GetFragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFragmentLightfvSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightfvSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe float GetFragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetFragmentLightfvSGIX(light, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetFragmentLightfvSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, float*)"/>
            public static unsafe void GetFragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetFragmentLightfvSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightivSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void GetFragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFragmentLightivSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightivSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void GetFragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFragmentLightivSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentLightivSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe int GetFragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetFragmentLightivSGIX(light, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetFragmentLightivSGIX(FragmentLightNameSGIX, FragmentLightParameterSGIX, int*)"/>
            public static unsafe void GetFragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFragmentLightivSGIX(light, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialfvSGIX(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void GetFragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFragmentMaterialfvSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialfvSGIX(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void GetFragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetFragmentMaterialfvSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialfvSGIX(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe float GetFragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetFragmentMaterialfvSGIX(face, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetFragmentMaterialfvSGIX(TriangleFace, MaterialParameter, float*)"/>
            public static unsafe void GetFragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetFragmentMaterialfvSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialivSGIX(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetFragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFragmentMaterialivSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialivSGIX(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetFragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetFragmentMaterialivSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetFragmentMaterialivSGIX(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe int GetFragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetFragmentMaterialivSGIX(face, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetFragmentMaterialivSGIX(TriangleFace, MaterialParameter, int*)"/>
            public static unsafe void GetFragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetFragmentMaterialivSGIX(face, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameterfvSGIX(int, ListParameterName, float*)"/>
            public static unsafe void GetListParameterfvSGIX(int list, ListParameterName pname, Span<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetListParameterfvSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameterfvSGIX(int, ListParameterName, float*)"/>
            public static unsafe void GetListParameterfvSGIX(int list, ListParameterName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    GetListParameterfvSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameterfvSGIX(int, ListParameterName, float*)"/>
            public static unsafe float GetListParameterfvSGIX(int list, ListParameterName pname)
            {
                float parameters;
                float* parameters_ptr = &parameters;
                {
                    GetListParameterfvSGIX(list, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetListParameterfvSGIX(int, ListParameterName, float*)"/>
            public static unsafe void GetListParameterfvSGIX(int list, ListParameterName pname, out float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    GetListParameterfvSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameterivSGIX(int, ListParameterName, int*)"/>
            public static unsafe void GetListParameterivSGIX(int list, ListParameterName pname, Span<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetListParameterivSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameterivSGIX(int, ListParameterName, int*)"/>
            public static unsafe void GetListParameterivSGIX(int list, ListParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    GetListParameterivSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="GetListParameterivSGIX(int, ListParameterName, int*)"/>
            public static unsafe int GetListParameterivSGIX(int list, ListParameterName pname)
            {
                int parameters;
                int* parameters_ptr = &parameters;
                {
                    GetListParameterivSGIX(list, pname, parameters_ptr);
                }
                return parameters;
            }
            /// <inheritdoc cref="GetListParameterivSGIX(int, ListParameterName, int*)"/>
            public static unsafe void GetListParameterivSGIX(int list, ListParameterName pname, out int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    GetListParameterivSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="IglooInterfaceSGIX(All, void*)"/>
            public static unsafe void IglooInterfaceSGIX(All pname, IntPtr parameters)
            {
                void* parameters_vptr = (void*)parameters;
                IglooInterfaceSGIX(pname, parameters_vptr);
            }
            /// <inheritdoc cref="IglooInterfaceSGIX(All, void*)"/>
            public static unsafe void IglooInterfaceSGIX<T1>(All pname, ReadOnlySpan<T1> parameters)
                where T1 : unmanaged
            {
                fixed (void* parameters_ptr = parameters)
                {
                    IglooInterfaceSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="IglooInterfaceSGIX(All, void*)"/>
            public static unsafe void IglooInterfaceSGIX<T1>(All pname, T1[] parameters)
                where T1 : unmanaged
            {
                fixed (void* parameters_ptr = parameters)
                {
                    IglooInterfaceSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="IglooInterfaceSGIX(All, void*)"/>
            public static unsafe void IglooInterfaceSGIX<T1>(All pname, ref readonly T1 parameters)
                where T1 : unmanaged
            {
                fixed (void* parameters_ptr = &parameters)
                {
                    IglooInterfaceSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="InstrumentsBufferSGIX(int, int*)"/>
            public static unsafe void InstrumentsBufferSGIX(int size, Span<int> buffer)
            {
                fixed (int* buffer_ptr = buffer)
                {
                    InstrumentsBufferSGIX(size, buffer_ptr);
                }
            }
            /// <inheritdoc cref="InstrumentsBufferSGIX(int, int*)"/>
            public static unsafe void InstrumentsBufferSGIX(int size, int[] buffer)
            {
                fixed (int* buffer_ptr = buffer)
                {
                    InstrumentsBufferSGIX(size, buffer_ptr);
                }
            }
            /// <inheritdoc cref="InstrumentsBufferSGIX(int, int*)"/>
            public static unsafe void InstrumentsBufferSGIX(int size, ref int buffer)
            {
                fixed (int* buffer_ptr = &buffer)
                {
                    InstrumentsBufferSGIX(size, buffer_ptr);
                }
            }
            /// <inheritdoc cref="ListParameterfvSGIX(int, ListParameterName, float*)"/>
            public static unsafe void ListParameterfvSGIX(int list, ListParameterName pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ListParameterfvSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameterfvSGIX(int, ListParameterName, float*)"/>
            public static unsafe void ListParameterfvSGIX(int list, ListParameterName pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    ListParameterfvSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameterfvSGIX(int, ListParameterName, float*)"/>
            public static unsafe void ListParameterfvSGIX(int list, ListParameterName pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    ListParameterfvSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameterivSGIX(int, ListParameterName, int*)"/>
            public static unsafe void ListParameterivSGIX(int list, ListParameterName pname, ReadOnlySpan<int> parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ListParameterivSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameterivSGIX(int, ListParameterName, int*)"/>
            public static unsafe void ListParameterivSGIX(int list, ListParameterName pname, int[] parameters)
            {
                fixed (int* parameters_ptr = parameters)
                {
                    ListParameterivSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="ListParameterivSGIX(int, ListParameterName, int*)"/>
            public static unsafe void ListParameterivSGIX(int list, ListParameterName pname, ref readonly int parameters)
            {
                fixed (int* parameters_ptr = &parameters)
                {
                    ListParameterivSGIX(list, pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="PollAsyncSGIX(uint*)"/>
            public static unsafe int PollAsyncSGIX(out uint markerp)
            {
                int returnValue;
                fixed (uint* markerp_ptr = &markerp)
                {
                    returnValue = PollAsyncSGIX(markerp_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="PollInstrumentsSGIX(int*)"/>
            public static unsafe int PollInstrumentsSGIX(out int marker_p)
            {
                int returnValue;
                fixed (int* marker_p_ptr = &marker_p)
                {
                    returnValue = PollInstrumentsSGIX(marker_p_ptr);
                }
                return returnValue;
            }
            /// <inheritdoc cref="ReferencePlaneSGIX(double*)"/>
            public static unsafe void ReferencePlaneSGIX(ReadOnlySpan<double> equation)
            {
                fixed (double* equation_ptr = equation)
                {
                    ReferencePlaneSGIX(equation_ptr);
                }
            }
            /// <inheritdoc cref="ReferencePlaneSGIX(double*)"/>
            public static unsafe void ReferencePlaneSGIX(double[] equation)
            {
                fixed (double* equation_ptr = equation)
                {
                    ReferencePlaneSGIX(equation_ptr);
                }
            }
            /// <inheritdoc cref="ReferencePlaneSGIX(double*)"/>
            public static unsafe void ReferencePlaneSGIX(ref readonly double equation)
            {
                fixed (double* equation_ptr = &equation)
                {
                    ReferencePlaneSGIX(equation_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameterfvSGIX(SpriteParameterNameSGIX, float*)"/>
            public static unsafe void SpriteParameterfvSGIX(SpriteParameterNameSGIX pname, ReadOnlySpan<float> parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    SpriteParameterfvSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameterfvSGIX(SpriteParameterNameSGIX, float*)"/>
            public static unsafe void SpriteParameterfvSGIX(SpriteParameterNameSGIX pname, float[] parameters)
            {
                fixed (float* parameters_ptr = parameters)
                {
                    SpriteParameterfvSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameterfvSGIX(SpriteParameterNameSGIX, float*)"/>
            public static unsafe void SpriteParameterfvSGIX(SpriteParameterNameSGIX pname, ref readonly float parameters)
            {
                fixed (float* parameters_ptr = &parameters)
                {
                    SpriteParameterfvSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameterivSGIX(SpriteParameterNameSGIX, SpriteModeSGIX*)"/>
            public static unsafe void SpriteParameterivSGIX(SpriteParameterNameSGIX pname, ReadOnlySpan<SpriteModeSGIX> parameters)
            {
                fixed (SpriteModeSGIX* parameters_ptr = parameters)
                {
                    SpriteParameterivSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameterivSGIX(SpriteParameterNameSGIX, SpriteModeSGIX*)"/>
            public static unsafe void SpriteParameterivSGIX(SpriteParameterNameSGIX pname, SpriteModeSGIX[] parameters)
            {
                fixed (SpriteModeSGIX* parameters_ptr = parameters)
                {
                    SpriteParameterivSGIX(pname, parameters_ptr);
                }
            }
            /// <inheritdoc cref="SpriteParameterivSGIX(SpriteParameterNameSGIX, SpriteModeSGIX*)"/>
            public static unsafe void SpriteParameterivSGIX(SpriteParameterNameSGIX pname, ref readonly SpriteModeSGIX parameters)
            {
                fixed (SpriteModeSGIX* parameters_ptr = &parameters)
                {
                    SpriteParameterivSGIX(pname, parameters_ptr);
                }
            }
        }
        public static unsafe partial class SUN
        {
            /// <inheritdoc cref="Color3fVertex3fvSUN(float*, float*)"/>
            public static unsafe void Color3fVertex3fvSUN(ref readonly Color3<Rgb> c, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (Color3<Rgb>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        Color3fVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color3fVertex3fvSUN(float*, float*)"/>
            public static unsafe void Color3fVertex3fvSUN(ref readonly Color3<Rgb> c, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (Color3<Rgb>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        Color3fVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color3fVertex3fvSUN(float*, float*)"/>
            public static unsafe void Color3fVertex3fvSUN(ref readonly Color3<Rgb> c, ref readonly float v)
            {
                fixed (float* v_ptr = &v)
                {
                    fixed (Color3<Rgb>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        Color3fVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4fNormal3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void Color4fNormal3fVertex3fvSUN(ref readonly Color4<Rgba> c, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (Color4<Rgba>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            Color4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="Color4fNormal3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void Color4fNormal3fVertex3fvSUN(ref readonly Color4<Rgba> c, float[] n, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (Color4<Rgba>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            Color4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="Color4fNormal3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void Color4fNormal3fVertex3fvSUN(ref readonly Color4<Rgba> c, ref readonly float n, ref readonly float v)
            {
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color4<Rgba>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        Color4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4ubVertex2fvSUN(byte*, float*)"/>
            public static unsafe void Color4ubVertex2fvSUN(ReadOnlySpan<byte> c, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (byte* c_ptr = c)
                    {
                        Color4ubVertex2fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4ubVertex2fvSUN(byte*, float*)"/>
            public static unsafe void Color4ubVertex2fvSUN(byte[] c, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (byte* c_ptr = c)
                    {
                        Color4ubVertex2fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4ubVertex2fvSUN(byte*, float*)"/>
            public static unsafe void Color4ubVertex2fvSUN(ref readonly byte c, ref readonly float v)
            {
                fixed (byte* c_ptr = &c)
                fixed (float* v_ptr = &v)
                {
                    Color4ubVertex2fvSUN(c_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="Color4ubVertex3fvSUN(byte*, float*)"/>
            public static unsafe void Color4ubVertex3fvSUN(ReadOnlySpan<byte> c, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (byte* c_ptr = c)
                    {
                        Color4ubVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4ubVertex3fvSUN(byte*, float*)"/>
            public static unsafe void Color4ubVertex3fvSUN(byte[] c, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (byte* c_ptr = c)
                    {
                        Color4ubVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Color4ubVertex3fvSUN(byte*, float*)"/>
            public static unsafe void Color4ubVertex3fvSUN(ref readonly byte c, ref readonly float v)
            {
                fixed (byte* c_ptr = &c)
                fixed (float* v_ptr = &v)
                {
                    Color4ubVertex3fvSUN(c_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="Normal3fVertex3fvSUN(float*, float*)"/>
            public static unsafe void Normal3fVertex3fvSUN(ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* n_ptr = n)
                    {
                        Normal3fVertex3fvSUN(n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Normal3fVertex3fvSUN(float*, float*)"/>
            public static unsafe void Normal3fVertex3fvSUN(float[] n, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* n_ptr = n)
                    {
                        Normal3fVertex3fvSUN(n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="Normal3fVertex3fvSUN(float*, float*)"/>
            public static unsafe void Normal3fVertex3fvSUN(ref readonly float n, ref readonly float v)
            {
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    Normal3fVertex3fvSUN(n_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeubvSUN(byte*)"/>
            public static unsafe void ReplacementCodeubvSUN(ReadOnlySpan<byte> code)
            {
                fixed (byte* code_ptr = code)
                {
                    ReplacementCodeubvSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeubvSUN(byte*)"/>
            public static unsafe void ReplacementCodeubvSUN(byte[] code)
            {
                fixed (byte* code_ptr = code)
                {
                    ReplacementCodeubvSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeubvSUN(byte*)"/>
            public static unsafe void ReplacementCodeubvSUN(ref readonly byte code)
            {
                fixed (byte* code_ptr = &code)
                {
                    ReplacementCodeubvSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor3fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor3fVertex3fvSUN(ref readonly TriangleListSUN rc, ref readonly Color3<Rgb> c, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (Color3<Rgb>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            ReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor3fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor3fVertex3fvSUN(ref readonly TriangleListSUN rc, ref readonly Color3<Rgb> c, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (Color3<Rgb>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            ReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor3fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor3fVertex3fvSUN(ref readonly TriangleListSUN rc, ref readonly Color3<Rgb> c, ref readonly float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color3<Rgb>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        ReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref readonly TriangleListSUN rc, ref readonly Color4<Rgba> c, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (float* n_ptr = n)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref readonly TriangleListSUN rc, ref readonly Color4<Rgba> c, float[] n, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (float* n_ptr = n)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref readonly TriangleListSUN rc, ref readonly Color4<Rgba> c, ref readonly float n, ref readonly float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color4<Rgba>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4ubVertex3fvSUN(TriangleListSUN*, byte*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(ref readonly TriangleListSUN rc, ReadOnlySpan<byte> c, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (byte* c_ptr = c)
                        {
                            ReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4ubVertex3fvSUN(TriangleListSUN*, byte*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(ref readonly TriangleListSUN rc, byte[] c, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (byte* c_ptr = c)
                        {
                            ReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiColor4ubVertex3fvSUN(TriangleListSUN*, byte*, float*)"/>
            public static unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(ref readonly TriangleListSUN rc, ref readonly byte c, ref readonly float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (byte* c_ptr = &c)
                fixed (float* v_ptr = &v)
                {
                    ReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(ref readonly TriangleListSUN rc, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (float* n_ptr = n)
                        {
                            ReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(ref readonly TriangleListSUN rc, float[] n, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (float* n_ptr = n)
                        {
                            ReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(ref readonly TriangleListSUN rc, ref readonly float n, ref readonly float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    ReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref readonly TriangleListSUN rc, ReadOnlySpan<float> tc, ref readonly Color4<Rgba> c, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (float* n_ptr = n)
                        {
                            fixed (float* tc_ptr = tc)
                            {
                                fixed (Color4<Rgba>* tmp_c = &c)
                                {
                                    float* c_ptr = (float*)tmp_c;
                                    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                                }
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref readonly TriangleListSUN rc, float[] tc, ref readonly Color4<Rgba> c, float[] n, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (float* n_ptr = n)
                        {
                            fixed (float* tc_ptr = tc)
                            {
                                fixed (Color4<Rgba>* tmp_c = &c)
                                {
                                    float* c_ptr = (float*)tmp_c;
                                    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                                }
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref readonly TriangleListSUN rc, ref readonly float tc, ref readonly Color4<Rgba> c, ref readonly float n, ref readonly float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* tc_ptr = &tc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color4<Rgba>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref readonly TriangleListSUN rc, ReadOnlySpan<float> tc, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (float* n_ptr = n)
                        {
                            fixed (float* tc_ptr = tc)
                            {
                                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref readonly TriangleListSUN rc, float[] tc, float[] n, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (float* n_ptr = n)
                        {
                            fixed (float* tc_ptr = tc)
                            {
                                ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(TriangleListSUN*, float*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref readonly TriangleListSUN rc, ref readonly float tc, ref readonly float n, ref readonly float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* tc_ptr = &tc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref readonly TriangleListSUN rc, ReadOnlySpan<float> tc, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (float* tc_ptr = tc)
                        {
                            ReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref readonly TriangleListSUN rc, float[] tc, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        fixed (float* tc_ptr = tc)
                        {
                            ReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiTexCoord2fVertex3fvSUN(TriangleListSUN*, float*, float*)"/>
            public static unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref readonly TriangleListSUN rc, ref readonly float tc, ref readonly float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* tc_ptr = &tc)
                fixed (float* v_ptr = &v)
                {
                    ReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiVertex3fvSUN(TriangleListSUN*, float*)"/>
            public static unsafe void ReplacementCodeuiVertex3fvSUN(ref readonly TriangleListSUN rc, ReadOnlySpan<float> v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        ReplacementCodeuiVertex3fvSUN(rc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiVertex3fvSUN(TriangleListSUN*, float*)"/>
            public static unsafe void ReplacementCodeuiVertex3fvSUN(ref readonly TriangleListSUN rc, float[] v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                {
                    fixed (float* v_ptr = v)
                    {
                        ReplacementCodeuiVertex3fvSUN(rc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="ReplacementCodeuiVertex3fvSUN(TriangleListSUN*, float*)"/>
            public static unsafe void ReplacementCodeuiVertex3fvSUN(ref readonly TriangleListSUN rc, ref readonly float v)
            {
                fixed (TriangleListSUN* rc_ptr = &rc)
                fixed (float* v_ptr = &v)
                {
                    ReplacementCodeuiVertex3fvSUN(rc_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuivSUN(TriangleListSUN*)"/>
            public static unsafe void ReplacementCodeuivSUN(ReadOnlySpan<TriangleListSUN> code)
            {
                fixed (TriangleListSUN* code_ptr = code)
                {
                    ReplacementCodeuivSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuivSUN(TriangleListSUN*)"/>
            public static unsafe void ReplacementCodeuivSUN(TriangleListSUN[] code)
            {
                fixed (TriangleListSUN* code_ptr = code)
                {
                    ReplacementCodeuivSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeuivSUN(TriangleListSUN*)"/>
            public static unsafe void ReplacementCodeuivSUN(ref readonly TriangleListSUN code)
            {
                fixed (TriangleListSUN* code_ptr = &code)
                {
                    ReplacementCodeuivSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeusvSUN(ushort*)"/>
            public static unsafe void ReplacementCodeusvSUN(ReadOnlySpan<ushort> code)
            {
                fixed (ushort* code_ptr = code)
                {
                    ReplacementCodeusvSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeusvSUN(ushort*)"/>
            public static unsafe void ReplacementCodeusvSUN(ushort[] code)
            {
                fixed (ushort* code_ptr = code)
                {
                    ReplacementCodeusvSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="ReplacementCodeusvSUN(ushort*)"/>
            public static unsafe void ReplacementCodeusvSUN(ref readonly ushort code)
            {
                fixed (ushort* code_ptr = &code)
                {
                    ReplacementCodeusvSUN(code_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2fColor3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor3fVertex3fvSUN(ReadOnlySpan<float> tc, ref readonly Color3<Rgb> c, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        fixed (Color3<Rgb>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            TexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor3fVertex3fvSUN(float[] tc, ref readonly Color3<Rgb> c, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        fixed (Color3<Rgb>* tmp_c = &c)
                        {
                            float* c_ptr = (float*)tmp_c;
                            TexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor3fVertex3fvSUN(ref readonly float tc, ref readonly Color3<Rgb> c, ref readonly float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color3<Rgb>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        TexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4fNormal3fVertex3fvSUN(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ReadOnlySpan<float> tc, ref readonly Color4<Rgba> c, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* tc_ptr = tc)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                TexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4fNormal3fVertex3fvSUN(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, ref readonly Color4<Rgba> c, float[] n, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* tc_ptr = tc)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                TexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4fNormal3fVertex3fvSUN(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref readonly float tc, ref readonly Color4<Rgba> c, ref readonly float n, ref readonly float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color4<Rgba>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        TexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4ubVertex3fvSUN(float*, byte*, float*)"/>
            public static unsafe void TexCoord2fColor4ubVertex3fvSUN(ReadOnlySpan<float> tc, ReadOnlySpan<byte> c, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (byte* c_ptr = c)
                    {
                        fixed (float* tc_ptr = tc)
                        {
                            TexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4ubVertex3fvSUN(float*, byte*, float*)"/>
            public static unsafe void TexCoord2fColor4ubVertex3fvSUN(float[] tc, byte[] c, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (byte* c_ptr = c)
                    {
                        fixed (float* tc_ptr = tc)
                        {
                            TexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fColor4ubVertex3fvSUN(float*, byte*, float*)"/>
            public static unsafe void TexCoord2fColor4ubVertex3fvSUN(ref readonly float tc, ref readonly byte c, ref readonly float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (byte* c_ptr = &c)
                fixed (float* v_ptr = &v)
                {
                    TexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2fNormal3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void TexCoord2fNormal3fVertex3fvSUN(ReadOnlySpan<float> tc, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* tc_ptr = tc)
                        {
                            TexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fNormal3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void TexCoord2fNormal3fVertex3fvSUN(float[] tc, float[] n, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* tc_ptr = tc)
                        {
                            TexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v_ptr);
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fNormal3fVertex3fvSUN(float*, float*, float*)"/>
            public static unsafe void TexCoord2fNormal3fVertex3fvSUN(ref readonly float tc, ref readonly float n, ref readonly float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    TexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord2fVertex3fvSUN(float*, float*)"/>
            public static unsafe void TexCoord2fVertex3fvSUN(ReadOnlySpan<float> tc, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        TexCoord2fVertex3fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fVertex3fvSUN(float*, float*)"/>
            public static unsafe void TexCoord2fVertex3fvSUN(float[] tc, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        TexCoord2fVertex3fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord2fVertex3fvSUN(float*, float*)"/>
            public static unsafe void TexCoord2fVertex3fvSUN(ref readonly float tc, ref readonly float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* v_ptr = &v)
                {
                    TexCoord2fVertex3fvSUN(tc_ptr, v_ptr);
                }
            }
            /// <inheritdoc cref="TexCoord4fColor4fNormal3fVertex4fvSUN(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ReadOnlySpan<float> tc, ref readonly Color4<Rgba> c, ReadOnlySpan<float> n, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* tc_ptr = tc)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                TexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord4fColor4fNormal3fVertex4fvSUN(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, ref readonly Color4<Rgba> c, float[] n, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* n_ptr = n)
                    {
                        fixed (float* tc_ptr = tc)
                        {
                            fixed (Color4<Rgba>* tmp_c = &c)
                            {
                                float* c_ptr = (float*)tmp_c;
                                TexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                            }
                        }
                    }
                }
            }
            /// <inheritdoc cref="TexCoord4fColor4fNormal3fVertex4fvSUN(float*, float*, float*, float*)"/>
            public static unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref readonly float tc, ref readonly Color4<Rgba> c, ref readonly float n, ref readonly float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* n_ptr = &n)
                fixed (float* v_ptr = &v)
                {
                    fixed (Color4<Rgba>* tmp_c = &c)
                    {
                        float* c_ptr = (float*)tmp_c;
                        TexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord4fVertex4fvSUN(float*, float*)"/>
            public static unsafe void TexCoord4fVertex4fvSUN(ReadOnlySpan<float> tc, ReadOnlySpan<float> v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        TexCoord4fVertex4fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord4fVertex4fvSUN(float*, float*)"/>
            public static unsafe void TexCoord4fVertex4fvSUN(float[] tc, float[] v)
            {
                fixed (float* v_ptr = v)
                {
                    fixed (float* tc_ptr = tc)
                    {
                        TexCoord4fVertex4fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            /// <inheritdoc cref="TexCoord4fVertex4fvSUN(float*, float*)"/>
            public static unsafe void TexCoord4fVertex4fvSUN(ref readonly float tc, ref readonly float v)
            {
                fixed (float* tc_ptr = &tc)
                fixed (float* v_ptr = &v)
                {
                    TexCoord4fVertex4fvSUN(tc_ptr, v_ptr);
                }
            }
        }
        public static unsafe partial class SUNX
        {
        }
    }
}
