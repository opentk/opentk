// This file is auto generated, do not edit.
using OpenTK.Mathematics;
using OpenTK.Graphics.Vulkan.VulkanVideoCodecsCommon;
using OpenTK.Graphics.Vulkan.VulkanVideoCodecH264std;
using OpenTK.Graphics.Vulkan.VulkanVideoCodecH264stdDecode;
using OpenTK.Graphics.Vulkan.VulkanVideoCodecH264stdEncode;
using OpenTK.Graphics.Vulkan.VulkanVideoCodecH265std;
using OpenTK.Graphics.Vulkan.VulkanVideoCodecH265stdDecode;
using OpenTK.Graphics.Vulkan.VulkanVideoCodecH265stdEncode;
using OpenTK.Graphics.Vulkan.VulkanVideoCodecAv1std;
using OpenTK.Graphics.Vulkan.VulkanVideoCodecAv1stdDecode;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace OpenTK.Graphics.Vulkan
{
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBaseOutStructure.html" /></remarks>
    public unsafe struct VkBaseOutStructure
    {
        public VkStructureType sType;
        public VkBaseOutStructure* pNext;
        public VkBaseOutStructure() { }
        public VkBaseOutStructure(VkStructureType sType, VkBaseOutStructure* pNext)
        {
            this.sType = sType;
            this.pNext = pNext;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBaseInStructure.html" /></remarks>
    public unsafe struct VkBaseInStructure
    {
        public VkStructureType sType;
        public VkBaseInStructure* pNext;
        public VkBaseInStructure() { }
        public VkBaseInStructure(VkStructureType sType, VkBaseInStructure* pNext)
        {
            this.sType = sType;
            this.pNext = pNext;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkOffset2D.html" /></remarks>
    public unsafe struct VkOffset2D
    {
        public int x;
        public int y;
        public VkOffset2D() { }
        public VkOffset2D(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkOffset3D.html" /></remarks>
    public unsafe struct VkOffset3D
    {
        public int x;
        public int y;
        public int z;
        public VkOffset3D() { }
        public VkOffset3D(int x, int y, int z)
        {
            this.x = x;
            this.y = y;
            this.z = z;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExtent2D.html" /></remarks>
    public unsafe struct VkExtent2D
    {
        public uint width;
        public uint height;
        public VkExtent2D() { }
        public VkExtent2D(uint width, uint height)
        {
            this.width = width;
            this.height = height;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExtent3D.html" /></remarks>
    public unsafe struct VkExtent3D
    {
        public uint width;
        public uint height;
        public uint depth;
        public VkExtent3D() { }
        public VkExtent3D(uint width, uint height, uint depth)
        {
            this.width = width;
            this.height = height;
            this.depth = depth;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkViewport.html" /></remarks>
    public unsafe struct VkViewport
    {
        public float x;
        public float y;
        public float width;
        public float height;
        public float minDepth;
        public float maxDepth;
        public VkViewport() { }
        public VkViewport(float x, float y, float width, float height, float minDepth, float maxDepth)
        {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.minDepth = minDepth;
            this.maxDepth = maxDepth;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRect2D.html" /></remarks>
    public unsafe struct VkRect2D
    {
        public VkOffset2D offset;
        public VkExtent2D extent;
        public VkRect2D() { }
        public VkRect2D(VkOffset2D offset, VkExtent2D extent)
        {
            this.offset = offset;
            this.extent = extent;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkClearRect.html" /></remarks>
    public unsafe struct VkClearRect
    {
        public VkRect2D rect;
        public uint baseArrayLayer;
        public uint layerCount;
        public VkClearRect() { }
        public VkClearRect(VkRect2D rect, uint baseArrayLayer, uint layerCount)
        {
            this.rect = rect;
            this.baseArrayLayer = baseArrayLayer;
            this.layerCount = layerCount;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkComponentMapping.html" /></remarks>
    public unsafe struct VkComponentMapping
    {
        public VkComponentSwizzle r;
        public VkComponentSwizzle g;
        public VkComponentSwizzle b;
        public VkComponentSwizzle a;
        public VkComponentMapping() { }
        public VkComponentMapping(VkComponentSwizzle r, VkComponentSwizzle g, VkComponentSwizzle b, VkComponentSwizzle a)
        {
            this.r = r;
            this.g = g;
            this.b = b;
            this.a = a;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceProperties
    {
        public uint apiVersion;
        public uint driverVersion;
        public uint vendorID;
        public uint deviceID;
        public VkPhysicalDeviceType deviceType;
        public fixed byte deviceName[256];
        public fixed byte pipelineCacheUUID[16];
        public VkPhysicalDeviceLimits limits;
        public VkPhysicalDeviceSparseProperties sparseProperties;
        public VkPhysicalDeviceProperties() { }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExtensionProperties.html" /></remarks>
    public unsafe struct VkExtensionProperties
    {
        public fixed byte extensionName[256];
        public uint specVersion;
        public VkExtensionProperties() { }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkLayerProperties.html" /></remarks>
    public unsafe struct VkLayerProperties
    {
        public fixed byte layerName[256];
        public uint specVersion;
        public uint implementationVersion;
        public fixed byte description[256];
        public VkLayerProperties() { }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkApplicationInfo.html" /></remarks>
    public unsafe struct VkApplicationInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeApplicationInfo;
        public void* pNext;
        public byte* pApplicationName;
        public uint applicationVersion;
        public byte* pEngineName;
        public uint engineVersion;
        public uint apiVersion;
        public VkApplicationInfo() { }
        public VkApplicationInfo(VkStructureType sType, void* pNext, byte* pApplicationName, uint applicationVersion, byte* pEngineName, uint engineVersion, uint apiVersion)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pApplicationName = pApplicationName;
            this.applicationVersion = applicationVersion;
            this.pEngineName = pEngineName;
            this.engineVersion = engineVersion;
            this.apiVersion = apiVersion;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAllocationCallbacks.html" /></remarks>
    public unsafe struct VkAllocationCallbacks
    {
        public void* pUserData;
        public delegate* unmanaged[Cdecl]<void*, nuint, nuint, VkSystemAllocationScope, void*> pfnAllocation;
        public delegate* unmanaged[Cdecl]<void*, void*, nuint, nuint, VkSystemAllocationScope, void*> pfnReallocation;
        public delegate* unmanaged[Cdecl]<void*, void*, void> pfnFree;
        public delegate* unmanaged[Cdecl]<void*, nuint, VkInternalAllocationType, VkSystemAllocationScope, void> pfnInternalAllocation;
        public delegate* unmanaged[Cdecl]<void*, nuint, VkInternalAllocationType, VkSystemAllocationScope, void> pfnInternalFree;
        public VkAllocationCallbacks() { }
        public VkAllocationCallbacks(void* pUserData, delegate* unmanaged[Cdecl]<void*, nuint, nuint, VkSystemAllocationScope, void*> pfnAllocation, delegate* unmanaged[Cdecl]<void*, void*, nuint, nuint, VkSystemAllocationScope, void*> pfnReallocation, delegate* unmanaged[Cdecl]<void*, void*, void> pfnFree, delegate* unmanaged[Cdecl]<void*, nuint, VkInternalAllocationType, VkSystemAllocationScope, void> pfnInternalAllocation, delegate* unmanaged[Cdecl]<void*, nuint, VkInternalAllocationType, VkSystemAllocationScope, void> pfnInternalFree)
        {
            this.pUserData = pUserData;
            this.pfnAllocation = pfnAllocation;
            this.pfnReallocation = pfnReallocation;
            this.pfnFree = pfnFree;
            this.pfnInternalAllocation = pfnInternalAllocation;
            this.pfnInternalFree = pfnInternalFree;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceQueueCreateInfo.html" /></remarks>
    public unsafe struct VkDeviceQueueCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceQueueCreateInfo;
        public void* pNext;
        public VkDeviceQueueCreateFlagBits flags;
        public uint queueFamilyIndex;
        public uint queueCount;
        public float* pQueuePriorities;
        public VkDeviceQueueCreateInfo() { }
        public VkDeviceQueueCreateInfo(VkStructureType sType, void* pNext, VkDeviceQueueCreateFlagBits flags, uint queueFamilyIndex, uint queueCount, float* pQueuePriorities)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.queueFamilyIndex = queueFamilyIndex;
            this.queueCount = queueCount;
            this.pQueuePriorities = pQueuePriorities;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceCreateInfo.html" /></remarks>
    public unsafe struct VkDeviceCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceCreateInfo;
        public void* pNext;
        public VkDeviceCreateFlags flags;
        public uint queueCreateInfoCount;
        public VkDeviceQueueCreateInfo* pQueueCreateInfos;
        public uint enabledLayerCount;
        public byte** ppEnabledLayerNames;
        public uint enabledExtensionCount;
        public byte** ppEnabledExtensionNames;
        public VkPhysicalDeviceFeatures* pEnabledFeatures;
        public VkDeviceCreateInfo() { }
        public VkDeviceCreateInfo(VkStructureType sType, void* pNext, VkDeviceCreateFlags flags, uint queueCreateInfoCount, VkDeviceQueueCreateInfo* pQueueCreateInfos, uint enabledLayerCount, byte** ppEnabledLayerNames, uint enabledExtensionCount, byte** ppEnabledExtensionNames, VkPhysicalDeviceFeatures* pEnabledFeatures)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.queueCreateInfoCount = queueCreateInfoCount;
            this.pQueueCreateInfos = pQueueCreateInfos;
            this.enabledLayerCount = enabledLayerCount;
            this.ppEnabledLayerNames = ppEnabledLayerNames;
            this.enabledExtensionCount = enabledExtensionCount;
            this.ppEnabledExtensionNames = ppEnabledExtensionNames;
            this.pEnabledFeatures = pEnabledFeatures;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkInstanceCreateInfo.html" /></remarks>
    public unsafe struct VkInstanceCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeInstanceCreateInfo;
        public void* pNext;
        public VkInstanceCreateFlagBits flags;
        public VkApplicationInfo* pApplicationInfo;
        public uint enabledLayerCount;
        public byte** ppEnabledLayerNames;
        public uint enabledExtensionCount;
        public byte** ppEnabledExtensionNames;
        public VkInstanceCreateInfo() { }
        public VkInstanceCreateInfo(VkStructureType sType, void* pNext, VkInstanceCreateFlagBits flags, VkApplicationInfo* pApplicationInfo, uint enabledLayerCount, byte** ppEnabledLayerNames, uint enabledExtensionCount, byte** ppEnabledExtensionNames)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.pApplicationInfo = pApplicationInfo;
            this.enabledLayerCount = enabledLayerCount;
            this.ppEnabledLayerNames = ppEnabledLayerNames;
            this.enabledExtensionCount = enabledExtensionCount;
            this.ppEnabledExtensionNames = ppEnabledExtensionNames;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkQueueFamilyProperties.html" /></remarks>
    public unsafe struct VkQueueFamilyProperties
    {
        public VkQueueFlagBits queueFlags;
        public uint queueCount;
        public uint timestampValidBits;
        public VkExtent3D minImageTransferGranularity;
        public VkQueueFamilyProperties() { }
        public VkQueueFamilyProperties(VkQueueFlagBits queueFlags, uint queueCount, uint timestampValidBits, VkExtent3D minImageTransferGranularity)
        {
            this.queueFlags = queueFlags;
            this.queueCount = queueCount;
            this.timestampValidBits = timestampValidBits;
            this.minImageTransferGranularity = minImageTransferGranularity;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMemoryProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMemoryProperties
    {
        public uint memoryTypeCount;
        [InlineArray(32)]
        public struct memoryTypesInlineArray1
        {
            public VkMemoryType element;
        }
        public memoryTypesInlineArray1 memoryTypes;
        public uint memoryHeapCount;
        [InlineArray(16)]
        public struct memoryHeapsInlineArray1
        {
            public VkMemoryHeap element;
        }
        public memoryHeapsInlineArray1 memoryHeaps;
        public VkPhysicalDeviceMemoryProperties() { }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryAllocateInfo.html" /></remarks>
    public unsafe struct VkMemoryAllocateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryAllocateInfo;
        public void* pNext;
        public ulong allocationSize;
        public uint memoryTypeIndex;
        public VkMemoryAllocateInfo() { }
        public VkMemoryAllocateInfo(VkStructureType sType, void* pNext, ulong allocationSize, uint memoryTypeIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.allocationSize = allocationSize;
            this.memoryTypeIndex = memoryTypeIndex;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryRequirements.html" /></remarks>
    public unsafe struct VkMemoryRequirements
    {
        public ulong size;
        public ulong alignment;
        public uint memoryTypeBits;
        public VkMemoryRequirements() { }
        public VkMemoryRequirements(ulong size, ulong alignment, uint memoryTypeBits)
        {
            this.size = size;
            this.alignment = alignment;
            this.memoryTypeBits = memoryTypeBits;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSparseImageFormatProperties.html" /></remarks>
    public unsafe struct VkSparseImageFormatProperties
    {
        public VkImageAspectFlagBits aspectMask;
        public VkExtent3D imageGranularity;
        public VkSparseImageFormatFlagBits flags;
        public VkSparseImageFormatProperties() { }
        public VkSparseImageFormatProperties(VkImageAspectFlagBits aspectMask, VkExtent3D imageGranularity, VkSparseImageFormatFlagBits flags)
        {
            this.aspectMask = aspectMask;
            this.imageGranularity = imageGranularity;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSparseImageMemoryRequirements.html" /></remarks>
    public unsafe struct VkSparseImageMemoryRequirements
    {
        public VkSparseImageFormatProperties formatProperties;
        public uint imageMipTailFirstLod;
        public ulong imageMipTailSize;
        public ulong imageMipTailOffset;
        public ulong imageMipTailStride;
        public VkSparseImageMemoryRequirements() { }
        public VkSparseImageMemoryRequirements(VkSparseImageFormatProperties formatProperties, uint imageMipTailFirstLod, ulong imageMipTailSize, ulong imageMipTailOffset, ulong imageMipTailStride)
        {
            this.formatProperties = formatProperties;
            this.imageMipTailFirstLod = imageMipTailFirstLod;
            this.imageMipTailSize = imageMipTailSize;
            this.imageMipTailOffset = imageMipTailOffset;
            this.imageMipTailStride = imageMipTailStride;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryType.html" /></remarks>
    public unsafe struct VkMemoryType
    {
        public VkMemoryPropertyFlagBits propertyFlags;
        public uint heapIndex;
        public VkMemoryType() { }
        public VkMemoryType(VkMemoryPropertyFlagBits propertyFlags, uint heapIndex)
        {
            this.propertyFlags = propertyFlags;
            this.heapIndex = heapIndex;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryHeap.html" /></remarks>
    public unsafe struct VkMemoryHeap
    {
        public ulong size;
        public VkMemoryHeapFlagBits flags;
        public VkMemoryHeap() { }
        public VkMemoryHeap(ulong size, VkMemoryHeapFlagBits flags)
        {
            this.size = size;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMappedMemoryRange.html" /></remarks>
    public unsafe struct VkMappedMemoryRange
    {
        public VkStructureType sType = VkStructureType.StructureTypeMappedMemoryRange;
        public void* pNext;
        public VkDeviceMemory memory;
        public ulong offset;
        public ulong size;
        public VkMappedMemoryRange() { }
        public VkMappedMemoryRange(VkStructureType sType, void* pNext, VkDeviceMemory memory, ulong offset, ulong size)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memory = memory;
            this.offset = offset;
            this.size = size;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFormatProperties.html" /></remarks>
    public unsafe struct VkFormatProperties
    {
        public VkFormatFeatureFlagBits linearTilingFeatures;
        public VkFormatFeatureFlagBits optimalTilingFeatures;
        public VkFormatFeatureFlagBits bufferFeatures;
        public VkFormatProperties() { }
        public VkFormatProperties(VkFormatFeatureFlagBits linearTilingFeatures, VkFormatFeatureFlagBits optimalTilingFeatures, VkFormatFeatureFlagBits bufferFeatures)
        {
            this.linearTilingFeatures = linearTilingFeatures;
            this.optimalTilingFeatures = optimalTilingFeatures;
            this.bufferFeatures = bufferFeatures;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageFormatProperties.html" /></remarks>
    public unsafe struct VkImageFormatProperties
    {
        public VkExtent3D maxExtent;
        public uint maxMipLevels;
        public uint maxArrayLayers;
        public VkSampleCountFlagBits sampleCounts;
        public ulong maxResourceSize;
        public VkImageFormatProperties() { }
        public VkImageFormatProperties(VkExtent3D maxExtent, uint maxMipLevels, uint maxArrayLayers, VkSampleCountFlagBits sampleCounts, ulong maxResourceSize)
        {
            this.maxExtent = maxExtent;
            this.maxMipLevels = maxMipLevels;
            this.maxArrayLayers = maxArrayLayers;
            this.sampleCounts = sampleCounts;
            this.maxResourceSize = maxResourceSize;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorBufferInfo.html" /></remarks>
    public unsafe struct VkDescriptorBufferInfo
    {
        public VkBuffer buffer;
        public ulong offset;
        public ulong range;
        public VkDescriptorBufferInfo() { }
        public VkDescriptorBufferInfo(VkBuffer buffer, ulong offset, ulong range)
        {
            this.buffer = buffer;
            this.offset = offset;
            this.range = range;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorImageInfo.html" /></remarks>
    public unsafe struct VkDescriptorImageInfo
    {
        public VkSampler sampler;
        public VkImageView imageView;
        public VkImageLayout imageLayout;
        public VkDescriptorImageInfo() { }
        public VkDescriptorImageInfo(VkSampler sampler, VkImageView imageView, VkImageLayout imageLayout)
        {
            this.sampler = sampler;
            this.imageView = imageView;
            this.imageLayout = imageLayout;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkWriteDescriptorSet.html" /></remarks>
    public unsafe struct VkWriteDescriptorSet
    {
        public VkStructureType sType = VkStructureType.StructureTypeWriteDescriptorSet;
        public void* pNext;
        public VkDescriptorSet dstSet;
        public uint dstBinding;
        public uint dstArrayElement;
        public uint descriptorCount;
        public VkDescriptorType descriptorType;
        public VkDescriptorImageInfo* pImageInfo;
        public VkDescriptorBufferInfo* pBufferInfo;
        public VkBufferView* pTexelBufferView;
        public VkWriteDescriptorSet() { }
        public VkWriteDescriptorSet(VkStructureType sType, void* pNext, VkDescriptorSet dstSet, uint dstBinding, uint dstArrayElement, uint descriptorCount, VkDescriptorType descriptorType, VkDescriptorImageInfo* pImageInfo, VkDescriptorBufferInfo* pBufferInfo, VkBufferView* pTexelBufferView)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.dstSet = dstSet;
            this.dstBinding = dstBinding;
            this.dstArrayElement = dstArrayElement;
            this.descriptorCount = descriptorCount;
            this.descriptorType = descriptorType;
            this.pImageInfo = pImageInfo;
            this.pBufferInfo = pBufferInfo;
            this.pTexelBufferView = pTexelBufferView;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyDescriptorSet.html" /></remarks>
    public unsafe struct VkCopyDescriptorSet
    {
        public VkStructureType sType = VkStructureType.StructureTypeCopyDescriptorSet;
        public void* pNext;
        public VkDescriptorSet srcSet;
        public uint srcBinding;
        public uint srcArrayElement;
        public VkDescriptorSet dstSet;
        public uint dstBinding;
        public uint dstArrayElement;
        public uint descriptorCount;
        public VkCopyDescriptorSet() { }
        public VkCopyDescriptorSet(VkStructureType sType, void* pNext, VkDescriptorSet srcSet, uint srcBinding, uint srcArrayElement, VkDescriptorSet dstSet, uint dstBinding, uint dstArrayElement, uint descriptorCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcSet = srcSet;
            this.srcBinding = srcBinding;
            this.srcArrayElement = srcArrayElement;
            this.dstSet = dstSet;
            this.dstBinding = dstBinding;
            this.dstArrayElement = dstArrayElement;
            this.descriptorCount = descriptorCount;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance5]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferUsageFlags2CreateInfoKHR.html" /></remarks>
    public unsafe struct VkBufferUsageFlags2CreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferUsageFlags2CreateInfoKhr;
        public void* pNext;
        public VkBufferUsageFlagBits2KHR usage;
        public VkBufferUsageFlags2CreateInfoKHR() { }
        public VkBufferUsageFlags2CreateInfoKHR(VkStructureType sType, void* pNext, VkBufferUsageFlagBits2KHR usage)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.usage = usage;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferCreateInfo.html" /></remarks>
    public unsafe struct VkBufferCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferCreateInfo;
        public void* pNext;
        public VkBufferCreateFlagBits flags;
        public ulong size;
        public VkBufferUsageFlagBits usage;
        public VkSharingMode sharingMode;
        public uint queueFamilyIndexCount;
        public uint* pQueueFamilyIndices;
        public VkBufferCreateInfo() { }
        public VkBufferCreateInfo(VkStructureType sType, void* pNext, VkBufferCreateFlagBits flags, ulong size, VkBufferUsageFlagBits usage, VkSharingMode sharingMode, uint queueFamilyIndexCount, uint* pQueueFamilyIndices)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.size = size;
            this.usage = usage;
            this.sharingMode = sharingMode;
            this.queueFamilyIndexCount = queueFamilyIndexCount;
            this.pQueueFamilyIndices = pQueueFamilyIndices;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferViewCreateInfo.html" /></remarks>
    public unsafe struct VkBufferViewCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferViewCreateInfo;
        public void* pNext;
        public VkBufferViewCreateFlags flags;
        public VkBuffer buffer;
        public VkFormat format;
        public ulong offset;
        public ulong range;
        public VkBufferViewCreateInfo() { }
        public VkBufferViewCreateInfo(VkStructureType sType, void* pNext, VkBufferViewCreateFlags flags, VkBuffer buffer, VkFormat format, ulong offset, ulong range)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.buffer = buffer;
            this.format = format;
            this.offset = offset;
            this.range = range;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageSubresource.html" /></remarks>
    public unsafe struct VkImageSubresource
    {
        public VkImageAspectFlagBits aspectMask;
        public uint mipLevel;
        public uint arrayLayer;
        public VkImageSubresource() { }
        public VkImageSubresource(VkImageAspectFlagBits aspectMask, uint mipLevel, uint arrayLayer)
        {
            this.aspectMask = aspectMask;
            this.mipLevel = mipLevel;
            this.arrayLayer = arrayLayer;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageSubresourceLayers.html" /></remarks>
    public unsafe struct VkImageSubresourceLayers
    {
        public VkImageAspectFlagBits aspectMask;
        public uint mipLevel;
        public uint baseArrayLayer;
        public uint layerCount;
        public VkImageSubresourceLayers() { }
        public VkImageSubresourceLayers(VkImageAspectFlagBits aspectMask, uint mipLevel, uint baseArrayLayer, uint layerCount)
        {
            this.aspectMask = aspectMask;
            this.mipLevel = mipLevel;
            this.baseArrayLayer = baseArrayLayer;
            this.layerCount = layerCount;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageSubresourceRange.html" /></remarks>
    public unsafe struct VkImageSubresourceRange
    {
        public VkImageAspectFlagBits aspectMask;
        public uint baseMipLevel;
        public uint levelCount;
        public uint baseArrayLayer;
        public uint layerCount;
        public VkImageSubresourceRange() { }
        public VkImageSubresourceRange(VkImageAspectFlagBits aspectMask, uint baseMipLevel, uint levelCount, uint baseArrayLayer, uint layerCount)
        {
            this.aspectMask = aspectMask;
            this.baseMipLevel = baseMipLevel;
            this.levelCount = levelCount;
            this.baseArrayLayer = baseArrayLayer;
            this.layerCount = layerCount;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryBarrier.html" /></remarks>
    public unsafe struct VkMemoryBarrier
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryBarrier;
        public void* pNext;
        public VkAccessFlagBits srcAccessMask;
        public VkAccessFlagBits dstAccessMask;
        public VkMemoryBarrier() { }
        public VkMemoryBarrier(VkStructureType sType, void* pNext, VkAccessFlagBits srcAccessMask, VkAccessFlagBits dstAccessMask)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcAccessMask = srcAccessMask;
            this.dstAccessMask = dstAccessMask;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferMemoryBarrier.html" /></remarks>
    public unsafe struct VkBufferMemoryBarrier
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferMemoryBarrier;
        public void* pNext;
        public VkAccessFlagBits srcAccessMask;
        public VkAccessFlagBits dstAccessMask;
        public uint srcQueueFamilyIndex;
        public uint dstQueueFamilyIndex;
        public VkBuffer buffer;
        public ulong offset;
        public ulong size;
        public VkBufferMemoryBarrier() { }
        public VkBufferMemoryBarrier(VkStructureType sType, void* pNext, VkAccessFlagBits srcAccessMask, VkAccessFlagBits dstAccessMask, uint srcQueueFamilyIndex, uint dstQueueFamilyIndex, VkBuffer buffer, ulong offset, ulong size)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcAccessMask = srcAccessMask;
            this.dstAccessMask = dstAccessMask;
            this.srcQueueFamilyIndex = srcQueueFamilyIndex;
            this.dstQueueFamilyIndex = dstQueueFamilyIndex;
            this.buffer = buffer;
            this.offset = offset;
            this.size = size;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageMemoryBarrier.html" /></remarks>
    public unsafe struct VkImageMemoryBarrier
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageMemoryBarrier;
        public void* pNext;
        public VkAccessFlagBits srcAccessMask;
        public VkAccessFlagBits dstAccessMask;
        public VkImageLayout oldLayout;
        public VkImageLayout newLayout;
        public uint srcQueueFamilyIndex;
        public uint dstQueueFamilyIndex;
        public VkImage image;
        public VkImageSubresourceRange subresourceRange;
        public VkImageMemoryBarrier() { }
        public VkImageMemoryBarrier(VkStructureType sType, void* pNext, VkAccessFlagBits srcAccessMask, VkAccessFlagBits dstAccessMask, VkImageLayout oldLayout, VkImageLayout newLayout, uint srcQueueFamilyIndex, uint dstQueueFamilyIndex, VkImage image, VkImageSubresourceRange subresourceRange)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcAccessMask = srcAccessMask;
            this.dstAccessMask = dstAccessMask;
            this.oldLayout = oldLayout;
            this.newLayout = newLayout;
            this.srcQueueFamilyIndex = srcQueueFamilyIndex;
            this.dstQueueFamilyIndex = dstQueueFamilyIndex;
            this.image = image;
            this.subresourceRange = subresourceRange;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageCreateInfo.html" /></remarks>
    public unsafe struct VkImageCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageCreateInfo;
        public void* pNext;
        public VkImageCreateFlagBits flags;
        public VkImageType imageType;
        public VkFormat format;
        public VkExtent3D extent;
        public uint mipLevels;
        public uint arrayLayers;
        public VkSampleCountFlagBits samples;
        public VkImageTiling tiling;
        public VkImageUsageFlagBits usage;
        public VkSharingMode sharingMode;
        public uint queueFamilyIndexCount;
        public uint* pQueueFamilyIndices;
        public VkImageLayout initialLayout;
        public VkImageCreateInfo() { }
        public VkImageCreateInfo(VkStructureType sType, void* pNext, VkImageCreateFlagBits flags, VkImageType imageType, VkFormat format, VkExtent3D extent, uint mipLevels, uint arrayLayers, VkSampleCountFlagBits samples, VkImageTiling tiling, VkImageUsageFlagBits usage, VkSharingMode sharingMode, uint queueFamilyIndexCount, uint* pQueueFamilyIndices, VkImageLayout initialLayout)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.imageType = imageType;
            this.format = format;
            this.extent = extent;
            this.mipLevels = mipLevels;
            this.arrayLayers = arrayLayers;
            this.samples = samples;
            this.tiling = tiling;
            this.usage = usage;
            this.sharingMode = sharingMode;
            this.queueFamilyIndexCount = queueFamilyIndexCount;
            this.pQueueFamilyIndices = pQueueFamilyIndices;
            this.initialLayout = initialLayout;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubresourceLayout.html" /></remarks>
    public unsafe struct VkSubresourceLayout
    {
        public ulong offset;
        public ulong size;
        public ulong rowPitch;
        public ulong arrayPitch;
        public ulong depthPitch;
        public VkSubresourceLayout() { }
        public VkSubresourceLayout(ulong offset, ulong size, ulong rowPitch, ulong arrayPitch, ulong depthPitch)
        {
            this.offset = offset;
            this.size = size;
            this.rowPitch = rowPitch;
            this.arrayPitch = arrayPitch;
            this.depthPitch = depthPitch;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageViewCreateInfo.html" /></remarks>
    public unsafe struct VkImageViewCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageViewCreateInfo;
        public void* pNext;
        public VkImageViewCreateFlagBits flags;
        public VkImage image;
        public VkImageViewType viewType;
        public VkFormat format;
        public VkComponentMapping components;
        public VkImageSubresourceRange subresourceRange;
        public VkImageViewCreateInfo() { }
        public VkImageViewCreateInfo(VkStructureType sType, void* pNext, VkImageViewCreateFlagBits flags, VkImage image, VkImageViewType viewType, VkFormat format, VkComponentMapping components, VkImageSubresourceRange subresourceRange)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.image = image;
            this.viewType = viewType;
            this.format = format;
            this.components = components;
            this.subresourceRange = subresourceRange;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferCopy.html" /></remarks>
    public unsafe struct VkBufferCopy
    {
        public ulong srcOffset;
        public ulong dstOffset;
        public ulong size;
        public VkBufferCopy() { }
        public VkBufferCopy(ulong srcOffset, ulong dstOffset, ulong size)
        {
            this.srcOffset = srcOffset;
            this.dstOffset = dstOffset;
            this.size = size;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSparseMemoryBind.html" /></remarks>
    public unsafe struct VkSparseMemoryBind
    {
        public ulong resourceOffset;
        public ulong size;
        public VkDeviceMemory memory;
        public ulong memoryOffset;
        public VkSparseMemoryBindFlagBits flags;
        public VkSparseMemoryBind() { }
        public VkSparseMemoryBind(ulong resourceOffset, ulong size, VkDeviceMemory memory, ulong memoryOffset, VkSparseMemoryBindFlagBits flags)
        {
            this.resourceOffset = resourceOffset;
            this.size = size;
            this.memory = memory;
            this.memoryOffset = memoryOffset;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSparseImageMemoryBind.html" /></remarks>
    public unsafe struct VkSparseImageMemoryBind
    {
        public VkImageSubresource subresource;
        public VkOffset3D offset;
        public VkExtent3D extent;
        public VkDeviceMemory memory;
        public ulong memoryOffset;
        public VkSparseMemoryBindFlagBits flags;
        public VkSparseImageMemoryBind() { }
        public VkSparseImageMemoryBind(VkImageSubresource subresource, VkOffset3D offset, VkExtent3D extent, VkDeviceMemory memory, ulong memoryOffset, VkSparseMemoryBindFlagBits flags)
        {
            this.subresource = subresource;
            this.offset = offset;
            this.extent = extent;
            this.memory = memory;
            this.memoryOffset = memoryOffset;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSparseBufferMemoryBindInfo.html" /></remarks>
    public unsafe struct VkSparseBufferMemoryBindInfo
    {
        public VkBuffer buffer;
        public uint bindCount;
        public VkSparseMemoryBind* pBinds;
        public VkSparseBufferMemoryBindInfo() { }
        public VkSparseBufferMemoryBindInfo(VkBuffer buffer, uint bindCount, VkSparseMemoryBind* pBinds)
        {
            this.buffer = buffer;
            this.bindCount = bindCount;
            this.pBinds = pBinds;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSparseImageOpaqueMemoryBindInfo.html" /></remarks>
    public unsafe struct VkSparseImageOpaqueMemoryBindInfo
    {
        public VkImage image;
        public uint bindCount;
        public VkSparseMemoryBind* pBinds;
        public VkSparseImageOpaqueMemoryBindInfo() { }
        public VkSparseImageOpaqueMemoryBindInfo(VkImage image, uint bindCount, VkSparseMemoryBind* pBinds)
        {
            this.image = image;
            this.bindCount = bindCount;
            this.pBinds = pBinds;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSparseImageMemoryBindInfo.html" /></remarks>
    public unsafe struct VkSparseImageMemoryBindInfo
    {
        public VkImage image;
        public uint bindCount;
        public VkSparseImageMemoryBind* pBinds;
        public VkSparseImageMemoryBindInfo() { }
        public VkSparseImageMemoryBindInfo(VkImage image, uint bindCount, VkSparseImageMemoryBind* pBinds)
        {
            this.image = image;
            this.bindCount = bindCount;
            this.pBinds = pBinds;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindSparseInfo.html" /></remarks>
    public unsafe struct VkBindSparseInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeBindSparseInfo;
        public void* pNext;
        public uint waitSemaphoreCount;
        public VkSemaphore* pWaitSemaphores;
        public uint bufferBindCount;
        public VkSparseBufferMemoryBindInfo* pBufferBinds;
        public uint imageOpaqueBindCount;
        public VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds;
        public uint imageBindCount;
        public VkSparseImageMemoryBindInfo* pImageBinds;
        public uint signalSemaphoreCount;
        public VkSemaphore* pSignalSemaphores;
        public VkBindSparseInfo() { }
        public VkBindSparseInfo(VkStructureType sType, void* pNext, uint waitSemaphoreCount, VkSemaphore* pWaitSemaphores, uint bufferBindCount, VkSparseBufferMemoryBindInfo* pBufferBinds, uint imageOpaqueBindCount, VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds, uint imageBindCount, VkSparseImageMemoryBindInfo* pImageBinds, uint signalSemaphoreCount, VkSemaphore* pSignalSemaphores)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.waitSemaphoreCount = waitSemaphoreCount;
            this.pWaitSemaphores = pWaitSemaphores;
            this.bufferBindCount = bufferBindCount;
            this.pBufferBinds = pBufferBinds;
            this.imageOpaqueBindCount = imageOpaqueBindCount;
            this.pImageOpaqueBinds = pImageOpaqueBinds;
            this.imageBindCount = imageBindCount;
            this.pImageBinds = pImageBinds;
            this.signalSemaphoreCount = signalSemaphoreCount;
            this.pSignalSemaphores = pSignalSemaphores;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageCopy.html" /></remarks>
    public unsafe struct VkImageCopy
    {
        public VkImageSubresourceLayers srcSubresource;
        public VkOffset3D srcOffset;
        public VkImageSubresourceLayers dstSubresource;
        public VkOffset3D dstOffset;
        public VkExtent3D extent;
        public VkImageCopy() { }
        public VkImageCopy(VkImageSubresourceLayers srcSubresource, VkOffset3D srcOffset, VkImageSubresourceLayers dstSubresource, VkOffset3D dstOffset, VkExtent3D extent)
        {
            this.srcSubresource = srcSubresource;
            this.srcOffset = srcOffset;
            this.dstSubresource = dstSubresource;
            this.dstOffset = dstOffset;
            this.extent = extent;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageBlit.html" /></remarks>
    public unsafe struct VkImageBlit
    {
        public VkImageSubresourceLayers srcSubresource;
        [InlineArray(2)]
        public struct srcOffsetsInlineArray1
        {
            public VkOffset3D element;
        }
        public srcOffsetsInlineArray1 srcOffsets;
        public VkImageSubresourceLayers dstSubresource;
        [InlineArray(2)]
        public struct dstOffsetsInlineArray1
        {
            public VkOffset3D element;
        }
        public dstOffsetsInlineArray1 dstOffsets;
        public VkImageBlit() { }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferImageCopy.html" /></remarks>
    public unsafe struct VkBufferImageCopy
    {
        public ulong bufferOffset;
        public uint bufferRowLength;
        public uint bufferImageHeight;
        public VkImageSubresourceLayers imageSubresource;
        public VkOffset3D imageOffset;
        public VkExtent3D imageExtent;
        public VkBufferImageCopy() { }
        public VkBufferImageCopy(ulong bufferOffset, uint bufferRowLength, uint bufferImageHeight, VkImageSubresourceLayers imageSubresource, VkOffset3D imageOffset, VkExtent3D imageExtent)
        {
            this.bufferOffset = bufferOffset;
            this.bufferRowLength = bufferRowLength;
            this.bufferImageHeight = bufferImageHeight;
            this.imageSubresource = imageSubresource;
            this.imageOffset = imageOffset;
            this.imageExtent = imageExtent;
        }
    }
    /// <summary><b>[requires: VK_NV_copy_memory_indirect]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyMemoryIndirectCommandNV.html" /></remarks>
    public unsafe struct VkCopyMemoryIndirectCommandNV
    {
        public ulong srcAddress;
        public ulong dstAddress;
        public ulong size;
        public VkCopyMemoryIndirectCommandNV() { }
        public VkCopyMemoryIndirectCommandNV(ulong srcAddress, ulong dstAddress, ulong size)
        {
            this.srcAddress = srcAddress;
            this.dstAddress = dstAddress;
            this.size = size;
        }
    }
    /// <summary><b>[requires: VK_NV_copy_memory_indirect]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyMemoryToImageIndirectCommandNV.html" /></remarks>
    public unsafe struct VkCopyMemoryToImageIndirectCommandNV
    {
        public ulong srcAddress;
        public uint bufferRowLength;
        public uint bufferImageHeight;
        public VkImageSubresourceLayers imageSubresource;
        public VkOffset3D imageOffset;
        public VkExtent3D imageExtent;
        public VkCopyMemoryToImageIndirectCommandNV() { }
        public VkCopyMemoryToImageIndirectCommandNV(ulong srcAddress, uint bufferRowLength, uint bufferImageHeight, VkImageSubresourceLayers imageSubresource, VkOffset3D imageOffset, VkExtent3D imageExtent)
        {
            this.srcAddress = srcAddress;
            this.bufferRowLength = bufferRowLength;
            this.bufferImageHeight = bufferImageHeight;
            this.imageSubresource = imageSubresource;
            this.imageOffset = imageOffset;
            this.imageExtent = imageExtent;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageResolve.html" /></remarks>
    public unsafe struct VkImageResolve
    {
        public VkImageSubresourceLayers srcSubresource;
        public VkOffset3D srcOffset;
        public VkImageSubresourceLayers dstSubresource;
        public VkOffset3D dstOffset;
        public VkExtent3D extent;
        public VkImageResolve() { }
        public VkImageResolve(VkImageSubresourceLayers srcSubresource, VkOffset3D srcOffset, VkImageSubresourceLayers dstSubresource, VkOffset3D dstOffset, VkExtent3D extent)
        {
            this.srcSubresource = srcSubresource;
            this.srcOffset = srcOffset;
            this.dstSubresource = dstSubresource;
            this.dstOffset = dstOffset;
            this.extent = extent;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkShaderModuleCreateInfo.html" /></remarks>
    public unsafe struct VkShaderModuleCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeShaderModuleCreateInfo;
        public void* pNext;
        public VkShaderModuleCreateFlags flags;
        public nuint codeSize;
        public uint* pCode;
        public VkShaderModuleCreateInfo() { }
        public VkShaderModuleCreateInfo(VkStructureType sType, void* pNext, VkShaderModuleCreateFlags flags, nuint codeSize, uint* pCode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.codeSize = codeSize;
            this.pCode = pCode;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetLayoutBinding.html" /></remarks>
    public unsafe struct VkDescriptorSetLayoutBinding
    {
        public uint binding;
        public VkDescriptorType descriptorType;
        public uint descriptorCount;
        public VkShaderStageFlagBits stageFlags;
        public VkSampler* pImmutableSamplers;
        public VkDescriptorSetLayoutBinding() { }
        public VkDescriptorSetLayoutBinding(uint binding, VkDescriptorType descriptorType, uint descriptorCount, VkShaderStageFlagBits stageFlags, VkSampler* pImmutableSamplers)
        {
            this.binding = binding;
            this.descriptorType = descriptorType;
            this.descriptorCount = descriptorCount;
            this.stageFlags = stageFlags;
            this.pImmutableSamplers = pImmutableSamplers;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetLayoutCreateInfo.html" /></remarks>
    public unsafe struct VkDescriptorSetLayoutCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDescriptorSetLayoutCreateInfo;
        public void* pNext;
        public VkDescriptorSetLayoutCreateFlagBits flags;
        public uint bindingCount;
        public VkDescriptorSetLayoutBinding* pBindings;
        public VkDescriptorSetLayoutCreateInfo() { }
        public VkDescriptorSetLayoutCreateInfo(VkStructureType sType, void* pNext, VkDescriptorSetLayoutCreateFlagBits flags, uint bindingCount, VkDescriptorSetLayoutBinding* pBindings)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.bindingCount = bindingCount;
            this.pBindings = pBindings;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorPoolSize.html" /></remarks>
    public unsafe struct VkDescriptorPoolSize
    {
        public VkDescriptorType type;
        public uint descriptorCount;
        public VkDescriptorPoolSize() { }
        public VkDescriptorPoolSize(VkDescriptorType type, uint descriptorCount)
        {
            this.type = type;
            this.descriptorCount = descriptorCount;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorPoolCreateInfo.html" /></remarks>
    public unsafe struct VkDescriptorPoolCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDescriptorPoolCreateInfo;
        public void* pNext;
        public VkDescriptorPoolCreateFlagBits flags;
        public uint maxSets;
        public uint poolSizeCount;
        public VkDescriptorPoolSize* pPoolSizes;
        public VkDescriptorPoolCreateInfo() { }
        public VkDescriptorPoolCreateInfo(VkStructureType sType, void* pNext, VkDescriptorPoolCreateFlagBits flags, uint maxSets, uint poolSizeCount, VkDescriptorPoolSize* pPoolSizes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.maxSets = maxSets;
            this.poolSizeCount = poolSizeCount;
            this.pPoolSizes = pPoolSizes;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetAllocateInfo.html" /></remarks>
    public unsafe struct VkDescriptorSetAllocateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDescriptorSetAllocateInfo;
        public void* pNext;
        public VkDescriptorPool descriptorPool;
        public uint descriptorSetCount;
        public VkDescriptorSetLayout* pSetLayouts;
        public VkDescriptorSetAllocateInfo() { }
        public VkDescriptorSetAllocateInfo(VkStructureType sType, void* pNext, VkDescriptorPool descriptorPool, uint descriptorSetCount, VkDescriptorSetLayout* pSetLayouts)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.descriptorPool = descriptorPool;
            this.descriptorSetCount = descriptorSetCount;
            this.pSetLayouts = pSetLayouts;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSpecializationMapEntry.html" /></remarks>
    public unsafe struct VkSpecializationMapEntry
    {
        public uint constantID;
        public uint offset;
        public nuint size;
        public VkSpecializationMapEntry() { }
        public VkSpecializationMapEntry(uint constantID, uint offset, nuint size)
        {
            this.constantID = constantID;
            this.offset = offset;
            this.size = size;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSpecializationInfo.html" /></remarks>
    public unsafe struct VkSpecializationInfo
    {
        public uint mapEntryCount;
        public VkSpecializationMapEntry* pMapEntries;
        public nuint dataSize;
        public void* pData;
        public VkSpecializationInfo() { }
        public VkSpecializationInfo(uint mapEntryCount, VkSpecializationMapEntry* pMapEntries, nuint dataSize, void* pData)
        {
            this.mapEntryCount = mapEntryCount;
            this.pMapEntries = pMapEntries;
            this.dataSize = dataSize;
            this.pData = pData;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineShaderStageCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineShaderStageCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineShaderStageCreateInfo;
        public void* pNext;
        public VkPipelineShaderStageCreateFlagBits flags;
        public VkShaderStageFlagBits stage;
        public VkShaderModule module;
        public byte* pName;
        public VkSpecializationInfo* pSpecializationInfo;
        public VkPipelineShaderStageCreateInfo() { }
        public VkPipelineShaderStageCreateInfo(VkStructureType sType, void* pNext, VkPipelineShaderStageCreateFlagBits flags, VkShaderStageFlagBits stage, VkShaderModule module, byte* pName, VkSpecializationInfo* pSpecializationInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.stage = stage;
            this.module = module;
            this.pName = pName;
            this.pSpecializationInfo = pSpecializationInfo;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkComputePipelineCreateInfo.html" /></remarks>
    public unsafe struct VkComputePipelineCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeComputePipelineCreateInfo;
        public void* pNext;
        public VkPipelineCreateFlagBits flags;
        public VkPipelineShaderStageCreateInfo stage;
        public VkPipelineLayout layout;
        public VkPipeline basePipelineHandle;
        public int basePipelineIndex;
        public VkComputePipelineCreateInfo() { }
        public VkComputePipelineCreateInfo(VkStructureType sType, void* pNext, VkPipelineCreateFlagBits flags, VkPipelineShaderStageCreateInfo stage, VkPipelineLayout layout, VkPipeline basePipelineHandle, int basePipelineIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.stage = stage;
            this.layout = layout;
            this.basePipelineHandle = basePipelineHandle;
            this.basePipelineIndex = basePipelineIndex;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands_compute]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkComputePipelineIndirectBufferInfoNV.html" /></remarks>
    public unsafe struct VkComputePipelineIndirectBufferInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeComputePipelineIndirectBufferInfoNv;
        public void* pNext;
        public ulong deviceAddress;
        public ulong size;
        public ulong pipelineDeviceAddressCaptureReplay;
        public VkComputePipelineIndirectBufferInfoNV() { }
        public VkComputePipelineIndirectBufferInfoNV(VkStructureType sType, void* pNext, ulong deviceAddress, ulong size, ulong pipelineDeviceAddressCaptureReplay)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.deviceAddress = deviceAddress;
            this.size = size;
            this.pipelineDeviceAddressCaptureReplay = pipelineDeviceAddressCaptureReplay;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance5]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineCreateFlags2CreateInfoKHR.html" /></remarks>
    public unsafe struct VkPipelineCreateFlags2CreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineCreateFlags2CreateInfoKhr;
        public void* pNext;
        public VkPipelineCreateFlagBits2KHR flags;
        public VkPipelineCreateFlags2CreateInfoKHR() { }
        public VkPipelineCreateFlags2CreateInfoKHR(VkStructureType sType, void* pNext, VkPipelineCreateFlagBits2KHR flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVertexInputBindingDescription.html" /></remarks>
    public unsafe struct VkVertexInputBindingDescription
    {
        public uint binding;
        public uint stride;
        public VkVertexInputRate inputRate;
        public VkVertexInputBindingDescription() { }
        public VkVertexInputBindingDescription(uint binding, uint stride, VkVertexInputRate inputRate)
        {
            this.binding = binding;
            this.stride = stride;
            this.inputRate = inputRate;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVertexInputAttributeDescription.html" /></remarks>
    public unsafe struct VkVertexInputAttributeDescription
    {
        public uint location;
        public uint binding;
        public VkFormat format;
        public uint offset;
        public VkVertexInputAttributeDescription() { }
        public VkVertexInputAttributeDescription(uint location, uint binding, VkFormat format, uint offset)
        {
            this.location = location;
            this.binding = binding;
            this.format = format;
            this.offset = offset;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineVertexInputStateCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineVertexInputStateCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineVertexInputStateCreateInfo;
        public void* pNext;
        public VkPipelineVertexInputStateCreateFlags flags;
        public uint vertexBindingDescriptionCount;
        public VkVertexInputBindingDescription* pVertexBindingDescriptions;
        public uint vertexAttributeDescriptionCount;
        public VkVertexInputAttributeDescription* pVertexAttributeDescriptions;
        public VkPipelineVertexInputStateCreateInfo() { }
        public VkPipelineVertexInputStateCreateInfo(VkStructureType sType, void* pNext, VkPipelineVertexInputStateCreateFlags flags, uint vertexBindingDescriptionCount, VkVertexInputBindingDescription* pVertexBindingDescriptions, uint vertexAttributeDescriptionCount, VkVertexInputAttributeDescription* pVertexAttributeDescriptions)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.vertexBindingDescriptionCount = vertexBindingDescriptionCount;
            this.pVertexBindingDescriptions = pVertexBindingDescriptions;
            this.vertexAttributeDescriptionCount = vertexAttributeDescriptionCount;
            this.pVertexAttributeDescriptions = pVertexAttributeDescriptions;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineInputAssemblyStateCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineInputAssemblyStateCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineInputAssemblyStateCreateInfo;
        public void* pNext;
        public VkPipelineInputAssemblyStateCreateFlags flags;
        public VkPrimitiveTopology topology;
        public int primitiveRestartEnable;
        public VkPipelineInputAssemblyStateCreateInfo() { }
        public VkPipelineInputAssemblyStateCreateInfo(VkStructureType sType, void* pNext, VkPipelineInputAssemblyStateCreateFlags flags, VkPrimitiveTopology topology, int primitiveRestartEnable)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.topology = topology;
            this.primitiveRestartEnable = primitiveRestartEnable;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineTessellationStateCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineTessellationStateCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineTessellationStateCreateInfo;
        public void* pNext;
        public VkPipelineTessellationStateCreateFlags flags;
        public uint patchControlPoints;
        public VkPipelineTessellationStateCreateInfo() { }
        public VkPipelineTessellationStateCreateInfo(VkStructureType sType, void* pNext, VkPipelineTessellationStateCreateFlags flags, uint patchControlPoints)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.patchControlPoints = patchControlPoints;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineViewportStateCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineViewportStateCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineViewportStateCreateInfo;
        public void* pNext;
        public VkPipelineViewportStateCreateFlags flags;
        public uint viewportCount;
        public VkViewport* pViewports;
        public uint scissorCount;
        public VkRect2D* pScissors;
        public VkPipelineViewportStateCreateInfo() { }
        public VkPipelineViewportStateCreateInfo(VkStructureType sType, void* pNext, VkPipelineViewportStateCreateFlags flags, uint viewportCount, VkViewport* pViewports, uint scissorCount, VkRect2D* pScissors)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.viewportCount = viewportCount;
            this.pViewports = pViewports;
            this.scissorCount = scissorCount;
            this.pScissors = pScissors;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineRasterizationStateCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineRasterizationStateCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineRasterizationStateCreateInfo;
        public void* pNext;
        public VkPipelineRasterizationStateCreateFlags flags;
        public int depthClampEnable;
        public int rasterizerDiscardEnable;
        public VkPolygonMode polygonMode;
        public VkCullModeFlagBits cullMode;
        public VkFrontFace frontFace;
        public int depthBiasEnable;
        public float depthBiasConstantFactor;
        public float depthBiasClamp;
        public float depthBiasSlopeFactor;
        public float lineWidth;
        public VkPipelineRasterizationStateCreateInfo() { }
        public VkPipelineRasterizationStateCreateInfo(VkStructureType sType, void* pNext, VkPipelineRasterizationStateCreateFlags flags, int depthClampEnable, int rasterizerDiscardEnable, VkPolygonMode polygonMode, VkCullModeFlagBits cullMode, VkFrontFace frontFace, int depthBiasEnable, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor, float lineWidth)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.depthClampEnable = depthClampEnable;
            this.rasterizerDiscardEnable = rasterizerDiscardEnable;
            this.polygonMode = polygonMode;
            this.cullMode = cullMode;
            this.frontFace = frontFace;
            this.depthBiasEnable = depthBiasEnable;
            this.depthBiasConstantFactor = depthBiasConstantFactor;
            this.depthBiasClamp = depthBiasClamp;
            this.depthBiasSlopeFactor = depthBiasSlopeFactor;
            this.lineWidth = lineWidth;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineMultisampleStateCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineMultisampleStateCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineMultisampleStateCreateInfo;
        public void* pNext;
        public VkPipelineMultisampleStateCreateFlags flags;
        public VkSampleCountFlagBits rasterizationSamples;
        public int sampleShadingEnable;
        public float minSampleShading;
        public uint* pSampleMask;
        public int alphaToCoverageEnable;
        public int alphaToOneEnable;
        public VkPipelineMultisampleStateCreateInfo() { }
        public VkPipelineMultisampleStateCreateInfo(VkStructureType sType, void* pNext, VkPipelineMultisampleStateCreateFlags flags, VkSampleCountFlagBits rasterizationSamples, int sampleShadingEnable, float minSampleShading, uint* pSampleMask, int alphaToCoverageEnable, int alphaToOneEnable)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.rasterizationSamples = rasterizationSamples;
            this.sampleShadingEnable = sampleShadingEnable;
            this.minSampleShading = minSampleShading;
            this.pSampleMask = pSampleMask;
            this.alphaToCoverageEnable = alphaToCoverageEnable;
            this.alphaToOneEnable = alphaToOneEnable;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineColorBlendAttachmentState.html" /></remarks>
    public unsafe struct VkPipelineColorBlendAttachmentState
    {
        public int blendEnable;
        public VkBlendFactor srcColorBlendFactor;
        public VkBlendFactor dstColorBlendFactor;
        public VkBlendOp colorBlendOp;
        public VkBlendFactor srcAlphaBlendFactor;
        public VkBlendFactor dstAlphaBlendFactor;
        public VkBlendOp alphaBlendOp;
        public VkColorComponentFlagBits colorWriteMask;
        public VkPipelineColorBlendAttachmentState() { }
        public VkPipelineColorBlendAttachmentState(int blendEnable, VkBlendFactor srcColorBlendFactor, VkBlendFactor dstColorBlendFactor, VkBlendOp colorBlendOp, VkBlendFactor srcAlphaBlendFactor, VkBlendFactor dstAlphaBlendFactor, VkBlendOp alphaBlendOp, VkColorComponentFlagBits colorWriteMask)
        {
            this.blendEnable = blendEnable;
            this.srcColorBlendFactor = srcColorBlendFactor;
            this.dstColorBlendFactor = dstColorBlendFactor;
            this.colorBlendOp = colorBlendOp;
            this.srcAlphaBlendFactor = srcAlphaBlendFactor;
            this.dstAlphaBlendFactor = dstAlphaBlendFactor;
            this.alphaBlendOp = alphaBlendOp;
            this.colorWriteMask = colorWriteMask;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineColorBlendStateCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineColorBlendStateCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineColorBlendStateCreateInfo;
        public void* pNext;
        public VkPipelineColorBlendStateCreateFlagBits flags;
        public int logicOpEnable;
        public VkLogicOp logicOp;
        public uint attachmentCount;
        public VkPipelineColorBlendAttachmentState* pAttachments;
        public fixed float blendConstants[4];
        public VkPipelineColorBlendStateCreateInfo() { }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineDynamicStateCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineDynamicStateCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineDynamicStateCreateInfo;
        public void* pNext;
        public VkPipelineDynamicStateCreateFlags flags;
        public uint dynamicStateCount;
        public VkDynamicState* pDynamicStates;
        public VkPipelineDynamicStateCreateInfo() { }
        public VkPipelineDynamicStateCreateInfo(VkStructureType sType, void* pNext, VkPipelineDynamicStateCreateFlags flags, uint dynamicStateCount, VkDynamicState* pDynamicStates)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.dynamicStateCount = dynamicStateCount;
            this.pDynamicStates = pDynamicStates;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkStencilOpState.html" /></remarks>
    public unsafe struct VkStencilOpState
    {
        public VkStencilOp failOp;
        public VkStencilOp passOp;
        public VkStencilOp depthFailOp;
        public VkCompareOp compareOp;
        public uint compareMask;
        public uint writeMask;
        public uint reference;
        public VkStencilOpState() { }
        public VkStencilOpState(VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp, uint compareMask, uint writeMask, uint reference)
        {
            this.failOp = failOp;
            this.passOp = passOp;
            this.depthFailOp = depthFailOp;
            this.compareOp = compareOp;
            this.compareMask = compareMask;
            this.writeMask = writeMask;
            this.reference = reference;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineDepthStencilStateCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineDepthStencilStateCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineDepthStencilStateCreateInfo;
        public void* pNext;
        public VkPipelineDepthStencilStateCreateFlagBits flags;
        public int depthTestEnable;
        public int depthWriteEnable;
        public VkCompareOp depthCompareOp;
        public int depthBoundsTestEnable;
        public int stencilTestEnable;
        public VkStencilOpState front;
        public VkStencilOpState back;
        public float minDepthBounds;
        public float maxDepthBounds;
        public VkPipelineDepthStencilStateCreateInfo() { }
        public VkPipelineDepthStencilStateCreateInfo(VkStructureType sType, void* pNext, VkPipelineDepthStencilStateCreateFlagBits flags, int depthTestEnable, int depthWriteEnable, VkCompareOp depthCompareOp, int depthBoundsTestEnable, int stencilTestEnable, VkStencilOpState front, VkStencilOpState back, float minDepthBounds, float maxDepthBounds)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.depthTestEnable = depthTestEnable;
            this.depthWriteEnable = depthWriteEnable;
            this.depthCompareOp = depthCompareOp;
            this.depthBoundsTestEnable = depthBoundsTestEnable;
            this.stencilTestEnable = stencilTestEnable;
            this.front = front;
            this.back = back;
            this.minDepthBounds = minDepthBounds;
            this.maxDepthBounds = maxDepthBounds;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkGraphicsPipelineCreateInfo.html" /></remarks>
    public unsafe struct VkGraphicsPipelineCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeGraphicsPipelineCreateInfo;
        public void* pNext;
        public VkPipelineCreateFlagBits flags;
        public uint stageCount;
        public VkPipelineShaderStageCreateInfo* pStages;
        public VkPipelineVertexInputStateCreateInfo* pVertexInputState;
        public VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
        public VkPipelineTessellationStateCreateInfo* pTessellationState;
        public VkPipelineViewportStateCreateInfo* pViewportState;
        public VkPipelineRasterizationStateCreateInfo* pRasterizationState;
        public VkPipelineMultisampleStateCreateInfo* pMultisampleState;
        public VkPipelineDepthStencilStateCreateInfo* pDepthStencilState;
        public VkPipelineColorBlendStateCreateInfo* pColorBlendState;
        public VkPipelineDynamicStateCreateInfo* pDynamicState;
        public VkPipelineLayout layout;
        public VkRenderPass renderPass;
        public uint subpass;
        public VkPipeline basePipelineHandle;
        public int basePipelineIndex;
        public VkGraphicsPipelineCreateInfo() { }
        public VkGraphicsPipelineCreateInfo(VkStructureType sType, void* pNext, VkPipelineCreateFlagBits flags, uint stageCount, VkPipelineShaderStageCreateInfo* pStages, VkPipelineVertexInputStateCreateInfo* pVertexInputState, VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState, VkPipelineTessellationStateCreateInfo* pTessellationState, VkPipelineViewportStateCreateInfo* pViewportState, VkPipelineRasterizationStateCreateInfo* pRasterizationState, VkPipelineMultisampleStateCreateInfo* pMultisampleState, VkPipelineDepthStencilStateCreateInfo* pDepthStencilState, VkPipelineColorBlendStateCreateInfo* pColorBlendState, VkPipelineDynamicStateCreateInfo* pDynamicState, VkPipelineLayout layout, VkRenderPass renderPass, uint subpass, VkPipeline basePipelineHandle, int basePipelineIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.stageCount = stageCount;
            this.pStages = pStages;
            this.pVertexInputState = pVertexInputState;
            this.pInputAssemblyState = pInputAssemblyState;
            this.pTessellationState = pTessellationState;
            this.pViewportState = pViewportState;
            this.pRasterizationState = pRasterizationState;
            this.pMultisampleState = pMultisampleState;
            this.pDepthStencilState = pDepthStencilState;
            this.pColorBlendState = pColorBlendState;
            this.pDynamicState = pDynamicState;
            this.layout = layout;
            this.renderPass = renderPass;
            this.subpass = subpass;
            this.basePipelineHandle = basePipelineHandle;
            this.basePipelineIndex = basePipelineIndex;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineCacheCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineCacheCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineCacheCreateInfo;
        public void* pNext;
        public VkPipelineCacheCreateFlagBits flags;
        public nuint initialDataSize;
        public void* pInitialData;
        public VkPipelineCacheCreateInfo() { }
        public VkPipelineCacheCreateInfo(VkStructureType sType, void* pNext, VkPipelineCacheCreateFlagBits flags, nuint initialDataSize, void* pInitialData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.initialDataSize = initialDataSize;
            this.pInitialData = pInitialData;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineCacheHeaderVersionOne.html" /></remarks>
    public unsafe struct VkPipelineCacheHeaderVersionOne
    {
        public uint headerSize;
        public VkPipelineCacheHeaderVersion headerVersion;
        public uint vendorID;
        public uint deviceID;
        public fixed byte pipelineCacheUUID[16];
        public VkPipelineCacheHeaderVersionOne() { }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineCacheStageValidationIndexEntry.html" /></remarks>
    public unsafe struct VkPipelineCacheStageValidationIndexEntry
    {
        public ulong codeSize;
        public ulong codeOffset;
        public VkPipelineCacheStageValidationIndexEntry() { }
        public VkPipelineCacheStageValidationIndexEntry(ulong codeSize, ulong codeOffset)
        {
            this.codeSize = codeSize;
            this.codeOffset = codeOffset;
        }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineCacheSafetyCriticalIndexEntry.html" /></remarks>
    public unsafe struct VkPipelineCacheSafetyCriticalIndexEntry
    {
        public fixed byte pipelineIdentifier[16];
        public ulong pipelineMemorySize;
        public ulong jsonSize;
        public ulong jsonOffset;
        public uint stageIndexCount;
        public uint stageIndexStride;
        public ulong stageIndexOffset;
        public VkPipelineCacheSafetyCriticalIndexEntry() { }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineCacheHeaderVersionSafetyCriticalOne.html" /></remarks>
    public unsafe struct VkPipelineCacheHeaderVersionSafetyCriticalOne
    {
        public VkPipelineCacheHeaderVersionOne headerVersionOne;
        public VkPipelineCacheValidationVersion validationVersion;
        public uint implementationData;
        public uint pipelineIndexCount;
        public uint pipelineIndexStride;
        public ulong pipelineIndexOffset;
        public VkPipelineCacheHeaderVersionSafetyCriticalOne() { }
        public VkPipelineCacheHeaderVersionSafetyCriticalOne(VkPipelineCacheHeaderVersionOne headerVersionOne, VkPipelineCacheValidationVersion validationVersion, uint implementationData, uint pipelineIndexCount, uint pipelineIndexStride, ulong pipelineIndexOffset)
        {
            this.headerVersionOne = headerVersionOne;
            this.validationVersion = validationVersion;
            this.implementationData = implementationData;
            this.pipelineIndexCount = pipelineIndexCount;
            this.pipelineIndexStride = pipelineIndexStride;
            this.pipelineIndexOffset = pipelineIndexOffset;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPushConstantRange.html" /></remarks>
    public unsafe struct VkPushConstantRange
    {
        public VkShaderStageFlagBits stageFlags;
        public uint offset;
        public uint size;
        public VkPushConstantRange() { }
        public VkPushConstantRange(VkShaderStageFlagBits stageFlags, uint offset, uint size)
        {
            this.stageFlags = stageFlags;
            this.offset = offset;
            this.size = size;
        }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_binary]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineBinaryCreateInfoKHR.html" /></remarks>
    public unsafe struct VkPipelineBinaryCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineBinaryCreateInfoKhr;
        public void* pNext;
        public VkPipelineBinaryKeysAndDataKHR* pKeysAndDataInfo;
        public VkPipeline pipeline;
        public VkPipelineCreateInfoKHR* pPipelineCreateInfo;
        public VkPipelineBinaryCreateInfoKHR() { }
        public VkPipelineBinaryCreateInfoKHR(VkStructureType sType, void* pNext, VkPipelineBinaryKeysAndDataKHR* pKeysAndDataInfo, VkPipeline pipeline, VkPipelineCreateInfoKHR* pPipelineCreateInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pKeysAndDataInfo = pKeysAndDataInfo;
            this.pipeline = pipeline;
            this.pPipelineCreateInfo = pPipelineCreateInfo;
        }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_binary]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineBinaryHandlesInfoKHR.html" /></remarks>
    public unsafe struct VkPipelineBinaryHandlesInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineBinaryHandlesInfoKhr;
        public void* pNext;
        public uint pipelineBinaryCount;
        public VkPipelineBinaryKHR* pPipelineBinaries;
        public VkPipelineBinaryHandlesInfoKHR() { }
        public VkPipelineBinaryHandlesInfoKHR(VkStructureType sType, void* pNext, uint pipelineBinaryCount, VkPipelineBinaryKHR* pPipelineBinaries)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipelineBinaryCount = pipelineBinaryCount;
            this.pPipelineBinaries = pPipelineBinaries;
        }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_binary]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineBinaryDataKHR.html" /></remarks>
    public unsafe struct VkPipelineBinaryDataKHR
    {
        public nuint dataSize;
        public void* pData;
        public VkPipelineBinaryDataKHR() { }
        public VkPipelineBinaryDataKHR(nuint dataSize, void* pData)
        {
            this.dataSize = dataSize;
            this.pData = pData;
        }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_binary]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineBinaryKeysAndDataKHR.html" /></remarks>
    public unsafe struct VkPipelineBinaryKeysAndDataKHR
    {
        public uint binaryCount;
        public VkPipelineBinaryKeyKHR* pPipelineBinaryKeys;
        public VkPipelineBinaryDataKHR* pPipelineBinaryData;
        public VkPipelineBinaryKeysAndDataKHR() { }
        public VkPipelineBinaryKeysAndDataKHR(uint binaryCount, VkPipelineBinaryKeyKHR* pPipelineBinaryKeys, VkPipelineBinaryDataKHR* pPipelineBinaryData)
        {
            this.binaryCount = binaryCount;
            this.pPipelineBinaryKeys = pPipelineBinaryKeys;
            this.pPipelineBinaryData = pPipelineBinaryData;
        }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_binary]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineBinaryKeyKHR.html" /></remarks>
    public unsafe struct VkPipelineBinaryKeyKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineBinaryKeyKhr;
        public void* pNext;
        public uint keySize;
        public fixed byte key[32];
        public VkPipelineBinaryKeyKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_binary]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineBinaryInfoKHR.html" /></remarks>
    public unsafe struct VkPipelineBinaryInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineBinaryInfoKhr;
        public void* pNext;
        public uint binaryCount;
        public VkPipelineBinaryKHR* pPipelineBinaries;
        public VkPipelineBinaryInfoKHR() { }
        public VkPipelineBinaryInfoKHR(VkStructureType sType, void* pNext, uint binaryCount, VkPipelineBinaryKHR* pPipelineBinaries)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.binaryCount = binaryCount;
            this.pPipelineBinaries = pPipelineBinaries;
        }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_binary]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkReleaseCapturedPipelineDataInfoKHR.html" /></remarks>
    public unsafe struct VkReleaseCapturedPipelineDataInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeReleaseCapturedPipelineDataInfoKhr;
        public void* pNext;
        public VkPipeline pipeline;
        public VkReleaseCapturedPipelineDataInfoKHR() { }
        public VkReleaseCapturedPipelineDataInfoKHR(VkStructureType sType, void* pNext, VkPipeline pipeline)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipeline = pipeline;
        }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_binary]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineBinaryDataInfoKHR.html" /></remarks>
    public unsafe struct VkPipelineBinaryDataInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineBinaryDataInfoKhr;
        public void* pNext;
        public VkPipelineBinaryKHR pipelineBinary;
        public VkPipelineBinaryDataInfoKHR() { }
        public VkPipelineBinaryDataInfoKHR(VkStructureType sType, void* pNext, VkPipelineBinaryKHR pipelineBinary)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipelineBinary = pipelineBinary;
        }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_binary]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineCreateInfoKHR.html" /></remarks>
    public unsafe struct VkPipelineCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineCreateInfoKhr;
        public void* pNext;
        public VkPipelineCreateInfoKHR() { }
        public VkPipelineCreateInfoKHR(VkStructureType sType, void* pNext)
        {
            this.sType = sType;
            this.pNext = pNext;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineLayoutCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineLayoutCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineLayoutCreateInfo;
        public void* pNext;
        public VkPipelineLayoutCreateFlagBits flags;
        public uint setLayoutCount;
        public VkDescriptorSetLayout* pSetLayouts;
        public uint pushConstantRangeCount;
        public VkPushConstantRange* pPushConstantRanges;
        public VkPipelineLayoutCreateInfo() { }
        public VkPipelineLayoutCreateInfo(VkStructureType sType, void* pNext, VkPipelineLayoutCreateFlagBits flags, uint setLayoutCount, VkDescriptorSetLayout* pSetLayouts, uint pushConstantRangeCount, VkPushConstantRange* pPushConstantRanges)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.setLayoutCount = setLayoutCount;
            this.pSetLayouts = pSetLayouts;
            this.pushConstantRangeCount = pushConstantRangeCount;
            this.pPushConstantRanges = pPushConstantRanges;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerCreateInfo.html" /></remarks>
    public unsafe struct VkSamplerCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeSamplerCreateInfo;
        public void* pNext;
        public VkSamplerCreateFlagBits flags;
        public VkFilter magFilter;
        public VkFilter minFilter;
        public VkSamplerMipmapMode mipmapMode;
        public VkSamplerAddressMode addressModeU;
        public VkSamplerAddressMode addressModeV;
        public VkSamplerAddressMode addressModeW;
        public float mipLodBias;
        public int anisotropyEnable;
        public float maxAnisotropy;
        public int compareEnable;
        public VkCompareOp compareOp;
        public float minLod;
        public float maxLod;
        public VkBorderColor borderColor;
        public int unnormalizedCoordinates;
        public VkSamplerCreateInfo() { }
        public VkSamplerCreateInfo(VkStructureType sType, void* pNext, VkSamplerCreateFlagBits flags, VkFilter magFilter, VkFilter minFilter, VkSamplerMipmapMode mipmapMode, VkSamplerAddressMode addressModeU, VkSamplerAddressMode addressModeV, VkSamplerAddressMode addressModeW, float mipLodBias, int anisotropyEnable, float maxAnisotropy, int compareEnable, VkCompareOp compareOp, float minLod, float maxLod, VkBorderColor borderColor, int unnormalizedCoordinates)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.magFilter = magFilter;
            this.minFilter = minFilter;
            this.mipmapMode = mipmapMode;
            this.addressModeU = addressModeU;
            this.addressModeV = addressModeV;
            this.addressModeW = addressModeW;
            this.mipLodBias = mipLodBias;
            this.anisotropyEnable = anisotropyEnable;
            this.maxAnisotropy = maxAnisotropy;
            this.compareEnable = compareEnable;
            this.compareOp = compareOp;
            this.minLod = minLod;
            this.maxLod = maxLod;
            this.borderColor = borderColor;
            this.unnormalizedCoordinates = unnormalizedCoordinates;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCommandPoolCreateInfo.html" /></remarks>
    public unsafe struct VkCommandPoolCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeCommandPoolCreateInfo;
        public void* pNext;
        public VkCommandPoolCreateFlagBits flags;
        public uint queueFamilyIndex;
        public VkCommandPoolCreateInfo() { }
        public VkCommandPoolCreateInfo(VkStructureType sType, void* pNext, VkCommandPoolCreateFlagBits flags, uint queueFamilyIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.queueFamilyIndex = queueFamilyIndex;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCommandBufferAllocateInfo.html" /></remarks>
    public unsafe struct VkCommandBufferAllocateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeCommandBufferAllocateInfo;
        public void* pNext;
        public VkCommandPool commandPool;
        public VkCommandBufferLevel level;
        public uint commandBufferCount;
        public VkCommandBufferAllocateInfo() { }
        public VkCommandBufferAllocateInfo(VkStructureType sType, void* pNext, VkCommandPool commandPool, VkCommandBufferLevel level, uint commandBufferCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.commandPool = commandPool;
            this.level = level;
            this.commandBufferCount = commandBufferCount;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCommandBufferInheritanceInfo.html" /></remarks>
    public unsafe struct VkCommandBufferInheritanceInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeCommandBufferInheritanceInfo;
        public void* pNext;
        public VkRenderPass renderPass;
        public uint subpass;
        public VkFramebuffer framebuffer;
        public int occlusionQueryEnable;
        public VkQueryControlFlagBits queryFlags;
        public VkQueryPipelineStatisticFlagBits pipelineStatistics;
        public VkCommandBufferInheritanceInfo() { }
        public VkCommandBufferInheritanceInfo(VkStructureType sType, void* pNext, VkRenderPass renderPass, uint subpass, VkFramebuffer framebuffer, int occlusionQueryEnable, VkQueryControlFlagBits queryFlags, VkQueryPipelineStatisticFlagBits pipelineStatistics)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.renderPass = renderPass;
            this.subpass = subpass;
            this.framebuffer = framebuffer;
            this.occlusionQueryEnable = occlusionQueryEnable;
            this.queryFlags = queryFlags;
            this.pipelineStatistics = pipelineStatistics;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCommandBufferBeginInfo.html" /></remarks>
    public unsafe struct VkCommandBufferBeginInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeCommandBufferBeginInfo;
        public void* pNext;
        public VkCommandBufferUsageFlagBits flags;
        public VkCommandBufferInheritanceInfo* pInheritanceInfo;
        public VkCommandBufferBeginInfo() { }
        public VkCommandBufferBeginInfo(VkStructureType sType, void* pNext, VkCommandBufferUsageFlagBits flags, VkCommandBufferInheritanceInfo* pInheritanceInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.pInheritanceInfo = pInheritanceInfo;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassBeginInfo.html" /></remarks>
    public unsafe struct VkRenderPassBeginInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderPassBeginInfo;
        public void* pNext;
        public VkRenderPass renderPass;
        public VkFramebuffer framebuffer;
        public VkRect2D renderArea;
        public uint clearValueCount;
        public VkClearValue* pClearValues;
        public VkRenderPassBeginInfo() { }
        public VkRenderPassBeginInfo(VkStructureType sType, void* pNext, VkRenderPass renderPass, VkFramebuffer framebuffer, VkRect2D renderArea, uint clearValueCount, VkClearValue* pClearValues)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.renderPass = renderPass;
            this.framebuffer = framebuffer;
            this.renderArea = renderArea;
            this.clearValueCount = clearValueCount;
            this.pClearValues = pClearValues;
        }
    }
    /// <summary><b>[requires: v1.0]</b> Union allowing specification of floating-point, integer, or unsigned integer color data. Actual value selected is based on image/attachment being cleared.</summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkClearColorValue.html" /></remarks>
    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct VkClearColorValue
    {
        [FieldOffset(0)]
        public fixed float float32[4];
        [FieldOffset(0)]
        public fixed int int32[4];
        [FieldOffset(0)]
        public fixed uint uint32[4];
        public VkClearColorValue() { }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkClearDepthStencilValue.html" /></remarks>
    public unsafe struct VkClearDepthStencilValue
    {
        public float depth;
        public uint stencil;
        public VkClearDepthStencilValue() { }
        public VkClearDepthStencilValue(float depth, uint stencil)
        {
            this.depth = depth;
            this.stencil = stencil;
        }
    }
    /// <summary><b>[requires: v1.0]</b> Union allowing specification of color or depth and stencil values. Actual value selected is based on attachment being cleared.</summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkClearValue.html" /></remarks>
    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct VkClearValue
    {
        [FieldOffset(0)]
        public VkClearColorValue color;
        [FieldOffset(0)]
        public VkClearDepthStencilValue depthStencil;
        public VkClearValue() { }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkClearAttachment.html" /></remarks>
    public unsafe struct VkClearAttachment
    {
        public VkImageAspectFlagBits aspectMask;
        public uint colorAttachment;
        public VkClearValue clearValue;
        public VkClearAttachment() { }
        public VkClearAttachment(VkImageAspectFlagBits aspectMask, uint colorAttachment, VkClearValue clearValue)
        {
            this.aspectMask = aspectMask;
            this.colorAttachment = colorAttachment;
            this.clearValue = clearValue;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAttachmentDescription.html" /></remarks>
    public unsafe struct VkAttachmentDescription
    {
        public VkAttachmentDescriptionFlagBits flags;
        public VkFormat format;
        public VkSampleCountFlagBits samples;
        public VkAttachmentLoadOp loadOp;
        public VkAttachmentStoreOp storeOp;
        public VkAttachmentLoadOp stencilLoadOp;
        public VkAttachmentStoreOp stencilStoreOp;
        public VkImageLayout initialLayout;
        public VkImageLayout finalLayout;
        public VkAttachmentDescription() { }
        public VkAttachmentDescription(VkAttachmentDescriptionFlagBits flags, VkFormat format, VkSampleCountFlagBits samples, VkAttachmentLoadOp loadOp, VkAttachmentStoreOp storeOp, VkAttachmentLoadOp stencilLoadOp, VkAttachmentStoreOp stencilStoreOp, VkImageLayout initialLayout, VkImageLayout finalLayout)
        {
            this.flags = flags;
            this.format = format;
            this.samples = samples;
            this.loadOp = loadOp;
            this.storeOp = storeOp;
            this.stencilLoadOp = stencilLoadOp;
            this.stencilStoreOp = stencilStoreOp;
            this.initialLayout = initialLayout;
            this.finalLayout = finalLayout;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAttachmentReference.html" /></remarks>
    public unsafe struct VkAttachmentReference
    {
        public uint attachment;
        public VkImageLayout layout;
        public VkAttachmentReference() { }
        public VkAttachmentReference(uint attachment, VkImageLayout layout)
        {
            this.attachment = attachment;
            this.layout = layout;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassDescription.html" /></remarks>
    public unsafe struct VkSubpassDescription
    {
        public VkSubpassDescriptionFlagBits flags;
        public VkPipelineBindPoint pipelineBindPoint;
        public uint inputAttachmentCount;
        public VkAttachmentReference* pInputAttachments;
        public uint colorAttachmentCount;
        public VkAttachmentReference* pColorAttachments;
        public VkAttachmentReference* pResolveAttachments;
        public VkAttachmentReference* pDepthStencilAttachment;
        public uint preserveAttachmentCount;
        public uint* pPreserveAttachments;
        public VkSubpassDescription() { }
        public VkSubpassDescription(VkSubpassDescriptionFlagBits flags, VkPipelineBindPoint pipelineBindPoint, uint inputAttachmentCount, VkAttachmentReference* pInputAttachments, uint colorAttachmentCount, VkAttachmentReference* pColorAttachments, VkAttachmentReference* pResolveAttachments, VkAttachmentReference* pDepthStencilAttachment, uint preserveAttachmentCount, uint* pPreserveAttachments)
        {
            this.flags = flags;
            this.pipelineBindPoint = pipelineBindPoint;
            this.inputAttachmentCount = inputAttachmentCount;
            this.pInputAttachments = pInputAttachments;
            this.colorAttachmentCount = colorAttachmentCount;
            this.pColorAttachments = pColorAttachments;
            this.pResolveAttachments = pResolveAttachments;
            this.pDepthStencilAttachment = pDepthStencilAttachment;
            this.preserveAttachmentCount = preserveAttachmentCount;
            this.pPreserveAttachments = pPreserveAttachments;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassDependency.html" /></remarks>
    public unsafe struct VkSubpassDependency
    {
        public uint srcSubpass;
        public uint dstSubpass;
        public VkPipelineStageFlagBits srcStageMask;
        public VkPipelineStageFlagBits dstStageMask;
        public VkAccessFlagBits srcAccessMask;
        public VkAccessFlagBits dstAccessMask;
        public VkDependencyFlagBits dependencyFlags;
        public VkSubpassDependency() { }
        public VkSubpassDependency(uint srcSubpass, uint dstSubpass, VkPipelineStageFlagBits srcStageMask, VkPipelineStageFlagBits dstStageMask, VkAccessFlagBits srcAccessMask, VkAccessFlagBits dstAccessMask, VkDependencyFlagBits dependencyFlags)
        {
            this.srcSubpass = srcSubpass;
            this.dstSubpass = dstSubpass;
            this.srcStageMask = srcStageMask;
            this.dstStageMask = dstStageMask;
            this.srcAccessMask = srcAccessMask;
            this.dstAccessMask = dstAccessMask;
            this.dependencyFlags = dependencyFlags;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassCreateInfo.html" /></remarks>
    public unsafe struct VkRenderPassCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderPassCreateInfo;
        public void* pNext;
        public VkRenderPassCreateFlagBits flags;
        public uint attachmentCount;
        public VkAttachmentDescription* pAttachments;
        public uint subpassCount;
        public VkSubpassDescription* pSubpasses;
        public uint dependencyCount;
        public VkSubpassDependency* pDependencies;
        public VkRenderPassCreateInfo() { }
        public VkRenderPassCreateInfo(VkStructureType sType, void* pNext, VkRenderPassCreateFlagBits flags, uint attachmentCount, VkAttachmentDescription* pAttachments, uint subpassCount, VkSubpassDescription* pSubpasses, uint dependencyCount, VkSubpassDependency* pDependencies)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.attachmentCount = attachmentCount;
            this.pAttachments = pAttachments;
            this.subpassCount = subpassCount;
            this.pSubpasses = pSubpasses;
            this.dependencyCount = dependencyCount;
            this.pDependencies = pDependencies;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkEventCreateInfo.html" /></remarks>
    public unsafe struct VkEventCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeEventCreateInfo;
        public void* pNext;
        public VkEventCreateFlagBits flags;
        public VkEventCreateInfo() { }
        public VkEventCreateInfo(VkStructureType sType, void* pNext, VkEventCreateFlagBits flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFenceCreateInfo.html" /></remarks>
    public unsafe struct VkFenceCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeFenceCreateInfo;
        public void* pNext;
        public VkFenceCreateFlagBits flags;
        public VkFenceCreateInfo() { }
        public VkFenceCreateInfo(VkStructureType sType, void* pNext, VkFenceCreateFlagBits flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFeatures
    {
        public int robustBufferAccess;
        public int fullDrawIndexUint32;
        public int imageCubeArray;
        public int independentBlend;
        public int geometryShader;
        public int tessellationShader;
        public int sampleRateShading;
        public int dualSrcBlend;
        public int logicOp;
        public int multiDrawIndirect;
        public int drawIndirectFirstInstance;
        public int depthClamp;
        public int depthBiasClamp;
        public int fillModeNonSolid;
        public int depthBounds;
        public int wideLines;
        public int largePoints;
        public int alphaToOne;
        public int multiViewport;
        public int samplerAnisotropy;
        public int textureCompressionETC2;
        public int textureCompressionASTC_LDR;
        public int textureCompressionBC;
        public int occlusionQueryPrecise;
        public int pipelineStatisticsQuery;
        public int vertexPipelineStoresAndAtomics;
        public int fragmentStoresAndAtomics;
        public int shaderTessellationAndGeometryPointSize;
        public int shaderImageGatherExtended;
        public int shaderStorageImageExtendedFormats;
        public int shaderStorageImageMultisample;
        public int shaderStorageImageReadWithoutFormat;
        public int shaderStorageImageWriteWithoutFormat;
        public int shaderUniformBufferArrayDynamicIndexing;
        public int shaderSampledImageArrayDynamicIndexing;
        public int shaderStorageBufferArrayDynamicIndexing;
        public int shaderStorageImageArrayDynamicIndexing;
        public int shaderClipDistance;
        public int shaderCullDistance;
        public int shaderFloat64;
        public int shaderInt64;
        public int shaderInt16;
        public int shaderResourceResidency;
        public int shaderResourceMinLod;
        public int sparseBinding;
        public int sparseResidencyBuffer;
        public int sparseResidencyImage2D;
        public int sparseResidencyImage3D;
        public int sparseResidency2Samples;
        public int sparseResidency4Samples;
        public int sparseResidency8Samples;
        public int sparseResidency16Samples;
        public int sparseResidencyAliased;
        public int variableMultisampleRate;
        public int inheritedQueries;
        public VkPhysicalDeviceFeatures() { }
        public VkPhysicalDeviceFeatures(int robustBufferAccess, int fullDrawIndexUint32, int imageCubeArray, int independentBlend, int geometryShader, int tessellationShader, int sampleRateShading, int dualSrcBlend, int logicOp, int multiDrawIndirect, int drawIndirectFirstInstance, int depthClamp, int depthBiasClamp, int fillModeNonSolid, int depthBounds, int wideLines, int largePoints, int alphaToOne, int multiViewport, int samplerAnisotropy, int textureCompressionETC2, int textureCompressionASTC_LDR, int textureCompressionBC, int occlusionQueryPrecise, int pipelineStatisticsQuery, int vertexPipelineStoresAndAtomics, int fragmentStoresAndAtomics, int shaderTessellationAndGeometryPointSize, int shaderImageGatherExtended, int shaderStorageImageExtendedFormats, int shaderStorageImageMultisample, int shaderStorageImageReadWithoutFormat, int shaderStorageImageWriteWithoutFormat, int shaderUniformBufferArrayDynamicIndexing, int shaderSampledImageArrayDynamicIndexing, int shaderStorageBufferArrayDynamicIndexing, int shaderStorageImageArrayDynamicIndexing, int shaderClipDistance, int shaderCullDistance, int shaderFloat64, int shaderInt64, int shaderInt16, int shaderResourceResidency, int shaderResourceMinLod, int sparseBinding, int sparseResidencyBuffer, int sparseResidencyImage2D, int sparseResidencyImage3D, int sparseResidency2Samples, int sparseResidency4Samples, int sparseResidency8Samples, int sparseResidency16Samples, int sparseResidencyAliased, int variableMultisampleRate, int inheritedQueries)
        {
            this.robustBufferAccess = robustBufferAccess;
            this.fullDrawIndexUint32 = fullDrawIndexUint32;
            this.imageCubeArray = imageCubeArray;
            this.independentBlend = independentBlend;
            this.geometryShader = geometryShader;
            this.tessellationShader = tessellationShader;
            this.sampleRateShading = sampleRateShading;
            this.dualSrcBlend = dualSrcBlend;
            this.logicOp = logicOp;
            this.multiDrawIndirect = multiDrawIndirect;
            this.drawIndirectFirstInstance = drawIndirectFirstInstance;
            this.depthClamp = depthClamp;
            this.depthBiasClamp = depthBiasClamp;
            this.fillModeNonSolid = fillModeNonSolid;
            this.depthBounds = depthBounds;
            this.wideLines = wideLines;
            this.largePoints = largePoints;
            this.alphaToOne = alphaToOne;
            this.multiViewport = multiViewport;
            this.samplerAnisotropy = samplerAnisotropy;
            this.textureCompressionETC2 = textureCompressionETC2;
            this.textureCompressionASTC_LDR = textureCompressionASTC_LDR;
            this.textureCompressionBC = textureCompressionBC;
            this.occlusionQueryPrecise = occlusionQueryPrecise;
            this.pipelineStatisticsQuery = pipelineStatisticsQuery;
            this.vertexPipelineStoresAndAtomics = vertexPipelineStoresAndAtomics;
            this.fragmentStoresAndAtomics = fragmentStoresAndAtomics;
            this.shaderTessellationAndGeometryPointSize = shaderTessellationAndGeometryPointSize;
            this.shaderImageGatherExtended = shaderImageGatherExtended;
            this.shaderStorageImageExtendedFormats = shaderStorageImageExtendedFormats;
            this.shaderStorageImageMultisample = shaderStorageImageMultisample;
            this.shaderStorageImageReadWithoutFormat = shaderStorageImageReadWithoutFormat;
            this.shaderStorageImageWriteWithoutFormat = shaderStorageImageWriteWithoutFormat;
            this.shaderUniformBufferArrayDynamicIndexing = shaderUniformBufferArrayDynamicIndexing;
            this.shaderSampledImageArrayDynamicIndexing = shaderSampledImageArrayDynamicIndexing;
            this.shaderStorageBufferArrayDynamicIndexing = shaderStorageBufferArrayDynamicIndexing;
            this.shaderStorageImageArrayDynamicIndexing = shaderStorageImageArrayDynamicIndexing;
            this.shaderClipDistance = shaderClipDistance;
            this.shaderCullDistance = shaderCullDistance;
            this.shaderFloat64 = shaderFloat64;
            this.shaderInt64 = shaderInt64;
            this.shaderInt16 = shaderInt16;
            this.shaderResourceResidency = shaderResourceResidency;
            this.shaderResourceMinLod = shaderResourceMinLod;
            this.sparseBinding = sparseBinding;
            this.sparseResidencyBuffer = sparseResidencyBuffer;
            this.sparseResidencyImage2D = sparseResidencyImage2D;
            this.sparseResidencyImage3D = sparseResidencyImage3D;
            this.sparseResidency2Samples = sparseResidency2Samples;
            this.sparseResidency4Samples = sparseResidency4Samples;
            this.sparseResidency8Samples = sparseResidency8Samples;
            this.sparseResidency16Samples = sparseResidency16Samples;
            this.sparseResidencyAliased = sparseResidencyAliased;
            this.variableMultisampleRate = variableMultisampleRate;
            this.inheritedQueries = inheritedQueries;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSparseProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSparseProperties
    {
        public int residencyStandard2DBlockShape;
        public int residencyStandard2DMultisampleBlockShape;
        public int residencyStandard3DBlockShape;
        public int residencyAlignedMipSize;
        public int residencyNonResidentStrict;
        public VkPhysicalDeviceSparseProperties() { }
        public VkPhysicalDeviceSparseProperties(int residencyStandard2DBlockShape, int residencyStandard2DMultisampleBlockShape, int residencyStandard3DBlockShape, int residencyAlignedMipSize, int residencyNonResidentStrict)
        {
            this.residencyStandard2DBlockShape = residencyStandard2DBlockShape;
            this.residencyStandard2DMultisampleBlockShape = residencyStandard2DMultisampleBlockShape;
            this.residencyStandard3DBlockShape = residencyStandard3DBlockShape;
            this.residencyAlignedMipSize = residencyAlignedMipSize;
            this.residencyNonResidentStrict = residencyNonResidentStrict;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html" /></remarks>
    public unsafe struct VkPhysicalDeviceLimits
    {
        public uint maxImageDimension1D;
        public uint maxImageDimension2D;
        public uint maxImageDimension3D;
        public uint maxImageDimensionCube;
        public uint maxImageArrayLayers;
        public uint maxTexelBufferElements;
        public uint maxUniformBufferRange;
        public uint maxStorageBufferRange;
        public uint maxPushConstantsSize;
        public uint maxMemoryAllocationCount;
        public uint maxSamplerAllocationCount;
        public ulong bufferImageGranularity;
        public ulong sparseAddressSpaceSize;
        public uint maxBoundDescriptorSets;
        public uint maxPerStageDescriptorSamplers;
        public uint maxPerStageDescriptorUniformBuffers;
        public uint maxPerStageDescriptorStorageBuffers;
        public uint maxPerStageDescriptorSampledImages;
        public uint maxPerStageDescriptorStorageImages;
        public uint maxPerStageDescriptorInputAttachments;
        public uint maxPerStageResources;
        public uint maxDescriptorSetSamplers;
        public uint maxDescriptorSetUniformBuffers;
        public uint maxDescriptorSetUniformBuffersDynamic;
        public uint maxDescriptorSetStorageBuffers;
        public uint maxDescriptorSetStorageBuffersDynamic;
        public uint maxDescriptorSetSampledImages;
        public uint maxDescriptorSetStorageImages;
        public uint maxDescriptorSetInputAttachments;
        public uint maxVertexInputAttributes;
        public uint maxVertexInputBindings;
        public uint maxVertexInputAttributeOffset;
        public uint maxVertexInputBindingStride;
        public uint maxVertexOutputComponents;
        public uint maxTessellationGenerationLevel;
        public uint maxTessellationPatchSize;
        public uint maxTessellationControlPerVertexInputComponents;
        public uint maxTessellationControlPerVertexOutputComponents;
        public uint maxTessellationControlPerPatchOutputComponents;
        public uint maxTessellationControlTotalOutputComponents;
        public uint maxTessellationEvaluationInputComponents;
        public uint maxTessellationEvaluationOutputComponents;
        public uint maxGeometryShaderInvocations;
        public uint maxGeometryInputComponents;
        public uint maxGeometryOutputComponents;
        public uint maxGeometryOutputVertices;
        public uint maxGeometryTotalOutputComponents;
        public uint maxFragmentInputComponents;
        public uint maxFragmentOutputAttachments;
        public uint maxFragmentDualSrcAttachments;
        public uint maxFragmentCombinedOutputResources;
        public uint maxComputeSharedMemorySize;
        public fixed uint maxComputeWorkGroupCount[3];
        public uint maxComputeWorkGroupInvocations;
        public fixed uint maxComputeWorkGroupSize[3];
        public uint subPixelPrecisionBits;
        public uint subTexelPrecisionBits;
        public uint mipmapPrecisionBits;
        public uint maxDrawIndexedIndexValue;
        public uint maxDrawIndirectCount;
        public float maxSamplerLodBias;
        public float maxSamplerAnisotropy;
        public uint maxViewports;
        public fixed uint maxViewportDimensions[2];
        public fixed float viewportBoundsRange[2];
        public uint viewportSubPixelBits;
        public nuint minMemoryMapAlignment;
        public ulong minTexelBufferOffsetAlignment;
        public ulong minUniformBufferOffsetAlignment;
        public ulong minStorageBufferOffsetAlignment;
        public int minTexelOffset;
        public uint maxTexelOffset;
        public int minTexelGatherOffset;
        public uint maxTexelGatherOffset;
        public float minInterpolationOffset;
        public float maxInterpolationOffset;
        public uint subPixelInterpolationOffsetBits;
        public uint maxFramebufferWidth;
        public uint maxFramebufferHeight;
        public uint maxFramebufferLayers;
        public VkSampleCountFlagBits framebufferColorSampleCounts;
        public VkSampleCountFlagBits framebufferDepthSampleCounts;
        public VkSampleCountFlagBits framebufferStencilSampleCounts;
        public VkSampleCountFlagBits framebufferNoAttachmentsSampleCounts;
        public uint maxColorAttachments;
        public VkSampleCountFlagBits sampledImageColorSampleCounts;
        public VkSampleCountFlagBits sampledImageIntegerSampleCounts;
        public VkSampleCountFlagBits sampledImageDepthSampleCounts;
        public VkSampleCountFlagBits sampledImageStencilSampleCounts;
        public VkSampleCountFlagBits storageImageSampleCounts;
        public uint maxSampleMaskWords;
        public int timestampComputeAndGraphics;
        public float timestampPeriod;
        public uint maxClipDistances;
        public uint maxCullDistances;
        public uint maxCombinedClipAndCullDistances;
        public uint discreteQueuePriorities;
        public fixed float pointSizeRange[2];
        public fixed float lineWidthRange[2];
        public float pointSizeGranularity;
        public float lineWidthGranularity;
        public int strictLines;
        public int standardSampleLocations;
        public ulong optimalBufferCopyOffsetAlignment;
        public ulong optimalBufferCopyRowPitchAlignment;
        public ulong nonCoherentAtomSize;
        public VkPhysicalDeviceLimits() { }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSemaphoreCreateInfo.html" /></remarks>
    public unsafe struct VkSemaphoreCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeSemaphoreCreateInfo;
        public void* pNext;
        public VkSemaphoreCreateFlags flags;
        public VkSemaphoreCreateInfo() { }
        public VkSemaphoreCreateInfo(VkStructureType sType, void* pNext, VkSemaphoreCreateFlags flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkQueryPoolCreateInfo.html" /></remarks>
    public unsafe struct VkQueryPoolCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeQueryPoolCreateInfo;
        public void* pNext;
        public VkQueryPoolCreateFlags flags;
        public VkQueryType queryType;
        public uint queryCount;
        public VkQueryPipelineStatisticFlagBits pipelineStatistics;
        public VkQueryPoolCreateInfo() { }
        public VkQueryPoolCreateInfo(VkStructureType sType, void* pNext, VkQueryPoolCreateFlags flags, VkQueryType queryType, uint queryCount, VkQueryPipelineStatisticFlagBits pipelineStatistics)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.queryType = queryType;
            this.queryCount = queryCount;
            this.pipelineStatistics = pipelineStatistics;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFramebufferCreateInfo.html" /></remarks>
    public unsafe struct VkFramebufferCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeFramebufferCreateInfo;
        public void* pNext;
        public VkFramebufferCreateFlagBits flags;
        public VkRenderPass renderPass;
        public uint attachmentCount;
        public VkImageView* pAttachments;
        public uint width;
        public uint height;
        public uint layers;
        public VkFramebufferCreateInfo() { }
        public VkFramebufferCreateInfo(VkStructureType sType, void* pNext, VkFramebufferCreateFlagBits flags, VkRenderPass renderPass, uint attachmentCount, VkImageView* pAttachments, uint width, uint height, uint layers)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.renderPass = renderPass;
            this.attachmentCount = attachmentCount;
            this.pAttachments = pAttachments;
            this.width = width;
            this.height = height;
            this.layers = layers;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDrawIndirectCommand.html" /></remarks>
    public unsafe struct VkDrawIndirectCommand
    {
        public uint vertexCount;
        public uint instanceCount;
        public uint firstVertex;
        public uint firstInstance;
        public VkDrawIndirectCommand() { }
        public VkDrawIndirectCommand(uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance)
        {
            this.vertexCount = vertexCount;
            this.instanceCount = instanceCount;
            this.firstVertex = firstVertex;
            this.firstInstance = firstInstance;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDrawIndexedIndirectCommand.html" /></remarks>
    public unsafe struct VkDrawIndexedIndirectCommand
    {
        public uint indexCount;
        public uint instanceCount;
        public uint firstIndex;
        public int vertexOffset;
        public uint firstInstance;
        public VkDrawIndexedIndirectCommand() { }
        public VkDrawIndexedIndirectCommand(uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance)
        {
            this.indexCount = indexCount;
            this.instanceCount = instanceCount;
            this.firstIndex = firstIndex;
            this.vertexOffset = vertexOffset;
            this.firstInstance = firstInstance;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDispatchIndirectCommand.html" /></remarks>
    public unsafe struct VkDispatchIndirectCommand
    {
        public uint x;
        public uint y;
        public uint z;
        public VkDispatchIndirectCommand() { }
        public VkDispatchIndirectCommand(uint x, uint y, uint z)
        {
            this.x = x;
            this.y = y;
            this.z = z;
        }
    }
    /// <summary><b>[requires: VK_EXT_multi_draw]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMultiDrawInfoEXT.html" /></remarks>
    public unsafe struct VkMultiDrawInfoEXT
    {
        public uint firstVertex;
        public uint vertexCount;
        public VkMultiDrawInfoEXT() { }
        public VkMultiDrawInfoEXT(uint firstVertex, uint vertexCount)
        {
            this.firstVertex = firstVertex;
            this.vertexCount = vertexCount;
        }
    }
    /// <summary><b>[requires: VK_EXT_multi_draw]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMultiDrawIndexedInfoEXT.html" /></remarks>
    public unsafe struct VkMultiDrawIndexedInfoEXT
    {
        public uint firstIndex;
        public uint indexCount;
        public int vertexOffset;
        public VkMultiDrawIndexedInfoEXT() { }
        public VkMultiDrawIndexedInfoEXT(uint firstIndex, uint indexCount, int vertexOffset)
        {
            this.firstIndex = firstIndex;
            this.indexCount = indexCount;
            this.vertexOffset = vertexOffset;
        }
    }
    /// <summary><b>[requires: v1.0]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubmitInfo.html" /></remarks>
    public unsafe struct VkSubmitInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeSubmitInfo;
        public void* pNext;
        public uint waitSemaphoreCount;
        public VkSemaphore* pWaitSemaphores;
        public VkPipelineStageFlagBits* pWaitDstStageMask;
        public uint commandBufferCount;
        public VkCommandBuffer* pCommandBuffers;
        public uint signalSemaphoreCount;
        public VkSemaphore* pSignalSemaphores;
        public VkSubmitInfo() { }
        public VkSubmitInfo(VkStructureType sType, void* pNext, uint waitSemaphoreCount, VkSemaphore* pWaitSemaphores, VkPipelineStageFlagBits* pWaitDstStageMask, uint commandBufferCount, VkCommandBuffer* pCommandBuffers, uint signalSemaphoreCount, VkSemaphore* pSignalSemaphores)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.waitSemaphoreCount = waitSemaphoreCount;
            this.pWaitSemaphores = pWaitSemaphores;
            this.pWaitDstStageMask = pWaitDstStageMask;
            this.commandBufferCount = commandBufferCount;
            this.pCommandBuffers = pCommandBuffers;
            this.signalSemaphoreCount = signalSemaphoreCount;
            this.pSignalSemaphores = pSignalSemaphores;
        }
    }
    /// <summary><b>[requires: VK_KHR_display]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplayPropertiesKHR.html" /></remarks>
    public unsafe struct VkDisplayPropertiesKHR
    {
        public VkDisplayKHR display;
        public byte* displayName;
        public VkExtent2D physicalDimensions;
        public VkExtent2D physicalResolution;
        public VkSurfaceTransformFlagBitsKHR supportedTransforms;
        public int planeReorderPossible;
        public int persistentContent;
        public VkDisplayPropertiesKHR() { }
        public VkDisplayPropertiesKHR(VkDisplayKHR display, byte* displayName, VkExtent2D physicalDimensions, VkExtent2D physicalResolution, VkSurfaceTransformFlagBitsKHR supportedTransforms, int planeReorderPossible, int persistentContent)
        {
            this.display = display;
            this.displayName = displayName;
            this.physicalDimensions = physicalDimensions;
            this.physicalResolution = physicalResolution;
            this.supportedTransforms = supportedTransforms;
            this.planeReorderPossible = planeReorderPossible;
            this.persistentContent = persistentContent;
        }
    }
    /// <summary><b>[requires: VK_KHR_display]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplayPlanePropertiesKHR.html" /></remarks>
    public unsafe struct VkDisplayPlanePropertiesKHR
    {
        public VkDisplayKHR currentDisplay;
        public uint currentStackIndex;
        public VkDisplayPlanePropertiesKHR() { }
        public VkDisplayPlanePropertiesKHR(VkDisplayKHR currentDisplay, uint currentStackIndex)
        {
            this.currentDisplay = currentDisplay;
            this.currentStackIndex = currentStackIndex;
        }
    }
    /// <summary><b>[requires: VK_KHR_display]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplayModeParametersKHR.html" /></remarks>
    public unsafe struct VkDisplayModeParametersKHR
    {
        public VkExtent2D visibleRegion;
        public uint refreshRate;
        public VkDisplayModeParametersKHR() { }
        public VkDisplayModeParametersKHR(VkExtent2D visibleRegion, uint refreshRate)
        {
            this.visibleRegion = visibleRegion;
            this.refreshRate = refreshRate;
        }
    }
    /// <summary><b>[requires: VK_KHR_display]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplayModePropertiesKHR.html" /></remarks>
    public unsafe struct VkDisplayModePropertiesKHR
    {
        public VkDisplayModeKHR displayMode;
        public VkDisplayModeParametersKHR parameters;
        public VkDisplayModePropertiesKHR() { }
        public VkDisplayModePropertiesKHR(VkDisplayModeKHR displayMode, VkDisplayModeParametersKHR parameters)
        {
            this.displayMode = displayMode;
            this.parameters = parameters;
        }
    }
    /// <summary><b>[requires: VK_KHR_display]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplayModeCreateInfoKHR.html" /></remarks>
    public unsafe struct VkDisplayModeCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeDisplayModeCreateInfoKhr;
        public void* pNext;
        public VkDisplayModeCreateFlagsKHR flags;
        public VkDisplayModeParametersKHR parameters;
        public VkDisplayModeCreateInfoKHR() { }
        public VkDisplayModeCreateInfoKHR(VkStructureType sType, void* pNext, VkDisplayModeCreateFlagsKHR flags, VkDisplayModeParametersKHR parameters)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.parameters = parameters;
        }
    }
    /// <summary><b>[requires: VK_KHR_display]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplayPlaneCapabilitiesKHR.html" /></remarks>
    public unsafe struct VkDisplayPlaneCapabilitiesKHR
    {
        public VkDisplayPlaneAlphaFlagBitsKHR supportedAlpha;
        public VkOffset2D minSrcPosition;
        public VkOffset2D maxSrcPosition;
        public VkExtent2D minSrcExtent;
        public VkExtent2D maxSrcExtent;
        public VkOffset2D minDstPosition;
        public VkOffset2D maxDstPosition;
        public VkExtent2D minDstExtent;
        public VkExtent2D maxDstExtent;
        public VkDisplayPlaneCapabilitiesKHR() { }
        public VkDisplayPlaneCapabilitiesKHR(VkDisplayPlaneAlphaFlagBitsKHR supportedAlpha, VkOffset2D minSrcPosition, VkOffset2D maxSrcPosition, VkExtent2D minSrcExtent, VkExtent2D maxSrcExtent, VkOffset2D minDstPosition, VkOffset2D maxDstPosition, VkExtent2D minDstExtent, VkExtent2D maxDstExtent)
        {
            this.supportedAlpha = supportedAlpha;
            this.minSrcPosition = minSrcPosition;
            this.maxSrcPosition = maxSrcPosition;
            this.minSrcExtent = minSrcExtent;
            this.maxSrcExtent = maxSrcExtent;
            this.minDstPosition = minDstPosition;
            this.maxDstPosition = maxDstPosition;
            this.minDstExtent = minDstExtent;
            this.maxDstExtent = maxDstExtent;
        }
    }
    /// <summary><b>[requires: VK_KHR_display]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplaySurfaceCreateInfoKHR.html" /></remarks>
    public unsafe struct VkDisplaySurfaceCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeDisplaySurfaceCreateInfoKhr;
        public void* pNext;
        public VkDisplaySurfaceCreateFlagsKHR flags;
        public VkDisplayModeKHR displayMode;
        public uint planeIndex;
        public uint planeStackIndex;
        public VkSurfaceTransformFlagBitsKHR transform;
        public float globalAlpha;
        public VkDisplayPlaneAlphaFlagBitsKHR alphaMode;
        public VkExtent2D imageExtent;
        public VkDisplaySurfaceCreateInfoKHR() { }
        public VkDisplaySurfaceCreateInfoKHR(VkStructureType sType, void* pNext, VkDisplaySurfaceCreateFlagsKHR flags, VkDisplayModeKHR displayMode, uint planeIndex, uint planeStackIndex, VkSurfaceTransformFlagBitsKHR transform, float globalAlpha, VkDisplayPlaneAlphaFlagBitsKHR alphaMode, VkExtent2D imageExtent)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.displayMode = displayMode;
            this.planeIndex = planeIndex;
            this.planeStackIndex = planeStackIndex;
            this.transform = transform;
            this.globalAlpha = globalAlpha;
            this.alphaMode = alphaMode;
            this.imageExtent = imageExtent;
        }
    }
    /// <summary><b>[requires: VK_KHR_display_swapchain]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplayPresentInfoKHR.html" /></remarks>
    public unsafe struct VkDisplayPresentInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeDisplayPresentInfoKhr;
        public void* pNext;
        public VkRect2D srcRect;
        public VkRect2D dstRect;
        public int persistent;
        public VkDisplayPresentInfoKHR() { }
        public VkDisplayPresentInfoKHR(VkStructureType sType, void* pNext, VkRect2D srcRect, VkRect2D dstRect, int persistent)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcRect = srcRect;
            this.dstRect = dstRect;
            this.persistent = persistent;
        }
    }
    /// <summary><b>[requires: VK_KHR_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSurfaceCapabilitiesKHR.html" /></remarks>
    public unsafe struct VkSurfaceCapabilitiesKHR
    {
        public uint minImageCount;
        public uint maxImageCount;
        public VkExtent2D currentExtent;
        public VkExtent2D minImageExtent;
        public VkExtent2D maxImageExtent;
        public uint maxImageArrayLayers;
        public VkSurfaceTransformFlagBitsKHR supportedTransforms;
        public VkSurfaceTransformFlagBitsKHR currentTransform;
        public VkCompositeAlphaFlagBitsKHR supportedCompositeAlpha;
        public VkImageUsageFlagBits supportedUsageFlags;
        public VkSurfaceCapabilitiesKHR() { }
        public VkSurfaceCapabilitiesKHR(uint minImageCount, uint maxImageCount, VkExtent2D currentExtent, VkExtent2D minImageExtent, VkExtent2D maxImageExtent, uint maxImageArrayLayers, VkSurfaceTransformFlagBitsKHR supportedTransforms, VkSurfaceTransformFlagBitsKHR currentTransform, VkCompositeAlphaFlagBitsKHR supportedCompositeAlpha, VkImageUsageFlagBits supportedUsageFlags)
        {
            this.minImageCount = minImageCount;
            this.maxImageCount = maxImageCount;
            this.currentExtent = currentExtent;
            this.minImageExtent = minImageExtent;
            this.maxImageExtent = maxImageExtent;
            this.maxImageArrayLayers = maxImageArrayLayers;
            this.supportedTransforms = supportedTransforms;
            this.currentTransform = currentTransform;
            this.supportedCompositeAlpha = supportedCompositeAlpha;
            this.supportedUsageFlags = supportedUsageFlags;
        }
    }
    /// <summary><b>[requires: VK_KHR_android_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAndroidSurfaceCreateInfoKHR.html" /></remarks>
    public unsafe struct VkAndroidSurfaceCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeAndroidSurfaceCreateInfoKhr;
        public void* pNext;
        public VkAndroidSurfaceCreateFlagsKHR flags;
        public IntPtr window;
        public VkAndroidSurfaceCreateInfoKHR() { }
        public VkAndroidSurfaceCreateInfoKHR(VkStructureType sType, void* pNext, VkAndroidSurfaceCreateFlagsKHR flags, IntPtr window)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.window = window;
        }
    }
    /// <summary><b>[requires: VK_NN_vi_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkViSurfaceCreateInfoNN.html" /></remarks>
    public unsafe struct VkViSurfaceCreateInfoNN
    {
        public VkStructureType sType = VkStructureType.StructureTypeViSurfaceCreateInfoNn;
        public void* pNext;
        public VkViSurfaceCreateFlagsNN flags;
        public void* window;
        public VkViSurfaceCreateInfoNN() { }
        public VkViSurfaceCreateInfoNN(VkStructureType sType, void* pNext, VkViSurfaceCreateFlagsNN flags, void* window)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.window = window;
        }
    }
    /// <summary><b>[requires: VK_KHR_wayland_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkWaylandSurfaceCreateInfoKHR.html" /></remarks>
    public unsafe struct VkWaylandSurfaceCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeWaylandSurfaceCreateInfoKhr;
        public void* pNext;
        public VkWaylandSurfaceCreateFlagsKHR flags;
        public IntPtr display;
        public IntPtr surface;
        public VkWaylandSurfaceCreateInfoKHR() { }
        public VkWaylandSurfaceCreateInfoKHR(VkStructureType sType, void* pNext, VkWaylandSurfaceCreateFlagsKHR flags, IntPtr display, IntPtr surface)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.display = display;
            this.surface = surface;
        }
    }
    /// <summary><b>[requires: VK_KHR_win32_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkWin32SurfaceCreateInfoKHR.html" /></remarks>
    public unsafe struct VkWin32SurfaceCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeWin32SurfaceCreateInfoKhr;
        public void* pNext;
        public VkWin32SurfaceCreateFlagsKHR flags;
        public IntPtr hinstance;
        public IntPtr hwnd;
        public VkWin32SurfaceCreateInfoKHR() { }
        public VkWin32SurfaceCreateInfoKHR(VkStructureType sType, void* pNext, VkWin32SurfaceCreateFlagsKHR flags, IntPtr hinstance, IntPtr hwnd)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.hinstance = hinstance;
            this.hwnd = hwnd;
        }
    }
    /// <summary><b>[requires: VK_KHR_xlib_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkXlibSurfaceCreateInfoKHR.html" /></remarks>
    public unsafe struct VkXlibSurfaceCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeXlibSurfaceCreateInfoKhr;
        public void* pNext;
        public VkXlibSurfaceCreateFlagsKHR flags;
        public IntPtr dpy;
        public nuint window;
        public VkXlibSurfaceCreateInfoKHR() { }
        public VkXlibSurfaceCreateInfoKHR(VkStructureType sType, void* pNext, VkXlibSurfaceCreateFlagsKHR flags, IntPtr dpy, nuint window)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.dpy = dpy;
            this.window = window;
        }
    }
    /// <summary><b>[requires: VK_KHR_xcb_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkXcbSurfaceCreateInfoKHR.html" /></remarks>
    public unsafe struct VkXcbSurfaceCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeXcbSurfaceCreateInfoKhr;
        public void* pNext;
        public VkXcbSurfaceCreateFlagsKHR flags;
        public IntPtr connection;
        public uint window;
        public VkXcbSurfaceCreateInfoKHR() { }
        public VkXcbSurfaceCreateInfoKHR(VkStructureType sType, void* pNext, VkXcbSurfaceCreateFlagsKHR flags, IntPtr connection, uint window)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.connection = connection;
            this.window = window;
        }
    }
    /// <summary><b>[requires: VK_EXT_directfb_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDirectFBSurfaceCreateInfoEXT.html" /></remarks>
    public unsafe struct VkDirectFBSurfaceCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDirectfbSurfaceCreateInfoExt;
        public void* pNext;
        public VkDirectFBSurfaceCreateFlagsEXT flags;
        public IntPtr dfb;
        public IntPtr surface;
        public VkDirectFBSurfaceCreateInfoEXT() { }
        public VkDirectFBSurfaceCreateInfoEXT(VkStructureType sType, void* pNext, VkDirectFBSurfaceCreateFlagsEXT flags, IntPtr dfb, IntPtr surface)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.dfb = dfb;
            this.surface = surface;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_imagepipe_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImagePipeSurfaceCreateInfoFUCHSIA.html" /></remarks>
    public unsafe struct VkImagePipeSurfaceCreateInfoFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeImagepipeSurfaceCreateInfoFuchsia;
        public void* pNext;
        public VkImagePipeSurfaceCreateFlagsFUCHSIA flags;
        public int imagePipeHandle;
        public VkImagePipeSurfaceCreateInfoFUCHSIA() { }
        public VkImagePipeSurfaceCreateInfoFUCHSIA(VkStructureType sType, void* pNext, VkImagePipeSurfaceCreateFlagsFUCHSIA flags, int imagePipeHandle)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.imagePipeHandle = imagePipeHandle;
        }
    }
    /// <summary><b>[requires: VK_GGP_stream_descriptor_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkStreamDescriptorSurfaceCreateInfoGGP.html" /></remarks>
    public unsafe struct VkStreamDescriptorSurfaceCreateInfoGGP
    {
        public VkStructureType sType = VkStructureType.StructureTypeStreamDescriptorSurfaceCreateInfoGgp;
        public void* pNext;
        public VkStreamDescriptorSurfaceCreateFlagsGGP flags;
        // Unsupported type for field streamDescriptor
        public VkStreamDescriptorSurfaceCreateInfoGGP() { }
    }
    /// <summary><b>[requires: VK_QNX_screen_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkScreenSurfaceCreateInfoQNX.html" /></remarks>
    public unsafe struct VkScreenSurfaceCreateInfoQNX
    {
        public VkStructureType sType = VkStructureType.StructureTypeScreenSurfaceCreateInfoQnx;
        public void* pNext;
        public VkScreenSurfaceCreateFlagsQNX flags;
        public IntPtr* context;
        public IntPtr* window;
        public VkScreenSurfaceCreateInfoQNX() { }
        public VkScreenSurfaceCreateInfoQNX(VkStructureType sType, void* pNext, VkScreenSurfaceCreateFlagsQNX flags, IntPtr* context, IntPtr* window)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.context = context;
            this.window = window;
        }
    }
    /// <summary><b>[requires: VK_KHR_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSurfaceFormatKHR.html" /></remarks>
    public unsafe struct VkSurfaceFormatKHR
    {
        public VkFormat format;
        public VkColorSpaceKHR colorSpace;
        public VkSurfaceFormatKHR() { }
        public VkSurfaceFormatKHR(VkFormat format, VkColorSpaceKHR colorSpace)
        {
            this.format = format;
            this.colorSpace = colorSpace;
        }
    }
    /// <summary><b>[requires: VK_KHR_swapchain]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSwapchainCreateInfoKHR.html" /></remarks>
    public unsafe struct VkSwapchainCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeSwapchainCreateInfoKhr;
        public void* pNext;
        public VkSwapchainCreateFlagBitsKHR flags;
        public VkSurfaceKHR surface;
        public uint minImageCount;
        public VkFormat imageFormat;
        public VkColorSpaceKHR imageColorSpace;
        public VkExtent2D imageExtent;
        public uint imageArrayLayers;
        public VkImageUsageFlagBits imageUsage;
        public VkSharingMode imageSharingMode;
        public uint queueFamilyIndexCount;
        public uint* pQueueFamilyIndices;
        public VkSurfaceTransformFlagBitsKHR preTransform;
        public VkCompositeAlphaFlagBitsKHR compositeAlpha;
        public VkPresentModeKHR presentMode;
        public int clipped;
        public VkSwapchainKHR oldSwapchain;
        public VkSwapchainCreateInfoKHR() { }
        public VkSwapchainCreateInfoKHR(VkStructureType sType, void* pNext, VkSwapchainCreateFlagBitsKHR flags, VkSurfaceKHR surface, uint minImageCount, VkFormat imageFormat, VkColorSpaceKHR imageColorSpace, VkExtent2D imageExtent, uint imageArrayLayers, VkImageUsageFlagBits imageUsage, VkSharingMode imageSharingMode, uint queueFamilyIndexCount, uint* pQueueFamilyIndices, VkSurfaceTransformFlagBitsKHR preTransform, VkCompositeAlphaFlagBitsKHR compositeAlpha, VkPresentModeKHR presentMode, int clipped, VkSwapchainKHR oldSwapchain)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.surface = surface;
            this.minImageCount = minImageCount;
            this.imageFormat = imageFormat;
            this.imageColorSpace = imageColorSpace;
            this.imageExtent = imageExtent;
            this.imageArrayLayers = imageArrayLayers;
            this.imageUsage = imageUsage;
            this.imageSharingMode = imageSharingMode;
            this.queueFamilyIndexCount = queueFamilyIndexCount;
            this.pQueueFamilyIndices = pQueueFamilyIndices;
            this.preTransform = preTransform;
            this.compositeAlpha = compositeAlpha;
            this.presentMode = presentMode;
            this.clipped = clipped;
            this.oldSwapchain = oldSwapchain;
        }
    }
    /// <summary><b>[requires: VK_KHR_swapchain]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPresentInfoKHR.html" /></remarks>
    public unsafe struct VkPresentInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePresentInfoKhr;
        public void* pNext;
        public uint waitSemaphoreCount;
        public VkSemaphore* pWaitSemaphores;
        public uint swapchainCount;
        public VkSwapchainKHR* pSwapchains;
        public uint* pImageIndices;
        public VkResult* pResults;
        public VkPresentInfoKHR() { }
        public VkPresentInfoKHR(VkStructureType sType, void* pNext, uint waitSemaphoreCount, VkSemaphore* pWaitSemaphores, uint swapchainCount, VkSwapchainKHR* pSwapchains, uint* pImageIndices, VkResult* pResults)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.waitSemaphoreCount = waitSemaphoreCount;
            this.pWaitSemaphores = pWaitSemaphores;
            this.swapchainCount = swapchainCount;
            this.pSwapchains = pSwapchains;
            this.pImageIndices = pImageIndices;
            this.pResults = pResults;
        }
    }
    /// <summary><b>[requires: VK_EXT_debug_report]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDebugReportCallbackCreateInfoEXT.html" /></remarks>
    public unsafe struct VkDebugReportCallbackCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDebugReportCallbackCreateInfoExt;
        public void* pNext;
        public VkDebugReportFlagBitsEXT flags;
        public delegate* unmanaged[Cdecl]<VkDebugReportFlagBitsEXT, VkDebugReportObjectTypeEXT, ulong, nuint, int, byte*, byte*, void*, int> pfnCallback;
        public void* pUserData;
        public VkDebugReportCallbackCreateInfoEXT() { }
        public VkDebugReportCallbackCreateInfoEXT(VkStructureType sType, void* pNext, VkDebugReportFlagBitsEXT flags, delegate* unmanaged[Cdecl]<VkDebugReportFlagBitsEXT, VkDebugReportObjectTypeEXT, ulong, nuint, int, byte*, byte*, void*, int> pfnCallback, void* pUserData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.pfnCallback = pfnCallback;
            this.pUserData = pUserData;
        }
    }
    /// <summary><b>[requires: VK_EXT_validation_flags]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkValidationFlagsEXT.html" /></remarks>
    public unsafe struct VkValidationFlagsEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeValidationFlagsExt;
        public void* pNext;
        public uint disabledValidationCheckCount;
        public VkValidationCheckEXT* pDisabledValidationChecks;
        public VkValidationFlagsEXT() { }
        public VkValidationFlagsEXT(VkStructureType sType, void* pNext, uint disabledValidationCheckCount, VkValidationCheckEXT* pDisabledValidationChecks)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.disabledValidationCheckCount = disabledValidationCheckCount;
            this.pDisabledValidationChecks = pDisabledValidationChecks;
        }
    }
    /// <summary><b>[requires: VK_EXT_validation_features]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkValidationFeaturesEXT.html" /></remarks>
    public unsafe struct VkValidationFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeValidationFeaturesExt;
        public void* pNext;
        public uint enabledValidationFeatureCount;
        public VkValidationFeatureEnableEXT* pEnabledValidationFeatures;
        public uint disabledValidationFeatureCount;
        public VkValidationFeatureDisableEXT* pDisabledValidationFeatures;
        public VkValidationFeaturesEXT() { }
        public VkValidationFeaturesEXT(VkStructureType sType, void* pNext, uint enabledValidationFeatureCount, VkValidationFeatureEnableEXT* pEnabledValidationFeatures, uint disabledValidationFeatureCount, VkValidationFeatureDisableEXT* pDisabledValidationFeatures)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.enabledValidationFeatureCount = enabledValidationFeatureCount;
            this.pEnabledValidationFeatures = pEnabledValidationFeatures;
            this.disabledValidationFeatureCount = disabledValidationFeatureCount;
            this.pDisabledValidationFeatures = pDisabledValidationFeatures;
        }
    }
    /// <summary><b>[requires: VK_EXT_layer_settings]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkLayerSettingsCreateInfoEXT.html" /></remarks>
    public unsafe struct VkLayerSettingsCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeLayerSettingsCreateInfoExt;
        public void* pNext;
        public uint settingCount;
        public VkLayerSettingEXT* pSettings;
        public VkLayerSettingsCreateInfoEXT() { }
        public VkLayerSettingsCreateInfoEXT(VkStructureType sType, void* pNext, uint settingCount, VkLayerSettingEXT* pSettings)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.settingCount = settingCount;
            this.pSettings = pSettings;
        }
    }
    /// <summary><b>[requires: VK_EXT_layer_settings]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkLayerSettingEXT.html" /></remarks>
    public unsafe struct VkLayerSettingEXT
    {
        public byte* pLayerName;
        public byte* pSettingName;
        public VkLayerSettingTypeEXT type;
        public uint valueCount;
        public void* pValues;
        public VkLayerSettingEXT() { }
        public VkLayerSettingEXT(byte* pLayerName, byte* pSettingName, VkLayerSettingTypeEXT type, uint valueCount, void* pValues)
        {
            this.pLayerName = pLayerName;
            this.pSettingName = pSettingName;
            this.type = type;
            this.valueCount = valueCount;
            this.pValues = pValues;
        }
    }
    /// <summary><b>[requires: VK_EXT_application_parameters]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkApplicationParametersEXT.html" /></remarks>
    public unsafe struct VkApplicationParametersEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeApplicationParametersExt;
        public void* pNext;
        public uint vendorID;
        public uint deviceID;
        public uint key;
        public ulong value;
        public VkApplicationParametersEXT() { }
        public VkApplicationParametersEXT(VkStructureType sType, void* pNext, uint vendorID, uint deviceID, uint key, ulong value)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.vendorID = vendorID;
            this.deviceID = deviceID;
            this.key = key;
            this.value = value;
        }
    }
    /// <summary><b>[requires: VK_AMD_rasterization_order]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineRasterizationStateRasterizationOrderAMD.html" /></remarks>
    public unsafe struct VkPipelineRasterizationStateRasterizationOrderAMD
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineRasterizationStateRasterizationOrderAmd;
        public void* pNext;
        public VkRasterizationOrderAMD rasterizationOrder;
        public VkPipelineRasterizationStateRasterizationOrderAMD() { }
        public VkPipelineRasterizationStateRasterizationOrderAMD(VkStructureType sType, void* pNext, VkRasterizationOrderAMD rasterizationOrder)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.rasterizationOrder = rasterizationOrder;
        }
    }
    /// <summary><b>[requires: VK_EXT_debug_marker]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDebugMarkerObjectNameInfoEXT.html" /></remarks>
    public unsafe struct VkDebugMarkerObjectNameInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDebugMarkerObjectNameInfoExt;
        public void* pNext;
        public VkDebugReportObjectTypeEXT objectType;
        public ulong obj;
        public byte* pObjectName;
        public VkDebugMarkerObjectNameInfoEXT() { }
        public VkDebugMarkerObjectNameInfoEXT(VkStructureType sType, void* pNext, VkDebugReportObjectTypeEXT objectType, ulong obj, byte* pObjectName)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.objectType = objectType;
            this.obj = obj;
            this.pObjectName = pObjectName;
        }
    }
    /// <summary><b>[requires: VK_EXT_debug_marker]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDebugMarkerObjectTagInfoEXT.html" /></remarks>
    public unsafe struct VkDebugMarkerObjectTagInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDebugMarkerObjectTagInfoExt;
        public void* pNext;
        public VkDebugReportObjectTypeEXT objectType;
        public ulong obj;
        public ulong tagName;
        public nuint tagSize;
        public void* pTag;
        public VkDebugMarkerObjectTagInfoEXT() { }
        public VkDebugMarkerObjectTagInfoEXT(VkStructureType sType, void* pNext, VkDebugReportObjectTypeEXT objectType, ulong obj, ulong tagName, nuint tagSize, void* pTag)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.objectType = objectType;
            this.obj = obj;
            this.tagName = tagName;
            this.tagSize = tagSize;
            this.pTag = pTag;
        }
    }
    /// <summary><b>[requires: VK_EXT_debug_marker]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDebugMarkerMarkerInfoEXT.html" /></remarks>
    public unsafe struct VkDebugMarkerMarkerInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDebugMarkerMarkerInfoExt;
        public void* pNext;
        public byte* pMarkerName;
        public fixed float color[4];
        public VkDebugMarkerMarkerInfoEXT() { }
    }
    /// <summary><b>[requires: VK_NV_dedicated_allocation]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDedicatedAllocationImageCreateInfoNV.html" /></remarks>
    public unsafe struct VkDedicatedAllocationImageCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeDedicatedAllocationImageCreateInfoNv;
        public void* pNext;
        public int dedicatedAllocation;
        public VkDedicatedAllocationImageCreateInfoNV() { }
        public VkDedicatedAllocationImageCreateInfoNV(VkStructureType sType, void* pNext, int dedicatedAllocation)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.dedicatedAllocation = dedicatedAllocation;
        }
    }
    /// <summary><b>[requires: VK_NV_dedicated_allocation]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDedicatedAllocationBufferCreateInfoNV.html" /></remarks>
    public unsafe struct VkDedicatedAllocationBufferCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeDedicatedAllocationBufferCreateInfoNv;
        public void* pNext;
        public int dedicatedAllocation;
        public VkDedicatedAllocationBufferCreateInfoNV() { }
        public VkDedicatedAllocationBufferCreateInfoNV(VkStructureType sType, void* pNext, int dedicatedAllocation)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.dedicatedAllocation = dedicatedAllocation;
        }
    }
    /// <summary><b>[requires: VK_NV_dedicated_allocation]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDedicatedAllocationMemoryAllocateInfoNV.html" /></remarks>
    public unsafe struct VkDedicatedAllocationMemoryAllocateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeDedicatedAllocationMemoryAllocateInfoNv;
        public void* pNext;
        public VkImage image;
        public VkBuffer buffer;
        public VkDedicatedAllocationMemoryAllocateInfoNV() { }
        public VkDedicatedAllocationMemoryAllocateInfoNV(VkStructureType sType, void* pNext, VkImage image, VkBuffer buffer)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.image = image;
            this.buffer = buffer;
        }
    }
    /// <summary><b>[requires: VK_NV_external_memory_capabilities]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalImageFormatPropertiesNV.html" /></remarks>
    public unsafe struct VkExternalImageFormatPropertiesNV
    {
        public VkImageFormatProperties imageFormatProperties;
        public VkExternalMemoryFeatureFlagBitsNV externalMemoryFeatures;
        public VkExternalMemoryHandleTypeFlagBitsNV exportFromImportedHandleTypes;
        public VkExternalMemoryHandleTypeFlagBitsNV compatibleHandleTypes;
        public VkExternalImageFormatPropertiesNV() { }
        public VkExternalImageFormatPropertiesNV(VkImageFormatProperties imageFormatProperties, VkExternalMemoryFeatureFlagBitsNV externalMemoryFeatures, VkExternalMemoryHandleTypeFlagBitsNV exportFromImportedHandleTypes, VkExternalMemoryHandleTypeFlagBitsNV compatibleHandleTypes)
        {
            this.imageFormatProperties = imageFormatProperties;
            this.externalMemoryFeatures = externalMemoryFeatures;
            this.exportFromImportedHandleTypes = exportFromImportedHandleTypes;
            this.compatibleHandleTypes = compatibleHandleTypes;
        }
    }
    /// <summary><b>[requires: VK_NV_external_memory]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalMemoryImageCreateInfoNV.html" /></remarks>
    public unsafe struct VkExternalMemoryImageCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeExternalMemoryImageCreateInfoNv;
        public void* pNext;
        public VkExternalMemoryHandleTypeFlagBitsNV handleTypes;
        public VkExternalMemoryImageCreateInfoNV() { }
        public VkExternalMemoryImageCreateInfoNV(VkStructureType sType, void* pNext, VkExternalMemoryHandleTypeFlagBitsNV handleTypes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleTypes = handleTypes;
        }
    }
    /// <summary><b>[requires: VK_NV_external_memory]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportMemoryAllocateInfoNV.html" /></remarks>
    public unsafe struct VkExportMemoryAllocateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportMemoryAllocateInfoNv;
        public void* pNext;
        public VkExternalMemoryHandleTypeFlagBitsNV handleTypes;
        public VkExportMemoryAllocateInfoNV() { }
        public VkExportMemoryAllocateInfoNV(VkStructureType sType, void* pNext, VkExternalMemoryHandleTypeFlagBitsNV handleTypes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleTypes = handleTypes;
        }
    }
    /// <summary><b>[requires: VK_NV_external_memory_win32]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportMemoryWin32HandleInfoNV.html" /></remarks>
    public unsafe struct VkImportMemoryWin32HandleInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportMemoryWin32HandleInfoNv;
        public void* pNext;
        public VkExternalMemoryHandleTypeFlagBitsNV handleType;
        public IntPtr handle;
        public VkImportMemoryWin32HandleInfoNV() { }
        public VkImportMemoryWin32HandleInfoNV(VkStructureType sType, void* pNext, VkExternalMemoryHandleTypeFlagBitsNV handleType, IntPtr handle)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleType = handleType;
            this.handle = handle;
        }
    }
    /// <summary><b>[requires: VK_NV_external_memory_win32]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportMemoryWin32HandleInfoNV.html" /></remarks>
    public unsafe struct VkExportMemoryWin32HandleInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportMemoryWin32HandleInfoNv;
        public void* pNext;
        public SECURITY_ATTRIBUTES* pAttributes;
        public uint dwAccess;
        public VkExportMemoryWin32HandleInfoNV() { }
        public VkExportMemoryWin32HandleInfoNV(VkStructureType sType, void* pNext, SECURITY_ATTRIBUTES* pAttributes, uint dwAccess)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pAttributes = pAttributes;
            this.dwAccess = dwAccess;
        }
    }
    /// <summary><b>[requires: VK_NV_external_memory_sci_buf]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportMemorySciBufInfoNV.html" /></remarks>
    public unsafe struct VkExportMemorySciBufInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportMemorySciBufInfoNv;
        public void* pNext;
        public IntPtr pAttributes;
        public VkExportMemorySciBufInfoNV() { }
        public VkExportMemorySciBufInfoNV(VkStructureType sType, void* pNext, IntPtr pAttributes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pAttributes = pAttributes;
        }
    }
    /// <summary><b>[requires: VK_NV_external_memory_sci_buf]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportMemorySciBufInfoNV.html" /></remarks>
    public unsafe struct VkImportMemorySciBufInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportMemorySciBufInfoNv;
        public void* pNext;
        public VkExternalMemoryHandleTypeFlagBits handleType;
        public IntPtr handle;
        public VkImportMemorySciBufInfoNV() { }
        public VkImportMemorySciBufInfoNV(VkStructureType sType, void* pNext, VkExternalMemoryHandleTypeFlagBits handleType, IntPtr handle)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleType = handleType;
            this.handle = handle;
        }
    }
    /// <summary><b>[requires: VK_NV_external_memory_sci_buf]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryGetSciBufInfoNV.html" /></remarks>
    public unsafe struct VkMemoryGetSciBufInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryGetSciBufInfoNv;
        public void* pNext;
        public VkDeviceMemory memory;
        public VkExternalMemoryHandleTypeFlagBits handleType;
        public VkMemoryGetSciBufInfoNV() { }
        public VkMemoryGetSciBufInfoNV(VkStructureType sType, void* pNext, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memory = memory;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: VK_NV_external_memory_sci_buf]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemorySciBufPropertiesNV.html" /></remarks>
    public unsafe struct VkMemorySciBufPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemorySciBufPropertiesNv;
        public void* pNext;
        public uint memoryTypeBits;
        public VkMemorySciBufPropertiesNV() { }
        public VkMemorySciBufPropertiesNV(VkStructureType sType, void* pNext, uint memoryTypeBits)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memoryTypeBits = memoryTypeBits;
        }
    }
    /// <summary><b>[requires: VK_NV_external_memory_sci_buf]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalMemorySciBufFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalMemorySciBufFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExternalMemorySciBufFeaturesNv;
        public void* pNext;
        public int sciBufImport;
        public int sciBufExport;
        public VkPhysicalDeviceExternalMemorySciBufFeaturesNV() { }
        public VkPhysicalDeviceExternalMemorySciBufFeaturesNV(VkStructureType sType, void* pNext, int sciBufImport, int sciBufExport)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.sciBufImport = sciBufImport;
            this.sciBufExport = sciBufExport;
        }
    }
    /// <summary><b>[requires: VK_NV_external_memory_sci_buf]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalSciBufFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalSciBufFeaturesNV
    {
        public VkPhysicalDeviceExternalSciBufFeaturesNV() { }
    }
    /// <summary><b>[requires: VK_NV_win32_keyed_mutex]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkWin32KeyedMutexAcquireReleaseInfoNV.html" /></remarks>
    public unsafe struct VkWin32KeyedMutexAcquireReleaseInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeWin32KeyedMutexAcquireReleaseInfoNv;
        public void* pNext;
        public uint acquireCount;
        public VkDeviceMemory* pAcquireSyncs;
        public ulong* pAcquireKeys;
        public uint* pAcquireTimeoutMilliseconds;
        public uint releaseCount;
        public VkDeviceMemory* pReleaseSyncs;
        public ulong* pReleaseKeys;
        public VkWin32KeyedMutexAcquireReleaseInfoNV() { }
        public VkWin32KeyedMutexAcquireReleaseInfoNV(VkStructureType sType, void* pNext, uint acquireCount, VkDeviceMemory* pAcquireSyncs, ulong* pAcquireKeys, uint* pAcquireTimeoutMilliseconds, uint releaseCount, VkDeviceMemory* pReleaseSyncs, ulong* pReleaseKeys)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.acquireCount = acquireCount;
            this.pAcquireSyncs = pAcquireSyncs;
            this.pAcquireKeys = pAcquireKeys;
            this.pAcquireTimeoutMilliseconds = pAcquireTimeoutMilliseconds;
            this.releaseCount = releaseCount;
            this.pReleaseSyncs = pReleaseSyncs;
            this.pReleaseKeys = pReleaseKeys;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDeviceGeneratedCommandsFeaturesNv;
        public void* pNext;
        public int deviceGeneratedCommands;
        public VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV() { }
        public VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(VkStructureType sType, void* pNext, int deviceGeneratedCommands)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.deviceGeneratedCommands = deviceGeneratedCommands;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands_compute]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNv;
        public void* pNext;
        public int deviceGeneratedCompute;
        public int deviceGeneratedComputePipelines;
        public int deviceGeneratedComputeCaptureReplay;
        public VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV() { }
        public VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV(VkStructureType sType, void* pNext, int deviceGeneratedCompute, int deviceGeneratedComputePipelines, int deviceGeneratedComputeCaptureReplay)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.deviceGeneratedCompute = deviceGeneratedCompute;
            this.deviceGeneratedComputePipelines = deviceGeneratedComputePipelines;
            this.deviceGeneratedComputeCaptureReplay = deviceGeneratedComputeCaptureReplay;
        }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDevicePrivateDataCreateInfo.html" /></remarks>
    public unsafe struct VkDevicePrivateDataCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDevicePrivateDataCreateInfo;
        public void* pNext;
        public uint privateDataSlotRequestCount;
        public VkDevicePrivateDataCreateInfo() { }
        public VkDevicePrivateDataCreateInfo(VkStructureType sType, void* pNext, uint privateDataSlotRequestCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.privateDataSlotRequestCount = privateDataSlotRequestCount;
        }
    }
    /// <summary><b>[requires: VK_EXT_private_data]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDevicePrivateDataCreateInfoEXT.html" /></remarks>
    public unsafe struct VkDevicePrivateDataCreateInfoEXT
    {
        public VkDevicePrivateDataCreateInfoEXT() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPrivateDataSlotCreateInfo.html" /></remarks>
    public unsafe struct VkPrivateDataSlotCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePrivateDataSlotCreateInfo;
        public void* pNext;
        public VkPrivateDataSlotCreateFlags flags;
        public VkPrivateDataSlotCreateInfo() { }
        public VkPrivateDataSlotCreateInfo(VkStructureType sType, void* pNext, VkPrivateDataSlotCreateFlags flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: VK_EXT_private_data]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPrivateDataSlotCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPrivateDataSlotCreateInfoEXT
    {
        public VkPrivateDataSlotCreateInfoEXT() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePrivateDataFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDevicePrivateDataFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePrivateDataFeatures;
        public void* pNext;
        public int privateData;
        public VkPhysicalDevicePrivateDataFeatures() { }
        public VkPhysicalDevicePrivateDataFeatures(VkStructureType sType, void* pNext, int privateData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.privateData = privateData;
        }
    }
    /// <summary><b>[requires: VK_EXT_private_data]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePrivateDataFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDevicePrivateDataFeaturesEXT
    {
        public VkPhysicalDevicePrivateDataFeaturesEXT() { }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDeviceGeneratedCommandsPropertiesNv;
        public void* pNext;
        public uint maxGraphicsShaderGroupCount;
        public uint maxIndirectSequenceCount;
        public uint maxIndirectCommandsTokenCount;
        public uint maxIndirectCommandsStreamCount;
        public uint maxIndirectCommandsTokenOffset;
        public uint maxIndirectCommandsStreamStride;
        public uint minSequencesCountBufferOffsetAlignment;
        public uint minSequencesIndexBufferOffsetAlignment;
        public uint minIndirectCommandsBufferOffsetAlignment;
        public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV() { }
        public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(VkStructureType sType, void* pNext, uint maxGraphicsShaderGroupCount, uint maxIndirectSequenceCount, uint maxIndirectCommandsTokenCount, uint maxIndirectCommandsStreamCount, uint maxIndirectCommandsTokenOffset, uint maxIndirectCommandsStreamStride, uint minSequencesCountBufferOffsetAlignment, uint minSequencesIndexBufferOffsetAlignment, uint minIndirectCommandsBufferOffsetAlignment)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxGraphicsShaderGroupCount = maxGraphicsShaderGroupCount;
            this.maxIndirectSequenceCount = maxIndirectSequenceCount;
            this.maxIndirectCommandsTokenCount = maxIndirectCommandsTokenCount;
            this.maxIndirectCommandsStreamCount = maxIndirectCommandsStreamCount;
            this.maxIndirectCommandsTokenOffset = maxIndirectCommandsTokenOffset;
            this.maxIndirectCommandsStreamStride = maxIndirectCommandsStreamStride;
            this.minSequencesCountBufferOffsetAlignment = minSequencesCountBufferOffsetAlignment;
            this.minSequencesIndexBufferOffsetAlignment = minSequencesIndexBufferOffsetAlignment;
            this.minIndirectCommandsBufferOffsetAlignment = minIndirectCommandsBufferOffsetAlignment;
        }
    }
    /// <summary><b>[requires: VK_EXT_multi_draw]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiDrawPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMultiDrawPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMultiDrawPropertiesExt;
        public void* pNext;
        public uint maxMultiDrawCount;
        public VkPhysicalDeviceMultiDrawPropertiesEXT() { }
        public VkPhysicalDeviceMultiDrawPropertiesEXT(VkStructureType sType, void* pNext, uint maxMultiDrawCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxMultiDrawCount = maxMultiDrawCount;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkGraphicsShaderGroupCreateInfoNV.html" /></remarks>
    public unsafe struct VkGraphicsShaderGroupCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeGraphicsShaderGroupCreateInfoNv;
        public void* pNext;
        public uint stageCount;
        public VkPipelineShaderStageCreateInfo* pStages;
        public VkPipelineVertexInputStateCreateInfo* pVertexInputState;
        public VkPipelineTessellationStateCreateInfo* pTessellationState;
        public VkGraphicsShaderGroupCreateInfoNV() { }
        public VkGraphicsShaderGroupCreateInfoNV(VkStructureType sType, void* pNext, uint stageCount, VkPipelineShaderStageCreateInfo* pStages, VkPipelineVertexInputStateCreateInfo* pVertexInputState, VkPipelineTessellationStateCreateInfo* pTessellationState)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stageCount = stageCount;
            this.pStages = pStages;
            this.pVertexInputState = pVertexInputState;
            this.pTessellationState = pTessellationState;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkGraphicsPipelineShaderGroupsCreateInfoNV.html" /></remarks>
    public unsafe struct VkGraphicsPipelineShaderGroupsCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeGraphicsPipelineShaderGroupsCreateInfoNv;
        public void* pNext;
        public uint groupCount;
        public VkGraphicsShaderGroupCreateInfoNV* pGroups;
        public uint pipelineCount;
        public VkPipeline* pPipelines;
        public VkGraphicsPipelineShaderGroupsCreateInfoNV() { }
        public VkGraphicsPipelineShaderGroupsCreateInfoNV(VkStructureType sType, void* pNext, uint groupCount, VkGraphicsShaderGroupCreateInfoNV* pGroups, uint pipelineCount, VkPipeline* pPipelines)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.groupCount = groupCount;
            this.pGroups = pGroups;
            this.pipelineCount = pipelineCount;
            this.pPipelines = pPipelines;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindShaderGroupIndirectCommandNV.html" /></remarks>
    public unsafe struct VkBindShaderGroupIndirectCommandNV
    {
        public uint groupIndex;
        public VkBindShaderGroupIndirectCommandNV() { }
        public VkBindShaderGroupIndirectCommandNV(uint groupIndex)
        {
            this.groupIndex = groupIndex;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindIndexBufferIndirectCommandNV.html" /></remarks>
    public unsafe struct VkBindIndexBufferIndirectCommandNV
    {
        public ulong bufferAddress;
        public uint size;
        public VkIndexType indexType;
        public VkBindIndexBufferIndirectCommandNV() { }
        public VkBindIndexBufferIndirectCommandNV(ulong bufferAddress, uint size, VkIndexType indexType)
        {
            this.bufferAddress = bufferAddress;
            this.size = size;
            this.indexType = indexType;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindVertexBufferIndirectCommandNV.html" /></remarks>
    public unsafe struct VkBindVertexBufferIndirectCommandNV
    {
        public ulong bufferAddress;
        public uint size;
        public uint stride;
        public VkBindVertexBufferIndirectCommandNV() { }
        public VkBindVertexBufferIndirectCommandNV(ulong bufferAddress, uint size, uint stride)
        {
            this.bufferAddress = bufferAddress;
            this.size = size;
            this.stride = stride;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSetStateFlagsIndirectCommandNV.html" /></remarks>
    public unsafe struct VkSetStateFlagsIndirectCommandNV
    {
        public uint data;
        public VkSetStateFlagsIndirectCommandNV() { }
        public VkSetStateFlagsIndirectCommandNV(uint data)
        {
            this.data = data;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkIndirectCommandsStreamNV.html" /></remarks>
    public unsafe struct VkIndirectCommandsStreamNV
    {
        public VkBuffer buffer;
        public ulong offset;
        public VkIndirectCommandsStreamNV() { }
        public VkIndirectCommandsStreamNV(VkBuffer buffer, ulong offset)
        {
            this.buffer = buffer;
            this.offset = offset;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkIndirectCommandsLayoutTokenNV.html" /></remarks>
    public unsafe struct VkIndirectCommandsLayoutTokenNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeIndirectCommandsLayoutTokenNv;
        public void* pNext;
        public VkIndirectCommandsTokenTypeNV tokenType;
        public uint stream;
        public uint offset;
        public uint vertexBindingUnit;
        public int vertexDynamicStride;
        public VkPipelineLayout pushconstantPipelineLayout;
        public VkShaderStageFlagBits pushconstantShaderStageFlags;
        public uint pushconstantOffset;
        public uint pushconstantSize;
        public VkIndirectStateFlagBitsNV indirectStateFlags;
        public uint indexTypeCount;
        public VkIndexType* pIndexTypes;
        public uint* pIndexTypeValues;
        public VkIndirectCommandsLayoutTokenNV() { }
        public VkIndirectCommandsLayoutTokenNV(VkStructureType sType, void* pNext, VkIndirectCommandsTokenTypeNV tokenType, uint stream, uint offset, uint vertexBindingUnit, int vertexDynamicStride, VkPipelineLayout pushconstantPipelineLayout, VkShaderStageFlagBits pushconstantShaderStageFlags, uint pushconstantOffset, uint pushconstantSize, VkIndirectStateFlagBitsNV indirectStateFlags, uint indexTypeCount, VkIndexType* pIndexTypes, uint* pIndexTypeValues)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.tokenType = tokenType;
            this.stream = stream;
            this.offset = offset;
            this.vertexBindingUnit = vertexBindingUnit;
            this.vertexDynamicStride = vertexDynamicStride;
            this.pushconstantPipelineLayout = pushconstantPipelineLayout;
            this.pushconstantShaderStageFlags = pushconstantShaderStageFlags;
            this.pushconstantOffset = pushconstantOffset;
            this.pushconstantSize = pushconstantSize;
            this.indirectStateFlags = indirectStateFlags;
            this.indexTypeCount = indexTypeCount;
            this.pIndexTypes = pIndexTypes;
            this.pIndexTypeValues = pIndexTypeValues;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkIndirectCommandsLayoutCreateInfoNV.html" /></remarks>
    public unsafe struct VkIndirectCommandsLayoutCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeIndirectCommandsLayoutCreateInfoNv;
        public void* pNext;
        public VkIndirectCommandsLayoutUsageFlagBitsNV flags;
        public VkPipelineBindPoint pipelineBindPoint;
        public uint tokenCount;
        public VkIndirectCommandsLayoutTokenNV* pTokens;
        public uint streamCount;
        public uint* pStreamStrides;
        public VkIndirectCommandsLayoutCreateInfoNV() { }
        public VkIndirectCommandsLayoutCreateInfoNV(VkStructureType sType, void* pNext, VkIndirectCommandsLayoutUsageFlagBitsNV flags, VkPipelineBindPoint pipelineBindPoint, uint tokenCount, VkIndirectCommandsLayoutTokenNV* pTokens, uint streamCount, uint* pStreamStrides)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.pipelineBindPoint = pipelineBindPoint;
            this.tokenCount = tokenCount;
            this.pTokens = pTokens;
            this.streamCount = streamCount;
            this.pStreamStrides = pStreamStrides;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkGeneratedCommandsInfoNV.html" /></remarks>
    public unsafe struct VkGeneratedCommandsInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeGeneratedCommandsInfoNv;
        public void* pNext;
        public VkPipelineBindPoint pipelineBindPoint;
        public VkPipeline pipeline;
        public VkIndirectCommandsLayoutNV indirectCommandsLayout;
        public uint streamCount;
        public VkIndirectCommandsStreamNV* pStreams;
        public uint sequencesCount;
        public VkBuffer preprocessBuffer;
        public ulong preprocessOffset;
        public ulong preprocessSize;
        public VkBuffer sequencesCountBuffer;
        public ulong sequencesCountOffset;
        public VkBuffer sequencesIndexBuffer;
        public ulong sequencesIndexOffset;
        public VkGeneratedCommandsInfoNV() { }
        public VkGeneratedCommandsInfoNV(VkStructureType sType, void* pNext, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, VkIndirectCommandsLayoutNV indirectCommandsLayout, uint streamCount, VkIndirectCommandsStreamNV* pStreams, uint sequencesCount, VkBuffer preprocessBuffer, ulong preprocessOffset, ulong preprocessSize, VkBuffer sequencesCountBuffer, ulong sequencesCountOffset, VkBuffer sequencesIndexBuffer, ulong sequencesIndexOffset)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipelineBindPoint = pipelineBindPoint;
            this.pipeline = pipeline;
            this.indirectCommandsLayout = indirectCommandsLayout;
            this.streamCount = streamCount;
            this.pStreams = pStreams;
            this.sequencesCount = sequencesCount;
            this.preprocessBuffer = preprocessBuffer;
            this.preprocessOffset = preprocessOffset;
            this.preprocessSize = preprocessSize;
            this.sequencesCountBuffer = sequencesCountBuffer;
            this.sequencesCountOffset = sequencesCountOffset;
            this.sequencesIndexBuffer = sequencesIndexBuffer;
            this.sequencesIndexOffset = sequencesIndexOffset;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkGeneratedCommandsMemoryRequirementsInfoNV.html" /></remarks>
    public unsafe struct VkGeneratedCommandsMemoryRequirementsInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeGeneratedCommandsMemoryRequirementsInfoNv;
        public void* pNext;
        public VkPipelineBindPoint pipelineBindPoint;
        public VkPipeline pipeline;
        public VkIndirectCommandsLayoutNV indirectCommandsLayout;
        public uint maxSequencesCount;
        public VkGeneratedCommandsMemoryRequirementsInfoNV() { }
        public VkGeneratedCommandsMemoryRequirementsInfoNV(VkStructureType sType, void* pNext, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, VkIndirectCommandsLayoutNV indirectCommandsLayout, uint maxSequencesCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipelineBindPoint = pipelineBindPoint;
            this.pipeline = pipeline;
            this.indirectCommandsLayout = indirectCommandsLayout;
            this.maxSequencesCount = maxSequencesCount;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands_compute]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineIndirectDeviceAddressInfoNV.html" /></remarks>
    public unsafe struct VkPipelineIndirectDeviceAddressInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineIndirectDeviceAddressInfoNv;
        public void* pNext;
        public VkPipelineBindPoint pipelineBindPoint;
        public VkPipeline pipeline;
        public VkPipelineIndirectDeviceAddressInfoNV() { }
        public VkPipelineIndirectDeviceAddressInfoNV(VkStructureType sType, void* pNext, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipelineBindPoint = pipelineBindPoint;
            this.pipeline = pipeline;
        }
    }
    /// <summary><b>[requires: VK_NV_device_generated_commands_compute]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindPipelineIndirectCommandNV.html" /></remarks>
    public unsafe struct VkBindPipelineIndirectCommandNV
    {
        public ulong pipelineAddress;
        public VkBindPipelineIndirectCommandNV() { }
        public VkBindPipelineIndirectCommandNV(ulong pipelineAddress)
        {
            this.pipelineAddress = pipelineAddress;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures2.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFeatures2
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFeatures2;
        public void* pNext;
        public VkPhysicalDeviceFeatures features;
        public VkPhysicalDeviceFeatures2() { }
        public VkPhysicalDeviceFeatures2(VkStructureType sType, void* pNext, VkPhysicalDeviceFeatures features)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.features = features;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_physical_device_properties2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures2KHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFeatures2KHR
    {
        public VkPhysicalDeviceFeatures2KHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProperties2.html" /></remarks>
    public unsafe struct VkPhysicalDeviceProperties2
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceProperties2;
        public void* pNext;
        public VkPhysicalDeviceProperties properties;
        public VkPhysicalDeviceProperties2() { }
        public VkPhysicalDeviceProperties2(VkStructureType sType, void* pNext, VkPhysicalDeviceProperties properties)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.properties = properties;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_physical_device_properties2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProperties2KHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceProperties2KHR
    {
        public VkPhysicalDeviceProperties2KHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFormatProperties2.html" /></remarks>
    public unsafe struct VkFormatProperties2
    {
        public VkStructureType sType = VkStructureType.StructureTypeFormatProperties2;
        public void* pNext;
        public VkFormatProperties formatProperties;
        public VkFormatProperties2() { }
        public VkFormatProperties2(VkStructureType sType, void* pNext, VkFormatProperties formatProperties)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.formatProperties = formatProperties;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_physical_device_properties2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFormatProperties2KHR.html" /></remarks>
    public unsafe struct VkFormatProperties2KHR
    {
        public VkFormatProperties2KHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageFormatProperties2.html" /></remarks>
    public unsafe struct VkImageFormatProperties2
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageFormatProperties2;
        public void* pNext;
        public VkImageFormatProperties imageFormatProperties;
        public VkImageFormatProperties2() { }
        public VkImageFormatProperties2(VkStructureType sType, void* pNext, VkImageFormatProperties imageFormatProperties)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageFormatProperties = imageFormatProperties;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_physical_device_properties2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageFormatProperties2KHR.html" /></remarks>
    public unsafe struct VkImageFormatProperties2KHR
    {
        public VkImageFormatProperties2KHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageFormatInfo2.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageFormatInfo2
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImageFormatInfo2;
        public void* pNext;
        public VkFormat format;
        public VkImageType type;
        public VkImageTiling tiling;
        public VkImageUsageFlagBits usage;
        public VkImageCreateFlagBits flags;
        public VkPhysicalDeviceImageFormatInfo2() { }
        public VkPhysicalDeviceImageFormatInfo2(VkStructureType sType, void* pNext, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlagBits usage, VkImageCreateFlagBits flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.format = format;
            this.type = type;
            this.tiling = tiling;
            this.usage = usage;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_physical_device_properties2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageFormatInfo2KHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageFormatInfo2KHR
    {
        public VkPhysicalDeviceImageFormatInfo2KHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkQueueFamilyProperties2.html" /></remarks>
    public unsafe struct VkQueueFamilyProperties2
    {
        public VkStructureType sType = VkStructureType.StructureTypeQueueFamilyProperties2;
        public void* pNext;
        public VkQueueFamilyProperties queueFamilyProperties;
        public VkQueueFamilyProperties2() { }
        public VkQueueFamilyProperties2(VkStructureType sType, void* pNext, VkQueueFamilyProperties queueFamilyProperties)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.queueFamilyProperties = queueFamilyProperties;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_physical_device_properties2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkQueueFamilyProperties2KHR.html" /></remarks>
    public unsafe struct VkQueueFamilyProperties2KHR
    {
        public VkQueueFamilyProperties2KHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMemoryProperties2.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMemoryProperties2
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMemoryProperties2;
        public void* pNext;
        public VkPhysicalDeviceMemoryProperties memoryProperties;
        public VkPhysicalDeviceMemoryProperties2() { }
        public VkPhysicalDeviceMemoryProperties2(VkStructureType sType, void* pNext, VkPhysicalDeviceMemoryProperties memoryProperties)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memoryProperties = memoryProperties;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_physical_device_properties2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMemoryProperties2KHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMemoryProperties2KHR
    {
        public VkPhysicalDeviceMemoryProperties2KHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSparseImageFormatProperties2.html" /></remarks>
    public unsafe struct VkSparseImageFormatProperties2
    {
        public VkStructureType sType = VkStructureType.StructureTypeSparseImageFormatProperties2;
        public void* pNext;
        public VkSparseImageFormatProperties properties;
        public VkSparseImageFormatProperties2() { }
        public VkSparseImageFormatProperties2(VkStructureType sType, void* pNext, VkSparseImageFormatProperties properties)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.properties = properties;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_physical_device_properties2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSparseImageFormatProperties2KHR.html" /></remarks>
    public unsafe struct VkSparseImageFormatProperties2KHR
    {
        public VkSparseImageFormatProperties2KHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSparseImageFormatInfo2.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSparseImageFormatInfo2
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSparseImageFormatInfo2;
        public void* pNext;
        public VkFormat format;
        public VkImageType type;
        public VkSampleCountFlagBits samples;
        public VkImageUsageFlagBits usage;
        public VkImageTiling tiling;
        public VkPhysicalDeviceSparseImageFormatInfo2() { }
        public VkPhysicalDeviceSparseImageFormatInfo2(VkStructureType sType, void* pNext, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlagBits usage, VkImageTiling tiling)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.format = format;
            this.type = type;
            this.samples = samples;
            this.usage = usage;
            this.tiling = tiling;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_physical_device_properties2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSparseImageFormatInfo2KHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSparseImageFormatInfo2KHR
    {
        public VkPhysicalDeviceSparseImageFormatInfo2KHR() { }
    }
    /// <summary><b>[requires: VK_KHR_push_descriptor]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePushDescriptorPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDevicePushDescriptorPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePushDescriptorPropertiesKhr;
        public void* pNext;
        public uint maxPushDescriptors;
        public VkPhysicalDevicePushDescriptorPropertiesKHR() { }
        public VkPhysicalDevicePushDescriptorPropertiesKHR(VkStructureType sType, void* pNext, uint maxPushDescriptors)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxPushDescriptors = maxPushDescriptors;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkConformanceVersion.html" /></remarks>
    public unsafe struct VkConformanceVersion
    {
        public byte major;
        public byte minor;
        public byte subminor;
        public byte patch;
        public VkConformanceVersion() { }
        public VkConformanceVersion(byte major, byte minor, byte subminor, byte patch)
        {
            this.major = major;
            this.minor = minor;
            this.subminor = subminor;
            this.patch = patch;
        }
    }
    /// <summary><b>[requires: VK_KHR_driver_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkConformanceVersionKHR.html" /></remarks>
    public unsafe struct VkConformanceVersionKHR
    {
        public VkConformanceVersionKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDriverProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDriverProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDriverProperties;
        public void* pNext;
        public VkDriverId driverID;
        public fixed byte driverName[256];
        public fixed byte driverInfo[256];
        public VkConformanceVersion conformanceVersion;
        public VkPhysicalDeviceDriverProperties() { }
    }
    /// <summary><b>[requires: VK_KHR_driver_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDriverPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDriverPropertiesKHR
    {
        public VkPhysicalDeviceDriverPropertiesKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_incremental_present]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPresentRegionsKHR.html" /></remarks>
    public unsafe struct VkPresentRegionsKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePresentRegionsKhr;
        public void* pNext;
        public uint swapchainCount;
        public VkPresentRegionKHR* pRegions;
        public VkPresentRegionsKHR() { }
        public VkPresentRegionsKHR(VkStructureType sType, void* pNext, uint swapchainCount, VkPresentRegionKHR* pRegions)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.swapchainCount = swapchainCount;
            this.pRegions = pRegions;
        }
    }
    /// <summary><b>[requires: VK_KHR_incremental_present]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPresentRegionKHR.html" /></remarks>
    public unsafe struct VkPresentRegionKHR
    {
        public uint rectangleCount;
        public VkRectLayerKHR* pRectangles;
        public VkPresentRegionKHR() { }
        public VkPresentRegionKHR(uint rectangleCount, VkRectLayerKHR* pRectangles)
        {
            this.rectangleCount = rectangleCount;
            this.pRectangles = pRectangles;
        }
    }
    /// <summary><b>[requires: VK_KHR_incremental_present]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRectLayerKHR.html" /></remarks>
    public unsafe struct VkRectLayerKHR
    {
        public VkOffset2D offset;
        public VkExtent2D extent;
        public uint layer;
        public VkRectLayerKHR() { }
        public VkRectLayerKHR(VkOffset2D offset, VkExtent2D extent, uint layer)
        {
            this.offset = offset;
            this.extent = extent;
            this.layer = layer;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVariablePointersFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVariablePointersFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceVariablePointersFeatures;
        public void* pNext;
        public int variablePointersStorageBuffer;
        public int variablePointers;
        public VkPhysicalDeviceVariablePointersFeatures() { }
        public VkPhysicalDeviceVariablePointersFeatures(VkStructureType sType, void* pNext, int variablePointersStorageBuffer, int variablePointers)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.variablePointersStorageBuffer = variablePointersStorageBuffer;
            this.variablePointers = variablePointers;
        }
    }
    /// <summary><b>[requires: VK_KHR_variable_pointers]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVariablePointersFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVariablePointersFeaturesKHR
    {
        public VkPhysicalDeviceVariablePointersFeaturesKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_variable_pointers]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVariablePointerFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVariablePointerFeaturesKHR
    {
        public VkPhysicalDeviceVariablePointerFeaturesKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVariablePointerFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVariablePointerFeatures
    {
        public VkPhysicalDeviceVariablePointerFeatures() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalMemoryProperties.html" /></remarks>
    public unsafe struct VkExternalMemoryProperties
    {
        public VkExternalMemoryFeatureFlagBits externalMemoryFeatures;
        public VkExternalMemoryHandleTypeFlagBits exportFromImportedHandleTypes;
        public VkExternalMemoryHandleTypeFlagBits compatibleHandleTypes;
        public VkExternalMemoryProperties() { }
        public VkExternalMemoryProperties(VkExternalMemoryFeatureFlagBits externalMemoryFeatures, VkExternalMemoryHandleTypeFlagBits exportFromImportedHandleTypes, VkExternalMemoryHandleTypeFlagBits compatibleHandleTypes)
        {
            this.externalMemoryFeatures = externalMemoryFeatures;
            this.exportFromImportedHandleTypes = exportFromImportedHandleTypes;
            this.compatibleHandleTypes = compatibleHandleTypes;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_memory_capabilities]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalMemoryPropertiesKHR.html" /></remarks>
    public unsafe struct VkExternalMemoryPropertiesKHR
    {
        public VkExternalMemoryPropertiesKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalImageFormatInfo.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalImageFormatInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExternalImageFormatInfo;
        public void* pNext;
        public VkExternalMemoryHandleTypeFlagBits handleType;
        public VkPhysicalDeviceExternalImageFormatInfo() { }
        public VkPhysicalDeviceExternalImageFormatInfo(VkStructureType sType, void* pNext, VkExternalMemoryHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_memory_capabilities]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalImageFormatInfoKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalImageFormatInfoKHR
    {
        public VkPhysicalDeviceExternalImageFormatInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalImageFormatProperties.html" /></remarks>
    public unsafe struct VkExternalImageFormatProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypeExternalImageFormatProperties;
        public void* pNext;
        public VkExternalMemoryProperties externalMemoryProperties;
        public VkExternalImageFormatProperties() { }
        public VkExternalImageFormatProperties(VkStructureType sType, void* pNext, VkExternalMemoryProperties externalMemoryProperties)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.externalMemoryProperties = externalMemoryProperties;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_memory_capabilities]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalImageFormatPropertiesKHR.html" /></remarks>
    public unsafe struct VkExternalImageFormatPropertiesKHR
    {
        public VkExternalImageFormatPropertiesKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalBufferInfo.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalBufferInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExternalBufferInfo;
        public void* pNext;
        public VkBufferCreateFlagBits flags;
        public VkBufferUsageFlagBits usage;
        public VkExternalMemoryHandleTypeFlagBits handleType;
        public VkPhysicalDeviceExternalBufferInfo() { }
        public VkPhysicalDeviceExternalBufferInfo(VkStructureType sType, void* pNext, VkBufferCreateFlagBits flags, VkBufferUsageFlagBits usage, VkExternalMemoryHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.usage = usage;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_memory_capabilities]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalBufferInfoKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalBufferInfoKHR
    {
        public VkPhysicalDeviceExternalBufferInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalBufferProperties.html" /></remarks>
    public unsafe struct VkExternalBufferProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypeExternalBufferProperties;
        public void* pNext;
        public VkExternalMemoryProperties externalMemoryProperties;
        public VkExternalBufferProperties() { }
        public VkExternalBufferProperties(VkStructureType sType, void* pNext, VkExternalMemoryProperties externalMemoryProperties)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.externalMemoryProperties = externalMemoryProperties;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_memory_capabilities]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalBufferPropertiesKHR.html" /></remarks>
    public unsafe struct VkExternalBufferPropertiesKHR
    {
        public VkExternalBufferPropertiesKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceIDProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceIDProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceIdProperties;
        public void* pNext;
        public fixed byte deviceUUID[16];
        public fixed byte driverUUID[16];
        public fixed byte deviceLUID[8];
        public uint deviceNodeMask;
        public int deviceLUIDValid;
        public VkPhysicalDeviceIDProperties() { }
    }
    /// <summary><b>[requires: VK_KHR_external_memory_capabilities | VK_KHR_external_semaphore_capabilities | VK_KHR_external_fence_capabilities]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceIDPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceIDPropertiesKHR
    {
        public VkPhysicalDeviceIDPropertiesKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalMemoryImageCreateInfo.html" /></remarks>
    public unsafe struct VkExternalMemoryImageCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeExternalMemoryImageCreateInfo;
        public void* pNext;
        public VkExternalMemoryHandleTypeFlagBits handleTypes;
        public VkExternalMemoryImageCreateInfo() { }
        public VkExternalMemoryImageCreateInfo(VkStructureType sType, void* pNext, VkExternalMemoryHandleTypeFlagBits handleTypes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleTypes = handleTypes;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_memory]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalMemoryImageCreateInfoKHR.html" /></remarks>
    public unsafe struct VkExternalMemoryImageCreateInfoKHR
    {
        public VkExternalMemoryImageCreateInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalMemoryBufferCreateInfo.html" /></remarks>
    public unsafe struct VkExternalMemoryBufferCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeExternalMemoryBufferCreateInfo;
        public void* pNext;
        public VkExternalMemoryHandleTypeFlagBits handleTypes;
        public VkExternalMemoryBufferCreateInfo() { }
        public VkExternalMemoryBufferCreateInfo(VkStructureType sType, void* pNext, VkExternalMemoryHandleTypeFlagBits handleTypes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleTypes = handleTypes;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_memory]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalMemoryBufferCreateInfoKHR.html" /></remarks>
    public unsafe struct VkExternalMemoryBufferCreateInfoKHR
    {
        public VkExternalMemoryBufferCreateInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportMemoryAllocateInfo.html" /></remarks>
    public unsafe struct VkExportMemoryAllocateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportMemoryAllocateInfo;
        public void* pNext;
        public VkExternalMemoryHandleTypeFlagBits handleTypes;
        public VkExportMemoryAllocateInfo() { }
        public VkExportMemoryAllocateInfo(VkStructureType sType, void* pNext, VkExternalMemoryHandleTypeFlagBits handleTypes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleTypes = handleTypes;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_memory]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportMemoryAllocateInfoKHR.html" /></remarks>
    public unsafe struct VkExportMemoryAllocateInfoKHR
    {
        public VkExportMemoryAllocateInfoKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_external_memory_win32]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportMemoryWin32HandleInfoKHR.html" /></remarks>
    public unsafe struct VkImportMemoryWin32HandleInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportMemoryWin32HandleInfoKhr;
        public void* pNext;
        public VkExternalMemoryHandleTypeFlagBits handleType;
        public IntPtr handle;
        public char* name;
        public VkImportMemoryWin32HandleInfoKHR() { }
        public VkImportMemoryWin32HandleInfoKHR(VkStructureType sType, void* pNext, VkExternalMemoryHandleTypeFlagBits handleType, IntPtr handle, char* name)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleType = handleType;
            this.handle = handle;
            this.name = name;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_memory_win32]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportMemoryWin32HandleInfoKHR.html" /></remarks>
    public unsafe struct VkExportMemoryWin32HandleInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportMemoryWin32HandleInfoKhr;
        public void* pNext;
        public SECURITY_ATTRIBUTES* pAttributes;
        public uint dwAccess;
        public char* name;
        public VkExportMemoryWin32HandleInfoKHR() { }
        public VkExportMemoryWin32HandleInfoKHR(VkStructureType sType, void* pNext, SECURITY_ATTRIBUTES* pAttributes, uint dwAccess, char* name)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pAttributes = pAttributes;
            this.dwAccess = dwAccess;
            this.name = name;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_external_memory]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportMemoryZirconHandleInfoFUCHSIA.html" /></remarks>
    public unsafe struct VkImportMemoryZirconHandleInfoFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportMemoryZirconHandleInfoFuchsia;
        public void* pNext;
        public VkExternalMemoryHandleTypeFlagBits handleType;
        public int handle;
        public VkImportMemoryZirconHandleInfoFUCHSIA() { }
        public VkImportMemoryZirconHandleInfoFUCHSIA(VkStructureType sType, void* pNext, VkExternalMemoryHandleTypeFlagBits handleType, int handle)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleType = handleType;
            this.handle = handle;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_external_memory]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryZirconHandlePropertiesFUCHSIA.html" /></remarks>
    public unsafe struct VkMemoryZirconHandlePropertiesFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryZirconHandlePropertiesFuchsia;
        public void* pNext;
        public uint memoryTypeBits;
        public VkMemoryZirconHandlePropertiesFUCHSIA() { }
        public VkMemoryZirconHandlePropertiesFUCHSIA(VkStructureType sType, void* pNext, uint memoryTypeBits)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memoryTypeBits = memoryTypeBits;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_external_memory]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryGetZirconHandleInfoFUCHSIA.html" /></remarks>
    public unsafe struct VkMemoryGetZirconHandleInfoFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryGetZirconHandleInfoFuchsia;
        public void* pNext;
        public VkDeviceMemory memory;
        public VkExternalMemoryHandleTypeFlagBits handleType;
        public VkMemoryGetZirconHandleInfoFUCHSIA() { }
        public VkMemoryGetZirconHandleInfoFUCHSIA(VkStructureType sType, void* pNext, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memory = memory;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_memory_win32]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryWin32HandlePropertiesKHR.html" /></remarks>
    public unsafe struct VkMemoryWin32HandlePropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryWin32HandlePropertiesKhr;
        public void* pNext;
        public uint memoryTypeBits;
        public VkMemoryWin32HandlePropertiesKHR() { }
        public VkMemoryWin32HandlePropertiesKHR(VkStructureType sType, void* pNext, uint memoryTypeBits)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memoryTypeBits = memoryTypeBits;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_memory_win32]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryGetWin32HandleInfoKHR.html" /></remarks>
    public unsafe struct VkMemoryGetWin32HandleInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryGetWin32HandleInfoKhr;
        public void* pNext;
        public VkDeviceMemory memory;
        public VkExternalMemoryHandleTypeFlagBits handleType;
        public VkMemoryGetWin32HandleInfoKHR() { }
        public VkMemoryGetWin32HandleInfoKHR(VkStructureType sType, void* pNext, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memory = memory;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_memory_fd]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportMemoryFdInfoKHR.html" /></remarks>
    public unsafe struct VkImportMemoryFdInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportMemoryFdInfoKhr;
        public void* pNext;
        public VkExternalMemoryHandleTypeFlagBits handleType;
        public int fd;
        public VkImportMemoryFdInfoKHR() { }
        public VkImportMemoryFdInfoKHR(VkStructureType sType, void* pNext, VkExternalMemoryHandleTypeFlagBits handleType, int fd)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleType = handleType;
            this.fd = fd;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_memory_fd]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryFdPropertiesKHR.html" /></remarks>
    public unsafe struct VkMemoryFdPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryFdPropertiesKhr;
        public void* pNext;
        public uint memoryTypeBits;
        public VkMemoryFdPropertiesKHR() { }
        public VkMemoryFdPropertiesKHR(VkStructureType sType, void* pNext, uint memoryTypeBits)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memoryTypeBits = memoryTypeBits;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_memory_fd]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryGetFdInfoKHR.html" /></remarks>
    public unsafe struct VkMemoryGetFdInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryGetFdInfoKhr;
        public void* pNext;
        public VkDeviceMemory memory;
        public VkExternalMemoryHandleTypeFlagBits handleType;
        public VkMemoryGetFdInfoKHR() { }
        public VkMemoryGetFdInfoKHR(VkStructureType sType, void* pNext, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memory = memory;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: VK_KHR_win32_keyed_mutex]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkWin32KeyedMutexAcquireReleaseInfoKHR.html" /></remarks>
    public unsafe struct VkWin32KeyedMutexAcquireReleaseInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeWin32KeyedMutexAcquireReleaseInfoKhr;
        public void* pNext;
        public uint acquireCount;
        public VkDeviceMemory* pAcquireSyncs;
        public ulong* pAcquireKeys;
        public uint* pAcquireTimeouts;
        public uint releaseCount;
        public VkDeviceMemory* pReleaseSyncs;
        public ulong* pReleaseKeys;
        public VkWin32KeyedMutexAcquireReleaseInfoKHR() { }
        public VkWin32KeyedMutexAcquireReleaseInfoKHR(VkStructureType sType, void* pNext, uint acquireCount, VkDeviceMemory* pAcquireSyncs, ulong* pAcquireKeys, uint* pAcquireTimeouts, uint releaseCount, VkDeviceMemory* pReleaseSyncs, ulong* pReleaseKeys)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.acquireCount = acquireCount;
            this.pAcquireSyncs = pAcquireSyncs;
            this.pAcquireKeys = pAcquireKeys;
            this.pAcquireTimeouts = pAcquireTimeouts;
            this.releaseCount = releaseCount;
            this.pReleaseSyncs = pReleaseSyncs;
            this.pReleaseKeys = pReleaseKeys;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalSemaphoreInfo.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalSemaphoreInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExternalSemaphoreInfo;
        public void* pNext;
        public VkExternalSemaphoreHandleTypeFlagBits handleType;
        public VkPhysicalDeviceExternalSemaphoreInfo() { }
        public VkPhysicalDeviceExternalSemaphoreInfo(VkStructureType sType, void* pNext, VkExternalSemaphoreHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_semaphore_capabilities]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalSemaphoreInfoKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalSemaphoreInfoKHR
    {
        public VkPhysicalDeviceExternalSemaphoreInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalSemaphoreProperties.html" /></remarks>
    public unsafe struct VkExternalSemaphoreProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypeExternalSemaphoreProperties;
        public void* pNext;
        public VkExternalSemaphoreHandleTypeFlagBits exportFromImportedHandleTypes;
        public VkExternalSemaphoreHandleTypeFlagBits compatibleHandleTypes;
        public VkExternalSemaphoreFeatureFlagBits externalSemaphoreFeatures;
        public VkExternalSemaphoreProperties() { }
        public VkExternalSemaphoreProperties(VkStructureType sType, void* pNext, VkExternalSemaphoreHandleTypeFlagBits exportFromImportedHandleTypes, VkExternalSemaphoreHandleTypeFlagBits compatibleHandleTypes, VkExternalSemaphoreFeatureFlagBits externalSemaphoreFeatures)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.exportFromImportedHandleTypes = exportFromImportedHandleTypes;
            this.compatibleHandleTypes = compatibleHandleTypes;
            this.externalSemaphoreFeatures = externalSemaphoreFeatures;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_semaphore_capabilities]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalSemaphorePropertiesKHR.html" /></remarks>
    public unsafe struct VkExternalSemaphorePropertiesKHR
    {
        public VkExternalSemaphorePropertiesKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportSemaphoreCreateInfo.html" /></remarks>
    public unsafe struct VkExportSemaphoreCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportSemaphoreCreateInfo;
        public void* pNext;
        public VkExternalSemaphoreHandleTypeFlagBits handleTypes;
        public VkExportSemaphoreCreateInfo() { }
        public VkExportSemaphoreCreateInfo(VkStructureType sType, void* pNext, VkExternalSemaphoreHandleTypeFlagBits handleTypes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleTypes = handleTypes;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_semaphore]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportSemaphoreCreateInfoKHR.html" /></remarks>
    public unsafe struct VkExportSemaphoreCreateInfoKHR
    {
        public VkExportSemaphoreCreateInfoKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_external_semaphore_win32]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportSemaphoreWin32HandleInfoKHR.html" /></remarks>
    public unsafe struct VkImportSemaphoreWin32HandleInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportSemaphoreWin32HandleInfoKhr;
        public void* pNext;
        public VkSemaphore semaphore;
        public VkSemaphoreImportFlagBits flags;
        public VkExternalSemaphoreHandleTypeFlagBits handleType;
        public IntPtr handle;
        public char* name;
        public VkImportSemaphoreWin32HandleInfoKHR() { }
        public VkImportSemaphoreWin32HandleInfoKHR(VkStructureType sType, void* pNext, VkSemaphore semaphore, VkSemaphoreImportFlagBits flags, VkExternalSemaphoreHandleTypeFlagBits handleType, IntPtr handle, char* name)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.semaphore = semaphore;
            this.flags = flags;
            this.handleType = handleType;
            this.handle = handle;
            this.name = name;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_semaphore_win32]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportSemaphoreWin32HandleInfoKHR.html" /></remarks>
    public unsafe struct VkExportSemaphoreWin32HandleInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportSemaphoreWin32HandleInfoKhr;
        public void* pNext;
        public SECURITY_ATTRIBUTES* pAttributes;
        public uint dwAccess;
        public char* name;
        public VkExportSemaphoreWin32HandleInfoKHR() { }
        public VkExportSemaphoreWin32HandleInfoKHR(VkStructureType sType, void* pNext, SECURITY_ATTRIBUTES* pAttributes, uint dwAccess, char* name)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pAttributes = pAttributes;
            this.dwAccess = dwAccess;
            this.name = name;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_semaphore_win32]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkD3D12FenceSubmitInfoKHR.html" /></remarks>
    public unsafe struct VkD3D12FenceSubmitInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeD3d12FenceSubmitInfoKhr;
        public void* pNext;
        public uint waitSemaphoreValuesCount;
        public ulong* pWaitSemaphoreValues;
        public uint signalSemaphoreValuesCount;
        public ulong* pSignalSemaphoreValues;
        public VkD3D12FenceSubmitInfoKHR() { }
        public VkD3D12FenceSubmitInfoKHR(VkStructureType sType, void* pNext, uint waitSemaphoreValuesCount, ulong* pWaitSemaphoreValues, uint signalSemaphoreValuesCount, ulong* pSignalSemaphoreValues)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.waitSemaphoreValuesCount = waitSemaphoreValuesCount;
            this.pWaitSemaphoreValues = pWaitSemaphoreValues;
            this.signalSemaphoreValuesCount = signalSemaphoreValuesCount;
            this.pSignalSemaphoreValues = pSignalSemaphoreValues;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_semaphore_win32]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSemaphoreGetWin32HandleInfoKHR.html" /></remarks>
    public unsafe struct VkSemaphoreGetWin32HandleInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeSemaphoreGetWin32HandleInfoKhr;
        public void* pNext;
        public VkSemaphore semaphore;
        public VkExternalSemaphoreHandleTypeFlagBits handleType;
        public VkSemaphoreGetWin32HandleInfoKHR() { }
        public VkSemaphoreGetWin32HandleInfoKHR(VkStructureType sType, void* pNext, VkSemaphore semaphore, VkExternalSemaphoreHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.semaphore = semaphore;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_semaphore_fd]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportSemaphoreFdInfoKHR.html" /></remarks>
    public unsafe struct VkImportSemaphoreFdInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportSemaphoreFdInfoKhr;
        public void* pNext;
        public VkSemaphore semaphore;
        public VkSemaphoreImportFlagBits flags;
        public VkExternalSemaphoreHandleTypeFlagBits handleType;
        public int fd;
        public VkImportSemaphoreFdInfoKHR() { }
        public VkImportSemaphoreFdInfoKHR(VkStructureType sType, void* pNext, VkSemaphore semaphore, VkSemaphoreImportFlagBits flags, VkExternalSemaphoreHandleTypeFlagBits handleType, int fd)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.semaphore = semaphore;
            this.flags = flags;
            this.handleType = handleType;
            this.fd = fd;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_semaphore_fd]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSemaphoreGetFdInfoKHR.html" /></remarks>
    public unsafe struct VkSemaphoreGetFdInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeSemaphoreGetFdInfoKhr;
        public void* pNext;
        public VkSemaphore semaphore;
        public VkExternalSemaphoreHandleTypeFlagBits handleType;
        public VkSemaphoreGetFdInfoKHR() { }
        public VkSemaphoreGetFdInfoKHR(VkStructureType sType, void* pNext, VkSemaphore semaphore, VkExternalSemaphoreHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.semaphore = semaphore;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_external_semaphore]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportSemaphoreZirconHandleInfoFUCHSIA.html" /></remarks>
    public unsafe struct VkImportSemaphoreZirconHandleInfoFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportSemaphoreZirconHandleInfoFuchsia;
        public void* pNext;
        public VkSemaphore semaphore;
        public VkSemaphoreImportFlagBits flags;
        public VkExternalSemaphoreHandleTypeFlagBits handleType;
        public int zirconHandle;
        public VkImportSemaphoreZirconHandleInfoFUCHSIA() { }
        public VkImportSemaphoreZirconHandleInfoFUCHSIA(VkStructureType sType, void* pNext, VkSemaphore semaphore, VkSemaphoreImportFlagBits flags, VkExternalSemaphoreHandleTypeFlagBits handleType, int zirconHandle)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.semaphore = semaphore;
            this.flags = flags;
            this.handleType = handleType;
            this.zirconHandle = zirconHandle;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_external_semaphore]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSemaphoreGetZirconHandleInfoFUCHSIA.html" /></remarks>
    public unsafe struct VkSemaphoreGetZirconHandleInfoFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeSemaphoreGetZirconHandleInfoFuchsia;
        public void* pNext;
        public VkSemaphore semaphore;
        public VkExternalSemaphoreHandleTypeFlagBits handleType;
        public VkSemaphoreGetZirconHandleInfoFUCHSIA() { }
        public VkSemaphoreGetZirconHandleInfoFUCHSIA(VkStructureType sType, void* pNext, VkSemaphore semaphore, VkExternalSemaphoreHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.semaphore = semaphore;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalFenceInfo.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalFenceInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExternalFenceInfo;
        public void* pNext;
        public VkExternalFenceHandleTypeFlagBits handleType;
        public VkPhysicalDeviceExternalFenceInfo() { }
        public VkPhysicalDeviceExternalFenceInfo(VkStructureType sType, void* pNext, VkExternalFenceHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_fence_capabilities]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalFenceInfoKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalFenceInfoKHR
    {
        public VkPhysicalDeviceExternalFenceInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalFenceProperties.html" /></remarks>
    public unsafe struct VkExternalFenceProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypeExternalFenceProperties;
        public void* pNext;
        public VkExternalFenceHandleTypeFlagBits exportFromImportedHandleTypes;
        public VkExternalFenceHandleTypeFlagBits compatibleHandleTypes;
        public VkExternalFenceFeatureFlagBits externalFenceFeatures;
        public VkExternalFenceProperties() { }
        public VkExternalFenceProperties(VkStructureType sType, void* pNext, VkExternalFenceHandleTypeFlagBits exportFromImportedHandleTypes, VkExternalFenceHandleTypeFlagBits compatibleHandleTypes, VkExternalFenceFeatureFlagBits externalFenceFeatures)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.exportFromImportedHandleTypes = exportFromImportedHandleTypes;
            this.compatibleHandleTypes = compatibleHandleTypes;
            this.externalFenceFeatures = externalFenceFeatures;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_fence_capabilities]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalFencePropertiesKHR.html" /></remarks>
    public unsafe struct VkExternalFencePropertiesKHR
    {
        public VkExternalFencePropertiesKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportFenceCreateInfo.html" /></remarks>
    public unsafe struct VkExportFenceCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportFenceCreateInfo;
        public void* pNext;
        public VkExternalFenceHandleTypeFlagBits handleTypes;
        public VkExportFenceCreateInfo() { }
        public VkExportFenceCreateInfo(VkStructureType sType, void* pNext, VkExternalFenceHandleTypeFlagBits handleTypes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleTypes = handleTypes;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_fence]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportFenceCreateInfoKHR.html" /></remarks>
    public unsafe struct VkExportFenceCreateInfoKHR
    {
        public VkExportFenceCreateInfoKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_external_fence_win32]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportFenceWin32HandleInfoKHR.html" /></remarks>
    public unsafe struct VkImportFenceWin32HandleInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportFenceWin32HandleInfoKhr;
        public void* pNext;
        public VkFence fence;
        public VkFenceImportFlagBits flags;
        public VkExternalFenceHandleTypeFlagBits handleType;
        public IntPtr handle;
        public char* name;
        public VkImportFenceWin32HandleInfoKHR() { }
        public VkImportFenceWin32HandleInfoKHR(VkStructureType sType, void* pNext, VkFence fence, VkFenceImportFlagBits flags, VkExternalFenceHandleTypeFlagBits handleType, IntPtr handle, char* name)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fence = fence;
            this.flags = flags;
            this.handleType = handleType;
            this.handle = handle;
            this.name = name;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_fence_win32]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportFenceWin32HandleInfoKHR.html" /></remarks>
    public unsafe struct VkExportFenceWin32HandleInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportFenceWin32HandleInfoKhr;
        public void* pNext;
        public SECURITY_ATTRIBUTES* pAttributes;
        public uint dwAccess;
        public char* name;
        public VkExportFenceWin32HandleInfoKHR() { }
        public VkExportFenceWin32HandleInfoKHR(VkStructureType sType, void* pNext, SECURITY_ATTRIBUTES* pAttributes, uint dwAccess, char* name)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pAttributes = pAttributes;
            this.dwAccess = dwAccess;
            this.name = name;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_fence_win32]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFenceGetWin32HandleInfoKHR.html" /></remarks>
    public unsafe struct VkFenceGetWin32HandleInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeFenceGetWin32HandleInfoKhr;
        public void* pNext;
        public VkFence fence;
        public VkExternalFenceHandleTypeFlagBits handleType;
        public VkFenceGetWin32HandleInfoKHR() { }
        public VkFenceGetWin32HandleInfoKHR(VkStructureType sType, void* pNext, VkFence fence, VkExternalFenceHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fence = fence;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_fence_fd]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportFenceFdInfoKHR.html" /></remarks>
    public unsafe struct VkImportFenceFdInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportFenceFdInfoKhr;
        public void* pNext;
        public VkFence fence;
        public VkFenceImportFlagBits flags;
        public VkExternalFenceHandleTypeFlagBits handleType;
        public int fd;
        public VkImportFenceFdInfoKHR() { }
        public VkImportFenceFdInfoKHR(VkStructureType sType, void* pNext, VkFence fence, VkFenceImportFlagBits flags, VkExternalFenceHandleTypeFlagBits handleType, int fd)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fence = fence;
            this.flags = flags;
            this.handleType = handleType;
            this.fd = fd;
        }
    }
    /// <summary><b>[requires: VK_KHR_external_fence_fd]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFenceGetFdInfoKHR.html" /></remarks>
    public unsafe struct VkFenceGetFdInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeFenceGetFdInfoKhr;
        public void* pNext;
        public VkFence fence;
        public VkExternalFenceHandleTypeFlagBits handleType;
        public VkFenceGetFdInfoKHR() { }
        public VkFenceGetFdInfoKHR(VkStructureType sType, void* pNext, VkFence fence, VkExternalFenceHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fence = fence;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: VK_NV_external_sci_sync | VK_NV_external_sci_sync2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportFenceSciSyncInfoNV.html" /></remarks>
    public unsafe struct VkExportFenceSciSyncInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportFenceSciSyncInfoNv;
        public void* pNext;
        public IntPtr pAttributes;
        public VkExportFenceSciSyncInfoNV() { }
        public VkExportFenceSciSyncInfoNV(VkStructureType sType, void* pNext, IntPtr pAttributes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pAttributes = pAttributes;
        }
    }
    /// <summary><b>[requires: VK_NV_external_sci_sync | VK_NV_external_sci_sync2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportFenceSciSyncInfoNV.html" /></remarks>
    public unsafe struct VkImportFenceSciSyncInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportFenceSciSyncInfoNv;
        public void* pNext;
        public VkFence fence;
        public VkExternalFenceHandleTypeFlagBits handleType;
        public void* handle;
        public VkImportFenceSciSyncInfoNV() { }
        public VkImportFenceSciSyncInfoNV(VkStructureType sType, void* pNext, VkFence fence, VkExternalFenceHandleTypeFlagBits handleType, void* handle)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fence = fence;
            this.handleType = handleType;
            this.handle = handle;
        }
    }
    /// <summary><b>[requires: VK_NV_external_sci_sync | VK_NV_external_sci_sync2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFenceGetSciSyncInfoNV.html" /></remarks>
    public unsafe struct VkFenceGetSciSyncInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeFenceGetSciSyncInfoNv;
        public void* pNext;
        public VkFence fence;
        public VkExternalFenceHandleTypeFlagBits handleType;
        public VkFenceGetSciSyncInfoNV() { }
        public VkFenceGetSciSyncInfoNV(VkStructureType sType, void* pNext, VkFence fence, VkExternalFenceHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fence = fence;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: VK_NV_external_sci_sync]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportSemaphoreSciSyncInfoNV.html" /></remarks>
    public unsafe struct VkExportSemaphoreSciSyncInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportSemaphoreSciSyncInfoNv;
        public void* pNext;
        public IntPtr pAttributes;
        public VkExportSemaphoreSciSyncInfoNV() { }
        public VkExportSemaphoreSciSyncInfoNV(VkStructureType sType, void* pNext, IntPtr pAttributes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pAttributes = pAttributes;
        }
    }
    /// <summary><b>[requires: VK_NV_external_sci_sync]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportSemaphoreSciSyncInfoNV.html" /></remarks>
    public unsafe struct VkImportSemaphoreSciSyncInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportSemaphoreSciSyncInfoNv;
        public void* pNext;
        public VkSemaphore semaphore;
        public VkExternalSemaphoreHandleTypeFlagBits handleType;
        public void* handle;
        public VkImportSemaphoreSciSyncInfoNV() { }
        public VkImportSemaphoreSciSyncInfoNV(VkStructureType sType, void* pNext, VkSemaphore semaphore, VkExternalSemaphoreHandleTypeFlagBits handleType, void* handle)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.semaphore = semaphore;
            this.handleType = handleType;
            this.handle = handle;
        }
    }
    /// <summary><b>[requires: VK_NV_external_sci_sync]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSemaphoreGetSciSyncInfoNV.html" /></remarks>
    public unsafe struct VkSemaphoreGetSciSyncInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeSemaphoreGetSciSyncInfoNv;
        public void* pNext;
        public VkSemaphore semaphore;
        public VkExternalSemaphoreHandleTypeFlagBits handleType;
        public VkSemaphoreGetSciSyncInfoNV() { }
        public VkSemaphoreGetSciSyncInfoNV(VkStructureType sType, void* pNext, VkSemaphore semaphore, VkExternalSemaphoreHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.semaphore = semaphore;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: VK_NV_external_sci_sync | VK_NV_external_sci_sync2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSciSyncAttributesInfoNV.html" /></remarks>
    public unsafe struct VkSciSyncAttributesInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeSciSyncAttributesInfoNv;
        public void* pNext;
        public VkSciSyncClientTypeNV clientType;
        public VkSciSyncPrimitiveTypeNV primitiveType;
        public VkSciSyncAttributesInfoNV() { }
        public VkSciSyncAttributesInfoNV(VkStructureType sType, void* pNext, VkSciSyncClientTypeNV clientType, VkSciSyncPrimitiveTypeNV primitiveType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.clientType = clientType;
            this.primitiveType = primitiveType;
        }
    }
    /// <summary><b>[requires: VK_NV_external_sci_sync]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalSciSyncFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalSciSyncFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExternalSciSyncFeaturesNv;
        public void* pNext;
        public int sciSyncFence;
        public int sciSyncSemaphore;
        public int sciSyncImport;
        public int sciSyncExport;
        public VkPhysicalDeviceExternalSciSyncFeaturesNV() { }
        public VkPhysicalDeviceExternalSciSyncFeaturesNV(VkStructureType sType, void* pNext, int sciSyncFence, int sciSyncSemaphore, int sciSyncImport, int sciSyncExport)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.sciSyncFence = sciSyncFence;
            this.sciSyncSemaphore = sciSyncSemaphore;
            this.sciSyncImport = sciSyncImport;
            this.sciSyncExport = sciSyncExport;
        }
    }
    /// <summary><b>[requires: VK_NV_external_sci_sync2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalSciSync2FeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalSciSync2FeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExternalSciSync2FeaturesNv;
        public void* pNext;
        public int sciSyncFence;
        public int sciSyncSemaphore2;
        public int sciSyncImport;
        public int sciSyncExport;
        public VkPhysicalDeviceExternalSciSync2FeaturesNV() { }
        public VkPhysicalDeviceExternalSciSync2FeaturesNV(VkStructureType sType, void* pNext, int sciSyncFence, int sciSyncSemaphore2, int sciSyncImport, int sciSyncExport)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.sciSyncFence = sciSyncFence;
            this.sciSyncSemaphore2 = sciSyncSemaphore2;
            this.sciSyncImport = sciSyncImport;
            this.sciSyncExport = sciSyncExport;
        }
    }
    /// <summary><b>[requires: VK_NV_external_sci_sync2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSemaphoreSciSyncPoolCreateInfoNV.html" /></remarks>
    public unsafe struct VkSemaphoreSciSyncPoolCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeSemaphoreSciSyncPoolCreateInfoNv;
        public void* pNext;
        public IntPtr handle;
        public VkSemaphoreSciSyncPoolCreateInfoNV() { }
        public VkSemaphoreSciSyncPoolCreateInfoNV(VkStructureType sType, void* pNext, IntPtr handle)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handle = handle;
        }
    }
    /// <summary><b>[requires: VK_NV_external_sci_sync2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSemaphoreSciSyncCreateInfoNV.html" /></remarks>
    public unsafe struct VkSemaphoreSciSyncCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeSemaphoreSciSyncCreateInfoNv;
        public void* pNext;
        public VkSemaphoreSciSyncPoolNV semaphorePool;
        public IntPtr pFence;
        public VkSemaphoreSciSyncCreateInfoNV() { }
        public VkSemaphoreSciSyncCreateInfoNV(VkStructureType sType, void* pNext, VkSemaphoreSciSyncPoolNV semaphorePool, IntPtr pFence)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.semaphorePool = semaphorePool;
            this.pFence = pFence;
        }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV.html" /></remarks>
    public unsafe struct VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV
    {
        public VkStructureType sType;
        public void* pNext;
        public uint semaphoreSciSyncPoolRequestCount;
        public VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV() { }
        public VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV(VkStructureType sType, void* pNext, uint semaphoreSciSyncPoolRequestCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.semaphoreSciSyncPoolRequestCount = semaphoreSciSyncPoolRequestCount;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiviewFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMultiviewFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMultiviewFeatures;
        public void* pNext;
        public int multiview;
        public int multiviewGeometryShader;
        public int multiviewTessellationShader;
        public VkPhysicalDeviceMultiviewFeatures() { }
        public VkPhysicalDeviceMultiviewFeatures(VkStructureType sType, void* pNext, int multiview, int multiviewGeometryShader, int multiviewTessellationShader)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.multiview = multiview;
            this.multiviewGeometryShader = multiviewGeometryShader;
            this.multiviewTessellationShader = multiviewTessellationShader;
        }
    }
    /// <summary><b>[requires: VK_KHR_multiview]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiviewFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMultiviewFeaturesKHR
    {
        public VkPhysicalDeviceMultiviewFeaturesKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiviewProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMultiviewProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMultiviewProperties;
        public void* pNext;
        public uint maxMultiviewViewCount;
        public uint maxMultiviewInstanceIndex;
        public VkPhysicalDeviceMultiviewProperties() { }
        public VkPhysicalDeviceMultiviewProperties(VkStructureType sType, void* pNext, uint maxMultiviewViewCount, uint maxMultiviewInstanceIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxMultiviewViewCount = maxMultiviewViewCount;
            this.maxMultiviewInstanceIndex = maxMultiviewInstanceIndex;
        }
    }
    /// <summary><b>[requires: VK_KHR_multiview]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiviewPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMultiviewPropertiesKHR
    {
        public VkPhysicalDeviceMultiviewPropertiesKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassMultiviewCreateInfo.html" /></remarks>
    public unsafe struct VkRenderPassMultiviewCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderPassMultiviewCreateInfo;
        public void* pNext;
        public uint subpassCount;
        public uint* pViewMasks;
        public uint dependencyCount;
        public int* pViewOffsets;
        public uint correlationMaskCount;
        public uint* pCorrelationMasks;
        public VkRenderPassMultiviewCreateInfo() { }
        public VkRenderPassMultiviewCreateInfo(VkStructureType sType, void* pNext, uint subpassCount, uint* pViewMasks, uint dependencyCount, int* pViewOffsets, uint correlationMaskCount, uint* pCorrelationMasks)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.subpassCount = subpassCount;
            this.pViewMasks = pViewMasks;
            this.dependencyCount = dependencyCount;
            this.pViewOffsets = pViewOffsets;
            this.correlationMaskCount = correlationMaskCount;
            this.pCorrelationMasks = pCorrelationMasks;
        }
    }
    /// <summary><b>[requires: VK_KHR_multiview]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassMultiviewCreateInfoKHR.html" /></remarks>
    public unsafe struct VkRenderPassMultiviewCreateInfoKHR
    {
        public VkRenderPassMultiviewCreateInfoKHR() { }
    }
    /// <summary><b>[requires: VK_EXT_display_surface_counter]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSurfaceCapabilities2EXT.html" /></remarks>
    public unsafe struct VkSurfaceCapabilities2EXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSurfaceCapabilities2Ext;
        public void* pNext;
        public uint minImageCount;
        public uint maxImageCount;
        public VkExtent2D currentExtent;
        public VkExtent2D minImageExtent;
        public VkExtent2D maxImageExtent;
        public uint maxImageArrayLayers;
        public VkSurfaceTransformFlagBitsKHR supportedTransforms;
        public VkSurfaceTransformFlagBitsKHR currentTransform;
        public VkCompositeAlphaFlagBitsKHR supportedCompositeAlpha;
        public VkImageUsageFlagBits supportedUsageFlags;
        public VkSurfaceCounterFlagBitsEXT supportedSurfaceCounters;
        public VkSurfaceCapabilities2EXT() { }
        public VkSurfaceCapabilities2EXT(VkStructureType sType, void* pNext, uint minImageCount, uint maxImageCount, VkExtent2D currentExtent, VkExtent2D minImageExtent, VkExtent2D maxImageExtent, uint maxImageArrayLayers, VkSurfaceTransformFlagBitsKHR supportedTransforms, VkSurfaceTransformFlagBitsKHR currentTransform, VkCompositeAlphaFlagBitsKHR supportedCompositeAlpha, VkImageUsageFlagBits supportedUsageFlags, VkSurfaceCounterFlagBitsEXT supportedSurfaceCounters)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.minImageCount = minImageCount;
            this.maxImageCount = maxImageCount;
            this.currentExtent = currentExtent;
            this.minImageExtent = minImageExtent;
            this.maxImageExtent = maxImageExtent;
            this.maxImageArrayLayers = maxImageArrayLayers;
            this.supportedTransforms = supportedTransforms;
            this.currentTransform = currentTransform;
            this.supportedCompositeAlpha = supportedCompositeAlpha;
            this.supportedUsageFlags = supportedUsageFlags;
            this.supportedSurfaceCounters = supportedSurfaceCounters;
        }
    }
    /// <summary><b>[requires: VK_EXT_display_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplayPowerInfoEXT.html" /></remarks>
    public unsafe struct VkDisplayPowerInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDisplayPowerInfoExt;
        public void* pNext;
        public VkDisplayPowerStateEXT powerState;
        public VkDisplayPowerInfoEXT() { }
        public VkDisplayPowerInfoEXT(VkStructureType sType, void* pNext, VkDisplayPowerStateEXT powerState)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.powerState = powerState;
        }
    }
    /// <summary><b>[requires: VK_EXT_display_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceEventInfoEXT.html" /></remarks>
    public unsafe struct VkDeviceEventInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceEventInfoExt;
        public void* pNext;
        public VkDeviceEventTypeEXT deviceEvent;
        public VkDeviceEventInfoEXT() { }
        public VkDeviceEventInfoEXT(VkStructureType sType, void* pNext, VkDeviceEventTypeEXT deviceEvent)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.deviceEvent = deviceEvent;
        }
    }
    /// <summary><b>[requires: VK_EXT_display_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplayEventInfoEXT.html" /></remarks>
    public unsafe struct VkDisplayEventInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDisplayEventInfoExt;
        public void* pNext;
        public VkDisplayEventTypeEXT displayEvent;
        public VkDisplayEventInfoEXT() { }
        public VkDisplayEventInfoEXT(VkStructureType sType, void* pNext, VkDisplayEventTypeEXT displayEvent)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.displayEvent = displayEvent;
        }
    }
    /// <summary><b>[requires: VK_EXT_display_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSwapchainCounterCreateInfoEXT.html" /></remarks>
    public unsafe struct VkSwapchainCounterCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSwapchainCounterCreateInfoExt;
        public void* pNext;
        public VkSurfaceCounterFlagBitsEXT surfaceCounters;
        public VkSwapchainCounterCreateInfoEXT() { }
        public VkSwapchainCounterCreateInfoEXT(VkStructureType sType, void* pNext, VkSurfaceCounterFlagBitsEXT surfaceCounters)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.surfaceCounters = surfaceCounters;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceGroupProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceGroupProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceGroupProperties;
        public void* pNext;
        public uint physicalDeviceCount;
        [InlineArray(32)]
        public struct physicalDevicesInlineArray1
        {
            public VkPhysicalDevice element;
        }
        public physicalDevicesInlineArray1 physicalDevices;
        public int subsetAllocation;
        public VkPhysicalDeviceGroupProperties() { }
    }
    /// <summary><b>[requires: VK_KHR_device_group_creation]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceGroupPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceGroupPropertiesKHR
    {
        public VkPhysicalDeviceGroupPropertiesKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryAllocateFlagsInfo.html" /></remarks>
    public unsafe struct VkMemoryAllocateFlagsInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryAllocateFlagsInfo;
        public void* pNext;
        public VkMemoryAllocateFlagBits flags;
        public uint deviceMask;
        public VkMemoryAllocateFlagsInfo() { }
        public VkMemoryAllocateFlagsInfo(VkStructureType sType, void* pNext, VkMemoryAllocateFlagBits flags, uint deviceMask)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.deviceMask = deviceMask;
        }
    }
    /// <summary><b>[requires: VK_KHR_device_group]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryAllocateFlagsInfoKHR.html" /></remarks>
    public unsafe struct VkMemoryAllocateFlagsInfoKHR
    {
        public VkMemoryAllocateFlagsInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindBufferMemoryInfo.html" /></remarks>
    public unsafe struct VkBindBufferMemoryInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeBindBufferMemoryInfo;
        public void* pNext;
        public VkBuffer buffer;
        public VkDeviceMemory memory;
        public ulong memoryOffset;
        public VkBindBufferMemoryInfo() { }
        public VkBindBufferMemoryInfo(VkStructureType sType, void* pNext, VkBuffer buffer, VkDeviceMemory memory, ulong memoryOffset)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.buffer = buffer;
            this.memory = memory;
            this.memoryOffset = memoryOffset;
        }
    }
    /// <summary><b>[requires: VK_KHR_bind_memory2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindBufferMemoryInfoKHR.html" /></remarks>
    public unsafe struct VkBindBufferMemoryInfoKHR
    {
        public VkBindBufferMemoryInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindBufferMemoryDeviceGroupInfo.html" /></remarks>
    public unsafe struct VkBindBufferMemoryDeviceGroupInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeBindBufferMemoryDeviceGroupInfo;
        public void* pNext;
        public uint deviceIndexCount;
        public uint* pDeviceIndices;
        public VkBindBufferMemoryDeviceGroupInfo() { }
        public VkBindBufferMemoryDeviceGroupInfo(VkStructureType sType, void* pNext, uint deviceIndexCount, uint* pDeviceIndices)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.deviceIndexCount = deviceIndexCount;
            this.pDeviceIndices = pDeviceIndices;
        }
    }
    /// <summary><b>[requires: VK_KHR_device_group]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindBufferMemoryDeviceGroupInfoKHR.html" /></remarks>
    public unsafe struct VkBindBufferMemoryDeviceGroupInfoKHR
    {
        public VkBindBufferMemoryDeviceGroupInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindImageMemoryInfo.html" /></remarks>
    public unsafe struct VkBindImageMemoryInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeBindImageMemoryInfo;
        public void* pNext;
        public VkImage image;
        public VkDeviceMemory memory;
        public ulong memoryOffset;
        public VkBindImageMemoryInfo() { }
        public VkBindImageMemoryInfo(VkStructureType sType, void* pNext, VkImage image, VkDeviceMemory memory, ulong memoryOffset)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.image = image;
            this.memory = memory;
            this.memoryOffset = memoryOffset;
        }
    }
    /// <summary><b>[requires: VK_KHR_bind_memory2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindImageMemoryInfoKHR.html" /></remarks>
    public unsafe struct VkBindImageMemoryInfoKHR
    {
        public VkBindImageMemoryInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindImageMemoryDeviceGroupInfo.html" /></remarks>
    public unsafe struct VkBindImageMemoryDeviceGroupInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeBindImageMemoryDeviceGroupInfo;
        public void* pNext;
        public uint deviceIndexCount;
        public uint* pDeviceIndices;
        public uint splitInstanceBindRegionCount;
        public VkRect2D* pSplitInstanceBindRegions;
        public VkBindImageMemoryDeviceGroupInfo() { }
        public VkBindImageMemoryDeviceGroupInfo(VkStructureType sType, void* pNext, uint deviceIndexCount, uint* pDeviceIndices, uint splitInstanceBindRegionCount, VkRect2D* pSplitInstanceBindRegions)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.deviceIndexCount = deviceIndexCount;
            this.pDeviceIndices = pDeviceIndices;
            this.splitInstanceBindRegionCount = splitInstanceBindRegionCount;
            this.pSplitInstanceBindRegions = pSplitInstanceBindRegions;
        }
    }
    /// <summary><b>[requires: VK_KHR_device_group]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindImageMemoryDeviceGroupInfoKHR.html" /></remarks>
    public unsafe struct VkBindImageMemoryDeviceGroupInfoKHR
    {
        public VkBindImageMemoryDeviceGroupInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupRenderPassBeginInfo.html" /></remarks>
    public unsafe struct VkDeviceGroupRenderPassBeginInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceGroupRenderPassBeginInfo;
        public void* pNext;
        public uint deviceMask;
        public uint deviceRenderAreaCount;
        public VkRect2D* pDeviceRenderAreas;
        public VkDeviceGroupRenderPassBeginInfo() { }
        public VkDeviceGroupRenderPassBeginInfo(VkStructureType sType, void* pNext, uint deviceMask, uint deviceRenderAreaCount, VkRect2D* pDeviceRenderAreas)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.deviceMask = deviceMask;
            this.deviceRenderAreaCount = deviceRenderAreaCount;
            this.pDeviceRenderAreas = pDeviceRenderAreas;
        }
    }
    /// <summary><b>[requires: VK_KHR_device_group]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupRenderPassBeginInfoKHR.html" /></remarks>
    public unsafe struct VkDeviceGroupRenderPassBeginInfoKHR
    {
        public VkDeviceGroupRenderPassBeginInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupCommandBufferBeginInfo.html" /></remarks>
    public unsafe struct VkDeviceGroupCommandBufferBeginInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceGroupCommandBufferBeginInfo;
        public void* pNext;
        public uint deviceMask;
        public VkDeviceGroupCommandBufferBeginInfo() { }
        public VkDeviceGroupCommandBufferBeginInfo(VkStructureType sType, void* pNext, uint deviceMask)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.deviceMask = deviceMask;
        }
    }
    /// <summary><b>[requires: VK_KHR_device_group]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupCommandBufferBeginInfoKHR.html" /></remarks>
    public unsafe struct VkDeviceGroupCommandBufferBeginInfoKHR
    {
        public VkDeviceGroupCommandBufferBeginInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupSubmitInfo.html" /></remarks>
    public unsafe struct VkDeviceGroupSubmitInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceGroupSubmitInfo;
        public void* pNext;
        public uint waitSemaphoreCount;
        public uint* pWaitSemaphoreDeviceIndices;
        public uint commandBufferCount;
        public uint* pCommandBufferDeviceMasks;
        public uint signalSemaphoreCount;
        public uint* pSignalSemaphoreDeviceIndices;
        public VkDeviceGroupSubmitInfo() { }
        public VkDeviceGroupSubmitInfo(VkStructureType sType, void* pNext, uint waitSemaphoreCount, uint* pWaitSemaphoreDeviceIndices, uint commandBufferCount, uint* pCommandBufferDeviceMasks, uint signalSemaphoreCount, uint* pSignalSemaphoreDeviceIndices)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.waitSemaphoreCount = waitSemaphoreCount;
            this.pWaitSemaphoreDeviceIndices = pWaitSemaphoreDeviceIndices;
            this.commandBufferCount = commandBufferCount;
            this.pCommandBufferDeviceMasks = pCommandBufferDeviceMasks;
            this.signalSemaphoreCount = signalSemaphoreCount;
            this.pSignalSemaphoreDeviceIndices = pSignalSemaphoreDeviceIndices;
        }
    }
    /// <summary><b>[requires: VK_KHR_device_group]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupSubmitInfoKHR.html" /></remarks>
    public unsafe struct VkDeviceGroupSubmitInfoKHR
    {
        public VkDeviceGroupSubmitInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupBindSparseInfo.html" /></remarks>
    public unsafe struct VkDeviceGroupBindSparseInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceGroupBindSparseInfo;
        public void* pNext;
        public uint resourceDeviceIndex;
        public uint memoryDeviceIndex;
        public VkDeviceGroupBindSparseInfo() { }
        public VkDeviceGroupBindSparseInfo(VkStructureType sType, void* pNext, uint resourceDeviceIndex, uint memoryDeviceIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.resourceDeviceIndex = resourceDeviceIndex;
            this.memoryDeviceIndex = memoryDeviceIndex;
        }
    }
    /// <summary><b>[requires: VK_KHR_device_group]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupBindSparseInfoKHR.html" /></remarks>
    public unsafe struct VkDeviceGroupBindSparseInfoKHR
    {
        public VkDeviceGroupBindSparseInfoKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_swapchain | VK_KHR_device_group]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupPresentCapabilitiesKHR.html" /></remarks>
    public unsafe struct VkDeviceGroupPresentCapabilitiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceGroupPresentCapabilitiesKhr;
        public void* pNext;
        public fixed uint presentMask[32];
        public VkDeviceGroupPresentModeFlagBitsKHR modes;
        public VkDeviceGroupPresentCapabilitiesKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_swapchain | VK_KHR_device_group]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageSwapchainCreateInfoKHR.html" /></remarks>
    public unsafe struct VkImageSwapchainCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageSwapchainCreateInfoKhr;
        public void* pNext;
        public VkSwapchainKHR swapchain;
        public VkImageSwapchainCreateInfoKHR() { }
        public VkImageSwapchainCreateInfoKHR(VkStructureType sType, void* pNext, VkSwapchainKHR swapchain)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.swapchain = swapchain;
        }
    }
    /// <summary><b>[requires: VK_KHR_swapchain | VK_KHR_device_group]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindImageMemorySwapchainInfoKHR.html" /></remarks>
    public unsafe struct VkBindImageMemorySwapchainInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeBindImageMemorySwapchainInfoKhr;
        public void* pNext;
        public VkSwapchainKHR swapchain;
        public uint imageIndex;
        public VkBindImageMemorySwapchainInfoKHR() { }
        public VkBindImageMemorySwapchainInfoKHR(VkStructureType sType, void* pNext, VkSwapchainKHR swapchain, uint imageIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.swapchain = swapchain;
            this.imageIndex = imageIndex;
        }
    }
    /// <summary><b>[requires: VK_KHR_swapchain | VK_KHR_device_group]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAcquireNextImageInfoKHR.html" /></remarks>
    public unsafe struct VkAcquireNextImageInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeAcquireNextImageInfoKhr;
        public void* pNext;
        public VkSwapchainKHR swapchain;
        public ulong timeout;
        public VkSemaphore semaphore;
        public VkFence fence;
        public uint deviceMask;
        public VkAcquireNextImageInfoKHR() { }
        public VkAcquireNextImageInfoKHR(VkStructureType sType, void* pNext, VkSwapchainKHR swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, uint deviceMask)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.swapchain = swapchain;
            this.timeout = timeout;
            this.semaphore = semaphore;
            this.fence = fence;
            this.deviceMask = deviceMask;
        }
    }
    /// <summary><b>[requires: VK_KHR_swapchain | VK_KHR_device_group]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupPresentInfoKHR.html" /></remarks>
    public unsafe struct VkDeviceGroupPresentInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceGroupPresentInfoKhr;
        public void* pNext;
        public uint swapchainCount;
        public uint* pDeviceMasks;
        public VkDeviceGroupPresentModeFlagBitsKHR mode;
        public VkDeviceGroupPresentInfoKHR() { }
        public VkDeviceGroupPresentInfoKHR(VkStructureType sType, void* pNext, uint swapchainCount, uint* pDeviceMasks, VkDeviceGroupPresentModeFlagBitsKHR mode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.swapchainCount = swapchainCount;
            this.pDeviceMasks = pDeviceMasks;
            this.mode = mode;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupDeviceCreateInfo.html" /></remarks>
    public unsafe struct VkDeviceGroupDeviceCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceGroupDeviceCreateInfo;
        public void* pNext;
        public uint physicalDeviceCount;
        public VkPhysicalDevice* pPhysicalDevices;
        public VkDeviceGroupDeviceCreateInfo() { }
        public VkDeviceGroupDeviceCreateInfo(VkStructureType sType, void* pNext, uint physicalDeviceCount, VkPhysicalDevice* pPhysicalDevices)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.physicalDeviceCount = physicalDeviceCount;
            this.pPhysicalDevices = pPhysicalDevices;
        }
    }
    /// <summary><b>[requires: VK_KHR_device_group_creation]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupDeviceCreateInfoKHR.html" /></remarks>
    public unsafe struct VkDeviceGroupDeviceCreateInfoKHR
    {
        public VkDeviceGroupDeviceCreateInfoKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_swapchain | VK_KHR_device_group]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupSwapchainCreateInfoKHR.html" /></remarks>
    public unsafe struct VkDeviceGroupSwapchainCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceGroupSwapchainCreateInfoKhr;
        public void* pNext;
        public VkDeviceGroupPresentModeFlagBitsKHR modes;
        public VkDeviceGroupSwapchainCreateInfoKHR() { }
        public VkDeviceGroupSwapchainCreateInfoKHR(VkStructureType sType, void* pNext, VkDeviceGroupPresentModeFlagBitsKHR modes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.modes = modes;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorUpdateTemplateEntry.html" /></remarks>
    public unsafe struct VkDescriptorUpdateTemplateEntry
    {
        public uint dstBinding;
        public uint dstArrayElement;
        public uint descriptorCount;
        public VkDescriptorType descriptorType;
        public nuint offset;
        public nuint stride;
        public VkDescriptorUpdateTemplateEntry() { }
        public VkDescriptorUpdateTemplateEntry(uint dstBinding, uint dstArrayElement, uint descriptorCount, VkDescriptorType descriptorType, nuint offset, nuint stride)
        {
            this.dstBinding = dstBinding;
            this.dstArrayElement = dstArrayElement;
            this.descriptorCount = descriptorCount;
            this.descriptorType = descriptorType;
            this.offset = offset;
            this.stride = stride;
        }
    }
    /// <summary><b>[requires: VK_KHR_descriptor_update_template]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorUpdateTemplateEntryKHR.html" /></remarks>
    public unsafe struct VkDescriptorUpdateTemplateEntryKHR
    {
        public VkDescriptorUpdateTemplateEntryKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorUpdateTemplateCreateInfo.html" /></remarks>
    public unsafe struct VkDescriptorUpdateTemplateCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDescriptorUpdateTemplateCreateInfo;
        public void* pNext;
        public VkDescriptorUpdateTemplateCreateFlags flags;
        public uint descriptorUpdateEntryCount;
        public VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries;
        public VkDescriptorUpdateTemplateType templateType;
        public VkDescriptorSetLayout descriptorSetLayout;
        public VkPipelineBindPoint pipelineBindPoint;
        public VkPipelineLayout pipelineLayout;
        public uint set;
        public VkDescriptorUpdateTemplateCreateInfo() { }
        public VkDescriptorUpdateTemplateCreateInfo(VkStructureType sType, void* pNext, VkDescriptorUpdateTemplateCreateFlags flags, uint descriptorUpdateEntryCount, VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries, VkDescriptorUpdateTemplateType templateType, VkDescriptorSetLayout descriptorSetLayout, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout pipelineLayout, uint set)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.descriptorUpdateEntryCount = descriptorUpdateEntryCount;
            this.pDescriptorUpdateEntries = pDescriptorUpdateEntries;
            this.templateType = templateType;
            this.descriptorSetLayout = descriptorSetLayout;
            this.pipelineBindPoint = pipelineBindPoint;
            this.pipelineLayout = pipelineLayout;
            this.set = set;
        }
    }
    /// <summary><b>[requires: VK_KHR_descriptor_update_template]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorUpdateTemplateCreateInfoKHR.html" /></remarks>
    public unsafe struct VkDescriptorUpdateTemplateCreateInfoKHR
    {
        public VkDescriptorUpdateTemplateCreateInfoKHR() { }
    }
    /// <summary><b>[requires: VK_EXT_hdr_metadata]</b> Chromaticity coordinate</summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkXYColorEXT.html" /></remarks>
    public unsafe struct VkXYColorEXT
    {
        public float x;
        public float y;
        public VkXYColorEXT() { }
        public VkXYColorEXT(float x, float y)
        {
            this.x = x;
            this.y = y;
        }
    }
    /// <summary><b>[requires: VK_KHR_present_id]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePresentIdFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDevicePresentIdFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePresentIdFeaturesKhr;
        public void* pNext;
        public int presentId;
        public VkPhysicalDevicePresentIdFeaturesKHR() { }
        public VkPhysicalDevicePresentIdFeaturesKHR(VkStructureType sType, void* pNext, int presentId)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.presentId = presentId;
        }
    }
    /// <summary><b>[requires: VK_KHR_present_id]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPresentIdKHR.html" /></remarks>
    public unsafe struct VkPresentIdKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePresentIdKhr;
        public void* pNext;
        public uint swapchainCount;
        public ulong* pPresentIds;
        public VkPresentIdKHR() { }
        public VkPresentIdKHR(VkStructureType sType, void* pNext, uint swapchainCount, ulong* pPresentIds)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.swapchainCount = swapchainCount;
            this.pPresentIds = pPresentIds;
        }
    }
    /// <summary><b>[requires: VK_KHR_present_wait]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePresentWaitFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDevicePresentWaitFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePresentWaitFeaturesKhr;
        public void* pNext;
        public int presentWait;
        public VkPhysicalDevicePresentWaitFeaturesKHR() { }
        public VkPhysicalDevicePresentWaitFeaturesKHR(VkStructureType sType, void* pNext, int presentWait)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.presentWait = presentWait;
        }
    }
    /// <summary><b>[requires: VK_EXT_hdr_metadata]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkHdrMetadataEXT.html" /></remarks>
    public unsafe struct VkHdrMetadataEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeHdrMetadataExt;
        public void* pNext;
        public VkXYColorEXT displayPrimaryRed;
        public VkXYColorEXT displayPrimaryGreen;
        public VkXYColorEXT displayPrimaryBlue;
        public VkXYColorEXT whitePoint;
        public float maxLuminance;
        public float minLuminance;
        public float maxContentLightLevel;
        public float maxFrameAverageLightLevel;
        public VkHdrMetadataEXT() { }
        public VkHdrMetadataEXT(VkStructureType sType, void* pNext, VkXYColorEXT displayPrimaryRed, VkXYColorEXT displayPrimaryGreen, VkXYColorEXT displayPrimaryBlue, VkXYColorEXT whitePoint, float maxLuminance, float minLuminance, float maxContentLightLevel, float maxFrameAverageLightLevel)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.displayPrimaryRed = displayPrimaryRed;
            this.displayPrimaryGreen = displayPrimaryGreen;
            this.displayPrimaryBlue = displayPrimaryBlue;
            this.whitePoint = whitePoint;
            this.maxLuminance = maxLuminance;
            this.minLuminance = minLuminance;
            this.maxContentLightLevel = maxContentLightLevel;
            this.maxFrameAverageLightLevel = maxFrameAverageLightLevel;
        }
    }
    /// <summary><b>[requires: VK_AMD_display_native_hdr]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplayNativeHdrSurfaceCapabilitiesAMD.html" /></remarks>
    public unsafe struct VkDisplayNativeHdrSurfaceCapabilitiesAMD
    {
        public VkStructureType sType = VkStructureType.StructureTypeDisplayNativeHdrSurfaceCapabilitiesAmd;
        public void* pNext;
        public int localDimmingSupport;
        public VkDisplayNativeHdrSurfaceCapabilitiesAMD() { }
        public VkDisplayNativeHdrSurfaceCapabilitiesAMD(VkStructureType sType, void* pNext, int localDimmingSupport)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.localDimmingSupport = localDimmingSupport;
        }
    }
    /// <summary><b>[requires: VK_AMD_display_native_hdr]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSwapchainDisplayNativeHdrCreateInfoAMD.html" /></remarks>
    public unsafe struct VkSwapchainDisplayNativeHdrCreateInfoAMD
    {
        public VkStructureType sType = VkStructureType.StructureTypeSwapchainDisplayNativeHdrCreateInfoAmd;
        public void* pNext;
        public int localDimmingEnable;
        public VkSwapchainDisplayNativeHdrCreateInfoAMD() { }
        public VkSwapchainDisplayNativeHdrCreateInfoAMD(VkStructureType sType, void* pNext, int localDimmingEnable)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.localDimmingEnable = localDimmingEnable;
        }
    }
    /// <summary><b>[requires: VK_GOOGLE_display_timing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRefreshCycleDurationGOOGLE.html" /></remarks>
    public unsafe struct VkRefreshCycleDurationGOOGLE
    {
        public ulong refreshDuration;
        public VkRefreshCycleDurationGOOGLE() { }
        public VkRefreshCycleDurationGOOGLE(ulong refreshDuration)
        {
            this.refreshDuration = refreshDuration;
        }
    }
    /// <summary><b>[requires: VK_GOOGLE_display_timing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPastPresentationTimingGOOGLE.html" /></remarks>
    public unsafe struct VkPastPresentationTimingGOOGLE
    {
        public uint presentID;
        public ulong desiredPresentTime;
        public ulong actualPresentTime;
        public ulong earliestPresentTime;
        public ulong presentMargin;
        public VkPastPresentationTimingGOOGLE() { }
        public VkPastPresentationTimingGOOGLE(uint presentID, ulong desiredPresentTime, ulong actualPresentTime, ulong earliestPresentTime, ulong presentMargin)
        {
            this.presentID = presentID;
            this.desiredPresentTime = desiredPresentTime;
            this.actualPresentTime = actualPresentTime;
            this.earliestPresentTime = earliestPresentTime;
            this.presentMargin = presentMargin;
        }
    }
    /// <summary><b>[requires: VK_GOOGLE_display_timing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPresentTimesInfoGOOGLE.html" /></remarks>
    public unsafe struct VkPresentTimesInfoGOOGLE
    {
        public VkStructureType sType = VkStructureType.StructureTypePresentTimesInfoGoogle;
        public void* pNext;
        public uint swapchainCount;
        public VkPresentTimeGOOGLE* pTimes;
        public VkPresentTimesInfoGOOGLE() { }
        public VkPresentTimesInfoGOOGLE(VkStructureType sType, void* pNext, uint swapchainCount, VkPresentTimeGOOGLE* pTimes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.swapchainCount = swapchainCount;
            this.pTimes = pTimes;
        }
    }
    /// <summary><b>[requires: VK_GOOGLE_display_timing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPresentTimeGOOGLE.html" /></remarks>
    public unsafe struct VkPresentTimeGOOGLE
    {
        public uint presentID;
        public ulong desiredPresentTime;
        public VkPresentTimeGOOGLE() { }
        public VkPresentTimeGOOGLE(uint presentID, ulong desiredPresentTime)
        {
            this.presentID = presentID;
            this.desiredPresentTime = desiredPresentTime;
        }
    }
    /// <summary><b>[requires: VK_MVK_ios_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkIOSSurfaceCreateInfoMVK.html" /></remarks>
    public unsafe struct VkIOSSurfaceCreateInfoMVK
    {
        public VkStructureType sType = VkStructureType.StructureTypeIosSurfaceCreateInfoMvk;
        public void* pNext;
        public VkIOSSurfaceCreateFlagsMVK flags;
        public void* pView;
        public VkIOSSurfaceCreateInfoMVK() { }
        public VkIOSSurfaceCreateInfoMVK(VkStructureType sType, void* pNext, VkIOSSurfaceCreateFlagsMVK flags, void* pView)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.pView = pView;
        }
    }
    /// <summary><b>[requires: VK_MVK_macos_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMacOSSurfaceCreateInfoMVK.html" /></remarks>
    public unsafe struct VkMacOSSurfaceCreateInfoMVK
    {
        public VkStructureType sType = VkStructureType.StructureTypeMacosSurfaceCreateInfoMvk;
        public void* pNext;
        public VkMacOSSurfaceCreateFlagsMVK flags;
        public void* pView;
        public VkMacOSSurfaceCreateInfoMVK() { }
        public VkMacOSSurfaceCreateInfoMVK(VkStructureType sType, void* pNext, VkMacOSSurfaceCreateFlagsMVK flags, void* pView)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.pView = pView;
        }
    }
    /// <summary><b>[requires: VK_EXT_metal_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMetalSurfaceCreateInfoEXT.html" /></remarks>
    public unsafe struct VkMetalSurfaceCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeMetalSurfaceCreateInfoExt;
        public void* pNext;
        public VkMetalSurfaceCreateFlagsEXT flags;
        public IntPtr* pLayer;
        public VkMetalSurfaceCreateInfoEXT() { }
        public VkMetalSurfaceCreateInfoEXT(VkStructureType sType, void* pNext, VkMetalSurfaceCreateFlagsEXT flags, IntPtr* pLayer)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.pLayer = pLayer;
        }
    }
    /// <summary><b>[requires: VK_NV_clip_space_w_scaling]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkViewportWScalingNV.html" /></remarks>
    public unsafe struct VkViewportWScalingNV
    {
        public float xcoeff;
        public float ycoeff;
        public VkViewportWScalingNV() { }
        public VkViewportWScalingNV(float xcoeff, float ycoeff)
        {
            this.xcoeff = xcoeff;
            this.ycoeff = ycoeff;
        }
    }
    /// <summary><b>[requires: VK_NV_clip_space_w_scaling]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineViewportWScalingStateCreateInfoNV.html" /></remarks>
    public unsafe struct VkPipelineViewportWScalingStateCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineViewportWScalingStateCreateInfoNv;
        public void* pNext;
        public int viewportWScalingEnable;
        public uint viewportCount;
        public VkViewportWScalingNV* pViewportWScalings;
        public VkPipelineViewportWScalingStateCreateInfoNV() { }
        public VkPipelineViewportWScalingStateCreateInfoNV(VkStructureType sType, void* pNext, int viewportWScalingEnable, uint viewportCount, VkViewportWScalingNV* pViewportWScalings)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.viewportWScalingEnable = viewportWScalingEnable;
            this.viewportCount = viewportCount;
            this.pViewportWScalings = pViewportWScalings;
        }
    }
    /// <summary><b>[requires: VK_NV_viewport_swizzle]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkViewportSwizzleNV.html" /></remarks>
    public unsafe struct VkViewportSwizzleNV
    {
        public VkViewportCoordinateSwizzleNV x;
        public VkViewportCoordinateSwizzleNV y;
        public VkViewportCoordinateSwizzleNV z;
        public VkViewportCoordinateSwizzleNV w;
        public VkViewportSwizzleNV() { }
        public VkViewportSwizzleNV(VkViewportCoordinateSwizzleNV x, VkViewportCoordinateSwizzleNV y, VkViewportCoordinateSwizzleNV z, VkViewportCoordinateSwizzleNV w)
        {
            this.x = x;
            this.y = y;
            this.z = z;
            this.w = w;
        }
    }
    /// <summary><b>[requires: VK_NV_viewport_swizzle]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineViewportSwizzleStateCreateInfoNV.html" /></remarks>
    public unsafe struct VkPipelineViewportSwizzleStateCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineViewportSwizzleStateCreateInfoNv;
        public void* pNext;
        public VkPipelineViewportSwizzleStateCreateFlagsNV flags;
        public uint viewportCount;
        public VkViewportSwizzleNV* pViewportSwizzles;
        public VkPipelineViewportSwizzleStateCreateInfoNV() { }
        public VkPipelineViewportSwizzleStateCreateInfoNV(VkStructureType sType, void* pNext, VkPipelineViewportSwizzleStateCreateFlagsNV flags, uint viewportCount, VkViewportSwizzleNV* pViewportSwizzles)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.viewportCount = viewportCount;
            this.pViewportSwizzles = pViewportSwizzles;
        }
    }
    /// <summary><b>[requires: VK_EXT_discard_rectangles]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDiscardRectanglePropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDiscardRectanglePropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDiscardRectanglePropertiesExt;
        public void* pNext;
        public uint maxDiscardRectangles;
        public VkPhysicalDeviceDiscardRectanglePropertiesEXT() { }
        public VkPhysicalDeviceDiscardRectanglePropertiesEXT(VkStructureType sType, void* pNext, uint maxDiscardRectangles)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxDiscardRectangles = maxDiscardRectangles;
        }
    }
    /// <summary><b>[requires: VK_EXT_discard_rectangles]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineDiscardRectangleStateCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineDiscardRectangleStateCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineDiscardRectangleStateCreateInfoExt;
        public void* pNext;
        public VkPipelineDiscardRectangleStateCreateFlagsEXT flags;
        public VkDiscardRectangleModeEXT discardRectangleMode;
        public uint discardRectangleCount;
        public VkRect2D* pDiscardRectangles;
        public VkPipelineDiscardRectangleStateCreateInfoEXT() { }
        public VkPipelineDiscardRectangleStateCreateInfoEXT(VkStructureType sType, void* pNext, VkPipelineDiscardRectangleStateCreateFlagsEXT flags, VkDiscardRectangleModeEXT discardRectangleMode, uint discardRectangleCount, VkRect2D* pDiscardRectangles)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.discardRectangleMode = discardRectangleMode;
            this.discardRectangleCount = discardRectangleCount;
            this.pDiscardRectangles = pDiscardRectangles;
        }
    }
    /// <summary><b>[requires: VK_NVX_multiview_per_view_attributes]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMultiviewPerViewAttributesPropertiesNvx;
        public void* pNext;
        public int perViewPositionAllComponents;
        public VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX() { }
        public VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(VkStructureType sType, void* pNext, int perViewPositionAllComponents)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.perViewPositionAllComponents = perViewPositionAllComponents;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkInputAttachmentAspectReference.html" /></remarks>
    public unsafe struct VkInputAttachmentAspectReference
    {
        public uint subpass;
        public uint inputAttachmentIndex;
        public VkImageAspectFlagBits aspectMask;
        public VkInputAttachmentAspectReference() { }
        public VkInputAttachmentAspectReference(uint subpass, uint inputAttachmentIndex, VkImageAspectFlagBits aspectMask)
        {
            this.subpass = subpass;
            this.inputAttachmentIndex = inputAttachmentIndex;
            this.aspectMask = aspectMask;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkInputAttachmentAspectReferenceKHR.html" /></remarks>
    public unsafe struct VkInputAttachmentAspectReferenceKHR
    {
        public VkInputAttachmentAspectReferenceKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassInputAttachmentAspectCreateInfo.html" /></remarks>
    public unsafe struct VkRenderPassInputAttachmentAspectCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderPassInputAttachmentAspectCreateInfo;
        public void* pNext;
        public uint aspectReferenceCount;
        public VkInputAttachmentAspectReference* pAspectReferences;
        public VkRenderPassInputAttachmentAspectCreateInfo() { }
        public VkRenderPassInputAttachmentAspectCreateInfo(VkStructureType sType, void* pNext, uint aspectReferenceCount, VkInputAttachmentAspectReference* pAspectReferences)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.aspectReferenceCount = aspectReferenceCount;
            this.pAspectReferences = pAspectReferences;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassInputAttachmentAspectCreateInfoKHR.html" /></remarks>
    public unsafe struct VkRenderPassInputAttachmentAspectCreateInfoKHR
    {
        public VkRenderPassInputAttachmentAspectCreateInfoKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_get_surface_capabilities2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSurfaceInfo2KHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSurfaceInfo2KHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSurfaceInfo2Khr;
        public void* pNext;
        public VkSurfaceKHR surface;
        public VkPhysicalDeviceSurfaceInfo2KHR() { }
        public VkPhysicalDeviceSurfaceInfo2KHR(VkStructureType sType, void* pNext, VkSurfaceKHR surface)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.surface = surface;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_surface_capabilities2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSurfaceCapabilities2KHR.html" /></remarks>
    public unsafe struct VkSurfaceCapabilities2KHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeSurfaceCapabilities2Khr;
        public void* pNext;
        public VkSurfaceCapabilitiesKHR surfaceCapabilities;
        public VkSurfaceCapabilities2KHR() { }
        public VkSurfaceCapabilities2KHR(VkStructureType sType, void* pNext, VkSurfaceCapabilitiesKHR surfaceCapabilities)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.surfaceCapabilities = surfaceCapabilities;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_surface_capabilities2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSurfaceFormat2KHR.html" /></remarks>
    public unsafe struct VkSurfaceFormat2KHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeSurfaceFormat2Khr;
        public void* pNext;
        public VkSurfaceFormatKHR surfaceFormat;
        public VkSurfaceFormat2KHR() { }
        public VkSurfaceFormat2KHR(VkStructureType sType, void* pNext, VkSurfaceFormatKHR surfaceFormat)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.surfaceFormat = surfaceFormat;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_display_properties2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplayProperties2KHR.html" /></remarks>
    public unsafe struct VkDisplayProperties2KHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeDisplayProperties2Khr;
        public void* pNext;
        public VkDisplayPropertiesKHR displayProperties;
        public VkDisplayProperties2KHR() { }
        public VkDisplayProperties2KHR(VkStructureType sType, void* pNext, VkDisplayPropertiesKHR displayProperties)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.displayProperties = displayProperties;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_display_properties2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplayPlaneProperties2KHR.html" /></remarks>
    public unsafe struct VkDisplayPlaneProperties2KHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeDisplayPlaneProperties2Khr;
        public void* pNext;
        public VkDisplayPlanePropertiesKHR displayPlaneProperties;
        public VkDisplayPlaneProperties2KHR() { }
        public VkDisplayPlaneProperties2KHR(VkStructureType sType, void* pNext, VkDisplayPlanePropertiesKHR displayPlaneProperties)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.displayPlaneProperties = displayPlaneProperties;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_display_properties2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplayModeProperties2KHR.html" /></remarks>
    public unsafe struct VkDisplayModeProperties2KHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeDisplayModeProperties2Khr;
        public void* pNext;
        public VkDisplayModePropertiesKHR displayModeProperties;
        public VkDisplayModeProperties2KHR() { }
        public VkDisplayModeProperties2KHR(VkStructureType sType, void* pNext, VkDisplayModePropertiesKHR displayModeProperties)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.displayModeProperties = displayModeProperties;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_display_properties2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplayPlaneInfo2KHR.html" /></remarks>
    public unsafe struct VkDisplayPlaneInfo2KHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeDisplayPlaneInfo2Khr;
        public void* pNext;
        public VkDisplayModeKHR mode;
        public uint planeIndex;
        public VkDisplayPlaneInfo2KHR() { }
        public VkDisplayPlaneInfo2KHR(VkStructureType sType, void* pNext, VkDisplayModeKHR mode, uint planeIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.mode = mode;
            this.planeIndex = planeIndex;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_display_properties2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDisplayPlaneCapabilities2KHR.html" /></remarks>
    public unsafe struct VkDisplayPlaneCapabilities2KHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeDisplayPlaneCapabilities2Khr;
        public void* pNext;
        public VkDisplayPlaneCapabilitiesKHR capabilities;
        public VkDisplayPlaneCapabilities2KHR() { }
        public VkDisplayPlaneCapabilities2KHR(VkStructureType sType, void* pNext, VkDisplayPlaneCapabilitiesKHR capabilities)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.capabilities = capabilities;
        }
    }
    /// <summary><b>[requires: VK_KHR_shared_presentable_image]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSharedPresentSurfaceCapabilitiesKHR.html" /></remarks>
    public unsafe struct VkSharedPresentSurfaceCapabilitiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeSharedPresentSurfaceCapabilitiesKhr;
        public void* pNext;
        public VkImageUsageFlagBits sharedPresentSupportedUsageFlags;
        public VkSharedPresentSurfaceCapabilitiesKHR() { }
        public VkSharedPresentSurfaceCapabilitiesKHR(VkStructureType sType, void* pNext, VkImageUsageFlagBits sharedPresentSupportedUsageFlags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.sharedPresentSupportedUsageFlags = sharedPresentSupportedUsageFlags;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevice16BitStorageFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDevice16BitStorageFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevice16bitStorageFeatures;
        public void* pNext;
        public int storageBuffer16BitAccess;
        public int uniformAndStorageBuffer16BitAccess;
        public int storagePushConstant16;
        public int storageInputOutput16;
        public VkPhysicalDevice16BitStorageFeatures() { }
        public VkPhysicalDevice16BitStorageFeatures(VkStructureType sType, void* pNext, int storageBuffer16BitAccess, int uniformAndStorageBuffer16BitAccess, int storagePushConstant16, int storageInputOutput16)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.storageBuffer16BitAccess = storageBuffer16BitAccess;
            this.uniformAndStorageBuffer16BitAccess = uniformAndStorageBuffer16BitAccess;
            this.storagePushConstant16 = storagePushConstant16;
            this.storageInputOutput16 = storageInputOutput16;
        }
    }
    /// <summary><b>[requires: VK_KHR_16bit_storage]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevice16BitStorageFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDevice16BitStorageFeaturesKHR
    {
        public VkPhysicalDevice16BitStorageFeaturesKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSubgroupProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSubgroupProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSubgroupProperties;
        public void* pNext;
        public uint subgroupSize;
        public VkShaderStageFlagBits supportedStages;
        public VkSubgroupFeatureFlagBits supportedOperations;
        public int quadOperationsInAllStages;
        public VkPhysicalDeviceSubgroupProperties() { }
        public VkPhysicalDeviceSubgroupProperties(VkStructureType sType, void* pNext, uint subgroupSize, VkShaderStageFlagBits supportedStages, VkSubgroupFeatureFlagBits supportedOperations, int quadOperationsInAllStages)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.subgroupSize = subgroupSize;
            this.supportedStages = supportedStages;
            this.supportedOperations = supportedOperations;
            this.quadOperationsInAllStages = quadOperationsInAllStages;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderSubgroupExtendedTypesFeatures;
        public void* pNext;
        public int shaderSubgroupExtendedTypes;
        public VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures() { }
        public VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(VkStructureType sType, void* pNext, int shaderSubgroupExtendedTypes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderSubgroupExtendedTypes = shaderSubgroupExtendedTypes;
        }
    }
    /// <summary><b>[requires: VK_KHR_shader_subgroup_extended_types]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR
    {
        public VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferMemoryRequirementsInfo2.html" /></remarks>
    public unsafe struct VkBufferMemoryRequirementsInfo2
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferMemoryRequirementsInfo2;
        public void* pNext;
        public VkBuffer buffer;
        public VkBufferMemoryRequirementsInfo2() { }
        public VkBufferMemoryRequirementsInfo2(VkStructureType sType, void* pNext, VkBuffer buffer)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.buffer = buffer;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_memory_requirements2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferMemoryRequirementsInfo2KHR.html" /></remarks>
    public unsafe struct VkBufferMemoryRequirementsInfo2KHR
    {
        public VkBufferMemoryRequirementsInfo2KHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceBufferMemoryRequirements.html" /></remarks>
    public unsafe struct VkDeviceBufferMemoryRequirements
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceBufferMemoryRequirements;
        public void* pNext;
        public VkBufferCreateInfo* pCreateInfo;
        public VkDeviceBufferMemoryRequirements() { }
        public VkDeviceBufferMemoryRequirements(VkStructureType sType, void* pNext, VkBufferCreateInfo* pCreateInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pCreateInfo = pCreateInfo;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance4]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceBufferMemoryRequirementsKHR.html" /></remarks>
    public unsafe struct VkDeviceBufferMemoryRequirementsKHR
    {
        public VkDeviceBufferMemoryRequirementsKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageMemoryRequirementsInfo2.html" /></remarks>
    public unsafe struct VkImageMemoryRequirementsInfo2
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageMemoryRequirementsInfo2;
        public void* pNext;
        public VkImage image;
        public VkImageMemoryRequirementsInfo2() { }
        public VkImageMemoryRequirementsInfo2(VkStructureType sType, void* pNext, VkImage image)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.image = image;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_memory_requirements2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageMemoryRequirementsInfo2KHR.html" /></remarks>
    public unsafe struct VkImageMemoryRequirementsInfo2KHR
    {
        public VkImageMemoryRequirementsInfo2KHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageSparseMemoryRequirementsInfo2.html" /></remarks>
    public unsafe struct VkImageSparseMemoryRequirementsInfo2
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageSparseMemoryRequirementsInfo2;
        public void* pNext;
        public VkImage image;
        public VkImageSparseMemoryRequirementsInfo2() { }
        public VkImageSparseMemoryRequirementsInfo2(VkStructureType sType, void* pNext, VkImage image)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.image = image;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_memory_requirements2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageSparseMemoryRequirementsInfo2KHR.html" /></remarks>
    public unsafe struct VkImageSparseMemoryRequirementsInfo2KHR
    {
        public VkImageSparseMemoryRequirementsInfo2KHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceImageMemoryRequirements.html" /></remarks>
    public unsafe struct VkDeviceImageMemoryRequirements
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceImageMemoryRequirements;
        public void* pNext;
        public VkImageCreateInfo* pCreateInfo;
        public VkImageAspectFlagBits planeAspect;
        public VkDeviceImageMemoryRequirements() { }
        public VkDeviceImageMemoryRequirements(VkStructureType sType, void* pNext, VkImageCreateInfo* pCreateInfo, VkImageAspectFlagBits planeAspect)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pCreateInfo = pCreateInfo;
            this.planeAspect = planeAspect;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance4]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceImageMemoryRequirementsKHR.html" /></remarks>
    public unsafe struct VkDeviceImageMemoryRequirementsKHR
    {
        public VkDeviceImageMemoryRequirementsKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryRequirements2.html" /></remarks>
    public unsafe struct VkMemoryRequirements2
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryRequirements2;
        public void* pNext;
        public VkMemoryRequirements memoryRequirements;
        public VkMemoryRequirements2() { }
        public VkMemoryRequirements2(VkStructureType sType, void* pNext, VkMemoryRequirements memoryRequirements)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memoryRequirements = memoryRequirements;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_memory_requirements2 | VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryRequirements2KHR.html" /></remarks>
    public unsafe struct VkMemoryRequirements2KHR
    {
        public VkMemoryRequirements2KHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSparseImageMemoryRequirements2.html" /></remarks>
    public unsafe struct VkSparseImageMemoryRequirements2
    {
        public VkStructureType sType = VkStructureType.StructureTypeSparseImageMemoryRequirements2;
        public void* pNext;
        public VkSparseImageMemoryRequirements memoryRequirements;
        public VkSparseImageMemoryRequirements2() { }
        public VkSparseImageMemoryRequirements2(VkStructureType sType, void* pNext, VkSparseImageMemoryRequirements memoryRequirements)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memoryRequirements = memoryRequirements;
        }
    }
    /// <summary><b>[requires: VK_KHR_get_memory_requirements2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSparseImageMemoryRequirements2KHR.html" /></remarks>
    public unsafe struct VkSparseImageMemoryRequirements2KHR
    {
        public VkSparseImageMemoryRequirements2KHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePointClippingProperties.html" /></remarks>
    public unsafe struct VkPhysicalDevicePointClippingProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePointClippingProperties;
        public void* pNext;
        public VkPointClippingBehavior pointClippingBehavior;
        public VkPhysicalDevicePointClippingProperties() { }
        public VkPhysicalDevicePointClippingProperties(VkStructureType sType, void* pNext, VkPointClippingBehavior pointClippingBehavior)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pointClippingBehavior = pointClippingBehavior;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePointClippingPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDevicePointClippingPropertiesKHR
    {
        public VkPhysicalDevicePointClippingPropertiesKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryDedicatedRequirements.html" /></remarks>
    public unsafe struct VkMemoryDedicatedRequirements
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryDedicatedRequirements;
        public void* pNext;
        public int prefersDedicatedAllocation;
        public int requiresDedicatedAllocation;
        public VkMemoryDedicatedRequirements() { }
        public VkMemoryDedicatedRequirements(VkStructureType sType, void* pNext, int prefersDedicatedAllocation, int requiresDedicatedAllocation)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.prefersDedicatedAllocation = prefersDedicatedAllocation;
            this.requiresDedicatedAllocation = requiresDedicatedAllocation;
        }
    }
    /// <summary><b>[requires: VK_KHR_dedicated_allocation]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryDedicatedRequirementsKHR.html" /></remarks>
    public unsafe struct VkMemoryDedicatedRequirementsKHR
    {
        public VkMemoryDedicatedRequirementsKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryDedicatedAllocateInfo.html" /></remarks>
    public unsafe struct VkMemoryDedicatedAllocateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryDedicatedAllocateInfo;
        public void* pNext;
        public VkImage image;
        public VkBuffer buffer;
        public VkMemoryDedicatedAllocateInfo() { }
        public VkMemoryDedicatedAllocateInfo(VkStructureType sType, void* pNext, VkImage image, VkBuffer buffer)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.image = image;
            this.buffer = buffer;
        }
    }
    /// <summary><b>[requires: VK_KHR_dedicated_allocation]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryDedicatedAllocateInfoKHR.html" /></remarks>
    public unsafe struct VkMemoryDedicatedAllocateInfoKHR
    {
        public VkMemoryDedicatedAllocateInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageViewUsageCreateInfo.html" /></remarks>
    public unsafe struct VkImageViewUsageCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageViewUsageCreateInfo;
        public void* pNext;
        public VkImageUsageFlagBits usage;
        public VkImageViewUsageCreateInfo() { }
        public VkImageViewUsageCreateInfo(VkStructureType sType, void* pNext, VkImageUsageFlagBits usage)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.usage = usage;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_sliced_view_of_3d]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageViewSlicedCreateInfoEXT.html" /></remarks>
    public unsafe struct VkImageViewSlicedCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageViewSlicedCreateInfoExt;
        public void* pNext;
        public uint sliceOffset;
        public uint sliceCount;
        public VkImageViewSlicedCreateInfoEXT() { }
        public VkImageViewSlicedCreateInfoEXT(VkStructureType sType, void* pNext, uint sliceOffset, uint sliceCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.sliceOffset = sliceOffset;
            this.sliceCount = sliceCount;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageViewUsageCreateInfoKHR.html" /></remarks>
    public unsafe struct VkImageViewUsageCreateInfoKHR
    {
        public VkImageViewUsageCreateInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineTessellationDomainOriginStateCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineTessellationDomainOriginStateCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineTessellationDomainOriginStateCreateInfo;
        public void* pNext;
        public VkTessellationDomainOrigin domainOrigin;
        public VkPipelineTessellationDomainOriginStateCreateInfo() { }
        public VkPipelineTessellationDomainOriginStateCreateInfo(VkStructureType sType, void* pNext, VkTessellationDomainOrigin domainOrigin)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.domainOrigin = domainOrigin;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineTessellationDomainOriginStateCreateInfoKHR.html" /></remarks>
    public unsafe struct VkPipelineTessellationDomainOriginStateCreateInfoKHR
    {
        public VkPipelineTessellationDomainOriginStateCreateInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerYcbcrConversionInfo.html" /></remarks>
    public unsafe struct VkSamplerYcbcrConversionInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeSamplerYcbcrConversionInfo;
        public void* pNext;
        public VkSamplerYcbcrConversion conversion;
        public VkSamplerYcbcrConversionInfo() { }
        public VkSamplerYcbcrConversionInfo(VkStructureType sType, void* pNext, VkSamplerYcbcrConversion conversion)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.conversion = conversion;
        }
    }
    /// <summary><b>[requires: VK_KHR_sampler_ycbcr_conversion]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerYcbcrConversionInfoKHR.html" /></remarks>
    public unsafe struct VkSamplerYcbcrConversionInfoKHR
    {
        public VkSamplerYcbcrConversionInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerYcbcrConversionCreateInfo.html" /></remarks>
    public unsafe struct VkSamplerYcbcrConversionCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeSamplerYcbcrConversionCreateInfo;
        public void* pNext;
        public VkFormat format;
        public VkSamplerYcbcrModelConversion ycbcrModel;
        public VkSamplerYcbcrRange ycbcrRange;
        public VkComponentMapping components;
        public VkChromaLocation xChromaOffset;
        public VkChromaLocation yChromaOffset;
        public VkFilter chromaFilter;
        public int forceExplicitReconstruction;
        public VkSamplerYcbcrConversionCreateInfo() { }
        public VkSamplerYcbcrConversionCreateInfo(VkStructureType sType, void* pNext, VkFormat format, VkSamplerYcbcrModelConversion ycbcrModel, VkSamplerYcbcrRange ycbcrRange, VkComponentMapping components, VkChromaLocation xChromaOffset, VkChromaLocation yChromaOffset, VkFilter chromaFilter, int forceExplicitReconstruction)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.format = format;
            this.ycbcrModel = ycbcrModel;
            this.ycbcrRange = ycbcrRange;
            this.components = components;
            this.xChromaOffset = xChromaOffset;
            this.yChromaOffset = yChromaOffset;
            this.chromaFilter = chromaFilter;
            this.forceExplicitReconstruction = forceExplicitReconstruction;
        }
    }
    /// <summary><b>[requires: VK_KHR_sampler_ycbcr_conversion]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerYcbcrConversionCreateInfoKHR.html" /></remarks>
    public unsafe struct VkSamplerYcbcrConversionCreateInfoKHR
    {
        public VkSamplerYcbcrConversionCreateInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindImagePlaneMemoryInfo.html" /></remarks>
    public unsafe struct VkBindImagePlaneMemoryInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeBindImagePlaneMemoryInfo;
        public void* pNext;
        public VkImageAspectFlagBits planeAspect;
        public VkBindImagePlaneMemoryInfo() { }
        public VkBindImagePlaneMemoryInfo(VkStructureType sType, void* pNext, VkImageAspectFlagBits planeAspect)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.planeAspect = planeAspect;
        }
    }
    /// <summary><b>[requires: VK_KHR_sampler_ycbcr_conversion]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindImagePlaneMemoryInfoKHR.html" /></remarks>
    public unsafe struct VkBindImagePlaneMemoryInfoKHR
    {
        public VkBindImagePlaneMemoryInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImagePlaneMemoryRequirementsInfo.html" /></remarks>
    public unsafe struct VkImagePlaneMemoryRequirementsInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeImagePlaneMemoryRequirementsInfo;
        public void* pNext;
        public VkImageAspectFlagBits planeAspect;
        public VkImagePlaneMemoryRequirementsInfo() { }
        public VkImagePlaneMemoryRequirementsInfo(VkStructureType sType, void* pNext, VkImageAspectFlagBits planeAspect)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.planeAspect = planeAspect;
        }
    }
    /// <summary><b>[requires: VK_KHR_sampler_ycbcr_conversion]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImagePlaneMemoryRequirementsInfoKHR.html" /></remarks>
    public unsafe struct VkImagePlaneMemoryRequirementsInfoKHR
    {
        public VkImagePlaneMemoryRequirementsInfoKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSamplerYcbcrConversionFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSamplerYcbcrConversionFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSamplerYcbcrConversionFeatures;
        public void* pNext;
        public int samplerYcbcrConversion;
        public VkPhysicalDeviceSamplerYcbcrConversionFeatures() { }
        public VkPhysicalDeviceSamplerYcbcrConversionFeatures(VkStructureType sType, void* pNext, int samplerYcbcrConversion)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.samplerYcbcrConversion = samplerYcbcrConversion;
        }
    }
    /// <summary><b>[requires: VK_KHR_sampler_ycbcr_conversion]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR
    {
        public VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerYcbcrConversionImageFormatProperties.html" /></remarks>
    public unsafe struct VkSamplerYcbcrConversionImageFormatProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypeSamplerYcbcrConversionImageFormatProperties;
        public void* pNext;
        public uint combinedImageSamplerDescriptorCount;
        public VkSamplerYcbcrConversionImageFormatProperties() { }
        public VkSamplerYcbcrConversionImageFormatProperties(VkStructureType sType, void* pNext, uint combinedImageSamplerDescriptorCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.combinedImageSamplerDescriptorCount = combinedImageSamplerDescriptorCount;
        }
    }
    /// <summary><b>[requires: VK_KHR_sampler_ycbcr_conversion]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerYcbcrConversionImageFormatPropertiesKHR.html" /></remarks>
    public unsafe struct VkSamplerYcbcrConversionImageFormatPropertiesKHR
    {
        public VkSamplerYcbcrConversionImageFormatPropertiesKHR() { }
    }
    /// <summary><b>[requires: VK_AMD_texture_gather_bias_lod]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkTextureLODGatherFormatPropertiesAMD.html" /></remarks>
    public unsafe struct VkTextureLODGatherFormatPropertiesAMD
    {
        public VkStructureType sType = VkStructureType.StructureTypeTextureLodGatherFormatPropertiesAmd;
        public void* pNext;
        public int supportsTextureGatherLODBiasAMD;
        public VkTextureLODGatherFormatPropertiesAMD() { }
        public VkTextureLODGatherFormatPropertiesAMD(VkStructureType sType, void* pNext, int supportsTextureGatherLODBiasAMD)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.supportsTextureGatherLODBiasAMD = supportsTextureGatherLODBiasAMD;
        }
    }
    /// <summary><b>[requires: VK_EXT_conditional_rendering]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkConditionalRenderingBeginInfoEXT.html" /></remarks>
    public unsafe struct VkConditionalRenderingBeginInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeConditionalRenderingBeginInfoExt;
        public void* pNext;
        public VkBuffer buffer;
        public ulong offset;
        public VkConditionalRenderingFlagBitsEXT flags;
        public VkConditionalRenderingBeginInfoEXT() { }
        public VkConditionalRenderingBeginInfoEXT(VkStructureType sType, void* pNext, VkBuffer buffer, ulong offset, VkConditionalRenderingFlagBitsEXT flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.buffer = buffer;
            this.offset = offset;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkProtectedSubmitInfo.html" /></remarks>
    public unsafe struct VkProtectedSubmitInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeProtectedSubmitInfo;
        public void* pNext;
        public int protectedSubmit;
        public VkProtectedSubmitInfo() { }
        public VkProtectedSubmitInfo(VkStructureType sType, void* pNext, int protectedSubmit)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.protectedSubmit = protectedSubmit;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProtectedMemoryFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceProtectedMemoryFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceProtectedMemoryFeatures;
        public void* pNext;
        public int protectedMemory;
        public VkPhysicalDeviceProtectedMemoryFeatures() { }
        public VkPhysicalDeviceProtectedMemoryFeatures(VkStructureType sType, void* pNext, int protectedMemory)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.protectedMemory = protectedMemory;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProtectedMemoryProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceProtectedMemoryProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceProtectedMemoryProperties;
        public void* pNext;
        public int protectedNoFault;
        public VkPhysicalDeviceProtectedMemoryProperties() { }
        public VkPhysicalDeviceProtectedMemoryProperties(VkStructureType sType, void* pNext, int protectedNoFault)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.protectedNoFault = protectedNoFault;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceQueueInfo2.html" /></remarks>
    public unsafe struct VkDeviceQueueInfo2
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceQueueInfo2;
        public void* pNext;
        public VkDeviceQueueCreateFlagBits flags;
        public uint queueFamilyIndex;
        public uint queueIndex;
        public VkDeviceQueueInfo2() { }
        public VkDeviceQueueInfo2(VkStructureType sType, void* pNext, VkDeviceQueueCreateFlagBits flags, uint queueFamilyIndex, uint queueIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.queueFamilyIndex = queueFamilyIndex;
            this.queueIndex = queueIndex;
        }
    }
    /// <summary><b>[requires: VK_NV_fragment_coverage_to_color]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineCoverageToColorStateCreateInfoNV.html" /></remarks>
    public unsafe struct VkPipelineCoverageToColorStateCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineCoverageToColorStateCreateInfoNv;
        public void* pNext;
        public VkPipelineCoverageToColorStateCreateFlagsNV flags;
        public int coverageToColorEnable;
        public uint coverageToColorLocation;
        public VkPipelineCoverageToColorStateCreateInfoNV() { }
        public VkPipelineCoverageToColorStateCreateInfoNV(VkStructureType sType, void* pNext, VkPipelineCoverageToColorStateCreateFlagsNV flags, int coverageToColorEnable, uint coverageToColorLocation)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.coverageToColorEnable = coverageToColorEnable;
            this.coverageToColorLocation = coverageToColorLocation;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSamplerFilterMinmaxProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSamplerFilterMinmaxProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSamplerFilterMinmaxProperties;
        public void* pNext;
        public int filterMinmaxSingleComponentFormats;
        public int filterMinmaxImageComponentMapping;
        public VkPhysicalDeviceSamplerFilterMinmaxProperties() { }
        public VkPhysicalDeviceSamplerFilterMinmaxProperties(VkStructureType sType, void* pNext, int filterMinmaxSingleComponentFormats, int filterMinmaxImageComponentMapping)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.filterMinmaxSingleComponentFormats = filterMinmaxSingleComponentFormats;
            this.filterMinmaxImageComponentMapping = filterMinmaxImageComponentMapping;
        }
    }
    /// <summary><b>[requires: VK_EXT_sampler_filter_minmax]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT
    {
        public VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_sample_locations]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSampleLocationEXT.html" /></remarks>
    public unsafe struct VkSampleLocationEXT
    {
        public float x;
        public float y;
        public VkSampleLocationEXT() { }
        public VkSampleLocationEXT(float x, float y)
        {
            this.x = x;
            this.y = y;
        }
    }
    /// <summary><b>[requires: VK_EXT_sample_locations]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSampleLocationsInfoEXT.html" /></remarks>
    public unsafe struct VkSampleLocationsInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSampleLocationsInfoExt;
        public void* pNext;
        public VkSampleCountFlagBits sampleLocationsPerPixel;
        public VkExtent2D sampleLocationGridSize;
        public uint sampleLocationsCount;
        public VkSampleLocationEXT* pSampleLocations;
        public VkSampleLocationsInfoEXT() { }
        public VkSampleLocationsInfoEXT(VkStructureType sType, void* pNext, VkSampleCountFlagBits sampleLocationsPerPixel, VkExtent2D sampleLocationGridSize, uint sampleLocationsCount, VkSampleLocationEXT* pSampleLocations)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.sampleLocationsPerPixel = sampleLocationsPerPixel;
            this.sampleLocationGridSize = sampleLocationGridSize;
            this.sampleLocationsCount = sampleLocationsCount;
            this.pSampleLocations = pSampleLocations;
        }
    }
    /// <summary><b>[requires: VK_EXT_sample_locations]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAttachmentSampleLocationsEXT.html" /></remarks>
    public unsafe struct VkAttachmentSampleLocationsEXT
    {
        public uint attachmentIndex;
        public VkSampleLocationsInfoEXT sampleLocationsInfo;
        public VkAttachmentSampleLocationsEXT() { }
        public VkAttachmentSampleLocationsEXT(uint attachmentIndex, VkSampleLocationsInfoEXT sampleLocationsInfo)
        {
            this.attachmentIndex = attachmentIndex;
            this.sampleLocationsInfo = sampleLocationsInfo;
        }
    }
    /// <summary><b>[requires: VK_EXT_sample_locations]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassSampleLocationsEXT.html" /></remarks>
    public unsafe struct VkSubpassSampleLocationsEXT
    {
        public uint subpassIndex;
        public VkSampleLocationsInfoEXT sampleLocationsInfo;
        public VkSubpassSampleLocationsEXT() { }
        public VkSubpassSampleLocationsEXT(uint subpassIndex, VkSampleLocationsInfoEXT sampleLocationsInfo)
        {
            this.subpassIndex = subpassIndex;
            this.sampleLocationsInfo = sampleLocationsInfo;
        }
    }
    /// <summary><b>[requires: VK_EXT_sample_locations]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassSampleLocationsBeginInfoEXT.html" /></remarks>
    public unsafe struct VkRenderPassSampleLocationsBeginInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderPassSampleLocationsBeginInfoExt;
        public void* pNext;
        public uint attachmentInitialSampleLocationsCount;
        public VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations;
        public uint postSubpassSampleLocationsCount;
        public VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations;
        public VkRenderPassSampleLocationsBeginInfoEXT() { }
        public VkRenderPassSampleLocationsBeginInfoEXT(VkStructureType sType, void* pNext, uint attachmentInitialSampleLocationsCount, VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations, uint postSubpassSampleLocationsCount, VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.attachmentInitialSampleLocationsCount = attachmentInitialSampleLocationsCount;
            this.pAttachmentInitialSampleLocations = pAttachmentInitialSampleLocations;
            this.postSubpassSampleLocationsCount = postSubpassSampleLocationsCount;
            this.pPostSubpassSampleLocations = pPostSubpassSampleLocations;
        }
    }
    /// <summary><b>[requires: VK_EXT_sample_locations]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineSampleLocationsStateCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineSampleLocationsStateCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineSampleLocationsStateCreateInfoExt;
        public void* pNext;
        public int sampleLocationsEnable;
        public VkSampleLocationsInfoEXT sampleLocationsInfo;
        public VkPipelineSampleLocationsStateCreateInfoEXT() { }
        public VkPipelineSampleLocationsStateCreateInfoEXT(VkStructureType sType, void* pNext, int sampleLocationsEnable, VkSampleLocationsInfoEXT sampleLocationsInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.sampleLocationsEnable = sampleLocationsEnable;
            this.sampleLocationsInfo = sampleLocationsInfo;
        }
    }
    /// <summary><b>[requires: VK_EXT_sample_locations]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSampleLocationsPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSampleLocationsPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSampleLocationsPropertiesExt;
        public void* pNext;
        public VkSampleCountFlagBits sampleLocationSampleCounts;
        public VkExtent2D maxSampleLocationGridSize;
        public fixed float sampleLocationCoordinateRange[2];
        public uint sampleLocationSubPixelBits;
        public int variableSampleLocations;
        public VkPhysicalDeviceSampleLocationsPropertiesEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_sample_locations]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMultisamplePropertiesEXT.html" /></remarks>
    public unsafe struct VkMultisamplePropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeMultisamplePropertiesExt;
        public void* pNext;
        public VkExtent2D maxSampleLocationGridSize;
        public VkMultisamplePropertiesEXT() { }
        public VkMultisamplePropertiesEXT(VkStructureType sType, void* pNext, VkExtent2D maxSampleLocationGridSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxSampleLocationGridSize = maxSampleLocationGridSize;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerReductionModeCreateInfo.html" /></remarks>
    public unsafe struct VkSamplerReductionModeCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeSamplerReductionModeCreateInfo;
        public void* pNext;
        public VkSamplerReductionMode reductionMode;
        public VkSamplerReductionModeCreateInfo() { }
        public VkSamplerReductionModeCreateInfo(VkStructureType sType, void* pNext, VkSamplerReductionMode reductionMode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.reductionMode = reductionMode;
        }
    }
    /// <summary><b>[requires: VK_EXT_sampler_filter_minmax]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerReductionModeCreateInfoEXT.html" /></remarks>
    public unsafe struct VkSamplerReductionModeCreateInfoEXT
    {
        public VkSamplerReductionModeCreateInfoEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_blend_operation_advanced]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceBlendOperationAdvancedFeaturesExt;
        public void* pNext;
        public int advancedBlendCoherentOperations;
        public VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT() { }
        public VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(VkStructureType sType, void* pNext, int advancedBlendCoherentOperations)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.advancedBlendCoherentOperations = advancedBlendCoherentOperations;
        }
    }
    /// <summary><b>[requires: VK_EXT_multi_draw]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiDrawFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMultiDrawFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMultiDrawFeaturesExt;
        public void* pNext;
        public int multiDraw;
        public VkPhysicalDeviceMultiDrawFeaturesEXT() { }
        public VkPhysicalDeviceMultiDrawFeaturesEXT(VkStructureType sType, void* pNext, int multiDraw)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.multiDraw = multiDraw;
        }
    }
    /// <summary><b>[requires: VK_EXT_blend_operation_advanced]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceBlendOperationAdvancedPropertiesExt;
        public void* pNext;
        public uint advancedBlendMaxColorAttachments;
        public int advancedBlendIndependentBlend;
        public int advancedBlendNonPremultipliedSrcColor;
        public int advancedBlendNonPremultipliedDstColor;
        public int advancedBlendCorrelatedOverlap;
        public int advancedBlendAllOperations;
        public VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT() { }
        public VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(VkStructureType sType, void* pNext, uint advancedBlendMaxColorAttachments, int advancedBlendIndependentBlend, int advancedBlendNonPremultipliedSrcColor, int advancedBlendNonPremultipliedDstColor, int advancedBlendCorrelatedOverlap, int advancedBlendAllOperations)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.advancedBlendMaxColorAttachments = advancedBlendMaxColorAttachments;
            this.advancedBlendIndependentBlend = advancedBlendIndependentBlend;
            this.advancedBlendNonPremultipliedSrcColor = advancedBlendNonPremultipliedSrcColor;
            this.advancedBlendNonPremultipliedDstColor = advancedBlendNonPremultipliedDstColor;
            this.advancedBlendCorrelatedOverlap = advancedBlendCorrelatedOverlap;
            this.advancedBlendAllOperations = advancedBlendAllOperations;
        }
    }
    /// <summary><b>[requires: VK_EXT_blend_operation_advanced]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineColorBlendAdvancedStateCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineColorBlendAdvancedStateCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineColorBlendAdvancedStateCreateInfoExt;
        public void* pNext;
        public int srcPremultiplied;
        public int dstPremultiplied;
        public VkBlendOverlapEXT blendOverlap;
        public VkPipelineColorBlendAdvancedStateCreateInfoEXT() { }
        public VkPipelineColorBlendAdvancedStateCreateInfoEXT(VkStructureType sType, void* pNext, int srcPremultiplied, int dstPremultiplied, VkBlendOverlapEXT blendOverlap)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcPremultiplied = srcPremultiplied;
            this.dstPremultiplied = dstPremultiplied;
            this.blendOverlap = blendOverlap;
        }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceInlineUniformBlockFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceInlineUniformBlockFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceInlineUniformBlockFeatures;
        public void* pNext;
        public int inlineUniformBlock;
        public int descriptorBindingInlineUniformBlockUpdateAfterBind;
        public VkPhysicalDeviceInlineUniformBlockFeatures() { }
        public VkPhysicalDeviceInlineUniformBlockFeatures(VkStructureType sType, void* pNext, int inlineUniformBlock, int descriptorBindingInlineUniformBlockUpdateAfterBind)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.inlineUniformBlock = inlineUniformBlock;
            this.descriptorBindingInlineUniformBlockUpdateAfterBind = descriptorBindingInlineUniformBlockUpdateAfterBind;
        }
    }
    /// <summary><b>[requires: VK_EXT_inline_uniform_block]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceInlineUniformBlockFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceInlineUniformBlockFeaturesEXT
    {
        public VkPhysicalDeviceInlineUniformBlockFeaturesEXT() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceInlineUniformBlockProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceInlineUniformBlockProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceInlineUniformBlockProperties;
        public void* pNext;
        public uint maxInlineUniformBlockSize;
        public uint maxPerStageDescriptorInlineUniformBlocks;
        public uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
        public uint maxDescriptorSetInlineUniformBlocks;
        public uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
        public VkPhysicalDeviceInlineUniformBlockProperties() { }
        public VkPhysicalDeviceInlineUniformBlockProperties(VkStructureType sType, void* pNext, uint maxInlineUniformBlockSize, uint maxPerStageDescriptorInlineUniformBlocks, uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, uint maxDescriptorSetInlineUniformBlocks, uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxInlineUniformBlockSize = maxInlineUniformBlockSize;
            this.maxPerStageDescriptorInlineUniformBlocks = maxPerStageDescriptorInlineUniformBlocks;
            this.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
            this.maxDescriptorSetInlineUniformBlocks = maxDescriptorSetInlineUniformBlocks;
            this.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
        }
    }
    /// <summary><b>[requires: VK_EXT_inline_uniform_block]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceInlineUniformBlockPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceInlineUniformBlockPropertiesEXT
    {
        public VkPhysicalDeviceInlineUniformBlockPropertiesEXT() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkWriteDescriptorSetInlineUniformBlock.html" /></remarks>
    public unsafe struct VkWriteDescriptorSetInlineUniformBlock
    {
        public VkStructureType sType = VkStructureType.StructureTypeWriteDescriptorSetInlineUniformBlock;
        public void* pNext;
        public uint dataSize;
        public void* pData;
        public VkWriteDescriptorSetInlineUniformBlock() { }
        public VkWriteDescriptorSetInlineUniformBlock(VkStructureType sType, void* pNext, uint dataSize, void* pData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.dataSize = dataSize;
            this.pData = pData;
        }
    }
    /// <summary><b>[requires: VK_EXT_inline_uniform_block]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkWriteDescriptorSetInlineUniformBlockEXT.html" /></remarks>
    public unsafe struct VkWriteDescriptorSetInlineUniformBlockEXT
    {
        public VkWriteDescriptorSetInlineUniformBlockEXT() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorPoolInlineUniformBlockCreateInfo.html" /></remarks>
    public unsafe struct VkDescriptorPoolInlineUniformBlockCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDescriptorPoolInlineUniformBlockCreateInfo;
        public void* pNext;
        public uint maxInlineUniformBlockBindings;
        public VkDescriptorPoolInlineUniformBlockCreateInfo() { }
        public VkDescriptorPoolInlineUniformBlockCreateInfo(VkStructureType sType, void* pNext, uint maxInlineUniformBlockBindings)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxInlineUniformBlockBindings = maxInlineUniformBlockBindings;
        }
    }
    /// <summary><b>[requires: VK_EXT_inline_uniform_block]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorPoolInlineUniformBlockCreateInfoEXT.html" /></remarks>
    public unsafe struct VkDescriptorPoolInlineUniformBlockCreateInfoEXT
    {
        public VkDescriptorPoolInlineUniformBlockCreateInfoEXT() { }
    }
    /// <summary><b>[requires: VK_NV_framebuffer_mixed_samples]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineCoverageModulationStateCreateInfoNV.html" /></remarks>
    public unsafe struct VkPipelineCoverageModulationStateCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineCoverageModulationStateCreateInfoNv;
        public void* pNext;
        public VkPipelineCoverageModulationStateCreateFlagsNV flags;
        public VkCoverageModulationModeNV coverageModulationMode;
        public int coverageModulationTableEnable;
        public uint coverageModulationTableCount;
        public float* pCoverageModulationTable;
        public VkPipelineCoverageModulationStateCreateInfoNV() { }
        public VkPipelineCoverageModulationStateCreateInfoNV(VkStructureType sType, void* pNext, VkPipelineCoverageModulationStateCreateFlagsNV flags, VkCoverageModulationModeNV coverageModulationMode, int coverageModulationTableEnable, uint coverageModulationTableCount, float* pCoverageModulationTable)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.coverageModulationMode = coverageModulationMode;
            this.coverageModulationTableEnable = coverageModulationTableEnable;
            this.coverageModulationTableCount = coverageModulationTableCount;
            this.pCoverageModulationTable = pCoverageModulationTable;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageFormatListCreateInfo.html" /></remarks>
    public unsafe struct VkImageFormatListCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageFormatListCreateInfo;
        public void* pNext;
        public uint viewFormatCount;
        public VkFormat* pViewFormats;
        public VkImageFormatListCreateInfo() { }
        public VkImageFormatListCreateInfo(VkStructureType sType, void* pNext, uint viewFormatCount, VkFormat* pViewFormats)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.viewFormatCount = viewFormatCount;
            this.pViewFormats = pViewFormats;
        }
    }
    /// <summary><b>[requires: VK_KHR_image_format_list]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageFormatListCreateInfoKHR.html" /></remarks>
    public unsafe struct VkImageFormatListCreateInfoKHR
    {
        public VkImageFormatListCreateInfoKHR() { }
    }
    /// <summary><b>[requires: VK_EXT_validation_cache]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkValidationCacheCreateInfoEXT.html" /></remarks>
    public unsafe struct VkValidationCacheCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeValidationCacheCreateInfoExt;
        public void* pNext;
        public VkValidationCacheCreateFlagsEXT flags;
        public nuint initialDataSize;
        public void* pInitialData;
        public VkValidationCacheCreateInfoEXT() { }
        public VkValidationCacheCreateInfoEXT(VkStructureType sType, void* pNext, VkValidationCacheCreateFlagsEXT flags, nuint initialDataSize, void* pInitialData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.initialDataSize = initialDataSize;
            this.pInitialData = pInitialData;
        }
    }
    /// <summary><b>[requires: VK_EXT_validation_cache]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkShaderModuleValidationCacheCreateInfoEXT.html" /></remarks>
    public unsafe struct VkShaderModuleValidationCacheCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeShaderModuleValidationCacheCreateInfoExt;
        public void* pNext;
        public VkValidationCacheEXT validationCache;
        public VkShaderModuleValidationCacheCreateInfoEXT() { }
        public VkShaderModuleValidationCacheCreateInfoEXT(VkStructureType sType, void* pNext, VkValidationCacheEXT validationCache)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.validationCache = validationCache;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance3Properties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMaintenance3Properties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMaintenance3Properties;
        public void* pNext;
        public uint maxPerSetDescriptors;
        public ulong maxMemoryAllocationSize;
        public VkPhysicalDeviceMaintenance3Properties() { }
        public VkPhysicalDeviceMaintenance3Properties(VkStructureType sType, void* pNext, uint maxPerSetDescriptors, ulong maxMemoryAllocationSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxPerSetDescriptors = maxPerSetDescriptors;
            this.maxMemoryAllocationSize = maxMemoryAllocationSize;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance3PropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMaintenance3PropertiesKHR
    {
        public VkPhysicalDeviceMaintenance3PropertiesKHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance4Features.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMaintenance4Features
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMaintenance4Features;
        public void* pNext;
        public int maintenance4;
        public VkPhysicalDeviceMaintenance4Features() { }
        public VkPhysicalDeviceMaintenance4Features(VkStructureType sType, void* pNext, int maintenance4)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maintenance4 = maintenance4;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance4]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance4FeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMaintenance4FeaturesKHR
    {
        public VkPhysicalDeviceMaintenance4FeaturesKHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance4Properties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMaintenance4Properties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMaintenance4Properties;
        public void* pNext;
        public ulong maxBufferSize;
        public VkPhysicalDeviceMaintenance4Properties() { }
        public VkPhysicalDeviceMaintenance4Properties(VkStructureType sType, void* pNext, ulong maxBufferSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxBufferSize = maxBufferSize;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance4]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance4PropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMaintenance4PropertiesKHR
    {
        public VkPhysicalDeviceMaintenance4PropertiesKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_maintenance5]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance5FeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMaintenance5FeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMaintenance5FeaturesKhr;
        public void* pNext;
        public int maintenance5;
        public VkPhysicalDeviceMaintenance5FeaturesKHR() { }
        public VkPhysicalDeviceMaintenance5FeaturesKHR(VkStructureType sType, void* pNext, int maintenance5)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maintenance5 = maintenance5;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance5]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance5PropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMaintenance5PropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMaintenance5PropertiesKhr;
        public void* pNext;
        public int earlyFragmentMultisampleCoverageAfterSampleCounting;
        public int earlyFragmentSampleMaskTestBeforeSampleCounting;
        public int depthStencilSwizzleOneSupport;
        public int polygonModePointSize;
        public int nonStrictSinglePixelWideLinesUseParallelogram;
        public int nonStrictWideLinesUseParallelogram;
        public VkPhysicalDeviceMaintenance5PropertiesKHR() { }
        public VkPhysicalDeviceMaintenance5PropertiesKHR(VkStructureType sType, void* pNext, int earlyFragmentMultisampleCoverageAfterSampleCounting, int earlyFragmentSampleMaskTestBeforeSampleCounting, int depthStencilSwizzleOneSupport, int polygonModePointSize, int nonStrictSinglePixelWideLinesUseParallelogram, int nonStrictWideLinesUseParallelogram)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.earlyFragmentMultisampleCoverageAfterSampleCounting = earlyFragmentMultisampleCoverageAfterSampleCounting;
            this.earlyFragmentSampleMaskTestBeforeSampleCounting = earlyFragmentSampleMaskTestBeforeSampleCounting;
            this.depthStencilSwizzleOneSupport = depthStencilSwizzleOneSupport;
            this.polygonModePointSize = polygonModePointSize;
            this.nonStrictSinglePixelWideLinesUseParallelogram = nonStrictSinglePixelWideLinesUseParallelogram;
            this.nonStrictWideLinesUseParallelogram = nonStrictWideLinesUseParallelogram;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance6]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance6FeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMaintenance6FeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMaintenance6FeaturesKhr;
        public void* pNext;
        public int maintenance6;
        public VkPhysicalDeviceMaintenance6FeaturesKHR() { }
        public VkPhysicalDeviceMaintenance6FeaturesKHR(VkStructureType sType, void* pNext, int maintenance6)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maintenance6 = maintenance6;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance6]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance6PropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMaintenance6PropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMaintenance6PropertiesKhr;
        public void* pNext;
        public int blockTexelViewCompatibleMultipleLayers;
        public uint maxCombinedImageSamplerDescriptorCount;
        public int fragmentShadingRateClampCombinerInputs;
        public VkPhysicalDeviceMaintenance6PropertiesKHR() { }
        public VkPhysicalDeviceMaintenance6PropertiesKHR(VkStructureType sType, void* pNext, int blockTexelViewCompatibleMultipleLayers, uint maxCombinedImageSamplerDescriptorCount, int fragmentShadingRateClampCombinerInputs)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.blockTexelViewCompatibleMultipleLayers = blockTexelViewCompatibleMultipleLayers;
            this.maxCombinedImageSamplerDescriptorCount = maxCombinedImageSamplerDescriptorCount;
            this.fragmentShadingRateClampCombinerInputs = fragmentShadingRateClampCombinerInputs;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance7]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance7FeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMaintenance7FeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMaintenance7FeaturesKhr;
        public void* pNext;
        public int maintenance7;
        public VkPhysicalDeviceMaintenance7FeaturesKHR() { }
        public VkPhysicalDeviceMaintenance7FeaturesKHR(VkStructureType sType, void* pNext, int maintenance7)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maintenance7 = maintenance7;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance7]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance7PropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMaintenance7PropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMaintenance7PropertiesKhr;
        public void* pNext;
        public int robustFragmentShadingRateAttachmentAccess;
        public int separateDepthStencilAttachmentAccess;
        public uint maxDescriptorSetTotalUniformBuffersDynamic;
        public uint maxDescriptorSetTotalStorageBuffersDynamic;
        public uint maxDescriptorSetTotalBuffersDynamic;
        public uint maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic;
        public uint maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic;
        public uint maxDescriptorSetUpdateAfterBindTotalBuffersDynamic;
        public VkPhysicalDeviceMaintenance7PropertiesKHR() { }
        public VkPhysicalDeviceMaintenance7PropertiesKHR(VkStructureType sType, void* pNext, int robustFragmentShadingRateAttachmentAccess, int separateDepthStencilAttachmentAccess, uint maxDescriptorSetTotalUniformBuffersDynamic, uint maxDescriptorSetTotalStorageBuffersDynamic, uint maxDescriptorSetTotalBuffersDynamic, uint maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic, uint maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic, uint maxDescriptorSetUpdateAfterBindTotalBuffersDynamic)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.robustFragmentShadingRateAttachmentAccess = robustFragmentShadingRateAttachmentAccess;
            this.separateDepthStencilAttachmentAccess = separateDepthStencilAttachmentAccess;
            this.maxDescriptorSetTotalUniformBuffersDynamic = maxDescriptorSetTotalUniformBuffersDynamic;
            this.maxDescriptorSetTotalStorageBuffersDynamic = maxDescriptorSetTotalStorageBuffersDynamic;
            this.maxDescriptorSetTotalBuffersDynamic = maxDescriptorSetTotalBuffersDynamic;
            this.maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic = maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic;
            this.maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic = maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic;
            this.maxDescriptorSetUpdateAfterBindTotalBuffersDynamic = maxDescriptorSetUpdateAfterBindTotalBuffersDynamic;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance7]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLayeredApiPropertiesListKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceLayeredApiPropertiesListKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceLayeredApiPropertiesListKhr;
        public void* pNext;
        public uint layeredApiCount;
        public VkPhysicalDeviceLayeredApiPropertiesKHR* pLayeredApis;
        public VkPhysicalDeviceLayeredApiPropertiesListKHR() { }
        public VkPhysicalDeviceLayeredApiPropertiesListKHR(VkStructureType sType, void* pNext, uint layeredApiCount, VkPhysicalDeviceLayeredApiPropertiesKHR* pLayeredApis)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.layeredApiCount = layeredApiCount;
            this.pLayeredApis = pLayeredApis;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance7]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLayeredApiPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceLayeredApiPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceLayeredApiPropertiesKhr;
        public void* pNext;
        public uint vendorID;
        public uint deviceID;
        public VkPhysicalDeviceLayeredApiKHR layeredAPI;
        public fixed byte deviceName[256];
        public VkPhysicalDeviceLayeredApiPropertiesKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_maintenance7]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLayeredApiVulkanPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceLayeredApiVulkanPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceLayeredApiVulkanPropertiesKhr;
        public void* pNext;
        public VkPhysicalDeviceProperties2 properties;
        public VkPhysicalDeviceLayeredApiVulkanPropertiesKHR() { }
        public VkPhysicalDeviceLayeredApiVulkanPropertiesKHR(VkStructureType sType, void* pNext, VkPhysicalDeviceProperties2 properties)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.properties = properties;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance5]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderingAreaInfoKHR.html" /></remarks>
    public unsafe struct VkRenderingAreaInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderingAreaInfoKhr;
        public void* pNext;
        public uint viewMask;
        public uint colorAttachmentCount;
        public VkFormat* pColorAttachmentFormats;
        public VkFormat depthAttachmentFormat;
        public VkFormat stencilAttachmentFormat;
        public VkRenderingAreaInfoKHR() { }
        public VkRenderingAreaInfoKHR(VkStructureType sType, void* pNext, uint viewMask, uint colorAttachmentCount, VkFormat* pColorAttachmentFormats, VkFormat depthAttachmentFormat, VkFormat stencilAttachmentFormat)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.viewMask = viewMask;
            this.colorAttachmentCount = colorAttachmentCount;
            this.pColorAttachmentFormats = pColorAttachmentFormats;
            this.depthAttachmentFormat = depthAttachmentFormat;
            this.stencilAttachmentFormat = stencilAttachmentFormat;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetLayoutSupport.html" /></remarks>
    public unsafe struct VkDescriptorSetLayoutSupport
    {
        public VkStructureType sType = VkStructureType.StructureTypeDescriptorSetLayoutSupport;
        public void* pNext;
        public int supported;
        public VkDescriptorSetLayoutSupport() { }
        public VkDescriptorSetLayoutSupport(VkStructureType sType, void* pNext, int supported)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.supported = supported;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetLayoutSupportKHR.html" /></remarks>
    public unsafe struct VkDescriptorSetLayoutSupportKHR
    {
        public VkDescriptorSetLayoutSupportKHR() { }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderDrawParametersFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderDrawParametersFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderDrawParametersFeatures;
        public void* pNext;
        public int shaderDrawParameters;
        public VkPhysicalDeviceShaderDrawParametersFeatures() { }
        public VkPhysicalDeviceShaderDrawParametersFeatures(VkStructureType sType, void* pNext, int shaderDrawParameters)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderDrawParameters = shaderDrawParameters;
        }
    }
    /// <summary><b>[requires: v1.1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderDrawParameterFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderDrawParameterFeatures
    {
        public VkPhysicalDeviceShaderDrawParameterFeatures() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderFloat16Int8Features.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderFloat16Int8Features
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderFloat16Int8Features;
        public void* pNext;
        public int shaderFloat16;
        public int shaderInt8;
        public VkPhysicalDeviceShaderFloat16Int8Features() { }
        public VkPhysicalDeviceShaderFloat16Int8Features(VkStructureType sType, void* pNext, int shaderFloat16, int shaderInt8)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderFloat16 = shaderFloat16;
            this.shaderInt8 = shaderInt8;
        }
    }
    /// <summary><b>[requires: VK_KHR_shader_float16_int8]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderFloat16Int8FeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderFloat16Int8FeaturesKHR
    {
        public VkPhysicalDeviceShaderFloat16Int8FeaturesKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_shader_float16_int8]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFloat16Int8FeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFloat16Int8FeaturesKHR
    {
        public VkPhysicalDeviceFloat16Int8FeaturesKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFloatControlsProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFloatControlsProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFloatControlsProperties;
        public void* pNext;
        public VkShaderFloatControlsIndependence denormBehaviorIndependence;
        public VkShaderFloatControlsIndependence roundingModeIndependence;
        public int shaderSignedZeroInfNanPreserveFloat16;
        public int shaderSignedZeroInfNanPreserveFloat32;
        public int shaderSignedZeroInfNanPreserveFloat64;
        public int shaderDenormPreserveFloat16;
        public int shaderDenormPreserveFloat32;
        public int shaderDenormPreserveFloat64;
        public int shaderDenormFlushToZeroFloat16;
        public int shaderDenormFlushToZeroFloat32;
        public int shaderDenormFlushToZeroFloat64;
        public int shaderRoundingModeRTEFloat16;
        public int shaderRoundingModeRTEFloat32;
        public int shaderRoundingModeRTEFloat64;
        public int shaderRoundingModeRTZFloat16;
        public int shaderRoundingModeRTZFloat32;
        public int shaderRoundingModeRTZFloat64;
        public VkPhysicalDeviceFloatControlsProperties() { }
        public VkPhysicalDeviceFloatControlsProperties(VkStructureType sType, void* pNext, VkShaderFloatControlsIndependence denormBehaviorIndependence, VkShaderFloatControlsIndependence roundingModeIndependence, int shaderSignedZeroInfNanPreserveFloat16, int shaderSignedZeroInfNanPreserveFloat32, int shaderSignedZeroInfNanPreserveFloat64, int shaderDenormPreserveFloat16, int shaderDenormPreserveFloat32, int shaderDenormPreserveFloat64, int shaderDenormFlushToZeroFloat16, int shaderDenormFlushToZeroFloat32, int shaderDenormFlushToZeroFloat64, int shaderRoundingModeRTEFloat16, int shaderRoundingModeRTEFloat32, int shaderRoundingModeRTEFloat64, int shaderRoundingModeRTZFloat16, int shaderRoundingModeRTZFloat32, int shaderRoundingModeRTZFloat64)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.denormBehaviorIndependence = denormBehaviorIndependence;
            this.roundingModeIndependence = roundingModeIndependence;
            this.shaderSignedZeroInfNanPreserveFloat16 = shaderSignedZeroInfNanPreserveFloat16;
            this.shaderSignedZeroInfNanPreserveFloat32 = shaderSignedZeroInfNanPreserveFloat32;
            this.shaderSignedZeroInfNanPreserveFloat64 = shaderSignedZeroInfNanPreserveFloat64;
            this.shaderDenormPreserveFloat16 = shaderDenormPreserveFloat16;
            this.shaderDenormPreserveFloat32 = shaderDenormPreserveFloat32;
            this.shaderDenormPreserveFloat64 = shaderDenormPreserveFloat64;
            this.shaderDenormFlushToZeroFloat16 = shaderDenormFlushToZeroFloat16;
            this.shaderDenormFlushToZeroFloat32 = shaderDenormFlushToZeroFloat32;
            this.shaderDenormFlushToZeroFloat64 = shaderDenormFlushToZeroFloat64;
            this.shaderRoundingModeRTEFloat16 = shaderRoundingModeRTEFloat16;
            this.shaderRoundingModeRTEFloat32 = shaderRoundingModeRTEFloat32;
            this.shaderRoundingModeRTEFloat64 = shaderRoundingModeRTEFloat64;
            this.shaderRoundingModeRTZFloat16 = shaderRoundingModeRTZFloat16;
            this.shaderRoundingModeRTZFloat32 = shaderRoundingModeRTZFloat32;
            this.shaderRoundingModeRTZFloat64 = shaderRoundingModeRTZFloat64;
        }
    }
    /// <summary><b>[requires: VK_KHR_shader_float_controls]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFloatControlsPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFloatControlsPropertiesKHR
    {
        public VkPhysicalDeviceFloatControlsPropertiesKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceHostQueryResetFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceHostQueryResetFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceHostQueryResetFeatures;
        public void* pNext;
        public int hostQueryReset;
        public VkPhysicalDeviceHostQueryResetFeatures() { }
        public VkPhysicalDeviceHostQueryResetFeatures(VkStructureType sType, void* pNext, int hostQueryReset)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.hostQueryReset = hostQueryReset;
        }
    }
    /// <summary><b>[requires: VK_EXT_host_query_reset]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceHostQueryResetFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceHostQueryResetFeaturesEXT
    {
        public VkPhysicalDeviceHostQueryResetFeaturesEXT() { }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkNativeBufferUsage2ANDROID.html" /></remarks>
    public unsafe struct VkNativeBufferUsage2ANDROID
    {
        public ulong consumer;
        public ulong producer;
        public VkNativeBufferUsage2ANDROID() { }
        public VkNativeBufferUsage2ANDROID(ulong consumer, ulong producer)
        {
            this.consumer = consumer;
            this.producer = producer;
        }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkNativeBufferANDROID.html" /></remarks>
    public unsafe struct VkNativeBufferANDROID
    {
        public VkStructureType sType;
        public void* pNext;
        public void* handle;
        public int stride;
        public int format;
        public int usage;
        public VkNativeBufferUsage2ANDROID usage2;
        public VkNativeBufferANDROID() { }
        public VkNativeBufferANDROID(VkStructureType sType, void* pNext, void* handle, int stride, int format, int usage, VkNativeBufferUsage2ANDROID usage2)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handle = handle;
            this.stride = stride;
            this.format = format;
            this.usage = usage;
            this.usage2 = usage2;
        }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSwapchainImageCreateInfoANDROID.html" /></remarks>
    public unsafe struct VkSwapchainImageCreateInfoANDROID
    {
        public VkStructureType sType;
        public void* pNext;
        public VkSwapchainImageUsageFlagBitsANDROID usage;
        public VkSwapchainImageCreateInfoANDROID() { }
        public VkSwapchainImageCreateInfoANDROID(VkStructureType sType, void* pNext, VkSwapchainImageUsageFlagBitsANDROID usage)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.usage = usage;
        }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePresentationPropertiesANDROID.html" /></remarks>
    public unsafe struct VkPhysicalDevicePresentationPropertiesANDROID
    {
        public VkStructureType sType;
        public void* pNext;
        public int sharedImage;
        public VkPhysicalDevicePresentationPropertiesANDROID() { }
        public VkPhysicalDevicePresentationPropertiesANDROID(VkStructureType sType, void* pNext, int sharedImage)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.sharedImage = sharedImage;
        }
    }
    /// <summary><b>[requires: VK_AMD_shader_info]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkShaderResourceUsageAMD.html" /></remarks>
    public unsafe struct VkShaderResourceUsageAMD
    {
        public uint numUsedVgprs;
        public uint numUsedSgprs;
        public uint ldsSizePerLocalWorkGroup;
        public nuint ldsUsageSizeInBytes;
        public nuint scratchMemUsageInBytes;
        public VkShaderResourceUsageAMD() { }
        public VkShaderResourceUsageAMD(uint numUsedVgprs, uint numUsedSgprs, uint ldsSizePerLocalWorkGroup, nuint ldsUsageSizeInBytes, nuint scratchMemUsageInBytes)
        {
            this.numUsedVgprs = numUsedVgprs;
            this.numUsedSgprs = numUsedSgprs;
            this.ldsSizePerLocalWorkGroup = ldsSizePerLocalWorkGroup;
            this.ldsUsageSizeInBytes = ldsUsageSizeInBytes;
            this.scratchMemUsageInBytes = scratchMemUsageInBytes;
        }
    }
    /// <summary><b>[requires: VK_AMD_shader_info]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkShaderStatisticsInfoAMD.html" /></remarks>
    public unsafe struct VkShaderStatisticsInfoAMD
    {
        public VkShaderStageFlagBits shaderStageMask;
        public VkShaderResourceUsageAMD resourceUsage;
        public uint numPhysicalVgprs;
        public uint numPhysicalSgprs;
        public uint numAvailableVgprs;
        public uint numAvailableSgprs;
        public fixed uint computeWorkGroupSize[3];
        public VkShaderStatisticsInfoAMD() { }
    }
    /// <summary><b>[requires: VK_KHR_global_priority]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceQueueGlobalPriorityCreateInfoKHR.html" /></remarks>
    public unsafe struct VkDeviceQueueGlobalPriorityCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceQueueGlobalPriorityCreateInfoKhr;
        public void* pNext;
        public VkQueueGlobalPriorityKHR globalPriority;
        public VkDeviceQueueGlobalPriorityCreateInfoKHR() { }
        public VkDeviceQueueGlobalPriorityCreateInfoKHR(VkStructureType sType, void* pNext, VkQueueGlobalPriorityKHR globalPriority)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.globalPriority = globalPriority;
        }
    }
    /// <summary><b>[requires: VK_EXT_global_priority]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceQueueGlobalPriorityCreateInfoEXT.html" /></remarks>
    public unsafe struct VkDeviceQueueGlobalPriorityCreateInfoEXT
    {
        public VkDeviceQueueGlobalPriorityCreateInfoEXT() { }
    }
    /// <summary><b>[requires: VK_KHR_global_priority]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceGlobalPriorityQueryFeaturesKhr;
        public void* pNext;
        public int globalPriorityQuery;
        public VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR() { }
        public VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(VkStructureType sType, void* pNext, int globalPriorityQuery)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.globalPriorityQuery = globalPriorityQuery;
        }
    }
    /// <summary><b>[requires: VK_EXT_global_priority_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT
    {
        public VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT() { }
    }
    /// <summary><b>[requires: VK_KHR_global_priority]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkQueueFamilyGlobalPriorityPropertiesKHR.html" /></remarks>
    public unsafe struct VkQueueFamilyGlobalPriorityPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeQueueFamilyGlobalPriorityPropertiesKhr;
        public void* pNext;
        public uint priorityCount;
        [InlineArray(16)]
        public struct prioritiesInlineArray1
        {
            public VkQueueGlobalPriorityKHR element;
        }
        public prioritiesInlineArray1 priorities;
        public VkQueueFamilyGlobalPriorityPropertiesKHR() { }
    }
    /// <summary><b>[requires: VK_EXT_global_priority_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkQueueFamilyGlobalPriorityPropertiesEXT.html" /></remarks>
    public unsafe struct VkQueueFamilyGlobalPriorityPropertiesEXT
    {
        public VkQueueFamilyGlobalPriorityPropertiesEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_debug_utils]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDebugUtilsObjectNameInfoEXT.html" /></remarks>
    public unsafe struct VkDebugUtilsObjectNameInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDebugUtilsObjectNameInfoExt;
        public void* pNext;
        public VkObjectType objectType;
        public ulong objectHandle;
        public byte* pObjectName;
        public VkDebugUtilsObjectNameInfoEXT() { }
        public VkDebugUtilsObjectNameInfoEXT(VkStructureType sType, void* pNext, VkObjectType objectType, ulong objectHandle, byte* pObjectName)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.objectType = objectType;
            this.objectHandle = objectHandle;
            this.pObjectName = pObjectName;
        }
    }
    /// <summary><b>[requires: VK_EXT_debug_utils]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDebugUtilsObjectTagInfoEXT.html" /></remarks>
    public unsafe struct VkDebugUtilsObjectTagInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDebugUtilsObjectTagInfoExt;
        public void* pNext;
        public VkObjectType objectType;
        public ulong objectHandle;
        public ulong tagName;
        public nuint tagSize;
        public void* pTag;
        public VkDebugUtilsObjectTagInfoEXT() { }
        public VkDebugUtilsObjectTagInfoEXT(VkStructureType sType, void* pNext, VkObjectType objectType, ulong objectHandle, ulong tagName, nuint tagSize, void* pTag)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.objectType = objectType;
            this.objectHandle = objectHandle;
            this.tagName = tagName;
            this.tagSize = tagSize;
            this.pTag = pTag;
        }
    }
    /// <summary><b>[requires: VK_EXT_debug_utils]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDebugUtilsLabelEXT.html" /></remarks>
    public unsafe struct VkDebugUtilsLabelEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDebugUtilsLabelExt;
        public void* pNext;
        public byte* pLabelName;
        public fixed float color[4];
        public VkDebugUtilsLabelEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_debug_utils]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDebugUtilsMessengerCreateInfoEXT.html" /></remarks>
    public unsafe struct VkDebugUtilsMessengerCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDebugUtilsMessengerCreateInfoExt;
        public void* pNext;
        public VkDebugUtilsMessengerCreateFlagsEXT flags;
        public VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity;
        public VkDebugUtilsMessageTypeFlagBitsEXT messageType;
        public delegate* unmanaged[Cdecl]<VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagBitsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void*, int> pfnUserCallback;
        public void* pUserData;
        public VkDebugUtilsMessengerCreateInfoEXT() { }
        public VkDebugUtilsMessengerCreateInfoEXT(VkStructureType sType, void* pNext, VkDebugUtilsMessengerCreateFlagsEXT flags, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagBitsEXT messageType, delegate* unmanaged[Cdecl]<VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagBitsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void*, int> pfnUserCallback, void* pUserData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.messageSeverity = messageSeverity;
            this.messageType = messageType;
            this.pfnUserCallback = pfnUserCallback;
            this.pUserData = pUserData;
        }
    }
    /// <summary><b>[requires: VK_EXT_debug_utils]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDebugUtilsMessengerCallbackDataEXT.html" /></remarks>
    public unsafe struct VkDebugUtilsMessengerCallbackDataEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDebugUtilsMessengerCallbackDataExt;
        public void* pNext;
        public VkDebugUtilsMessengerCallbackDataFlagsEXT flags;
        public byte* pMessageIdName;
        public int messageIdNumber;
        public byte* pMessage;
        public uint queueLabelCount;
        public VkDebugUtilsLabelEXT* pQueueLabels;
        public uint cmdBufLabelCount;
        public VkDebugUtilsLabelEXT* pCmdBufLabels;
        public uint objectCount;
        public VkDebugUtilsObjectNameInfoEXT* pObjects;
        public VkDebugUtilsMessengerCallbackDataEXT() { }
        public VkDebugUtilsMessengerCallbackDataEXT(VkStructureType sType, void* pNext, VkDebugUtilsMessengerCallbackDataFlagsEXT flags, byte* pMessageIdName, int messageIdNumber, byte* pMessage, uint queueLabelCount, VkDebugUtilsLabelEXT* pQueueLabels, uint cmdBufLabelCount, VkDebugUtilsLabelEXT* pCmdBufLabels, uint objectCount, VkDebugUtilsObjectNameInfoEXT* pObjects)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.pMessageIdName = pMessageIdName;
            this.messageIdNumber = messageIdNumber;
            this.pMessage = pMessage;
            this.queueLabelCount = queueLabelCount;
            this.pQueueLabels = pQueueLabels;
            this.cmdBufLabelCount = cmdBufLabelCount;
            this.pCmdBufLabels = pCmdBufLabels;
            this.objectCount = objectCount;
            this.pObjects = pObjects;
        }
    }
    /// <summary><b>[requires: VK_EXT_device_memory_report]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDeviceMemoryReportFeaturesExt;
        public void* pNext;
        public int deviceMemoryReport;
        public VkPhysicalDeviceDeviceMemoryReportFeaturesEXT() { }
        public VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(VkStructureType sType, void* pNext, int deviceMemoryReport)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.deviceMemoryReport = deviceMemoryReport;
        }
    }
    /// <summary><b>[requires: VK_EXT_device_memory_report]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceDeviceMemoryReportCreateInfoEXT.html" /></remarks>
    public unsafe struct VkDeviceDeviceMemoryReportCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceDeviceMemoryReportCreateInfoExt;
        public void* pNext;
        public VkDeviceMemoryReportFlagsEXT flags;
        public delegate* unmanaged[Cdecl]<VkDeviceMemoryReportCallbackDataEXT*, void*, void> pfnUserCallback;
        public void* pUserData;
        public VkDeviceDeviceMemoryReportCreateInfoEXT() { }
        public VkDeviceDeviceMemoryReportCreateInfoEXT(VkStructureType sType, void* pNext, VkDeviceMemoryReportFlagsEXT flags, delegate* unmanaged[Cdecl]<VkDeviceMemoryReportCallbackDataEXT*, void*, void> pfnUserCallback, void* pUserData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.pfnUserCallback = pfnUserCallback;
            this.pUserData = pUserData;
        }
    }
    /// <summary><b>[requires: VK_EXT_device_memory_report]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceMemoryReportCallbackDataEXT.html" /></remarks>
    public unsafe struct VkDeviceMemoryReportCallbackDataEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceMemoryReportCallbackDataExt;
        public void* pNext;
        public VkDeviceMemoryReportFlagsEXT flags;
        public VkDeviceMemoryReportEventTypeEXT type;
        public ulong memoryObjectId;
        public ulong size;
        public VkObjectType objectType;
        public ulong objectHandle;
        public uint heapIndex;
        public VkDeviceMemoryReportCallbackDataEXT() { }
        public VkDeviceMemoryReportCallbackDataEXT(VkStructureType sType, void* pNext, VkDeviceMemoryReportFlagsEXT flags, VkDeviceMemoryReportEventTypeEXT type, ulong memoryObjectId, ulong size, VkObjectType objectType, ulong objectHandle, uint heapIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.type = type;
            this.memoryObjectId = memoryObjectId;
            this.size = size;
            this.objectType = objectType;
            this.objectHandle = objectHandle;
            this.heapIndex = heapIndex;
        }
    }
    /// <summary><b>[requires: VK_EXT_external_memory_host]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportMemoryHostPointerInfoEXT.html" /></remarks>
    public unsafe struct VkImportMemoryHostPointerInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportMemoryHostPointerInfoExt;
        public void* pNext;
        public VkExternalMemoryHandleTypeFlagBits handleType;
        public void* pHostPointer;
        public VkImportMemoryHostPointerInfoEXT() { }
        public VkImportMemoryHostPointerInfoEXT(VkStructureType sType, void* pNext, VkExternalMemoryHandleTypeFlagBits handleType, void* pHostPointer)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.handleType = handleType;
            this.pHostPointer = pHostPointer;
        }
    }
    /// <summary><b>[requires: VK_EXT_external_memory_host]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryHostPointerPropertiesEXT.html" /></remarks>
    public unsafe struct VkMemoryHostPointerPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryHostPointerPropertiesExt;
        public void* pNext;
        public uint memoryTypeBits;
        public VkMemoryHostPointerPropertiesEXT() { }
        public VkMemoryHostPointerPropertiesEXT(VkStructureType sType, void* pNext, uint memoryTypeBits)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memoryTypeBits = memoryTypeBits;
        }
    }
    /// <summary><b>[requires: VK_EXT_external_memory_host]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalMemoryHostPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExternalMemoryHostPropertiesExt;
        public void* pNext;
        public ulong minImportedHostPointerAlignment;
        public VkPhysicalDeviceExternalMemoryHostPropertiesEXT() { }
        public VkPhysicalDeviceExternalMemoryHostPropertiesEXT(VkStructureType sType, void* pNext, ulong minImportedHostPointerAlignment)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.minImportedHostPointerAlignment = minImportedHostPointerAlignment;
        }
    }
    /// <summary><b>[requires: VK_EXT_conservative_rasterization]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceConservativeRasterizationPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceConservativeRasterizationPropertiesExt;
        public void* pNext;
        public float primitiveOverestimationSize;
        public float maxExtraPrimitiveOverestimationSize;
        public float extraPrimitiveOverestimationSizeGranularity;
        public int primitiveUnderestimation;
        public int conservativePointAndLineRasterization;
        public int degenerateTrianglesRasterized;
        public int degenerateLinesRasterized;
        public int fullyCoveredFragmentShaderInputVariable;
        public int conservativeRasterizationPostDepthCoverage;
        public VkPhysicalDeviceConservativeRasterizationPropertiesEXT() { }
        public VkPhysicalDeviceConservativeRasterizationPropertiesEXT(VkStructureType sType, void* pNext, float primitiveOverestimationSize, float maxExtraPrimitiveOverestimationSize, float extraPrimitiveOverestimationSizeGranularity, int primitiveUnderestimation, int conservativePointAndLineRasterization, int degenerateTrianglesRasterized, int degenerateLinesRasterized, int fullyCoveredFragmentShaderInputVariable, int conservativeRasterizationPostDepthCoverage)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.primitiveOverestimationSize = primitiveOverestimationSize;
            this.maxExtraPrimitiveOverestimationSize = maxExtraPrimitiveOverestimationSize;
            this.extraPrimitiveOverestimationSizeGranularity = extraPrimitiveOverestimationSizeGranularity;
            this.primitiveUnderestimation = primitiveUnderestimation;
            this.conservativePointAndLineRasterization = conservativePointAndLineRasterization;
            this.degenerateTrianglesRasterized = degenerateTrianglesRasterized;
            this.degenerateLinesRasterized = degenerateLinesRasterized;
            this.fullyCoveredFragmentShaderInputVariable = fullyCoveredFragmentShaderInputVariable;
            this.conservativeRasterizationPostDepthCoverage = conservativeRasterizationPostDepthCoverage;
        }
    }
    /// <summary><b>[requires: VK_KHR_calibrated_timestamps]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCalibratedTimestampInfoKHR.html" /></remarks>
    public unsafe struct VkCalibratedTimestampInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeCalibratedTimestampInfoKhr;
        public void* pNext;
        public VkTimeDomainKHR timeDomain;
        public VkCalibratedTimestampInfoKHR() { }
        public VkCalibratedTimestampInfoKHR(VkStructureType sType, void* pNext, VkTimeDomainKHR timeDomain)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.timeDomain = timeDomain;
        }
    }
    /// <summary><b>[requires: VK_EXT_calibrated_timestamps]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCalibratedTimestampInfoEXT.html" /></remarks>
    public unsafe struct VkCalibratedTimestampInfoEXT
    {
        public VkCalibratedTimestampInfoEXT() { }
    }
    /// <summary><b>[requires: VK_AMD_shader_core_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderCorePropertiesAMD
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderCorePropertiesAmd;
        public void* pNext;
        public uint shaderEngineCount;
        public uint shaderArraysPerEngineCount;
        public uint computeUnitsPerShaderArray;
        public uint simdPerComputeUnit;
        public uint wavefrontsPerSimd;
        public uint wavefrontSize;
        public uint sgprsPerSimd;
        public uint minSgprAllocation;
        public uint maxSgprAllocation;
        public uint sgprAllocationGranularity;
        public uint vgprsPerSimd;
        public uint minVgprAllocation;
        public uint maxVgprAllocation;
        public uint vgprAllocationGranularity;
        public VkPhysicalDeviceShaderCorePropertiesAMD() { }
        public VkPhysicalDeviceShaderCorePropertiesAMD(VkStructureType sType, void* pNext, uint shaderEngineCount, uint shaderArraysPerEngineCount, uint computeUnitsPerShaderArray, uint simdPerComputeUnit, uint wavefrontsPerSimd, uint wavefrontSize, uint sgprsPerSimd, uint minSgprAllocation, uint maxSgprAllocation, uint sgprAllocationGranularity, uint vgprsPerSimd, uint minVgprAllocation, uint maxVgprAllocation, uint vgprAllocationGranularity)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderEngineCount = shaderEngineCount;
            this.shaderArraysPerEngineCount = shaderArraysPerEngineCount;
            this.computeUnitsPerShaderArray = computeUnitsPerShaderArray;
            this.simdPerComputeUnit = simdPerComputeUnit;
            this.wavefrontsPerSimd = wavefrontsPerSimd;
            this.wavefrontSize = wavefrontSize;
            this.sgprsPerSimd = sgprsPerSimd;
            this.minSgprAllocation = minSgprAllocation;
            this.maxSgprAllocation = maxSgprAllocation;
            this.sgprAllocationGranularity = sgprAllocationGranularity;
            this.vgprsPerSimd = vgprsPerSimd;
            this.minVgprAllocation = minVgprAllocation;
            this.maxVgprAllocation = maxVgprAllocation;
            this.vgprAllocationGranularity = vgprAllocationGranularity;
        }
    }
    /// <summary><b>[requires: VK_AMD_shader_core_properties2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCoreProperties2AMD.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderCoreProperties2AMD
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderCoreProperties2Amd;
        public void* pNext;
        public VkShaderCorePropertiesFlagBitsAMD shaderCoreFeatures;
        public uint activeComputeUnitCount;
        public VkPhysicalDeviceShaderCoreProperties2AMD() { }
        public VkPhysicalDeviceShaderCoreProperties2AMD(VkStructureType sType, void* pNext, VkShaderCorePropertiesFlagBitsAMD shaderCoreFeatures, uint activeComputeUnitCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderCoreFeatures = shaderCoreFeatures;
            this.activeComputeUnitCount = activeComputeUnitCount;
        }
    }
    /// <summary><b>[requires: VK_EXT_conservative_rasterization]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineRasterizationConservativeStateCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineRasterizationConservativeStateCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineRasterizationConservativeStateCreateInfoExt;
        public void* pNext;
        public VkPipelineRasterizationConservativeStateCreateFlagsEXT flags;
        public VkConservativeRasterizationModeEXT conservativeRasterizationMode;
        public float extraPrimitiveOverestimationSize;
        public VkPipelineRasterizationConservativeStateCreateInfoEXT() { }
        public VkPipelineRasterizationConservativeStateCreateInfoEXT(VkStructureType sType, void* pNext, VkPipelineRasterizationConservativeStateCreateFlagsEXT flags, VkConservativeRasterizationModeEXT conservativeRasterizationMode, float extraPrimitiveOverestimationSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.conservativeRasterizationMode = conservativeRasterizationMode;
            this.extraPrimitiveOverestimationSize = extraPrimitiveOverestimationSize;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorIndexingFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDescriptorIndexingFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDescriptorIndexingFeatures;
        public void* pNext;
        public int shaderInputAttachmentArrayDynamicIndexing;
        public int shaderUniformTexelBufferArrayDynamicIndexing;
        public int shaderStorageTexelBufferArrayDynamicIndexing;
        public int shaderUniformBufferArrayNonUniformIndexing;
        public int shaderSampledImageArrayNonUniformIndexing;
        public int shaderStorageBufferArrayNonUniformIndexing;
        public int shaderStorageImageArrayNonUniformIndexing;
        public int shaderInputAttachmentArrayNonUniformIndexing;
        public int shaderUniformTexelBufferArrayNonUniformIndexing;
        public int shaderStorageTexelBufferArrayNonUniformIndexing;
        public int descriptorBindingUniformBufferUpdateAfterBind;
        public int descriptorBindingSampledImageUpdateAfterBind;
        public int descriptorBindingStorageImageUpdateAfterBind;
        public int descriptorBindingStorageBufferUpdateAfterBind;
        public int descriptorBindingUniformTexelBufferUpdateAfterBind;
        public int descriptorBindingStorageTexelBufferUpdateAfterBind;
        public int descriptorBindingUpdateUnusedWhilePending;
        public int descriptorBindingPartiallyBound;
        public int descriptorBindingVariableDescriptorCount;
        public int runtimeDescriptorArray;
        public VkPhysicalDeviceDescriptorIndexingFeatures() { }
        public VkPhysicalDeviceDescriptorIndexingFeatures(VkStructureType sType, void* pNext, int shaderInputAttachmentArrayDynamicIndexing, int shaderUniformTexelBufferArrayDynamicIndexing, int shaderStorageTexelBufferArrayDynamicIndexing, int shaderUniformBufferArrayNonUniformIndexing, int shaderSampledImageArrayNonUniformIndexing, int shaderStorageBufferArrayNonUniformIndexing, int shaderStorageImageArrayNonUniformIndexing, int shaderInputAttachmentArrayNonUniformIndexing, int shaderUniformTexelBufferArrayNonUniformIndexing, int shaderStorageTexelBufferArrayNonUniformIndexing, int descriptorBindingUniformBufferUpdateAfterBind, int descriptorBindingSampledImageUpdateAfterBind, int descriptorBindingStorageImageUpdateAfterBind, int descriptorBindingStorageBufferUpdateAfterBind, int descriptorBindingUniformTexelBufferUpdateAfterBind, int descriptorBindingStorageTexelBufferUpdateAfterBind, int descriptorBindingUpdateUnusedWhilePending, int descriptorBindingPartiallyBound, int descriptorBindingVariableDescriptorCount, int runtimeDescriptorArray)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderInputAttachmentArrayDynamicIndexing = shaderInputAttachmentArrayDynamicIndexing;
            this.shaderUniformTexelBufferArrayDynamicIndexing = shaderUniformTexelBufferArrayDynamicIndexing;
            this.shaderStorageTexelBufferArrayDynamicIndexing = shaderStorageTexelBufferArrayDynamicIndexing;
            this.shaderUniformBufferArrayNonUniformIndexing = shaderUniformBufferArrayNonUniformIndexing;
            this.shaderSampledImageArrayNonUniformIndexing = shaderSampledImageArrayNonUniformIndexing;
            this.shaderStorageBufferArrayNonUniformIndexing = shaderStorageBufferArrayNonUniformIndexing;
            this.shaderStorageImageArrayNonUniformIndexing = shaderStorageImageArrayNonUniformIndexing;
            this.shaderInputAttachmentArrayNonUniformIndexing = shaderInputAttachmentArrayNonUniformIndexing;
            this.shaderUniformTexelBufferArrayNonUniformIndexing = shaderUniformTexelBufferArrayNonUniformIndexing;
            this.shaderStorageTexelBufferArrayNonUniformIndexing = shaderStorageTexelBufferArrayNonUniformIndexing;
            this.descriptorBindingUniformBufferUpdateAfterBind = descriptorBindingUniformBufferUpdateAfterBind;
            this.descriptorBindingSampledImageUpdateAfterBind = descriptorBindingSampledImageUpdateAfterBind;
            this.descriptorBindingStorageImageUpdateAfterBind = descriptorBindingStorageImageUpdateAfterBind;
            this.descriptorBindingStorageBufferUpdateAfterBind = descriptorBindingStorageBufferUpdateAfterBind;
            this.descriptorBindingUniformTexelBufferUpdateAfterBind = descriptorBindingUniformTexelBufferUpdateAfterBind;
            this.descriptorBindingStorageTexelBufferUpdateAfterBind = descriptorBindingStorageTexelBufferUpdateAfterBind;
            this.descriptorBindingUpdateUnusedWhilePending = descriptorBindingUpdateUnusedWhilePending;
            this.descriptorBindingPartiallyBound = descriptorBindingPartiallyBound;
            this.descriptorBindingVariableDescriptorCount = descriptorBindingVariableDescriptorCount;
            this.runtimeDescriptorArray = runtimeDescriptorArray;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_indexing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorIndexingFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDescriptorIndexingFeaturesEXT
    {
        public VkPhysicalDeviceDescriptorIndexingFeaturesEXT() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorIndexingProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDescriptorIndexingProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDescriptorIndexingProperties;
        public void* pNext;
        public uint maxUpdateAfterBindDescriptorsInAllPools;
        public int shaderUniformBufferArrayNonUniformIndexingNative;
        public int shaderSampledImageArrayNonUniformIndexingNative;
        public int shaderStorageBufferArrayNonUniformIndexingNative;
        public int shaderStorageImageArrayNonUniformIndexingNative;
        public int shaderInputAttachmentArrayNonUniformIndexingNative;
        public int robustBufferAccessUpdateAfterBind;
        public int quadDivergentImplicitLod;
        public uint maxPerStageDescriptorUpdateAfterBindSamplers;
        public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
        public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
        public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
        public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
        public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
        public uint maxPerStageUpdateAfterBindResources;
        public uint maxDescriptorSetUpdateAfterBindSamplers;
        public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
        public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
        public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
        public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
        public uint maxDescriptorSetUpdateAfterBindSampledImages;
        public uint maxDescriptorSetUpdateAfterBindStorageImages;
        public uint maxDescriptorSetUpdateAfterBindInputAttachments;
        public VkPhysicalDeviceDescriptorIndexingProperties() { }
        public VkPhysicalDeviceDescriptorIndexingProperties(VkStructureType sType, void* pNext, uint maxUpdateAfterBindDescriptorsInAllPools, int shaderUniformBufferArrayNonUniformIndexingNative, int shaderSampledImageArrayNonUniformIndexingNative, int shaderStorageBufferArrayNonUniformIndexingNative, int shaderStorageImageArrayNonUniformIndexingNative, int shaderInputAttachmentArrayNonUniformIndexingNative, int robustBufferAccessUpdateAfterBind, int quadDivergentImplicitLod, uint maxPerStageDescriptorUpdateAfterBindSamplers, uint maxPerStageDescriptorUpdateAfterBindUniformBuffers, uint maxPerStageDescriptorUpdateAfterBindStorageBuffers, uint maxPerStageDescriptorUpdateAfterBindSampledImages, uint maxPerStageDescriptorUpdateAfterBindStorageImages, uint maxPerStageDescriptorUpdateAfterBindInputAttachments, uint maxPerStageUpdateAfterBindResources, uint maxDescriptorSetUpdateAfterBindSamplers, uint maxDescriptorSetUpdateAfterBindUniformBuffers, uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic, uint maxDescriptorSetUpdateAfterBindStorageBuffers, uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic, uint maxDescriptorSetUpdateAfterBindSampledImages, uint maxDescriptorSetUpdateAfterBindStorageImages, uint maxDescriptorSetUpdateAfterBindInputAttachments)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxUpdateAfterBindDescriptorsInAllPools = maxUpdateAfterBindDescriptorsInAllPools;
            this.shaderUniformBufferArrayNonUniformIndexingNative = shaderUniformBufferArrayNonUniformIndexingNative;
            this.shaderSampledImageArrayNonUniformIndexingNative = shaderSampledImageArrayNonUniformIndexingNative;
            this.shaderStorageBufferArrayNonUniformIndexingNative = shaderStorageBufferArrayNonUniformIndexingNative;
            this.shaderStorageImageArrayNonUniformIndexingNative = shaderStorageImageArrayNonUniformIndexingNative;
            this.shaderInputAttachmentArrayNonUniformIndexingNative = shaderInputAttachmentArrayNonUniformIndexingNative;
            this.robustBufferAccessUpdateAfterBind = robustBufferAccessUpdateAfterBind;
            this.quadDivergentImplicitLod = quadDivergentImplicitLod;
            this.maxPerStageDescriptorUpdateAfterBindSamplers = maxPerStageDescriptorUpdateAfterBindSamplers;
            this.maxPerStageDescriptorUpdateAfterBindUniformBuffers = maxPerStageDescriptorUpdateAfterBindUniformBuffers;
            this.maxPerStageDescriptorUpdateAfterBindStorageBuffers = maxPerStageDescriptorUpdateAfterBindStorageBuffers;
            this.maxPerStageDescriptorUpdateAfterBindSampledImages = maxPerStageDescriptorUpdateAfterBindSampledImages;
            this.maxPerStageDescriptorUpdateAfterBindStorageImages = maxPerStageDescriptorUpdateAfterBindStorageImages;
            this.maxPerStageDescriptorUpdateAfterBindInputAttachments = maxPerStageDescriptorUpdateAfterBindInputAttachments;
            this.maxPerStageUpdateAfterBindResources = maxPerStageUpdateAfterBindResources;
            this.maxDescriptorSetUpdateAfterBindSamplers = maxDescriptorSetUpdateAfterBindSamplers;
            this.maxDescriptorSetUpdateAfterBindUniformBuffers = maxDescriptorSetUpdateAfterBindUniformBuffers;
            this.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
            this.maxDescriptorSetUpdateAfterBindStorageBuffers = maxDescriptorSetUpdateAfterBindStorageBuffers;
            this.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
            this.maxDescriptorSetUpdateAfterBindSampledImages = maxDescriptorSetUpdateAfterBindSampledImages;
            this.maxDescriptorSetUpdateAfterBindStorageImages = maxDescriptorSetUpdateAfterBindStorageImages;
            this.maxDescriptorSetUpdateAfterBindInputAttachments = maxDescriptorSetUpdateAfterBindInputAttachments;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_indexing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorIndexingPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDescriptorIndexingPropertiesEXT
    {
        public VkPhysicalDeviceDescriptorIndexingPropertiesEXT() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetLayoutBindingFlagsCreateInfo.html" /></remarks>
    public unsafe struct VkDescriptorSetLayoutBindingFlagsCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDescriptorSetLayoutBindingFlagsCreateInfo;
        public void* pNext;
        public uint bindingCount;
        public VkDescriptorBindingFlagBits* pBindingFlags;
        public VkDescriptorSetLayoutBindingFlagsCreateInfo() { }
        public VkDescriptorSetLayoutBindingFlagsCreateInfo(VkStructureType sType, void* pNext, uint bindingCount, VkDescriptorBindingFlagBits* pBindingFlags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.bindingCount = bindingCount;
            this.pBindingFlags = pBindingFlags;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_indexing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.html" /></remarks>
    public unsafe struct VkDescriptorSetLayoutBindingFlagsCreateInfoEXT
    {
        public VkDescriptorSetLayoutBindingFlagsCreateInfoEXT() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetVariableDescriptorCountAllocateInfo.html" /></remarks>
    public unsafe struct VkDescriptorSetVariableDescriptorCountAllocateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDescriptorSetVariableDescriptorCountAllocateInfo;
        public void* pNext;
        public uint descriptorSetCount;
        public uint* pDescriptorCounts;
        public VkDescriptorSetVariableDescriptorCountAllocateInfo() { }
        public VkDescriptorSetVariableDescriptorCountAllocateInfo(VkStructureType sType, void* pNext, uint descriptorSetCount, uint* pDescriptorCounts)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.descriptorSetCount = descriptorSetCount;
            this.pDescriptorCounts = pDescriptorCounts;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_indexing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.html" /></remarks>
    public unsafe struct VkDescriptorSetVariableDescriptorCountAllocateInfoEXT
    {
        public VkDescriptorSetVariableDescriptorCountAllocateInfoEXT() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetVariableDescriptorCountLayoutSupport.html" /></remarks>
    public unsafe struct VkDescriptorSetVariableDescriptorCountLayoutSupport
    {
        public VkStructureType sType = VkStructureType.StructureTypeDescriptorSetVariableDescriptorCountLayoutSupport;
        public void* pNext;
        public uint maxVariableDescriptorCount;
        public VkDescriptorSetVariableDescriptorCountLayoutSupport() { }
        public VkDescriptorSetVariableDescriptorCountLayoutSupport(VkStructureType sType, void* pNext, uint maxVariableDescriptorCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxVariableDescriptorCount = maxVariableDescriptorCount;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_indexing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.html" /></remarks>
    public unsafe struct VkDescriptorSetVariableDescriptorCountLayoutSupportEXT
    {
        public VkDescriptorSetVariableDescriptorCountLayoutSupportEXT() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAttachmentDescription2.html" /></remarks>
    public unsafe struct VkAttachmentDescription2
    {
        public VkStructureType sType = VkStructureType.StructureTypeAttachmentDescription2;
        public void* pNext;
        public VkAttachmentDescriptionFlagBits flags;
        public VkFormat format;
        public VkSampleCountFlagBits samples;
        public VkAttachmentLoadOp loadOp;
        public VkAttachmentStoreOp storeOp;
        public VkAttachmentLoadOp stencilLoadOp;
        public VkAttachmentStoreOp stencilStoreOp;
        public VkImageLayout initialLayout;
        public VkImageLayout finalLayout;
        public VkAttachmentDescription2() { }
        public VkAttachmentDescription2(VkStructureType sType, void* pNext, VkAttachmentDescriptionFlagBits flags, VkFormat format, VkSampleCountFlagBits samples, VkAttachmentLoadOp loadOp, VkAttachmentStoreOp storeOp, VkAttachmentLoadOp stencilLoadOp, VkAttachmentStoreOp stencilStoreOp, VkImageLayout initialLayout, VkImageLayout finalLayout)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.format = format;
            this.samples = samples;
            this.loadOp = loadOp;
            this.storeOp = storeOp;
            this.stencilLoadOp = stencilLoadOp;
            this.stencilStoreOp = stencilStoreOp;
            this.initialLayout = initialLayout;
            this.finalLayout = finalLayout;
        }
    }
    /// <summary><b>[requires: VK_KHR_create_renderpass2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAttachmentDescription2KHR.html" /></remarks>
    public unsafe struct VkAttachmentDescription2KHR
    {
        public VkAttachmentDescription2KHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAttachmentReference2.html" /></remarks>
    public unsafe struct VkAttachmentReference2
    {
        public VkStructureType sType = VkStructureType.StructureTypeAttachmentReference2;
        public void* pNext;
        public uint attachment;
        public VkImageLayout layout;
        public VkImageAspectFlagBits aspectMask;
        public VkAttachmentReference2() { }
        public VkAttachmentReference2(VkStructureType sType, void* pNext, uint attachment, VkImageLayout layout, VkImageAspectFlagBits aspectMask)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.attachment = attachment;
            this.layout = layout;
            this.aspectMask = aspectMask;
        }
    }
    /// <summary><b>[requires: VK_KHR_create_renderpass2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAttachmentReference2KHR.html" /></remarks>
    public unsafe struct VkAttachmentReference2KHR
    {
        public VkAttachmentReference2KHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassDescription2.html" /></remarks>
    public unsafe struct VkSubpassDescription2
    {
        public VkStructureType sType = VkStructureType.StructureTypeSubpassDescription2;
        public void* pNext;
        public VkSubpassDescriptionFlagBits flags;
        public VkPipelineBindPoint pipelineBindPoint;
        public uint viewMask;
        public uint inputAttachmentCount;
        public VkAttachmentReference2* pInputAttachments;
        public uint colorAttachmentCount;
        public VkAttachmentReference2* pColorAttachments;
        public VkAttachmentReference2* pResolveAttachments;
        public VkAttachmentReference2* pDepthStencilAttachment;
        public uint preserveAttachmentCount;
        public uint* pPreserveAttachments;
        public VkSubpassDescription2() { }
        public VkSubpassDescription2(VkStructureType sType, void* pNext, VkSubpassDescriptionFlagBits flags, VkPipelineBindPoint pipelineBindPoint, uint viewMask, uint inputAttachmentCount, VkAttachmentReference2* pInputAttachments, uint colorAttachmentCount, VkAttachmentReference2* pColorAttachments, VkAttachmentReference2* pResolveAttachments, VkAttachmentReference2* pDepthStencilAttachment, uint preserveAttachmentCount, uint* pPreserveAttachments)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.pipelineBindPoint = pipelineBindPoint;
            this.viewMask = viewMask;
            this.inputAttachmentCount = inputAttachmentCount;
            this.pInputAttachments = pInputAttachments;
            this.colorAttachmentCount = colorAttachmentCount;
            this.pColorAttachments = pColorAttachments;
            this.pResolveAttachments = pResolveAttachments;
            this.pDepthStencilAttachment = pDepthStencilAttachment;
            this.preserveAttachmentCount = preserveAttachmentCount;
            this.pPreserveAttachments = pPreserveAttachments;
        }
    }
    /// <summary><b>[requires: VK_KHR_create_renderpass2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassDescription2KHR.html" /></remarks>
    public unsafe struct VkSubpassDescription2KHR
    {
        public VkSubpassDescription2KHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassDependency2.html" /></remarks>
    public unsafe struct VkSubpassDependency2
    {
        public VkStructureType sType = VkStructureType.StructureTypeSubpassDependency2;
        public void* pNext;
        public uint srcSubpass;
        public uint dstSubpass;
        public VkPipelineStageFlagBits srcStageMask;
        public VkPipelineStageFlagBits dstStageMask;
        public VkAccessFlagBits srcAccessMask;
        public VkAccessFlagBits dstAccessMask;
        public VkDependencyFlagBits dependencyFlags;
        public int viewOffset;
        public VkSubpassDependency2() { }
        public VkSubpassDependency2(VkStructureType sType, void* pNext, uint srcSubpass, uint dstSubpass, VkPipelineStageFlagBits srcStageMask, VkPipelineStageFlagBits dstStageMask, VkAccessFlagBits srcAccessMask, VkAccessFlagBits dstAccessMask, VkDependencyFlagBits dependencyFlags, int viewOffset)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcSubpass = srcSubpass;
            this.dstSubpass = dstSubpass;
            this.srcStageMask = srcStageMask;
            this.dstStageMask = dstStageMask;
            this.srcAccessMask = srcAccessMask;
            this.dstAccessMask = dstAccessMask;
            this.dependencyFlags = dependencyFlags;
            this.viewOffset = viewOffset;
        }
    }
    /// <summary><b>[requires: VK_KHR_create_renderpass2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassDependency2KHR.html" /></remarks>
    public unsafe struct VkSubpassDependency2KHR
    {
        public VkSubpassDependency2KHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassCreateInfo2.html" /></remarks>
    public unsafe struct VkRenderPassCreateInfo2
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderPassCreateInfo2;
        public void* pNext;
        public VkRenderPassCreateFlagBits flags;
        public uint attachmentCount;
        public VkAttachmentDescription2* pAttachments;
        public uint subpassCount;
        public VkSubpassDescription2* pSubpasses;
        public uint dependencyCount;
        public VkSubpassDependency2* pDependencies;
        public uint correlatedViewMaskCount;
        public uint* pCorrelatedViewMasks;
        public VkRenderPassCreateInfo2() { }
        public VkRenderPassCreateInfo2(VkStructureType sType, void* pNext, VkRenderPassCreateFlagBits flags, uint attachmentCount, VkAttachmentDescription2* pAttachments, uint subpassCount, VkSubpassDescription2* pSubpasses, uint dependencyCount, VkSubpassDependency2* pDependencies, uint correlatedViewMaskCount, uint* pCorrelatedViewMasks)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.attachmentCount = attachmentCount;
            this.pAttachments = pAttachments;
            this.subpassCount = subpassCount;
            this.pSubpasses = pSubpasses;
            this.dependencyCount = dependencyCount;
            this.pDependencies = pDependencies;
            this.correlatedViewMaskCount = correlatedViewMaskCount;
            this.pCorrelatedViewMasks = pCorrelatedViewMasks;
        }
    }
    /// <summary><b>[requires: VK_KHR_create_renderpass2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassCreateInfo2KHR.html" /></remarks>
    public unsafe struct VkRenderPassCreateInfo2KHR
    {
        public VkRenderPassCreateInfo2KHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassBeginInfo.html" /></remarks>
    public unsafe struct VkSubpassBeginInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeSubpassBeginInfo;
        public void* pNext;
        public VkSubpassContents contents;
        public VkSubpassBeginInfo() { }
        public VkSubpassBeginInfo(VkStructureType sType, void* pNext, VkSubpassContents contents)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.contents = contents;
        }
    }
    /// <summary><b>[requires: VK_KHR_create_renderpass2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassBeginInfoKHR.html" /></remarks>
    public unsafe struct VkSubpassBeginInfoKHR
    {
        public VkSubpassBeginInfoKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassEndInfo.html" /></remarks>
    public unsafe struct VkSubpassEndInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeSubpassEndInfo;
        public void* pNext;
        public VkSubpassEndInfo() { }
        public VkSubpassEndInfo(VkStructureType sType, void* pNext)
        {
            this.sType = sType;
            this.pNext = pNext;
        }
    }
    /// <summary><b>[requires: VK_KHR_create_renderpass2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassEndInfoKHR.html" /></remarks>
    public unsafe struct VkSubpassEndInfoKHR
    {
        public VkSubpassEndInfoKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTimelineSemaphoreFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceTimelineSemaphoreFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceTimelineSemaphoreFeatures;
        public void* pNext;
        public int timelineSemaphore;
        public VkPhysicalDeviceTimelineSemaphoreFeatures() { }
        public VkPhysicalDeviceTimelineSemaphoreFeatures(VkStructureType sType, void* pNext, int timelineSemaphore)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.timelineSemaphore = timelineSemaphore;
        }
    }
    /// <summary><b>[requires: VK_KHR_timeline_semaphore]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTimelineSemaphoreFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceTimelineSemaphoreFeaturesKHR
    {
        public VkPhysicalDeviceTimelineSemaphoreFeaturesKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTimelineSemaphoreProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceTimelineSemaphoreProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceTimelineSemaphoreProperties;
        public void* pNext;
        public ulong maxTimelineSemaphoreValueDifference;
        public VkPhysicalDeviceTimelineSemaphoreProperties() { }
        public VkPhysicalDeviceTimelineSemaphoreProperties(VkStructureType sType, void* pNext, ulong maxTimelineSemaphoreValueDifference)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxTimelineSemaphoreValueDifference = maxTimelineSemaphoreValueDifference;
        }
    }
    /// <summary><b>[requires: VK_KHR_timeline_semaphore]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTimelineSemaphorePropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceTimelineSemaphorePropertiesKHR
    {
        public VkPhysicalDeviceTimelineSemaphorePropertiesKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSemaphoreTypeCreateInfo.html" /></remarks>
    public unsafe struct VkSemaphoreTypeCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeSemaphoreTypeCreateInfo;
        public void* pNext;
        public VkSemaphoreType semaphoreType;
        public ulong initialValue;
        public VkSemaphoreTypeCreateInfo() { }
        public VkSemaphoreTypeCreateInfo(VkStructureType sType, void* pNext, VkSemaphoreType semaphoreType, ulong initialValue)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.semaphoreType = semaphoreType;
            this.initialValue = initialValue;
        }
    }
    /// <summary><b>[requires: VK_KHR_timeline_semaphore]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSemaphoreTypeCreateInfoKHR.html" /></remarks>
    public unsafe struct VkSemaphoreTypeCreateInfoKHR
    {
        public VkSemaphoreTypeCreateInfoKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkTimelineSemaphoreSubmitInfo.html" /></remarks>
    public unsafe struct VkTimelineSemaphoreSubmitInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeTimelineSemaphoreSubmitInfo;
        public void* pNext;
        public uint waitSemaphoreValueCount;
        public ulong* pWaitSemaphoreValues;
        public uint signalSemaphoreValueCount;
        public ulong* pSignalSemaphoreValues;
        public VkTimelineSemaphoreSubmitInfo() { }
        public VkTimelineSemaphoreSubmitInfo(VkStructureType sType, void* pNext, uint waitSemaphoreValueCount, ulong* pWaitSemaphoreValues, uint signalSemaphoreValueCount, ulong* pSignalSemaphoreValues)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.waitSemaphoreValueCount = waitSemaphoreValueCount;
            this.pWaitSemaphoreValues = pWaitSemaphoreValues;
            this.signalSemaphoreValueCount = signalSemaphoreValueCount;
            this.pSignalSemaphoreValues = pSignalSemaphoreValues;
        }
    }
    /// <summary><b>[requires: VK_KHR_timeline_semaphore]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkTimelineSemaphoreSubmitInfoKHR.html" /></remarks>
    public unsafe struct VkTimelineSemaphoreSubmitInfoKHR
    {
        public VkTimelineSemaphoreSubmitInfoKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSemaphoreWaitInfo.html" /></remarks>
    public unsafe struct VkSemaphoreWaitInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeSemaphoreWaitInfo;
        public void* pNext;
        public VkSemaphoreWaitFlagBits flags;
        public uint semaphoreCount;
        public VkSemaphore* pSemaphores;
        public ulong* pValues;
        public VkSemaphoreWaitInfo() { }
        public VkSemaphoreWaitInfo(VkStructureType sType, void* pNext, VkSemaphoreWaitFlagBits flags, uint semaphoreCount, VkSemaphore* pSemaphores, ulong* pValues)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.semaphoreCount = semaphoreCount;
            this.pSemaphores = pSemaphores;
            this.pValues = pValues;
        }
    }
    /// <summary><b>[requires: VK_KHR_timeline_semaphore]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSemaphoreWaitInfoKHR.html" /></remarks>
    public unsafe struct VkSemaphoreWaitInfoKHR
    {
        public VkSemaphoreWaitInfoKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSemaphoreSignalInfo.html" /></remarks>
    public unsafe struct VkSemaphoreSignalInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeSemaphoreSignalInfo;
        public void* pNext;
        public VkSemaphore semaphore;
        public ulong value;
        public VkSemaphoreSignalInfo() { }
        public VkSemaphoreSignalInfo(VkStructureType sType, void* pNext, VkSemaphore semaphore, ulong value)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.semaphore = semaphore;
            this.value = value;
        }
    }
    /// <summary><b>[requires: VK_KHR_timeline_semaphore]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSemaphoreSignalInfoKHR.html" /></remarks>
    public unsafe struct VkSemaphoreSignalInfoKHR
    {
        public VkSemaphoreSignalInfoKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_vertex_attribute_divisor]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVertexInputBindingDivisorDescriptionKHR.html" /></remarks>
    public unsafe struct VkVertexInputBindingDivisorDescriptionKHR
    {
        public uint binding;
        public uint divisor;
        public VkVertexInputBindingDivisorDescriptionKHR() { }
        public VkVertexInputBindingDivisorDescriptionKHR(uint binding, uint divisor)
        {
            this.binding = binding;
            this.divisor = divisor;
        }
    }
    /// <summary><b>[requires: VK_EXT_vertex_attribute_divisor]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVertexInputBindingDivisorDescriptionEXT.html" /></remarks>
    public unsafe struct VkVertexInputBindingDivisorDescriptionEXT
    {
        public VkVertexInputBindingDivisorDescriptionEXT() { }
    }
    /// <summary><b>[requires: VK_KHR_vertex_attribute_divisor]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineVertexInputDivisorStateCreateInfoKHR.html" /></remarks>
    public unsafe struct VkPipelineVertexInputDivisorStateCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineVertexInputDivisorStateCreateInfoKhr;
        public void* pNext;
        public uint vertexBindingDivisorCount;
        public VkVertexInputBindingDivisorDescriptionKHR* pVertexBindingDivisors;
        public VkPipelineVertexInputDivisorStateCreateInfoKHR() { }
        public VkPipelineVertexInputDivisorStateCreateInfoKHR(VkStructureType sType, void* pNext, uint vertexBindingDivisorCount, VkVertexInputBindingDivisorDescriptionKHR* pVertexBindingDivisors)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.vertexBindingDivisorCount = vertexBindingDivisorCount;
            this.pVertexBindingDivisors = pVertexBindingDivisors;
        }
    }
    /// <summary><b>[requires: VK_EXT_vertex_attribute_divisor]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineVertexInputDivisorStateCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineVertexInputDivisorStateCreateInfoEXT
    {
        public VkPipelineVertexInputDivisorStateCreateInfoEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_vertex_attribute_divisor]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceVertexAttributeDivisorPropertiesExt;
        public void* pNext;
        public uint maxVertexAttribDivisor;
        public VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT() { }
        public VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(VkStructureType sType, void* pNext, uint maxVertexAttribDivisor)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxVertexAttribDivisor = maxVertexAttribDivisor;
        }
    }
    /// <summary><b>[requires: VK_KHR_vertex_attribute_divisor]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceVertexAttributeDivisorPropertiesKhr;
        public void* pNext;
        public uint maxVertexAttribDivisor;
        public int supportsNonZeroFirstInstance;
        public VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR() { }
        public VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR(VkStructureType sType, void* pNext, uint maxVertexAttribDivisor, int supportsNonZeroFirstInstance)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxVertexAttribDivisor = maxVertexAttribDivisor;
            this.supportsNonZeroFirstInstance = supportsNonZeroFirstInstance;
        }
    }
    /// <summary><b>[requires: VK_EXT_pci_bus_info]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePCIBusInfoPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDevicePCIBusInfoPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePciBusInfoPropertiesExt;
        public void* pNext;
        public uint pciDomain;
        public uint pciBus;
        public uint pciDevice;
        public uint pciFunction;
        public VkPhysicalDevicePCIBusInfoPropertiesEXT() { }
        public VkPhysicalDevicePCIBusInfoPropertiesEXT(VkStructureType sType, void* pNext, uint pciDomain, uint pciBus, uint pciDevice, uint pciFunction)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pciDomain = pciDomain;
            this.pciBus = pciBus;
            this.pciDevice = pciDevice;
            this.pciFunction = pciFunction;
        }
    }
    /// <summary><b>[requires: VK_ANDROID_external_memory_android_hardware_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportAndroidHardwareBufferInfoANDROID.html" /></remarks>
    public unsafe struct VkImportAndroidHardwareBufferInfoANDROID
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportAndroidHardwareBufferInfoAndroid;
        public void* pNext;
        public IntPtr buffer;
        public VkImportAndroidHardwareBufferInfoANDROID() { }
        public VkImportAndroidHardwareBufferInfoANDROID(VkStructureType sType, void* pNext, IntPtr buffer)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.buffer = buffer;
        }
    }
    /// <summary><b>[requires: VK_ANDROID_external_memory_android_hardware_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAndroidHardwareBufferUsageANDROID.html" /></remarks>
    public unsafe struct VkAndroidHardwareBufferUsageANDROID
    {
        public VkStructureType sType = VkStructureType.StructureTypeAndroidHardwareBufferUsageAndroid;
        public void* pNext;
        public ulong androidHardwareBufferUsage;
        public VkAndroidHardwareBufferUsageANDROID() { }
        public VkAndroidHardwareBufferUsageANDROID(VkStructureType sType, void* pNext, ulong androidHardwareBufferUsage)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.androidHardwareBufferUsage = androidHardwareBufferUsage;
        }
    }
    /// <summary><b>[requires: VK_ANDROID_external_memory_android_hardware_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAndroidHardwareBufferPropertiesANDROID.html" /></remarks>
    public unsafe struct VkAndroidHardwareBufferPropertiesANDROID
    {
        public VkStructureType sType = VkStructureType.StructureTypeAndroidHardwareBufferPropertiesAndroid;
        public void* pNext;
        public ulong allocationSize;
        public uint memoryTypeBits;
        public VkAndroidHardwareBufferPropertiesANDROID() { }
        public VkAndroidHardwareBufferPropertiesANDROID(VkStructureType sType, void* pNext, ulong allocationSize, uint memoryTypeBits)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.allocationSize = allocationSize;
            this.memoryTypeBits = memoryTypeBits;
        }
    }
    /// <summary><b>[requires: VK_ANDROID_external_memory_android_hardware_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryGetAndroidHardwareBufferInfoANDROID.html" /></remarks>
    public unsafe struct VkMemoryGetAndroidHardwareBufferInfoANDROID
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryGetAndroidHardwareBufferInfoAndroid;
        public void* pNext;
        public VkDeviceMemory memory;
        public VkMemoryGetAndroidHardwareBufferInfoANDROID() { }
        public VkMemoryGetAndroidHardwareBufferInfoANDROID(VkStructureType sType, void* pNext, VkDeviceMemory memory)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memory = memory;
        }
    }
    /// <summary><b>[requires: VK_ANDROID_external_memory_android_hardware_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAndroidHardwareBufferFormatPropertiesANDROID.html" /></remarks>
    public unsafe struct VkAndroidHardwareBufferFormatPropertiesANDROID
    {
        public VkStructureType sType = VkStructureType.StructureTypeAndroidHardwareBufferFormatPropertiesAndroid;
        public void* pNext;
        public VkFormat format;
        public ulong externalFormat;
        public VkFormatFeatureFlagBits formatFeatures;
        public VkComponentMapping samplerYcbcrConversionComponents;
        public VkSamplerYcbcrModelConversion suggestedYcbcrModel;
        public VkSamplerYcbcrRange suggestedYcbcrRange;
        public VkChromaLocation suggestedXChromaOffset;
        public VkChromaLocation suggestedYChromaOffset;
        public VkAndroidHardwareBufferFormatPropertiesANDROID() { }
        public VkAndroidHardwareBufferFormatPropertiesANDROID(VkStructureType sType, void* pNext, VkFormat format, ulong externalFormat, VkFormatFeatureFlagBits formatFeatures, VkComponentMapping samplerYcbcrConversionComponents, VkSamplerYcbcrModelConversion suggestedYcbcrModel, VkSamplerYcbcrRange suggestedYcbcrRange, VkChromaLocation suggestedXChromaOffset, VkChromaLocation suggestedYChromaOffset)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.format = format;
            this.externalFormat = externalFormat;
            this.formatFeatures = formatFeatures;
            this.samplerYcbcrConversionComponents = samplerYcbcrConversionComponents;
            this.suggestedYcbcrModel = suggestedYcbcrModel;
            this.suggestedYcbcrRange = suggestedYcbcrRange;
            this.suggestedXChromaOffset = suggestedXChromaOffset;
            this.suggestedYChromaOffset = suggestedYChromaOffset;
        }
    }
    /// <summary><b>[requires: VK_EXT_conditional_rendering]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCommandBufferInheritanceConditionalRenderingInfoEXT.html" /></remarks>
    public unsafe struct VkCommandBufferInheritanceConditionalRenderingInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeCommandBufferInheritanceConditionalRenderingInfoExt;
        public void* pNext;
        public int conditionalRenderingEnable;
        public VkCommandBufferInheritanceConditionalRenderingInfoEXT() { }
        public VkCommandBufferInheritanceConditionalRenderingInfoEXT(VkStructureType sType, void* pNext, int conditionalRenderingEnable)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.conditionalRenderingEnable = conditionalRenderingEnable;
        }
    }
    /// <summary><b>[requires: VK_ANDROID_external_memory_android_hardware_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalFormatANDROID.html" /></remarks>
    public unsafe struct VkExternalFormatANDROID
    {
        public VkStructureType sType = VkStructureType.StructureTypeExternalFormatAndroid;
        public void* pNext;
        public ulong externalFormat;
        public VkExternalFormatANDROID() { }
        public VkExternalFormatANDROID(VkStructureType sType, void* pNext, ulong externalFormat)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.externalFormat = externalFormat;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevice8BitStorageFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDevice8BitStorageFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevice8bitStorageFeatures;
        public void* pNext;
        public int storageBuffer8BitAccess;
        public int uniformAndStorageBuffer8BitAccess;
        public int storagePushConstant8;
        public VkPhysicalDevice8BitStorageFeatures() { }
        public VkPhysicalDevice8BitStorageFeatures(VkStructureType sType, void* pNext, int storageBuffer8BitAccess, int uniformAndStorageBuffer8BitAccess, int storagePushConstant8)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.storageBuffer8BitAccess = storageBuffer8BitAccess;
            this.uniformAndStorageBuffer8BitAccess = uniformAndStorageBuffer8BitAccess;
            this.storagePushConstant8 = storagePushConstant8;
        }
    }
    /// <summary><b>[requires: VK_KHR_8bit_storage]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevice8BitStorageFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDevice8BitStorageFeaturesKHR
    {
        public VkPhysicalDevice8BitStorageFeaturesKHR() { }
    }
    /// <summary><b>[requires: VK_EXT_conditional_rendering]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceConditionalRenderingFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceConditionalRenderingFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceConditionalRenderingFeaturesExt;
        public void* pNext;
        public int conditionalRendering;
        public int inheritedConditionalRendering;
        public VkPhysicalDeviceConditionalRenderingFeaturesEXT() { }
        public VkPhysicalDeviceConditionalRenderingFeaturesEXT(VkStructureType sType, void* pNext, int conditionalRendering, int inheritedConditionalRendering)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.conditionalRendering = conditionalRendering;
            this.inheritedConditionalRendering = inheritedConditionalRendering;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkanMemoryModelFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVulkanMemoryModelFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceVulkanMemoryModelFeatures;
        public void* pNext;
        public int vulkanMemoryModel;
        public int vulkanMemoryModelDeviceScope;
        public int vulkanMemoryModelAvailabilityVisibilityChains;
        public VkPhysicalDeviceVulkanMemoryModelFeatures() { }
        public VkPhysicalDeviceVulkanMemoryModelFeatures(VkStructureType sType, void* pNext, int vulkanMemoryModel, int vulkanMemoryModelDeviceScope, int vulkanMemoryModelAvailabilityVisibilityChains)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.vulkanMemoryModel = vulkanMemoryModel;
            this.vulkanMemoryModelDeviceScope = vulkanMemoryModelDeviceScope;
            this.vulkanMemoryModelAvailabilityVisibilityChains = vulkanMemoryModelAvailabilityVisibilityChains;
        }
    }
    /// <summary><b>[requires: VK_KHR_vulkan_memory_model]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVulkanMemoryModelFeaturesKHR
    {
        public VkPhysicalDeviceVulkanMemoryModelFeaturesKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicInt64Features.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderAtomicInt64Features
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderAtomicInt64Features;
        public void* pNext;
        public int shaderBufferInt64Atomics;
        public int shaderSharedInt64Atomics;
        public VkPhysicalDeviceShaderAtomicInt64Features() { }
        public VkPhysicalDeviceShaderAtomicInt64Features(VkStructureType sType, void* pNext, int shaderBufferInt64Atomics, int shaderSharedInt64Atomics)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderBufferInt64Atomics = shaderBufferInt64Atomics;
            this.shaderSharedInt64Atomics = shaderSharedInt64Atomics;
        }
    }
    /// <summary><b>[requires: VK_KHR_shader_atomic_int64]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderAtomicInt64FeaturesKHR
    {
        public VkPhysicalDeviceShaderAtomicInt64FeaturesKHR() { }
    }
    /// <summary><b>[requires: VK_EXT_shader_atomic_float]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderAtomicFloatFeaturesExt;
        public void* pNext;
        public int shaderBufferFloat32Atomics;
        public int shaderBufferFloat32AtomicAdd;
        public int shaderBufferFloat64Atomics;
        public int shaderBufferFloat64AtomicAdd;
        public int shaderSharedFloat32Atomics;
        public int shaderSharedFloat32AtomicAdd;
        public int shaderSharedFloat64Atomics;
        public int shaderSharedFloat64AtomicAdd;
        public int shaderImageFloat32Atomics;
        public int shaderImageFloat32AtomicAdd;
        public int sparseImageFloat32Atomics;
        public int sparseImageFloat32AtomicAdd;
        public VkPhysicalDeviceShaderAtomicFloatFeaturesEXT() { }
        public VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(VkStructureType sType, void* pNext, int shaderBufferFloat32Atomics, int shaderBufferFloat32AtomicAdd, int shaderBufferFloat64Atomics, int shaderBufferFloat64AtomicAdd, int shaderSharedFloat32Atomics, int shaderSharedFloat32AtomicAdd, int shaderSharedFloat64Atomics, int shaderSharedFloat64AtomicAdd, int shaderImageFloat32Atomics, int shaderImageFloat32AtomicAdd, int sparseImageFloat32Atomics, int sparseImageFloat32AtomicAdd)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderBufferFloat32Atomics = shaderBufferFloat32Atomics;
            this.shaderBufferFloat32AtomicAdd = shaderBufferFloat32AtomicAdd;
            this.shaderBufferFloat64Atomics = shaderBufferFloat64Atomics;
            this.shaderBufferFloat64AtomicAdd = shaderBufferFloat64AtomicAdd;
            this.shaderSharedFloat32Atomics = shaderSharedFloat32Atomics;
            this.shaderSharedFloat32AtomicAdd = shaderSharedFloat32AtomicAdd;
            this.shaderSharedFloat64Atomics = shaderSharedFloat64Atomics;
            this.shaderSharedFloat64AtomicAdd = shaderSharedFloat64AtomicAdd;
            this.shaderImageFloat32Atomics = shaderImageFloat32Atomics;
            this.shaderImageFloat32AtomicAdd = shaderImageFloat32AtomicAdd;
            this.sparseImageFloat32Atomics = sparseImageFloat32Atomics;
            this.sparseImageFloat32AtomicAdd = sparseImageFloat32AtomicAdd;
        }
    }
    /// <summary><b>[requires: VK_EXT_shader_atomic_float2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderAtomicFloat2FeaturesExt;
        public void* pNext;
        public int shaderBufferFloat16Atomics;
        public int shaderBufferFloat16AtomicAdd;
        public int shaderBufferFloat16AtomicMinMax;
        public int shaderBufferFloat32AtomicMinMax;
        public int shaderBufferFloat64AtomicMinMax;
        public int shaderSharedFloat16Atomics;
        public int shaderSharedFloat16AtomicAdd;
        public int shaderSharedFloat16AtomicMinMax;
        public int shaderSharedFloat32AtomicMinMax;
        public int shaderSharedFloat64AtomicMinMax;
        public int shaderImageFloat32AtomicMinMax;
        public int sparseImageFloat32AtomicMinMax;
        public VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT() { }
        public VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(VkStructureType sType, void* pNext, int shaderBufferFloat16Atomics, int shaderBufferFloat16AtomicAdd, int shaderBufferFloat16AtomicMinMax, int shaderBufferFloat32AtomicMinMax, int shaderBufferFloat64AtomicMinMax, int shaderSharedFloat16Atomics, int shaderSharedFloat16AtomicAdd, int shaderSharedFloat16AtomicMinMax, int shaderSharedFloat32AtomicMinMax, int shaderSharedFloat64AtomicMinMax, int shaderImageFloat32AtomicMinMax, int sparseImageFloat32AtomicMinMax)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderBufferFloat16Atomics = shaderBufferFloat16Atomics;
            this.shaderBufferFloat16AtomicAdd = shaderBufferFloat16AtomicAdd;
            this.shaderBufferFloat16AtomicMinMax = shaderBufferFloat16AtomicMinMax;
            this.shaderBufferFloat32AtomicMinMax = shaderBufferFloat32AtomicMinMax;
            this.shaderBufferFloat64AtomicMinMax = shaderBufferFloat64AtomicMinMax;
            this.shaderSharedFloat16Atomics = shaderSharedFloat16Atomics;
            this.shaderSharedFloat16AtomicAdd = shaderSharedFloat16AtomicAdd;
            this.shaderSharedFloat16AtomicMinMax = shaderSharedFloat16AtomicMinMax;
            this.shaderSharedFloat32AtomicMinMax = shaderSharedFloat32AtomicMinMax;
            this.shaderSharedFloat64AtomicMinMax = shaderSharedFloat64AtomicMinMax;
            this.shaderImageFloat32AtomicMinMax = shaderImageFloat32AtomicMinMax;
            this.sparseImageFloat32AtomicMinMax = sparseImageFloat32AtomicMinMax;
        }
    }
    /// <summary><b>[requires: VK_KHR_vertex_attribute_divisor]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceVertexAttributeDivisorFeaturesKhr;
        public void* pNext;
        public int vertexAttributeInstanceRateDivisor;
        public int vertexAttributeInstanceRateZeroDivisor;
        public VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR() { }
        public VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR(VkStructureType sType, void* pNext, int vertexAttributeInstanceRateDivisor, int vertexAttributeInstanceRateZeroDivisor)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.vertexAttributeInstanceRateDivisor = vertexAttributeInstanceRateDivisor;
            this.vertexAttributeInstanceRateZeroDivisor = vertexAttributeInstanceRateZeroDivisor;
        }
    }
    /// <summary><b>[requires: VK_EXT_vertex_attribute_divisor]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
    {
        public VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT() { }
    }
    /// <summary><b>[requires: VK_NV_device_diagnostic_checkpoints]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkQueueFamilyCheckpointPropertiesNV.html" /></remarks>
    public unsafe struct VkQueueFamilyCheckpointPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeQueueFamilyCheckpointPropertiesNv;
        public void* pNext;
        public VkPipelineStageFlagBits checkpointExecutionStageMask;
        public VkQueueFamilyCheckpointPropertiesNV() { }
        public VkQueueFamilyCheckpointPropertiesNV(VkStructureType sType, void* pNext, VkPipelineStageFlagBits checkpointExecutionStageMask)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.checkpointExecutionStageMask = checkpointExecutionStageMask;
        }
    }
    /// <summary><b>[requires: VK_NV_device_diagnostic_checkpoints]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCheckpointDataNV.html" /></remarks>
    public unsafe struct VkCheckpointDataNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeCheckpointDataNv;
        public void* pNext;
        public VkPipelineStageFlagBits stage;
        public void* pCheckpointMarker;
        public VkCheckpointDataNV() { }
        public VkCheckpointDataNV(VkStructureType sType, void* pNext, VkPipelineStageFlagBits stage, void* pCheckpointMarker)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stage = stage;
            this.pCheckpointMarker = pCheckpointMarker;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDepthStencilResolveProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDepthStencilResolveProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDepthStencilResolveProperties;
        public void* pNext;
        public VkResolveModeFlagBits supportedDepthResolveModes;
        public VkResolveModeFlagBits supportedStencilResolveModes;
        public int independentResolveNone;
        public int independentResolve;
        public VkPhysicalDeviceDepthStencilResolveProperties() { }
        public VkPhysicalDeviceDepthStencilResolveProperties(VkStructureType sType, void* pNext, VkResolveModeFlagBits supportedDepthResolveModes, VkResolveModeFlagBits supportedStencilResolveModes, int independentResolveNone, int independentResolve)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.supportedDepthResolveModes = supportedDepthResolveModes;
            this.supportedStencilResolveModes = supportedStencilResolveModes;
            this.independentResolveNone = independentResolveNone;
            this.independentResolve = independentResolve;
        }
    }
    /// <summary><b>[requires: VK_KHR_depth_stencil_resolve]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDepthStencilResolvePropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDepthStencilResolvePropertiesKHR
    {
        public VkPhysicalDeviceDepthStencilResolvePropertiesKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassDescriptionDepthStencilResolve.html" /></remarks>
    public unsafe struct VkSubpassDescriptionDepthStencilResolve
    {
        public VkStructureType sType = VkStructureType.StructureTypeSubpassDescriptionDepthStencilResolve;
        public void* pNext;
        public VkResolveModeFlagBits depthResolveMode;
        public VkResolveModeFlagBits stencilResolveMode;
        public VkAttachmentReference2* pDepthStencilResolveAttachment;
        public VkSubpassDescriptionDepthStencilResolve() { }
        public VkSubpassDescriptionDepthStencilResolve(VkStructureType sType, void* pNext, VkResolveModeFlagBits depthResolveMode, VkResolveModeFlagBits stencilResolveMode, VkAttachmentReference2* pDepthStencilResolveAttachment)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.depthResolveMode = depthResolveMode;
            this.stencilResolveMode = stencilResolveMode;
            this.pDepthStencilResolveAttachment = pDepthStencilResolveAttachment;
        }
    }
    /// <summary><b>[requires: VK_KHR_depth_stencil_resolve]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassDescriptionDepthStencilResolveKHR.html" /></remarks>
    public unsafe struct VkSubpassDescriptionDepthStencilResolveKHR
    {
        public VkSubpassDescriptionDepthStencilResolveKHR() { }
    }
    /// <summary><b>[requires: VK_EXT_astc_decode_mode]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageViewASTCDecodeModeEXT.html" /></remarks>
    public unsafe struct VkImageViewASTCDecodeModeEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageViewAstcDecodeModeExt;
        public void* pNext;
        public VkFormat decodeMode;
        public VkImageViewASTCDecodeModeEXT() { }
        public VkImageViewASTCDecodeModeEXT(VkStructureType sType, void* pNext, VkFormat decodeMode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.decodeMode = decodeMode;
        }
    }
    /// <summary><b>[requires: VK_EXT_astc_decode_mode]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceASTCDecodeFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceASTCDecodeFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceAstcDecodeFeaturesExt;
        public void* pNext;
        public int decodeModeSharedExponent;
        public VkPhysicalDeviceASTCDecodeFeaturesEXT() { }
        public VkPhysicalDeviceASTCDecodeFeaturesEXT(VkStructureType sType, void* pNext, int decodeModeSharedExponent)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.decodeModeSharedExponent = decodeModeSharedExponent;
        }
    }
    /// <summary><b>[requires: VK_EXT_transform_feedback]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTransformFeedbackFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceTransformFeedbackFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceTransformFeedbackFeaturesExt;
        public void* pNext;
        public int transformFeedback;
        public int geometryStreams;
        public VkPhysicalDeviceTransformFeedbackFeaturesEXT() { }
        public VkPhysicalDeviceTransformFeedbackFeaturesEXT(VkStructureType sType, void* pNext, int transformFeedback, int geometryStreams)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.transformFeedback = transformFeedback;
            this.geometryStreams = geometryStreams;
        }
    }
    /// <summary><b>[requires: VK_EXT_transform_feedback]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTransformFeedbackPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceTransformFeedbackPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceTransformFeedbackPropertiesExt;
        public void* pNext;
        public uint maxTransformFeedbackStreams;
        public uint maxTransformFeedbackBuffers;
        public ulong maxTransformFeedbackBufferSize;
        public uint maxTransformFeedbackStreamDataSize;
        public uint maxTransformFeedbackBufferDataSize;
        public uint maxTransformFeedbackBufferDataStride;
        public int transformFeedbackQueries;
        public int transformFeedbackStreamsLinesTriangles;
        public int transformFeedbackRasterizationStreamSelect;
        public int transformFeedbackDraw;
        public VkPhysicalDeviceTransformFeedbackPropertiesEXT() { }
        public VkPhysicalDeviceTransformFeedbackPropertiesEXT(VkStructureType sType, void* pNext, uint maxTransformFeedbackStreams, uint maxTransformFeedbackBuffers, ulong maxTransformFeedbackBufferSize, uint maxTransformFeedbackStreamDataSize, uint maxTransformFeedbackBufferDataSize, uint maxTransformFeedbackBufferDataStride, int transformFeedbackQueries, int transformFeedbackStreamsLinesTriangles, int transformFeedbackRasterizationStreamSelect, int transformFeedbackDraw)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxTransformFeedbackStreams = maxTransformFeedbackStreams;
            this.maxTransformFeedbackBuffers = maxTransformFeedbackBuffers;
            this.maxTransformFeedbackBufferSize = maxTransformFeedbackBufferSize;
            this.maxTransformFeedbackStreamDataSize = maxTransformFeedbackStreamDataSize;
            this.maxTransformFeedbackBufferDataSize = maxTransformFeedbackBufferDataSize;
            this.maxTransformFeedbackBufferDataStride = maxTransformFeedbackBufferDataStride;
            this.transformFeedbackQueries = transformFeedbackQueries;
            this.transformFeedbackStreamsLinesTriangles = transformFeedbackStreamsLinesTriangles;
            this.transformFeedbackRasterizationStreamSelect = transformFeedbackRasterizationStreamSelect;
            this.transformFeedbackDraw = transformFeedbackDraw;
        }
    }
    /// <summary><b>[requires: VK_EXT_transform_feedback]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineRasterizationStateStreamCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineRasterizationStateStreamCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineRasterizationStateStreamCreateInfoExt;
        public void* pNext;
        public VkPipelineRasterizationStateStreamCreateFlagsEXT flags;
        public uint rasterizationStream;
        public VkPipelineRasterizationStateStreamCreateInfoEXT() { }
        public VkPipelineRasterizationStateStreamCreateInfoEXT(VkStructureType sType, void* pNext, VkPipelineRasterizationStateStreamCreateFlagsEXT flags, uint rasterizationStream)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.rasterizationStream = rasterizationStream;
        }
    }
    /// <summary><b>[requires: VK_NV_representative_fragment_test]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRepresentativeFragmentTestFeaturesNv;
        public void* pNext;
        public int representativeFragmentTest;
        public VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV() { }
        public VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(VkStructureType sType, void* pNext, int representativeFragmentTest)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.representativeFragmentTest = representativeFragmentTest;
        }
    }
    /// <summary><b>[requires: VK_NV_representative_fragment_test]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineRepresentativeFragmentTestStateCreateInfoNV.html" /></remarks>
    public unsafe struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineRepresentativeFragmentTestStateCreateInfoNv;
        public void* pNext;
        public int representativeFragmentTestEnable;
        public VkPipelineRepresentativeFragmentTestStateCreateInfoNV() { }
        public VkPipelineRepresentativeFragmentTestStateCreateInfoNV(VkStructureType sType, void* pNext, int representativeFragmentTestEnable)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.representativeFragmentTestEnable = representativeFragmentTestEnable;
        }
    }
    /// <summary><b>[requires: VK_NV_scissor_exclusive]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExclusiveScissorFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExclusiveScissorFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExclusiveScissorFeaturesNv;
        public void* pNext;
        public int exclusiveScissor;
        public VkPhysicalDeviceExclusiveScissorFeaturesNV() { }
        public VkPhysicalDeviceExclusiveScissorFeaturesNV(VkStructureType sType, void* pNext, int exclusiveScissor)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.exclusiveScissor = exclusiveScissor;
        }
    }
    /// <summary><b>[requires: VK_NV_scissor_exclusive]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineViewportExclusiveScissorStateCreateInfoNV.html" /></remarks>
    public unsafe struct VkPipelineViewportExclusiveScissorStateCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineViewportExclusiveScissorStateCreateInfoNv;
        public void* pNext;
        public uint exclusiveScissorCount;
        public VkRect2D* pExclusiveScissors;
        public VkPipelineViewportExclusiveScissorStateCreateInfoNV() { }
        public VkPipelineViewportExclusiveScissorStateCreateInfoNV(VkStructureType sType, void* pNext, uint exclusiveScissorCount, VkRect2D* pExclusiveScissors)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.exclusiveScissorCount = exclusiveScissorCount;
            this.pExclusiveScissors = pExclusiveScissors;
        }
    }
    /// <summary><b>[requires: VK_NV_corner_sampled_image]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCornerSampledImageFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCornerSampledImageFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCornerSampledImageFeaturesNv;
        public void* pNext;
        public int cornerSampledImage;
        public VkPhysicalDeviceCornerSampledImageFeaturesNV() { }
        public VkPhysicalDeviceCornerSampledImageFeaturesNV(VkStructureType sType, void* pNext, int cornerSampledImage)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.cornerSampledImage = cornerSampledImage;
        }
    }
    /// <summary><b>[requires: VK_KHR_compute_shader_derivatives]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceComputeShaderDerivativesFeaturesKhr;
        public void* pNext;
        public int computeDerivativeGroupQuads;
        public int computeDerivativeGroupLinear;
        public VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR() { }
        public VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR(VkStructureType sType, void* pNext, int computeDerivativeGroupQuads, int computeDerivativeGroupLinear)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.computeDerivativeGroupQuads = computeDerivativeGroupQuads;
            this.computeDerivativeGroupLinear = computeDerivativeGroupLinear;
        }
    }
    /// <summary><b>[requires: VK_NV_compute_shader_derivatives]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
    {
        public VkPhysicalDeviceComputeShaderDerivativesFeaturesNV() { }
    }
    /// <summary><b>[requires: VK_KHR_compute_shader_derivatives]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceComputeShaderDerivativesPropertiesKhr;
        public void* pNext;
        public int meshAndTaskShaderDerivatives;
        public VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR() { }
        public VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR(VkStructureType sType, void* pNext, int meshAndTaskShaderDerivatives)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.meshAndTaskShaderDerivatives = meshAndTaskShaderDerivatives;
        }
    }
    /// <summary><b>[requires: VK_NV_fragment_shader_barycentric]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
    {
        public VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV() { }
    }
    /// <summary><b>[requires: VK_NV_shader_image_footprint]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderImageFootprintFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderImageFootprintFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderImageFootprintFeaturesNv;
        public void* pNext;
        public int imageFootprint;
        public VkPhysicalDeviceShaderImageFootprintFeaturesNV() { }
        public VkPhysicalDeviceShaderImageFootprintFeaturesNV(VkStructureType sType, void* pNext, int imageFootprint)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageFootprint = imageFootprint;
        }
    }
    /// <summary><b>[requires: VK_NV_dedicated_allocation_image_aliasing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDedicatedAllocationImageAliasingFeaturesNv;
        public void* pNext;
        public int dedicatedAllocationImageAliasing;
        public VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV() { }
        public VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(VkStructureType sType, void* pNext, int dedicatedAllocationImageAliasing)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.dedicatedAllocationImageAliasing = dedicatedAllocationImageAliasing;
        }
    }
    /// <summary><b>[requires: VK_NV_copy_memory_indirect]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCopyMemoryIndirectFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCopyMemoryIndirectFeaturesNv;
        public void* pNext;
        public int indirectCopy;
        public VkPhysicalDeviceCopyMemoryIndirectFeaturesNV() { }
        public VkPhysicalDeviceCopyMemoryIndirectFeaturesNV(VkStructureType sType, void* pNext, int indirectCopy)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.indirectCopy = indirectCopy;
        }
    }
    /// <summary><b>[requires: VK_NV_copy_memory_indirect]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCopyMemoryIndirectPropertiesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCopyMemoryIndirectPropertiesNv;
        public void* pNext;
        public VkQueueFlagBits supportedQueues;
        public VkPhysicalDeviceCopyMemoryIndirectPropertiesNV() { }
        public VkPhysicalDeviceCopyMemoryIndirectPropertiesNV(VkStructureType sType, void* pNext, VkQueueFlagBits supportedQueues)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.supportedQueues = supportedQueues;
        }
    }
    /// <summary><b>[requires: VK_NV_memory_decompression]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMemoryDecompressionFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMemoryDecompressionFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMemoryDecompressionFeaturesNv;
        public void* pNext;
        public int memoryDecompression;
        public VkPhysicalDeviceMemoryDecompressionFeaturesNV() { }
        public VkPhysicalDeviceMemoryDecompressionFeaturesNV(VkStructureType sType, void* pNext, int memoryDecompression)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memoryDecompression = memoryDecompression;
        }
    }
    /// <summary><b>[requires: VK_NV_memory_decompression]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMemoryDecompressionPropertiesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMemoryDecompressionPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMemoryDecompressionPropertiesNv;
        public void* pNext;
        public VkMemoryDecompressionMethodFlagBitsNV decompressionMethods;
        public ulong maxDecompressionIndirectCount;
        public VkPhysicalDeviceMemoryDecompressionPropertiesNV() { }
        public VkPhysicalDeviceMemoryDecompressionPropertiesNV(VkStructureType sType, void* pNext, VkMemoryDecompressionMethodFlagBitsNV decompressionMethods, ulong maxDecompressionIndirectCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.decompressionMethods = decompressionMethods;
            this.maxDecompressionIndirectCount = maxDecompressionIndirectCount;
        }
    }
    /// <summary><b>[requires: VK_NV_shading_rate_image]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkShadingRatePaletteNV.html" /></remarks>
    public unsafe struct VkShadingRatePaletteNV
    {
        public uint shadingRatePaletteEntryCount;
        public VkShadingRatePaletteEntryNV* pShadingRatePaletteEntries;
        public VkShadingRatePaletteNV() { }
        public VkShadingRatePaletteNV(uint shadingRatePaletteEntryCount, VkShadingRatePaletteEntryNV* pShadingRatePaletteEntries)
        {
            this.shadingRatePaletteEntryCount = shadingRatePaletteEntryCount;
            this.pShadingRatePaletteEntries = pShadingRatePaletteEntries;
        }
    }
    /// <summary><b>[requires: VK_NV_shading_rate_image]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineViewportShadingRateImageStateCreateInfoNV.html" /></remarks>
    public unsafe struct VkPipelineViewportShadingRateImageStateCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineViewportShadingRateImageStateCreateInfoNv;
        public void* pNext;
        public int shadingRateImageEnable;
        public uint viewportCount;
        public VkShadingRatePaletteNV* pShadingRatePalettes;
        public VkPipelineViewportShadingRateImageStateCreateInfoNV() { }
        public VkPipelineViewportShadingRateImageStateCreateInfoNV(VkStructureType sType, void* pNext, int shadingRateImageEnable, uint viewportCount, VkShadingRatePaletteNV* pShadingRatePalettes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shadingRateImageEnable = shadingRateImageEnable;
            this.viewportCount = viewportCount;
            this.pShadingRatePalettes = pShadingRatePalettes;
        }
    }
    /// <summary><b>[requires: VK_NV_shading_rate_image]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShadingRateImageFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShadingRateImageFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShadingRateImageFeaturesNv;
        public void* pNext;
        public int shadingRateImage;
        public int shadingRateCoarseSampleOrder;
        public VkPhysicalDeviceShadingRateImageFeaturesNV() { }
        public VkPhysicalDeviceShadingRateImageFeaturesNV(VkStructureType sType, void* pNext, int shadingRateImage, int shadingRateCoarseSampleOrder)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shadingRateImage = shadingRateImage;
            this.shadingRateCoarseSampleOrder = shadingRateCoarseSampleOrder;
        }
    }
    /// <summary><b>[requires: VK_NV_shading_rate_image]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShadingRateImagePropertiesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShadingRateImagePropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShadingRateImagePropertiesNv;
        public void* pNext;
        public VkExtent2D shadingRateTexelSize;
        public uint shadingRatePaletteSize;
        public uint shadingRateMaxCoarseSamples;
        public VkPhysicalDeviceShadingRateImagePropertiesNV() { }
        public VkPhysicalDeviceShadingRateImagePropertiesNV(VkStructureType sType, void* pNext, VkExtent2D shadingRateTexelSize, uint shadingRatePaletteSize, uint shadingRateMaxCoarseSamples)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shadingRateTexelSize = shadingRateTexelSize;
            this.shadingRatePaletteSize = shadingRatePaletteSize;
            this.shadingRateMaxCoarseSamples = shadingRateMaxCoarseSamples;
        }
    }
    /// <summary><b>[requires: VK_HUAWEI_invocation_mask]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceInvocationMaskFeaturesHUAWEI.html" /></remarks>
    public unsafe struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceInvocationMaskFeaturesHuawei;
        public void* pNext;
        public int invocationMask;
        public VkPhysicalDeviceInvocationMaskFeaturesHUAWEI() { }
        public VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(VkStructureType sType, void* pNext, int invocationMask)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.invocationMask = invocationMask;
        }
    }
    /// <summary><b>[requires: VK_NV_shading_rate_image]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCoarseSampleLocationNV.html" /></remarks>
    public unsafe struct VkCoarseSampleLocationNV
    {
        public uint pixelX;
        public uint pixelY;
        public uint sample;
        public VkCoarseSampleLocationNV() { }
        public VkCoarseSampleLocationNV(uint pixelX, uint pixelY, uint sample)
        {
            this.pixelX = pixelX;
            this.pixelY = pixelY;
            this.sample = sample;
        }
    }
    /// <summary><b>[requires: VK_NV_shading_rate_image]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCoarseSampleOrderCustomNV.html" /></remarks>
    public unsafe struct VkCoarseSampleOrderCustomNV
    {
        public VkShadingRatePaletteEntryNV shadingRate;
        public uint sampleCount;
        public uint sampleLocationCount;
        public VkCoarseSampleLocationNV* pSampleLocations;
        public VkCoarseSampleOrderCustomNV() { }
        public VkCoarseSampleOrderCustomNV(VkShadingRatePaletteEntryNV shadingRate, uint sampleCount, uint sampleLocationCount, VkCoarseSampleLocationNV* pSampleLocations)
        {
            this.shadingRate = shadingRate;
            this.sampleCount = sampleCount;
            this.sampleLocationCount = sampleLocationCount;
            this.pSampleLocations = pSampleLocations;
        }
    }
    /// <summary><b>[requires: VK_NV_shading_rate_image]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.html" /></remarks>
    public unsafe struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineViewportCoarseSampleOrderStateCreateInfoNv;
        public void* pNext;
        public VkCoarseSampleOrderTypeNV sampleOrderType;
        public uint customSampleOrderCount;
        public VkCoarseSampleOrderCustomNV* pCustomSampleOrders;
        public VkPipelineViewportCoarseSampleOrderStateCreateInfoNV() { }
        public VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(VkStructureType sType, void* pNext, VkCoarseSampleOrderTypeNV sampleOrderType, uint customSampleOrderCount, VkCoarseSampleOrderCustomNV* pCustomSampleOrders)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.sampleOrderType = sampleOrderType;
            this.customSampleOrderCount = customSampleOrderCount;
            this.pCustomSampleOrders = pCustomSampleOrders;
        }
    }
    /// <summary><b>[requires: VK_NV_mesh_shader]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMeshShaderFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMeshShaderFeaturesNv;
        public void* pNext;
        public int taskShader;
        public int meshShader;
        public VkPhysicalDeviceMeshShaderFeaturesNV() { }
        public VkPhysicalDeviceMeshShaderFeaturesNV(VkStructureType sType, void* pNext, int taskShader, int meshShader)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.taskShader = taskShader;
            this.meshShader = meshShader;
        }
    }
    /// <summary><b>[requires: VK_NV_mesh_shader]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMeshShaderPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMeshShaderPropertiesNv;
        public void* pNext;
        public uint maxDrawMeshTasksCount;
        public uint maxTaskWorkGroupInvocations;
        public fixed uint maxTaskWorkGroupSize[3];
        public uint maxTaskTotalMemorySize;
        public uint maxTaskOutputCount;
        public uint maxMeshWorkGroupInvocations;
        public fixed uint maxMeshWorkGroupSize[3];
        public uint maxMeshTotalMemorySize;
        public uint maxMeshOutputVertices;
        public uint maxMeshOutputPrimitives;
        public uint maxMeshMultiviewViewCount;
        public uint meshOutputPerVertexGranularity;
        public uint meshOutputPerPrimitiveGranularity;
        public VkPhysicalDeviceMeshShaderPropertiesNV() { }
    }
    /// <summary><b>[requires: VK_NV_mesh_shader]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDrawMeshTasksIndirectCommandNV.html" /></remarks>
    public unsafe struct VkDrawMeshTasksIndirectCommandNV
    {
        public uint taskCount;
        public uint firstTask;
        public VkDrawMeshTasksIndirectCommandNV() { }
        public VkDrawMeshTasksIndirectCommandNV(uint taskCount, uint firstTask)
        {
            this.taskCount = taskCount;
            this.firstTask = firstTask;
        }
    }
    /// <summary><b>[requires: VK_EXT_mesh_shader]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMeshShaderFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMeshShaderFeaturesExt;
        public void* pNext;
        public int taskShader;
        public int meshShader;
        public int multiviewMeshShader;
        public int primitiveFragmentShadingRateMeshShader;
        public int meshShaderQueries;
        public VkPhysicalDeviceMeshShaderFeaturesEXT() { }
        public VkPhysicalDeviceMeshShaderFeaturesEXT(VkStructureType sType, void* pNext, int taskShader, int meshShader, int multiviewMeshShader, int primitiveFragmentShadingRateMeshShader, int meshShaderQueries)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.taskShader = taskShader;
            this.meshShader = meshShader;
            this.multiviewMeshShader = multiviewMeshShader;
            this.primitiveFragmentShadingRateMeshShader = primitiveFragmentShadingRateMeshShader;
            this.meshShaderQueries = meshShaderQueries;
        }
    }
    /// <summary><b>[requires: VK_EXT_mesh_shader]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMeshShaderPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMeshShaderPropertiesExt;
        public void* pNext;
        public uint maxTaskWorkGroupTotalCount;
        public fixed uint maxTaskWorkGroupCount[3];
        public uint maxTaskWorkGroupInvocations;
        public fixed uint maxTaskWorkGroupSize[3];
        public uint maxTaskPayloadSize;
        public uint maxTaskSharedMemorySize;
        public uint maxTaskPayloadAndSharedMemorySize;
        public uint maxMeshWorkGroupTotalCount;
        public fixed uint maxMeshWorkGroupCount[3];
        public uint maxMeshWorkGroupInvocations;
        public fixed uint maxMeshWorkGroupSize[3];
        public uint maxMeshSharedMemorySize;
        public uint maxMeshPayloadAndSharedMemorySize;
        public uint maxMeshOutputMemorySize;
        public uint maxMeshPayloadAndOutputMemorySize;
        public uint maxMeshOutputComponents;
        public uint maxMeshOutputVertices;
        public uint maxMeshOutputPrimitives;
        public uint maxMeshOutputLayers;
        public uint maxMeshMultiviewViewCount;
        public uint meshOutputPerVertexGranularity;
        public uint meshOutputPerPrimitiveGranularity;
        public uint maxPreferredTaskWorkGroupInvocations;
        public uint maxPreferredMeshWorkGroupInvocations;
        public int prefersLocalInvocationVertexOutput;
        public int prefersLocalInvocationPrimitiveOutput;
        public int prefersCompactVertexOutput;
        public int prefersCompactPrimitiveOutput;
        public VkPhysicalDeviceMeshShaderPropertiesEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_mesh_shader]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDrawMeshTasksIndirectCommandEXT.html" /></remarks>
    public unsafe struct VkDrawMeshTasksIndirectCommandEXT
    {
        public uint groupCountX;
        public uint groupCountY;
        public uint groupCountZ;
        public VkDrawMeshTasksIndirectCommandEXT() { }
        public VkDrawMeshTasksIndirectCommandEXT(uint groupCountX, uint groupCountY, uint groupCountZ)
        {
            this.groupCountX = groupCountX;
            this.groupCountY = groupCountY;
            this.groupCountZ = groupCountZ;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRayTracingShaderGroupCreateInfoNV.html" /></remarks>
    public unsafe struct VkRayTracingShaderGroupCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeRayTracingShaderGroupCreateInfoNv;
        public void* pNext;
        public VkRayTracingShaderGroupTypeKHR type;
        public uint generalShader;
        public uint closestHitShader;
        public uint anyHitShader;
        public uint intersectionShader;
        public VkRayTracingShaderGroupCreateInfoNV() { }
        public VkRayTracingShaderGroupCreateInfoNV(VkStructureType sType, void* pNext, VkRayTracingShaderGroupTypeKHR type, uint generalShader, uint closestHitShader, uint anyHitShader, uint intersectionShader)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.type = type;
            this.generalShader = generalShader;
            this.closestHitShader = closestHitShader;
            this.anyHitShader = anyHitShader;
            this.intersectionShader = intersectionShader;
        }
    }
    /// <summary><b>[requires: VK_KHR_ray_tracing_pipeline]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRayTracingShaderGroupCreateInfoKHR.html" /></remarks>
    public unsafe struct VkRayTracingShaderGroupCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeRayTracingShaderGroupCreateInfoKhr;
        public void* pNext;
        public VkRayTracingShaderGroupTypeKHR type;
        public uint generalShader;
        public uint closestHitShader;
        public uint anyHitShader;
        public uint intersectionShader;
        public void* pShaderGroupCaptureReplayHandle;
        public VkRayTracingShaderGroupCreateInfoKHR() { }
        public VkRayTracingShaderGroupCreateInfoKHR(VkStructureType sType, void* pNext, VkRayTracingShaderGroupTypeKHR type, uint generalShader, uint closestHitShader, uint anyHitShader, uint intersectionShader, void* pShaderGroupCaptureReplayHandle)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.type = type;
            this.generalShader = generalShader;
            this.closestHitShader = closestHitShader;
            this.anyHitShader = anyHitShader;
            this.intersectionShader = intersectionShader;
            this.pShaderGroupCaptureReplayHandle = pShaderGroupCaptureReplayHandle;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRayTracingPipelineCreateInfoNV.html" /></remarks>
    public unsafe struct VkRayTracingPipelineCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeRayTracingPipelineCreateInfoNv;
        public void* pNext;
        public VkPipelineCreateFlagBits flags;
        public uint stageCount;
        public VkPipelineShaderStageCreateInfo* pStages;
        public uint groupCount;
        public VkRayTracingShaderGroupCreateInfoNV* pGroups;
        public uint maxRecursionDepth;
        public VkPipelineLayout layout;
        public VkPipeline basePipelineHandle;
        public int basePipelineIndex;
        public VkRayTracingPipelineCreateInfoNV() { }
        public VkRayTracingPipelineCreateInfoNV(VkStructureType sType, void* pNext, VkPipelineCreateFlagBits flags, uint stageCount, VkPipelineShaderStageCreateInfo* pStages, uint groupCount, VkRayTracingShaderGroupCreateInfoNV* pGroups, uint maxRecursionDepth, VkPipelineLayout layout, VkPipeline basePipelineHandle, int basePipelineIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.stageCount = stageCount;
            this.pStages = pStages;
            this.groupCount = groupCount;
            this.pGroups = pGroups;
            this.maxRecursionDepth = maxRecursionDepth;
            this.layout = layout;
            this.basePipelineHandle = basePipelineHandle;
            this.basePipelineIndex = basePipelineIndex;
        }
    }
    /// <summary><b>[requires: VK_KHR_ray_tracing_pipeline]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRayTracingPipelineCreateInfoKHR.html" /></remarks>
    public unsafe struct VkRayTracingPipelineCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeRayTracingPipelineCreateInfoKhr;
        public void* pNext;
        public VkPipelineCreateFlagBits flags;
        public uint stageCount;
        public VkPipelineShaderStageCreateInfo* pStages;
        public uint groupCount;
        public VkRayTracingShaderGroupCreateInfoKHR* pGroups;
        public uint maxPipelineRayRecursionDepth;
        public VkPipelineLibraryCreateInfoKHR* pLibraryInfo;
        public VkRayTracingPipelineInterfaceCreateInfoKHR* pLibraryInterface;
        public VkPipelineDynamicStateCreateInfo* pDynamicState;
        public VkPipelineLayout layout;
        public VkPipeline basePipelineHandle;
        public int basePipelineIndex;
        public VkRayTracingPipelineCreateInfoKHR() { }
        public VkRayTracingPipelineCreateInfoKHR(VkStructureType sType, void* pNext, VkPipelineCreateFlagBits flags, uint stageCount, VkPipelineShaderStageCreateInfo* pStages, uint groupCount, VkRayTracingShaderGroupCreateInfoKHR* pGroups, uint maxPipelineRayRecursionDepth, VkPipelineLibraryCreateInfoKHR* pLibraryInfo, VkRayTracingPipelineInterfaceCreateInfoKHR* pLibraryInterface, VkPipelineDynamicStateCreateInfo* pDynamicState, VkPipelineLayout layout, VkPipeline basePipelineHandle, int basePipelineIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.stageCount = stageCount;
            this.pStages = pStages;
            this.groupCount = groupCount;
            this.pGroups = pGroups;
            this.maxPipelineRayRecursionDepth = maxPipelineRayRecursionDepth;
            this.pLibraryInfo = pLibraryInfo;
            this.pLibraryInterface = pLibraryInterface;
            this.pDynamicState = pDynamicState;
            this.layout = layout;
            this.basePipelineHandle = basePipelineHandle;
            this.basePipelineIndex = basePipelineIndex;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkGeometryTrianglesNV.html" /></remarks>
    public unsafe struct VkGeometryTrianglesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeGeometryTrianglesNv;
        public void* pNext;
        public VkBuffer vertexData;
        public ulong vertexOffset;
        public uint vertexCount;
        public ulong vertexStride;
        public VkFormat vertexFormat;
        public VkBuffer indexData;
        public ulong indexOffset;
        public uint indexCount;
        public VkIndexType indexType;
        public VkBuffer transformData;
        public ulong transformOffset;
        public VkGeometryTrianglesNV() { }
        public VkGeometryTrianglesNV(VkStructureType sType, void* pNext, VkBuffer vertexData, ulong vertexOffset, uint vertexCount, ulong vertexStride, VkFormat vertexFormat, VkBuffer indexData, ulong indexOffset, uint indexCount, VkIndexType indexType, VkBuffer transformData, ulong transformOffset)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.vertexData = vertexData;
            this.vertexOffset = vertexOffset;
            this.vertexCount = vertexCount;
            this.vertexStride = vertexStride;
            this.vertexFormat = vertexFormat;
            this.indexData = indexData;
            this.indexOffset = indexOffset;
            this.indexCount = indexCount;
            this.indexType = indexType;
            this.transformData = transformData;
            this.transformOffset = transformOffset;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkGeometryAABBNV.html" /></remarks>
    public unsafe struct VkGeometryAABBNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeGeometryAabbNv;
        public void* pNext;
        public VkBuffer aabbData;
        public uint numAABBs;
        public uint stride;
        public ulong offset;
        public VkGeometryAABBNV() { }
        public VkGeometryAABBNV(VkStructureType sType, void* pNext, VkBuffer aabbData, uint numAABBs, uint stride, ulong offset)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.aabbData = aabbData;
            this.numAABBs = numAABBs;
            this.stride = stride;
            this.offset = offset;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkGeometryDataNV.html" /></remarks>
    public unsafe struct VkGeometryDataNV
    {
        public VkGeometryTrianglesNV triangles;
        public VkGeometryAABBNV aabbs;
        public VkGeometryDataNV() { }
        public VkGeometryDataNV(VkGeometryTrianglesNV triangles, VkGeometryAABBNV aabbs)
        {
            this.triangles = triangles;
            this.aabbs = aabbs;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkGeometryNV.html" /></remarks>
    public unsafe struct VkGeometryNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeGeometryNv;
        public void* pNext;
        public VkGeometryTypeKHR geometryType;
        public VkGeometryDataNV geometry;
        public VkGeometryFlagBitsKHR flags;
        public VkGeometryNV() { }
        public VkGeometryNV(VkStructureType sType, void* pNext, VkGeometryTypeKHR geometryType, VkGeometryDataNV geometry, VkGeometryFlagBitsKHR flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.geometryType = geometryType;
            this.geometry = geometry;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureInfoNV.html" /></remarks>
    public unsafe struct VkAccelerationStructureInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureInfoNv;
        public void* pNext;
        public VkAccelerationStructureTypeKHR type;
        public VkBuildAccelerationStructureFlagsNV flags;
        public uint instanceCount;
        public uint geometryCount;
        public VkGeometryNV* pGeometries;
        public VkAccelerationStructureInfoNV() { }
        public VkAccelerationStructureInfoNV(VkStructureType sType, void* pNext, VkAccelerationStructureTypeKHR type, VkBuildAccelerationStructureFlagsNV flags, uint instanceCount, uint geometryCount, VkGeometryNV* pGeometries)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.type = type;
            this.flags = flags;
            this.instanceCount = instanceCount;
            this.geometryCount = geometryCount;
            this.pGeometries = pGeometries;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureCreateInfoNV.html" /></remarks>
    public unsafe struct VkAccelerationStructureCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureCreateInfoNv;
        public void* pNext;
        public ulong compactedSize;
        public VkAccelerationStructureInfoNV info;
        public VkAccelerationStructureCreateInfoNV() { }
        public VkAccelerationStructureCreateInfoNV(VkStructureType sType, void* pNext, ulong compactedSize, VkAccelerationStructureInfoNV info)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.compactedSize = compactedSize;
            this.info = info;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindAccelerationStructureMemoryInfoNV.html" /></remarks>
    public unsafe struct VkBindAccelerationStructureMemoryInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeBindAccelerationStructureMemoryInfoNv;
        public void* pNext;
        public VkAccelerationStructureNV accelerationStructure;
        public VkDeviceMemory memory;
        public ulong memoryOffset;
        public uint deviceIndexCount;
        public uint* pDeviceIndices;
        public VkBindAccelerationStructureMemoryInfoNV() { }
        public VkBindAccelerationStructureMemoryInfoNV(VkStructureType sType, void* pNext, VkAccelerationStructureNV accelerationStructure, VkDeviceMemory memory, ulong memoryOffset, uint deviceIndexCount, uint* pDeviceIndices)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.accelerationStructure = accelerationStructure;
            this.memory = memory;
            this.memoryOffset = memoryOffset;
            this.deviceIndexCount = deviceIndexCount;
            this.pDeviceIndices = pDeviceIndices;
        }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkWriteDescriptorSetAccelerationStructureKHR.html" /></remarks>
    public unsafe struct VkWriteDescriptorSetAccelerationStructureKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeWriteDescriptorSetAccelerationStructureKhr;
        public void* pNext;
        public uint accelerationStructureCount;
        public VkAccelerationStructureKHR* pAccelerationStructures;
        public VkWriteDescriptorSetAccelerationStructureKHR() { }
        public VkWriteDescriptorSetAccelerationStructureKHR(VkStructureType sType, void* pNext, uint accelerationStructureCount, VkAccelerationStructureKHR* pAccelerationStructures)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.accelerationStructureCount = accelerationStructureCount;
            this.pAccelerationStructures = pAccelerationStructures;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkWriteDescriptorSetAccelerationStructureNV.html" /></remarks>
    public unsafe struct VkWriteDescriptorSetAccelerationStructureNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeWriteDescriptorSetAccelerationStructureNv;
        public void* pNext;
        public uint accelerationStructureCount;
        public VkAccelerationStructureNV* pAccelerationStructures;
        public VkWriteDescriptorSetAccelerationStructureNV() { }
        public VkWriteDescriptorSetAccelerationStructureNV(VkStructureType sType, void* pNext, uint accelerationStructureCount, VkAccelerationStructureNV* pAccelerationStructures)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.accelerationStructureCount = accelerationStructureCount;
            this.pAccelerationStructures = pAccelerationStructures;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureMemoryRequirementsInfoNV.html" /></remarks>
    public unsafe struct VkAccelerationStructureMemoryRequirementsInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureMemoryRequirementsInfoNv;
        public void* pNext;
        public VkAccelerationStructureMemoryRequirementsTypeNV type;
        public VkAccelerationStructureNV accelerationStructure;
        public VkAccelerationStructureMemoryRequirementsInfoNV() { }
        public VkAccelerationStructureMemoryRequirementsInfoNV(VkStructureType sType, void* pNext, VkAccelerationStructureMemoryRequirementsTypeNV type, VkAccelerationStructureNV accelerationStructure)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.type = type;
            this.accelerationStructure = accelerationStructure;
        }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAccelerationStructureFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceAccelerationStructureFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceAccelerationStructureFeaturesKhr;
        public void* pNext;
        public int accelerationStructure;
        public int accelerationStructureCaptureReplay;
        public int accelerationStructureIndirectBuild;
        public int accelerationStructureHostCommands;
        public int descriptorBindingAccelerationStructureUpdateAfterBind;
        public VkPhysicalDeviceAccelerationStructureFeaturesKHR() { }
        public VkPhysicalDeviceAccelerationStructureFeaturesKHR(VkStructureType sType, void* pNext, int accelerationStructure, int accelerationStructureCaptureReplay, int accelerationStructureIndirectBuild, int accelerationStructureHostCommands, int descriptorBindingAccelerationStructureUpdateAfterBind)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.accelerationStructure = accelerationStructure;
            this.accelerationStructureCaptureReplay = accelerationStructureCaptureReplay;
            this.accelerationStructureIndirectBuild = accelerationStructureIndirectBuild;
            this.accelerationStructureHostCommands = accelerationStructureHostCommands;
            this.descriptorBindingAccelerationStructureUpdateAfterBind = descriptorBindingAccelerationStructureUpdateAfterBind;
        }
    }
    /// <summary><b>[requires: VK_KHR_ray_tracing_pipeline]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPipelineFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRayTracingPipelineFeaturesKhr;
        public void* pNext;
        public int rayTracingPipeline;
        public int rayTracingPipelineShaderGroupHandleCaptureReplay;
        public int rayTracingPipelineShaderGroupHandleCaptureReplayMixed;
        public int rayTracingPipelineTraceRaysIndirect;
        public int rayTraversalPrimitiveCulling;
        public VkPhysicalDeviceRayTracingPipelineFeaturesKHR() { }
        public VkPhysicalDeviceRayTracingPipelineFeaturesKHR(VkStructureType sType, void* pNext, int rayTracingPipeline, int rayTracingPipelineShaderGroupHandleCaptureReplay, int rayTracingPipelineShaderGroupHandleCaptureReplayMixed, int rayTracingPipelineTraceRaysIndirect, int rayTraversalPrimitiveCulling)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.rayTracingPipeline = rayTracingPipeline;
            this.rayTracingPipelineShaderGroupHandleCaptureReplay = rayTracingPipelineShaderGroupHandleCaptureReplay;
            this.rayTracingPipelineShaderGroupHandleCaptureReplayMixed = rayTracingPipelineShaderGroupHandleCaptureReplayMixed;
            this.rayTracingPipelineTraceRaysIndirect = rayTracingPipelineTraceRaysIndirect;
            this.rayTraversalPrimitiveCulling = rayTraversalPrimitiveCulling;
        }
    }
    /// <summary><b>[requires: VK_KHR_ray_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayQueryFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRayQueryFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRayQueryFeaturesKhr;
        public void* pNext;
        public int rayQuery;
        public VkPhysicalDeviceRayQueryFeaturesKHR() { }
        public VkPhysicalDeviceRayQueryFeaturesKHR(VkStructureType sType, void* pNext, int rayQuery)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.rayQuery = rayQuery;
        }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAccelerationStructurePropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceAccelerationStructurePropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceAccelerationStructurePropertiesKhr;
        public void* pNext;
        public ulong maxGeometryCount;
        public ulong maxInstanceCount;
        public ulong maxPrimitiveCount;
        public uint maxPerStageDescriptorAccelerationStructures;
        public uint maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
        public uint maxDescriptorSetAccelerationStructures;
        public uint maxDescriptorSetUpdateAfterBindAccelerationStructures;
        public uint minAccelerationStructureScratchOffsetAlignment;
        public VkPhysicalDeviceAccelerationStructurePropertiesKHR() { }
        public VkPhysicalDeviceAccelerationStructurePropertiesKHR(VkStructureType sType, void* pNext, ulong maxGeometryCount, ulong maxInstanceCount, ulong maxPrimitiveCount, uint maxPerStageDescriptorAccelerationStructures, uint maxPerStageDescriptorUpdateAfterBindAccelerationStructures, uint maxDescriptorSetAccelerationStructures, uint maxDescriptorSetUpdateAfterBindAccelerationStructures, uint minAccelerationStructureScratchOffsetAlignment)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxGeometryCount = maxGeometryCount;
            this.maxInstanceCount = maxInstanceCount;
            this.maxPrimitiveCount = maxPrimitiveCount;
            this.maxPerStageDescriptorAccelerationStructures = maxPerStageDescriptorAccelerationStructures;
            this.maxPerStageDescriptorUpdateAfterBindAccelerationStructures = maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
            this.maxDescriptorSetAccelerationStructures = maxDescriptorSetAccelerationStructures;
            this.maxDescriptorSetUpdateAfterBindAccelerationStructures = maxDescriptorSetUpdateAfterBindAccelerationStructures;
            this.minAccelerationStructureScratchOffsetAlignment = minAccelerationStructureScratchOffsetAlignment;
        }
    }
    /// <summary><b>[requires: VK_KHR_ray_tracing_pipeline]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPipelinePropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRayTracingPipelinePropertiesKhr;
        public void* pNext;
        public uint shaderGroupHandleSize;
        public uint maxRayRecursionDepth;
        public uint maxShaderGroupStride;
        public uint shaderGroupBaseAlignment;
        public uint shaderGroupHandleCaptureReplaySize;
        public uint maxRayDispatchInvocationCount;
        public uint shaderGroupHandleAlignment;
        public uint maxRayHitAttributeSize;
        public VkPhysicalDeviceRayTracingPipelinePropertiesKHR() { }
        public VkPhysicalDeviceRayTracingPipelinePropertiesKHR(VkStructureType sType, void* pNext, uint shaderGroupHandleSize, uint maxRayRecursionDepth, uint maxShaderGroupStride, uint shaderGroupBaseAlignment, uint shaderGroupHandleCaptureReplaySize, uint maxRayDispatchInvocationCount, uint shaderGroupHandleAlignment, uint maxRayHitAttributeSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderGroupHandleSize = shaderGroupHandleSize;
            this.maxRayRecursionDepth = maxRayRecursionDepth;
            this.maxShaderGroupStride = maxShaderGroupStride;
            this.shaderGroupBaseAlignment = shaderGroupBaseAlignment;
            this.shaderGroupHandleCaptureReplaySize = shaderGroupHandleCaptureReplaySize;
            this.maxRayDispatchInvocationCount = maxRayDispatchInvocationCount;
            this.shaderGroupHandleAlignment = shaderGroupHandleAlignment;
            this.maxRayHitAttributeSize = maxRayHitAttributeSize;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPropertiesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRayTracingPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRayTracingPropertiesNv;
        public void* pNext;
        public uint shaderGroupHandleSize;
        public uint maxRecursionDepth;
        public uint maxShaderGroupStride;
        public uint shaderGroupBaseAlignment;
        public ulong maxGeometryCount;
        public ulong maxInstanceCount;
        public ulong maxTriangleCount;
        public uint maxDescriptorSetAccelerationStructures;
        public VkPhysicalDeviceRayTracingPropertiesNV() { }
        public VkPhysicalDeviceRayTracingPropertiesNV(VkStructureType sType, void* pNext, uint shaderGroupHandleSize, uint maxRecursionDepth, uint maxShaderGroupStride, uint shaderGroupBaseAlignment, ulong maxGeometryCount, ulong maxInstanceCount, ulong maxTriangleCount, uint maxDescriptorSetAccelerationStructures)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderGroupHandleSize = shaderGroupHandleSize;
            this.maxRecursionDepth = maxRecursionDepth;
            this.maxShaderGroupStride = maxShaderGroupStride;
            this.shaderGroupBaseAlignment = shaderGroupBaseAlignment;
            this.maxGeometryCount = maxGeometryCount;
            this.maxInstanceCount = maxInstanceCount;
            this.maxTriangleCount = maxTriangleCount;
            this.maxDescriptorSetAccelerationStructures = maxDescriptorSetAccelerationStructures;
        }
    }
    /// <summary><b>[requires: VK_KHR_ray_tracing_pipeline]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkStridedDeviceAddressRegionKHR.html" /></remarks>
    public unsafe struct VkStridedDeviceAddressRegionKHR
    {
        public ulong deviceAddress;
        public ulong stride;
        public ulong size;
        public VkStridedDeviceAddressRegionKHR() { }
        public VkStridedDeviceAddressRegionKHR(ulong deviceAddress, ulong stride, ulong size)
        {
            this.deviceAddress = deviceAddress;
            this.stride = stride;
            this.size = size;
        }
    }
    /// <summary><b>[requires: VK_KHR_ray_tracing_pipeline]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkTraceRaysIndirectCommandKHR.html" /></remarks>
    public unsafe struct VkTraceRaysIndirectCommandKHR
    {
        public uint width;
        public uint height;
        public uint depth;
        public VkTraceRaysIndirectCommandKHR() { }
        public VkTraceRaysIndirectCommandKHR(uint width, uint height, uint depth)
        {
            this.width = width;
            this.height = height;
            this.depth = depth;
        }
    }
    /// <summary><b>[requires: VK_KHR_ray_tracing_maintenance1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkTraceRaysIndirectCommand2KHR.html" /></remarks>
    public unsafe struct VkTraceRaysIndirectCommand2KHR
    {
        public ulong raygenShaderRecordAddress;
        public ulong raygenShaderRecordSize;
        public ulong missShaderBindingTableAddress;
        public ulong missShaderBindingTableSize;
        public ulong missShaderBindingTableStride;
        public ulong hitShaderBindingTableAddress;
        public ulong hitShaderBindingTableSize;
        public ulong hitShaderBindingTableStride;
        public ulong callableShaderBindingTableAddress;
        public ulong callableShaderBindingTableSize;
        public ulong callableShaderBindingTableStride;
        public uint width;
        public uint height;
        public uint depth;
        public VkTraceRaysIndirectCommand2KHR() { }
        public VkTraceRaysIndirectCommand2KHR(ulong raygenShaderRecordAddress, ulong raygenShaderRecordSize, ulong missShaderBindingTableAddress, ulong missShaderBindingTableSize, ulong missShaderBindingTableStride, ulong hitShaderBindingTableAddress, ulong hitShaderBindingTableSize, ulong hitShaderBindingTableStride, ulong callableShaderBindingTableAddress, ulong callableShaderBindingTableSize, ulong callableShaderBindingTableStride, uint width, uint height, uint depth)
        {
            this.raygenShaderRecordAddress = raygenShaderRecordAddress;
            this.raygenShaderRecordSize = raygenShaderRecordSize;
            this.missShaderBindingTableAddress = missShaderBindingTableAddress;
            this.missShaderBindingTableSize = missShaderBindingTableSize;
            this.missShaderBindingTableStride = missShaderBindingTableStride;
            this.hitShaderBindingTableAddress = hitShaderBindingTableAddress;
            this.hitShaderBindingTableSize = hitShaderBindingTableSize;
            this.hitShaderBindingTableStride = hitShaderBindingTableStride;
            this.callableShaderBindingTableAddress = callableShaderBindingTableAddress;
            this.callableShaderBindingTableSize = callableShaderBindingTableSize;
            this.callableShaderBindingTableStride = callableShaderBindingTableStride;
            this.width = width;
            this.height = height;
            this.depth = depth;
        }
    }
    /// <summary><b>[requires: VK_KHR_ray_tracing_maintenance1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRayTracingMaintenance1FeaturesKhr;
        public void* pNext;
        public int rayTracingMaintenance1;
        public int rayTracingPipelineTraceRaysIndirect2;
        public VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR() { }
        public VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(VkStructureType sType, void* pNext, int rayTracingMaintenance1, int rayTracingPipelineTraceRaysIndirect2)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.rayTracingMaintenance1 = rayTracingMaintenance1;
            this.rayTracingPipelineTraceRaysIndirect2 = rayTracingPipelineTraceRaysIndirect2;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_drm_format_modifier]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDrmFormatModifierPropertiesListEXT.html" /></remarks>
    public unsafe struct VkDrmFormatModifierPropertiesListEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDrmFormatModifierPropertiesListExt;
        public void* pNext;
        public uint drmFormatModifierCount;
        public VkDrmFormatModifierPropertiesEXT* pDrmFormatModifierProperties;
        public VkDrmFormatModifierPropertiesListEXT() { }
        public VkDrmFormatModifierPropertiesListEXT(VkStructureType sType, void* pNext, uint drmFormatModifierCount, VkDrmFormatModifierPropertiesEXT* pDrmFormatModifierProperties)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.drmFormatModifierCount = drmFormatModifierCount;
            this.pDrmFormatModifierProperties = pDrmFormatModifierProperties;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_drm_format_modifier]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDrmFormatModifierPropertiesEXT.html" /></remarks>
    public unsafe struct VkDrmFormatModifierPropertiesEXT
    {
        public ulong drmFormatModifier;
        public uint drmFormatModifierPlaneCount;
        public VkFormatFeatureFlagBits drmFormatModifierTilingFeatures;
        public VkDrmFormatModifierPropertiesEXT() { }
        public VkDrmFormatModifierPropertiesEXT(ulong drmFormatModifier, uint drmFormatModifierPlaneCount, VkFormatFeatureFlagBits drmFormatModifierTilingFeatures)
        {
            this.drmFormatModifier = drmFormatModifier;
            this.drmFormatModifierPlaneCount = drmFormatModifierPlaneCount;
            this.drmFormatModifierTilingFeatures = drmFormatModifierTilingFeatures;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_drm_format_modifier]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageDrmFormatModifierInfoEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImageDrmFormatModifierInfoExt;
        public void* pNext;
        public ulong drmFormatModifier;
        public VkSharingMode sharingMode;
        public uint queueFamilyIndexCount;
        public uint* pQueueFamilyIndices;
        public VkPhysicalDeviceImageDrmFormatModifierInfoEXT() { }
        public VkPhysicalDeviceImageDrmFormatModifierInfoEXT(VkStructureType sType, void* pNext, ulong drmFormatModifier, VkSharingMode sharingMode, uint queueFamilyIndexCount, uint* pQueueFamilyIndices)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.drmFormatModifier = drmFormatModifier;
            this.sharingMode = sharingMode;
            this.queueFamilyIndexCount = queueFamilyIndexCount;
            this.pQueueFamilyIndices = pQueueFamilyIndices;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_drm_format_modifier]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageDrmFormatModifierListCreateInfoEXT.html" /></remarks>
    public unsafe struct VkImageDrmFormatModifierListCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageDrmFormatModifierListCreateInfoExt;
        public void* pNext;
        public uint drmFormatModifierCount;
        public ulong* pDrmFormatModifiers;
        public VkImageDrmFormatModifierListCreateInfoEXT() { }
        public VkImageDrmFormatModifierListCreateInfoEXT(VkStructureType sType, void* pNext, uint drmFormatModifierCount, ulong* pDrmFormatModifiers)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.drmFormatModifierCount = drmFormatModifierCount;
            this.pDrmFormatModifiers = pDrmFormatModifiers;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_drm_format_modifier]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageDrmFormatModifierExplicitCreateInfoEXT.html" /></remarks>
    public unsafe struct VkImageDrmFormatModifierExplicitCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageDrmFormatModifierExplicitCreateInfoExt;
        public void* pNext;
        public ulong drmFormatModifier;
        public uint drmFormatModifierPlaneCount;
        public VkSubresourceLayout* pPlaneLayouts;
        public VkImageDrmFormatModifierExplicitCreateInfoEXT() { }
        public VkImageDrmFormatModifierExplicitCreateInfoEXT(VkStructureType sType, void* pNext, ulong drmFormatModifier, uint drmFormatModifierPlaneCount, VkSubresourceLayout* pPlaneLayouts)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.drmFormatModifier = drmFormatModifier;
            this.drmFormatModifierPlaneCount = drmFormatModifierPlaneCount;
            this.pPlaneLayouts = pPlaneLayouts;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_drm_format_modifier]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageDrmFormatModifierPropertiesEXT.html" /></remarks>
    public unsafe struct VkImageDrmFormatModifierPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageDrmFormatModifierPropertiesExt;
        public void* pNext;
        public ulong drmFormatModifier;
        public VkImageDrmFormatModifierPropertiesEXT() { }
        public VkImageDrmFormatModifierPropertiesEXT(VkStructureType sType, void* pNext, ulong drmFormatModifier)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.drmFormatModifier = drmFormatModifier;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageStencilUsageCreateInfo.html" /></remarks>
    public unsafe struct VkImageStencilUsageCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageStencilUsageCreateInfo;
        public void* pNext;
        public VkImageUsageFlagBits stencilUsage;
        public VkImageStencilUsageCreateInfo() { }
        public VkImageStencilUsageCreateInfo(VkStructureType sType, void* pNext, VkImageUsageFlagBits stencilUsage)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stencilUsage = stencilUsage;
        }
    }
    /// <summary><b>[requires: VK_EXT_separate_stencil_usage]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageStencilUsageCreateInfoEXT.html" /></remarks>
    public unsafe struct VkImageStencilUsageCreateInfoEXT
    {
        public VkImageStencilUsageCreateInfoEXT() { }
    }
    /// <summary><b>[requires: VK_AMD_memory_overallocation_behavior]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceMemoryOverallocationCreateInfoAMD.html" /></remarks>
    public unsafe struct VkDeviceMemoryOverallocationCreateInfoAMD
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceMemoryOverallocationCreateInfoAmd;
        public void* pNext;
        public VkMemoryOverallocationBehaviorAMD overallocationBehavior;
        public VkDeviceMemoryOverallocationCreateInfoAMD() { }
        public VkDeviceMemoryOverallocationCreateInfoAMD(VkStructureType sType, void* pNext, VkMemoryOverallocationBehaviorAMD overallocationBehavior)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.overallocationBehavior = overallocationBehavior;
        }
    }
    /// <summary><b>[requires: VK_EXT_fragment_density_map]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMapFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFragmentDensityMapFeaturesExt;
        public void* pNext;
        public int fragmentDensityMap;
        public int fragmentDensityMapDynamic;
        public int fragmentDensityMapNonSubsampledImages;
        public VkPhysicalDeviceFragmentDensityMapFeaturesEXT() { }
        public VkPhysicalDeviceFragmentDensityMapFeaturesEXT(VkStructureType sType, void* pNext, int fragmentDensityMap, int fragmentDensityMapDynamic, int fragmentDensityMapNonSubsampledImages)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fragmentDensityMap = fragmentDensityMap;
            this.fragmentDensityMapDynamic = fragmentDensityMapDynamic;
            this.fragmentDensityMapNonSubsampledImages = fragmentDensityMapNonSubsampledImages;
        }
    }
    /// <summary><b>[requires: VK_EXT_fragment_density_map2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFragmentDensityMap2FeaturesExt;
        public void* pNext;
        public int fragmentDensityMapDeferred;
        public VkPhysicalDeviceFragmentDensityMap2FeaturesEXT() { }
        public VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(VkStructureType sType, void* pNext, int fragmentDensityMapDeferred)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fragmentDensityMapDeferred = fragmentDensityMapDeferred;
        }
    }
    /// <summary><b>[requires: VK_QCOM_fragment_density_map_offset]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFragmentDensityMapOffsetFeaturesQcom;
        public void* pNext;
        public int fragmentDensityMapOffset;
        public VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM() { }
        public VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(VkStructureType sType, void* pNext, int fragmentDensityMapOffset)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fragmentDensityMapOffset = fragmentDensityMapOffset;
        }
    }
    /// <summary><b>[requires: VK_EXT_fragment_density_map]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMapPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFragmentDensityMapPropertiesExt;
        public void* pNext;
        public VkExtent2D minFragmentDensityTexelSize;
        public VkExtent2D maxFragmentDensityTexelSize;
        public int fragmentDensityInvocations;
        public VkPhysicalDeviceFragmentDensityMapPropertiesEXT() { }
        public VkPhysicalDeviceFragmentDensityMapPropertiesEXT(VkStructureType sType, void* pNext, VkExtent2D minFragmentDensityTexelSize, VkExtent2D maxFragmentDensityTexelSize, int fragmentDensityInvocations)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.minFragmentDensityTexelSize = minFragmentDensityTexelSize;
            this.maxFragmentDensityTexelSize = maxFragmentDensityTexelSize;
            this.fragmentDensityInvocations = fragmentDensityInvocations;
        }
    }
    /// <summary><b>[requires: VK_EXT_fragment_density_map2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFragmentDensityMap2PropertiesExt;
        public void* pNext;
        public int subsampledLoads;
        public int subsampledCoarseReconstructionEarlyAccess;
        public uint maxSubsampledArrayLayers;
        public uint maxDescriptorSetSubsampledSamplers;
        public VkPhysicalDeviceFragmentDensityMap2PropertiesEXT() { }
        public VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(VkStructureType sType, void* pNext, int subsampledLoads, int subsampledCoarseReconstructionEarlyAccess, uint maxSubsampledArrayLayers, uint maxDescriptorSetSubsampledSamplers)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.subsampledLoads = subsampledLoads;
            this.subsampledCoarseReconstructionEarlyAccess = subsampledCoarseReconstructionEarlyAccess;
            this.maxSubsampledArrayLayers = maxSubsampledArrayLayers;
            this.maxDescriptorSetSubsampledSamplers = maxDescriptorSetSubsampledSamplers;
        }
    }
    /// <summary><b>[requires: VK_QCOM_fragment_density_map_offset]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFragmentDensityMapOffsetPropertiesQcom;
        public void* pNext;
        public VkExtent2D fragmentDensityOffsetGranularity;
        public VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM() { }
        public VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(VkStructureType sType, void* pNext, VkExtent2D fragmentDensityOffsetGranularity)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fragmentDensityOffsetGranularity = fragmentDensityOffsetGranularity;
        }
    }
    /// <summary><b>[requires: VK_EXT_fragment_density_map]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassFragmentDensityMapCreateInfoEXT.html" /></remarks>
    public unsafe struct VkRenderPassFragmentDensityMapCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderPassFragmentDensityMapCreateInfoExt;
        public void* pNext;
        public VkAttachmentReference fragmentDensityMapAttachment;
        public VkRenderPassFragmentDensityMapCreateInfoEXT() { }
        public VkRenderPassFragmentDensityMapCreateInfoEXT(VkStructureType sType, void* pNext, VkAttachmentReference fragmentDensityMapAttachment)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fragmentDensityMapAttachment = fragmentDensityMapAttachment;
        }
    }
    /// <summary><b>[requires: VK_QCOM_fragment_density_map_offset]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassFragmentDensityMapOffsetEndInfoQCOM.html" /></remarks>
    public unsafe struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypeSubpassFragmentDensityMapOffsetEndInfoQcom;
        public void* pNext;
        public uint fragmentDensityOffsetCount;
        public VkOffset2D* pFragmentDensityOffsets;
        public VkSubpassFragmentDensityMapOffsetEndInfoQCOM() { }
        public VkSubpassFragmentDensityMapOffsetEndInfoQCOM(VkStructureType sType, void* pNext, uint fragmentDensityOffsetCount, VkOffset2D* pFragmentDensityOffsets)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fragmentDensityOffsetCount = fragmentDensityOffsetCount;
            this.pFragmentDensityOffsets = pFragmentDensityOffsets;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceScalarBlockLayoutFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceScalarBlockLayoutFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceScalarBlockLayoutFeatures;
        public void* pNext;
        public int scalarBlockLayout;
        public VkPhysicalDeviceScalarBlockLayoutFeatures() { }
        public VkPhysicalDeviceScalarBlockLayoutFeatures(VkStructureType sType, void* pNext, int scalarBlockLayout)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.scalarBlockLayout = scalarBlockLayout;
        }
    }
    /// <summary><b>[requires: VK_EXT_scalar_block_layout]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceScalarBlockLayoutFeaturesEXT
    {
        public VkPhysicalDeviceScalarBlockLayoutFeaturesEXT() { }
    }
    /// <summary><b>[requires: VK_KHR_surface_protected_capabilities]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSurfaceProtectedCapabilitiesKHR.html" /></remarks>
    public unsafe struct VkSurfaceProtectedCapabilitiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeSurfaceProtectedCapabilitiesKhr;
        public void* pNext;
        public int supportsProtected;
        public VkSurfaceProtectedCapabilitiesKHR() { }
        public VkSurfaceProtectedCapabilitiesKHR(VkStructureType sType, void* pNext, int supportsProtected)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.supportsProtected = supportsProtected;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceUniformBufferStandardLayoutFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceUniformBufferStandardLayoutFeatures;
        public void* pNext;
        public int uniformBufferStandardLayout;
        public VkPhysicalDeviceUniformBufferStandardLayoutFeatures() { }
        public VkPhysicalDeviceUniformBufferStandardLayoutFeatures(VkStructureType sType, void* pNext, int uniformBufferStandardLayout)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.uniformBufferStandardLayout = uniformBufferStandardLayout;
        }
    }
    /// <summary><b>[requires: VK_KHR_uniform_buffer_standard_layout]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR
    {
        public VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR() { }
    }
    /// <summary><b>[requires: VK_EXT_depth_clip_enable]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDepthClipEnableFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDepthClipEnableFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDepthClipEnableFeaturesExt;
        public void* pNext;
        public int depthClipEnable;
        public VkPhysicalDeviceDepthClipEnableFeaturesEXT() { }
        public VkPhysicalDeviceDepthClipEnableFeaturesEXT(VkStructureType sType, void* pNext, int depthClipEnable)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.depthClipEnable = depthClipEnable;
        }
    }
    /// <summary><b>[requires: VK_EXT_depth_clip_enable]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineRasterizationDepthClipStateCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineRasterizationDepthClipStateCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineRasterizationDepthClipStateCreateInfoExt;
        public void* pNext;
        public VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags;
        public int depthClipEnable;
        public VkPipelineRasterizationDepthClipStateCreateInfoEXT() { }
        public VkPipelineRasterizationDepthClipStateCreateInfoEXT(VkStructureType sType, void* pNext, VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags, int depthClipEnable)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.depthClipEnable = depthClipEnable;
        }
    }
    /// <summary><b>[requires: VK_EXT_memory_budget]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMemoryBudgetPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMemoryBudgetPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMemoryBudgetPropertiesExt;
        public void* pNext;
        public fixed ulong heapBudget[16];
        public fixed ulong heapUsage[16];
        public VkPhysicalDeviceMemoryBudgetPropertiesEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_memory_priority]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMemoryPriorityFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMemoryPriorityFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMemoryPriorityFeaturesExt;
        public void* pNext;
        public int memoryPriority;
        public VkPhysicalDeviceMemoryPriorityFeaturesEXT() { }
        public VkPhysicalDeviceMemoryPriorityFeaturesEXT(VkStructureType sType, void* pNext, int memoryPriority)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memoryPriority = memoryPriority;
        }
    }
    /// <summary><b>[requires: VK_EXT_memory_priority]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryPriorityAllocateInfoEXT.html" /></remarks>
    public unsafe struct VkMemoryPriorityAllocateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryPriorityAllocateInfoExt;
        public void* pNext;
        public float priority;
        public VkMemoryPriorityAllocateInfoEXT() { }
        public VkMemoryPriorityAllocateInfoEXT(VkStructureType sType, void* pNext, float priority)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.priority = priority;
        }
    }
    /// <summary><b>[requires: VK_EXT_pageable_device_local_memory]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePageableDeviceLocalMemoryFeaturesExt;
        public void* pNext;
        public int pageableDeviceLocalMemory;
        public VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT() { }
        public VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(VkStructureType sType, void* pNext, int pageableDeviceLocalMemory)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pageableDeviceLocalMemory = pageableDeviceLocalMemory;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBufferDeviceAddressFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceBufferDeviceAddressFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceBufferDeviceAddressFeatures;
        public void* pNext;
        public int bufferDeviceAddress;
        public int bufferDeviceAddressCaptureReplay;
        public int bufferDeviceAddressMultiDevice;
        public VkPhysicalDeviceBufferDeviceAddressFeatures() { }
        public VkPhysicalDeviceBufferDeviceAddressFeatures(VkStructureType sType, void* pNext, int bufferDeviceAddress, int bufferDeviceAddressCaptureReplay, int bufferDeviceAddressMultiDevice)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.bufferDeviceAddress = bufferDeviceAddress;
            this.bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay;
            this.bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice;
        }
    }
    /// <summary><b>[requires: VK_KHR_buffer_device_address]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBufferDeviceAddressFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceBufferDeviceAddressFeaturesKHR
    {
        public VkPhysicalDeviceBufferDeviceAddressFeaturesKHR() { }
    }
    /// <summary><b>[requires: VK_EXT_buffer_device_address]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceBufferDeviceAddressFeaturesExt;
        public void* pNext;
        public int bufferDeviceAddress;
        public int bufferDeviceAddressCaptureReplay;
        public int bufferDeviceAddressMultiDevice;
        public VkPhysicalDeviceBufferDeviceAddressFeaturesEXT() { }
        public VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(VkStructureType sType, void* pNext, int bufferDeviceAddress, int bufferDeviceAddressCaptureReplay, int bufferDeviceAddressMultiDevice)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.bufferDeviceAddress = bufferDeviceAddress;
            this.bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay;
            this.bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice;
        }
    }
    /// <summary><b>[requires: VK_EXT_buffer_device_address]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBufferAddressFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceBufferAddressFeaturesEXT
    {
        public VkPhysicalDeviceBufferAddressFeaturesEXT() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferDeviceAddressInfo.html" /></remarks>
    public unsafe struct VkBufferDeviceAddressInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferDeviceAddressInfo;
        public void* pNext;
        public VkBuffer buffer;
        public VkBufferDeviceAddressInfo() { }
        public VkBufferDeviceAddressInfo(VkStructureType sType, void* pNext, VkBuffer buffer)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.buffer = buffer;
        }
    }
    /// <summary><b>[requires: VK_KHR_buffer_device_address]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferDeviceAddressInfoKHR.html" /></remarks>
    public unsafe struct VkBufferDeviceAddressInfoKHR
    {
        public VkBufferDeviceAddressInfoKHR() { }
    }
    /// <summary><b>[requires: VK_EXT_buffer_device_address]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferDeviceAddressInfoEXT.html" /></remarks>
    public unsafe struct VkBufferDeviceAddressInfoEXT
    {
        public VkBufferDeviceAddressInfoEXT() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferOpaqueCaptureAddressCreateInfo.html" /></remarks>
    public unsafe struct VkBufferOpaqueCaptureAddressCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferOpaqueCaptureAddressCreateInfo;
        public void* pNext;
        public ulong opaqueCaptureAddress;
        public VkBufferOpaqueCaptureAddressCreateInfo() { }
        public VkBufferOpaqueCaptureAddressCreateInfo(VkStructureType sType, void* pNext, ulong opaqueCaptureAddress)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.opaqueCaptureAddress = opaqueCaptureAddress;
        }
    }
    /// <summary><b>[requires: VK_KHR_buffer_device_address]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferOpaqueCaptureAddressCreateInfoKHR.html" /></remarks>
    public unsafe struct VkBufferOpaqueCaptureAddressCreateInfoKHR
    {
        public VkBufferOpaqueCaptureAddressCreateInfoKHR() { }
    }
    /// <summary><b>[requires: VK_EXT_buffer_device_address]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferDeviceAddressCreateInfoEXT.html" /></remarks>
    public unsafe struct VkBufferDeviceAddressCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferDeviceAddressCreateInfoExt;
        public void* pNext;
        public ulong deviceAddress;
        public VkBufferDeviceAddressCreateInfoEXT() { }
        public VkBufferDeviceAddressCreateInfoEXT(VkStructureType sType, void* pNext, ulong deviceAddress)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.deviceAddress = deviceAddress;
        }
    }
    /// <summary><b>[requires: VK_EXT_filter_cubic]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageViewImageFormatInfoEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageViewImageFormatInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImageViewImageFormatInfoExt;
        public void* pNext;
        public VkImageViewType imageViewType;
        public VkPhysicalDeviceImageViewImageFormatInfoEXT() { }
        public VkPhysicalDeviceImageViewImageFormatInfoEXT(VkStructureType sType, void* pNext, VkImageViewType imageViewType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageViewType = imageViewType;
        }
    }
    /// <summary><b>[requires: VK_EXT_filter_cubic]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFilterCubicImageViewImageFormatPropertiesEXT.html" /></remarks>
    public unsafe struct VkFilterCubicImageViewImageFormatPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeFilterCubicImageViewImageFormatPropertiesExt;
        public void* pNext;
        public int filterCubic;
        public int filterCubicMinmax;
        public VkFilterCubicImageViewImageFormatPropertiesEXT() { }
        public VkFilterCubicImageViewImageFormatPropertiesEXT(VkStructureType sType, void* pNext, int filterCubic, int filterCubicMinmax)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.filterCubic = filterCubic;
            this.filterCubicMinmax = filterCubicMinmax;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImagelessFramebufferFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImagelessFramebufferFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImagelessFramebufferFeatures;
        public void* pNext;
        public int imagelessFramebuffer;
        public VkPhysicalDeviceImagelessFramebufferFeatures() { }
        public VkPhysicalDeviceImagelessFramebufferFeatures(VkStructureType sType, void* pNext, int imagelessFramebuffer)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imagelessFramebuffer = imagelessFramebuffer;
        }
    }
    /// <summary><b>[requires: VK_KHR_imageless_framebuffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImagelessFramebufferFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImagelessFramebufferFeaturesKHR
    {
        public VkPhysicalDeviceImagelessFramebufferFeaturesKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFramebufferAttachmentsCreateInfo.html" /></remarks>
    public unsafe struct VkFramebufferAttachmentsCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeFramebufferAttachmentsCreateInfo;
        public void* pNext;
        public uint attachmentImageInfoCount;
        public VkFramebufferAttachmentImageInfo* pAttachmentImageInfos;
        public VkFramebufferAttachmentsCreateInfo() { }
        public VkFramebufferAttachmentsCreateInfo(VkStructureType sType, void* pNext, uint attachmentImageInfoCount, VkFramebufferAttachmentImageInfo* pAttachmentImageInfos)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.attachmentImageInfoCount = attachmentImageInfoCount;
            this.pAttachmentImageInfos = pAttachmentImageInfos;
        }
    }
    /// <summary><b>[requires: VK_KHR_imageless_framebuffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFramebufferAttachmentsCreateInfoKHR.html" /></remarks>
    public unsafe struct VkFramebufferAttachmentsCreateInfoKHR
    {
        public VkFramebufferAttachmentsCreateInfoKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFramebufferAttachmentImageInfo.html" /></remarks>
    public unsafe struct VkFramebufferAttachmentImageInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeFramebufferAttachmentImageInfo;
        public void* pNext;
        public VkImageCreateFlagBits flags;
        public VkImageUsageFlagBits usage;
        public uint width;
        public uint height;
        public uint layerCount;
        public uint viewFormatCount;
        public VkFormat* pViewFormats;
        public VkFramebufferAttachmentImageInfo() { }
        public VkFramebufferAttachmentImageInfo(VkStructureType sType, void* pNext, VkImageCreateFlagBits flags, VkImageUsageFlagBits usage, uint width, uint height, uint layerCount, uint viewFormatCount, VkFormat* pViewFormats)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.usage = usage;
            this.width = width;
            this.height = height;
            this.layerCount = layerCount;
            this.viewFormatCount = viewFormatCount;
            this.pViewFormats = pViewFormats;
        }
    }
    /// <summary><b>[requires: VK_KHR_imageless_framebuffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFramebufferAttachmentImageInfoKHR.html" /></remarks>
    public unsafe struct VkFramebufferAttachmentImageInfoKHR
    {
        public VkFramebufferAttachmentImageInfoKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassAttachmentBeginInfo.html" /></remarks>
    public unsafe struct VkRenderPassAttachmentBeginInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderPassAttachmentBeginInfo;
        public void* pNext;
        public uint attachmentCount;
        public VkImageView* pAttachments;
        public VkRenderPassAttachmentBeginInfo() { }
        public VkRenderPassAttachmentBeginInfo(VkStructureType sType, void* pNext, uint attachmentCount, VkImageView* pAttachments)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.attachmentCount = attachmentCount;
            this.pAttachments = pAttachments;
        }
    }
    /// <summary><b>[requires: VK_KHR_imageless_framebuffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassAttachmentBeginInfoKHR.html" /></remarks>
    public unsafe struct VkRenderPassAttachmentBeginInfoKHR
    {
        public VkRenderPassAttachmentBeginInfoKHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTextureCompressionASTCHDRFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceTextureCompressionAstcHdrFeatures;
        public void* pNext;
        public int textureCompressionASTC_HDR;
        public VkPhysicalDeviceTextureCompressionASTCHDRFeatures() { }
        public VkPhysicalDeviceTextureCompressionASTCHDRFeatures(VkStructureType sType, void* pNext, int textureCompressionASTC_HDR)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.textureCompressionASTC_HDR = textureCompressionASTC_HDR;
        }
    }
    /// <summary><b>[requires: VK_EXT_texture_compression_astc_hdr]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
    {
        public VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT() { }
    }
    /// <summary><b>[requires: VK_NV_cooperative_matrix]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCooperativeMatrixFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCooperativeMatrixFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCooperativeMatrixFeaturesNv;
        public void* pNext;
        public int cooperativeMatrix;
        public int cooperativeMatrixRobustBufferAccess;
        public VkPhysicalDeviceCooperativeMatrixFeaturesNV() { }
        public VkPhysicalDeviceCooperativeMatrixFeaturesNV(VkStructureType sType, void* pNext, int cooperativeMatrix, int cooperativeMatrixRobustBufferAccess)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.cooperativeMatrix = cooperativeMatrix;
            this.cooperativeMatrixRobustBufferAccess = cooperativeMatrixRobustBufferAccess;
        }
    }
    /// <summary><b>[requires: VK_NV_cooperative_matrix]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCooperativeMatrixPropertiesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCooperativeMatrixPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCooperativeMatrixPropertiesNv;
        public void* pNext;
        public VkShaderStageFlagBits cooperativeMatrixSupportedStages;
        public VkPhysicalDeviceCooperativeMatrixPropertiesNV() { }
        public VkPhysicalDeviceCooperativeMatrixPropertiesNV(VkStructureType sType, void* pNext, VkShaderStageFlagBits cooperativeMatrixSupportedStages)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.cooperativeMatrixSupportedStages = cooperativeMatrixSupportedStages;
        }
    }
    /// <summary><b>[requires: VK_NV_cooperative_matrix]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCooperativeMatrixPropertiesNV.html" /></remarks>
    public unsafe struct VkCooperativeMatrixPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeCooperativeMatrixPropertiesNv;
        public void* pNext;
        public uint MSize;
        public uint NSize;
        public uint KSize;
        public VkComponentTypeKHR AType;
        public VkComponentTypeKHR BType;
        public VkComponentTypeKHR CType;
        public VkComponentTypeKHR DType;
        public VkScopeKHR scope;
        public VkCooperativeMatrixPropertiesNV() { }
        public VkCooperativeMatrixPropertiesNV(VkStructureType sType, void* pNext, uint MSize, uint NSize, uint KSize, VkComponentTypeKHR AType, VkComponentTypeKHR BType, VkComponentTypeKHR CType, VkComponentTypeKHR DType, VkScopeKHR scope)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.MSize = MSize;
            this.NSize = NSize;
            this.KSize = KSize;
            this.AType = AType;
            this.BType = BType;
            this.CType = CType;
            this.DType = DType;
            this.scope = scope;
        }
    }
    /// <summary><b>[requires: VK_EXT_ycbcr_image_arrays]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceYcbcrImageArraysFeaturesExt;
        public void* pNext;
        public int ycbcrImageArrays;
        public VkPhysicalDeviceYcbcrImageArraysFeaturesEXT() { }
        public VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(VkStructureType sType, void* pNext, int ycbcrImageArrays)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.ycbcrImageArrays = ycbcrImageArrays;
        }
    }
    /// <summary><b>[requires: VK_NVX_image_view_handle]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageViewHandleInfoNVX.html" /></remarks>
    public unsafe struct VkImageViewHandleInfoNVX
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageViewHandleInfoNvx;
        public void* pNext;
        public VkImageView imageView;
        public VkDescriptorType descriptorType;
        public VkSampler sampler;
        public VkImageViewHandleInfoNVX() { }
        public VkImageViewHandleInfoNVX(VkStructureType sType, void* pNext, VkImageView imageView, VkDescriptorType descriptorType, VkSampler sampler)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageView = imageView;
            this.descriptorType = descriptorType;
            this.sampler = sampler;
        }
    }
    /// <summary><b>[requires: VK_NVX_image_view_handle]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageViewAddressPropertiesNVX.html" /></remarks>
    public unsafe struct VkImageViewAddressPropertiesNVX
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageViewAddressPropertiesNvx;
        public void* pNext;
        public ulong deviceAddress;
        public ulong size;
        public VkImageViewAddressPropertiesNVX() { }
        public VkImageViewAddressPropertiesNVX(VkStructureType sType, void* pNext, ulong deviceAddress, ulong size)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.deviceAddress = deviceAddress;
            this.size = size;
        }
    }
    /// <summary><b>[requires: VK_GGP_frame_token]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPresentFrameTokenGGP.html" /></remarks>
    public unsafe struct VkPresentFrameTokenGGP
    {
        public VkStructureType sType = VkStructureType.StructureTypePresentFrameTokenGgp;
        public void* pNext;
        // Unsupported type for field frameToken
        public VkPresentFrameTokenGGP() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineCreationFeedback.html" /></remarks>
    public unsafe struct VkPipelineCreationFeedback
    {
        public VkPipelineCreationFeedbackFlagBits flags;
        public ulong duration;
        public VkPipelineCreationFeedback() { }
        public VkPipelineCreationFeedback(VkPipelineCreationFeedbackFlagBits flags, ulong duration)
        {
            this.flags = flags;
            this.duration = duration;
        }
    }
    /// <summary><b>[requires: VK_EXT_pipeline_creation_feedback]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineCreationFeedbackEXT.html" /></remarks>
    public unsafe struct VkPipelineCreationFeedbackEXT
    {
        public VkPipelineCreationFeedbackEXT() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineCreationFeedbackCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineCreationFeedbackCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineCreationFeedbackCreateInfo;
        public void* pNext;
        public VkPipelineCreationFeedback* pPipelineCreationFeedback;
        public uint pipelineStageCreationFeedbackCount;
        public VkPipelineCreationFeedback* pPipelineStageCreationFeedbacks;
        public VkPipelineCreationFeedbackCreateInfo() { }
        public VkPipelineCreationFeedbackCreateInfo(VkStructureType sType, void* pNext, VkPipelineCreationFeedback* pPipelineCreationFeedback, uint pipelineStageCreationFeedbackCount, VkPipelineCreationFeedback* pPipelineStageCreationFeedbacks)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pPipelineCreationFeedback = pPipelineCreationFeedback;
            this.pipelineStageCreationFeedbackCount = pipelineStageCreationFeedbackCount;
            this.pPipelineStageCreationFeedbacks = pPipelineStageCreationFeedbacks;
        }
    }
    /// <summary><b>[requires: VK_EXT_pipeline_creation_feedback]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineCreationFeedbackCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineCreationFeedbackCreateInfoEXT
    {
        public VkPipelineCreationFeedbackCreateInfoEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_full_screen_exclusive]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSurfaceFullScreenExclusiveInfoEXT.html" /></remarks>
    public unsafe struct VkSurfaceFullScreenExclusiveInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSurfaceFullScreenExclusiveInfoExt;
        public void* pNext;
        public VkFullScreenExclusiveEXT fullScreenExclusive;
        public VkSurfaceFullScreenExclusiveInfoEXT() { }
        public VkSurfaceFullScreenExclusiveInfoEXT(VkStructureType sType, void* pNext, VkFullScreenExclusiveEXT fullScreenExclusive)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fullScreenExclusive = fullScreenExclusive;
        }
    }
    /// <summary><b>[requires: VK_EXT_full_screen_exclusive]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSurfaceFullScreenExclusiveWin32InfoEXT.html" /></remarks>
    public unsafe struct VkSurfaceFullScreenExclusiveWin32InfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSurfaceFullScreenExclusiveWin32InfoExt;
        public void* pNext;
        public IntPtr hmonitor;
        public VkSurfaceFullScreenExclusiveWin32InfoEXT() { }
        public VkSurfaceFullScreenExclusiveWin32InfoEXT(VkStructureType sType, void* pNext, IntPtr hmonitor)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.hmonitor = hmonitor;
        }
    }
    /// <summary><b>[requires: VK_EXT_full_screen_exclusive]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSurfaceCapabilitiesFullScreenExclusiveEXT.html" /></remarks>
    public unsafe struct VkSurfaceCapabilitiesFullScreenExclusiveEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSurfaceCapabilitiesFullScreenExclusiveExt;
        public void* pNext;
        public int fullScreenExclusiveSupported;
        public VkSurfaceCapabilitiesFullScreenExclusiveEXT() { }
        public VkSurfaceCapabilitiesFullScreenExclusiveEXT(VkStructureType sType, void* pNext, int fullScreenExclusiveSupported)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fullScreenExclusiveSupported = fullScreenExclusiveSupported;
        }
    }
    /// <summary><b>[requires: VK_NV_present_barrier]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePresentBarrierFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDevicePresentBarrierFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePresentBarrierFeaturesNv;
        public void* pNext;
        public int presentBarrier;
        public VkPhysicalDevicePresentBarrierFeaturesNV() { }
        public VkPhysicalDevicePresentBarrierFeaturesNV(VkStructureType sType, void* pNext, int presentBarrier)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.presentBarrier = presentBarrier;
        }
    }
    /// <summary><b>[requires: VK_NV_present_barrier]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSurfaceCapabilitiesPresentBarrierNV.html" /></remarks>
    public unsafe struct VkSurfaceCapabilitiesPresentBarrierNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeSurfaceCapabilitiesPresentBarrierNv;
        public void* pNext;
        public int presentBarrierSupported;
        public VkSurfaceCapabilitiesPresentBarrierNV() { }
        public VkSurfaceCapabilitiesPresentBarrierNV(VkStructureType sType, void* pNext, int presentBarrierSupported)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.presentBarrierSupported = presentBarrierSupported;
        }
    }
    /// <summary><b>[requires: VK_NV_present_barrier]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSwapchainPresentBarrierCreateInfoNV.html" /></remarks>
    public unsafe struct VkSwapchainPresentBarrierCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeSwapchainPresentBarrierCreateInfoNv;
        public void* pNext;
        public int presentBarrierEnable;
        public VkSwapchainPresentBarrierCreateInfoNV() { }
        public VkSwapchainPresentBarrierCreateInfoNV(VkStructureType sType, void* pNext, int presentBarrierEnable)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.presentBarrierEnable = presentBarrierEnable;
        }
    }
    /// <summary><b>[requires: VK_KHR_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePerformanceQueryFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDevicePerformanceQueryFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePerformanceQueryFeaturesKhr;
        public void* pNext;
        public int performanceCounterQueryPools;
        public int performanceCounterMultipleQueryPools;
        public VkPhysicalDevicePerformanceQueryFeaturesKHR() { }
        public VkPhysicalDevicePerformanceQueryFeaturesKHR(VkStructureType sType, void* pNext, int performanceCounterQueryPools, int performanceCounterMultipleQueryPools)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.performanceCounterQueryPools = performanceCounterQueryPools;
            this.performanceCounterMultipleQueryPools = performanceCounterMultipleQueryPools;
        }
    }
    /// <summary><b>[requires: VK_KHR_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePerformanceQueryPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDevicePerformanceQueryPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePerformanceQueryPropertiesKhr;
        public void* pNext;
        public int allowCommandBufferQueryCopies;
        public VkPhysicalDevicePerformanceQueryPropertiesKHR() { }
        public VkPhysicalDevicePerformanceQueryPropertiesKHR(VkStructureType sType, void* pNext, int allowCommandBufferQueryCopies)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.allowCommandBufferQueryCopies = allowCommandBufferQueryCopies;
        }
    }
    /// <summary><b>[requires: VK_KHR_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPerformanceCounterKHR.html" /></remarks>
    public unsafe struct VkPerformanceCounterKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePerformanceCounterKhr;
        public void* pNext;
        public VkPerformanceCounterUnitKHR unit;
        public VkPerformanceCounterScopeKHR scope;
        public VkPerformanceCounterStorageKHR storage;
        public fixed byte uuid[16];
        public VkPerformanceCounterKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPerformanceCounterDescriptionKHR.html" /></remarks>
    public unsafe struct VkPerformanceCounterDescriptionKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePerformanceCounterDescriptionKhr;
        public void* pNext;
        public VkPerformanceCounterDescriptionFlagBitsKHR flags;
        public fixed byte name[256];
        public fixed byte category[256];
        public fixed byte description[256];
        public VkPerformanceCounterDescriptionKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkQueryPoolPerformanceCreateInfoKHR.html" /></remarks>
    public unsafe struct VkQueryPoolPerformanceCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeQueryPoolPerformanceCreateInfoKhr;
        public void* pNext;
        public uint queueFamilyIndex;
        public uint counterIndexCount;
        public uint* pCounterIndices;
        public VkQueryPoolPerformanceCreateInfoKHR() { }
        public VkQueryPoolPerformanceCreateInfoKHR(VkStructureType sType, void* pNext, uint queueFamilyIndex, uint counterIndexCount, uint* pCounterIndices)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.queueFamilyIndex = queueFamilyIndex;
            this.counterIndexCount = counterIndexCount;
            this.pCounterIndices = pCounterIndices;
        }
    }
    /// <summary><b>[requires: VK_KHR_performance_query]</b> Union of all the possible return types a counter result could return</summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPerformanceCounterResultKHR.html" /></remarks>
    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct VkPerformanceCounterResultKHR
    {
        [FieldOffset(0)]
        public int int32;
        [FieldOffset(0)]
        public long int64;
        [FieldOffset(0)]
        public uint uint32;
        [FieldOffset(0)]
        public ulong uint64;
        [FieldOffset(0)]
        public float float32;
        [FieldOffset(0)]
        public double float64;
        public VkPerformanceCounterResultKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAcquireProfilingLockInfoKHR.html" /></remarks>
    public unsafe struct VkAcquireProfilingLockInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeAcquireProfilingLockInfoKhr;
        public void* pNext;
        public VkAcquireProfilingLockFlagBitsKHR flags;
        public ulong timeout;
        public VkAcquireProfilingLockInfoKHR() { }
        public VkAcquireProfilingLockInfoKHR(VkStructureType sType, void* pNext, VkAcquireProfilingLockFlagBitsKHR flags, ulong timeout)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.timeout = timeout;
        }
    }
    /// <summary><b>[requires: VK_KHR_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPerformanceQuerySubmitInfoKHR.html" /></remarks>
    public unsafe struct VkPerformanceQuerySubmitInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePerformanceQuerySubmitInfoKhr;
        public void* pNext;
        public uint counterPassIndex;
        public VkPerformanceQuerySubmitInfoKHR() { }
        public VkPerformanceQuerySubmitInfoKHR(VkStructureType sType, void* pNext, uint counterPassIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.counterPassIndex = counterPassIndex;
        }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPerformanceQueryReservationInfoKHR.html" /></remarks>
    public unsafe struct VkPerformanceQueryReservationInfoKHR
    {
        public VkStructureType sType;
        public void* pNext;
        public uint maxPerformanceQueriesPerPool;
        public VkPerformanceQueryReservationInfoKHR() { }
        public VkPerformanceQueryReservationInfoKHR(VkStructureType sType, void* pNext, uint maxPerformanceQueriesPerPool)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxPerformanceQueriesPerPool = maxPerformanceQueriesPerPool;
        }
    }
    /// <summary><b>[requires: VK_EXT_headless_surface]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkHeadlessSurfaceCreateInfoEXT.html" /></remarks>
    public unsafe struct VkHeadlessSurfaceCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeHeadlessSurfaceCreateInfoExt;
        public void* pNext;
        public VkHeadlessSurfaceCreateFlagsEXT flags;
        public VkHeadlessSurfaceCreateInfoEXT() { }
        public VkHeadlessSurfaceCreateInfoEXT(VkStructureType sType, void* pNext, VkHeadlessSurfaceCreateFlagsEXT flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: VK_NV_coverage_reduction_mode]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCoverageReductionModeFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCoverageReductionModeFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCoverageReductionModeFeaturesNv;
        public void* pNext;
        public int coverageReductionMode;
        public VkPhysicalDeviceCoverageReductionModeFeaturesNV() { }
        public VkPhysicalDeviceCoverageReductionModeFeaturesNV(VkStructureType sType, void* pNext, int coverageReductionMode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.coverageReductionMode = coverageReductionMode;
        }
    }
    /// <summary><b>[requires: VK_NV_coverage_reduction_mode]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineCoverageReductionStateCreateInfoNV.html" /></remarks>
    public unsafe struct VkPipelineCoverageReductionStateCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineCoverageReductionStateCreateInfoNv;
        public void* pNext;
        public VkPipelineCoverageReductionStateCreateFlagsNV flags;
        public VkCoverageReductionModeNV coverageReductionMode;
        public VkPipelineCoverageReductionStateCreateInfoNV() { }
        public VkPipelineCoverageReductionStateCreateInfoNV(VkStructureType sType, void* pNext, VkPipelineCoverageReductionStateCreateFlagsNV flags, VkCoverageReductionModeNV coverageReductionMode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.coverageReductionMode = coverageReductionMode;
        }
    }
    /// <summary><b>[requires: VK_NV_coverage_reduction_mode]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFramebufferMixedSamplesCombinationNV.html" /></remarks>
    public unsafe struct VkFramebufferMixedSamplesCombinationNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeFramebufferMixedSamplesCombinationNv;
        public void* pNext;
        public VkCoverageReductionModeNV coverageReductionMode;
        public VkSampleCountFlagBits rasterizationSamples;
        public VkSampleCountFlagBits depthStencilSamples;
        public VkSampleCountFlagBits colorSamples;
        public VkFramebufferMixedSamplesCombinationNV() { }
        public VkFramebufferMixedSamplesCombinationNV(VkStructureType sType, void* pNext, VkCoverageReductionModeNV coverageReductionMode, VkSampleCountFlagBits rasterizationSamples, VkSampleCountFlagBits depthStencilSamples, VkSampleCountFlagBits colorSamples)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.coverageReductionMode = coverageReductionMode;
            this.rasterizationSamples = rasterizationSamples;
            this.depthStencilSamples = depthStencilSamples;
            this.colorSamples = colorSamples;
        }
    }
    /// <summary><b>[requires: VK_INTEL_shader_integer_functions2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderIntegerFunctions2FeaturesIntel;
        public void* pNext;
        public int shaderIntegerFunctions2;
        public VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL() { }
        public VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(VkStructureType sType, void* pNext, int shaderIntegerFunctions2)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderIntegerFunctions2 = shaderIntegerFunctions2;
        }
    }
    /// <summary><b>[requires: VK_INTEL_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPerformanceValueDataINTEL.html" /></remarks>
    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct VkPerformanceValueDataINTEL
    {
        [FieldOffset(0)]
        public uint value32;
        [FieldOffset(0)]
        public ulong value64;
        [FieldOffset(0)]
        public float valueFloat;
        [FieldOffset(0)]
        public int valueBool;
        [FieldOffset(0)]
        public byte* valueString;
        public VkPerformanceValueDataINTEL() { }
    }
    /// <summary><b>[requires: VK_INTEL_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPerformanceValueINTEL.html" /></remarks>
    public unsafe struct VkPerformanceValueINTEL
    {
        public VkPerformanceValueTypeINTEL type;
        public VkPerformanceValueDataINTEL data;
        public VkPerformanceValueINTEL() { }
        public VkPerformanceValueINTEL(VkPerformanceValueTypeINTEL type, VkPerformanceValueDataINTEL data)
        {
            this.type = type;
            this.data = data;
        }
    }
    /// <summary><b>[requires: VK_INTEL_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkInitializePerformanceApiInfoINTEL.html" /></remarks>
    public unsafe struct VkInitializePerformanceApiInfoINTEL
    {
        public VkStructureType sType = VkStructureType.StructureTypeInitializePerformanceApiInfoIntel;
        public void* pNext;
        public void* pUserData;
        public VkInitializePerformanceApiInfoINTEL() { }
        public VkInitializePerformanceApiInfoINTEL(VkStructureType sType, void* pNext, void* pUserData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pUserData = pUserData;
        }
    }
    /// <summary><b>[requires: VK_INTEL_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkQueryPoolPerformanceQueryCreateInfoINTEL.html" /></remarks>
    public unsafe struct VkQueryPoolPerformanceQueryCreateInfoINTEL
    {
        public VkStructureType sType = VkStructureType.StructureTypeQueryPoolPerformanceQueryCreateInfoIntel;
        public void* pNext;
        public VkQueryPoolSamplingModeINTEL performanceCountersSampling;
        public VkQueryPoolPerformanceQueryCreateInfoINTEL() { }
        public VkQueryPoolPerformanceQueryCreateInfoINTEL(VkStructureType sType, void* pNext, VkQueryPoolSamplingModeINTEL performanceCountersSampling)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.performanceCountersSampling = performanceCountersSampling;
        }
    }
    /// <summary><b>[requires: VK_INTEL_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkQueryPoolCreateInfoINTEL.html" /></remarks>
    public unsafe struct VkQueryPoolCreateInfoINTEL
    {
        public VkQueryPoolCreateInfoINTEL() { }
    }
    /// <summary><b>[requires: VK_INTEL_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPerformanceMarkerInfoINTEL.html" /></remarks>
    public unsafe struct VkPerformanceMarkerInfoINTEL
    {
        public VkStructureType sType = VkStructureType.StructureTypePerformanceMarkerInfoIntel;
        public void* pNext;
        public ulong marker;
        public VkPerformanceMarkerInfoINTEL() { }
        public VkPerformanceMarkerInfoINTEL(VkStructureType sType, void* pNext, ulong marker)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.marker = marker;
        }
    }
    /// <summary><b>[requires: VK_INTEL_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPerformanceStreamMarkerInfoINTEL.html" /></remarks>
    public unsafe struct VkPerformanceStreamMarkerInfoINTEL
    {
        public VkStructureType sType = VkStructureType.StructureTypePerformanceStreamMarkerInfoIntel;
        public void* pNext;
        public uint marker;
        public VkPerformanceStreamMarkerInfoINTEL() { }
        public VkPerformanceStreamMarkerInfoINTEL(VkStructureType sType, void* pNext, uint marker)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.marker = marker;
        }
    }
    /// <summary><b>[requires: VK_INTEL_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPerformanceOverrideInfoINTEL.html" /></remarks>
    public unsafe struct VkPerformanceOverrideInfoINTEL
    {
        public VkStructureType sType = VkStructureType.StructureTypePerformanceOverrideInfoIntel;
        public void* pNext;
        public VkPerformanceOverrideTypeINTEL type;
        public int enable;
        public ulong parameter;
        public VkPerformanceOverrideInfoINTEL() { }
        public VkPerformanceOverrideInfoINTEL(VkStructureType sType, void* pNext, VkPerformanceOverrideTypeINTEL type, int enable, ulong parameter)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.type = type;
            this.enable = enable;
            this.parameter = parameter;
        }
    }
    /// <summary><b>[requires: VK_INTEL_performance_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPerformanceConfigurationAcquireInfoINTEL.html" /></remarks>
    public unsafe struct VkPerformanceConfigurationAcquireInfoINTEL
    {
        public VkStructureType sType = VkStructureType.StructureTypePerformanceConfigurationAcquireInfoIntel;
        public void* pNext;
        public VkPerformanceConfigurationTypeINTEL type;
        public VkPerformanceConfigurationAcquireInfoINTEL() { }
        public VkPerformanceConfigurationAcquireInfoINTEL(VkStructureType sType, void* pNext, VkPerformanceConfigurationTypeINTEL type)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.type = type;
        }
    }
    /// <summary><b>[requires: VK_KHR_shader_clock]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderClockFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderClockFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderClockFeaturesKhr;
        public void* pNext;
        public int shaderSubgroupClock;
        public int shaderDeviceClock;
        public VkPhysicalDeviceShaderClockFeaturesKHR() { }
        public VkPhysicalDeviceShaderClockFeaturesKHR(VkStructureType sType, void* pNext, int shaderSubgroupClock, int shaderDeviceClock)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderSubgroupClock = shaderSubgroupClock;
            this.shaderDeviceClock = shaderDeviceClock;
        }
    }
    /// <summary><b>[requires: VK_KHR_index_type_uint8]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceIndexTypeUint8FeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceIndexTypeUint8FeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceIndexTypeUint8FeaturesKhr;
        public void* pNext;
        public int indexTypeUint8;
        public VkPhysicalDeviceIndexTypeUint8FeaturesKHR() { }
        public VkPhysicalDeviceIndexTypeUint8FeaturesKHR(VkStructureType sType, void* pNext, int indexTypeUint8)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.indexTypeUint8 = indexTypeUint8;
        }
    }
    /// <summary><b>[requires: VK_EXT_index_type_uint8]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceIndexTypeUint8FeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT
    {
        public VkPhysicalDeviceIndexTypeUint8FeaturesEXT() { }
    }
    /// <summary><b>[requires: VK_NV_shader_sm_builtins]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderSmBuiltinsPropertiesNv;
        public void* pNext;
        public uint shaderSMCount;
        public uint shaderWarpsPerSM;
        public VkPhysicalDeviceShaderSMBuiltinsPropertiesNV() { }
        public VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(VkStructureType sType, void* pNext, uint shaderSMCount, uint shaderWarpsPerSM)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderSMCount = shaderSMCount;
            this.shaderWarpsPerSM = shaderWarpsPerSM;
        }
    }
    /// <summary><b>[requires: VK_NV_shader_sm_builtins]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderSmBuiltinsFeaturesNv;
        public void* pNext;
        public int shaderSMBuiltins;
        public VkPhysicalDeviceShaderSMBuiltinsFeaturesNV() { }
        public VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(VkStructureType sType, void* pNext, int shaderSMBuiltins)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderSMBuiltins = shaderSMBuiltins;
        }
    }
    /// <summary><b>[requires: VK_EXT_fragment_shader_interlock]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFragmentShaderInterlockFeaturesExt;
        public void* pNext;
        public int fragmentShaderSampleInterlock;
        public int fragmentShaderPixelInterlock;
        public int fragmentShaderShadingRateInterlock;
        public VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT() { }
        public VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(VkStructureType sType, void* pNext, int fragmentShaderSampleInterlock, int fragmentShaderPixelInterlock, int fragmentShaderShadingRateInterlock)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fragmentShaderSampleInterlock = fragmentShaderSampleInterlock;
            this.fragmentShaderPixelInterlock = fragmentShaderPixelInterlock;
            this.fragmentShaderShadingRateInterlock = fragmentShaderShadingRateInterlock;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSeparateDepthStencilLayoutsFeatures;
        public void* pNext;
        public int separateDepthStencilLayouts;
        public VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures() { }
        public VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(VkStructureType sType, void* pNext, int separateDepthStencilLayouts)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.separateDepthStencilLayouts = separateDepthStencilLayouts;
        }
    }
    /// <summary><b>[requires: VK_KHR_separate_depth_stencil_layouts]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR
    {
        public VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAttachmentReferenceStencilLayout.html" /></remarks>
    public unsafe struct VkAttachmentReferenceStencilLayout
    {
        public VkStructureType sType = VkStructureType.StructureTypeAttachmentReferenceStencilLayout;
        public void* pNext;
        public VkImageLayout stencilLayout;
        public VkAttachmentReferenceStencilLayout() { }
        public VkAttachmentReferenceStencilLayout(VkStructureType sType, void* pNext, VkImageLayout stencilLayout)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stencilLayout = stencilLayout;
        }
    }
    /// <summary><b>[requires: VK_EXT_primitive_topology_list_restart]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePrimitiveTopologyListRestartFeaturesExt;
        public void* pNext;
        public int primitiveTopologyListRestart;
        public int primitiveTopologyPatchListRestart;
        public VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT() { }
        public VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(VkStructureType sType, void* pNext, int primitiveTopologyListRestart, int primitiveTopologyPatchListRestart)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.primitiveTopologyListRestart = primitiveTopologyListRestart;
            this.primitiveTopologyPatchListRestart = primitiveTopologyPatchListRestart;
        }
    }
    /// <summary><b>[requires: VK_KHR_separate_depth_stencil_layouts]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAttachmentReferenceStencilLayoutKHR.html" /></remarks>
    public unsafe struct VkAttachmentReferenceStencilLayoutKHR
    {
        public VkAttachmentReferenceStencilLayoutKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAttachmentDescriptionStencilLayout.html" /></remarks>
    public unsafe struct VkAttachmentDescriptionStencilLayout
    {
        public VkStructureType sType = VkStructureType.StructureTypeAttachmentDescriptionStencilLayout;
        public void* pNext;
        public VkImageLayout stencilInitialLayout;
        public VkImageLayout stencilFinalLayout;
        public VkAttachmentDescriptionStencilLayout() { }
        public VkAttachmentDescriptionStencilLayout(VkStructureType sType, void* pNext, VkImageLayout stencilInitialLayout, VkImageLayout stencilFinalLayout)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stencilInitialLayout = stencilInitialLayout;
            this.stencilFinalLayout = stencilFinalLayout;
        }
    }
    /// <summary><b>[requires: VK_KHR_separate_depth_stencil_layouts]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAttachmentDescriptionStencilLayoutKHR.html" /></remarks>
    public unsafe struct VkAttachmentDescriptionStencilLayoutKHR
    {
        public VkAttachmentDescriptionStencilLayoutKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_executable_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePipelineExecutablePropertiesFeaturesKhr;
        public void* pNext;
        public int pipelineExecutableInfo;
        public VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR() { }
        public VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(VkStructureType sType, void* pNext, int pipelineExecutableInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipelineExecutableInfo = pipelineExecutableInfo;
        }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_executable_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineInfoKHR.html" /></remarks>
    public unsafe struct VkPipelineInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineInfoKhr;
        public void* pNext;
        public VkPipeline pipeline;
        public VkPipelineInfoKHR() { }
        public VkPipelineInfoKHR(VkStructureType sType, void* pNext, VkPipeline pipeline)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipeline = pipeline;
        }
    }
    /// <summary><b>[requires: VK_EXT_pipeline_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineInfoEXT
    {
        public VkPipelineInfoEXT() { }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_executable_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineExecutablePropertiesKHR.html" /></remarks>
    public unsafe struct VkPipelineExecutablePropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineExecutablePropertiesKhr;
        public void* pNext;
        public VkShaderStageFlagBits stages;
        public fixed byte name[256];
        public fixed byte description[256];
        public uint subgroupSize;
        public VkPipelineExecutablePropertiesKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_executable_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineExecutableInfoKHR.html" /></remarks>
    public unsafe struct VkPipelineExecutableInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineExecutableInfoKhr;
        public void* pNext;
        public VkPipeline pipeline;
        public uint executableIndex;
        public VkPipelineExecutableInfoKHR() { }
        public VkPipelineExecutableInfoKHR(VkStructureType sType, void* pNext, VkPipeline pipeline, uint executableIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipeline = pipeline;
            this.executableIndex = executableIndex;
        }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_executable_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineExecutableStatisticValueKHR.html" /></remarks>
    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct VkPipelineExecutableStatisticValueKHR
    {
        [FieldOffset(0)]
        public int b32;
        [FieldOffset(0)]
        public long i64;
        [FieldOffset(0)]
        public ulong u64;
        [FieldOffset(0)]
        public double f64;
        public VkPipelineExecutableStatisticValueKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_executable_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineExecutableStatisticKHR.html" /></remarks>
    public unsafe struct VkPipelineExecutableStatisticKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineExecutableStatisticKhr;
        public void* pNext;
        public fixed byte name[256];
        public fixed byte description[256];
        public VkPipelineExecutableStatisticFormatKHR format;
        public VkPipelineExecutableStatisticValueKHR value;
        public VkPipelineExecutableStatisticKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_executable_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineExecutableInternalRepresentationKHR.html" /></remarks>
    public unsafe struct VkPipelineExecutableInternalRepresentationKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineExecutableInternalRepresentationKhr;
        public void* pNext;
        public fixed byte name[256];
        public fixed byte description[256];
        public int isText;
        public nuint dataSize;
        public void* pData;
        public VkPipelineExecutableInternalRepresentationKHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderDemoteToHelperInvocationFeatures;
        public void* pNext;
        public int shaderDemoteToHelperInvocation;
        public VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures() { }
        public VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(VkStructureType sType, void* pNext, int shaderDemoteToHelperInvocation)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderDemoteToHelperInvocation = shaderDemoteToHelperInvocation;
        }
    }
    /// <summary><b>[requires: VK_EXT_shader_demote_to_helper_invocation]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
    {
        public VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_texel_buffer_alignment]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceTexelBufferAlignmentFeaturesExt;
        public void* pNext;
        public int texelBufferAlignment;
        public VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT() { }
        public VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(VkStructureType sType, void* pNext, int texelBufferAlignment)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.texelBufferAlignment = texelBufferAlignment;
        }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTexelBufferAlignmentProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceTexelBufferAlignmentProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceTexelBufferAlignmentProperties;
        public void* pNext;
        public ulong storageTexelBufferOffsetAlignmentBytes;
        public int storageTexelBufferOffsetSingleTexelAlignment;
        public ulong uniformTexelBufferOffsetAlignmentBytes;
        public int uniformTexelBufferOffsetSingleTexelAlignment;
        public VkPhysicalDeviceTexelBufferAlignmentProperties() { }
        public VkPhysicalDeviceTexelBufferAlignmentProperties(VkStructureType sType, void* pNext, ulong storageTexelBufferOffsetAlignmentBytes, int storageTexelBufferOffsetSingleTexelAlignment, ulong uniformTexelBufferOffsetAlignmentBytes, int uniformTexelBufferOffsetSingleTexelAlignment)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.storageTexelBufferOffsetAlignmentBytes = storageTexelBufferOffsetAlignmentBytes;
            this.storageTexelBufferOffsetSingleTexelAlignment = storageTexelBufferOffsetSingleTexelAlignment;
            this.uniformTexelBufferOffsetAlignmentBytes = uniformTexelBufferOffsetAlignmentBytes;
            this.uniformTexelBufferOffsetSingleTexelAlignment = uniformTexelBufferOffsetSingleTexelAlignment;
        }
    }
    /// <summary><b>[requires: VK_EXT_texel_buffer_alignment]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT
    {
        public VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSubgroupSizeControlFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSubgroupSizeControlFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSubgroupSizeControlFeatures;
        public void* pNext;
        public int subgroupSizeControl;
        public int computeFullSubgroups;
        public VkPhysicalDeviceSubgroupSizeControlFeatures() { }
        public VkPhysicalDeviceSubgroupSizeControlFeatures(VkStructureType sType, void* pNext, int subgroupSizeControl, int computeFullSubgroups)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.subgroupSizeControl = subgroupSizeControl;
            this.computeFullSubgroups = computeFullSubgroups;
        }
    }
    /// <summary><b>[requires: VK_EXT_subgroup_size_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSubgroupSizeControlFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
    {
        public VkPhysicalDeviceSubgroupSizeControlFeaturesEXT() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSubgroupSizeControlProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSubgroupSizeControlProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSubgroupSizeControlProperties;
        public void* pNext;
        public uint minSubgroupSize;
        public uint maxSubgroupSize;
        public uint maxComputeWorkgroupSubgroups;
        public VkShaderStageFlagBits requiredSubgroupSizeStages;
        public VkPhysicalDeviceSubgroupSizeControlProperties() { }
        public VkPhysicalDeviceSubgroupSizeControlProperties(VkStructureType sType, void* pNext, uint minSubgroupSize, uint maxSubgroupSize, uint maxComputeWorkgroupSubgroups, VkShaderStageFlagBits requiredSubgroupSizeStages)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.minSubgroupSize = minSubgroupSize;
            this.maxSubgroupSize = maxSubgroupSize;
            this.maxComputeWorkgroupSubgroups = maxComputeWorkgroupSubgroups;
            this.requiredSubgroupSizeStages = requiredSubgroupSizeStages;
        }
    }
    /// <summary><b>[requires: VK_EXT_subgroup_size_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSubgroupSizeControlPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSubgroupSizeControlPropertiesEXT
    {
        public VkPhysicalDeviceSubgroupSizeControlPropertiesEXT() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineShaderStageRequiredSubgroupSizeCreateInfo;
        public void* pNext;
        public uint requiredSubgroupSize;
        public VkPipelineShaderStageRequiredSubgroupSizeCreateInfo() { }
        public VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(VkStructureType sType, void* pNext, uint requiredSubgroupSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.requiredSubgroupSize = requiredSubgroupSize;
        }
    }
    /// <summary><b>[requires: VK_EXT_subgroup_size_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
    {
        public VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_shader_object]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkShaderRequiredSubgroupSizeCreateInfoEXT.html" /></remarks>
    public unsafe struct VkShaderRequiredSubgroupSizeCreateInfoEXT
    {
        public VkShaderRequiredSubgroupSizeCreateInfoEXT() { }
    }
    /// <summary><b>[requires: VK_HUAWEI_subpass_shading]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassShadingPipelineCreateInfoHUAWEI.html" /></remarks>
    public unsafe struct VkSubpassShadingPipelineCreateInfoHUAWEI
    {
        public VkStructureType sType = VkStructureType.StructureTypeSubpassShadingPipelineCreateInfoHuawei;
        public void* pNext;
        public VkRenderPass renderPass;
        public uint subpass;
        public VkSubpassShadingPipelineCreateInfoHUAWEI() { }
        public VkSubpassShadingPipelineCreateInfoHUAWEI(VkStructureType sType, void* pNext, VkRenderPass renderPass, uint subpass)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.renderPass = renderPass;
            this.subpass = subpass;
        }
    }
    /// <summary><b>[requires: VK_HUAWEI_subpass_shading]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSubpassShadingPropertiesHUAWEI.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSubpassShadingPropertiesHuawei;
        public void* pNext;
        public uint maxSubpassShadingWorkgroupSizeAspectRatio;
        public VkPhysicalDeviceSubpassShadingPropertiesHUAWEI() { }
        public VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(VkStructureType sType, void* pNext, uint maxSubpassShadingWorkgroupSizeAspectRatio)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxSubpassShadingWorkgroupSizeAspectRatio = maxSubpassShadingWorkgroupSizeAspectRatio;
        }
    }
    /// <summary><b>[requires: VK_HUAWEI_cluster_culling_shader]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI.html" /></remarks>
    public unsafe struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceClusterCullingShaderPropertiesHuawei;
        public void* pNext;
        public fixed uint maxWorkGroupCount[3];
        public fixed uint maxWorkGroupSize[3];
        public uint maxOutputClusterCount;
        public ulong indirectBufferOffsetAlignment;
        public VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryOpaqueCaptureAddressAllocateInfo.html" /></remarks>
    public unsafe struct VkMemoryOpaqueCaptureAddressAllocateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryOpaqueCaptureAddressAllocateInfo;
        public void* pNext;
        public ulong opaqueCaptureAddress;
        public VkMemoryOpaqueCaptureAddressAllocateInfo() { }
        public VkMemoryOpaqueCaptureAddressAllocateInfo(VkStructureType sType, void* pNext, ulong opaqueCaptureAddress)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.opaqueCaptureAddress = opaqueCaptureAddress;
        }
    }
    /// <summary><b>[requires: VK_KHR_buffer_device_address]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryOpaqueCaptureAddressAllocateInfoKHR.html" /></remarks>
    public unsafe struct VkMemoryOpaqueCaptureAddressAllocateInfoKHR
    {
        public VkMemoryOpaqueCaptureAddressAllocateInfoKHR() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceMemoryOpaqueCaptureAddressInfo.html" /></remarks>
    public unsafe struct VkDeviceMemoryOpaqueCaptureAddressInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceMemoryOpaqueCaptureAddressInfo;
        public void* pNext;
        public VkDeviceMemory memory;
        public VkDeviceMemoryOpaqueCaptureAddressInfo() { }
        public VkDeviceMemoryOpaqueCaptureAddressInfo(VkStructureType sType, void* pNext, VkDeviceMemory memory)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memory = memory;
        }
    }
    /// <summary><b>[requires: VK_KHR_buffer_device_address]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceMemoryOpaqueCaptureAddressInfoKHR.html" /></remarks>
    public unsafe struct VkDeviceMemoryOpaqueCaptureAddressInfoKHR
    {
        public VkDeviceMemoryOpaqueCaptureAddressInfoKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_line_rasterization]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLineRasterizationFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceLineRasterizationFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceLineRasterizationFeaturesKhr;
        public void* pNext;
        public int rectangularLines;
        public int bresenhamLines;
        public int smoothLines;
        public int stippledRectangularLines;
        public int stippledBresenhamLines;
        public int stippledSmoothLines;
        public VkPhysicalDeviceLineRasterizationFeaturesKHR() { }
        public VkPhysicalDeviceLineRasterizationFeaturesKHR(VkStructureType sType, void* pNext, int rectangularLines, int bresenhamLines, int smoothLines, int stippledRectangularLines, int stippledBresenhamLines, int stippledSmoothLines)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.rectangularLines = rectangularLines;
            this.bresenhamLines = bresenhamLines;
            this.smoothLines = smoothLines;
            this.stippledRectangularLines = stippledRectangularLines;
            this.stippledBresenhamLines = stippledBresenhamLines;
            this.stippledSmoothLines = stippledSmoothLines;
        }
    }
    /// <summary><b>[requires: VK_EXT_line_rasterization]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLineRasterizationFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceLineRasterizationFeaturesEXT
    {
        public VkPhysicalDeviceLineRasterizationFeaturesEXT() { }
    }
    /// <summary><b>[requires: VK_KHR_line_rasterization]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLineRasterizationPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceLineRasterizationPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceLineRasterizationPropertiesKhr;
        public void* pNext;
        public uint lineSubPixelPrecisionBits;
        public VkPhysicalDeviceLineRasterizationPropertiesKHR() { }
        public VkPhysicalDeviceLineRasterizationPropertiesKHR(VkStructureType sType, void* pNext, uint lineSubPixelPrecisionBits)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.lineSubPixelPrecisionBits = lineSubPixelPrecisionBits;
        }
    }
    /// <summary><b>[requires: VK_EXT_line_rasterization]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLineRasterizationPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceLineRasterizationPropertiesEXT
    {
        public VkPhysicalDeviceLineRasterizationPropertiesEXT() { }
    }
    /// <summary><b>[requires: VK_KHR_line_rasterization]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineRasterizationLineStateCreateInfoKHR.html" /></remarks>
    public unsafe struct VkPipelineRasterizationLineStateCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineRasterizationLineStateCreateInfoKhr;
        public void* pNext;
        public VkLineRasterizationModeKHR lineRasterizationMode;
        public int stippledLineEnable;
        public uint lineStippleFactor;
        public ushort lineStipplePattern;
        public VkPipelineRasterizationLineStateCreateInfoKHR() { }
        public VkPipelineRasterizationLineStateCreateInfoKHR(VkStructureType sType, void* pNext, VkLineRasterizationModeKHR lineRasterizationMode, int stippledLineEnable, uint lineStippleFactor, ushort lineStipplePattern)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.lineRasterizationMode = lineRasterizationMode;
            this.stippledLineEnable = stippledLineEnable;
            this.lineStippleFactor = lineStippleFactor;
            this.lineStipplePattern = lineStipplePattern;
        }
    }
    /// <summary><b>[requires: VK_EXT_line_rasterization]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineRasterizationLineStateCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineRasterizationLineStateCreateInfoEXT
    {
        public VkPipelineRasterizationLineStateCreateInfoEXT() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineCreationCacheControlFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDevicePipelineCreationCacheControlFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePipelineCreationCacheControlFeatures;
        public void* pNext;
        public int pipelineCreationCacheControl;
        public VkPhysicalDevicePipelineCreationCacheControlFeatures() { }
        public VkPhysicalDevicePipelineCreationCacheControlFeatures(VkStructureType sType, void* pNext, int pipelineCreationCacheControl)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipelineCreationCacheControl = pipelineCreationCacheControl;
        }
    }
    /// <summary><b>[requires: VK_EXT_pipeline_creation_cache_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT
    {
        public VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Features.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVulkan11Features
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceVulkan11Features;
        public void* pNext;
        public int storageBuffer16BitAccess;
        public int uniformAndStorageBuffer16BitAccess;
        public int storagePushConstant16;
        public int storageInputOutput16;
        public int multiview;
        public int multiviewGeometryShader;
        public int multiviewTessellationShader;
        public int variablePointersStorageBuffer;
        public int variablePointers;
        public int protectedMemory;
        public int samplerYcbcrConversion;
        public int shaderDrawParameters;
        public VkPhysicalDeviceVulkan11Features() { }
        public VkPhysicalDeviceVulkan11Features(VkStructureType sType, void* pNext, int storageBuffer16BitAccess, int uniformAndStorageBuffer16BitAccess, int storagePushConstant16, int storageInputOutput16, int multiview, int multiviewGeometryShader, int multiviewTessellationShader, int variablePointersStorageBuffer, int variablePointers, int protectedMemory, int samplerYcbcrConversion, int shaderDrawParameters)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.storageBuffer16BitAccess = storageBuffer16BitAccess;
            this.uniformAndStorageBuffer16BitAccess = uniformAndStorageBuffer16BitAccess;
            this.storagePushConstant16 = storagePushConstant16;
            this.storageInputOutput16 = storageInputOutput16;
            this.multiview = multiview;
            this.multiviewGeometryShader = multiviewGeometryShader;
            this.multiviewTessellationShader = multiviewTessellationShader;
            this.variablePointersStorageBuffer = variablePointersStorageBuffer;
            this.variablePointers = variablePointers;
            this.protectedMemory = protectedMemory;
            this.samplerYcbcrConversion = samplerYcbcrConversion;
            this.shaderDrawParameters = shaderDrawParameters;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVulkan11Properties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceVulkan11Properties;
        public void* pNext;
        public fixed byte deviceUUID[16];
        public fixed byte driverUUID[16];
        public fixed byte deviceLUID[8];
        public uint deviceNodeMask;
        public int deviceLUIDValid;
        public uint subgroupSize;
        public VkShaderStageFlagBits subgroupSupportedStages;
        public VkSubgroupFeatureFlagBits subgroupSupportedOperations;
        public int subgroupQuadOperationsInAllStages;
        public VkPointClippingBehavior pointClippingBehavior;
        public uint maxMultiviewViewCount;
        public uint maxMultiviewInstanceIndex;
        public int protectedNoFault;
        public uint maxPerSetDescriptors;
        public ulong maxMemoryAllocationSize;
        public VkPhysicalDeviceVulkan11Properties() { }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVulkan12Features
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceVulkan12Features;
        public void* pNext;
        public int samplerMirrorClampToEdge;
        public int drawIndirectCount;
        public int storageBuffer8BitAccess;
        public int uniformAndStorageBuffer8BitAccess;
        public int storagePushConstant8;
        public int shaderBufferInt64Atomics;
        public int shaderSharedInt64Atomics;
        public int shaderFloat16;
        public int shaderInt8;
        public int descriptorIndexing;
        public int shaderInputAttachmentArrayDynamicIndexing;
        public int shaderUniformTexelBufferArrayDynamicIndexing;
        public int shaderStorageTexelBufferArrayDynamicIndexing;
        public int shaderUniformBufferArrayNonUniformIndexing;
        public int shaderSampledImageArrayNonUniformIndexing;
        public int shaderStorageBufferArrayNonUniformIndexing;
        public int shaderStorageImageArrayNonUniformIndexing;
        public int shaderInputAttachmentArrayNonUniformIndexing;
        public int shaderUniformTexelBufferArrayNonUniformIndexing;
        public int shaderStorageTexelBufferArrayNonUniformIndexing;
        public int descriptorBindingUniformBufferUpdateAfterBind;
        public int descriptorBindingSampledImageUpdateAfterBind;
        public int descriptorBindingStorageImageUpdateAfterBind;
        public int descriptorBindingStorageBufferUpdateAfterBind;
        public int descriptorBindingUniformTexelBufferUpdateAfterBind;
        public int descriptorBindingStorageTexelBufferUpdateAfterBind;
        public int descriptorBindingUpdateUnusedWhilePending;
        public int descriptorBindingPartiallyBound;
        public int descriptorBindingVariableDescriptorCount;
        public int runtimeDescriptorArray;
        public int samplerFilterMinmax;
        public int scalarBlockLayout;
        public int imagelessFramebuffer;
        public int uniformBufferStandardLayout;
        public int shaderSubgroupExtendedTypes;
        public int separateDepthStencilLayouts;
        public int hostQueryReset;
        public int timelineSemaphore;
        public int bufferDeviceAddress;
        public int bufferDeviceAddressCaptureReplay;
        public int bufferDeviceAddressMultiDevice;
        public int vulkanMemoryModel;
        public int vulkanMemoryModelDeviceScope;
        public int vulkanMemoryModelAvailabilityVisibilityChains;
        public int shaderOutputViewportIndex;
        public int shaderOutputLayer;
        public int subgroupBroadcastDynamicId;
        public VkPhysicalDeviceVulkan12Features() { }
        public VkPhysicalDeviceVulkan12Features(VkStructureType sType, void* pNext, int samplerMirrorClampToEdge, int drawIndirectCount, int storageBuffer8BitAccess, int uniformAndStorageBuffer8BitAccess, int storagePushConstant8, int shaderBufferInt64Atomics, int shaderSharedInt64Atomics, int shaderFloat16, int shaderInt8, int descriptorIndexing, int shaderInputAttachmentArrayDynamicIndexing, int shaderUniformTexelBufferArrayDynamicIndexing, int shaderStorageTexelBufferArrayDynamicIndexing, int shaderUniformBufferArrayNonUniformIndexing, int shaderSampledImageArrayNonUniformIndexing, int shaderStorageBufferArrayNonUniformIndexing, int shaderStorageImageArrayNonUniformIndexing, int shaderInputAttachmentArrayNonUniformIndexing, int shaderUniformTexelBufferArrayNonUniformIndexing, int shaderStorageTexelBufferArrayNonUniformIndexing, int descriptorBindingUniformBufferUpdateAfterBind, int descriptorBindingSampledImageUpdateAfterBind, int descriptorBindingStorageImageUpdateAfterBind, int descriptorBindingStorageBufferUpdateAfterBind, int descriptorBindingUniformTexelBufferUpdateAfterBind, int descriptorBindingStorageTexelBufferUpdateAfterBind, int descriptorBindingUpdateUnusedWhilePending, int descriptorBindingPartiallyBound, int descriptorBindingVariableDescriptorCount, int runtimeDescriptorArray, int samplerFilterMinmax, int scalarBlockLayout, int imagelessFramebuffer, int uniformBufferStandardLayout, int shaderSubgroupExtendedTypes, int separateDepthStencilLayouts, int hostQueryReset, int timelineSemaphore, int bufferDeviceAddress, int bufferDeviceAddressCaptureReplay, int bufferDeviceAddressMultiDevice, int vulkanMemoryModel, int vulkanMemoryModelDeviceScope, int vulkanMemoryModelAvailabilityVisibilityChains, int shaderOutputViewportIndex, int shaderOutputLayer, int subgroupBroadcastDynamicId)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.samplerMirrorClampToEdge = samplerMirrorClampToEdge;
            this.drawIndirectCount = drawIndirectCount;
            this.storageBuffer8BitAccess = storageBuffer8BitAccess;
            this.uniformAndStorageBuffer8BitAccess = uniformAndStorageBuffer8BitAccess;
            this.storagePushConstant8 = storagePushConstant8;
            this.shaderBufferInt64Atomics = shaderBufferInt64Atomics;
            this.shaderSharedInt64Atomics = shaderSharedInt64Atomics;
            this.shaderFloat16 = shaderFloat16;
            this.shaderInt8 = shaderInt8;
            this.descriptorIndexing = descriptorIndexing;
            this.shaderInputAttachmentArrayDynamicIndexing = shaderInputAttachmentArrayDynamicIndexing;
            this.shaderUniformTexelBufferArrayDynamicIndexing = shaderUniformTexelBufferArrayDynamicIndexing;
            this.shaderStorageTexelBufferArrayDynamicIndexing = shaderStorageTexelBufferArrayDynamicIndexing;
            this.shaderUniformBufferArrayNonUniformIndexing = shaderUniformBufferArrayNonUniformIndexing;
            this.shaderSampledImageArrayNonUniformIndexing = shaderSampledImageArrayNonUniformIndexing;
            this.shaderStorageBufferArrayNonUniformIndexing = shaderStorageBufferArrayNonUniformIndexing;
            this.shaderStorageImageArrayNonUniformIndexing = shaderStorageImageArrayNonUniformIndexing;
            this.shaderInputAttachmentArrayNonUniformIndexing = shaderInputAttachmentArrayNonUniformIndexing;
            this.shaderUniformTexelBufferArrayNonUniformIndexing = shaderUniformTexelBufferArrayNonUniformIndexing;
            this.shaderStorageTexelBufferArrayNonUniformIndexing = shaderStorageTexelBufferArrayNonUniformIndexing;
            this.descriptorBindingUniformBufferUpdateAfterBind = descriptorBindingUniformBufferUpdateAfterBind;
            this.descriptorBindingSampledImageUpdateAfterBind = descriptorBindingSampledImageUpdateAfterBind;
            this.descriptorBindingStorageImageUpdateAfterBind = descriptorBindingStorageImageUpdateAfterBind;
            this.descriptorBindingStorageBufferUpdateAfterBind = descriptorBindingStorageBufferUpdateAfterBind;
            this.descriptorBindingUniformTexelBufferUpdateAfterBind = descriptorBindingUniformTexelBufferUpdateAfterBind;
            this.descriptorBindingStorageTexelBufferUpdateAfterBind = descriptorBindingStorageTexelBufferUpdateAfterBind;
            this.descriptorBindingUpdateUnusedWhilePending = descriptorBindingUpdateUnusedWhilePending;
            this.descriptorBindingPartiallyBound = descriptorBindingPartiallyBound;
            this.descriptorBindingVariableDescriptorCount = descriptorBindingVariableDescriptorCount;
            this.runtimeDescriptorArray = runtimeDescriptorArray;
            this.samplerFilterMinmax = samplerFilterMinmax;
            this.scalarBlockLayout = scalarBlockLayout;
            this.imagelessFramebuffer = imagelessFramebuffer;
            this.uniformBufferStandardLayout = uniformBufferStandardLayout;
            this.shaderSubgroupExtendedTypes = shaderSubgroupExtendedTypes;
            this.separateDepthStencilLayouts = separateDepthStencilLayouts;
            this.hostQueryReset = hostQueryReset;
            this.timelineSemaphore = timelineSemaphore;
            this.bufferDeviceAddress = bufferDeviceAddress;
            this.bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay;
            this.bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice;
            this.vulkanMemoryModel = vulkanMemoryModel;
            this.vulkanMemoryModelDeviceScope = vulkanMemoryModelDeviceScope;
            this.vulkanMemoryModelAvailabilityVisibilityChains = vulkanMemoryModelAvailabilityVisibilityChains;
            this.shaderOutputViewportIndex = shaderOutputViewportIndex;
            this.shaderOutputLayer = shaderOutputLayer;
            this.subgroupBroadcastDynamicId = subgroupBroadcastDynamicId;
        }
    }
    /// <summary><b>[requires: v1.2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVulkan12Properties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceVulkan12Properties;
        public void* pNext;
        public VkDriverId driverID;
        public fixed byte driverName[256];
        public fixed byte driverInfo[256];
        public VkConformanceVersion conformanceVersion;
        public VkShaderFloatControlsIndependence denormBehaviorIndependence;
        public VkShaderFloatControlsIndependence roundingModeIndependence;
        public int shaderSignedZeroInfNanPreserveFloat16;
        public int shaderSignedZeroInfNanPreserveFloat32;
        public int shaderSignedZeroInfNanPreserveFloat64;
        public int shaderDenormPreserveFloat16;
        public int shaderDenormPreserveFloat32;
        public int shaderDenormPreserveFloat64;
        public int shaderDenormFlushToZeroFloat16;
        public int shaderDenormFlushToZeroFloat32;
        public int shaderDenormFlushToZeroFloat64;
        public int shaderRoundingModeRTEFloat16;
        public int shaderRoundingModeRTEFloat32;
        public int shaderRoundingModeRTEFloat64;
        public int shaderRoundingModeRTZFloat16;
        public int shaderRoundingModeRTZFloat32;
        public int shaderRoundingModeRTZFloat64;
        public uint maxUpdateAfterBindDescriptorsInAllPools;
        public int shaderUniformBufferArrayNonUniformIndexingNative;
        public int shaderSampledImageArrayNonUniformIndexingNative;
        public int shaderStorageBufferArrayNonUniformIndexingNative;
        public int shaderStorageImageArrayNonUniformIndexingNative;
        public int shaderInputAttachmentArrayNonUniformIndexingNative;
        public int robustBufferAccessUpdateAfterBind;
        public int quadDivergentImplicitLod;
        public uint maxPerStageDescriptorUpdateAfterBindSamplers;
        public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
        public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
        public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
        public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
        public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
        public uint maxPerStageUpdateAfterBindResources;
        public uint maxDescriptorSetUpdateAfterBindSamplers;
        public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
        public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
        public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
        public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
        public uint maxDescriptorSetUpdateAfterBindSampledImages;
        public uint maxDescriptorSetUpdateAfterBindStorageImages;
        public uint maxDescriptorSetUpdateAfterBindInputAttachments;
        public VkResolveModeFlagBits supportedDepthResolveModes;
        public VkResolveModeFlagBits supportedStencilResolveModes;
        public int independentResolveNone;
        public int independentResolve;
        public int filterMinmaxSingleComponentFormats;
        public int filterMinmaxImageComponentMapping;
        public ulong maxTimelineSemaphoreValueDifference;
        public VkSampleCountFlagBits framebufferIntegerColorSampleCounts;
        public VkPhysicalDeviceVulkan12Properties() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVulkan13Features
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceVulkan13Features;
        public void* pNext;
        public int robustImageAccess;
        public int inlineUniformBlock;
        public int descriptorBindingInlineUniformBlockUpdateAfterBind;
        public int pipelineCreationCacheControl;
        public int privateData;
        public int shaderDemoteToHelperInvocation;
        public int shaderTerminateInvocation;
        public int subgroupSizeControl;
        public int computeFullSubgroups;
        public int synchronization2;
        public int textureCompressionASTC_HDR;
        public int shaderZeroInitializeWorkgroupMemory;
        public int dynamicRendering;
        public int shaderIntegerDotProduct;
        public int maintenance4;
        public VkPhysicalDeviceVulkan13Features() { }
        public VkPhysicalDeviceVulkan13Features(VkStructureType sType, void* pNext, int robustImageAccess, int inlineUniformBlock, int descriptorBindingInlineUniformBlockUpdateAfterBind, int pipelineCreationCacheControl, int privateData, int shaderDemoteToHelperInvocation, int shaderTerminateInvocation, int subgroupSizeControl, int computeFullSubgroups, int synchronization2, int textureCompressionASTC_HDR, int shaderZeroInitializeWorkgroupMemory, int dynamicRendering, int shaderIntegerDotProduct, int maintenance4)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.robustImageAccess = robustImageAccess;
            this.inlineUniformBlock = inlineUniformBlock;
            this.descriptorBindingInlineUniformBlockUpdateAfterBind = descriptorBindingInlineUniformBlockUpdateAfterBind;
            this.pipelineCreationCacheControl = pipelineCreationCacheControl;
            this.privateData = privateData;
            this.shaderDemoteToHelperInvocation = shaderDemoteToHelperInvocation;
            this.shaderTerminateInvocation = shaderTerminateInvocation;
            this.subgroupSizeControl = subgroupSizeControl;
            this.computeFullSubgroups = computeFullSubgroups;
            this.synchronization2 = synchronization2;
            this.textureCompressionASTC_HDR = textureCompressionASTC_HDR;
            this.shaderZeroInitializeWorkgroupMemory = shaderZeroInitializeWorkgroupMemory;
            this.dynamicRendering = dynamicRendering;
            this.shaderIntegerDotProduct = shaderIntegerDotProduct;
            this.maintenance4 = maintenance4;
        }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVulkan13Properties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceVulkan13Properties;
        public void* pNext;
        public uint minSubgroupSize;
        public uint maxSubgroupSize;
        public uint maxComputeWorkgroupSubgroups;
        public VkShaderStageFlagBits requiredSubgroupSizeStages;
        public uint maxInlineUniformBlockSize;
        public uint maxPerStageDescriptorInlineUniformBlocks;
        public uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
        public uint maxDescriptorSetInlineUniformBlocks;
        public uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
        public uint maxInlineUniformTotalSize;
        public int integerDotProduct8BitUnsignedAccelerated;
        public int integerDotProduct8BitSignedAccelerated;
        public int integerDotProduct8BitMixedSignednessAccelerated;
        public int integerDotProduct4x8BitPackedUnsignedAccelerated;
        public int integerDotProduct4x8BitPackedSignedAccelerated;
        public int integerDotProduct4x8BitPackedMixedSignednessAccelerated;
        public int integerDotProduct16BitUnsignedAccelerated;
        public int integerDotProduct16BitSignedAccelerated;
        public int integerDotProduct16BitMixedSignednessAccelerated;
        public int integerDotProduct32BitUnsignedAccelerated;
        public int integerDotProduct32BitSignedAccelerated;
        public int integerDotProduct32BitMixedSignednessAccelerated;
        public int integerDotProduct64BitUnsignedAccelerated;
        public int integerDotProduct64BitSignedAccelerated;
        public int integerDotProduct64BitMixedSignednessAccelerated;
        public int integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
        public int integerDotProductAccumulatingSaturating8BitSignedAccelerated;
        public int integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
        public int integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
        public int integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
        public int integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
        public int integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
        public int integerDotProductAccumulatingSaturating16BitSignedAccelerated;
        public int integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
        public int integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
        public int integerDotProductAccumulatingSaturating32BitSignedAccelerated;
        public int integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
        public int integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
        public int integerDotProductAccumulatingSaturating64BitSignedAccelerated;
        public int integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
        public ulong storageTexelBufferOffsetAlignmentBytes;
        public int storageTexelBufferOffsetSingleTexelAlignment;
        public ulong uniformTexelBufferOffsetAlignmentBytes;
        public int uniformTexelBufferOffsetSingleTexelAlignment;
        public ulong maxBufferSize;
        public VkPhysicalDeviceVulkan13Properties() { }
        public VkPhysicalDeviceVulkan13Properties(VkStructureType sType, void* pNext, uint minSubgroupSize, uint maxSubgroupSize, uint maxComputeWorkgroupSubgroups, VkShaderStageFlagBits requiredSubgroupSizeStages, uint maxInlineUniformBlockSize, uint maxPerStageDescriptorInlineUniformBlocks, uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks, uint maxDescriptorSetInlineUniformBlocks, uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks, uint maxInlineUniformTotalSize, int integerDotProduct8BitUnsignedAccelerated, int integerDotProduct8BitSignedAccelerated, int integerDotProduct8BitMixedSignednessAccelerated, int integerDotProduct4x8BitPackedUnsignedAccelerated, int integerDotProduct4x8BitPackedSignedAccelerated, int integerDotProduct4x8BitPackedMixedSignednessAccelerated, int integerDotProduct16BitUnsignedAccelerated, int integerDotProduct16BitSignedAccelerated, int integerDotProduct16BitMixedSignednessAccelerated, int integerDotProduct32BitUnsignedAccelerated, int integerDotProduct32BitSignedAccelerated, int integerDotProduct32BitMixedSignednessAccelerated, int integerDotProduct64BitUnsignedAccelerated, int integerDotProduct64BitSignedAccelerated, int integerDotProduct64BitMixedSignednessAccelerated, int integerDotProductAccumulatingSaturating8BitUnsignedAccelerated, int integerDotProductAccumulatingSaturating8BitSignedAccelerated, int integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated, int integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated, int integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated, int integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated, int integerDotProductAccumulatingSaturating16BitUnsignedAccelerated, int integerDotProductAccumulatingSaturating16BitSignedAccelerated, int integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated, int integerDotProductAccumulatingSaturating32BitUnsignedAccelerated, int integerDotProductAccumulatingSaturating32BitSignedAccelerated, int integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated, int integerDotProductAccumulatingSaturating64BitUnsignedAccelerated, int integerDotProductAccumulatingSaturating64BitSignedAccelerated, int integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated, ulong storageTexelBufferOffsetAlignmentBytes, int storageTexelBufferOffsetSingleTexelAlignment, ulong uniformTexelBufferOffsetAlignmentBytes, int uniformTexelBufferOffsetSingleTexelAlignment, ulong maxBufferSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.minSubgroupSize = minSubgroupSize;
            this.maxSubgroupSize = maxSubgroupSize;
            this.maxComputeWorkgroupSubgroups = maxComputeWorkgroupSubgroups;
            this.requiredSubgroupSizeStages = requiredSubgroupSizeStages;
            this.maxInlineUniformBlockSize = maxInlineUniformBlockSize;
            this.maxPerStageDescriptorInlineUniformBlocks = maxPerStageDescriptorInlineUniformBlocks;
            this.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
            this.maxDescriptorSetInlineUniformBlocks = maxDescriptorSetInlineUniformBlocks;
            this.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
            this.maxInlineUniformTotalSize = maxInlineUniformTotalSize;
            this.integerDotProduct8BitUnsignedAccelerated = integerDotProduct8BitUnsignedAccelerated;
            this.integerDotProduct8BitSignedAccelerated = integerDotProduct8BitSignedAccelerated;
            this.integerDotProduct8BitMixedSignednessAccelerated = integerDotProduct8BitMixedSignednessAccelerated;
            this.integerDotProduct4x8BitPackedUnsignedAccelerated = integerDotProduct4x8BitPackedUnsignedAccelerated;
            this.integerDotProduct4x8BitPackedSignedAccelerated = integerDotProduct4x8BitPackedSignedAccelerated;
            this.integerDotProduct4x8BitPackedMixedSignednessAccelerated = integerDotProduct4x8BitPackedMixedSignednessAccelerated;
            this.integerDotProduct16BitUnsignedAccelerated = integerDotProduct16BitUnsignedAccelerated;
            this.integerDotProduct16BitSignedAccelerated = integerDotProduct16BitSignedAccelerated;
            this.integerDotProduct16BitMixedSignednessAccelerated = integerDotProduct16BitMixedSignednessAccelerated;
            this.integerDotProduct32BitUnsignedAccelerated = integerDotProduct32BitUnsignedAccelerated;
            this.integerDotProduct32BitSignedAccelerated = integerDotProduct32BitSignedAccelerated;
            this.integerDotProduct32BitMixedSignednessAccelerated = integerDotProduct32BitMixedSignednessAccelerated;
            this.integerDotProduct64BitUnsignedAccelerated = integerDotProduct64BitUnsignedAccelerated;
            this.integerDotProduct64BitSignedAccelerated = integerDotProduct64BitSignedAccelerated;
            this.integerDotProduct64BitMixedSignednessAccelerated = integerDotProduct64BitMixedSignednessAccelerated;
            this.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
            this.integerDotProductAccumulatingSaturating8BitSignedAccelerated = integerDotProductAccumulatingSaturating8BitSignedAccelerated;
            this.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
            this.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
            this.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
            this.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
            this.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
            this.integerDotProductAccumulatingSaturating16BitSignedAccelerated = integerDotProductAccumulatingSaturating16BitSignedAccelerated;
            this.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
            this.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
            this.integerDotProductAccumulatingSaturating32BitSignedAccelerated = integerDotProductAccumulatingSaturating32BitSignedAccelerated;
            this.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
            this.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
            this.integerDotProductAccumulatingSaturating64BitSignedAccelerated = integerDotProductAccumulatingSaturating64BitSignedAccelerated;
            this.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
            this.storageTexelBufferOffsetAlignmentBytes = storageTexelBufferOffsetAlignmentBytes;
            this.storageTexelBufferOffsetSingleTexelAlignment = storageTexelBufferOffsetSingleTexelAlignment;
            this.uniformTexelBufferOffsetAlignmentBytes = uniformTexelBufferOffsetAlignmentBytes;
            this.uniformTexelBufferOffsetSingleTexelAlignment = uniformTexelBufferOffsetSingleTexelAlignment;
            this.maxBufferSize = maxBufferSize;
        }
    }
    /// <summary><b>[requires: VK_AMD_pipeline_compiler_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineCompilerControlCreateInfoAMD.html" /></remarks>
    public unsafe struct VkPipelineCompilerControlCreateInfoAMD
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineCompilerControlCreateInfoAmd;
        public void* pNext;
        public VkPipelineCompilerControlFlagBitsAMD compilerControlFlags;
        public VkPipelineCompilerControlCreateInfoAMD() { }
        public VkPipelineCompilerControlCreateInfoAMD(VkStructureType sType, void* pNext, VkPipelineCompilerControlFlagBitsAMD compilerControlFlags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.compilerControlFlags = compilerControlFlags;
        }
    }
    /// <summary><b>[requires: VK_AMD_device_coherent_memory]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCoherentMemoryFeaturesAMD.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCoherentMemoryFeaturesAMD
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCoherentMemoryFeaturesAmd;
        public void* pNext;
        public int deviceCoherentMemory;
        public VkPhysicalDeviceCoherentMemoryFeaturesAMD() { }
        public VkPhysicalDeviceCoherentMemoryFeaturesAMD(VkStructureType sType, void* pNext, int deviceCoherentMemory)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.deviceCoherentMemory = deviceCoherentMemory;
        }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFaultData.html" /></remarks>
    public unsafe struct VkFaultData
    {
        public VkStructureType sType;
        public void* pNext;
        public VkFaultLevel faultLevel;
        public VkFaultType faultType;
        public VkFaultData() { }
        public VkFaultData(VkStructureType sType, void* pNext, VkFaultLevel faultLevel, VkFaultType faultType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.faultLevel = faultLevel;
            this.faultType = faultType;
        }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFaultCallbackInfo.html" /></remarks>
    public unsafe struct VkFaultCallbackInfo
    {
        public VkStructureType sType;
        public void* pNext;
        public uint faultCount;
        public VkFaultData* pFaults;
        public delegate* unmanaged[Cdecl]<int, uint, VkFaultData*, void> pfnFaultCallback;
        public VkFaultCallbackInfo() { }
        public VkFaultCallbackInfo(VkStructureType sType, void* pNext, uint faultCount, VkFaultData* pFaults, delegate* unmanaged[Cdecl]<int, uint, VkFaultData*, void> pfnFaultCallback)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.faultCount = faultCount;
            this.pFaults = pFaults;
            this.pfnFaultCallback = pfnFaultCallback;
        }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceToolProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceToolProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceToolProperties;
        public void* pNext;
        public fixed byte name[256];
        public fixed byte version[256];
        public VkToolPurposeFlagBits purposes;
        public fixed byte description[256];
        public fixed byte layer[256];
        public VkPhysicalDeviceToolProperties() { }
    }
    /// <summary><b>[requires: VK_EXT_tooling_info]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceToolPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceToolPropertiesEXT
    {
        public VkPhysicalDeviceToolPropertiesEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_custom_border_color]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerCustomBorderColorCreateInfoEXT.html" /></remarks>
    public unsafe struct VkSamplerCustomBorderColorCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSamplerCustomBorderColorCreateInfoExt;
        public void* pNext;
        public VkClearColorValue customBorderColor;
        public VkFormat format;
        public VkSamplerCustomBorderColorCreateInfoEXT() { }
        public VkSamplerCustomBorderColorCreateInfoEXT(VkStructureType sType, void* pNext, VkClearColorValue customBorderColor, VkFormat format)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.customBorderColor = customBorderColor;
            this.format = format;
        }
    }
    /// <summary><b>[requires: VK_EXT_custom_border_color]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCustomBorderColorPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCustomBorderColorPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCustomBorderColorPropertiesExt;
        public void* pNext;
        public uint maxCustomBorderColorSamplers;
        public VkPhysicalDeviceCustomBorderColorPropertiesEXT() { }
        public VkPhysicalDeviceCustomBorderColorPropertiesEXT(VkStructureType sType, void* pNext, uint maxCustomBorderColorSamplers)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxCustomBorderColorSamplers = maxCustomBorderColorSamplers;
        }
    }
    /// <summary><b>[requires: VK_EXT_custom_border_color]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCustomBorderColorFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCustomBorderColorFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCustomBorderColorFeaturesExt;
        public void* pNext;
        public int customBorderColors;
        public int customBorderColorWithoutFormat;
        public VkPhysicalDeviceCustomBorderColorFeaturesEXT() { }
        public VkPhysicalDeviceCustomBorderColorFeaturesEXT(VkStructureType sType, void* pNext, int customBorderColors, int customBorderColorWithoutFormat)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.customBorderColors = customBorderColors;
            this.customBorderColorWithoutFormat = customBorderColorWithoutFormat;
        }
    }
    /// <summary><b>[requires: VK_EXT_border_color_swizzle]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerBorderColorComponentMappingCreateInfoEXT.html" /></remarks>
    public unsafe struct VkSamplerBorderColorComponentMappingCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSamplerBorderColorComponentMappingCreateInfoExt;
        public void* pNext;
        public VkComponentMapping components;
        public int srgb;
        public VkSamplerBorderColorComponentMappingCreateInfoEXT() { }
        public VkSamplerBorderColorComponentMappingCreateInfoEXT(VkStructureType sType, void* pNext, VkComponentMapping components, int srgb)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.components = components;
            this.srgb = srgb;
        }
    }
    /// <summary><b>[requires: VK_EXT_border_color_swizzle]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceBorderColorSwizzleFeaturesExt;
        public void* pNext;
        public int borderColorSwizzle;
        public int borderColorSwizzleFromImage;
        public VkPhysicalDeviceBorderColorSwizzleFeaturesEXT() { }
        public VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(VkStructureType sType, void* pNext, int borderColorSwizzle, int borderColorSwizzleFromImage)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.borderColorSwizzle = borderColorSwizzle;
            this.borderColorSwizzleFromImage = borderColorSwizzleFromImage;
        }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceOrHostAddressKHR.html" /></remarks>
    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct VkDeviceOrHostAddressKHR
    {
        [FieldOffset(0)]
        public ulong deviceAddress;
        [FieldOffset(0)]
        public void* hostAddress;
        public VkDeviceOrHostAddressKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceOrHostAddressConstKHR.html" /></remarks>
    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct VkDeviceOrHostAddressConstKHR
    {
        [FieldOffset(0)]
        public ulong deviceAddress;
        [FieldOffset(0)]
        public void* hostAddress;
        public VkDeviceOrHostAddressConstKHR() { }
    }
    /// <summary><b>[requires: VK_AMDX_shader_enqueue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceOrHostAddressConstAMDX.html" /></remarks>
    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct VkDeviceOrHostAddressConstAMDX
    {
        [FieldOffset(0)]
        public ulong deviceAddress;
        [FieldOffset(0)]
        public void* hostAddress;
        public VkDeviceOrHostAddressConstAMDX() { }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureGeometryTrianglesDataKHR.html" /></remarks>
    public unsafe struct VkAccelerationStructureGeometryTrianglesDataKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureGeometryTrianglesDataKhr;
        public void* pNext;
        public VkFormat vertexFormat;
        public VkDeviceOrHostAddressConstKHR vertexData;
        public ulong vertexStride;
        public uint maxVertex;
        public VkIndexType indexType;
        public VkDeviceOrHostAddressConstKHR indexData;
        public VkDeviceOrHostAddressConstKHR transformData;
        public VkAccelerationStructureGeometryTrianglesDataKHR() { }
        public VkAccelerationStructureGeometryTrianglesDataKHR(VkStructureType sType, void* pNext, VkFormat vertexFormat, VkDeviceOrHostAddressConstKHR vertexData, ulong vertexStride, uint maxVertex, VkIndexType indexType, VkDeviceOrHostAddressConstKHR indexData, VkDeviceOrHostAddressConstKHR transformData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.vertexFormat = vertexFormat;
            this.vertexData = vertexData;
            this.vertexStride = vertexStride;
            this.maxVertex = maxVertex;
            this.indexType = indexType;
            this.indexData = indexData;
            this.transformData = transformData;
        }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureGeometryAabbsDataKHR.html" /></remarks>
    public unsafe struct VkAccelerationStructureGeometryAabbsDataKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureGeometryAabbsDataKhr;
        public void* pNext;
        public VkDeviceOrHostAddressConstKHR data;
        public ulong stride;
        public VkAccelerationStructureGeometryAabbsDataKHR() { }
        public VkAccelerationStructureGeometryAabbsDataKHR(VkStructureType sType, void* pNext, VkDeviceOrHostAddressConstKHR data, ulong stride)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.data = data;
            this.stride = stride;
        }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureGeometryInstancesDataKHR.html" /></remarks>
    public unsafe struct VkAccelerationStructureGeometryInstancesDataKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureGeometryInstancesDataKhr;
        public void* pNext;
        public int arrayOfPointers;
        public VkDeviceOrHostAddressConstKHR data;
        public VkAccelerationStructureGeometryInstancesDataKHR() { }
        public VkAccelerationStructureGeometryInstancesDataKHR(VkStructureType sType, void* pNext, int arrayOfPointers, VkDeviceOrHostAddressConstKHR data)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.arrayOfPointers = arrayOfPointers;
            this.data = data;
        }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureGeometryDataKHR.html" /></remarks>
    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct VkAccelerationStructureGeometryDataKHR
    {
        [FieldOffset(0)]
        public VkAccelerationStructureGeometryTrianglesDataKHR triangles;
        [FieldOffset(0)]
        public VkAccelerationStructureGeometryAabbsDataKHR aabbs;
        [FieldOffset(0)]
        public VkAccelerationStructureGeometryInstancesDataKHR instances;
        public VkAccelerationStructureGeometryDataKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureGeometryKHR.html" /></remarks>
    public unsafe struct VkAccelerationStructureGeometryKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureGeometryKhr;
        public void* pNext;
        public VkGeometryTypeKHR geometryType;
        public VkAccelerationStructureGeometryDataKHR geometry;
        public VkGeometryFlagBitsKHR flags;
        public VkAccelerationStructureGeometryKHR() { }
        public VkAccelerationStructureGeometryKHR(VkStructureType sType, void* pNext, VkGeometryTypeKHR geometryType, VkAccelerationStructureGeometryDataKHR geometry, VkGeometryFlagBitsKHR flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.geometryType = geometryType;
            this.geometry = geometry;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureBuildGeometryInfoKHR.html" /></remarks>
    public unsafe struct VkAccelerationStructureBuildGeometryInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureBuildGeometryInfoKhr;
        public void* pNext;
        public VkAccelerationStructureTypeKHR type;
        public VkBuildAccelerationStructureFlagBitsKHR flags;
        public VkBuildAccelerationStructureModeKHR mode;
        public VkAccelerationStructureKHR srcAccelerationStructure;
        public VkAccelerationStructureKHR dstAccelerationStructure;
        public uint geometryCount;
        public VkAccelerationStructureGeometryKHR* pGeometries;
        public VkAccelerationStructureGeometryKHR** ppGeometries;
        public VkDeviceOrHostAddressKHR scratchData;
        public VkAccelerationStructureBuildGeometryInfoKHR() { }
        public VkAccelerationStructureBuildGeometryInfoKHR(VkStructureType sType, void* pNext, VkAccelerationStructureTypeKHR type, VkBuildAccelerationStructureFlagBitsKHR flags, VkBuildAccelerationStructureModeKHR mode, VkAccelerationStructureKHR srcAccelerationStructure, VkAccelerationStructureKHR dstAccelerationStructure, uint geometryCount, VkAccelerationStructureGeometryKHR* pGeometries, VkAccelerationStructureGeometryKHR** ppGeometries, VkDeviceOrHostAddressKHR scratchData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.type = type;
            this.flags = flags;
            this.mode = mode;
            this.srcAccelerationStructure = srcAccelerationStructure;
            this.dstAccelerationStructure = dstAccelerationStructure;
            this.geometryCount = geometryCount;
            this.pGeometries = pGeometries;
            this.ppGeometries = ppGeometries;
            this.scratchData = scratchData;
        }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureBuildRangeInfoKHR.html" /></remarks>
    public unsafe struct VkAccelerationStructureBuildRangeInfoKHR
    {
        public uint primitiveCount;
        public uint primitiveOffset;
        public uint firstVertex;
        public uint transformOffset;
        public VkAccelerationStructureBuildRangeInfoKHR() { }
        public VkAccelerationStructureBuildRangeInfoKHR(uint primitiveCount, uint primitiveOffset, uint firstVertex, uint transformOffset)
        {
            this.primitiveCount = primitiveCount;
            this.primitiveOffset = primitiveOffset;
            this.firstVertex = firstVertex;
            this.transformOffset = transformOffset;
        }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureCreateInfoKHR.html" /></remarks>
    public unsafe struct VkAccelerationStructureCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureCreateInfoKhr;
        public void* pNext;
        public VkAccelerationStructureCreateFlagBitsKHR createFlags;
        public VkBuffer buffer;
        public ulong offset;
        public ulong size;
        public VkAccelerationStructureTypeKHR type;
        public ulong deviceAddress;
        public VkAccelerationStructureCreateInfoKHR() { }
        public VkAccelerationStructureCreateInfoKHR(VkStructureType sType, void* pNext, VkAccelerationStructureCreateFlagBitsKHR createFlags, VkBuffer buffer, ulong offset, ulong size, VkAccelerationStructureTypeKHR type, ulong deviceAddress)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.createFlags = createFlags;
            this.buffer = buffer;
            this.offset = offset;
            this.size = size;
            this.type = type;
            this.deviceAddress = deviceAddress;
        }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAabbPositionsKHR.html" /></remarks>
    public unsafe struct VkAabbPositionsKHR
    {
        public float minX;
        public float minY;
        public float minZ;
        public float maxX;
        public float maxY;
        public float maxZ;
        public VkAabbPositionsKHR() { }
        public VkAabbPositionsKHR(float minX, float minY, float minZ, float maxX, float maxY, float maxZ)
        {
            this.minX = minX;
            this.minY = minY;
            this.minZ = minZ;
            this.maxX = maxX;
            this.maxY = maxY;
            this.maxZ = maxZ;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAabbPositionsNV.html" /></remarks>
    public unsafe struct VkAabbPositionsNV
    {
        public VkAabbPositionsNV() { }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkTransformMatrixKHR.html" /></remarks>
    public unsafe struct VkTransformMatrixKHR
    {
        public Matrix4x3 matrix;
        public VkTransformMatrixKHR() { }
        public VkTransformMatrixKHR(Matrix4x3 matrix)
        {
            this.matrix = matrix;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkTransformMatrixNV.html" /></remarks>
    public unsafe struct VkTransformMatrixNV
    {
        public VkTransformMatrixNV() { }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureInstanceKHR.html" /></remarks>
    public unsafe struct VkAccelerationStructureInstanceKHR
    {
        public VkTransformMatrixKHR transform;
        private uint _bitfield0;
         // TODO: Accessor property for instanceCustomIndex, size: 24, offset: 0
        public uint instanceCustomIndex
        {
            get => (uint)((_bitfield0 >> 0) & 0xFFFFFFu);
            set => _bitfield0 = (_bitfield0 & ~(0xFFFFFFu << 0)) | ((((uint)value) & 0xFFFFFFu) << 0);
        }
         // TODO: Accessor property for mask, size: 8, offset: 24
        public uint mask
        {
            get => (uint)((_bitfield0 >> 24) & 0xFFu);
            set => _bitfield0 = (_bitfield0 & ~(0xFFu << 24)) | ((((uint)value) & 0xFFu) << 24);
        }
        private uint _bitfield1;
         // TODO: Accessor property for instanceShaderBindingTableRecordOffset, size: 24, offset: 0
        public uint instanceShaderBindingTableRecordOffset
        {
            get => (uint)((_bitfield1 >> 0) & 0xFFFFFFu);
            set => _bitfield1 = (_bitfield1 & ~(0xFFFFFFu << 0)) | ((((uint)value) & 0xFFFFFFu) << 0);
        }
         // TODO: Accessor property for flags, size: 8, offset: 24
        public VkGeometryInstanceFlagBitsKHR flags
        {
            get => (VkGeometryInstanceFlagBitsKHR)((_bitfield1 >> 24) & 0xFFu);
            set => _bitfield1 = (_bitfield1 & ~(0xFFu << 24)) | ((((uint)value) & 0xFFu) << 24);
        }
        public ulong accelerationStructureReference;
        public VkAccelerationStructureInstanceKHR() { }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureInstanceNV.html" /></remarks>
    public unsafe struct VkAccelerationStructureInstanceNV
    {
        public VkAccelerationStructureInstanceNV() { }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureDeviceAddressInfoKHR.html" /></remarks>
    public unsafe struct VkAccelerationStructureDeviceAddressInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureDeviceAddressInfoKhr;
        public void* pNext;
        public VkAccelerationStructureKHR accelerationStructure;
        public VkAccelerationStructureDeviceAddressInfoKHR() { }
        public VkAccelerationStructureDeviceAddressInfoKHR(VkStructureType sType, void* pNext, VkAccelerationStructureKHR accelerationStructure)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.accelerationStructure = accelerationStructure;
        }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureVersionInfoKHR.html" /></remarks>
    public unsafe struct VkAccelerationStructureVersionInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureVersionInfoKhr;
        public void* pNext;
        public byte* pVersionData;
        public VkAccelerationStructureVersionInfoKHR() { }
        public VkAccelerationStructureVersionInfoKHR(VkStructureType sType, void* pNext, byte* pVersionData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pVersionData = pVersionData;
        }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyAccelerationStructureInfoKHR.html" /></remarks>
    public unsafe struct VkCopyAccelerationStructureInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeCopyAccelerationStructureInfoKhr;
        public void* pNext;
        public VkAccelerationStructureKHR src;
        public VkAccelerationStructureKHR dst;
        public VkCopyAccelerationStructureModeKHR mode;
        public VkCopyAccelerationStructureInfoKHR() { }
        public VkCopyAccelerationStructureInfoKHR(VkStructureType sType, void* pNext, VkAccelerationStructureKHR src, VkAccelerationStructureKHR dst, VkCopyAccelerationStructureModeKHR mode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.src = src;
            this.dst = dst;
            this.mode = mode;
        }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyAccelerationStructureToMemoryInfoKHR.html" /></remarks>
    public unsafe struct VkCopyAccelerationStructureToMemoryInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeCopyAccelerationStructureToMemoryInfoKhr;
        public void* pNext;
        public VkAccelerationStructureKHR src;
        public VkDeviceOrHostAddressKHR dst;
        public VkCopyAccelerationStructureModeKHR mode;
        public VkCopyAccelerationStructureToMemoryInfoKHR() { }
        public VkCopyAccelerationStructureToMemoryInfoKHR(VkStructureType sType, void* pNext, VkAccelerationStructureKHR src, VkDeviceOrHostAddressKHR dst, VkCopyAccelerationStructureModeKHR mode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.src = src;
            this.dst = dst;
            this.mode = mode;
        }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyMemoryToAccelerationStructureInfoKHR.html" /></remarks>
    public unsafe struct VkCopyMemoryToAccelerationStructureInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeCopyMemoryToAccelerationStructureInfoKhr;
        public void* pNext;
        public VkDeviceOrHostAddressConstKHR src;
        public VkAccelerationStructureKHR dst;
        public VkCopyAccelerationStructureModeKHR mode;
        public VkCopyMemoryToAccelerationStructureInfoKHR() { }
        public VkCopyMemoryToAccelerationStructureInfoKHR(VkStructureType sType, void* pNext, VkDeviceOrHostAddressConstKHR src, VkAccelerationStructureKHR dst, VkCopyAccelerationStructureModeKHR mode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.src = src;
            this.dst = dst;
            this.mode = mode;
        }
    }
    /// <summary><b>[requires: VK_KHR_ray_tracing_pipeline]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRayTracingPipelineInterfaceCreateInfoKHR.html" /></remarks>
    public unsafe struct VkRayTracingPipelineInterfaceCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeRayTracingPipelineInterfaceCreateInfoKhr;
        public void* pNext;
        public uint maxPipelineRayPayloadSize;
        public uint maxPipelineRayHitAttributeSize;
        public VkRayTracingPipelineInterfaceCreateInfoKHR() { }
        public VkRayTracingPipelineInterfaceCreateInfoKHR(VkStructureType sType, void* pNext, uint maxPipelineRayPayloadSize, uint maxPipelineRayHitAttributeSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxPipelineRayPayloadSize = maxPipelineRayPayloadSize;
            this.maxPipelineRayHitAttributeSize = maxPipelineRayHitAttributeSize;
        }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_library]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineLibraryCreateInfoKHR.html" /></remarks>
    public unsafe struct VkPipelineLibraryCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineLibraryCreateInfoKhr;
        public void* pNext;
        public uint libraryCount;
        public VkPipeline* pLibraries;
        public VkPipelineLibraryCreateInfoKHR() { }
        public VkPipelineLibraryCreateInfoKHR(VkStructureType sType, void* pNext, uint libraryCount, VkPipeline* pLibraries)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.libraryCount = libraryCount;
            this.pLibraries = pLibraries;
        }
    }
    /// <summary><b>[requires: VK_KHR_object_refresh]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRefreshObjectKHR.html" /></remarks>
    public unsafe struct VkRefreshObjectKHR
    {
        public VkObjectType objectType;
        public ulong objectHandle;
        public VkRefreshObjectFlagBitsKHR flags;
        public VkRefreshObjectKHR() { }
        public VkRefreshObjectKHR(VkObjectType objectType, ulong objectHandle, VkRefreshObjectFlagBitsKHR flags)
        {
            this.objectType = objectType;
            this.objectHandle = objectHandle;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: VK_KHR_object_refresh]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRefreshObjectListKHR.html" /></remarks>
    public unsafe struct VkRefreshObjectListKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeRefreshObjectListKhr;
        public void* pNext;
        public uint objectCount;
        public VkRefreshObjectKHR* pObjects;
        public VkRefreshObjectListKHR() { }
        public VkRefreshObjectListKHR(VkStructureType sType, void* pNext, uint objectCount, VkRefreshObjectKHR* pObjects)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.objectCount = objectCount;
            this.pObjects = pObjects;
        }
    }
    /// <summary><b>[requires: VK_EXT_extended_dynamic_state]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExtendedDynamicStateFeaturesExt;
        public void* pNext;
        public int extendedDynamicState;
        public VkPhysicalDeviceExtendedDynamicStateFeaturesEXT() { }
        public VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(VkStructureType sType, void* pNext, int extendedDynamicState)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.extendedDynamicState = extendedDynamicState;
        }
    }
    /// <summary><b>[requires: VK_EXT_extended_dynamic_state2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExtendedDynamicState2FeaturesExt;
        public void* pNext;
        public int extendedDynamicState2;
        public int extendedDynamicState2LogicOp;
        public int extendedDynamicState2PatchControlPoints;
        public VkPhysicalDeviceExtendedDynamicState2FeaturesEXT() { }
        public VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(VkStructureType sType, void* pNext, int extendedDynamicState2, int extendedDynamicState2LogicOp, int extendedDynamicState2PatchControlPoints)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.extendedDynamicState2 = extendedDynamicState2;
            this.extendedDynamicState2LogicOp = extendedDynamicState2LogicOp;
            this.extendedDynamicState2PatchControlPoints = extendedDynamicState2PatchControlPoints;
        }
    }
    /// <summary><b>[requires: VK_EXT_extended_dynamic_state3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExtendedDynamicState3FeaturesExt;
        public void* pNext;
        public int extendedDynamicState3TessellationDomainOrigin;
        public int extendedDynamicState3DepthClampEnable;
        public int extendedDynamicState3PolygonMode;
        public int extendedDynamicState3RasterizationSamples;
        public int extendedDynamicState3SampleMask;
        public int extendedDynamicState3AlphaToCoverageEnable;
        public int extendedDynamicState3AlphaToOneEnable;
        public int extendedDynamicState3LogicOpEnable;
        public int extendedDynamicState3ColorBlendEnable;
        public int extendedDynamicState3ColorBlendEquation;
        public int extendedDynamicState3ColorWriteMask;
        public int extendedDynamicState3RasterizationStream;
        public int extendedDynamicState3ConservativeRasterizationMode;
        public int extendedDynamicState3ExtraPrimitiveOverestimationSize;
        public int extendedDynamicState3DepthClipEnable;
        public int extendedDynamicState3SampleLocationsEnable;
        public int extendedDynamicState3ColorBlendAdvanced;
        public int extendedDynamicState3ProvokingVertexMode;
        public int extendedDynamicState3LineRasterizationMode;
        public int extendedDynamicState3LineStippleEnable;
        public int extendedDynamicState3DepthClipNegativeOneToOne;
        public int extendedDynamicState3ViewportWScalingEnable;
        public int extendedDynamicState3ViewportSwizzle;
        public int extendedDynamicState3CoverageToColorEnable;
        public int extendedDynamicState3CoverageToColorLocation;
        public int extendedDynamicState3CoverageModulationMode;
        public int extendedDynamicState3CoverageModulationTableEnable;
        public int extendedDynamicState3CoverageModulationTable;
        public int extendedDynamicState3CoverageReductionMode;
        public int extendedDynamicState3RepresentativeFragmentTestEnable;
        public int extendedDynamicState3ShadingRateImageEnable;
        public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT() { }
        public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(VkStructureType sType, void* pNext, int extendedDynamicState3TessellationDomainOrigin, int extendedDynamicState3DepthClampEnable, int extendedDynamicState3PolygonMode, int extendedDynamicState3RasterizationSamples, int extendedDynamicState3SampleMask, int extendedDynamicState3AlphaToCoverageEnable, int extendedDynamicState3AlphaToOneEnable, int extendedDynamicState3LogicOpEnable, int extendedDynamicState3ColorBlendEnable, int extendedDynamicState3ColorBlendEquation, int extendedDynamicState3ColorWriteMask, int extendedDynamicState3RasterizationStream, int extendedDynamicState3ConservativeRasterizationMode, int extendedDynamicState3ExtraPrimitiveOverestimationSize, int extendedDynamicState3DepthClipEnable, int extendedDynamicState3SampleLocationsEnable, int extendedDynamicState3ColorBlendAdvanced, int extendedDynamicState3ProvokingVertexMode, int extendedDynamicState3LineRasterizationMode, int extendedDynamicState3LineStippleEnable, int extendedDynamicState3DepthClipNegativeOneToOne, int extendedDynamicState3ViewportWScalingEnable, int extendedDynamicState3ViewportSwizzle, int extendedDynamicState3CoverageToColorEnable, int extendedDynamicState3CoverageToColorLocation, int extendedDynamicState3CoverageModulationMode, int extendedDynamicState3CoverageModulationTableEnable, int extendedDynamicState3CoverageModulationTable, int extendedDynamicState3CoverageReductionMode, int extendedDynamicState3RepresentativeFragmentTestEnable, int extendedDynamicState3ShadingRateImageEnable)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.extendedDynamicState3TessellationDomainOrigin = extendedDynamicState3TessellationDomainOrigin;
            this.extendedDynamicState3DepthClampEnable = extendedDynamicState3DepthClampEnable;
            this.extendedDynamicState3PolygonMode = extendedDynamicState3PolygonMode;
            this.extendedDynamicState3RasterizationSamples = extendedDynamicState3RasterizationSamples;
            this.extendedDynamicState3SampleMask = extendedDynamicState3SampleMask;
            this.extendedDynamicState3AlphaToCoverageEnable = extendedDynamicState3AlphaToCoverageEnable;
            this.extendedDynamicState3AlphaToOneEnable = extendedDynamicState3AlphaToOneEnable;
            this.extendedDynamicState3LogicOpEnable = extendedDynamicState3LogicOpEnable;
            this.extendedDynamicState3ColorBlendEnable = extendedDynamicState3ColorBlendEnable;
            this.extendedDynamicState3ColorBlendEquation = extendedDynamicState3ColorBlendEquation;
            this.extendedDynamicState3ColorWriteMask = extendedDynamicState3ColorWriteMask;
            this.extendedDynamicState3RasterizationStream = extendedDynamicState3RasterizationStream;
            this.extendedDynamicState3ConservativeRasterizationMode = extendedDynamicState3ConservativeRasterizationMode;
            this.extendedDynamicState3ExtraPrimitiveOverestimationSize = extendedDynamicState3ExtraPrimitiveOverestimationSize;
            this.extendedDynamicState3DepthClipEnable = extendedDynamicState3DepthClipEnable;
            this.extendedDynamicState3SampleLocationsEnable = extendedDynamicState3SampleLocationsEnable;
            this.extendedDynamicState3ColorBlendAdvanced = extendedDynamicState3ColorBlendAdvanced;
            this.extendedDynamicState3ProvokingVertexMode = extendedDynamicState3ProvokingVertexMode;
            this.extendedDynamicState3LineRasterizationMode = extendedDynamicState3LineRasterizationMode;
            this.extendedDynamicState3LineStippleEnable = extendedDynamicState3LineStippleEnable;
            this.extendedDynamicState3DepthClipNegativeOneToOne = extendedDynamicState3DepthClipNegativeOneToOne;
            this.extendedDynamicState3ViewportWScalingEnable = extendedDynamicState3ViewportWScalingEnable;
            this.extendedDynamicState3ViewportSwizzle = extendedDynamicState3ViewportSwizzle;
            this.extendedDynamicState3CoverageToColorEnable = extendedDynamicState3CoverageToColorEnable;
            this.extendedDynamicState3CoverageToColorLocation = extendedDynamicState3CoverageToColorLocation;
            this.extendedDynamicState3CoverageModulationMode = extendedDynamicState3CoverageModulationMode;
            this.extendedDynamicState3CoverageModulationTableEnable = extendedDynamicState3CoverageModulationTableEnable;
            this.extendedDynamicState3CoverageModulationTable = extendedDynamicState3CoverageModulationTable;
            this.extendedDynamicState3CoverageReductionMode = extendedDynamicState3CoverageReductionMode;
            this.extendedDynamicState3RepresentativeFragmentTestEnable = extendedDynamicState3RepresentativeFragmentTestEnable;
            this.extendedDynamicState3ShadingRateImageEnable = extendedDynamicState3ShadingRateImageEnable;
        }
    }
    /// <summary><b>[requires: VK_EXT_extended_dynamic_state3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3PropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExtendedDynamicState3PropertiesExt;
        public void* pNext;
        public int dynamicPrimitiveTopologyUnrestricted;
        public VkPhysicalDeviceExtendedDynamicState3PropertiesEXT() { }
        public VkPhysicalDeviceExtendedDynamicState3PropertiesEXT(VkStructureType sType, void* pNext, int dynamicPrimitiveTopologyUnrestricted)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.dynamicPrimitiveTopologyUnrestricted = dynamicPrimitiveTopologyUnrestricted;
        }
    }
    /// <summary><b>[requires: VK_EXT_extended_dynamic_state3 | VK_EXT_shader_object]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkColorBlendEquationEXT.html" /></remarks>
    public unsafe struct VkColorBlendEquationEXT
    {
        public VkBlendFactor srcColorBlendFactor;
        public VkBlendFactor dstColorBlendFactor;
        public VkBlendOp colorBlendOp;
        public VkBlendFactor srcAlphaBlendFactor;
        public VkBlendFactor dstAlphaBlendFactor;
        public VkBlendOp alphaBlendOp;
        public VkColorBlendEquationEXT() { }
        public VkColorBlendEquationEXT(VkBlendFactor srcColorBlendFactor, VkBlendFactor dstColorBlendFactor, VkBlendOp colorBlendOp, VkBlendFactor srcAlphaBlendFactor, VkBlendFactor dstAlphaBlendFactor, VkBlendOp alphaBlendOp)
        {
            this.srcColorBlendFactor = srcColorBlendFactor;
            this.dstColorBlendFactor = dstColorBlendFactor;
            this.colorBlendOp = colorBlendOp;
            this.srcAlphaBlendFactor = srcAlphaBlendFactor;
            this.dstAlphaBlendFactor = dstAlphaBlendFactor;
            this.alphaBlendOp = alphaBlendOp;
        }
    }
    /// <summary><b>[requires: VK_EXT_extended_dynamic_state3 | VK_EXT_shader_object]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkColorBlendAdvancedEXT.html" /></remarks>
    public unsafe struct VkColorBlendAdvancedEXT
    {
        public VkBlendOp advancedBlendOp;
        public int srcPremultiplied;
        public int dstPremultiplied;
        public VkBlendOverlapEXT blendOverlap;
        public int clampResults;
        public VkColorBlendAdvancedEXT() { }
        public VkColorBlendAdvancedEXT(VkBlendOp advancedBlendOp, int srcPremultiplied, int dstPremultiplied, VkBlendOverlapEXT blendOverlap, int clampResults)
        {
            this.advancedBlendOp = advancedBlendOp;
            this.srcPremultiplied = srcPremultiplied;
            this.dstPremultiplied = dstPremultiplied;
            this.blendOverlap = blendOverlap;
            this.clampResults = clampResults;
        }
    }
    /// <summary><b>[requires: VK_QCOM_render_pass_transform]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassTransformBeginInfoQCOM.html" /></remarks>
    public unsafe struct VkRenderPassTransformBeginInfoQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderPassTransformBeginInfoQcom;
        public void* pNext;
        public VkSurfaceTransformFlagBitsKHR transform;
        public VkRenderPassTransformBeginInfoQCOM() { }
        public VkRenderPassTransformBeginInfoQCOM(VkStructureType sType, void* pNext, VkSurfaceTransformFlagBitsKHR transform)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.transform = transform;
        }
    }
    /// <summary><b>[requires: VK_QCOM_rotated_copy_commands]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyCommandTransformInfoQCOM.html" /></remarks>
    public unsafe struct VkCopyCommandTransformInfoQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypeCopyCommandTransformInfoQcom;
        public void* pNext;
        public VkSurfaceTransformFlagBitsKHR transform;
        public VkCopyCommandTransformInfoQCOM() { }
        public VkCopyCommandTransformInfoQCOM(VkStructureType sType, void* pNext, VkSurfaceTransformFlagBitsKHR transform)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.transform = transform;
        }
    }
    /// <summary><b>[requires: VK_QCOM_render_pass_transform]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCommandBufferInheritanceRenderPassTransformInfoQCOM.html" /></remarks>
    public unsafe struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypeCommandBufferInheritanceRenderPassTransformInfoQcom;
        public void* pNext;
        public VkSurfaceTransformFlagBitsKHR transform;
        public VkRect2D renderArea;
        public VkCommandBufferInheritanceRenderPassTransformInfoQCOM() { }
        public VkCommandBufferInheritanceRenderPassTransformInfoQCOM(VkStructureType sType, void* pNext, VkSurfaceTransformFlagBitsKHR transform, VkRect2D renderArea)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.transform = transform;
            this.renderArea = renderArea;
        }
    }
    /// <summary><b>[requires: VK_NV_device_diagnostics_config]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDiagnosticsConfigFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDiagnosticsConfigFeaturesNv;
        public void* pNext;
        public int diagnosticsConfig;
        public VkPhysicalDeviceDiagnosticsConfigFeaturesNV() { }
        public VkPhysicalDeviceDiagnosticsConfigFeaturesNV(VkStructureType sType, void* pNext, int diagnosticsConfig)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.diagnosticsConfig = diagnosticsConfig;
        }
    }
    /// <summary><b>[requires: VK_NV_device_diagnostics_config]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceDiagnosticsConfigCreateInfoNV.html" /></remarks>
    public unsafe struct VkDeviceDiagnosticsConfigCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceDiagnosticsConfigCreateInfoNv;
        public void* pNext;
        public VkDeviceDiagnosticsConfigFlagBitsNV flags;
        public VkDeviceDiagnosticsConfigCreateInfoNV() { }
        public VkDeviceDiagnosticsConfigCreateInfoNV(VkStructureType sType, void* pNext, VkDeviceDiagnosticsConfigFlagBitsNV flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
        }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineOfflineCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineOfflineCreateInfo
    {
        public VkStructureType sType;
        public void* pNext;
        public fixed byte pipelineIdentifier[16];
        public VkPipelineMatchControl matchControl;
        public ulong poolEntrySize;
        public VkPipelineOfflineCreateInfo() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
        public void* pNext;
        public int shaderZeroInitializeWorkgroupMemory;
        public VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures() { }
        public VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(VkStructureType sType, void* pNext, int shaderZeroInitializeWorkgroupMemory)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderZeroInitializeWorkgroupMemory = shaderZeroInitializeWorkgroupMemory;
        }
    }
    /// <summary><b>[requires: VK_KHR_zero_initialize_workgroup_memory]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR
    {
        public VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_shader_subgroup_uniform_control_flow]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKhr;
        public void* pNext;
        public int shaderSubgroupUniformControlFlow;
        public VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR() { }
        public VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(VkStructureType sType, void* pNext, int shaderSubgroupUniformControlFlow)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderSubgroupUniformControlFlow = shaderSubgroupUniformControlFlow;
        }
    }
    /// <summary><b>[requires: VK_EXT_robustness2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRobustness2FeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRobustness2FeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRobustness2FeaturesExt;
        public void* pNext;
        public int robustBufferAccess2;
        public int robustImageAccess2;
        public int nullDescriptor;
        public VkPhysicalDeviceRobustness2FeaturesEXT() { }
        public VkPhysicalDeviceRobustness2FeaturesEXT(VkStructureType sType, void* pNext, int robustBufferAccess2, int robustImageAccess2, int nullDescriptor)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.robustBufferAccess2 = robustBufferAccess2;
            this.robustImageAccess2 = robustImageAccess2;
            this.nullDescriptor = nullDescriptor;
        }
    }
    /// <summary><b>[requires: VK_EXT_robustness2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRobustness2PropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRobustness2PropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRobustness2PropertiesExt;
        public void* pNext;
        public ulong robustStorageBufferAccessSizeAlignment;
        public ulong robustUniformBufferAccessSizeAlignment;
        public VkPhysicalDeviceRobustness2PropertiesEXT() { }
        public VkPhysicalDeviceRobustness2PropertiesEXT(VkStructureType sType, void* pNext, ulong robustStorageBufferAccessSizeAlignment, ulong robustUniformBufferAccessSizeAlignment)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.robustStorageBufferAccessSizeAlignment = robustStorageBufferAccessSizeAlignment;
            this.robustUniformBufferAccessSizeAlignment = robustUniformBufferAccessSizeAlignment;
        }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageRobustnessFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageRobustnessFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImageRobustnessFeatures;
        public void* pNext;
        public int robustImageAccess;
        public VkPhysicalDeviceImageRobustnessFeatures() { }
        public VkPhysicalDeviceImageRobustnessFeatures(VkStructureType sType, void* pNext, int robustImageAccess)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.robustImageAccess = robustImageAccess;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_robustness]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageRobustnessFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageRobustnessFeaturesEXT
    {
        public VkPhysicalDeviceImageRobustnessFeaturesEXT() { }
    }
    /// <summary><b>[requires: VK_KHR_workgroup_memory_explicit_layout]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKhr;
        public void* pNext;
        public int workgroupMemoryExplicitLayout;
        public int workgroupMemoryExplicitLayoutScalarBlockLayout;
        public int workgroupMemoryExplicitLayout8BitAccess;
        public int workgroupMemoryExplicitLayout16BitAccess;
        public VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR() { }
        public VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(VkStructureType sType, void* pNext, int workgroupMemoryExplicitLayout, int workgroupMemoryExplicitLayoutScalarBlockLayout, int workgroupMemoryExplicitLayout8BitAccess, int workgroupMemoryExplicitLayout16BitAccess)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.workgroupMemoryExplicitLayout = workgroupMemoryExplicitLayout;
            this.workgroupMemoryExplicitLayoutScalarBlockLayout = workgroupMemoryExplicitLayoutScalarBlockLayout;
            this.workgroupMemoryExplicitLayout8BitAccess = workgroupMemoryExplicitLayout8BitAccess;
            this.workgroupMemoryExplicitLayout16BitAccess = workgroupMemoryExplicitLayout16BitAccess;
        }
    }
    /// <summary><b>[requires: VK_KHR_portability_subset]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDevicePortabilitySubsetFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePortabilitySubsetFeaturesKhr;
        public void* pNext;
        public int constantAlphaColorBlendFactors;
        public int events;
        public int imageViewFormatReinterpretation;
        public int imageViewFormatSwizzle;
        public int imageView2DOn3DImage;
        public int multisampleArrayImage;
        public int mutableComparisonSamplers;
        public int pointPolygons;
        public int samplerMipLodBias;
        public int separateStencilMaskRef;
        public int shaderSampleRateInterpolationFunctions;
        public int tessellationIsolines;
        public int tessellationPointMode;
        public int triangleFans;
        public int vertexAttributeAccessBeyondStride;
        public VkPhysicalDevicePortabilitySubsetFeaturesKHR() { }
        public VkPhysicalDevicePortabilitySubsetFeaturesKHR(VkStructureType sType, void* pNext, int constantAlphaColorBlendFactors, int events, int imageViewFormatReinterpretation, int imageViewFormatSwizzle, int imageView2DOn3DImage, int multisampleArrayImage, int mutableComparisonSamplers, int pointPolygons, int samplerMipLodBias, int separateStencilMaskRef, int shaderSampleRateInterpolationFunctions, int tessellationIsolines, int tessellationPointMode, int triangleFans, int vertexAttributeAccessBeyondStride)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.constantAlphaColorBlendFactors = constantAlphaColorBlendFactors;
            this.events = events;
            this.imageViewFormatReinterpretation = imageViewFormatReinterpretation;
            this.imageViewFormatSwizzle = imageViewFormatSwizzle;
            this.imageView2DOn3DImage = imageView2DOn3DImage;
            this.multisampleArrayImage = multisampleArrayImage;
            this.mutableComparisonSamplers = mutableComparisonSamplers;
            this.pointPolygons = pointPolygons;
            this.samplerMipLodBias = samplerMipLodBias;
            this.separateStencilMaskRef = separateStencilMaskRef;
            this.shaderSampleRateInterpolationFunctions = shaderSampleRateInterpolationFunctions;
            this.tessellationIsolines = tessellationIsolines;
            this.tessellationPointMode = tessellationPointMode;
            this.triangleFans = triangleFans;
            this.vertexAttributeAccessBeyondStride = vertexAttributeAccessBeyondStride;
        }
    }
    /// <summary><b>[requires: VK_KHR_portability_subset]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDevicePortabilitySubsetPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePortabilitySubsetPropertiesKhr;
        public void* pNext;
        public uint minVertexInputBindingStrideAlignment;
        public VkPhysicalDevicePortabilitySubsetPropertiesKHR() { }
        public VkPhysicalDevicePortabilitySubsetPropertiesKHR(VkStructureType sType, void* pNext, uint minVertexInputBindingStrideAlignment)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.minVertexInputBindingStrideAlignment = minVertexInputBindingStrideAlignment;
        }
    }
    /// <summary><b>[requires: VK_EXT_4444_formats]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevice4444FormatsFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDevice4444FormatsFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevice4444FormatsFeaturesExt;
        public void* pNext;
        public int formatA4R4G4B4;
        public int formatA4B4G4R4;
        public VkPhysicalDevice4444FormatsFeaturesEXT() { }
        public VkPhysicalDevice4444FormatsFeaturesEXT(VkStructureType sType, void* pNext, int formatA4R4G4B4, int formatA4B4G4R4)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.formatA4R4G4B4 = formatA4R4G4B4;
            this.formatA4B4G4R4 = formatA4B4G4R4;
        }
    }
    /// <summary><b>[requires: VK_HUAWEI_subpass_shading]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSubpassShadingFeaturesHUAWEI.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSubpassShadingFeaturesHuawei;
        public void* pNext;
        public int subpassShading;
        public VkPhysicalDeviceSubpassShadingFeaturesHUAWEI() { }
        public VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(VkStructureType sType, void* pNext, int subpassShading)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.subpassShading = subpassShading;
        }
    }
    /// <summary><b>[requires: VK_HUAWEI_cluster_culling_shader]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI.html" /></remarks>
    public unsafe struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceClusterCullingShaderFeaturesHuawei;
        public void* pNext;
        public int clustercullingShader;
        public int multiviewClusterCullingShader;
        public VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI() { }
        public VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI(VkStructureType sType, void* pNext, int clustercullingShader, int multiviewClusterCullingShader)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.clustercullingShader = clustercullingShader;
            this.multiviewClusterCullingShader = multiviewClusterCullingShader;
        }
    }
    /// <summary><b>[requires: VK_HUAWEI_cluster_culling_shader]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI.html" /></remarks>
    public unsafe struct VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceClusterCullingShaderVrsFeaturesHuawei;
        public void* pNext;
        public int clusterShadingRate;
        public VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI() { }
        public VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI(VkStructureType sType, void* pNext, int clusterShadingRate)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.clusterShadingRate = clusterShadingRate;
        }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferCopy2.html" /></remarks>
    public unsafe struct VkBufferCopy2
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferCopy2;
        public void* pNext;
        public ulong srcOffset;
        public ulong dstOffset;
        public ulong size;
        public VkBufferCopy2() { }
        public VkBufferCopy2(VkStructureType sType, void* pNext, ulong srcOffset, ulong dstOffset, ulong size)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcOffset = srcOffset;
            this.dstOffset = dstOffset;
            this.size = size;
        }
    }
    /// <summary><b>[requires: VK_KHR_copy_commands2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferCopy2KHR.html" /></remarks>
    public unsafe struct VkBufferCopy2KHR
    {
        public VkBufferCopy2KHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageCopy2.html" /></remarks>
    public unsafe struct VkImageCopy2
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageCopy2;
        public void* pNext;
        public VkImageSubresourceLayers srcSubresource;
        public VkOffset3D srcOffset;
        public VkImageSubresourceLayers dstSubresource;
        public VkOffset3D dstOffset;
        public VkExtent3D extent;
        public VkImageCopy2() { }
        public VkImageCopy2(VkStructureType sType, void* pNext, VkImageSubresourceLayers srcSubresource, VkOffset3D srcOffset, VkImageSubresourceLayers dstSubresource, VkOffset3D dstOffset, VkExtent3D extent)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcSubresource = srcSubresource;
            this.srcOffset = srcOffset;
            this.dstSubresource = dstSubresource;
            this.dstOffset = dstOffset;
            this.extent = extent;
        }
    }
    /// <summary><b>[requires: VK_KHR_copy_commands2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageCopy2KHR.html" /></remarks>
    public unsafe struct VkImageCopy2KHR
    {
        public VkImageCopy2KHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageBlit2.html" /></remarks>
    public unsafe struct VkImageBlit2
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageBlit2;
        public void* pNext;
        public VkImageSubresourceLayers srcSubresource;
        [InlineArray(2)]
        public struct srcOffsetsInlineArray1
        {
            public VkOffset3D element;
        }
        public srcOffsetsInlineArray1 srcOffsets;
        public VkImageSubresourceLayers dstSubresource;
        [InlineArray(2)]
        public struct dstOffsetsInlineArray1
        {
            public VkOffset3D element;
        }
        public dstOffsetsInlineArray1 dstOffsets;
        public VkImageBlit2() { }
    }
    /// <summary><b>[requires: VK_KHR_copy_commands2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageBlit2KHR.html" /></remarks>
    public unsafe struct VkImageBlit2KHR
    {
        public VkImageBlit2KHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferImageCopy2.html" /></remarks>
    public unsafe struct VkBufferImageCopy2
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferImageCopy2;
        public void* pNext;
        public ulong bufferOffset;
        public uint bufferRowLength;
        public uint bufferImageHeight;
        public VkImageSubresourceLayers imageSubresource;
        public VkOffset3D imageOffset;
        public VkExtent3D imageExtent;
        public VkBufferImageCopy2() { }
        public VkBufferImageCopy2(VkStructureType sType, void* pNext, ulong bufferOffset, uint bufferRowLength, uint bufferImageHeight, VkImageSubresourceLayers imageSubresource, VkOffset3D imageOffset, VkExtent3D imageExtent)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.bufferOffset = bufferOffset;
            this.bufferRowLength = bufferRowLength;
            this.bufferImageHeight = bufferImageHeight;
            this.imageSubresource = imageSubresource;
            this.imageOffset = imageOffset;
            this.imageExtent = imageExtent;
        }
    }
    /// <summary><b>[requires: VK_KHR_copy_commands2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferImageCopy2KHR.html" /></remarks>
    public unsafe struct VkBufferImageCopy2KHR
    {
        public VkBufferImageCopy2KHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageResolve2.html" /></remarks>
    public unsafe struct VkImageResolve2
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageResolve2;
        public void* pNext;
        public VkImageSubresourceLayers srcSubresource;
        public VkOffset3D srcOffset;
        public VkImageSubresourceLayers dstSubresource;
        public VkOffset3D dstOffset;
        public VkExtent3D extent;
        public VkImageResolve2() { }
        public VkImageResolve2(VkStructureType sType, void* pNext, VkImageSubresourceLayers srcSubresource, VkOffset3D srcOffset, VkImageSubresourceLayers dstSubresource, VkOffset3D dstOffset, VkExtent3D extent)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcSubresource = srcSubresource;
            this.srcOffset = srcOffset;
            this.dstSubresource = dstSubresource;
            this.dstOffset = dstOffset;
            this.extent = extent;
        }
    }
    /// <summary><b>[requires: VK_KHR_copy_commands2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageResolve2KHR.html" /></remarks>
    public unsafe struct VkImageResolve2KHR
    {
        public VkImageResolve2KHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyBufferInfo2.html" /></remarks>
    public unsafe struct VkCopyBufferInfo2
    {
        public VkStructureType sType = VkStructureType.StructureTypeCopyBufferInfo2;
        public void* pNext;
        public VkBuffer srcBuffer;
        public VkBuffer dstBuffer;
        public uint regionCount;
        public VkBufferCopy2* pRegions;
        public VkCopyBufferInfo2() { }
        public VkCopyBufferInfo2(VkStructureType sType, void* pNext, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, VkBufferCopy2* pRegions)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcBuffer = srcBuffer;
            this.dstBuffer = dstBuffer;
            this.regionCount = regionCount;
            this.pRegions = pRegions;
        }
    }
    /// <summary><b>[requires: VK_KHR_copy_commands2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyBufferInfo2KHR.html" /></remarks>
    public unsafe struct VkCopyBufferInfo2KHR
    {
        public VkCopyBufferInfo2KHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyImageInfo2.html" /></remarks>
    public unsafe struct VkCopyImageInfo2
    {
        public VkStructureType sType = VkStructureType.StructureTypeCopyImageInfo2;
        public void* pNext;
        public VkImage srcImage;
        public VkImageLayout srcImageLayout;
        public VkImage dstImage;
        public VkImageLayout dstImageLayout;
        public uint regionCount;
        public VkImageCopy2* pRegions;
        public VkCopyImageInfo2() { }
        public VkCopyImageInfo2(VkStructureType sType, void* pNext, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageCopy2* pRegions)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcImage = srcImage;
            this.srcImageLayout = srcImageLayout;
            this.dstImage = dstImage;
            this.dstImageLayout = dstImageLayout;
            this.regionCount = regionCount;
            this.pRegions = pRegions;
        }
    }
    /// <summary><b>[requires: VK_KHR_copy_commands2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyImageInfo2KHR.html" /></remarks>
    public unsafe struct VkCopyImageInfo2KHR
    {
        public VkCopyImageInfo2KHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBlitImageInfo2.html" /></remarks>
    public unsafe struct VkBlitImageInfo2
    {
        public VkStructureType sType = VkStructureType.StructureTypeBlitImageInfo2;
        public void* pNext;
        public VkImage srcImage;
        public VkImageLayout srcImageLayout;
        public VkImage dstImage;
        public VkImageLayout dstImageLayout;
        public uint regionCount;
        public VkImageBlit2* pRegions;
        public VkFilter filter;
        public VkBlitImageInfo2() { }
        public VkBlitImageInfo2(VkStructureType sType, void* pNext, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageBlit2* pRegions, VkFilter filter)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcImage = srcImage;
            this.srcImageLayout = srcImageLayout;
            this.dstImage = dstImage;
            this.dstImageLayout = dstImageLayout;
            this.regionCount = regionCount;
            this.pRegions = pRegions;
            this.filter = filter;
        }
    }
    /// <summary><b>[requires: VK_KHR_copy_commands2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBlitImageInfo2KHR.html" /></remarks>
    public unsafe struct VkBlitImageInfo2KHR
    {
        public VkBlitImageInfo2KHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyBufferToImageInfo2.html" /></remarks>
    public unsafe struct VkCopyBufferToImageInfo2
    {
        public VkStructureType sType = VkStructureType.StructureTypeCopyBufferToImageInfo2;
        public void* pNext;
        public VkBuffer srcBuffer;
        public VkImage dstImage;
        public VkImageLayout dstImageLayout;
        public uint regionCount;
        public VkBufferImageCopy2* pRegions;
        public VkCopyBufferToImageInfo2() { }
        public VkCopyBufferToImageInfo2(VkStructureType sType, void* pNext, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkBufferImageCopy2* pRegions)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcBuffer = srcBuffer;
            this.dstImage = dstImage;
            this.dstImageLayout = dstImageLayout;
            this.regionCount = regionCount;
            this.pRegions = pRegions;
        }
    }
    /// <summary><b>[requires: VK_KHR_copy_commands2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyBufferToImageInfo2KHR.html" /></remarks>
    public unsafe struct VkCopyBufferToImageInfo2KHR
    {
        public VkCopyBufferToImageInfo2KHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyImageToBufferInfo2.html" /></remarks>
    public unsafe struct VkCopyImageToBufferInfo2
    {
        public VkStructureType sType = VkStructureType.StructureTypeCopyImageToBufferInfo2;
        public void* pNext;
        public VkImage srcImage;
        public VkImageLayout srcImageLayout;
        public VkBuffer dstBuffer;
        public uint regionCount;
        public VkBufferImageCopy2* pRegions;
        public VkCopyImageToBufferInfo2() { }
        public VkCopyImageToBufferInfo2(VkStructureType sType, void* pNext, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, VkBufferImageCopy2* pRegions)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcImage = srcImage;
            this.srcImageLayout = srcImageLayout;
            this.dstBuffer = dstBuffer;
            this.regionCount = regionCount;
            this.pRegions = pRegions;
        }
    }
    /// <summary><b>[requires: VK_KHR_copy_commands2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyImageToBufferInfo2KHR.html" /></remarks>
    public unsafe struct VkCopyImageToBufferInfo2KHR
    {
        public VkCopyImageToBufferInfo2KHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkResolveImageInfo2.html" /></remarks>
    public unsafe struct VkResolveImageInfo2
    {
        public VkStructureType sType = VkStructureType.StructureTypeResolveImageInfo2;
        public void* pNext;
        public VkImage srcImage;
        public VkImageLayout srcImageLayout;
        public VkImage dstImage;
        public VkImageLayout dstImageLayout;
        public uint regionCount;
        public VkImageResolve2* pRegions;
        public VkResolveImageInfo2() { }
        public VkResolveImageInfo2(VkStructureType sType, void* pNext, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageResolve2* pRegions)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcImage = srcImage;
            this.srcImageLayout = srcImageLayout;
            this.dstImage = dstImage;
            this.dstImageLayout = dstImageLayout;
            this.regionCount = regionCount;
            this.pRegions = pRegions;
        }
    }
    /// <summary><b>[requires: VK_KHR_copy_commands2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkResolveImageInfo2KHR.html" /></remarks>
    public unsafe struct VkResolveImageInfo2KHR
    {
        public VkResolveImageInfo2KHR() { }
    }
    /// <summary><b>[requires: VK_EXT_shader_image_atomic_int64]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderImageAtomicInt64FeaturesExt;
        public void* pNext;
        public int shaderImageInt64Atomics;
        public int sparseImageInt64Atomics;
        public VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT() { }
        public VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(VkStructureType sType, void* pNext, int shaderImageInt64Atomics, int sparseImageInt64Atomics)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderImageInt64Atomics = shaderImageInt64Atomics;
            this.sparseImageInt64Atomics = sparseImageInt64Atomics;
        }
    }
    /// <summary><b>[requires: VK_KHR_fragment_shading_rate]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFragmentShadingRateAttachmentInfoKHR.html" /></remarks>
    public unsafe struct VkFragmentShadingRateAttachmentInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeFragmentShadingRateAttachmentInfoKhr;
        public void* pNext;
        public VkAttachmentReference2* pFragmentShadingRateAttachment;
        public VkExtent2D shadingRateAttachmentTexelSize;
        public VkFragmentShadingRateAttachmentInfoKHR() { }
        public VkFragmentShadingRateAttachmentInfoKHR(VkStructureType sType, void* pNext, VkAttachmentReference2* pFragmentShadingRateAttachment, VkExtent2D shadingRateAttachmentTexelSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pFragmentShadingRateAttachment = pFragmentShadingRateAttachment;
            this.shadingRateAttachmentTexelSize = shadingRateAttachmentTexelSize;
        }
    }
    /// <summary><b>[requires: VK_KHR_fragment_shading_rate]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineFragmentShadingRateStateCreateInfoKHR.html" /></remarks>
    public unsafe struct VkPipelineFragmentShadingRateStateCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineFragmentShadingRateStateCreateInfoKhr;
        public void* pNext;
        public VkExtent2D fragmentSize;
        [InlineArray(2)]
        public struct combinerOpsInlineArray1
        {
            public VkFragmentShadingRateCombinerOpKHR element;
        }
        public combinerOpsInlineArray1 combinerOps;
        public VkPipelineFragmentShadingRateStateCreateInfoKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_fragment_shading_rate]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRateFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFragmentShadingRateFeaturesKhr;
        public void* pNext;
        public int pipelineFragmentShadingRate;
        public int primitiveFragmentShadingRate;
        public int attachmentFragmentShadingRate;
        public VkPhysicalDeviceFragmentShadingRateFeaturesKHR() { }
        public VkPhysicalDeviceFragmentShadingRateFeaturesKHR(VkStructureType sType, void* pNext, int pipelineFragmentShadingRate, int primitiveFragmentShadingRate, int attachmentFragmentShadingRate)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipelineFragmentShadingRate = pipelineFragmentShadingRate;
            this.primitiveFragmentShadingRate = primitiveFragmentShadingRate;
            this.attachmentFragmentShadingRate = attachmentFragmentShadingRate;
        }
    }
    /// <summary><b>[requires: VK_KHR_fragment_shading_rate]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFragmentShadingRatePropertiesKhr;
        public void* pNext;
        public VkExtent2D minFragmentShadingRateAttachmentTexelSize;
        public VkExtent2D maxFragmentShadingRateAttachmentTexelSize;
        public uint maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
        public int primitiveFragmentShadingRateWithMultipleViewports;
        public int layeredShadingRateAttachments;
        public int fragmentShadingRateNonTrivialCombinerOps;
        public VkExtent2D maxFragmentSize;
        public uint maxFragmentSizeAspectRatio;
        public uint maxFragmentShadingRateCoverageSamples;
        public VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples;
        public int fragmentShadingRateWithShaderDepthStencilWrites;
        public int fragmentShadingRateWithSampleMask;
        public int fragmentShadingRateWithShaderSampleMask;
        public int fragmentShadingRateWithConservativeRasterization;
        public int fragmentShadingRateWithFragmentShaderInterlock;
        public int fragmentShadingRateWithCustomSampleLocations;
        public int fragmentShadingRateStrictMultiplyCombiner;
        public VkPhysicalDeviceFragmentShadingRatePropertiesKHR() { }
        public VkPhysicalDeviceFragmentShadingRatePropertiesKHR(VkStructureType sType, void* pNext, VkExtent2D minFragmentShadingRateAttachmentTexelSize, VkExtent2D maxFragmentShadingRateAttachmentTexelSize, uint maxFragmentShadingRateAttachmentTexelSizeAspectRatio, int primitiveFragmentShadingRateWithMultipleViewports, int layeredShadingRateAttachments, int fragmentShadingRateNonTrivialCombinerOps, VkExtent2D maxFragmentSize, uint maxFragmentSizeAspectRatio, uint maxFragmentShadingRateCoverageSamples, VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples, int fragmentShadingRateWithShaderDepthStencilWrites, int fragmentShadingRateWithSampleMask, int fragmentShadingRateWithShaderSampleMask, int fragmentShadingRateWithConservativeRasterization, int fragmentShadingRateWithFragmentShaderInterlock, int fragmentShadingRateWithCustomSampleLocations, int fragmentShadingRateStrictMultiplyCombiner)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.minFragmentShadingRateAttachmentTexelSize = minFragmentShadingRateAttachmentTexelSize;
            this.maxFragmentShadingRateAttachmentTexelSize = maxFragmentShadingRateAttachmentTexelSize;
            this.maxFragmentShadingRateAttachmentTexelSizeAspectRatio = maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
            this.primitiveFragmentShadingRateWithMultipleViewports = primitiveFragmentShadingRateWithMultipleViewports;
            this.layeredShadingRateAttachments = layeredShadingRateAttachments;
            this.fragmentShadingRateNonTrivialCombinerOps = fragmentShadingRateNonTrivialCombinerOps;
            this.maxFragmentSize = maxFragmentSize;
            this.maxFragmentSizeAspectRatio = maxFragmentSizeAspectRatio;
            this.maxFragmentShadingRateCoverageSamples = maxFragmentShadingRateCoverageSamples;
            this.maxFragmentShadingRateRasterizationSamples = maxFragmentShadingRateRasterizationSamples;
            this.fragmentShadingRateWithShaderDepthStencilWrites = fragmentShadingRateWithShaderDepthStencilWrites;
            this.fragmentShadingRateWithSampleMask = fragmentShadingRateWithSampleMask;
            this.fragmentShadingRateWithShaderSampleMask = fragmentShadingRateWithShaderSampleMask;
            this.fragmentShadingRateWithConservativeRasterization = fragmentShadingRateWithConservativeRasterization;
            this.fragmentShadingRateWithFragmentShaderInterlock = fragmentShadingRateWithFragmentShaderInterlock;
            this.fragmentShadingRateWithCustomSampleLocations = fragmentShadingRateWithCustomSampleLocations;
            this.fragmentShadingRateStrictMultiplyCombiner = fragmentShadingRateStrictMultiplyCombiner;
        }
    }
    /// <summary><b>[requires: VK_KHR_fragment_shading_rate]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRateKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFragmentShadingRateKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFragmentShadingRateKhr;
        public void* pNext;
        public VkSampleCountFlagBits sampleCounts;
        public VkExtent2D fragmentSize;
        public VkPhysicalDeviceFragmentShadingRateKHR() { }
        public VkPhysicalDeviceFragmentShadingRateKHR(VkStructureType sType, void* pNext, VkSampleCountFlagBits sampleCounts, VkExtent2D fragmentSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.sampleCounts = sampleCounts;
            this.fragmentSize = fragmentSize;
        }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderTerminateInvocationFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderTerminateInvocationFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderTerminateInvocationFeatures;
        public void* pNext;
        public int shaderTerminateInvocation;
        public VkPhysicalDeviceShaderTerminateInvocationFeatures() { }
        public VkPhysicalDeviceShaderTerminateInvocationFeatures(VkStructureType sType, void* pNext, int shaderTerminateInvocation)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderTerminateInvocation = shaderTerminateInvocation;
        }
    }
    /// <summary><b>[requires: VK_KHR_shader_terminate_invocation]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR
    {
        public VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR() { }
    }
    /// <summary><b>[requires: VK_NV_fragment_shading_rate_enums]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFragmentShadingRateEnumsFeaturesNv;
        public void* pNext;
        public int fragmentShadingRateEnums;
        public int supersampleFragmentShadingRates;
        public int noInvocationFragmentShadingRates;
        public VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV() { }
        public VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(VkStructureType sType, void* pNext, int fragmentShadingRateEnums, int supersampleFragmentShadingRates, int noInvocationFragmentShadingRates)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fragmentShadingRateEnums = fragmentShadingRateEnums;
            this.supersampleFragmentShadingRates = supersampleFragmentShadingRates;
            this.noInvocationFragmentShadingRates = noInvocationFragmentShadingRates;
        }
    }
    /// <summary><b>[requires: VK_NV_fragment_shading_rate_enums]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFragmentShadingRateEnumsPropertiesNv;
        public void* pNext;
        public VkSampleCountFlagBits maxFragmentShadingRateInvocationCount;
        public VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV() { }
        public VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(VkStructureType sType, void* pNext, VkSampleCountFlagBits maxFragmentShadingRateInvocationCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxFragmentShadingRateInvocationCount = maxFragmentShadingRateInvocationCount;
        }
    }
    /// <summary><b>[requires: VK_NV_fragment_shading_rate_enums]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineFragmentShadingRateEnumStateCreateInfoNV.html" /></remarks>
    public unsafe struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineFragmentShadingRateEnumStateCreateInfoNv;
        public void* pNext;
        public VkFragmentShadingRateTypeNV shadingRateType;
        public VkFragmentShadingRateNV shadingRate;
        [InlineArray(2)]
        public struct combinerOpsInlineArray1
        {
            public VkFragmentShadingRateCombinerOpKHR element;
        }
        public combinerOpsInlineArray1 combinerOps;
        public VkPipelineFragmentShadingRateEnumStateCreateInfoNV() { }
    }
    /// <summary><b>[requires: VK_KHR_acceleration_structure]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureBuildSizesInfoKHR.html" /></remarks>
    public unsafe struct VkAccelerationStructureBuildSizesInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureBuildSizesInfoKhr;
        public void* pNext;
        public ulong accelerationStructureSize;
        public ulong updateScratchSize;
        public ulong buildScratchSize;
        public VkAccelerationStructureBuildSizesInfoKHR() { }
        public VkAccelerationStructureBuildSizesInfoKHR(VkStructureType sType, void* pNext, ulong accelerationStructureSize, ulong updateScratchSize, ulong buildScratchSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.accelerationStructureSize = accelerationStructureSize;
            this.updateScratchSize = updateScratchSize;
            this.buildScratchSize = buildScratchSize;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_2d_view_of_3d]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImage2DViewOf3DFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImage2dViewOf3dFeaturesExt;
        public void* pNext;
        public int image2DViewOf3D;
        public int sampler2DViewOf3D;
        public VkPhysicalDeviceImage2DViewOf3DFeaturesEXT() { }
        public VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(VkStructureType sType, void* pNext, int image2DViewOf3D, int sampler2DViewOf3D)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.image2DViewOf3D = image2DViewOf3D;
            this.sampler2DViewOf3D = sampler2DViewOf3D;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_sliced_view_of_3d]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImageSlicedViewOf3dFeaturesExt;
        public void* pNext;
        public int imageSlicedViewOf3D;
        public VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT() { }
        public VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT(VkStructureType sType, void* pNext, int imageSlicedViewOf3D)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageSlicedViewOf3D = imageSlicedViewOf3D;
        }
    }
    /// <summary><b>[requires: VK_EXT_attachment_feedback_loop_dynamic_state]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesExt;
        public void* pNext;
        public int attachmentFeedbackLoopDynamicState;
        public VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT() { }
        public VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(VkStructureType sType, void* pNext, int attachmentFeedbackLoopDynamicState)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.attachmentFeedbackLoopDynamicState = attachmentFeedbackLoopDynamicState;
        }
    }
    /// <summary><b>[requires: VK_EXT_legacy_vertex_attributes]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceLegacyVertexAttributesFeaturesExt;
        public void* pNext;
        public int legacyVertexAttributes;
        public VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT() { }
        public VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT(VkStructureType sType, void* pNext, int legacyVertexAttributes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.legacyVertexAttributes = legacyVertexAttributes;
        }
    }
    /// <summary><b>[requires: VK_EXT_legacy_vertex_attributes]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceLegacyVertexAttributesPropertiesExt;
        public void* pNext;
        public int nativeUnalignedPerformance;
        public VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT() { }
        public VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT(VkStructureType sType, void* pNext, int nativeUnalignedPerformance)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.nativeUnalignedPerformance = nativeUnalignedPerformance;
        }
    }
    /// <summary><b>[requires: VK_EXT_mutable_descriptor_type]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMutableDescriptorTypeFeaturesExt;
        public void* pNext;
        public int mutableDescriptorType;
        public VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT() { }
        public VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT(VkStructureType sType, void* pNext, int mutableDescriptorType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.mutableDescriptorType = mutableDescriptorType;
        }
    }
    /// <summary><b>[requires: VK_VALVE_mutable_descriptor_type]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE
    {
        public VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE() { }
    }
    /// <summary><b>[requires: VK_EXT_mutable_descriptor_type]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMutableDescriptorTypeListEXT.html" /></remarks>
    public unsafe struct VkMutableDescriptorTypeListEXT
    {
        public uint descriptorTypeCount;
        public VkDescriptorType* pDescriptorTypes;
        public VkMutableDescriptorTypeListEXT() { }
        public VkMutableDescriptorTypeListEXT(uint descriptorTypeCount, VkDescriptorType* pDescriptorTypes)
        {
            this.descriptorTypeCount = descriptorTypeCount;
            this.pDescriptorTypes = pDescriptorTypes;
        }
    }
    /// <summary><b>[requires: VK_VALVE_mutable_descriptor_type]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMutableDescriptorTypeListVALVE.html" /></remarks>
    public unsafe struct VkMutableDescriptorTypeListVALVE
    {
        public VkMutableDescriptorTypeListVALVE() { }
    }
    /// <summary><b>[requires: VK_EXT_mutable_descriptor_type]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMutableDescriptorTypeCreateInfoEXT.html" /></remarks>
    public unsafe struct VkMutableDescriptorTypeCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeMutableDescriptorTypeCreateInfoExt;
        public void* pNext;
        public uint mutableDescriptorTypeListCount;
        public VkMutableDescriptorTypeListEXT* pMutableDescriptorTypeLists;
        public VkMutableDescriptorTypeCreateInfoEXT() { }
        public VkMutableDescriptorTypeCreateInfoEXT(VkStructureType sType, void* pNext, uint mutableDescriptorTypeListCount, VkMutableDescriptorTypeListEXT* pMutableDescriptorTypeLists)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.mutableDescriptorTypeListCount = mutableDescriptorTypeListCount;
            this.pMutableDescriptorTypeLists = pMutableDescriptorTypeLists;
        }
    }
    /// <summary><b>[requires: VK_VALVE_mutable_descriptor_type]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMutableDescriptorTypeCreateInfoVALVE.html" /></remarks>
    public unsafe struct VkMutableDescriptorTypeCreateInfoVALVE
    {
        public VkMutableDescriptorTypeCreateInfoVALVE() { }
    }
    /// <summary><b>[requires: VK_EXT_depth_clip_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDepthClipControlFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDepthClipControlFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDepthClipControlFeaturesExt;
        public void* pNext;
        public int depthClipControl;
        public VkPhysicalDeviceDepthClipControlFeaturesEXT() { }
        public VkPhysicalDeviceDepthClipControlFeaturesEXT(VkStructureType sType, void* pNext, int depthClipControl)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.depthClipControl = depthClipControl;
        }
    }
    /// <summary><b>[requires: VK_EXT_depth_clip_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineViewportDepthClipControlCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineViewportDepthClipControlCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineViewportDepthClipControlCreateInfoExt;
        public void* pNext;
        public int negativeOneToOne;
        public VkPipelineViewportDepthClipControlCreateInfoEXT() { }
        public VkPipelineViewportDepthClipControlCreateInfoEXT(VkStructureType sType, void* pNext, int negativeOneToOne)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.negativeOneToOne = negativeOneToOne;
        }
    }
    /// <summary><b>[requires: VK_EXT_vertex_input_dynamic_state]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceVertexInputDynamicStateFeaturesExt;
        public void* pNext;
        public int vertexInputDynamicState;
        public VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT() { }
        public VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(VkStructureType sType, void* pNext, int vertexInputDynamicState)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.vertexInputDynamicState = vertexInputDynamicState;
        }
    }
    /// <summary><b>[requires: VK_NV_external_memory_rdma]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalMemoryRDMAFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExternalMemoryRdmaFeaturesNv;
        public void* pNext;
        public int externalMemoryRDMA;
        public VkPhysicalDeviceExternalMemoryRDMAFeaturesNV() { }
        public VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(VkStructureType sType, void* pNext, int externalMemoryRDMA)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.externalMemoryRDMA = externalMemoryRDMA;
        }
    }
    /// <summary><b>[requires: VK_KHR_shader_relaxed_extended_instruction]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKhr;
        public void* pNext;
        public int shaderRelaxedExtendedInstruction;
        public VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR() { }
        public VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR(VkStructureType sType, void* pNext, int shaderRelaxedExtendedInstruction)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderRelaxedExtendedInstruction = shaderRelaxedExtendedInstruction;
        }
    }
    /// <summary><b>[requires: VK_EXT_vertex_input_dynamic_state | VK_EXT_shader_object]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVertexInputBindingDescription2EXT.html" /></remarks>
    public unsafe struct VkVertexInputBindingDescription2EXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeVertexInputBindingDescription2Ext;
        public void* pNext;
        public uint binding;
        public uint stride;
        public VkVertexInputRate inputRate;
        public uint divisor;
        public VkVertexInputBindingDescription2EXT() { }
        public VkVertexInputBindingDescription2EXT(VkStructureType sType, void* pNext, uint binding, uint stride, VkVertexInputRate inputRate, uint divisor)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.binding = binding;
            this.stride = stride;
            this.inputRate = inputRate;
            this.divisor = divisor;
        }
    }
    /// <summary><b>[requires: VK_EXT_vertex_input_dynamic_state | VK_EXT_shader_object]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVertexInputAttributeDescription2EXT.html" /></remarks>
    public unsafe struct VkVertexInputAttributeDescription2EXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeVertexInputAttributeDescription2Ext;
        public void* pNext;
        public uint location;
        public uint binding;
        public VkFormat format;
        public uint offset;
        public VkVertexInputAttributeDescription2EXT() { }
        public VkVertexInputAttributeDescription2EXT(VkStructureType sType, void* pNext, uint location, uint binding, VkFormat format, uint offset)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.location = location;
            this.binding = binding;
            this.format = format;
            this.offset = offset;
        }
    }
    /// <summary><b>[requires: VK_EXT_color_write_enable]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceColorWriteEnableFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceColorWriteEnableFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceColorWriteEnableFeaturesExt;
        public void* pNext;
        public int colorWriteEnable;
        public VkPhysicalDeviceColorWriteEnableFeaturesEXT() { }
        public VkPhysicalDeviceColorWriteEnableFeaturesEXT(VkStructureType sType, void* pNext, int colorWriteEnable)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.colorWriteEnable = colorWriteEnable;
        }
    }
    /// <summary><b>[requires: VK_EXT_color_write_enable]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineColorWriteCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineColorWriteCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineColorWriteCreateInfoExt;
        public void* pNext;
        public uint attachmentCount;
        public int* pColorWriteEnables;
        public VkPipelineColorWriteCreateInfoEXT() { }
        public VkPipelineColorWriteCreateInfoEXT(VkStructureType sType, void* pNext, uint attachmentCount, int* pColorWriteEnables)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.attachmentCount = attachmentCount;
            this.pColorWriteEnables = pColorWriteEnables;
        }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryBarrier2.html" /></remarks>
    public unsafe struct VkMemoryBarrier2
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryBarrier2;
        public void* pNext;
        public VkPipelineStageFlagBits2 srcStageMask;
        public VkAccessFlagBits2 srcAccessMask;
        public VkPipelineStageFlagBits2 dstStageMask;
        public VkAccessFlagBits2 dstAccessMask;
        public VkMemoryBarrier2() { }
        public VkMemoryBarrier2(VkStructureType sType, void* pNext, VkPipelineStageFlagBits2 srcStageMask, VkAccessFlagBits2 srcAccessMask, VkPipelineStageFlagBits2 dstStageMask, VkAccessFlagBits2 dstAccessMask)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcStageMask = srcStageMask;
            this.srcAccessMask = srcAccessMask;
            this.dstStageMask = dstStageMask;
            this.dstAccessMask = dstAccessMask;
        }
    }
    /// <summary><b>[requires: VK_KHR_synchronization2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryBarrier2KHR.html" /></remarks>
    public unsafe struct VkMemoryBarrier2KHR
    {
        public VkMemoryBarrier2KHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageMemoryBarrier2.html" /></remarks>
    public unsafe struct VkImageMemoryBarrier2
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageMemoryBarrier2;
        public void* pNext;
        public VkPipelineStageFlagBits2 srcStageMask;
        public VkAccessFlagBits2 srcAccessMask;
        public VkPipelineStageFlagBits2 dstStageMask;
        public VkAccessFlagBits2 dstAccessMask;
        public VkImageLayout oldLayout;
        public VkImageLayout newLayout;
        public uint srcQueueFamilyIndex;
        public uint dstQueueFamilyIndex;
        public VkImage image;
        public VkImageSubresourceRange subresourceRange;
        public VkImageMemoryBarrier2() { }
        public VkImageMemoryBarrier2(VkStructureType sType, void* pNext, VkPipelineStageFlagBits2 srcStageMask, VkAccessFlagBits2 srcAccessMask, VkPipelineStageFlagBits2 dstStageMask, VkAccessFlagBits2 dstAccessMask, VkImageLayout oldLayout, VkImageLayout newLayout, uint srcQueueFamilyIndex, uint dstQueueFamilyIndex, VkImage image, VkImageSubresourceRange subresourceRange)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcStageMask = srcStageMask;
            this.srcAccessMask = srcAccessMask;
            this.dstStageMask = dstStageMask;
            this.dstAccessMask = dstAccessMask;
            this.oldLayout = oldLayout;
            this.newLayout = newLayout;
            this.srcQueueFamilyIndex = srcQueueFamilyIndex;
            this.dstQueueFamilyIndex = dstQueueFamilyIndex;
            this.image = image;
            this.subresourceRange = subresourceRange;
        }
    }
    /// <summary><b>[requires: VK_KHR_synchronization2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageMemoryBarrier2KHR.html" /></remarks>
    public unsafe struct VkImageMemoryBarrier2KHR
    {
        public VkImageMemoryBarrier2KHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferMemoryBarrier2.html" /></remarks>
    public unsafe struct VkBufferMemoryBarrier2
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferMemoryBarrier2;
        public void* pNext;
        public VkPipelineStageFlagBits2 srcStageMask;
        public VkAccessFlagBits2 srcAccessMask;
        public VkPipelineStageFlagBits2 dstStageMask;
        public VkAccessFlagBits2 dstAccessMask;
        public uint srcQueueFamilyIndex;
        public uint dstQueueFamilyIndex;
        public VkBuffer buffer;
        public ulong offset;
        public ulong size;
        public VkBufferMemoryBarrier2() { }
        public VkBufferMemoryBarrier2(VkStructureType sType, void* pNext, VkPipelineStageFlagBits2 srcStageMask, VkAccessFlagBits2 srcAccessMask, VkPipelineStageFlagBits2 dstStageMask, VkAccessFlagBits2 dstAccessMask, uint srcQueueFamilyIndex, uint dstQueueFamilyIndex, VkBuffer buffer, ulong offset, ulong size)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.srcStageMask = srcStageMask;
            this.srcAccessMask = srcAccessMask;
            this.dstStageMask = dstStageMask;
            this.dstAccessMask = dstAccessMask;
            this.srcQueueFamilyIndex = srcQueueFamilyIndex;
            this.dstQueueFamilyIndex = dstQueueFamilyIndex;
            this.buffer = buffer;
            this.offset = offset;
            this.size = size;
        }
    }
    /// <summary><b>[requires: VK_KHR_synchronization2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferMemoryBarrier2KHR.html" /></remarks>
    public unsafe struct VkBufferMemoryBarrier2KHR
    {
        public VkBufferMemoryBarrier2KHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDependencyInfo.html" /></remarks>
    public unsafe struct VkDependencyInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeDependencyInfo;
        public void* pNext;
        public VkDependencyFlagBits dependencyFlags;
        public uint memoryBarrierCount;
        public VkMemoryBarrier2* pMemoryBarriers;
        public uint bufferMemoryBarrierCount;
        public VkBufferMemoryBarrier2* pBufferMemoryBarriers;
        public uint imageMemoryBarrierCount;
        public VkImageMemoryBarrier2* pImageMemoryBarriers;
        public VkDependencyInfo() { }
        public VkDependencyInfo(VkStructureType sType, void* pNext, VkDependencyFlagBits dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier2* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier2* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier2* pImageMemoryBarriers)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.dependencyFlags = dependencyFlags;
            this.memoryBarrierCount = memoryBarrierCount;
            this.pMemoryBarriers = pMemoryBarriers;
            this.bufferMemoryBarrierCount = bufferMemoryBarrierCount;
            this.pBufferMemoryBarriers = pBufferMemoryBarriers;
            this.imageMemoryBarrierCount = imageMemoryBarrierCount;
            this.pImageMemoryBarriers = pImageMemoryBarriers;
        }
    }
    /// <summary><b>[requires: VK_KHR_synchronization2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDependencyInfoKHR.html" /></remarks>
    public unsafe struct VkDependencyInfoKHR
    {
        public VkDependencyInfoKHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSemaphoreSubmitInfo.html" /></remarks>
    public unsafe struct VkSemaphoreSubmitInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeSemaphoreSubmitInfo;
        public void* pNext;
        public VkSemaphore semaphore;
        public ulong value;
        public VkPipelineStageFlagBits2 stageMask;
        public uint deviceIndex;
        public VkSemaphoreSubmitInfo() { }
        public VkSemaphoreSubmitInfo(VkStructureType sType, void* pNext, VkSemaphore semaphore, ulong value, VkPipelineStageFlagBits2 stageMask, uint deviceIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.semaphore = semaphore;
            this.value = value;
            this.stageMask = stageMask;
            this.deviceIndex = deviceIndex;
        }
    }
    /// <summary><b>[requires: VK_KHR_synchronization2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSemaphoreSubmitInfoKHR.html" /></remarks>
    public unsafe struct VkSemaphoreSubmitInfoKHR
    {
        public VkSemaphoreSubmitInfoKHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCommandBufferSubmitInfo.html" /></remarks>
    public unsafe struct VkCommandBufferSubmitInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeCommandBufferSubmitInfo;
        public void* pNext;
        public VkCommandBuffer commandBuffer;
        public uint deviceMask;
        public VkCommandBufferSubmitInfo() { }
        public VkCommandBufferSubmitInfo(VkStructureType sType, void* pNext, VkCommandBuffer commandBuffer, uint deviceMask)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.commandBuffer = commandBuffer;
            this.deviceMask = deviceMask;
        }
    }
    /// <summary><b>[requires: VK_KHR_synchronization2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCommandBufferSubmitInfoKHR.html" /></remarks>
    public unsafe struct VkCommandBufferSubmitInfoKHR
    {
        public VkCommandBufferSubmitInfoKHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubmitInfo2.html" /></remarks>
    public unsafe struct VkSubmitInfo2
    {
        public VkStructureType sType = VkStructureType.StructureTypeSubmitInfo2;
        public void* pNext;
        public VkSubmitFlagBits flags;
        public uint waitSemaphoreInfoCount;
        public VkSemaphoreSubmitInfo* pWaitSemaphoreInfos;
        public uint commandBufferInfoCount;
        public VkCommandBufferSubmitInfo* pCommandBufferInfos;
        public uint signalSemaphoreInfoCount;
        public VkSemaphoreSubmitInfo* pSignalSemaphoreInfos;
        public VkSubmitInfo2() { }
        public VkSubmitInfo2(VkStructureType sType, void* pNext, VkSubmitFlagBits flags, uint waitSemaphoreInfoCount, VkSemaphoreSubmitInfo* pWaitSemaphoreInfos, uint commandBufferInfoCount, VkCommandBufferSubmitInfo* pCommandBufferInfos, uint signalSemaphoreInfoCount, VkSemaphoreSubmitInfo* pSignalSemaphoreInfos)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.waitSemaphoreInfoCount = waitSemaphoreInfoCount;
            this.pWaitSemaphoreInfos = pWaitSemaphoreInfos;
            this.commandBufferInfoCount = commandBufferInfoCount;
            this.pCommandBufferInfos = pCommandBufferInfos;
            this.signalSemaphoreInfoCount = signalSemaphoreInfoCount;
            this.pSignalSemaphoreInfos = pSignalSemaphoreInfos;
        }
    }
    /// <summary><b>[requires: VK_KHR_synchronization2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubmitInfo2KHR.html" /></remarks>
    public unsafe struct VkSubmitInfo2KHR
    {
        public VkSubmitInfo2KHR() { }
    }
    /// <summary><b>[requires: VK_KHR_synchronization2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkQueueFamilyCheckpointProperties2NV.html" /></remarks>
    public unsafe struct VkQueueFamilyCheckpointProperties2NV
    {
        public VkStructureType sType = VkStructureType.StructureTypeQueueFamilyCheckpointProperties2Nv;
        public void* pNext;
        public VkPipelineStageFlagBits2 checkpointExecutionStageMask;
        public VkQueueFamilyCheckpointProperties2NV() { }
        public VkQueueFamilyCheckpointProperties2NV(VkStructureType sType, void* pNext, VkPipelineStageFlagBits2 checkpointExecutionStageMask)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.checkpointExecutionStageMask = checkpointExecutionStageMask;
        }
    }
    /// <summary><b>[requires: VK_KHR_synchronization2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCheckpointData2NV.html" /></remarks>
    public unsafe struct VkCheckpointData2NV
    {
        public VkStructureType sType = VkStructureType.StructureTypeCheckpointData2Nv;
        public void* pNext;
        public VkPipelineStageFlagBits2 stage;
        public void* pCheckpointMarker;
        public VkCheckpointData2NV() { }
        public VkCheckpointData2NV(VkStructureType sType, void* pNext, VkPipelineStageFlagBits2 stage, void* pCheckpointMarker)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stage = stage;
            this.pCheckpointMarker = pCheckpointMarker;
        }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSynchronization2Features.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSynchronization2Features
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSynchronization2Features;
        public void* pNext;
        public int synchronization2;
        public VkPhysicalDeviceSynchronization2Features() { }
        public VkPhysicalDeviceSynchronization2Features(VkStructureType sType, void* pNext, int synchronization2)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.synchronization2 = synchronization2;
        }
    }
    /// <summary><b>[requires: VK_KHR_synchronization2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSynchronization2FeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSynchronization2FeaturesKHR
    {
        public VkPhysicalDeviceSynchronization2FeaturesKHR() { }
    }
    /// <summary><b>[requires: VK_EXT_host_image_copy]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceHostImageCopyFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceHostImageCopyFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceHostImageCopyFeaturesExt;
        public void* pNext;
        public int hostImageCopy;
        public VkPhysicalDeviceHostImageCopyFeaturesEXT() { }
        public VkPhysicalDeviceHostImageCopyFeaturesEXT(VkStructureType sType, void* pNext, int hostImageCopy)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.hostImageCopy = hostImageCopy;
        }
    }
    /// <summary><b>[requires: VK_EXT_host_image_copy]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceHostImageCopyPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceHostImageCopyPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceHostImageCopyPropertiesExt;
        public void* pNext;
        public uint copySrcLayoutCount;
        public VkImageLayout* pCopySrcLayouts;
        public uint copyDstLayoutCount;
        public VkImageLayout* pCopyDstLayouts;
        public fixed byte optimalTilingLayoutUUID[16];
        public int identicalMemoryTypeRequirements;
        public VkPhysicalDeviceHostImageCopyPropertiesEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_host_image_copy]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryToImageCopyEXT.html" /></remarks>
    public unsafe struct VkMemoryToImageCopyEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryToImageCopyExt;
        public void* pNext;
        public void* pHostPointer;
        public uint memoryRowLength;
        public uint memoryImageHeight;
        public VkImageSubresourceLayers imageSubresource;
        public VkOffset3D imageOffset;
        public VkExtent3D imageExtent;
        public VkMemoryToImageCopyEXT() { }
        public VkMemoryToImageCopyEXT(VkStructureType sType, void* pNext, void* pHostPointer, uint memoryRowLength, uint memoryImageHeight, VkImageSubresourceLayers imageSubresource, VkOffset3D imageOffset, VkExtent3D imageExtent)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pHostPointer = pHostPointer;
            this.memoryRowLength = memoryRowLength;
            this.memoryImageHeight = memoryImageHeight;
            this.imageSubresource = imageSubresource;
            this.imageOffset = imageOffset;
            this.imageExtent = imageExtent;
        }
    }
    /// <summary><b>[requires: VK_EXT_host_image_copy]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageToMemoryCopyEXT.html" /></remarks>
    public unsafe struct VkImageToMemoryCopyEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageToMemoryCopyExt;
        public void* pNext;
        public void* pHostPointer;
        public uint memoryRowLength;
        public uint memoryImageHeight;
        public VkImageSubresourceLayers imageSubresource;
        public VkOffset3D imageOffset;
        public VkExtent3D imageExtent;
        public VkImageToMemoryCopyEXT() { }
        public VkImageToMemoryCopyEXT(VkStructureType sType, void* pNext, void* pHostPointer, uint memoryRowLength, uint memoryImageHeight, VkImageSubresourceLayers imageSubresource, VkOffset3D imageOffset, VkExtent3D imageExtent)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pHostPointer = pHostPointer;
            this.memoryRowLength = memoryRowLength;
            this.memoryImageHeight = memoryImageHeight;
            this.imageSubresource = imageSubresource;
            this.imageOffset = imageOffset;
            this.imageExtent = imageExtent;
        }
    }
    /// <summary><b>[requires: VK_EXT_host_image_copy]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyMemoryToImageInfoEXT.html" /></remarks>
    public unsafe struct VkCopyMemoryToImageInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeCopyMemoryToImageInfoExt;
        public void* pNext;
        public VkHostImageCopyFlagBitsEXT flags;
        public VkImage dstImage;
        public VkImageLayout dstImageLayout;
        public uint regionCount;
        public VkMemoryToImageCopyEXT* pRegions;
        public VkCopyMemoryToImageInfoEXT() { }
        public VkCopyMemoryToImageInfoEXT(VkStructureType sType, void* pNext, VkHostImageCopyFlagBitsEXT flags, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkMemoryToImageCopyEXT* pRegions)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.dstImage = dstImage;
            this.dstImageLayout = dstImageLayout;
            this.regionCount = regionCount;
            this.pRegions = pRegions;
        }
    }
    /// <summary><b>[requires: VK_EXT_host_image_copy]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyImageToMemoryInfoEXT.html" /></remarks>
    public unsafe struct VkCopyImageToMemoryInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeCopyImageToMemoryInfoExt;
        public void* pNext;
        public VkHostImageCopyFlagBitsEXT flags;
        public VkImage srcImage;
        public VkImageLayout srcImageLayout;
        public uint regionCount;
        public VkImageToMemoryCopyEXT* pRegions;
        public VkCopyImageToMemoryInfoEXT() { }
        public VkCopyImageToMemoryInfoEXT(VkStructureType sType, void* pNext, VkHostImageCopyFlagBitsEXT flags, VkImage srcImage, VkImageLayout srcImageLayout, uint regionCount, VkImageToMemoryCopyEXT* pRegions)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.srcImage = srcImage;
            this.srcImageLayout = srcImageLayout;
            this.regionCount = regionCount;
            this.pRegions = pRegions;
        }
    }
    /// <summary><b>[requires: VK_EXT_host_image_copy]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyImageToImageInfoEXT.html" /></remarks>
    public unsafe struct VkCopyImageToImageInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeCopyImageToImageInfoExt;
        public void* pNext;
        public VkHostImageCopyFlagBitsEXT flags;
        public VkImage srcImage;
        public VkImageLayout srcImageLayout;
        public VkImage dstImage;
        public VkImageLayout dstImageLayout;
        public uint regionCount;
        public VkImageCopy2* pRegions;
        public VkCopyImageToImageInfoEXT() { }
        public VkCopyImageToImageInfoEXT(VkStructureType sType, void* pNext, VkHostImageCopyFlagBitsEXT flags, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageCopy2* pRegions)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.srcImage = srcImage;
            this.srcImageLayout = srcImageLayout;
            this.dstImage = dstImage;
            this.dstImageLayout = dstImageLayout;
            this.regionCount = regionCount;
            this.pRegions = pRegions;
        }
    }
    /// <summary><b>[requires: VK_EXT_host_image_copy]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkHostImageLayoutTransitionInfoEXT.html" /></remarks>
    public unsafe struct VkHostImageLayoutTransitionInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeHostImageLayoutTransitionInfoExt;
        public void* pNext;
        public VkImage image;
        public VkImageLayout oldLayout;
        public VkImageLayout newLayout;
        public VkImageSubresourceRange subresourceRange;
        public VkHostImageLayoutTransitionInfoEXT() { }
        public VkHostImageLayoutTransitionInfoEXT(VkStructureType sType, void* pNext, VkImage image, VkImageLayout oldLayout, VkImageLayout newLayout, VkImageSubresourceRange subresourceRange)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.image = image;
            this.oldLayout = oldLayout;
            this.newLayout = newLayout;
            this.subresourceRange = subresourceRange;
        }
    }
    /// <summary><b>[requires: VK_EXT_host_image_copy]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubresourceHostMemcpySizeEXT.html" /></remarks>
    public unsafe struct VkSubresourceHostMemcpySizeEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSubresourceHostMemcpySizeExt;
        public void* pNext;
        public ulong size;
        public VkSubresourceHostMemcpySizeEXT() { }
        public VkSubresourceHostMemcpySizeEXT(VkStructureType sType, void* pNext, ulong size)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.size = size;
        }
    }
    /// <summary><b>[requires: VK_EXT_host_image_copy]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkHostImageCopyDevicePerformanceQueryEXT.html" /></remarks>
    public unsafe struct VkHostImageCopyDevicePerformanceQueryEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeHostImageCopyDevicePerformanceQueryExt;
        public void* pNext;
        public int optimalDeviceAccess;
        public int identicalMemoryLayout;
        public VkHostImageCopyDevicePerformanceQueryEXT() { }
        public VkHostImageCopyDevicePerformanceQueryEXT(VkStructureType sType, void* pNext, int optimalDeviceAccess, int identicalMemoryLayout)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.optimalDeviceAccess = optimalDeviceAccess;
            this.identicalMemoryLayout = identicalMemoryLayout;
        }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkanSC10Properties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVulkanSC10Properties
    {
        public VkStructureType sType;
        public void* pNext;
        public int deviceNoDynamicHostAllocations;
        public int deviceDestroyFreesMemory;
        public int commandPoolMultipleCommandBuffersRecording;
        public int commandPoolResetCommandBuffer;
        public int commandBufferSimultaneousUse;
        public int secondaryCommandBufferNullOrImagelessFramebuffer;
        public int recycleDescriptorSetMemory;
        public int recyclePipelineMemory;
        public uint maxRenderPassSubpasses;
        public uint maxRenderPassDependencies;
        public uint maxSubpassInputAttachments;
        public uint maxSubpassPreserveAttachments;
        public uint maxFramebufferAttachments;
        public uint maxDescriptorSetLayoutBindings;
        public uint maxQueryFaultCount;
        public uint maxCallbackFaultCount;
        public uint maxCommandPoolCommandBuffers;
        public ulong maxCommandBufferSize;
        public VkPhysicalDeviceVulkanSC10Properties() { }
        public VkPhysicalDeviceVulkanSC10Properties(VkStructureType sType, void* pNext, int deviceNoDynamicHostAllocations, int deviceDestroyFreesMemory, int commandPoolMultipleCommandBuffersRecording, int commandPoolResetCommandBuffer, int commandBufferSimultaneousUse, int secondaryCommandBufferNullOrImagelessFramebuffer, int recycleDescriptorSetMemory, int recyclePipelineMemory, uint maxRenderPassSubpasses, uint maxRenderPassDependencies, uint maxSubpassInputAttachments, uint maxSubpassPreserveAttachments, uint maxFramebufferAttachments, uint maxDescriptorSetLayoutBindings, uint maxQueryFaultCount, uint maxCallbackFaultCount, uint maxCommandPoolCommandBuffers, ulong maxCommandBufferSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.deviceNoDynamicHostAllocations = deviceNoDynamicHostAllocations;
            this.deviceDestroyFreesMemory = deviceDestroyFreesMemory;
            this.commandPoolMultipleCommandBuffersRecording = commandPoolMultipleCommandBuffersRecording;
            this.commandPoolResetCommandBuffer = commandPoolResetCommandBuffer;
            this.commandBufferSimultaneousUse = commandBufferSimultaneousUse;
            this.secondaryCommandBufferNullOrImagelessFramebuffer = secondaryCommandBufferNullOrImagelessFramebuffer;
            this.recycleDescriptorSetMemory = recycleDescriptorSetMemory;
            this.recyclePipelineMemory = recyclePipelineMemory;
            this.maxRenderPassSubpasses = maxRenderPassSubpasses;
            this.maxRenderPassDependencies = maxRenderPassDependencies;
            this.maxSubpassInputAttachments = maxSubpassInputAttachments;
            this.maxSubpassPreserveAttachments = maxSubpassPreserveAttachments;
            this.maxFramebufferAttachments = maxFramebufferAttachments;
            this.maxDescriptorSetLayoutBindings = maxDescriptorSetLayoutBindings;
            this.maxQueryFaultCount = maxQueryFaultCount;
            this.maxCallbackFaultCount = maxCallbackFaultCount;
            this.maxCommandPoolCommandBuffers = maxCommandPoolCommandBuffers;
            this.maxCommandBufferSize = maxCommandBufferSize;
        }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelinePoolSize.html" /></remarks>
    public unsafe struct VkPipelinePoolSize
    {
        public VkStructureType sType;
        public void* pNext;
        public ulong poolEntrySize;
        public uint poolEntryCount;
        public VkPipelinePoolSize() { }
        public VkPipelinePoolSize(VkStructureType sType, void* pNext, ulong poolEntrySize, uint poolEntryCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.poolEntrySize = poolEntrySize;
            this.poolEntryCount = poolEntryCount;
        }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceObjectReservationCreateInfo.html" /></remarks>
    public unsafe struct VkDeviceObjectReservationCreateInfo
    {
        public VkStructureType sType;
        public void* pNext;
        public uint pipelineCacheCreateInfoCount;
        public VkPipelineCacheCreateInfo* pPipelineCacheCreateInfos;
        public uint pipelinePoolSizeCount;
        public VkPipelinePoolSize* pPipelinePoolSizes;
        public uint semaphoreRequestCount;
        public uint commandBufferRequestCount;
        public uint fenceRequestCount;
        public uint deviceMemoryRequestCount;
        public uint bufferRequestCount;
        public uint imageRequestCount;
        public uint eventRequestCount;
        public uint queryPoolRequestCount;
        public uint bufferViewRequestCount;
        public uint imageViewRequestCount;
        public uint layeredImageViewRequestCount;
        public uint pipelineCacheRequestCount;
        public uint pipelineLayoutRequestCount;
        public uint renderPassRequestCount;
        public uint graphicsPipelineRequestCount;
        public uint computePipelineRequestCount;
        public uint descriptorSetLayoutRequestCount;
        public uint samplerRequestCount;
        public uint descriptorPoolRequestCount;
        public uint descriptorSetRequestCount;
        public uint framebufferRequestCount;
        public uint commandPoolRequestCount;
        public uint samplerYcbcrConversionRequestCount;
        public uint surfaceRequestCount;
        public uint swapchainRequestCount;
        public uint displayModeRequestCount;
        public uint subpassDescriptionRequestCount;
        public uint attachmentDescriptionRequestCount;
        public uint descriptorSetLayoutBindingRequestCount;
        public uint descriptorSetLayoutBindingLimit;
        public uint maxImageViewMipLevels;
        public uint maxImageViewArrayLayers;
        public uint maxLayeredImageViewMipLevels;
        public uint maxOcclusionQueriesPerPool;
        public uint maxPipelineStatisticsQueriesPerPool;
        public uint maxTimestampQueriesPerPool;
        public uint maxImmutableSamplersPerDescriptorSetLayout;
        public VkDeviceObjectReservationCreateInfo() { }
        public VkDeviceObjectReservationCreateInfo(VkStructureType sType, void* pNext, uint pipelineCacheCreateInfoCount, VkPipelineCacheCreateInfo* pPipelineCacheCreateInfos, uint pipelinePoolSizeCount, VkPipelinePoolSize* pPipelinePoolSizes, uint semaphoreRequestCount, uint commandBufferRequestCount, uint fenceRequestCount, uint deviceMemoryRequestCount, uint bufferRequestCount, uint imageRequestCount, uint eventRequestCount, uint queryPoolRequestCount, uint bufferViewRequestCount, uint imageViewRequestCount, uint layeredImageViewRequestCount, uint pipelineCacheRequestCount, uint pipelineLayoutRequestCount, uint renderPassRequestCount, uint graphicsPipelineRequestCount, uint computePipelineRequestCount, uint descriptorSetLayoutRequestCount, uint samplerRequestCount, uint descriptorPoolRequestCount, uint descriptorSetRequestCount, uint framebufferRequestCount, uint commandPoolRequestCount, uint samplerYcbcrConversionRequestCount, uint surfaceRequestCount, uint swapchainRequestCount, uint displayModeRequestCount, uint subpassDescriptionRequestCount, uint attachmentDescriptionRequestCount, uint descriptorSetLayoutBindingRequestCount, uint descriptorSetLayoutBindingLimit, uint maxImageViewMipLevels, uint maxImageViewArrayLayers, uint maxLayeredImageViewMipLevels, uint maxOcclusionQueriesPerPool, uint maxPipelineStatisticsQueriesPerPool, uint maxTimestampQueriesPerPool, uint maxImmutableSamplersPerDescriptorSetLayout)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipelineCacheCreateInfoCount = pipelineCacheCreateInfoCount;
            this.pPipelineCacheCreateInfos = pPipelineCacheCreateInfos;
            this.pipelinePoolSizeCount = pipelinePoolSizeCount;
            this.pPipelinePoolSizes = pPipelinePoolSizes;
            this.semaphoreRequestCount = semaphoreRequestCount;
            this.commandBufferRequestCount = commandBufferRequestCount;
            this.fenceRequestCount = fenceRequestCount;
            this.deviceMemoryRequestCount = deviceMemoryRequestCount;
            this.bufferRequestCount = bufferRequestCount;
            this.imageRequestCount = imageRequestCount;
            this.eventRequestCount = eventRequestCount;
            this.queryPoolRequestCount = queryPoolRequestCount;
            this.bufferViewRequestCount = bufferViewRequestCount;
            this.imageViewRequestCount = imageViewRequestCount;
            this.layeredImageViewRequestCount = layeredImageViewRequestCount;
            this.pipelineCacheRequestCount = pipelineCacheRequestCount;
            this.pipelineLayoutRequestCount = pipelineLayoutRequestCount;
            this.renderPassRequestCount = renderPassRequestCount;
            this.graphicsPipelineRequestCount = graphicsPipelineRequestCount;
            this.computePipelineRequestCount = computePipelineRequestCount;
            this.descriptorSetLayoutRequestCount = descriptorSetLayoutRequestCount;
            this.samplerRequestCount = samplerRequestCount;
            this.descriptorPoolRequestCount = descriptorPoolRequestCount;
            this.descriptorSetRequestCount = descriptorSetRequestCount;
            this.framebufferRequestCount = framebufferRequestCount;
            this.commandPoolRequestCount = commandPoolRequestCount;
            this.samplerYcbcrConversionRequestCount = samplerYcbcrConversionRequestCount;
            this.surfaceRequestCount = surfaceRequestCount;
            this.swapchainRequestCount = swapchainRequestCount;
            this.displayModeRequestCount = displayModeRequestCount;
            this.subpassDescriptionRequestCount = subpassDescriptionRequestCount;
            this.attachmentDescriptionRequestCount = attachmentDescriptionRequestCount;
            this.descriptorSetLayoutBindingRequestCount = descriptorSetLayoutBindingRequestCount;
            this.descriptorSetLayoutBindingLimit = descriptorSetLayoutBindingLimit;
            this.maxImageViewMipLevels = maxImageViewMipLevels;
            this.maxImageViewArrayLayers = maxImageViewArrayLayers;
            this.maxLayeredImageViewMipLevels = maxLayeredImageViewMipLevels;
            this.maxOcclusionQueriesPerPool = maxOcclusionQueriesPerPool;
            this.maxPipelineStatisticsQueriesPerPool = maxPipelineStatisticsQueriesPerPool;
            this.maxTimestampQueriesPerPool = maxTimestampQueriesPerPool;
            this.maxImmutableSamplersPerDescriptorSetLayout = maxImmutableSamplersPerDescriptorSetLayout;
        }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCommandPoolMemoryReservationCreateInfo.html" /></remarks>
    public unsafe struct VkCommandPoolMemoryReservationCreateInfo
    {
        public VkStructureType sType;
        public void* pNext;
        public ulong commandPoolReservedSize;
        public uint commandPoolMaxCommandBuffers;
        public VkCommandPoolMemoryReservationCreateInfo() { }
        public VkCommandPoolMemoryReservationCreateInfo(VkStructureType sType, void* pNext, ulong commandPoolReservedSize, uint commandPoolMaxCommandBuffers)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.commandPoolReservedSize = commandPoolReservedSize;
            this.commandPoolMaxCommandBuffers = commandPoolMaxCommandBuffers;
        }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCommandPoolMemoryConsumption.html" /></remarks>
    public unsafe struct VkCommandPoolMemoryConsumption
    {
        public VkStructureType sType;
        public void* pNext;
        public ulong commandPoolAllocated;
        public ulong commandPoolReservedSize;
        public ulong commandBufferAllocated;
        public VkCommandPoolMemoryConsumption() { }
        public VkCommandPoolMemoryConsumption(VkStructureType sType, void* pNext, ulong commandPoolAllocated, ulong commandPoolReservedSize, ulong commandBufferAllocated)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.commandPoolAllocated = commandPoolAllocated;
            this.commandPoolReservedSize = commandPoolReservedSize;
            this.commandBufferAllocated = commandBufferAllocated;
        }
    }
    /// <summary></summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkanSC10Features.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVulkanSC10Features
    {
        public VkStructureType sType;
        public void* pNext;
        public int shaderAtomicInstructions;
        public VkPhysicalDeviceVulkanSC10Features() { }
        public VkPhysicalDeviceVulkanSC10Features(VkStructureType sType, void* pNext, int shaderAtomicInstructions)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderAtomicInstructions = shaderAtomicInstructions;
        }
    }
    /// <summary><b>[requires: VK_EXT_primitives_generated_query]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePrimitivesGeneratedQueryFeaturesExt;
        public void* pNext;
        public int primitivesGeneratedQuery;
        public int primitivesGeneratedQueryWithRasterizerDiscard;
        public int primitivesGeneratedQueryWithNonZeroStreams;
        public VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT() { }
        public VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(VkStructureType sType, void* pNext, int primitivesGeneratedQuery, int primitivesGeneratedQueryWithRasterizerDiscard, int primitivesGeneratedQueryWithNonZeroStreams)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.primitivesGeneratedQuery = primitivesGeneratedQuery;
            this.primitivesGeneratedQueryWithRasterizerDiscard = primitivesGeneratedQueryWithRasterizerDiscard;
            this.primitivesGeneratedQueryWithNonZeroStreams = primitivesGeneratedQueryWithNonZeroStreams;
        }
    }
    /// <summary><b>[requires: VK_EXT_legacy_dithering]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLegacyDitheringFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceLegacyDitheringFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceLegacyDitheringFeaturesExt;
        public void* pNext;
        public int legacyDithering;
        public VkPhysicalDeviceLegacyDitheringFeaturesEXT() { }
        public VkPhysicalDeviceLegacyDitheringFeaturesEXT(VkStructureType sType, void* pNext, int legacyDithering)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.legacyDithering = legacyDithering;
        }
    }
    /// <summary><b>[requires: VK_EXT_multisampled_render_to_single_sampled]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMultisampledRenderToSingleSampledFeaturesExt;
        public void* pNext;
        public int multisampledRenderToSingleSampled;
        public VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT() { }
        public VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(VkStructureType sType, void* pNext, int multisampledRenderToSingleSampled)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.multisampledRenderToSingleSampled = multisampledRenderToSingleSampled;
        }
    }
    /// <summary><b>[requires: VK_EXT_multisampled_render_to_single_sampled]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassResolvePerformanceQueryEXT.html" /></remarks>
    public unsafe struct VkSubpassResolvePerformanceQueryEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSubpassResolvePerformanceQueryExt;
        public void* pNext;
        public int optimal;
        public VkSubpassResolvePerformanceQueryEXT() { }
        public VkSubpassResolvePerformanceQueryEXT(VkStructureType sType, void* pNext, int optimal)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.optimal = optimal;
        }
    }
    /// <summary><b>[requires: VK_EXT_multisampled_render_to_single_sampled]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMultisampledRenderToSingleSampledInfoEXT.html" /></remarks>
    public unsafe struct VkMultisampledRenderToSingleSampledInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeMultisampledRenderToSingleSampledInfoExt;
        public void* pNext;
        public int multisampledRenderToSingleSampledEnable;
        public VkSampleCountFlagBits rasterizationSamples;
        public VkMultisampledRenderToSingleSampledInfoEXT() { }
        public VkMultisampledRenderToSingleSampledInfoEXT(VkStructureType sType, void* pNext, int multisampledRenderToSingleSampledEnable, VkSampleCountFlagBits rasterizationSamples)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.multisampledRenderToSingleSampledEnable = multisampledRenderToSingleSampledEnable;
            this.rasterizationSamples = rasterizationSamples;
        }
    }
    /// <summary><b>[requires: VK_EXT_pipeline_protected_access]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineProtectedAccessFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDevicePipelineProtectedAccessFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePipelineProtectedAccessFeaturesExt;
        public void* pNext;
        public int pipelineProtectedAccess;
        public VkPhysicalDevicePipelineProtectedAccessFeaturesEXT() { }
        public VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(VkStructureType sType, void* pNext, int pipelineProtectedAccess)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipelineProtectedAccess = pipelineProtectedAccess;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkQueueFamilyVideoPropertiesKHR.html" /></remarks>
    public unsafe struct VkQueueFamilyVideoPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeQueueFamilyVideoPropertiesKhr;
        public void* pNext;
        public VkVideoCodecOperationFlagBitsKHR videoCodecOperations;
        public VkQueueFamilyVideoPropertiesKHR() { }
        public VkQueueFamilyVideoPropertiesKHR(VkStructureType sType, void* pNext, VkVideoCodecOperationFlagBitsKHR videoCodecOperations)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.videoCodecOperations = videoCodecOperations;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkQueueFamilyQueryResultStatusPropertiesKHR.html" /></remarks>
    public unsafe struct VkQueueFamilyQueryResultStatusPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeQueueFamilyQueryResultStatusPropertiesKhr;
        public void* pNext;
        public int queryResultStatusSupport;
        public VkQueueFamilyQueryResultStatusPropertiesKHR() { }
        public VkQueueFamilyQueryResultStatusPropertiesKHR(VkStructureType sType, void* pNext, int queryResultStatusSupport)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.queryResultStatusSupport = queryResultStatusSupport;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoProfileListInfoKHR.html" /></remarks>
    public unsafe struct VkVideoProfileListInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoProfileListInfoKhr;
        public void* pNext;
        public uint profileCount;
        public VkVideoProfileInfoKHR* pProfiles;
        public VkVideoProfileListInfoKHR() { }
        public VkVideoProfileListInfoKHR(VkStructureType sType, void* pNext, uint profileCount, VkVideoProfileInfoKHR* pProfiles)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.profileCount = profileCount;
            this.pProfiles = pProfiles;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVideoFormatInfoKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVideoFormatInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceVideoFormatInfoKhr;
        public void* pNext;
        public VkImageUsageFlagBits imageUsage;
        public VkPhysicalDeviceVideoFormatInfoKHR() { }
        public VkPhysicalDeviceVideoFormatInfoKHR(VkStructureType sType, void* pNext, VkImageUsageFlagBits imageUsage)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageUsage = imageUsage;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoFormatPropertiesKHR.html" /></remarks>
    public unsafe struct VkVideoFormatPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoFormatPropertiesKhr;
        public void* pNext;
        public VkFormat format;
        public VkComponentMapping componentMapping;
        public VkImageCreateFlagBits imageCreateFlags;
        public VkImageType imageType;
        public VkImageTiling imageTiling;
        public VkImageUsageFlagBits imageUsageFlags;
        public VkVideoFormatPropertiesKHR() { }
        public VkVideoFormatPropertiesKHR(VkStructureType sType, void* pNext, VkFormat format, VkComponentMapping componentMapping, VkImageCreateFlagBits imageCreateFlags, VkImageType imageType, VkImageTiling imageTiling, VkImageUsageFlagBits imageUsageFlags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.format = format;
            this.componentMapping = componentMapping;
            this.imageCreateFlags = imageCreateFlags;
            this.imageType = imageType;
            this.imageTiling = imageTiling;
            this.imageUsageFlags = imageUsageFlags;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoProfileInfoKHR.html" /></remarks>
    public unsafe struct VkVideoProfileInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoProfileInfoKhr;
        public void* pNext;
        public VkVideoCodecOperationFlagBitsKHR videoCodecOperation;
        public VkVideoChromaSubsamplingFlagBitsKHR chromaSubsampling;
        public VkVideoComponentBitDepthFlagBitsKHR lumaBitDepth;
        public VkVideoComponentBitDepthFlagBitsKHR chromaBitDepth;
        public VkVideoProfileInfoKHR() { }
        public VkVideoProfileInfoKHR(VkStructureType sType, void* pNext, VkVideoCodecOperationFlagBitsKHR videoCodecOperation, VkVideoChromaSubsamplingFlagBitsKHR chromaSubsampling, VkVideoComponentBitDepthFlagBitsKHR lumaBitDepth, VkVideoComponentBitDepthFlagBitsKHR chromaBitDepth)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.videoCodecOperation = videoCodecOperation;
            this.chromaSubsampling = chromaSubsampling;
            this.lumaBitDepth = lumaBitDepth;
            this.chromaBitDepth = chromaBitDepth;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoCapabilitiesKHR.html" /></remarks>
    public unsafe struct VkVideoCapabilitiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoCapabilitiesKhr;
        public void* pNext;
        public VkVideoCapabilityFlagBitsKHR flags;
        public ulong minBitstreamBufferOffsetAlignment;
        public ulong minBitstreamBufferSizeAlignment;
        public VkExtent2D pictureAccessGranularity;
        public VkExtent2D minCodedExtent;
        public VkExtent2D maxCodedExtent;
        public uint maxDpbSlots;
        public uint maxActiveReferencePictures;
        public VkExtensionProperties stdHeaderVersion;
        public VkVideoCapabilitiesKHR() { }
        public VkVideoCapabilitiesKHR(VkStructureType sType, void* pNext, VkVideoCapabilityFlagBitsKHR flags, ulong minBitstreamBufferOffsetAlignment, ulong minBitstreamBufferSizeAlignment, VkExtent2D pictureAccessGranularity, VkExtent2D minCodedExtent, VkExtent2D maxCodedExtent, uint maxDpbSlots, uint maxActiveReferencePictures, VkExtensionProperties stdHeaderVersion)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.minBitstreamBufferOffsetAlignment = minBitstreamBufferOffsetAlignment;
            this.minBitstreamBufferSizeAlignment = minBitstreamBufferSizeAlignment;
            this.pictureAccessGranularity = pictureAccessGranularity;
            this.minCodedExtent = minCodedExtent;
            this.maxCodedExtent = maxCodedExtent;
            this.maxDpbSlots = maxDpbSlots;
            this.maxActiveReferencePictures = maxActiveReferencePictures;
            this.stdHeaderVersion = stdHeaderVersion;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoSessionMemoryRequirementsKHR.html" /></remarks>
    public unsafe struct VkVideoSessionMemoryRequirementsKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoSessionMemoryRequirementsKhr;
        public void* pNext;
        public uint memoryBindIndex;
        public VkMemoryRequirements memoryRequirements;
        public VkVideoSessionMemoryRequirementsKHR() { }
        public VkVideoSessionMemoryRequirementsKHR(VkStructureType sType, void* pNext, uint memoryBindIndex, VkMemoryRequirements memoryRequirements)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memoryBindIndex = memoryBindIndex;
            this.memoryRequirements = memoryRequirements;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindVideoSessionMemoryInfoKHR.html" /></remarks>
    public unsafe struct VkBindVideoSessionMemoryInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeBindVideoSessionMemoryInfoKhr;
        public void* pNext;
        public uint memoryBindIndex;
        public VkDeviceMemory memory;
        public ulong memoryOffset;
        public ulong memorySize;
        public VkBindVideoSessionMemoryInfoKHR() { }
        public VkBindVideoSessionMemoryInfoKHR(VkStructureType sType, void* pNext, uint memoryBindIndex, VkDeviceMemory memory, ulong memoryOffset, ulong memorySize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memoryBindIndex = memoryBindIndex;
            this.memory = memory;
            this.memoryOffset = memoryOffset;
            this.memorySize = memorySize;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoPictureResourceInfoKHR.html" /></remarks>
    public unsafe struct VkVideoPictureResourceInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoPictureResourceInfoKhr;
        public void* pNext;
        public VkOffset2D codedOffset;
        public VkExtent2D codedExtent;
        public uint baseArrayLayer;
        public VkImageView imageViewBinding;
        public VkVideoPictureResourceInfoKHR() { }
        public VkVideoPictureResourceInfoKHR(VkStructureType sType, void* pNext, VkOffset2D codedOffset, VkExtent2D codedExtent, uint baseArrayLayer, VkImageView imageViewBinding)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.codedOffset = codedOffset;
            this.codedExtent = codedExtent;
            this.baseArrayLayer = baseArrayLayer;
            this.imageViewBinding = imageViewBinding;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoReferenceSlotInfoKHR.html" /></remarks>
    public unsafe struct VkVideoReferenceSlotInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoReferenceSlotInfoKhr;
        public void* pNext;
        public int slotIndex;
        public VkVideoPictureResourceInfoKHR* pPictureResource;
        public VkVideoReferenceSlotInfoKHR() { }
        public VkVideoReferenceSlotInfoKHR(VkStructureType sType, void* pNext, int slotIndex, VkVideoPictureResourceInfoKHR* pPictureResource)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.slotIndex = slotIndex;
            this.pPictureResource = pPictureResource;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeCapabilitiesKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeCapabilitiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeCapabilitiesKhr;
        public void* pNext;
        public VkVideoDecodeCapabilityFlagBitsKHR flags;
        public VkVideoDecodeCapabilitiesKHR() { }
        public VkVideoDecodeCapabilitiesKHR(VkStructureType sType, void* pNext, VkVideoDecodeCapabilityFlagBitsKHR flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeUsageInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeUsageInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeUsageInfoKhr;
        public void* pNext;
        public VkVideoDecodeUsageFlagBitsKHR videoUsageHints;
        public VkVideoDecodeUsageInfoKHR() { }
        public VkVideoDecodeUsageInfoKHR(VkStructureType sType, void* pNext, VkVideoDecodeUsageFlagBitsKHR videoUsageHints)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.videoUsageHints = videoUsageHints;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeInfoKhr;
        public void* pNext;
        public VkVideoDecodeFlagsKHR flags;
        public VkBuffer srcBuffer;
        public ulong srcBufferOffset;
        public ulong srcBufferRange;
        public VkVideoPictureResourceInfoKHR dstPictureResource;
        public VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot;
        public uint referenceSlotCount;
        public VkVideoReferenceSlotInfoKHR* pReferenceSlots;
        public VkVideoDecodeInfoKHR() { }
        public VkVideoDecodeInfoKHR(VkStructureType sType, void* pNext, VkVideoDecodeFlagsKHR flags, VkBuffer srcBuffer, ulong srcBufferOffset, ulong srcBufferRange, VkVideoPictureResourceInfoKHR dstPictureResource, VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot, uint referenceSlotCount, VkVideoReferenceSlotInfoKHR* pReferenceSlots)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.srcBuffer = srcBuffer;
            this.srcBufferOffset = srcBufferOffset;
            this.srcBufferRange = srcBufferRange;
            this.dstPictureResource = dstPictureResource;
            this.pSetupReferenceSlot = pSetupReferenceSlot;
            this.referenceSlotCount = referenceSlotCount;
            this.pReferenceSlots = pReferenceSlots;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_maintenance1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVideoMaintenance1FeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVideoMaintenance1FeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceVideoMaintenance1FeaturesKhr;
        public void* pNext;
        public int videoMaintenance1;
        public VkPhysicalDeviceVideoMaintenance1FeaturesKHR() { }
        public VkPhysicalDeviceVideoMaintenance1FeaturesKHR(VkStructureType sType, void* pNext, int videoMaintenance1)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.videoMaintenance1 = videoMaintenance1;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_maintenance1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoInlineQueryInfoKHR.html" /></remarks>
    public unsafe struct VkVideoInlineQueryInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoInlineQueryInfoKhr;
        public void* pNext;
        public VkQueryPool queryPool;
        public uint firstQuery;
        public uint queryCount;
        public VkVideoInlineQueryInfoKHR() { }
        public VkVideoInlineQueryInfoKHR(VkStructureType sType, void* pNext, VkQueryPool queryPool, uint firstQuery, uint queryCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.queryPool = queryPool;
            this.firstQuery = firstQuery;
            this.queryCount = queryCount;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeH264ProfileInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeH264ProfileInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeH264ProfileInfoKhr;
        public void* pNext;
        public StdVideoH264ProfileIdc stdProfileIdc;
        public VkVideoDecodeH264PictureLayoutFlagBitsKHR pictureLayout;
        public VkVideoDecodeH264ProfileInfoKHR() { }
        public VkVideoDecodeH264ProfileInfoKHR(VkStructureType sType, void* pNext, StdVideoH264ProfileIdc stdProfileIdc, VkVideoDecodeH264PictureLayoutFlagBitsKHR pictureLayout)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stdProfileIdc = stdProfileIdc;
            this.pictureLayout = pictureLayout;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeH264CapabilitiesKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeH264CapabilitiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeH264CapabilitiesKhr;
        public void* pNext;
        public StdVideoH264LevelIdc maxLevelIdc;
        public VkOffset2D fieldOffsetGranularity;
        public VkVideoDecodeH264CapabilitiesKHR() { }
        public VkVideoDecodeH264CapabilitiesKHR(VkStructureType sType, void* pNext, StdVideoH264LevelIdc maxLevelIdc, VkOffset2D fieldOffsetGranularity)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxLevelIdc = maxLevelIdc;
            this.fieldOffsetGranularity = fieldOffsetGranularity;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeH264SessionParametersAddInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeH264SessionParametersAddInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeH264SessionParametersAddInfoKhr;
        public void* pNext;
        public uint stdSPSCount;
        public StdVideoH264SequenceParameterSet* pStdSPSs;
        public uint stdPPSCount;
        public StdVideoH264PictureParameterSet* pStdPPSs;
        public VkVideoDecodeH264SessionParametersAddInfoKHR() { }
        public VkVideoDecodeH264SessionParametersAddInfoKHR(VkStructureType sType, void* pNext, uint stdSPSCount, StdVideoH264SequenceParameterSet* pStdSPSs, uint stdPPSCount, StdVideoH264PictureParameterSet* pStdPPSs)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stdSPSCount = stdSPSCount;
            this.pStdSPSs = pStdSPSs;
            this.stdPPSCount = stdPPSCount;
            this.pStdPPSs = pStdPPSs;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeH264SessionParametersCreateInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeH264SessionParametersCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeH264SessionParametersCreateInfoKhr;
        public void* pNext;
        public uint maxStdSPSCount;
        public uint maxStdPPSCount;
        public VkVideoDecodeH264SessionParametersAddInfoKHR* pParametersAddInfo;
        public VkVideoDecodeH264SessionParametersCreateInfoKHR() { }
        public VkVideoDecodeH264SessionParametersCreateInfoKHR(VkStructureType sType, void* pNext, uint maxStdSPSCount, uint maxStdPPSCount, VkVideoDecodeH264SessionParametersAddInfoKHR* pParametersAddInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxStdSPSCount = maxStdSPSCount;
            this.maxStdPPSCount = maxStdPPSCount;
            this.pParametersAddInfo = pParametersAddInfo;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeH264PictureInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeH264PictureInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeH264PictureInfoKhr;
        public void* pNext;
        public StdVideoDecodeH264PictureInfo* pStdPictureInfo;
        public uint sliceCount;
        public uint* pSliceOffsets;
        public VkVideoDecodeH264PictureInfoKHR() { }
        public VkVideoDecodeH264PictureInfoKHR(VkStructureType sType, void* pNext, StdVideoDecodeH264PictureInfo* pStdPictureInfo, uint sliceCount, uint* pSliceOffsets)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pStdPictureInfo = pStdPictureInfo;
            this.sliceCount = sliceCount;
            this.pSliceOffsets = pSliceOffsets;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeH264DpbSlotInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeH264DpbSlotInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeH264DpbSlotInfoKhr;
        public void* pNext;
        public StdVideoDecodeH264ReferenceInfo* pStdReferenceInfo;
        public VkVideoDecodeH264DpbSlotInfoKHR() { }
        public VkVideoDecodeH264DpbSlotInfoKHR(VkStructureType sType, void* pNext, StdVideoDecodeH264ReferenceInfo* pStdReferenceInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pStdReferenceInfo = pStdReferenceInfo;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeH265ProfileInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeH265ProfileInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeH265ProfileInfoKhr;
        public void* pNext;
        public StdVideoH265ProfileIdc stdProfileIdc;
        public VkVideoDecodeH265ProfileInfoKHR() { }
        public VkVideoDecodeH265ProfileInfoKHR(VkStructureType sType, void* pNext, StdVideoH265ProfileIdc stdProfileIdc)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stdProfileIdc = stdProfileIdc;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeH265CapabilitiesKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeH265CapabilitiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeH265CapabilitiesKhr;
        public void* pNext;
        public StdVideoH265LevelIdc maxLevelIdc;
        public VkVideoDecodeH265CapabilitiesKHR() { }
        public VkVideoDecodeH265CapabilitiesKHR(VkStructureType sType, void* pNext, StdVideoH265LevelIdc maxLevelIdc)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxLevelIdc = maxLevelIdc;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeH265SessionParametersAddInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeH265SessionParametersAddInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeH265SessionParametersAddInfoKhr;
        public void* pNext;
        public uint stdVPSCount;
        public StdVideoH265VideoParameterSet* pStdVPSs;
        public uint stdSPSCount;
        public StdVideoH265SequenceParameterSet* pStdSPSs;
        public uint stdPPSCount;
        public StdVideoH265PictureParameterSet* pStdPPSs;
        public VkVideoDecodeH265SessionParametersAddInfoKHR() { }
        public VkVideoDecodeH265SessionParametersAddInfoKHR(VkStructureType sType, void* pNext, uint stdVPSCount, StdVideoH265VideoParameterSet* pStdVPSs, uint stdSPSCount, StdVideoH265SequenceParameterSet* pStdSPSs, uint stdPPSCount, StdVideoH265PictureParameterSet* pStdPPSs)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stdVPSCount = stdVPSCount;
            this.pStdVPSs = pStdVPSs;
            this.stdSPSCount = stdSPSCount;
            this.pStdSPSs = pStdSPSs;
            this.stdPPSCount = stdPPSCount;
            this.pStdPPSs = pStdPPSs;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeH265SessionParametersCreateInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeH265SessionParametersCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeH265SessionParametersCreateInfoKhr;
        public void* pNext;
        public uint maxStdVPSCount;
        public uint maxStdSPSCount;
        public uint maxStdPPSCount;
        public VkVideoDecodeH265SessionParametersAddInfoKHR* pParametersAddInfo;
        public VkVideoDecodeH265SessionParametersCreateInfoKHR() { }
        public VkVideoDecodeH265SessionParametersCreateInfoKHR(VkStructureType sType, void* pNext, uint maxStdVPSCount, uint maxStdSPSCount, uint maxStdPPSCount, VkVideoDecodeH265SessionParametersAddInfoKHR* pParametersAddInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxStdVPSCount = maxStdVPSCount;
            this.maxStdSPSCount = maxStdSPSCount;
            this.maxStdPPSCount = maxStdPPSCount;
            this.pParametersAddInfo = pParametersAddInfo;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeH265PictureInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeH265PictureInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeH265PictureInfoKhr;
        public void* pNext;
        public StdVideoDecodeH265PictureInfo* pStdPictureInfo;
        public uint sliceSegmentCount;
        public uint* pSliceSegmentOffsets;
        public VkVideoDecodeH265PictureInfoKHR() { }
        public VkVideoDecodeH265PictureInfoKHR(VkStructureType sType, void* pNext, StdVideoDecodeH265PictureInfo* pStdPictureInfo, uint sliceSegmentCount, uint* pSliceSegmentOffsets)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pStdPictureInfo = pStdPictureInfo;
            this.sliceSegmentCount = sliceSegmentCount;
            this.pSliceSegmentOffsets = pSliceSegmentOffsets;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeH265DpbSlotInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeH265DpbSlotInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeH265DpbSlotInfoKhr;
        public void* pNext;
        public StdVideoDecodeH265ReferenceInfo* pStdReferenceInfo;
        public VkVideoDecodeH265DpbSlotInfoKHR() { }
        public VkVideoDecodeH265DpbSlotInfoKHR(VkStructureType sType, void* pNext, StdVideoDecodeH265ReferenceInfo* pStdReferenceInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pStdReferenceInfo = pStdReferenceInfo;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_av1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeAV1ProfileInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeAV1ProfileInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeAv1ProfileInfoKhr;
        public void* pNext;
        public StdVideoAV1Profile stdProfile;
        public int filmGrainSupport;
        public VkVideoDecodeAV1ProfileInfoKHR() { }
        public VkVideoDecodeAV1ProfileInfoKHR(VkStructureType sType, void* pNext, StdVideoAV1Profile stdProfile, int filmGrainSupport)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stdProfile = stdProfile;
            this.filmGrainSupport = filmGrainSupport;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_av1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeAV1CapabilitiesKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeAV1CapabilitiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeAv1CapabilitiesKhr;
        public void* pNext;
        public StdVideoAV1Level maxLevel;
        public VkVideoDecodeAV1CapabilitiesKHR() { }
        public VkVideoDecodeAV1CapabilitiesKHR(VkStructureType sType, void* pNext, StdVideoAV1Level maxLevel)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxLevel = maxLevel;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_av1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeAV1SessionParametersCreateInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeAV1SessionParametersCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeAv1SessionParametersCreateInfoKhr;
        public void* pNext;
        public StdVideoAV1SequenceHeader* pStdSequenceHeader;
        public VkVideoDecodeAV1SessionParametersCreateInfoKHR() { }
        public VkVideoDecodeAV1SessionParametersCreateInfoKHR(VkStructureType sType, void* pNext, StdVideoAV1SequenceHeader* pStdSequenceHeader)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pStdSequenceHeader = pStdSequenceHeader;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_av1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeAV1PictureInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeAV1PictureInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeAv1PictureInfoKhr;
        public void* pNext;
        public StdVideoDecodeAV1PictureInfo* pStdPictureInfo;
        public fixed int referenceNameSlotIndices[7];
        public uint frameHeaderOffset;
        public uint tileCount;
        public uint* pTileOffsets;
        public uint* pTileSizes;
        public VkVideoDecodeAV1PictureInfoKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_video_decode_av1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoDecodeAV1DpbSlotInfoKHR.html" /></remarks>
    public unsafe struct VkVideoDecodeAV1DpbSlotInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoDecodeAv1DpbSlotInfoKhr;
        public void* pNext;
        public StdVideoDecodeAV1ReferenceInfo* pStdReferenceInfo;
        public VkVideoDecodeAV1DpbSlotInfoKHR() { }
        public VkVideoDecodeAV1DpbSlotInfoKHR(VkStructureType sType, void* pNext, StdVideoDecodeAV1ReferenceInfo* pStdReferenceInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pStdReferenceInfo = pStdReferenceInfo;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoSessionCreateInfoKHR.html" /></remarks>
    public unsafe struct VkVideoSessionCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoSessionCreateInfoKhr;
        public void* pNext;
        public uint queueFamilyIndex;
        public VkVideoSessionCreateFlagBitsKHR flags;
        public VkVideoProfileInfoKHR* pVideoProfile;
        public VkFormat pictureFormat;
        public VkExtent2D maxCodedExtent;
        public VkFormat referencePictureFormat;
        public uint maxDpbSlots;
        public uint maxActiveReferencePictures;
        public VkExtensionProperties* pStdHeaderVersion;
        public VkVideoSessionCreateInfoKHR() { }
        public VkVideoSessionCreateInfoKHR(VkStructureType sType, void* pNext, uint queueFamilyIndex, VkVideoSessionCreateFlagBitsKHR flags, VkVideoProfileInfoKHR* pVideoProfile, VkFormat pictureFormat, VkExtent2D maxCodedExtent, VkFormat referencePictureFormat, uint maxDpbSlots, uint maxActiveReferencePictures, VkExtensionProperties* pStdHeaderVersion)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.queueFamilyIndex = queueFamilyIndex;
            this.flags = flags;
            this.pVideoProfile = pVideoProfile;
            this.pictureFormat = pictureFormat;
            this.maxCodedExtent = maxCodedExtent;
            this.referencePictureFormat = referencePictureFormat;
            this.maxDpbSlots = maxDpbSlots;
            this.maxActiveReferencePictures = maxActiveReferencePictures;
            this.pStdHeaderVersion = pStdHeaderVersion;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoSessionParametersCreateInfoKHR.html" /></remarks>
    public unsafe struct VkVideoSessionParametersCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoSessionParametersCreateInfoKhr;
        public void* pNext;
        public VkVideoSessionParametersCreateFlagsKHR flags;
        public VkVideoSessionParametersKHR videoSessionParametersTemplate;
        public VkVideoSessionKHR videoSession;
        public VkVideoSessionParametersCreateInfoKHR() { }
        public VkVideoSessionParametersCreateInfoKHR(VkStructureType sType, void* pNext, VkVideoSessionParametersCreateFlagsKHR flags, VkVideoSessionParametersKHR videoSessionParametersTemplate, VkVideoSessionKHR videoSession)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.videoSessionParametersTemplate = videoSessionParametersTemplate;
            this.videoSession = videoSession;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoSessionParametersUpdateInfoKHR.html" /></remarks>
    public unsafe struct VkVideoSessionParametersUpdateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoSessionParametersUpdateInfoKhr;
        public void* pNext;
        public uint updateSequenceCount;
        public VkVideoSessionParametersUpdateInfoKHR() { }
        public VkVideoSessionParametersUpdateInfoKHR(VkStructureType sType, void* pNext, uint updateSequenceCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.updateSequenceCount = updateSequenceCount;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeSessionParametersGetInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeSessionParametersGetInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeSessionParametersGetInfoKhr;
        public void* pNext;
        public VkVideoSessionParametersKHR videoSessionParameters;
        public VkVideoEncodeSessionParametersGetInfoKHR() { }
        public VkVideoEncodeSessionParametersGetInfoKHR(VkStructureType sType, void* pNext, VkVideoSessionParametersKHR videoSessionParameters)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.videoSessionParameters = videoSessionParameters;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeSessionParametersFeedbackInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeSessionParametersFeedbackInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeSessionParametersFeedbackInfoKhr;
        public void* pNext;
        public int hasOverrides;
        public VkVideoEncodeSessionParametersFeedbackInfoKHR() { }
        public VkVideoEncodeSessionParametersFeedbackInfoKHR(VkStructureType sType, void* pNext, int hasOverrides)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.hasOverrides = hasOverrides;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoBeginCodingInfoKHR.html" /></remarks>
    public unsafe struct VkVideoBeginCodingInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoBeginCodingInfoKhr;
        public void* pNext;
        public VkVideoBeginCodingFlagsKHR flags;
        public VkVideoSessionKHR videoSession;
        public VkVideoSessionParametersKHR videoSessionParameters;
        public uint referenceSlotCount;
        public VkVideoReferenceSlotInfoKHR* pReferenceSlots;
        public VkVideoBeginCodingInfoKHR() { }
        public VkVideoBeginCodingInfoKHR(VkStructureType sType, void* pNext, VkVideoBeginCodingFlagsKHR flags, VkVideoSessionKHR videoSession, VkVideoSessionParametersKHR videoSessionParameters, uint referenceSlotCount, VkVideoReferenceSlotInfoKHR* pReferenceSlots)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.videoSession = videoSession;
            this.videoSessionParameters = videoSessionParameters;
            this.referenceSlotCount = referenceSlotCount;
            this.pReferenceSlots = pReferenceSlots;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEndCodingInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEndCodingInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEndCodingInfoKhr;
        public void* pNext;
        public VkVideoEndCodingFlagsKHR flags;
        public VkVideoEndCodingInfoKHR() { }
        public VkVideoEndCodingInfoKHR(VkStructureType sType, void* pNext, VkVideoEndCodingFlagsKHR flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoCodingControlInfoKHR.html" /></remarks>
    public unsafe struct VkVideoCodingControlInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoCodingControlInfoKhr;
        public void* pNext;
        public VkVideoCodingControlFlagBitsKHR flags;
        public VkVideoCodingControlInfoKHR() { }
        public VkVideoCodingControlInfoKHR(VkStructureType sType, void* pNext, VkVideoCodingControlFlagBitsKHR flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeUsageInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeUsageInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeUsageInfoKhr;
        public void* pNext;
        public VkVideoEncodeUsageFlagBitsKHR videoUsageHints;
        public VkVideoEncodeContentFlagBitsKHR videoContentHints;
        public VkVideoEncodeTuningModeKHR tuningMode;
        public VkVideoEncodeUsageInfoKHR() { }
        public VkVideoEncodeUsageInfoKHR(VkStructureType sType, void* pNext, VkVideoEncodeUsageFlagBitsKHR videoUsageHints, VkVideoEncodeContentFlagBitsKHR videoContentHints, VkVideoEncodeTuningModeKHR tuningMode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.videoUsageHints = videoUsageHints;
            this.videoContentHints = videoContentHints;
            this.tuningMode = tuningMode;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeInfoKhr;
        public void* pNext;
        public VkVideoEncodeFlagsKHR flags;
        public VkBuffer dstBuffer;
        public ulong dstBufferOffset;
        public ulong dstBufferRange;
        public VkVideoPictureResourceInfoKHR srcPictureResource;
        public VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot;
        public uint referenceSlotCount;
        public VkVideoReferenceSlotInfoKHR* pReferenceSlots;
        public uint precedingExternallyEncodedBytes;
        public VkVideoEncodeInfoKHR() { }
        public VkVideoEncodeInfoKHR(VkStructureType sType, void* pNext, VkVideoEncodeFlagsKHR flags, VkBuffer dstBuffer, ulong dstBufferOffset, ulong dstBufferRange, VkVideoPictureResourceInfoKHR srcPictureResource, VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot, uint referenceSlotCount, VkVideoReferenceSlotInfoKHR* pReferenceSlots, uint precedingExternallyEncodedBytes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.dstBuffer = dstBuffer;
            this.dstBufferOffset = dstBufferOffset;
            this.dstBufferRange = dstBufferRange;
            this.srcPictureResource = srcPictureResource;
            this.pSetupReferenceSlot = pSetupReferenceSlot;
            this.referenceSlotCount = referenceSlotCount;
            this.pReferenceSlots = pReferenceSlots;
            this.precedingExternallyEncodedBytes = precedingExternallyEncodedBytes;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkQueryPoolVideoEncodeFeedbackCreateInfoKHR.html" /></remarks>
    public unsafe struct VkQueryPoolVideoEncodeFeedbackCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeQueryPoolVideoEncodeFeedbackCreateInfoKhr;
        public void* pNext;
        public VkVideoEncodeFeedbackFlagBitsKHR encodeFeedbackFlags;
        public VkQueryPoolVideoEncodeFeedbackCreateInfoKHR() { }
        public VkQueryPoolVideoEncodeFeedbackCreateInfoKHR(VkStructureType sType, void* pNext, VkVideoEncodeFeedbackFlagBitsKHR encodeFeedbackFlags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.encodeFeedbackFlags = encodeFeedbackFlags;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeQualityLevelInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeQualityLevelInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeQualityLevelInfoKhr;
        public void* pNext;
        public uint qualityLevel;
        public VkVideoEncodeQualityLevelInfoKHR() { }
        public VkVideoEncodeQualityLevelInfoKHR(VkStructureType sType, void* pNext, uint qualityLevel)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.qualityLevel = qualityLevel;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceVideoEncodeQualityLevelInfoKhr;
        public void* pNext;
        public VkVideoProfileInfoKHR* pVideoProfile;
        public uint qualityLevel;
        public VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR() { }
        public VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR(VkStructureType sType, void* pNext, VkVideoProfileInfoKHR* pVideoProfile, uint qualityLevel)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pVideoProfile = pVideoProfile;
            this.qualityLevel = qualityLevel;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeQualityLevelPropertiesKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeQualityLevelPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeQualityLevelPropertiesKhr;
        public void* pNext;
        public VkVideoEncodeRateControlModeFlagBitsKHR preferredRateControlMode;
        public uint preferredRateControlLayerCount;
        public VkVideoEncodeQualityLevelPropertiesKHR() { }
        public VkVideoEncodeQualityLevelPropertiesKHR(VkStructureType sType, void* pNext, VkVideoEncodeRateControlModeFlagBitsKHR preferredRateControlMode, uint preferredRateControlLayerCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.preferredRateControlMode = preferredRateControlMode;
            this.preferredRateControlLayerCount = preferredRateControlLayerCount;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeRateControlInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeRateControlInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeRateControlInfoKhr;
        public void* pNext;
        public VkVideoEncodeRateControlFlagsKHR flags;
        public VkVideoEncodeRateControlModeFlagBitsKHR rateControlMode;
        public uint layerCount;
        public VkVideoEncodeRateControlLayerInfoKHR* pLayers;
        public uint virtualBufferSizeInMs;
        public uint initialVirtualBufferSizeInMs;
        public VkVideoEncodeRateControlInfoKHR() { }
        public VkVideoEncodeRateControlInfoKHR(VkStructureType sType, void* pNext, VkVideoEncodeRateControlFlagsKHR flags, VkVideoEncodeRateControlModeFlagBitsKHR rateControlMode, uint layerCount, VkVideoEncodeRateControlLayerInfoKHR* pLayers, uint virtualBufferSizeInMs, uint initialVirtualBufferSizeInMs)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.rateControlMode = rateControlMode;
            this.layerCount = layerCount;
            this.pLayers = pLayers;
            this.virtualBufferSizeInMs = virtualBufferSizeInMs;
            this.initialVirtualBufferSizeInMs = initialVirtualBufferSizeInMs;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeRateControlLayerInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeRateControlLayerInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeRateControlLayerInfoKhr;
        public void* pNext;
        public ulong averageBitrate;
        public ulong maxBitrate;
        public uint frameRateNumerator;
        public uint frameRateDenominator;
        public VkVideoEncodeRateControlLayerInfoKHR() { }
        public VkVideoEncodeRateControlLayerInfoKHR(VkStructureType sType, void* pNext, ulong averageBitrate, ulong maxBitrate, uint frameRateNumerator, uint frameRateDenominator)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.averageBitrate = averageBitrate;
            this.maxBitrate = maxBitrate;
            this.frameRateNumerator = frameRateNumerator;
            this.frameRateDenominator = frameRateDenominator;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_queue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeCapabilitiesKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeCapabilitiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeCapabilitiesKhr;
        public void* pNext;
        public VkVideoEncodeCapabilityFlagBitsKHR flags;
        public VkVideoEncodeRateControlModeFlagBitsKHR rateControlModes;
        public uint maxRateControlLayers;
        public ulong maxBitrate;
        public uint maxQualityLevels;
        public VkExtent2D encodeInputPictureGranularity;
        public VkVideoEncodeFeedbackFlagBitsKHR supportedEncodeFeedbackFlags;
        public VkVideoEncodeCapabilitiesKHR() { }
        public VkVideoEncodeCapabilitiesKHR(VkStructureType sType, void* pNext, VkVideoEncodeCapabilityFlagBitsKHR flags, VkVideoEncodeRateControlModeFlagBitsKHR rateControlModes, uint maxRateControlLayers, ulong maxBitrate, uint maxQualityLevels, VkExtent2D encodeInputPictureGranularity, VkVideoEncodeFeedbackFlagBitsKHR supportedEncodeFeedbackFlags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.rateControlModes = rateControlModes;
            this.maxRateControlLayers = maxRateControlLayers;
            this.maxBitrate = maxBitrate;
            this.maxQualityLevels = maxQualityLevels;
            this.encodeInputPictureGranularity = encodeInputPictureGranularity;
            this.supportedEncodeFeedbackFlags = supportedEncodeFeedbackFlags;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264CapabilitiesKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264CapabilitiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH264CapabilitiesKhr;
        public void* pNext;
        public VkVideoEncodeH264CapabilityFlagBitsKHR flags;
        public StdVideoH264LevelIdc maxLevelIdc;
        public uint maxSliceCount;
        public uint maxPPictureL0ReferenceCount;
        public uint maxBPictureL0ReferenceCount;
        public uint maxL1ReferenceCount;
        public uint maxTemporalLayerCount;
        public int expectDyadicTemporalLayerPattern;
        public int minQp;
        public int maxQp;
        public int prefersGopRemainingFrames;
        public int requiresGopRemainingFrames;
        public VkVideoEncodeH264StdFlagBitsKHR stdSyntaxFlags;
        public VkVideoEncodeH264CapabilitiesKHR() { }
        public VkVideoEncodeH264CapabilitiesKHR(VkStructureType sType, void* pNext, VkVideoEncodeH264CapabilityFlagBitsKHR flags, StdVideoH264LevelIdc maxLevelIdc, uint maxSliceCount, uint maxPPictureL0ReferenceCount, uint maxBPictureL0ReferenceCount, uint maxL1ReferenceCount, uint maxTemporalLayerCount, int expectDyadicTemporalLayerPattern, int minQp, int maxQp, int prefersGopRemainingFrames, int requiresGopRemainingFrames, VkVideoEncodeH264StdFlagBitsKHR stdSyntaxFlags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.maxLevelIdc = maxLevelIdc;
            this.maxSliceCount = maxSliceCount;
            this.maxPPictureL0ReferenceCount = maxPPictureL0ReferenceCount;
            this.maxBPictureL0ReferenceCount = maxBPictureL0ReferenceCount;
            this.maxL1ReferenceCount = maxL1ReferenceCount;
            this.maxTemporalLayerCount = maxTemporalLayerCount;
            this.expectDyadicTemporalLayerPattern = expectDyadicTemporalLayerPattern;
            this.minQp = minQp;
            this.maxQp = maxQp;
            this.prefersGopRemainingFrames = prefersGopRemainingFrames;
            this.requiresGopRemainingFrames = requiresGopRemainingFrames;
            this.stdSyntaxFlags = stdSyntaxFlags;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264QualityLevelPropertiesKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264QualityLevelPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH264QualityLevelPropertiesKhr;
        public void* pNext;
        public VkVideoEncodeH264RateControlFlagBitsKHR preferredRateControlFlags;
        public uint preferredGopFrameCount;
        public uint preferredIdrPeriod;
        public uint preferredConsecutiveBFrameCount;
        public uint preferredTemporalLayerCount;
        public VkVideoEncodeH264QpKHR preferredConstantQp;
        public uint preferredMaxL0ReferenceCount;
        public uint preferredMaxL1ReferenceCount;
        public int preferredStdEntropyCodingModeFlag;
        public VkVideoEncodeH264QualityLevelPropertiesKHR() { }
        public VkVideoEncodeH264QualityLevelPropertiesKHR(VkStructureType sType, void* pNext, VkVideoEncodeH264RateControlFlagBitsKHR preferredRateControlFlags, uint preferredGopFrameCount, uint preferredIdrPeriod, uint preferredConsecutiveBFrameCount, uint preferredTemporalLayerCount, VkVideoEncodeH264QpKHR preferredConstantQp, uint preferredMaxL0ReferenceCount, uint preferredMaxL1ReferenceCount, int preferredStdEntropyCodingModeFlag)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.preferredRateControlFlags = preferredRateControlFlags;
            this.preferredGopFrameCount = preferredGopFrameCount;
            this.preferredIdrPeriod = preferredIdrPeriod;
            this.preferredConsecutiveBFrameCount = preferredConsecutiveBFrameCount;
            this.preferredTemporalLayerCount = preferredTemporalLayerCount;
            this.preferredConstantQp = preferredConstantQp;
            this.preferredMaxL0ReferenceCount = preferredMaxL0ReferenceCount;
            this.preferredMaxL1ReferenceCount = preferredMaxL1ReferenceCount;
            this.preferredStdEntropyCodingModeFlag = preferredStdEntropyCodingModeFlag;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264SessionCreateInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264SessionCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH264SessionCreateInfoKhr;
        public void* pNext;
        public int useMaxLevelIdc;
        public StdVideoH264LevelIdc maxLevelIdc;
        public VkVideoEncodeH264SessionCreateInfoKHR() { }
        public VkVideoEncodeH264SessionCreateInfoKHR(VkStructureType sType, void* pNext, int useMaxLevelIdc, StdVideoH264LevelIdc maxLevelIdc)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.useMaxLevelIdc = useMaxLevelIdc;
            this.maxLevelIdc = maxLevelIdc;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264SessionParametersAddInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264SessionParametersAddInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH264SessionParametersAddInfoKhr;
        public void* pNext;
        public uint stdSPSCount;
        public StdVideoH264SequenceParameterSet* pStdSPSs;
        public uint stdPPSCount;
        public StdVideoH264PictureParameterSet* pStdPPSs;
        public VkVideoEncodeH264SessionParametersAddInfoKHR() { }
        public VkVideoEncodeH264SessionParametersAddInfoKHR(VkStructureType sType, void* pNext, uint stdSPSCount, StdVideoH264SequenceParameterSet* pStdSPSs, uint stdPPSCount, StdVideoH264PictureParameterSet* pStdPPSs)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stdSPSCount = stdSPSCount;
            this.pStdSPSs = pStdSPSs;
            this.stdPPSCount = stdPPSCount;
            this.pStdPPSs = pStdPPSs;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264SessionParametersCreateInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264SessionParametersCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH264SessionParametersCreateInfoKhr;
        public void* pNext;
        public uint maxStdSPSCount;
        public uint maxStdPPSCount;
        public VkVideoEncodeH264SessionParametersAddInfoKHR* pParametersAddInfo;
        public VkVideoEncodeH264SessionParametersCreateInfoKHR() { }
        public VkVideoEncodeH264SessionParametersCreateInfoKHR(VkStructureType sType, void* pNext, uint maxStdSPSCount, uint maxStdPPSCount, VkVideoEncodeH264SessionParametersAddInfoKHR* pParametersAddInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxStdSPSCount = maxStdSPSCount;
            this.maxStdPPSCount = maxStdPPSCount;
            this.pParametersAddInfo = pParametersAddInfo;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264SessionParametersGetInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264SessionParametersGetInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH264SessionParametersGetInfoKhr;
        public void* pNext;
        public int writeStdSPS;
        public int writeStdPPS;
        public uint stdSPSId;
        public uint stdPPSId;
        public VkVideoEncodeH264SessionParametersGetInfoKHR() { }
        public VkVideoEncodeH264SessionParametersGetInfoKHR(VkStructureType sType, void* pNext, int writeStdSPS, int writeStdPPS, uint stdSPSId, uint stdPPSId)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.writeStdSPS = writeStdSPS;
            this.writeStdPPS = writeStdPPS;
            this.stdSPSId = stdSPSId;
            this.stdPPSId = stdPPSId;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264SessionParametersFeedbackInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264SessionParametersFeedbackInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH264SessionParametersFeedbackInfoKhr;
        public void* pNext;
        public int hasStdSPSOverrides;
        public int hasStdPPSOverrides;
        public VkVideoEncodeH264SessionParametersFeedbackInfoKHR() { }
        public VkVideoEncodeH264SessionParametersFeedbackInfoKHR(VkStructureType sType, void* pNext, int hasStdSPSOverrides, int hasStdPPSOverrides)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.hasStdSPSOverrides = hasStdSPSOverrides;
            this.hasStdPPSOverrides = hasStdPPSOverrides;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264DpbSlotInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264DpbSlotInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH264DpbSlotInfoKhr;
        public void* pNext;
        public StdVideoEncodeH264ReferenceInfo* pStdReferenceInfo;
        public VkVideoEncodeH264DpbSlotInfoKHR() { }
        public VkVideoEncodeH264DpbSlotInfoKHR(VkStructureType sType, void* pNext, StdVideoEncodeH264ReferenceInfo* pStdReferenceInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pStdReferenceInfo = pStdReferenceInfo;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264PictureInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264PictureInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH264PictureInfoKhr;
        public void* pNext;
        public uint naluSliceEntryCount;
        public VkVideoEncodeH264NaluSliceInfoKHR* pNaluSliceEntries;
        public StdVideoEncodeH264PictureInfo* pStdPictureInfo;
        public int generatePrefixNalu;
        public VkVideoEncodeH264PictureInfoKHR() { }
        public VkVideoEncodeH264PictureInfoKHR(VkStructureType sType, void* pNext, uint naluSliceEntryCount, VkVideoEncodeH264NaluSliceInfoKHR* pNaluSliceEntries, StdVideoEncodeH264PictureInfo* pStdPictureInfo, int generatePrefixNalu)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.naluSliceEntryCount = naluSliceEntryCount;
            this.pNaluSliceEntries = pNaluSliceEntries;
            this.pStdPictureInfo = pStdPictureInfo;
            this.generatePrefixNalu = generatePrefixNalu;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264ProfileInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264ProfileInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH264ProfileInfoKhr;
        public void* pNext;
        public StdVideoH264ProfileIdc stdProfileIdc;
        public VkVideoEncodeH264ProfileInfoKHR() { }
        public VkVideoEncodeH264ProfileInfoKHR(VkStructureType sType, void* pNext, StdVideoH264ProfileIdc stdProfileIdc)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stdProfileIdc = stdProfileIdc;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264NaluSliceInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264NaluSliceInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH264NaluSliceInfoKhr;
        public void* pNext;
        public int constantQp;
        public StdVideoEncodeH264SliceHeader* pStdSliceHeader;
        public VkVideoEncodeH264NaluSliceInfoKHR() { }
        public VkVideoEncodeH264NaluSliceInfoKHR(VkStructureType sType, void* pNext, int constantQp, StdVideoEncodeH264SliceHeader* pStdSliceHeader)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.constantQp = constantQp;
            this.pStdSliceHeader = pStdSliceHeader;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264RateControlInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264RateControlInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH264RateControlInfoKhr;
        public void* pNext;
        public VkVideoEncodeH264RateControlFlagBitsKHR flags;
        public uint gopFrameCount;
        public uint idrPeriod;
        public uint consecutiveBFrameCount;
        public uint temporalLayerCount;
        public VkVideoEncodeH264RateControlInfoKHR() { }
        public VkVideoEncodeH264RateControlInfoKHR(VkStructureType sType, void* pNext, VkVideoEncodeH264RateControlFlagBitsKHR flags, uint gopFrameCount, uint idrPeriod, uint consecutiveBFrameCount, uint temporalLayerCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.gopFrameCount = gopFrameCount;
            this.idrPeriod = idrPeriod;
            this.consecutiveBFrameCount = consecutiveBFrameCount;
            this.temporalLayerCount = temporalLayerCount;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264QpKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264QpKHR
    {
        public int qpI;
        public int qpP;
        public int qpB;
        public VkVideoEncodeH264QpKHR() { }
        public VkVideoEncodeH264QpKHR(int qpI, int qpP, int qpB)
        {
            this.qpI = qpI;
            this.qpP = qpP;
            this.qpB = qpB;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264FrameSizeKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264FrameSizeKHR
    {
        public uint frameISize;
        public uint framePSize;
        public uint frameBSize;
        public VkVideoEncodeH264FrameSizeKHR() { }
        public VkVideoEncodeH264FrameSizeKHR(uint frameISize, uint framePSize, uint frameBSize)
        {
            this.frameISize = frameISize;
            this.framePSize = framePSize;
            this.frameBSize = frameBSize;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264GopRemainingFrameInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264GopRemainingFrameInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH264GopRemainingFrameInfoKhr;
        public void* pNext;
        public int useGopRemainingFrames;
        public uint gopRemainingI;
        public uint gopRemainingP;
        public uint gopRemainingB;
        public VkVideoEncodeH264GopRemainingFrameInfoKHR() { }
        public VkVideoEncodeH264GopRemainingFrameInfoKHR(VkStructureType sType, void* pNext, int useGopRemainingFrames, uint gopRemainingI, uint gopRemainingP, uint gopRemainingB)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.useGopRemainingFrames = useGopRemainingFrames;
            this.gopRemainingI = gopRemainingI;
            this.gopRemainingP = gopRemainingP;
            this.gopRemainingB = gopRemainingB;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h264]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH264RateControlLayerInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH264RateControlLayerInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH264RateControlLayerInfoKhr;
        public void* pNext;
        public int useMinQp;
        public VkVideoEncodeH264QpKHR minQp;
        public int useMaxQp;
        public VkVideoEncodeH264QpKHR maxQp;
        public int useMaxFrameSize;
        public VkVideoEncodeH264FrameSizeKHR maxFrameSize;
        public VkVideoEncodeH264RateControlLayerInfoKHR() { }
        public VkVideoEncodeH264RateControlLayerInfoKHR(VkStructureType sType, void* pNext, int useMinQp, VkVideoEncodeH264QpKHR minQp, int useMaxQp, VkVideoEncodeH264QpKHR maxQp, int useMaxFrameSize, VkVideoEncodeH264FrameSizeKHR maxFrameSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.useMinQp = useMinQp;
            this.minQp = minQp;
            this.useMaxQp = useMaxQp;
            this.maxQp = maxQp;
            this.useMaxFrameSize = useMaxFrameSize;
            this.maxFrameSize = maxFrameSize;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265CapabilitiesKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265CapabilitiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH265CapabilitiesKhr;
        public void* pNext;
        public VkVideoEncodeH265CapabilityFlagBitsKHR flags;
        public StdVideoH265LevelIdc maxLevelIdc;
        public uint maxSliceSegmentCount;
        public VkExtent2D maxTiles;
        public VkVideoEncodeH265CtbSizeFlagBitsKHR ctbSizes;
        public VkVideoEncodeH265TransformBlockSizeFlagBitsKHR transformBlockSizes;
        public uint maxPPictureL0ReferenceCount;
        public uint maxBPictureL0ReferenceCount;
        public uint maxL1ReferenceCount;
        public uint maxSubLayerCount;
        public int expectDyadicTemporalSubLayerPattern;
        public int minQp;
        public int maxQp;
        public int prefersGopRemainingFrames;
        public int requiresGopRemainingFrames;
        public VkVideoEncodeH265StdFlagBitsKHR stdSyntaxFlags;
        public VkVideoEncodeH265CapabilitiesKHR() { }
        public VkVideoEncodeH265CapabilitiesKHR(VkStructureType sType, void* pNext, VkVideoEncodeH265CapabilityFlagBitsKHR flags, StdVideoH265LevelIdc maxLevelIdc, uint maxSliceSegmentCount, VkExtent2D maxTiles, VkVideoEncodeH265CtbSizeFlagBitsKHR ctbSizes, VkVideoEncodeH265TransformBlockSizeFlagBitsKHR transformBlockSizes, uint maxPPictureL0ReferenceCount, uint maxBPictureL0ReferenceCount, uint maxL1ReferenceCount, uint maxSubLayerCount, int expectDyadicTemporalSubLayerPattern, int minQp, int maxQp, int prefersGopRemainingFrames, int requiresGopRemainingFrames, VkVideoEncodeH265StdFlagBitsKHR stdSyntaxFlags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.maxLevelIdc = maxLevelIdc;
            this.maxSliceSegmentCount = maxSliceSegmentCount;
            this.maxTiles = maxTiles;
            this.ctbSizes = ctbSizes;
            this.transformBlockSizes = transformBlockSizes;
            this.maxPPictureL0ReferenceCount = maxPPictureL0ReferenceCount;
            this.maxBPictureL0ReferenceCount = maxBPictureL0ReferenceCount;
            this.maxL1ReferenceCount = maxL1ReferenceCount;
            this.maxSubLayerCount = maxSubLayerCount;
            this.expectDyadicTemporalSubLayerPattern = expectDyadicTemporalSubLayerPattern;
            this.minQp = minQp;
            this.maxQp = maxQp;
            this.prefersGopRemainingFrames = prefersGopRemainingFrames;
            this.requiresGopRemainingFrames = requiresGopRemainingFrames;
            this.stdSyntaxFlags = stdSyntaxFlags;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265QualityLevelPropertiesKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265QualityLevelPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH265QualityLevelPropertiesKhr;
        public void* pNext;
        public VkVideoEncodeH265RateControlFlagBitsKHR preferredRateControlFlags;
        public uint preferredGopFrameCount;
        public uint preferredIdrPeriod;
        public uint preferredConsecutiveBFrameCount;
        public uint preferredSubLayerCount;
        public VkVideoEncodeH265QpKHR preferredConstantQp;
        public uint preferredMaxL0ReferenceCount;
        public uint preferredMaxL1ReferenceCount;
        public VkVideoEncodeH265QualityLevelPropertiesKHR() { }
        public VkVideoEncodeH265QualityLevelPropertiesKHR(VkStructureType sType, void* pNext, VkVideoEncodeH265RateControlFlagBitsKHR preferredRateControlFlags, uint preferredGopFrameCount, uint preferredIdrPeriod, uint preferredConsecutiveBFrameCount, uint preferredSubLayerCount, VkVideoEncodeH265QpKHR preferredConstantQp, uint preferredMaxL0ReferenceCount, uint preferredMaxL1ReferenceCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.preferredRateControlFlags = preferredRateControlFlags;
            this.preferredGopFrameCount = preferredGopFrameCount;
            this.preferredIdrPeriod = preferredIdrPeriod;
            this.preferredConsecutiveBFrameCount = preferredConsecutiveBFrameCount;
            this.preferredSubLayerCount = preferredSubLayerCount;
            this.preferredConstantQp = preferredConstantQp;
            this.preferredMaxL0ReferenceCount = preferredMaxL0ReferenceCount;
            this.preferredMaxL1ReferenceCount = preferredMaxL1ReferenceCount;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265SessionCreateInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265SessionCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH265SessionCreateInfoKhr;
        public void* pNext;
        public int useMaxLevelIdc;
        public StdVideoH265LevelIdc maxLevelIdc;
        public VkVideoEncodeH265SessionCreateInfoKHR() { }
        public VkVideoEncodeH265SessionCreateInfoKHR(VkStructureType sType, void* pNext, int useMaxLevelIdc, StdVideoH265LevelIdc maxLevelIdc)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.useMaxLevelIdc = useMaxLevelIdc;
            this.maxLevelIdc = maxLevelIdc;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265SessionParametersAddInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265SessionParametersAddInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH265SessionParametersAddInfoKhr;
        public void* pNext;
        public uint stdVPSCount;
        public StdVideoH265VideoParameterSet* pStdVPSs;
        public uint stdSPSCount;
        public StdVideoH265SequenceParameterSet* pStdSPSs;
        public uint stdPPSCount;
        public StdVideoH265PictureParameterSet* pStdPPSs;
        public VkVideoEncodeH265SessionParametersAddInfoKHR() { }
        public VkVideoEncodeH265SessionParametersAddInfoKHR(VkStructureType sType, void* pNext, uint stdVPSCount, StdVideoH265VideoParameterSet* pStdVPSs, uint stdSPSCount, StdVideoH265SequenceParameterSet* pStdSPSs, uint stdPPSCount, StdVideoH265PictureParameterSet* pStdPPSs)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stdVPSCount = stdVPSCount;
            this.pStdVPSs = pStdVPSs;
            this.stdSPSCount = stdSPSCount;
            this.pStdSPSs = pStdSPSs;
            this.stdPPSCount = stdPPSCount;
            this.pStdPPSs = pStdPPSs;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265SessionParametersCreateInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265SessionParametersCreateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH265SessionParametersCreateInfoKhr;
        public void* pNext;
        public uint maxStdVPSCount;
        public uint maxStdSPSCount;
        public uint maxStdPPSCount;
        public VkVideoEncodeH265SessionParametersAddInfoKHR* pParametersAddInfo;
        public VkVideoEncodeH265SessionParametersCreateInfoKHR() { }
        public VkVideoEncodeH265SessionParametersCreateInfoKHR(VkStructureType sType, void* pNext, uint maxStdVPSCount, uint maxStdSPSCount, uint maxStdPPSCount, VkVideoEncodeH265SessionParametersAddInfoKHR* pParametersAddInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxStdVPSCount = maxStdVPSCount;
            this.maxStdSPSCount = maxStdSPSCount;
            this.maxStdPPSCount = maxStdPPSCount;
            this.pParametersAddInfo = pParametersAddInfo;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265SessionParametersGetInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265SessionParametersGetInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH265SessionParametersGetInfoKhr;
        public void* pNext;
        public int writeStdVPS;
        public int writeStdSPS;
        public int writeStdPPS;
        public uint stdVPSId;
        public uint stdSPSId;
        public uint stdPPSId;
        public VkVideoEncodeH265SessionParametersGetInfoKHR() { }
        public VkVideoEncodeH265SessionParametersGetInfoKHR(VkStructureType sType, void* pNext, int writeStdVPS, int writeStdSPS, int writeStdPPS, uint stdVPSId, uint stdSPSId, uint stdPPSId)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.writeStdVPS = writeStdVPS;
            this.writeStdSPS = writeStdSPS;
            this.writeStdPPS = writeStdPPS;
            this.stdVPSId = stdVPSId;
            this.stdSPSId = stdSPSId;
            this.stdPPSId = stdPPSId;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265SessionParametersFeedbackInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265SessionParametersFeedbackInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH265SessionParametersFeedbackInfoKhr;
        public void* pNext;
        public int hasStdVPSOverrides;
        public int hasStdSPSOverrides;
        public int hasStdPPSOverrides;
        public VkVideoEncodeH265SessionParametersFeedbackInfoKHR() { }
        public VkVideoEncodeH265SessionParametersFeedbackInfoKHR(VkStructureType sType, void* pNext, int hasStdVPSOverrides, int hasStdSPSOverrides, int hasStdPPSOverrides)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.hasStdVPSOverrides = hasStdVPSOverrides;
            this.hasStdSPSOverrides = hasStdSPSOverrides;
            this.hasStdPPSOverrides = hasStdPPSOverrides;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265PictureInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265PictureInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH265PictureInfoKhr;
        public void* pNext;
        public uint naluSliceSegmentEntryCount;
        public VkVideoEncodeH265NaluSliceSegmentInfoKHR* pNaluSliceSegmentEntries;
        public StdVideoEncodeH265PictureInfo* pStdPictureInfo;
        public VkVideoEncodeH265PictureInfoKHR() { }
        public VkVideoEncodeH265PictureInfoKHR(VkStructureType sType, void* pNext, uint naluSliceSegmentEntryCount, VkVideoEncodeH265NaluSliceSegmentInfoKHR* pNaluSliceSegmentEntries, StdVideoEncodeH265PictureInfo* pStdPictureInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.naluSliceSegmentEntryCount = naluSliceSegmentEntryCount;
            this.pNaluSliceSegmentEntries = pNaluSliceSegmentEntries;
            this.pStdPictureInfo = pStdPictureInfo;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265NaluSliceSegmentInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265NaluSliceSegmentInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH265NaluSliceSegmentInfoKhr;
        public void* pNext;
        public int constantQp;
        public StdVideoEncodeH265SliceSegmentHeader* pStdSliceSegmentHeader;
        public VkVideoEncodeH265NaluSliceSegmentInfoKHR() { }
        public VkVideoEncodeH265NaluSliceSegmentInfoKHR(VkStructureType sType, void* pNext, int constantQp, StdVideoEncodeH265SliceSegmentHeader* pStdSliceSegmentHeader)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.constantQp = constantQp;
            this.pStdSliceSegmentHeader = pStdSliceSegmentHeader;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265RateControlInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265RateControlInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH265RateControlInfoKhr;
        public void* pNext;
        public VkVideoEncodeH265RateControlFlagBitsKHR flags;
        public uint gopFrameCount;
        public uint idrPeriod;
        public uint consecutiveBFrameCount;
        public uint subLayerCount;
        public VkVideoEncodeH265RateControlInfoKHR() { }
        public VkVideoEncodeH265RateControlInfoKHR(VkStructureType sType, void* pNext, VkVideoEncodeH265RateControlFlagBitsKHR flags, uint gopFrameCount, uint idrPeriod, uint consecutiveBFrameCount, uint subLayerCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.gopFrameCount = gopFrameCount;
            this.idrPeriod = idrPeriod;
            this.consecutiveBFrameCount = consecutiveBFrameCount;
            this.subLayerCount = subLayerCount;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265QpKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265QpKHR
    {
        public int qpI;
        public int qpP;
        public int qpB;
        public VkVideoEncodeH265QpKHR() { }
        public VkVideoEncodeH265QpKHR(int qpI, int qpP, int qpB)
        {
            this.qpI = qpI;
            this.qpP = qpP;
            this.qpB = qpB;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265FrameSizeKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265FrameSizeKHR
    {
        public uint frameISize;
        public uint framePSize;
        public uint frameBSize;
        public VkVideoEncodeH265FrameSizeKHR() { }
        public VkVideoEncodeH265FrameSizeKHR(uint frameISize, uint framePSize, uint frameBSize)
        {
            this.frameISize = frameISize;
            this.framePSize = framePSize;
            this.frameBSize = frameBSize;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265GopRemainingFrameInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265GopRemainingFrameInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH265GopRemainingFrameInfoKhr;
        public void* pNext;
        public int useGopRemainingFrames;
        public uint gopRemainingI;
        public uint gopRemainingP;
        public uint gopRemainingB;
        public VkVideoEncodeH265GopRemainingFrameInfoKHR() { }
        public VkVideoEncodeH265GopRemainingFrameInfoKHR(VkStructureType sType, void* pNext, int useGopRemainingFrames, uint gopRemainingI, uint gopRemainingP, uint gopRemainingB)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.useGopRemainingFrames = useGopRemainingFrames;
            this.gopRemainingI = gopRemainingI;
            this.gopRemainingP = gopRemainingP;
            this.gopRemainingB = gopRemainingB;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265RateControlLayerInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265RateControlLayerInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH265RateControlLayerInfoKhr;
        public void* pNext;
        public int useMinQp;
        public VkVideoEncodeH265QpKHR minQp;
        public int useMaxQp;
        public VkVideoEncodeH265QpKHR maxQp;
        public int useMaxFrameSize;
        public VkVideoEncodeH265FrameSizeKHR maxFrameSize;
        public VkVideoEncodeH265RateControlLayerInfoKHR() { }
        public VkVideoEncodeH265RateControlLayerInfoKHR(VkStructureType sType, void* pNext, int useMinQp, VkVideoEncodeH265QpKHR minQp, int useMaxQp, VkVideoEncodeH265QpKHR maxQp, int useMaxFrameSize, VkVideoEncodeH265FrameSizeKHR maxFrameSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.useMinQp = useMinQp;
            this.minQp = minQp;
            this.useMaxQp = useMaxQp;
            this.maxQp = maxQp;
            this.useMaxFrameSize = useMaxFrameSize;
            this.maxFrameSize = maxFrameSize;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265ProfileInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265ProfileInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH265ProfileInfoKhr;
        public void* pNext;
        public StdVideoH265ProfileIdc stdProfileIdc;
        public VkVideoEncodeH265ProfileInfoKHR() { }
        public VkVideoEncodeH265ProfileInfoKHR(VkStructureType sType, void* pNext, StdVideoH265ProfileIdc stdProfileIdc)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stdProfileIdc = stdProfileIdc;
        }
    }
    /// <summary><b>[requires: VK_KHR_video_encode_h265]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkVideoEncodeH265DpbSlotInfoKHR.html" /></remarks>
    public unsafe struct VkVideoEncodeH265DpbSlotInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeVideoEncodeH265DpbSlotInfoKhr;
        public void* pNext;
        public StdVideoEncodeH265ReferenceInfo* pStdReferenceInfo;
        public VkVideoEncodeH265DpbSlotInfoKHR() { }
        public VkVideoEncodeH265DpbSlotInfoKHR(VkStructureType sType, void* pNext, StdVideoEncodeH265ReferenceInfo* pStdReferenceInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pStdReferenceInfo = pStdReferenceInfo;
        }
    }
    /// <summary><b>[requires: VK_NV_inherited_viewport_scissor]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceInheritedViewportScissorFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceInheritedViewportScissorFeaturesNv;
        public void* pNext;
        public int inheritedViewportScissor2D;
        public VkPhysicalDeviceInheritedViewportScissorFeaturesNV() { }
        public VkPhysicalDeviceInheritedViewportScissorFeaturesNV(VkStructureType sType, void* pNext, int inheritedViewportScissor2D)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.inheritedViewportScissor2D = inheritedViewportScissor2D;
        }
    }
    /// <summary><b>[requires: VK_NV_inherited_viewport_scissor]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCommandBufferInheritanceViewportScissorInfoNV.html" /></remarks>
    public unsafe struct VkCommandBufferInheritanceViewportScissorInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeCommandBufferInheritanceViewportScissorInfoNv;
        public void* pNext;
        public int viewportScissor2D;
        public uint viewportDepthCount;
        public VkViewport* pViewportDepths;
        public VkCommandBufferInheritanceViewportScissorInfoNV() { }
        public VkCommandBufferInheritanceViewportScissorInfoNV(VkStructureType sType, void* pNext, int viewportScissor2D, uint viewportDepthCount, VkViewport* pViewportDepths)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.viewportScissor2D = viewportScissor2D;
            this.viewportDepthCount = viewportDepthCount;
            this.pViewportDepths = pViewportDepths;
        }
    }
    /// <summary><b>[requires: VK_EXT_ycbcr_2plane_444_formats]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceYcbcr2Plane444FormatsFeaturesExt;
        public void* pNext;
        public int ycbcr2plane444Formats;
        public VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT() { }
        public VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(VkStructureType sType, void* pNext, int ycbcr2plane444Formats)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.ycbcr2plane444Formats = ycbcr2plane444Formats;
        }
    }
    /// <summary><b>[requires: VK_EXT_provoking_vertex]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProvokingVertexFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceProvokingVertexFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceProvokingVertexFeaturesExt;
        public void* pNext;
        public int provokingVertexLast;
        public int transformFeedbackPreservesProvokingVertex;
        public VkPhysicalDeviceProvokingVertexFeaturesEXT() { }
        public VkPhysicalDeviceProvokingVertexFeaturesEXT(VkStructureType sType, void* pNext, int provokingVertexLast, int transformFeedbackPreservesProvokingVertex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.provokingVertexLast = provokingVertexLast;
            this.transformFeedbackPreservesProvokingVertex = transformFeedbackPreservesProvokingVertex;
        }
    }
    /// <summary><b>[requires: VK_EXT_provoking_vertex]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProvokingVertexPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceProvokingVertexPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceProvokingVertexPropertiesExt;
        public void* pNext;
        public int provokingVertexModePerPipeline;
        public int transformFeedbackPreservesTriangleFanProvokingVertex;
        public VkPhysicalDeviceProvokingVertexPropertiesEXT() { }
        public VkPhysicalDeviceProvokingVertexPropertiesEXT(VkStructureType sType, void* pNext, int provokingVertexModePerPipeline, int transformFeedbackPreservesTriangleFanProvokingVertex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.provokingVertexModePerPipeline = provokingVertexModePerPipeline;
            this.transformFeedbackPreservesTriangleFanProvokingVertex = transformFeedbackPreservesTriangleFanProvokingVertex;
        }
    }
    /// <summary><b>[requires: VK_EXT_provoking_vertex]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineRasterizationProvokingVertexStateCreateInfoExt;
        public void* pNext;
        public VkProvokingVertexModeEXT provokingVertexMode;
        public VkPipelineRasterizationProvokingVertexStateCreateInfoEXT() { }
        public VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(VkStructureType sType, void* pNext, VkProvokingVertexModeEXT provokingVertexMode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.provokingVertexMode = provokingVertexMode;
        }
    }
    /// <summary><b>[requires: VK_NVX_binary_import]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCuModuleCreateInfoNVX.html" /></remarks>
    public unsafe struct VkCuModuleCreateInfoNVX
    {
        public VkStructureType sType = VkStructureType.StructureTypeCuModuleCreateInfoNvx;
        public void* pNext;
        public nuint dataSize;
        public void* pData;
        public VkCuModuleCreateInfoNVX() { }
        public VkCuModuleCreateInfoNVX(VkStructureType sType, void* pNext, nuint dataSize, void* pData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.dataSize = dataSize;
            this.pData = pData;
        }
    }
    /// <summary><b>[requires: VK_NVX_binary_import]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCuFunctionCreateInfoNVX.html" /></remarks>
    public unsafe struct VkCuFunctionCreateInfoNVX
    {
        public VkStructureType sType = VkStructureType.StructureTypeCuFunctionCreateInfoNvx;
        public void* pNext;
        public VkCuModuleNVX module;
        public byte* pName;
        public VkCuFunctionCreateInfoNVX() { }
        public VkCuFunctionCreateInfoNVX(VkStructureType sType, void* pNext, VkCuModuleNVX module, byte* pName)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.module = module;
            this.pName = pName;
        }
    }
    /// <summary><b>[requires: VK_NVX_binary_import]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCuLaunchInfoNVX.html" /></remarks>
    public unsafe struct VkCuLaunchInfoNVX
    {
        public VkStructureType sType = VkStructureType.StructureTypeCuLaunchInfoNvx;
        public void* pNext;
        public VkCuFunctionNVX function;
        public uint gridDimX;
        public uint gridDimY;
        public uint gridDimZ;
        public uint blockDimX;
        public uint blockDimY;
        public uint blockDimZ;
        public uint sharedMemBytes;
        public nuint paramCount;
        public void** pParams;
        public nuint extraCount;
        public void** pExtras;
        public VkCuLaunchInfoNVX() { }
        public VkCuLaunchInfoNVX(VkStructureType sType, void* pNext, VkCuFunctionNVX function, uint gridDimX, uint gridDimY, uint gridDimZ, uint blockDimX, uint blockDimY, uint blockDimZ, uint sharedMemBytes, nuint paramCount, void** pParams, nuint extraCount, void** pExtras)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.function = function;
            this.gridDimX = gridDimX;
            this.gridDimY = gridDimY;
            this.gridDimZ = gridDimZ;
            this.blockDimX = blockDimX;
            this.blockDimY = blockDimY;
            this.blockDimZ = blockDimZ;
            this.sharedMemBytes = sharedMemBytes;
            this.paramCount = paramCount;
            this.pParams = pParams;
            this.extraCount = extraCount;
            this.pExtras = pExtras;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDescriptorBufferFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDescriptorBufferFeaturesExt;
        public void* pNext;
        public int descriptorBuffer;
        public int descriptorBufferCaptureReplay;
        public int descriptorBufferImageLayoutIgnored;
        public int descriptorBufferPushDescriptors;
        public VkPhysicalDeviceDescriptorBufferFeaturesEXT() { }
        public VkPhysicalDeviceDescriptorBufferFeaturesEXT(VkStructureType sType, void* pNext, int descriptorBuffer, int descriptorBufferCaptureReplay, int descriptorBufferImageLayoutIgnored, int descriptorBufferPushDescriptors)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.descriptorBuffer = descriptorBuffer;
            this.descriptorBufferCaptureReplay = descriptorBufferCaptureReplay;
            this.descriptorBufferImageLayoutIgnored = descriptorBufferImageLayoutIgnored;
            this.descriptorBufferPushDescriptors = descriptorBufferPushDescriptors;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDescriptorBufferPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDescriptorBufferPropertiesExt;
        public void* pNext;
        public int combinedImageSamplerDescriptorSingleArray;
        public int bufferlessPushDescriptors;
        public int allowSamplerImageViewPostSubmitCreation;
        public ulong descriptorBufferOffsetAlignment;
        public uint maxDescriptorBufferBindings;
        public uint maxResourceDescriptorBufferBindings;
        public uint maxSamplerDescriptorBufferBindings;
        public uint maxEmbeddedImmutableSamplerBindings;
        public uint maxEmbeddedImmutableSamplers;
        public nuint bufferCaptureReplayDescriptorDataSize;
        public nuint imageCaptureReplayDescriptorDataSize;
        public nuint imageViewCaptureReplayDescriptorDataSize;
        public nuint samplerCaptureReplayDescriptorDataSize;
        public nuint accelerationStructureCaptureReplayDescriptorDataSize;
        public nuint samplerDescriptorSize;
        public nuint combinedImageSamplerDescriptorSize;
        public nuint sampledImageDescriptorSize;
        public nuint storageImageDescriptorSize;
        public nuint uniformTexelBufferDescriptorSize;
        public nuint robustUniformTexelBufferDescriptorSize;
        public nuint storageTexelBufferDescriptorSize;
        public nuint robustStorageTexelBufferDescriptorSize;
        public nuint uniformBufferDescriptorSize;
        public nuint robustUniformBufferDescriptorSize;
        public nuint storageBufferDescriptorSize;
        public nuint robustStorageBufferDescriptorSize;
        public nuint inputAttachmentDescriptorSize;
        public nuint accelerationStructureDescriptorSize;
        public ulong maxSamplerDescriptorBufferRange;
        public ulong maxResourceDescriptorBufferRange;
        public ulong samplerDescriptorBufferAddressSpaceSize;
        public ulong resourceDescriptorBufferAddressSpaceSize;
        public ulong descriptorBufferAddressSpaceSize;
        public VkPhysicalDeviceDescriptorBufferPropertiesEXT() { }
        public VkPhysicalDeviceDescriptorBufferPropertiesEXT(VkStructureType sType, void* pNext, int combinedImageSamplerDescriptorSingleArray, int bufferlessPushDescriptors, int allowSamplerImageViewPostSubmitCreation, ulong descriptorBufferOffsetAlignment, uint maxDescriptorBufferBindings, uint maxResourceDescriptorBufferBindings, uint maxSamplerDescriptorBufferBindings, uint maxEmbeddedImmutableSamplerBindings, uint maxEmbeddedImmutableSamplers, nuint bufferCaptureReplayDescriptorDataSize, nuint imageCaptureReplayDescriptorDataSize, nuint imageViewCaptureReplayDescriptorDataSize, nuint samplerCaptureReplayDescriptorDataSize, nuint accelerationStructureCaptureReplayDescriptorDataSize, nuint samplerDescriptorSize, nuint combinedImageSamplerDescriptorSize, nuint sampledImageDescriptorSize, nuint storageImageDescriptorSize, nuint uniformTexelBufferDescriptorSize, nuint robustUniformTexelBufferDescriptorSize, nuint storageTexelBufferDescriptorSize, nuint robustStorageTexelBufferDescriptorSize, nuint uniformBufferDescriptorSize, nuint robustUniformBufferDescriptorSize, nuint storageBufferDescriptorSize, nuint robustStorageBufferDescriptorSize, nuint inputAttachmentDescriptorSize, nuint accelerationStructureDescriptorSize, ulong maxSamplerDescriptorBufferRange, ulong maxResourceDescriptorBufferRange, ulong samplerDescriptorBufferAddressSpaceSize, ulong resourceDescriptorBufferAddressSpaceSize, ulong descriptorBufferAddressSpaceSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.combinedImageSamplerDescriptorSingleArray = combinedImageSamplerDescriptorSingleArray;
            this.bufferlessPushDescriptors = bufferlessPushDescriptors;
            this.allowSamplerImageViewPostSubmitCreation = allowSamplerImageViewPostSubmitCreation;
            this.descriptorBufferOffsetAlignment = descriptorBufferOffsetAlignment;
            this.maxDescriptorBufferBindings = maxDescriptorBufferBindings;
            this.maxResourceDescriptorBufferBindings = maxResourceDescriptorBufferBindings;
            this.maxSamplerDescriptorBufferBindings = maxSamplerDescriptorBufferBindings;
            this.maxEmbeddedImmutableSamplerBindings = maxEmbeddedImmutableSamplerBindings;
            this.maxEmbeddedImmutableSamplers = maxEmbeddedImmutableSamplers;
            this.bufferCaptureReplayDescriptorDataSize = bufferCaptureReplayDescriptorDataSize;
            this.imageCaptureReplayDescriptorDataSize = imageCaptureReplayDescriptorDataSize;
            this.imageViewCaptureReplayDescriptorDataSize = imageViewCaptureReplayDescriptorDataSize;
            this.samplerCaptureReplayDescriptorDataSize = samplerCaptureReplayDescriptorDataSize;
            this.accelerationStructureCaptureReplayDescriptorDataSize = accelerationStructureCaptureReplayDescriptorDataSize;
            this.samplerDescriptorSize = samplerDescriptorSize;
            this.combinedImageSamplerDescriptorSize = combinedImageSamplerDescriptorSize;
            this.sampledImageDescriptorSize = sampledImageDescriptorSize;
            this.storageImageDescriptorSize = storageImageDescriptorSize;
            this.uniformTexelBufferDescriptorSize = uniformTexelBufferDescriptorSize;
            this.robustUniformTexelBufferDescriptorSize = robustUniformTexelBufferDescriptorSize;
            this.storageTexelBufferDescriptorSize = storageTexelBufferDescriptorSize;
            this.robustStorageTexelBufferDescriptorSize = robustStorageTexelBufferDescriptorSize;
            this.uniformBufferDescriptorSize = uniformBufferDescriptorSize;
            this.robustUniformBufferDescriptorSize = robustUniformBufferDescriptorSize;
            this.storageBufferDescriptorSize = storageBufferDescriptorSize;
            this.robustStorageBufferDescriptorSize = robustStorageBufferDescriptorSize;
            this.inputAttachmentDescriptorSize = inputAttachmentDescriptorSize;
            this.accelerationStructureDescriptorSize = accelerationStructureDescriptorSize;
            this.maxSamplerDescriptorBufferRange = maxSamplerDescriptorBufferRange;
            this.maxResourceDescriptorBufferRange = maxResourceDescriptorBufferRange;
            this.samplerDescriptorBufferAddressSpaceSize = samplerDescriptorBufferAddressSpaceSize;
            this.resourceDescriptorBufferAddressSpaceSize = resourceDescriptorBufferAddressSpaceSize;
            this.descriptorBufferAddressSpaceSize = descriptorBufferAddressSpaceSize;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDescriptorBufferDensityMapPropertiesExt;
        public void* pNext;
        public nuint combinedImageSamplerDensityMapDescriptorSize;
        public VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT() { }
        public VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(VkStructureType sType, void* pNext, nuint combinedImageSamplerDensityMapDescriptorSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.combinedImageSamplerDensityMapDescriptorSize = combinedImageSamplerDensityMapDescriptorSize;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorAddressInfoEXT.html" /></remarks>
    public unsafe struct VkDescriptorAddressInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDescriptorAddressInfoExt;
        public void* pNext;
        public ulong address;
        public ulong range;
        public VkFormat format;
        public VkDescriptorAddressInfoEXT() { }
        public VkDescriptorAddressInfoEXT(VkStructureType sType, void* pNext, ulong address, ulong range, VkFormat format)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.address = address;
            this.range = range;
            this.format = format;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorBufferBindingInfoEXT.html" /></remarks>
    public unsafe struct VkDescriptorBufferBindingInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDescriptorBufferBindingInfoExt;
        public void* pNext;
        public ulong address;
        public VkBufferUsageFlagBits usage;
        public VkDescriptorBufferBindingInfoEXT() { }
        public VkDescriptorBufferBindingInfoEXT(VkStructureType sType, void* pNext, ulong address, VkBufferUsageFlagBits usage)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.address = address;
            this.usage = usage;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorBufferBindingPushDescriptorBufferHandleEXT.html" /></remarks>
    public unsafe struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDescriptorBufferBindingPushDescriptorBufferHandleExt;
        public void* pNext;
        public VkBuffer buffer;
        public VkDescriptorBufferBindingPushDescriptorBufferHandleEXT() { }
        public VkDescriptorBufferBindingPushDescriptorBufferHandleEXT(VkStructureType sType, void* pNext, VkBuffer buffer)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.buffer = buffer;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorDataEXT.html" /></remarks>
    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct VkDescriptorDataEXT
    {
        [FieldOffset(0)]
        public VkSampler* pSampler;
        [FieldOffset(0)]
        public VkDescriptorImageInfo* pCombinedImageSampler;
        [FieldOffset(0)]
        public VkDescriptorImageInfo* pInputAttachmentImage;
        [FieldOffset(0)]
        public VkDescriptorImageInfo* pSampledImage;
        [FieldOffset(0)]
        public VkDescriptorImageInfo* pStorageImage;
        [FieldOffset(0)]
        public VkDescriptorAddressInfoEXT* pUniformTexelBuffer;
        [FieldOffset(0)]
        public VkDescriptorAddressInfoEXT* pStorageTexelBuffer;
        [FieldOffset(0)]
        public VkDescriptorAddressInfoEXT* pUniformBuffer;
        [FieldOffset(0)]
        public VkDescriptorAddressInfoEXT* pStorageBuffer;
        [FieldOffset(0)]
        public ulong accelerationStructure;
        public VkDescriptorDataEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorGetInfoEXT.html" /></remarks>
    public unsafe struct VkDescriptorGetInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDescriptorGetInfoExt;
        public void* pNext;
        public VkDescriptorType type;
        public VkDescriptorDataEXT data;
        public VkDescriptorGetInfoEXT() { }
        public VkDescriptorGetInfoEXT(VkStructureType sType, void* pNext, VkDescriptorType type, VkDescriptorDataEXT data)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.type = type;
            this.data = data;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferCaptureDescriptorDataInfoEXT.html" /></remarks>
    public unsafe struct VkBufferCaptureDescriptorDataInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferCaptureDescriptorDataInfoExt;
        public void* pNext;
        public VkBuffer buffer;
        public VkBufferCaptureDescriptorDataInfoEXT() { }
        public VkBufferCaptureDescriptorDataInfoEXT(VkStructureType sType, void* pNext, VkBuffer buffer)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.buffer = buffer;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageCaptureDescriptorDataInfoEXT.html" /></remarks>
    public unsafe struct VkImageCaptureDescriptorDataInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageCaptureDescriptorDataInfoExt;
        public void* pNext;
        public VkImage image;
        public VkImageCaptureDescriptorDataInfoEXT() { }
        public VkImageCaptureDescriptorDataInfoEXT(VkStructureType sType, void* pNext, VkImage image)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.image = image;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageViewCaptureDescriptorDataInfoEXT.html" /></remarks>
    public unsafe struct VkImageViewCaptureDescriptorDataInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageViewCaptureDescriptorDataInfoExt;
        public void* pNext;
        public VkImageView imageView;
        public VkImageViewCaptureDescriptorDataInfoEXT() { }
        public VkImageViewCaptureDescriptorDataInfoEXT(VkStructureType sType, void* pNext, VkImageView imageView)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageView = imageView;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerCaptureDescriptorDataInfoEXT.html" /></remarks>
    public unsafe struct VkSamplerCaptureDescriptorDataInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSamplerCaptureDescriptorDataInfoExt;
        public void* pNext;
        public VkSampler sampler;
        public VkSamplerCaptureDescriptorDataInfoEXT() { }
        public VkSamplerCaptureDescriptorDataInfoEXT(VkStructureType sType, void* pNext, VkSampler sampler)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.sampler = sampler;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureCaptureDescriptorDataInfoEXT.html" /></remarks>
    public unsafe struct VkAccelerationStructureCaptureDescriptorDataInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureCaptureDescriptorDataInfoExt;
        public void* pNext;
        public VkAccelerationStructureKHR accelerationStructure;
        public VkAccelerationStructureNV accelerationStructureNV;
        public VkAccelerationStructureCaptureDescriptorDataInfoEXT() { }
        public VkAccelerationStructureCaptureDescriptorDataInfoEXT(VkStructureType sType, void* pNext, VkAccelerationStructureKHR accelerationStructure, VkAccelerationStructureNV accelerationStructureNV)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.accelerationStructure = accelerationStructure;
            this.accelerationStructureNV = accelerationStructureNV;
        }
    }
    /// <summary><b>[requires: VK_EXT_descriptor_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkOpaqueCaptureDescriptorDataCreateInfoEXT.html" /></remarks>
    public unsafe struct VkOpaqueCaptureDescriptorDataCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeOpaqueCaptureDescriptorDataCreateInfoExt;
        public void* pNext;
        public void* opaqueCaptureDescriptorData;
        public VkOpaqueCaptureDescriptorDataCreateInfoEXT() { }
        public VkOpaqueCaptureDescriptorDataCreateInfoEXT(VkStructureType sType, void* pNext, void* opaqueCaptureDescriptorData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.opaqueCaptureDescriptorData = opaqueCaptureDescriptorData;
        }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderIntegerDotProductFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderIntegerDotProductFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderIntegerDotProductFeatures;
        public void* pNext;
        public int shaderIntegerDotProduct;
        public VkPhysicalDeviceShaderIntegerDotProductFeatures() { }
        public VkPhysicalDeviceShaderIntegerDotProductFeatures(VkStructureType sType, void* pNext, int shaderIntegerDotProduct)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderIntegerDotProduct = shaderIntegerDotProduct;
        }
    }
    /// <summary><b>[requires: VK_KHR_shader_integer_dot_product]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR
    {
        public VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderIntegerDotProductProperties.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderIntegerDotProductProperties
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderIntegerDotProductProperties;
        public void* pNext;
        public int integerDotProduct8BitUnsignedAccelerated;
        public int integerDotProduct8BitSignedAccelerated;
        public int integerDotProduct8BitMixedSignednessAccelerated;
        public int integerDotProduct4x8BitPackedUnsignedAccelerated;
        public int integerDotProduct4x8BitPackedSignedAccelerated;
        public int integerDotProduct4x8BitPackedMixedSignednessAccelerated;
        public int integerDotProduct16BitUnsignedAccelerated;
        public int integerDotProduct16BitSignedAccelerated;
        public int integerDotProduct16BitMixedSignednessAccelerated;
        public int integerDotProduct32BitUnsignedAccelerated;
        public int integerDotProduct32BitSignedAccelerated;
        public int integerDotProduct32BitMixedSignednessAccelerated;
        public int integerDotProduct64BitUnsignedAccelerated;
        public int integerDotProduct64BitSignedAccelerated;
        public int integerDotProduct64BitMixedSignednessAccelerated;
        public int integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
        public int integerDotProductAccumulatingSaturating8BitSignedAccelerated;
        public int integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
        public int integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
        public int integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
        public int integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
        public int integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
        public int integerDotProductAccumulatingSaturating16BitSignedAccelerated;
        public int integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
        public int integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
        public int integerDotProductAccumulatingSaturating32BitSignedAccelerated;
        public int integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
        public int integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
        public int integerDotProductAccumulatingSaturating64BitSignedAccelerated;
        public int integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
        public VkPhysicalDeviceShaderIntegerDotProductProperties() { }
        public VkPhysicalDeviceShaderIntegerDotProductProperties(VkStructureType sType, void* pNext, int integerDotProduct8BitUnsignedAccelerated, int integerDotProduct8BitSignedAccelerated, int integerDotProduct8BitMixedSignednessAccelerated, int integerDotProduct4x8BitPackedUnsignedAccelerated, int integerDotProduct4x8BitPackedSignedAccelerated, int integerDotProduct4x8BitPackedMixedSignednessAccelerated, int integerDotProduct16BitUnsignedAccelerated, int integerDotProduct16BitSignedAccelerated, int integerDotProduct16BitMixedSignednessAccelerated, int integerDotProduct32BitUnsignedAccelerated, int integerDotProduct32BitSignedAccelerated, int integerDotProduct32BitMixedSignednessAccelerated, int integerDotProduct64BitUnsignedAccelerated, int integerDotProduct64BitSignedAccelerated, int integerDotProduct64BitMixedSignednessAccelerated, int integerDotProductAccumulatingSaturating8BitUnsignedAccelerated, int integerDotProductAccumulatingSaturating8BitSignedAccelerated, int integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated, int integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated, int integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated, int integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated, int integerDotProductAccumulatingSaturating16BitUnsignedAccelerated, int integerDotProductAccumulatingSaturating16BitSignedAccelerated, int integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated, int integerDotProductAccumulatingSaturating32BitUnsignedAccelerated, int integerDotProductAccumulatingSaturating32BitSignedAccelerated, int integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated, int integerDotProductAccumulatingSaturating64BitUnsignedAccelerated, int integerDotProductAccumulatingSaturating64BitSignedAccelerated, int integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.integerDotProduct8BitUnsignedAccelerated = integerDotProduct8BitUnsignedAccelerated;
            this.integerDotProduct8BitSignedAccelerated = integerDotProduct8BitSignedAccelerated;
            this.integerDotProduct8BitMixedSignednessAccelerated = integerDotProduct8BitMixedSignednessAccelerated;
            this.integerDotProduct4x8BitPackedUnsignedAccelerated = integerDotProduct4x8BitPackedUnsignedAccelerated;
            this.integerDotProduct4x8BitPackedSignedAccelerated = integerDotProduct4x8BitPackedSignedAccelerated;
            this.integerDotProduct4x8BitPackedMixedSignednessAccelerated = integerDotProduct4x8BitPackedMixedSignednessAccelerated;
            this.integerDotProduct16BitUnsignedAccelerated = integerDotProduct16BitUnsignedAccelerated;
            this.integerDotProduct16BitSignedAccelerated = integerDotProduct16BitSignedAccelerated;
            this.integerDotProduct16BitMixedSignednessAccelerated = integerDotProduct16BitMixedSignednessAccelerated;
            this.integerDotProduct32BitUnsignedAccelerated = integerDotProduct32BitUnsignedAccelerated;
            this.integerDotProduct32BitSignedAccelerated = integerDotProduct32BitSignedAccelerated;
            this.integerDotProduct32BitMixedSignednessAccelerated = integerDotProduct32BitMixedSignednessAccelerated;
            this.integerDotProduct64BitUnsignedAccelerated = integerDotProduct64BitUnsignedAccelerated;
            this.integerDotProduct64BitSignedAccelerated = integerDotProduct64BitSignedAccelerated;
            this.integerDotProduct64BitMixedSignednessAccelerated = integerDotProduct64BitMixedSignednessAccelerated;
            this.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
            this.integerDotProductAccumulatingSaturating8BitSignedAccelerated = integerDotProductAccumulatingSaturating8BitSignedAccelerated;
            this.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
            this.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
            this.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
            this.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
            this.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
            this.integerDotProductAccumulatingSaturating16BitSignedAccelerated = integerDotProductAccumulatingSaturating16BitSignedAccelerated;
            this.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
            this.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
            this.integerDotProductAccumulatingSaturating32BitSignedAccelerated = integerDotProductAccumulatingSaturating32BitSignedAccelerated;
            this.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
            this.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
            this.integerDotProductAccumulatingSaturating64BitSignedAccelerated = integerDotProductAccumulatingSaturating64BitSignedAccelerated;
            this.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
        }
    }
    /// <summary><b>[requires: VK_KHR_shader_integer_dot_product]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR
    {
        public VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR() { }
    }
    /// <summary><b>[requires: VK_EXT_physical_device_drm]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDrmPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDrmPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDrmPropertiesExt;
        public void* pNext;
        public int hasPrimary;
        public int hasRender;
        public long primaryMajor;
        public long primaryMinor;
        public long renderMajor;
        public long renderMinor;
        public VkPhysicalDeviceDrmPropertiesEXT() { }
        public VkPhysicalDeviceDrmPropertiesEXT(VkStructureType sType, void* pNext, int hasPrimary, int hasRender, long primaryMajor, long primaryMinor, long renderMajor, long renderMinor)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.hasPrimary = hasPrimary;
            this.hasRender = hasRender;
            this.primaryMajor = primaryMajor;
            this.primaryMinor = primaryMinor;
            this.renderMajor = renderMajor;
            this.renderMinor = renderMinor;
        }
    }
    /// <summary><b>[requires: VK_KHR_fragment_shader_barycentric]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFragmentShaderBarycentricFeaturesKhr;
        public void* pNext;
        public int fragmentShaderBarycentric;
        public VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR() { }
        public VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(VkStructureType sType, void* pNext, int fragmentShaderBarycentric)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.fragmentShaderBarycentric = fragmentShaderBarycentric;
        }
    }
    /// <summary><b>[requires: VK_KHR_fragment_shader_barycentric]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFragmentShaderBarycentricPropertiesKhr;
        public void* pNext;
        public int triStripVertexOrderIndependentOfProvokingVertex;
        public VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR() { }
        public VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(VkStructureType sType, void* pNext, int triStripVertexOrderIndependentOfProvokingVertex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.triStripVertexOrderIndependentOfProvokingVertex = triStripVertexOrderIndependentOfProvokingVertex;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing_motion_blur]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRayTracingMotionBlurFeaturesNv;
        public void* pNext;
        public int rayTracingMotionBlur;
        public int rayTracingMotionBlurPipelineTraceRaysIndirect;
        public VkPhysicalDeviceRayTracingMotionBlurFeaturesNV() { }
        public VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(VkStructureType sType, void* pNext, int rayTracingMotionBlur, int rayTracingMotionBlurPipelineTraceRaysIndirect)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.rayTracingMotionBlur = rayTracingMotionBlur;
            this.rayTracingMotionBlurPipelineTraceRaysIndirect = rayTracingMotionBlurPipelineTraceRaysIndirect;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing_validation]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingValidationFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRayTracingValidationFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRayTracingValidationFeaturesNv;
        public void* pNext;
        public int rayTracingValidation;
        public VkPhysicalDeviceRayTracingValidationFeaturesNV() { }
        public VkPhysicalDeviceRayTracingValidationFeaturesNV(VkStructureType sType, void* pNext, int rayTracingValidation)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.rayTracingValidation = rayTracingValidation;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing_motion_blur]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureGeometryMotionTrianglesDataNV.html" /></remarks>
    public unsafe struct VkAccelerationStructureGeometryMotionTrianglesDataNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureGeometryMotionTrianglesDataNv;
        public void* pNext;
        public VkDeviceOrHostAddressConstKHR vertexData;
        public VkAccelerationStructureGeometryMotionTrianglesDataNV() { }
        public VkAccelerationStructureGeometryMotionTrianglesDataNV(VkStructureType sType, void* pNext, VkDeviceOrHostAddressConstKHR vertexData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.vertexData = vertexData;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing_motion_blur]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureMotionInfoNV.html" /></remarks>
    public unsafe struct VkAccelerationStructureMotionInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureMotionInfoNv;
        public void* pNext;
        public uint maxInstances;
        public VkAccelerationStructureMotionInfoFlagsNV flags;
        public VkAccelerationStructureMotionInfoNV() { }
        public VkAccelerationStructureMotionInfoNV(VkStructureType sType, void* pNext, uint maxInstances, VkAccelerationStructureMotionInfoFlagsNV flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxInstances = maxInstances;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing_motion_blur]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSRTDataNV.html" /></remarks>
    public unsafe struct VkSRTDataNV
    {
        public float sx;
        public float a;
        public float b;
        public float pvx;
        public float sy;
        public float c;
        public float pvy;
        public float sz;
        public float pvz;
        public float qx;
        public float qy;
        public float qz;
        public float qw;
        public float tx;
        public float ty;
        public float tz;
        public VkSRTDataNV() { }
        public VkSRTDataNV(float sx, float a, float b, float pvx, float sy, float c, float pvy, float sz, float pvz, float qx, float qy, float qz, float qw, float tx, float ty, float tz)
        {
            this.sx = sx;
            this.a = a;
            this.b = b;
            this.pvx = pvx;
            this.sy = sy;
            this.c = c;
            this.pvy = pvy;
            this.sz = sz;
            this.pvz = pvz;
            this.qx = qx;
            this.qy = qy;
            this.qz = qz;
            this.qw = qw;
            this.tx = tx;
            this.ty = ty;
            this.tz = tz;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing_motion_blur]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureSRTMotionInstanceNV.html" /></remarks>
    public unsafe struct VkAccelerationStructureSRTMotionInstanceNV
    {
        public VkSRTDataNV transformT0;
        public VkSRTDataNV transformT1;
        private uint _bitfield0;
         // TODO: Accessor property for instanceCustomIndex, size: 24, offset: 0
        public uint instanceCustomIndex
        {
            get => (uint)((_bitfield0 >> 0) & 0xFFFFFFu);
            set => _bitfield0 = (_bitfield0 & ~(0xFFFFFFu << 0)) | ((((uint)value) & 0xFFFFFFu) << 0);
        }
         // TODO: Accessor property for mask, size: 8, offset: 24
        public uint mask
        {
            get => (uint)((_bitfield0 >> 24) & 0xFFu);
            set => _bitfield0 = (_bitfield0 & ~(0xFFu << 24)) | ((((uint)value) & 0xFFu) << 24);
        }
        private uint _bitfield1;
         // TODO: Accessor property for instanceShaderBindingTableRecordOffset, size: 24, offset: 0
        public uint instanceShaderBindingTableRecordOffset
        {
            get => (uint)((_bitfield1 >> 0) & 0xFFFFFFu);
            set => _bitfield1 = (_bitfield1 & ~(0xFFFFFFu << 0)) | ((((uint)value) & 0xFFFFFFu) << 0);
        }
         // TODO: Accessor property for flags, size: 8, offset: 24
        public VkGeometryInstanceFlagBitsKHR flags
        {
            get => (VkGeometryInstanceFlagBitsKHR)((_bitfield1 >> 24) & 0xFFu);
            set => _bitfield1 = (_bitfield1 & ~(0xFFu << 24)) | ((((uint)value) & 0xFFu) << 24);
        }
        public ulong accelerationStructureReference;
        public VkAccelerationStructureSRTMotionInstanceNV() { }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing_motion_blur]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureMatrixMotionInstanceNV.html" /></remarks>
    public unsafe struct VkAccelerationStructureMatrixMotionInstanceNV
    {
        public VkTransformMatrixKHR transformT0;
        public VkTransformMatrixKHR transformT1;
        private uint _bitfield0;
         // TODO: Accessor property for instanceCustomIndex, size: 24, offset: 0
        public uint instanceCustomIndex
        {
            get => (uint)((_bitfield0 >> 0) & 0xFFFFFFu);
            set => _bitfield0 = (_bitfield0 & ~(0xFFFFFFu << 0)) | ((((uint)value) & 0xFFFFFFu) << 0);
        }
         // TODO: Accessor property for mask, size: 8, offset: 24
        public uint mask
        {
            get => (uint)((_bitfield0 >> 24) & 0xFFu);
            set => _bitfield0 = (_bitfield0 & ~(0xFFu << 24)) | ((((uint)value) & 0xFFu) << 24);
        }
        private uint _bitfield1;
         // TODO: Accessor property for instanceShaderBindingTableRecordOffset, size: 24, offset: 0
        public uint instanceShaderBindingTableRecordOffset
        {
            get => (uint)((_bitfield1 >> 0) & 0xFFFFFFu);
            set => _bitfield1 = (_bitfield1 & ~(0xFFFFFFu << 0)) | ((((uint)value) & 0xFFFFFFu) << 0);
        }
         // TODO: Accessor property for flags, size: 8, offset: 24
        public VkGeometryInstanceFlagBitsKHR flags
        {
            get => (VkGeometryInstanceFlagBitsKHR)((_bitfield1 >> 24) & 0xFFu);
            set => _bitfield1 = (_bitfield1 & ~(0xFFu << 24)) | ((((uint)value) & 0xFFu) << 24);
        }
        public ulong accelerationStructureReference;
        public VkAccelerationStructureMatrixMotionInstanceNV() { }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing_motion_blur]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureMotionInstanceDataNV.html" /></remarks>
    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct VkAccelerationStructureMotionInstanceDataNV
    {
        [FieldOffset(0)]
        public VkAccelerationStructureInstanceKHR staticInstance;
        [FieldOffset(0)]
        public VkAccelerationStructureMatrixMotionInstanceNV matrixMotionInstance;
        [FieldOffset(0)]
        public VkAccelerationStructureSRTMotionInstanceNV srtMotionInstance;
        public VkAccelerationStructureMotionInstanceDataNV() { }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing_motion_blur]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureMotionInstanceNV.html" /></remarks>
    public unsafe struct VkAccelerationStructureMotionInstanceNV
    {
        public VkAccelerationStructureMotionInstanceTypeNV type;
        public VkAccelerationStructureMotionInstanceFlagsNV flags;
        public VkAccelerationStructureMotionInstanceDataNV data;
        public VkAccelerationStructureMotionInstanceNV() { }
        public VkAccelerationStructureMotionInstanceNV(VkAccelerationStructureMotionInstanceTypeNV type, VkAccelerationStructureMotionInstanceFlagsNV flags, VkAccelerationStructureMotionInstanceDataNV data)
        {
            this.type = type;
            this.flags = flags;
            this.data = data;
        }
    }
    /// <summary><b>[requires: VK_NV_external_memory_rdma]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryGetRemoteAddressInfoNV.html" /></remarks>
    public unsafe struct VkMemoryGetRemoteAddressInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryGetRemoteAddressInfoNv;
        public void* pNext;
        public VkDeviceMemory memory;
        public VkExternalMemoryHandleTypeFlagBits handleType;
        public VkMemoryGetRemoteAddressInfoNV() { }
        public VkMemoryGetRemoteAddressInfoNV(VkStructureType sType, void* pNext, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagBits handleType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memory = memory;
            this.handleType = handleType;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_buffer_collection]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportMemoryBufferCollectionFUCHSIA.html" /></remarks>
    public unsafe struct VkImportMemoryBufferCollectionFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportMemoryBufferCollectionFuchsia;
        public void* pNext;
        public VkBufferCollectionFUCHSIA collection;
        public uint index;
        public VkImportMemoryBufferCollectionFUCHSIA() { }
        public VkImportMemoryBufferCollectionFUCHSIA(VkStructureType sType, void* pNext, VkBufferCollectionFUCHSIA collection, uint index)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.collection = collection;
            this.index = index;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_buffer_collection]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferCollectionImageCreateInfoFUCHSIA.html" /></remarks>
    public unsafe struct VkBufferCollectionImageCreateInfoFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferCollectionImageCreateInfoFuchsia;
        public void* pNext;
        public VkBufferCollectionFUCHSIA collection;
        public uint index;
        public VkBufferCollectionImageCreateInfoFUCHSIA() { }
        public VkBufferCollectionImageCreateInfoFUCHSIA(VkStructureType sType, void* pNext, VkBufferCollectionFUCHSIA collection, uint index)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.collection = collection;
            this.index = index;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_buffer_collection]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferCollectionBufferCreateInfoFUCHSIA.html" /></remarks>
    public unsafe struct VkBufferCollectionBufferCreateInfoFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferCollectionBufferCreateInfoFuchsia;
        public void* pNext;
        public VkBufferCollectionFUCHSIA collection;
        public uint index;
        public VkBufferCollectionBufferCreateInfoFUCHSIA() { }
        public VkBufferCollectionBufferCreateInfoFUCHSIA(VkStructureType sType, void* pNext, VkBufferCollectionFUCHSIA collection, uint index)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.collection = collection;
            this.index = index;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_buffer_collection]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferCollectionCreateInfoFUCHSIA.html" /></remarks>
    public unsafe struct VkBufferCollectionCreateInfoFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferCollectionCreateInfoFuchsia;
        public void* pNext;
        public int collectionToken;
        public VkBufferCollectionCreateInfoFUCHSIA() { }
        public VkBufferCollectionCreateInfoFUCHSIA(VkStructureType sType, void* pNext, int collectionToken)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.collectionToken = collectionToken;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_buffer_collection]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferCollectionPropertiesFUCHSIA.html" /></remarks>
    public unsafe struct VkBufferCollectionPropertiesFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferCollectionPropertiesFuchsia;
        public void* pNext;
        public uint memoryTypeBits;
        public uint bufferCount;
        public uint createInfoIndex;
        public ulong sysmemPixelFormat;
        public VkFormatFeatureFlagBits formatFeatures;
        public VkSysmemColorSpaceFUCHSIA sysmemColorSpaceIndex;
        public VkComponentMapping samplerYcbcrConversionComponents;
        public VkSamplerYcbcrModelConversion suggestedYcbcrModel;
        public VkSamplerYcbcrRange suggestedYcbcrRange;
        public VkChromaLocation suggestedXChromaOffset;
        public VkChromaLocation suggestedYChromaOffset;
        public VkBufferCollectionPropertiesFUCHSIA() { }
        public VkBufferCollectionPropertiesFUCHSIA(VkStructureType sType, void* pNext, uint memoryTypeBits, uint bufferCount, uint createInfoIndex, ulong sysmemPixelFormat, VkFormatFeatureFlagBits formatFeatures, VkSysmemColorSpaceFUCHSIA sysmemColorSpaceIndex, VkComponentMapping samplerYcbcrConversionComponents, VkSamplerYcbcrModelConversion suggestedYcbcrModel, VkSamplerYcbcrRange suggestedYcbcrRange, VkChromaLocation suggestedXChromaOffset, VkChromaLocation suggestedYChromaOffset)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memoryTypeBits = memoryTypeBits;
            this.bufferCount = bufferCount;
            this.createInfoIndex = createInfoIndex;
            this.sysmemPixelFormat = sysmemPixelFormat;
            this.formatFeatures = formatFeatures;
            this.sysmemColorSpaceIndex = sysmemColorSpaceIndex;
            this.samplerYcbcrConversionComponents = samplerYcbcrConversionComponents;
            this.suggestedYcbcrModel = suggestedYcbcrModel;
            this.suggestedYcbcrRange = suggestedYcbcrRange;
            this.suggestedXChromaOffset = suggestedXChromaOffset;
            this.suggestedYChromaOffset = suggestedYChromaOffset;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_buffer_collection]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferConstraintsInfoFUCHSIA.html" /></remarks>
    public unsafe struct VkBufferConstraintsInfoFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferConstraintsInfoFuchsia;
        public void* pNext;
        public VkBufferCreateInfo createInfo;
        public VkFormatFeatureFlagBits requiredFormatFeatures;
        public VkBufferCollectionConstraintsInfoFUCHSIA bufferCollectionConstraints;
        public VkBufferConstraintsInfoFUCHSIA() { }
        public VkBufferConstraintsInfoFUCHSIA(VkStructureType sType, void* pNext, VkBufferCreateInfo createInfo, VkFormatFeatureFlagBits requiredFormatFeatures, VkBufferCollectionConstraintsInfoFUCHSIA bufferCollectionConstraints)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.createInfo = createInfo;
            this.requiredFormatFeatures = requiredFormatFeatures;
            this.bufferCollectionConstraints = bufferCollectionConstraints;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_buffer_collection]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSysmemColorSpaceFUCHSIA.html" /></remarks>
    public unsafe struct VkSysmemColorSpaceFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeSysmemColorSpaceFuchsia;
        public void* pNext;
        public uint colorSpace;
        public VkSysmemColorSpaceFUCHSIA() { }
        public VkSysmemColorSpaceFUCHSIA(VkStructureType sType, void* pNext, uint colorSpace)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.colorSpace = colorSpace;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_buffer_collection]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageFormatConstraintsInfoFUCHSIA.html" /></remarks>
    public unsafe struct VkImageFormatConstraintsInfoFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageFormatConstraintsInfoFuchsia;
        public void* pNext;
        public VkImageCreateInfo imageCreateInfo;
        public VkFormatFeatureFlagBits requiredFormatFeatures;
        public VkImageFormatConstraintsFlagsFUCHSIA flags;
        public ulong sysmemPixelFormat;
        public uint colorSpaceCount;
        public VkSysmemColorSpaceFUCHSIA* pColorSpaces;
        public VkImageFormatConstraintsInfoFUCHSIA() { }
        public VkImageFormatConstraintsInfoFUCHSIA(VkStructureType sType, void* pNext, VkImageCreateInfo imageCreateInfo, VkFormatFeatureFlagBits requiredFormatFeatures, VkImageFormatConstraintsFlagsFUCHSIA flags, ulong sysmemPixelFormat, uint colorSpaceCount, VkSysmemColorSpaceFUCHSIA* pColorSpaces)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageCreateInfo = imageCreateInfo;
            this.requiredFormatFeatures = requiredFormatFeatures;
            this.flags = flags;
            this.sysmemPixelFormat = sysmemPixelFormat;
            this.colorSpaceCount = colorSpaceCount;
            this.pColorSpaces = pColorSpaces;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_buffer_collection]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageConstraintsInfoFUCHSIA.html" /></remarks>
    public unsafe struct VkImageConstraintsInfoFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageConstraintsInfoFuchsia;
        public void* pNext;
        public uint formatConstraintsCount;
        public VkImageFormatConstraintsInfoFUCHSIA* pFormatConstraints;
        public VkBufferCollectionConstraintsInfoFUCHSIA bufferCollectionConstraints;
        public VkImageConstraintsInfoFlagBitsFUCHSIA flags;
        public VkImageConstraintsInfoFUCHSIA() { }
        public VkImageConstraintsInfoFUCHSIA(VkStructureType sType, void* pNext, uint formatConstraintsCount, VkImageFormatConstraintsInfoFUCHSIA* pFormatConstraints, VkBufferCollectionConstraintsInfoFUCHSIA bufferCollectionConstraints, VkImageConstraintsInfoFlagBitsFUCHSIA flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.formatConstraintsCount = formatConstraintsCount;
            this.pFormatConstraints = pFormatConstraints;
            this.bufferCollectionConstraints = bufferCollectionConstraints;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: VK_FUCHSIA_buffer_collection]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBufferCollectionConstraintsInfoFUCHSIA.html" /></remarks>
    public unsafe struct VkBufferCollectionConstraintsInfoFUCHSIA
    {
        public VkStructureType sType = VkStructureType.StructureTypeBufferCollectionConstraintsInfoFuchsia;
        public void* pNext;
        public uint minBufferCount;
        public uint maxBufferCount;
        public uint minBufferCountForCamping;
        public uint minBufferCountForDedicatedSlack;
        public uint minBufferCountForSharedSlack;
        public VkBufferCollectionConstraintsInfoFUCHSIA() { }
        public VkBufferCollectionConstraintsInfoFUCHSIA(VkStructureType sType, void* pNext, uint minBufferCount, uint maxBufferCount, uint minBufferCountForCamping, uint minBufferCountForDedicatedSlack, uint minBufferCountForSharedSlack)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.minBufferCount = minBufferCount;
            this.maxBufferCount = maxBufferCount;
            this.minBufferCountForCamping = minBufferCountForCamping;
            this.minBufferCountForDedicatedSlack = minBufferCountForDedicatedSlack;
            this.minBufferCountForSharedSlack = minBufferCountForSharedSlack;
        }
    }
    /// <summary><b>[requires: VK_NV_cuda_kernel_launch]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCudaModuleCreateInfoNV.html" /></remarks>
    public unsafe struct VkCudaModuleCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeCudaModuleCreateInfoNv;
        public void* pNext;
        public nuint dataSize;
        public void* pData;
        public VkCudaModuleCreateInfoNV() { }
        public VkCudaModuleCreateInfoNV(VkStructureType sType, void* pNext, nuint dataSize, void* pData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.dataSize = dataSize;
            this.pData = pData;
        }
    }
    /// <summary><b>[requires: VK_NV_cuda_kernel_launch]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCudaFunctionCreateInfoNV.html" /></remarks>
    public unsafe struct VkCudaFunctionCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeCudaFunctionCreateInfoNv;
        public void* pNext;
        public VkCudaModuleNV module;
        public byte* pName;
        public VkCudaFunctionCreateInfoNV() { }
        public VkCudaFunctionCreateInfoNV(VkStructureType sType, void* pNext, VkCudaModuleNV module, byte* pName)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.module = module;
            this.pName = pName;
        }
    }
    /// <summary><b>[requires: VK_NV_cuda_kernel_launch]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCudaLaunchInfoNV.html" /></remarks>
    public unsafe struct VkCudaLaunchInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeCudaLaunchInfoNv;
        public void* pNext;
        public VkCudaFunctionNV function;
        public uint gridDimX;
        public uint gridDimY;
        public uint gridDimZ;
        public uint blockDimX;
        public uint blockDimY;
        public uint blockDimZ;
        public uint sharedMemBytes;
        public nuint paramCount;
        public void** pParams;
        public nuint extraCount;
        public void** pExtras;
        public VkCudaLaunchInfoNV() { }
        public VkCudaLaunchInfoNV(VkStructureType sType, void* pNext, VkCudaFunctionNV function, uint gridDimX, uint gridDimY, uint gridDimZ, uint blockDimX, uint blockDimY, uint blockDimZ, uint sharedMemBytes, nuint paramCount, void** pParams, nuint extraCount, void** pExtras)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.function = function;
            this.gridDimX = gridDimX;
            this.gridDimY = gridDimY;
            this.gridDimZ = gridDimZ;
            this.blockDimX = blockDimX;
            this.blockDimY = blockDimY;
            this.blockDimZ = blockDimZ;
            this.sharedMemBytes = sharedMemBytes;
            this.paramCount = paramCount;
            this.pParams = pParams;
            this.extraCount = extraCount;
            this.pExtras = pExtras;
        }
    }
    /// <summary><b>[requires: VK_EXT_rgba10x6_formats]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRgba10x6FormatsFeaturesExt;
        public void* pNext;
        public int formatRgba10x6WithoutYCbCrSampler;
        public VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT() { }
        public VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(VkStructureType sType, void* pNext, int formatRgba10x6WithoutYCbCrSampler)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.formatRgba10x6WithoutYCbCrSampler = formatRgba10x6WithoutYCbCrSampler;
        }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFormatProperties3.html" /></remarks>
    public unsafe struct VkFormatProperties3
    {
        public VkStructureType sType = VkStructureType.StructureTypeFormatProperties3;
        public void* pNext;
        public VkFormatFeatureFlagBits2 linearTilingFeatures;
        public VkFormatFeatureFlagBits2 optimalTilingFeatures;
        public VkFormatFeatureFlagBits2 bufferFeatures;
        public VkFormatProperties3() { }
        public VkFormatProperties3(VkStructureType sType, void* pNext, VkFormatFeatureFlagBits2 linearTilingFeatures, VkFormatFeatureFlagBits2 optimalTilingFeatures, VkFormatFeatureFlagBits2 bufferFeatures)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.linearTilingFeatures = linearTilingFeatures;
            this.optimalTilingFeatures = optimalTilingFeatures;
            this.bufferFeatures = bufferFeatures;
        }
    }
    /// <summary><b>[requires: VK_KHR_format_feature_flags2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFormatProperties3KHR.html" /></remarks>
    public unsafe struct VkFormatProperties3KHR
    {
        public VkFormatProperties3KHR() { }
    }
    /// <summary><b>[requires: VK_EXT_image_drm_format_modifier]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDrmFormatModifierPropertiesList2EXT.html" /></remarks>
    public unsafe struct VkDrmFormatModifierPropertiesList2EXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDrmFormatModifierPropertiesList2Ext;
        public void* pNext;
        public uint drmFormatModifierCount;
        public VkDrmFormatModifierProperties2EXT* pDrmFormatModifierProperties;
        public VkDrmFormatModifierPropertiesList2EXT() { }
        public VkDrmFormatModifierPropertiesList2EXT(VkStructureType sType, void* pNext, uint drmFormatModifierCount, VkDrmFormatModifierProperties2EXT* pDrmFormatModifierProperties)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.drmFormatModifierCount = drmFormatModifierCount;
            this.pDrmFormatModifierProperties = pDrmFormatModifierProperties;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_drm_format_modifier]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDrmFormatModifierProperties2EXT.html" /></remarks>
    public unsafe struct VkDrmFormatModifierProperties2EXT
    {
        public ulong drmFormatModifier;
        public uint drmFormatModifierPlaneCount;
        public VkFormatFeatureFlagBits2 drmFormatModifierTilingFeatures;
        public VkDrmFormatModifierProperties2EXT() { }
        public VkDrmFormatModifierProperties2EXT(ulong drmFormatModifier, uint drmFormatModifierPlaneCount, VkFormatFeatureFlagBits2 drmFormatModifierTilingFeatures)
        {
            this.drmFormatModifier = drmFormatModifier;
            this.drmFormatModifierPlaneCount = drmFormatModifierPlaneCount;
            this.drmFormatModifierTilingFeatures = drmFormatModifierTilingFeatures;
        }
    }
    /// <summary><b>[requires: VK_ANDROID_external_memory_android_hardware_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAndroidHardwareBufferFormatProperties2ANDROID.html" /></remarks>
    public unsafe struct VkAndroidHardwareBufferFormatProperties2ANDROID
    {
        public VkStructureType sType = VkStructureType.StructureTypeAndroidHardwareBufferFormatProperties2Android;
        public void* pNext;
        public VkFormat format;
        public ulong externalFormat;
        public VkFormatFeatureFlagBits2 formatFeatures;
        public VkComponentMapping samplerYcbcrConversionComponents;
        public VkSamplerYcbcrModelConversion suggestedYcbcrModel;
        public VkSamplerYcbcrRange suggestedYcbcrRange;
        public VkChromaLocation suggestedXChromaOffset;
        public VkChromaLocation suggestedYChromaOffset;
        public VkAndroidHardwareBufferFormatProperties2ANDROID() { }
        public VkAndroidHardwareBufferFormatProperties2ANDROID(VkStructureType sType, void* pNext, VkFormat format, ulong externalFormat, VkFormatFeatureFlagBits2 formatFeatures, VkComponentMapping samplerYcbcrConversionComponents, VkSamplerYcbcrModelConversion suggestedYcbcrModel, VkSamplerYcbcrRange suggestedYcbcrRange, VkChromaLocation suggestedXChromaOffset, VkChromaLocation suggestedYChromaOffset)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.format = format;
            this.externalFormat = externalFormat;
            this.formatFeatures = formatFeatures;
            this.samplerYcbcrConversionComponents = samplerYcbcrConversionComponents;
            this.suggestedYcbcrModel = suggestedYcbcrModel;
            this.suggestedYcbcrRange = suggestedYcbcrRange;
            this.suggestedXChromaOffset = suggestedXChromaOffset;
            this.suggestedYChromaOffset = suggestedYChromaOffset;
        }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineRenderingCreateInfo.html" /></remarks>
    public unsafe struct VkPipelineRenderingCreateInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineRenderingCreateInfo;
        public void* pNext;
        public uint viewMask;
        public uint colorAttachmentCount;
        public VkFormat* pColorAttachmentFormats;
        public VkFormat depthAttachmentFormat;
        public VkFormat stencilAttachmentFormat;
        public VkPipelineRenderingCreateInfo() { }
        public VkPipelineRenderingCreateInfo(VkStructureType sType, void* pNext, uint viewMask, uint colorAttachmentCount, VkFormat* pColorAttachmentFormats, VkFormat depthAttachmentFormat, VkFormat stencilAttachmentFormat)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.viewMask = viewMask;
            this.colorAttachmentCount = colorAttachmentCount;
            this.pColorAttachmentFormats = pColorAttachmentFormats;
            this.depthAttachmentFormat = depthAttachmentFormat;
            this.stencilAttachmentFormat = stencilAttachmentFormat;
        }
    }
    /// <summary><b>[requires: VK_KHR_dynamic_rendering]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineRenderingCreateInfoKHR.html" /></remarks>
    public unsafe struct VkPipelineRenderingCreateInfoKHR
    {
        public VkPipelineRenderingCreateInfoKHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderingInfo.html" /></remarks>
    public unsafe struct VkRenderingInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderingInfo;
        public void* pNext;
        public VkRenderingFlagBits flags;
        public VkRect2D renderArea;
        public uint layerCount;
        public uint viewMask;
        public uint colorAttachmentCount;
        public VkRenderingAttachmentInfo* pColorAttachments;
        public VkRenderingAttachmentInfo* pDepthAttachment;
        public VkRenderingAttachmentInfo* pStencilAttachment;
        public VkRenderingInfo() { }
        public VkRenderingInfo(VkStructureType sType, void* pNext, VkRenderingFlagBits flags, VkRect2D renderArea, uint layerCount, uint viewMask, uint colorAttachmentCount, VkRenderingAttachmentInfo* pColorAttachments, VkRenderingAttachmentInfo* pDepthAttachment, VkRenderingAttachmentInfo* pStencilAttachment)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.renderArea = renderArea;
            this.layerCount = layerCount;
            this.viewMask = viewMask;
            this.colorAttachmentCount = colorAttachmentCount;
            this.pColorAttachments = pColorAttachments;
            this.pDepthAttachment = pDepthAttachment;
            this.pStencilAttachment = pStencilAttachment;
        }
    }
    /// <summary><b>[requires: VK_KHR_dynamic_rendering | VK_QCOM_tile_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderingInfoKHR.html" /></remarks>
    public unsafe struct VkRenderingInfoKHR
    {
        public VkRenderingInfoKHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderingAttachmentInfo.html" /></remarks>
    public unsafe struct VkRenderingAttachmentInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderingAttachmentInfo;
        public void* pNext;
        public VkImageView imageView;
        public VkImageLayout imageLayout;
        public VkResolveModeFlagBits resolveMode;
        public VkImageView resolveImageView;
        public VkImageLayout resolveImageLayout;
        public VkAttachmentLoadOp loadOp;
        public VkAttachmentStoreOp storeOp;
        public VkClearValue clearValue;
        public VkRenderingAttachmentInfo() { }
        public VkRenderingAttachmentInfo(VkStructureType sType, void* pNext, VkImageView imageView, VkImageLayout imageLayout, VkResolveModeFlagBits resolveMode, VkImageView resolveImageView, VkImageLayout resolveImageLayout, VkAttachmentLoadOp loadOp, VkAttachmentStoreOp storeOp, VkClearValue clearValue)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageView = imageView;
            this.imageLayout = imageLayout;
            this.resolveMode = resolveMode;
            this.resolveImageView = resolveImageView;
            this.resolveImageLayout = resolveImageLayout;
            this.loadOp = loadOp;
            this.storeOp = storeOp;
            this.clearValue = clearValue;
        }
    }
    /// <summary><b>[requires: VK_KHR_dynamic_rendering]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderingAttachmentInfoKHR.html" /></remarks>
    public unsafe struct VkRenderingAttachmentInfoKHR
    {
        public VkRenderingAttachmentInfoKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_dynamic_rendering]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderingFragmentShadingRateAttachmentInfoKHR.html" /></remarks>
    public unsafe struct VkRenderingFragmentShadingRateAttachmentInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderingFragmentShadingRateAttachmentInfoKhr;
        public void* pNext;
        public VkImageView imageView;
        public VkImageLayout imageLayout;
        public VkExtent2D shadingRateAttachmentTexelSize;
        public VkRenderingFragmentShadingRateAttachmentInfoKHR() { }
        public VkRenderingFragmentShadingRateAttachmentInfoKHR(VkStructureType sType, void* pNext, VkImageView imageView, VkImageLayout imageLayout, VkExtent2D shadingRateAttachmentTexelSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageView = imageView;
            this.imageLayout = imageLayout;
            this.shadingRateAttachmentTexelSize = shadingRateAttachmentTexelSize;
        }
    }
    /// <summary><b>[requires: VK_KHR_dynamic_rendering]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderingFragmentDensityMapAttachmentInfoEXT.html" /></remarks>
    public unsafe struct VkRenderingFragmentDensityMapAttachmentInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderingFragmentDensityMapAttachmentInfoExt;
        public void* pNext;
        public VkImageView imageView;
        public VkImageLayout imageLayout;
        public VkRenderingFragmentDensityMapAttachmentInfoEXT() { }
        public VkRenderingFragmentDensityMapAttachmentInfoEXT(VkStructureType sType, void* pNext, VkImageView imageView, VkImageLayout imageLayout)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageView = imageView;
            this.imageLayout = imageLayout;
        }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDynamicRenderingFeatures.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDynamicRenderingFeatures
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDynamicRenderingFeatures;
        public void* pNext;
        public int dynamicRendering;
        public VkPhysicalDeviceDynamicRenderingFeatures() { }
        public VkPhysicalDeviceDynamicRenderingFeatures(VkStructureType sType, void* pNext, int dynamicRendering)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.dynamicRendering = dynamicRendering;
        }
    }
    /// <summary><b>[requires: VK_KHR_dynamic_rendering]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDynamicRenderingFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDynamicRenderingFeaturesKHR
    {
        public VkPhysicalDeviceDynamicRenderingFeaturesKHR() { }
    }
    /// <summary><b>[requires: v1.3]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCommandBufferInheritanceRenderingInfo.html" /></remarks>
    public unsafe struct VkCommandBufferInheritanceRenderingInfo
    {
        public VkStructureType sType = VkStructureType.StructureTypeCommandBufferInheritanceRenderingInfo;
        public void* pNext;
        public VkRenderingFlagBits flags;
        public uint viewMask;
        public uint colorAttachmentCount;
        public VkFormat* pColorAttachmentFormats;
        public VkFormat depthAttachmentFormat;
        public VkFormat stencilAttachmentFormat;
        public VkSampleCountFlagBits rasterizationSamples;
        public VkCommandBufferInheritanceRenderingInfo() { }
        public VkCommandBufferInheritanceRenderingInfo(VkStructureType sType, void* pNext, VkRenderingFlagBits flags, uint viewMask, uint colorAttachmentCount, VkFormat* pColorAttachmentFormats, VkFormat depthAttachmentFormat, VkFormat stencilAttachmentFormat, VkSampleCountFlagBits rasterizationSamples)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.viewMask = viewMask;
            this.colorAttachmentCount = colorAttachmentCount;
            this.pColorAttachmentFormats = pColorAttachmentFormats;
            this.depthAttachmentFormat = depthAttachmentFormat;
            this.stencilAttachmentFormat = stencilAttachmentFormat;
            this.rasterizationSamples = rasterizationSamples;
        }
    }
    /// <summary><b>[requires: VK_KHR_dynamic_rendering]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCommandBufferInheritanceRenderingInfoKHR.html" /></remarks>
    public unsafe struct VkCommandBufferInheritanceRenderingInfoKHR
    {
        public VkCommandBufferInheritanceRenderingInfoKHR() { }
    }
    /// <summary><b>[requires: VK_KHR_dynamic_rendering]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAttachmentSampleCountInfoAMD.html" /></remarks>
    public unsafe struct VkAttachmentSampleCountInfoAMD
    {
        public VkStructureType sType = VkStructureType.StructureTypeAttachmentSampleCountInfoAmd;
        public void* pNext;
        public uint colorAttachmentCount;
        public VkSampleCountFlagBits* pColorAttachmentSamples;
        public VkSampleCountFlagBits depthStencilAttachmentSamples;
        public VkAttachmentSampleCountInfoAMD() { }
        public VkAttachmentSampleCountInfoAMD(VkStructureType sType, void* pNext, uint colorAttachmentCount, VkSampleCountFlagBits* pColorAttachmentSamples, VkSampleCountFlagBits depthStencilAttachmentSamples)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.colorAttachmentCount = colorAttachmentCount;
            this.pColorAttachmentSamples = pColorAttachmentSamples;
            this.depthStencilAttachmentSamples = depthStencilAttachmentSamples;
        }
    }
    /// <summary><b>[requires: VK_KHR_dynamic_rendering]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAttachmentSampleCountInfoNV.html" /></remarks>
    public unsafe struct VkAttachmentSampleCountInfoNV
    {
        public VkAttachmentSampleCountInfoNV() { }
    }
    /// <summary><b>[requires: VK_KHR_dynamic_rendering]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMultiviewPerViewAttributesInfoNVX.html" /></remarks>
    public unsafe struct VkMultiviewPerViewAttributesInfoNVX
    {
        public VkStructureType sType = VkStructureType.StructureTypeMultiviewPerViewAttributesInfoNvx;
        public void* pNext;
        public int perViewAttributes;
        public int perViewAttributesPositionXOnly;
        public VkMultiviewPerViewAttributesInfoNVX() { }
        public VkMultiviewPerViewAttributesInfoNVX(VkStructureType sType, void* pNext, int perViewAttributes, int perViewAttributesPositionXOnly)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.perViewAttributes = perViewAttributes;
            this.perViewAttributesPositionXOnly = perViewAttributesPositionXOnly;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_view_min_lod]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageViewMinLodFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageViewMinLodFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImageViewMinLodFeaturesExt;
        public void* pNext;
        public int minLod;
        public VkPhysicalDeviceImageViewMinLodFeaturesEXT() { }
        public VkPhysicalDeviceImageViewMinLodFeaturesEXT(VkStructureType sType, void* pNext, int minLod)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.minLod = minLod;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_view_min_lod]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageViewMinLodCreateInfoEXT.html" /></remarks>
    public unsafe struct VkImageViewMinLodCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageViewMinLodCreateInfoExt;
        public void* pNext;
        public float minLod;
        public VkImageViewMinLodCreateInfoEXT() { }
        public VkImageViewMinLodCreateInfoEXT(VkStructureType sType, void* pNext, float minLod)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.minLod = minLod;
        }
    }
    /// <summary><b>[requires: VK_EXT_rasterization_order_attachment_access]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRasterizationOrderAttachmentAccessFeaturesExt;
        public void* pNext;
        public int rasterizationOrderColorAttachmentAccess;
        public int rasterizationOrderDepthAttachmentAccess;
        public int rasterizationOrderStencilAttachmentAccess;
        public VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT() { }
        public VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(VkStructureType sType, void* pNext, int rasterizationOrderColorAttachmentAccess, int rasterizationOrderDepthAttachmentAccess, int rasterizationOrderStencilAttachmentAccess)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.rasterizationOrderColorAttachmentAccess = rasterizationOrderColorAttachmentAccess;
            this.rasterizationOrderDepthAttachmentAccess = rasterizationOrderDepthAttachmentAccess;
            this.rasterizationOrderStencilAttachmentAccess = rasterizationOrderStencilAttachmentAccess;
        }
    }
    /// <summary><b>[requires: VK_ARM_rasterization_order_attachment_access]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM
    {
        public VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM() { }
    }
    /// <summary><b>[requires: VK_NV_linear_color_attachment]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLinearColorAttachmentFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceLinearColorAttachmentFeaturesNv;
        public void* pNext;
        public int linearColorAttachment;
        public VkPhysicalDeviceLinearColorAttachmentFeaturesNV() { }
        public VkPhysicalDeviceLinearColorAttachmentFeaturesNV(VkStructureType sType, void* pNext, int linearColorAttachment)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.linearColorAttachment = linearColorAttachment;
        }
    }
    /// <summary><b>[requires: VK_EXT_graphics_pipeline_library]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceGraphicsPipelineLibraryFeaturesExt;
        public void* pNext;
        public int graphicsPipelineLibrary;
        public VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT() { }
        public VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(VkStructureType sType, void* pNext, int graphicsPipelineLibrary)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.graphicsPipelineLibrary = graphicsPipelineLibrary;
        }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_binary]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineBinaryFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDevicePipelineBinaryFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePipelineBinaryFeaturesKhr;
        public void* pNext;
        public int pipelineBinaries;
        public VkPhysicalDevicePipelineBinaryFeaturesKHR() { }
        public VkPhysicalDevicePipelineBinaryFeaturesKHR(VkStructureType sType, void* pNext, int pipelineBinaries)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipelineBinaries = pipelineBinaries;
        }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_binary]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDevicePipelineBinaryInternalCacheControlKHR.html" /></remarks>
    public unsafe struct VkDevicePipelineBinaryInternalCacheControlKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeDevicePipelineBinaryInternalCacheControlKhr;
        public void* pNext;
        public int disableInternalCache;
        public VkDevicePipelineBinaryInternalCacheControlKHR() { }
        public VkDevicePipelineBinaryInternalCacheControlKHR(VkStructureType sType, void* pNext, int disableInternalCache)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.disableInternalCache = disableInternalCache;
        }
    }
    /// <summary><b>[requires: VK_KHR_pipeline_binary]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineBinaryPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDevicePipelineBinaryPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePipelineBinaryPropertiesKhr;
        public void* pNext;
        public int pipelineBinaryInternalCache;
        public int pipelineBinaryInternalCacheControl;
        public int pipelineBinaryPrefersInternalCache;
        public int pipelineBinaryPrecompiledInternalCache;
        public int pipelineBinaryCompressedData;
        public VkPhysicalDevicePipelineBinaryPropertiesKHR() { }
        public VkPhysicalDevicePipelineBinaryPropertiesKHR(VkStructureType sType, void* pNext, int pipelineBinaryInternalCache, int pipelineBinaryInternalCacheControl, int pipelineBinaryPrefersInternalCache, int pipelineBinaryPrecompiledInternalCache, int pipelineBinaryCompressedData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipelineBinaryInternalCache = pipelineBinaryInternalCache;
            this.pipelineBinaryInternalCacheControl = pipelineBinaryInternalCacheControl;
            this.pipelineBinaryPrefersInternalCache = pipelineBinaryPrefersInternalCache;
            this.pipelineBinaryPrecompiledInternalCache = pipelineBinaryPrecompiledInternalCache;
            this.pipelineBinaryCompressedData = pipelineBinaryCompressedData;
        }
    }
    /// <summary><b>[requires: VK_EXT_graphics_pipeline_library]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceGraphicsPipelineLibraryPropertiesExt;
        public void* pNext;
        public int graphicsPipelineLibraryFastLinking;
        public int graphicsPipelineLibraryIndependentInterpolationDecoration;
        public VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT() { }
        public VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(VkStructureType sType, void* pNext, int graphicsPipelineLibraryFastLinking, int graphicsPipelineLibraryIndependentInterpolationDecoration)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.graphicsPipelineLibraryFastLinking = graphicsPipelineLibraryFastLinking;
            this.graphicsPipelineLibraryIndependentInterpolationDecoration = graphicsPipelineLibraryIndependentInterpolationDecoration;
        }
    }
    /// <summary><b>[requires: VK_EXT_graphics_pipeline_library]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkGraphicsPipelineLibraryCreateInfoEXT.html" /></remarks>
    public unsafe struct VkGraphicsPipelineLibraryCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeGraphicsPipelineLibraryCreateInfoExt;
        public void* pNext;
        public VkGraphicsPipelineLibraryFlagBitsEXT flags;
        public VkGraphicsPipelineLibraryCreateInfoEXT() { }
        public VkGraphicsPipelineLibraryCreateInfoEXT(VkStructureType sType, void* pNext, VkGraphicsPipelineLibraryFlagBitsEXT flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: VK_VALVE_descriptor_set_host_mapping]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDescriptorSetHostMappingFeaturesValve;
        public void* pNext;
        public int descriptorSetHostMapping;
        public VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE() { }
        public VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(VkStructureType sType, void* pNext, int descriptorSetHostMapping)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.descriptorSetHostMapping = descriptorSetHostMapping;
        }
    }
    /// <summary><b>[requires: VK_VALVE_descriptor_set_host_mapping]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetBindingReferenceVALVE.html" /></remarks>
    public unsafe struct VkDescriptorSetBindingReferenceVALVE
    {
        public VkStructureType sType = VkStructureType.StructureTypeDescriptorSetBindingReferenceValve;
        public void* pNext;
        public VkDescriptorSetLayout descriptorSetLayout;
        public uint binding;
        public VkDescriptorSetBindingReferenceVALVE() { }
        public VkDescriptorSetBindingReferenceVALVE(VkStructureType sType, void* pNext, VkDescriptorSetLayout descriptorSetLayout, uint binding)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.descriptorSetLayout = descriptorSetLayout;
            this.binding = binding;
        }
    }
    /// <summary><b>[requires: VK_VALVE_descriptor_set_host_mapping]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetLayoutHostMappingInfoVALVE.html" /></remarks>
    public unsafe struct VkDescriptorSetLayoutHostMappingInfoVALVE
    {
        public VkStructureType sType = VkStructureType.StructureTypeDescriptorSetLayoutHostMappingInfoValve;
        public void* pNext;
        public nuint descriptorOffset;
        public uint descriptorSize;
        public VkDescriptorSetLayoutHostMappingInfoVALVE() { }
        public VkDescriptorSetLayoutHostMappingInfoVALVE(VkStructureType sType, void* pNext, nuint descriptorOffset, uint descriptorSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.descriptorOffset = descriptorOffset;
            this.descriptorSize = descriptorSize;
        }
    }
    /// <summary><b>[requires: VK_EXT_nested_command_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceNestedCommandBufferFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceNestedCommandBufferFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceNestedCommandBufferFeaturesExt;
        public void* pNext;
        public int nestedCommandBuffer;
        public int nestedCommandBufferRendering;
        public int nestedCommandBufferSimultaneousUse;
        public VkPhysicalDeviceNestedCommandBufferFeaturesEXT() { }
        public VkPhysicalDeviceNestedCommandBufferFeaturesEXT(VkStructureType sType, void* pNext, int nestedCommandBuffer, int nestedCommandBufferRendering, int nestedCommandBufferSimultaneousUse)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.nestedCommandBuffer = nestedCommandBuffer;
            this.nestedCommandBufferRendering = nestedCommandBufferRendering;
            this.nestedCommandBufferSimultaneousUse = nestedCommandBufferSimultaneousUse;
        }
    }
    /// <summary><b>[requires: VK_EXT_nested_command_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceNestedCommandBufferPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceNestedCommandBufferPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceNestedCommandBufferPropertiesExt;
        public void* pNext;
        public uint maxCommandBufferNestingLevel;
        public VkPhysicalDeviceNestedCommandBufferPropertiesEXT() { }
        public VkPhysicalDeviceNestedCommandBufferPropertiesEXT(VkStructureType sType, void* pNext, uint maxCommandBufferNestingLevel)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxCommandBufferNestingLevel = maxCommandBufferNestingLevel;
        }
    }
    /// <summary><b>[requires: VK_EXT_shader_module_identifier]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderModuleIdentifierFeaturesExt;
        public void* pNext;
        public int shaderModuleIdentifier;
        public VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT() { }
        public VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(VkStructureType sType, void* pNext, int shaderModuleIdentifier)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderModuleIdentifier = shaderModuleIdentifier;
        }
    }
    /// <summary><b>[requires: VK_EXT_shader_module_identifier]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderModuleIdentifierPropertiesExt;
        public void* pNext;
        public fixed byte shaderModuleIdentifierAlgorithmUUID[16];
        public VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_shader_module_identifier]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineShaderStageModuleIdentifierCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineShaderStageModuleIdentifierCreateInfoExt;
        public void* pNext;
        public uint identifierSize;
        public byte* pIdentifier;
        public VkPipelineShaderStageModuleIdentifierCreateInfoEXT() { }
        public VkPipelineShaderStageModuleIdentifierCreateInfoEXT(VkStructureType sType, void* pNext, uint identifierSize, byte* pIdentifier)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.identifierSize = identifierSize;
            this.pIdentifier = pIdentifier;
        }
    }
    /// <summary><b>[requires: VK_EXT_shader_module_identifier]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkShaderModuleIdentifierEXT.html" /></remarks>
    public unsafe struct VkShaderModuleIdentifierEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeShaderModuleIdentifierExt;
        public void* pNext;
        public uint identifierSize;
        public fixed byte identifier[32];
        public VkShaderModuleIdentifierEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_image_compression_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageCompressionControlEXT.html" /></remarks>
    public unsafe struct VkImageCompressionControlEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageCompressionControlExt;
        public void* pNext;
        public VkImageCompressionFlagBitsEXT flags;
        public uint compressionControlPlaneCount;
        public VkImageCompressionFixedRateFlagBitsEXT* pFixedRateFlags;
        public VkImageCompressionControlEXT() { }
        public VkImageCompressionControlEXT(VkStructureType sType, void* pNext, VkImageCompressionFlagBitsEXT flags, uint compressionControlPlaneCount, VkImageCompressionFixedRateFlagBitsEXT* pFixedRateFlags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.compressionControlPlaneCount = compressionControlPlaneCount;
            this.pFixedRateFlags = pFixedRateFlags;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_compression_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageCompressionControlFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageCompressionControlFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImageCompressionControlFeaturesExt;
        public void* pNext;
        public int imageCompressionControl;
        public VkPhysicalDeviceImageCompressionControlFeaturesEXT() { }
        public VkPhysicalDeviceImageCompressionControlFeaturesEXT(VkStructureType sType, void* pNext, int imageCompressionControl)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageCompressionControl = imageCompressionControl;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_compression_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageCompressionPropertiesEXT.html" /></remarks>
    public unsafe struct VkImageCompressionPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageCompressionPropertiesExt;
        public void* pNext;
        public VkImageCompressionFlagBitsEXT imageCompressionFlags;
        public VkImageCompressionFixedRateFlagBitsEXT imageCompressionFixedRateFlags;
        public VkImageCompressionPropertiesEXT() { }
        public VkImageCompressionPropertiesEXT(VkStructureType sType, void* pNext, VkImageCompressionFlagBitsEXT imageCompressionFlags, VkImageCompressionFixedRateFlagBitsEXT imageCompressionFixedRateFlags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageCompressionFlags = imageCompressionFlags;
            this.imageCompressionFixedRateFlags = imageCompressionFixedRateFlags;
        }
    }
    /// <summary><b>[requires: VK_EXT_image_compression_control_swapchain]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImageCompressionControlSwapchainFeaturesExt;
        public void* pNext;
        public int imageCompressionControlSwapchain;
        public VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT() { }
        public VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(VkStructureType sType, void* pNext, int imageCompressionControlSwapchain)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageCompressionControlSwapchain = imageCompressionControlSwapchain;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance5]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageSubresource2KHR.html" /></remarks>
    public unsafe struct VkImageSubresource2KHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageSubresource2Khr;
        public void* pNext;
        public VkImageSubresource imageSubresource;
        public VkImageSubresource2KHR() { }
        public VkImageSubresource2KHR(VkStructureType sType, void* pNext, VkImageSubresource imageSubresource)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageSubresource = imageSubresource;
        }
    }
    /// <summary><b>[requires: VK_EXT_host_image_copy | VK_EXT_image_compression_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageSubresource2EXT.html" /></remarks>
    public unsafe struct VkImageSubresource2EXT
    {
        public VkImageSubresource2EXT() { }
    }
    /// <summary><b>[requires: VK_KHR_maintenance5]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubresourceLayout2KHR.html" /></remarks>
    public unsafe struct VkSubresourceLayout2KHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeSubresourceLayout2Khr;
        public void* pNext;
        public VkSubresourceLayout subresourceLayout;
        public VkSubresourceLayout2KHR() { }
        public VkSubresourceLayout2KHR(VkStructureType sType, void* pNext, VkSubresourceLayout subresourceLayout)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.subresourceLayout = subresourceLayout;
        }
    }
    /// <summary><b>[requires: VK_EXT_host_image_copy | VK_EXT_image_compression_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubresourceLayout2EXT.html" /></remarks>
    public unsafe struct VkSubresourceLayout2EXT
    {
        public VkSubresourceLayout2EXT() { }
    }
    /// <summary><b>[requires: VK_EXT_subpass_merge_feedback]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassCreationControlEXT.html" /></remarks>
    public unsafe struct VkRenderPassCreationControlEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderPassCreationControlExt;
        public void* pNext;
        public int disallowMerging;
        public VkRenderPassCreationControlEXT() { }
        public VkRenderPassCreationControlEXT(VkStructureType sType, void* pNext, int disallowMerging)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.disallowMerging = disallowMerging;
        }
    }
    /// <summary><b>[requires: VK_EXT_subpass_merge_feedback]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassCreationFeedbackInfoEXT.html" /></remarks>
    public unsafe struct VkRenderPassCreationFeedbackInfoEXT
    {
        public uint postMergeSubpassCount;
        public VkRenderPassCreationFeedbackInfoEXT() { }
        public VkRenderPassCreationFeedbackInfoEXT(uint postMergeSubpassCount)
        {
            this.postMergeSubpassCount = postMergeSubpassCount;
        }
    }
    /// <summary><b>[requires: VK_EXT_subpass_merge_feedback]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassCreationFeedbackCreateInfoEXT.html" /></remarks>
    public unsafe struct VkRenderPassCreationFeedbackCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderPassCreationFeedbackCreateInfoExt;
        public void* pNext;
        public VkRenderPassCreationFeedbackInfoEXT* pRenderPassFeedback;
        public VkRenderPassCreationFeedbackCreateInfoEXT() { }
        public VkRenderPassCreationFeedbackCreateInfoEXT(VkStructureType sType, void* pNext, VkRenderPassCreationFeedbackInfoEXT* pRenderPassFeedback)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pRenderPassFeedback = pRenderPassFeedback;
        }
    }
    /// <summary><b>[requires: VK_EXT_subpass_merge_feedback]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassSubpassFeedbackInfoEXT.html" /></remarks>
    public unsafe struct VkRenderPassSubpassFeedbackInfoEXT
    {
        public VkSubpassMergeStatusEXT subpassMergeStatus;
        public fixed byte description[256];
        public uint postMergeIndex;
        public VkRenderPassSubpassFeedbackInfoEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_subpass_merge_feedback]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassSubpassFeedbackCreateInfoEXT.html" /></remarks>
    public unsafe struct VkRenderPassSubpassFeedbackCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderPassSubpassFeedbackCreateInfoExt;
        public void* pNext;
        public VkRenderPassSubpassFeedbackInfoEXT* pSubpassFeedback;
        public VkRenderPassSubpassFeedbackCreateInfoEXT() { }
        public VkRenderPassSubpassFeedbackCreateInfoEXT(VkStructureType sType, void* pNext, VkRenderPassSubpassFeedbackInfoEXT* pSubpassFeedback)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pSubpassFeedback = pSubpassFeedback;
        }
    }
    /// <summary><b>[requires: VK_EXT_subpass_merge_feedback]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSubpassMergeFeedbackFeaturesExt;
        public void* pNext;
        public int subpassMergeFeedback;
        public VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT() { }
        public VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(VkStructureType sType, void* pNext, int subpassMergeFeedback)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.subpassMergeFeedback = subpassMergeFeedback;
        }
    }
    /// <summary><b>[requires: VK_EXT_opacity_micromap]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMicromapBuildInfoEXT.html" /></remarks>
    public unsafe struct VkMicromapBuildInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeMicromapBuildInfoExt;
        public void* pNext;
        public VkMicromapTypeEXT type;
        public VkBuildMicromapFlagBitsEXT flags;
        public VkBuildMicromapModeEXT mode;
        public VkMicromapEXT dstMicromap;
        public uint usageCountsCount;
        public VkMicromapUsageEXT* pUsageCounts;
        public VkMicromapUsageEXT** ppUsageCounts;
        public VkDeviceOrHostAddressConstKHR data;
        public VkDeviceOrHostAddressKHR scratchData;
        public VkDeviceOrHostAddressConstKHR triangleArray;
        public ulong triangleArrayStride;
        public VkMicromapBuildInfoEXT() { }
        public VkMicromapBuildInfoEXT(VkStructureType sType, void* pNext, VkMicromapTypeEXT type, VkBuildMicromapFlagBitsEXT flags, VkBuildMicromapModeEXT mode, VkMicromapEXT dstMicromap, uint usageCountsCount, VkMicromapUsageEXT* pUsageCounts, VkMicromapUsageEXT** ppUsageCounts, VkDeviceOrHostAddressConstKHR data, VkDeviceOrHostAddressKHR scratchData, VkDeviceOrHostAddressConstKHR triangleArray, ulong triangleArrayStride)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.type = type;
            this.flags = flags;
            this.mode = mode;
            this.dstMicromap = dstMicromap;
            this.usageCountsCount = usageCountsCount;
            this.pUsageCounts = pUsageCounts;
            this.ppUsageCounts = ppUsageCounts;
            this.data = data;
            this.scratchData = scratchData;
            this.triangleArray = triangleArray;
            this.triangleArrayStride = triangleArrayStride;
        }
    }
    /// <summary><b>[requires: VK_EXT_opacity_micromap]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMicromapCreateInfoEXT.html" /></remarks>
    public unsafe struct VkMicromapCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeMicromapCreateInfoExt;
        public void* pNext;
        public VkMicromapCreateFlagBitsEXT createFlags;
        public VkBuffer buffer;
        public ulong offset;
        public ulong size;
        public VkMicromapTypeEXT type;
        public ulong deviceAddress;
        public VkMicromapCreateInfoEXT() { }
        public VkMicromapCreateInfoEXT(VkStructureType sType, void* pNext, VkMicromapCreateFlagBitsEXT createFlags, VkBuffer buffer, ulong offset, ulong size, VkMicromapTypeEXT type, ulong deviceAddress)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.createFlags = createFlags;
            this.buffer = buffer;
            this.offset = offset;
            this.size = size;
            this.type = type;
            this.deviceAddress = deviceAddress;
        }
    }
    /// <summary><b>[requires: VK_EXT_opacity_micromap]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMicromapVersionInfoEXT.html" /></remarks>
    public unsafe struct VkMicromapVersionInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeMicromapVersionInfoExt;
        public void* pNext;
        public byte* pVersionData;
        public VkMicromapVersionInfoEXT() { }
        public VkMicromapVersionInfoEXT(VkStructureType sType, void* pNext, byte* pVersionData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pVersionData = pVersionData;
        }
    }
    /// <summary><b>[requires: VK_EXT_opacity_micromap]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyMicromapInfoEXT.html" /></remarks>
    public unsafe struct VkCopyMicromapInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeCopyMicromapInfoExt;
        public void* pNext;
        public VkMicromapEXT src;
        public VkMicromapEXT dst;
        public VkCopyMicromapModeEXT mode;
        public VkCopyMicromapInfoEXT() { }
        public VkCopyMicromapInfoEXT(VkStructureType sType, void* pNext, VkMicromapEXT src, VkMicromapEXT dst, VkCopyMicromapModeEXT mode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.src = src;
            this.dst = dst;
            this.mode = mode;
        }
    }
    /// <summary><b>[requires: VK_EXT_opacity_micromap]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyMicromapToMemoryInfoEXT.html" /></remarks>
    public unsafe struct VkCopyMicromapToMemoryInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeCopyMicromapToMemoryInfoExt;
        public void* pNext;
        public VkMicromapEXT src;
        public VkDeviceOrHostAddressKHR dst;
        public VkCopyMicromapModeEXT mode;
        public VkCopyMicromapToMemoryInfoEXT() { }
        public VkCopyMicromapToMemoryInfoEXT(VkStructureType sType, void* pNext, VkMicromapEXT src, VkDeviceOrHostAddressKHR dst, VkCopyMicromapModeEXT mode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.src = src;
            this.dst = dst;
            this.mode = mode;
        }
    }
    /// <summary><b>[requires: VK_EXT_opacity_micromap]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCopyMemoryToMicromapInfoEXT.html" /></remarks>
    public unsafe struct VkCopyMemoryToMicromapInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeCopyMemoryToMicromapInfoExt;
        public void* pNext;
        public VkDeviceOrHostAddressConstKHR src;
        public VkMicromapEXT dst;
        public VkCopyMicromapModeEXT mode;
        public VkCopyMemoryToMicromapInfoEXT() { }
        public VkCopyMemoryToMicromapInfoEXT(VkStructureType sType, void* pNext, VkDeviceOrHostAddressConstKHR src, VkMicromapEXT dst, VkCopyMicromapModeEXT mode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.src = src;
            this.dst = dst;
            this.mode = mode;
        }
    }
    /// <summary><b>[requires: VK_EXT_opacity_micromap]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMicromapBuildSizesInfoEXT.html" /></remarks>
    public unsafe struct VkMicromapBuildSizesInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeMicromapBuildSizesInfoExt;
        public void* pNext;
        public ulong micromapSize;
        public ulong buildScratchSize;
        public int discardable;
        public VkMicromapBuildSizesInfoEXT() { }
        public VkMicromapBuildSizesInfoEXT(VkStructureType sType, void* pNext, ulong micromapSize, ulong buildScratchSize, int discardable)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.micromapSize = micromapSize;
            this.buildScratchSize = buildScratchSize;
            this.discardable = discardable;
        }
    }
    /// <summary><b>[requires: VK_EXT_opacity_micromap]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMicromapUsageEXT.html" /></remarks>
    public unsafe struct VkMicromapUsageEXT
    {
        public uint count;
        public uint subdivisionLevel;
        public uint format;
        public VkMicromapUsageEXT() { }
        public VkMicromapUsageEXT(uint count, uint subdivisionLevel, uint format)
        {
            this.count = count;
            this.subdivisionLevel = subdivisionLevel;
            this.format = format;
        }
    }
    /// <summary><b>[requires: VK_EXT_opacity_micromap]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMicromapTriangleEXT.html" /></remarks>
    public unsafe struct VkMicromapTriangleEXT
    {
        public uint dataOffset;
        public ushort subdivisionLevel;
        public ushort format;
        public VkMicromapTriangleEXT() { }
        public VkMicromapTriangleEXT(uint dataOffset, ushort subdivisionLevel, ushort format)
        {
            this.dataOffset = dataOffset;
            this.subdivisionLevel = subdivisionLevel;
            this.format = format;
        }
    }
    /// <summary><b>[requires: VK_EXT_opacity_micromap]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpacityMicromapFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceOpacityMicromapFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceOpacityMicromapFeaturesExt;
        public void* pNext;
        public int micromap;
        public int micromapCaptureReplay;
        public int micromapHostCommands;
        public VkPhysicalDeviceOpacityMicromapFeaturesEXT() { }
        public VkPhysicalDeviceOpacityMicromapFeaturesEXT(VkStructureType sType, void* pNext, int micromap, int micromapCaptureReplay, int micromapHostCommands)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.micromap = micromap;
            this.micromapCaptureReplay = micromapCaptureReplay;
            this.micromapHostCommands = micromapHostCommands;
        }
    }
    /// <summary><b>[requires: VK_EXT_opacity_micromap]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpacityMicromapPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceOpacityMicromapPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceOpacityMicromapPropertiesExt;
        public void* pNext;
        public uint maxOpacity2StateSubdivisionLevel;
        public uint maxOpacity4StateSubdivisionLevel;
        public VkPhysicalDeviceOpacityMicromapPropertiesEXT() { }
        public VkPhysicalDeviceOpacityMicromapPropertiesEXT(VkStructureType sType, void* pNext, uint maxOpacity2StateSubdivisionLevel, uint maxOpacity4StateSubdivisionLevel)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxOpacity2StateSubdivisionLevel = maxOpacity2StateSubdivisionLevel;
            this.maxOpacity4StateSubdivisionLevel = maxOpacity4StateSubdivisionLevel;
        }
    }
    /// <summary><b>[requires: VK_EXT_opacity_micromap]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureTrianglesOpacityMicromapEXT.html" /></remarks>
    public unsafe struct VkAccelerationStructureTrianglesOpacityMicromapEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureTrianglesOpacityMicromapExt;
        public void* pNext;
        public VkIndexType indexType;
        public VkDeviceOrHostAddressConstKHR indexBuffer;
        public ulong indexStride;
        public uint baseTriangle;
        public uint usageCountsCount;
        public VkMicromapUsageEXT* pUsageCounts;
        public VkMicromapUsageEXT** ppUsageCounts;
        public VkMicromapEXT micromap;
        public VkAccelerationStructureTrianglesOpacityMicromapEXT() { }
        public VkAccelerationStructureTrianglesOpacityMicromapEXT(VkStructureType sType, void* pNext, VkIndexType indexType, VkDeviceOrHostAddressConstKHR indexBuffer, ulong indexStride, uint baseTriangle, uint usageCountsCount, VkMicromapUsageEXT* pUsageCounts, VkMicromapUsageEXT** ppUsageCounts, VkMicromapEXT micromap)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.indexType = indexType;
            this.indexBuffer = indexBuffer;
            this.indexStride = indexStride;
            this.baseTriangle = baseTriangle;
            this.usageCountsCount = usageCountsCount;
            this.pUsageCounts = pUsageCounts;
            this.ppUsageCounts = ppUsageCounts;
            this.micromap = micromap;
        }
    }
    /// <summary><b>[requires: VK_NV_displacement_micromap]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDisplacementMicromapFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDisplacementMicromapFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDisplacementMicromapFeaturesNv;
        public void* pNext;
        public int displacementMicromap;
        public VkPhysicalDeviceDisplacementMicromapFeaturesNV() { }
        public VkPhysicalDeviceDisplacementMicromapFeaturesNV(VkStructureType sType, void* pNext, int displacementMicromap)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.displacementMicromap = displacementMicromap;
        }
    }
    /// <summary><b>[requires: VK_NV_displacement_micromap]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDisplacementMicromapPropertiesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDisplacementMicromapPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDisplacementMicromapPropertiesNv;
        public void* pNext;
        public uint maxDisplacementMicromapSubdivisionLevel;
        public VkPhysicalDeviceDisplacementMicromapPropertiesNV() { }
        public VkPhysicalDeviceDisplacementMicromapPropertiesNV(VkStructureType sType, void* pNext, uint maxDisplacementMicromapSubdivisionLevel)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxDisplacementMicromapSubdivisionLevel = maxDisplacementMicromapSubdivisionLevel;
        }
    }
    /// <summary><b>[requires: VK_NV_displacement_micromap]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccelerationStructureTrianglesDisplacementMicromapNV.html" /></remarks>
    public unsafe struct VkAccelerationStructureTrianglesDisplacementMicromapNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeAccelerationStructureTrianglesDisplacementMicromapNv;
        public void* pNext;
        public VkFormat displacementBiasAndScaleFormat;
        public VkFormat displacementVectorFormat;
        public VkDeviceOrHostAddressConstKHR displacementBiasAndScaleBuffer;
        public ulong displacementBiasAndScaleStride;
        public VkDeviceOrHostAddressConstKHR displacementVectorBuffer;
        public ulong displacementVectorStride;
        public VkDeviceOrHostAddressConstKHR displacedMicromapPrimitiveFlags;
        public ulong displacedMicromapPrimitiveFlagsStride;
        public VkIndexType indexType;
        public VkDeviceOrHostAddressConstKHR indexBuffer;
        public ulong indexStride;
        public uint baseTriangle;
        public uint usageCountsCount;
        public VkMicromapUsageEXT* pUsageCounts;
        public VkMicromapUsageEXT** ppUsageCounts;
        public VkMicromapEXT micromap;
        public VkAccelerationStructureTrianglesDisplacementMicromapNV() { }
        public VkAccelerationStructureTrianglesDisplacementMicromapNV(VkStructureType sType, void* pNext, VkFormat displacementBiasAndScaleFormat, VkFormat displacementVectorFormat, VkDeviceOrHostAddressConstKHR displacementBiasAndScaleBuffer, ulong displacementBiasAndScaleStride, VkDeviceOrHostAddressConstKHR displacementVectorBuffer, ulong displacementVectorStride, VkDeviceOrHostAddressConstKHR displacedMicromapPrimitiveFlags, ulong displacedMicromapPrimitiveFlagsStride, VkIndexType indexType, VkDeviceOrHostAddressConstKHR indexBuffer, ulong indexStride, uint baseTriangle, uint usageCountsCount, VkMicromapUsageEXT* pUsageCounts, VkMicromapUsageEXT** ppUsageCounts, VkMicromapEXT micromap)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.displacementBiasAndScaleFormat = displacementBiasAndScaleFormat;
            this.displacementVectorFormat = displacementVectorFormat;
            this.displacementBiasAndScaleBuffer = displacementBiasAndScaleBuffer;
            this.displacementBiasAndScaleStride = displacementBiasAndScaleStride;
            this.displacementVectorBuffer = displacementVectorBuffer;
            this.displacementVectorStride = displacementVectorStride;
            this.displacedMicromapPrimitiveFlags = displacedMicromapPrimitiveFlags;
            this.displacedMicromapPrimitiveFlagsStride = displacedMicromapPrimitiveFlagsStride;
            this.indexType = indexType;
            this.indexBuffer = indexBuffer;
            this.indexStride = indexStride;
            this.baseTriangle = baseTriangle;
            this.usageCountsCount = usageCountsCount;
            this.pUsageCounts = pUsageCounts;
            this.ppUsageCounts = ppUsageCounts;
            this.micromap = micromap;
        }
    }
    /// <summary><b>[requires: VK_EXT_pipeline_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelinePropertiesIdentifierEXT.html" /></remarks>
    public unsafe struct VkPipelinePropertiesIdentifierEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelinePropertiesIdentifierExt;
        public void* pNext;
        public fixed byte pipelineIdentifier[16];
        public VkPipelinePropertiesIdentifierEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_pipeline_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelinePropertiesFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDevicePipelinePropertiesFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePipelinePropertiesFeaturesExt;
        public void* pNext;
        public int pipelinePropertiesIdentifier;
        public VkPhysicalDevicePipelinePropertiesFeaturesEXT() { }
        public VkPhysicalDevicePipelinePropertiesFeaturesEXT(VkStructureType sType, void* pNext, int pipelinePropertiesIdentifier)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipelinePropertiesIdentifier = pipelinePropertiesIdentifier;
        }
    }
    /// <summary><b>[requires: VK_AMD_shader_early_and_late_fragment_tests]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAmd;
        public void* pNext;
        public int shaderEarlyAndLateFragmentTests;
        public VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD() { }
        public VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(VkStructureType sType, void* pNext, int shaderEarlyAndLateFragmentTests)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderEarlyAndLateFragmentTests = shaderEarlyAndLateFragmentTests;
        }
    }
    /// <summary><b>[requires: VK_EXT_external_memory_acquire_unmodified]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalMemoryAcquireUnmodifiedEXT.html" /></remarks>
    public unsafe struct VkExternalMemoryAcquireUnmodifiedEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeExternalMemoryAcquireUnmodifiedExt;
        public void* pNext;
        public int acquireUnmodifiedMemory;
        public VkExternalMemoryAcquireUnmodifiedEXT() { }
        public VkExternalMemoryAcquireUnmodifiedEXT(VkStructureType sType, void* pNext, int acquireUnmodifiedMemory)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.acquireUnmodifiedMemory = acquireUnmodifiedMemory;
        }
    }
    /// <summary><b>[requires: VK_EXT_metal_objects]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportMetalObjectCreateInfoEXT.html" /></remarks>
    public unsafe struct VkExportMetalObjectCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportMetalObjectCreateInfoExt;
        public void* pNext;
        public VkExportMetalObjectTypeFlagBitsEXT exportObjectType;
        public VkExportMetalObjectCreateInfoEXT() { }
        public VkExportMetalObjectCreateInfoEXT(VkStructureType sType, void* pNext, VkExportMetalObjectTypeFlagBitsEXT exportObjectType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.exportObjectType = exportObjectType;
        }
    }
    /// <summary><b>[requires: VK_EXT_metal_objects]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportMetalObjectsInfoEXT.html" /></remarks>
    public unsafe struct VkExportMetalObjectsInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportMetalObjectsInfoExt;
        public void* pNext;
        public VkExportMetalObjectsInfoEXT() { }
        public VkExportMetalObjectsInfoEXT(VkStructureType sType, void* pNext)
        {
            this.sType = sType;
            this.pNext = pNext;
        }
    }
    /// <summary><b>[requires: VK_EXT_metal_objects]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportMetalDeviceInfoEXT.html" /></remarks>
    public unsafe struct VkExportMetalDeviceInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportMetalDeviceInfoExt;
        public void* pNext;
        public IntPtr mtlDevice;
        public VkExportMetalDeviceInfoEXT() { }
        public VkExportMetalDeviceInfoEXT(VkStructureType sType, void* pNext, IntPtr mtlDevice)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.mtlDevice = mtlDevice;
        }
    }
    /// <summary><b>[requires: VK_EXT_metal_objects]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportMetalCommandQueueInfoEXT.html" /></remarks>
    public unsafe struct VkExportMetalCommandQueueInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportMetalCommandQueueInfoExt;
        public void* pNext;
        public VkQueue queue;
        public IntPtr mtlCommandQueue;
        public VkExportMetalCommandQueueInfoEXT() { }
        public VkExportMetalCommandQueueInfoEXT(VkStructureType sType, void* pNext, VkQueue queue, IntPtr mtlCommandQueue)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.queue = queue;
            this.mtlCommandQueue = mtlCommandQueue;
        }
    }
    /// <summary><b>[requires: VK_EXT_metal_objects]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportMetalBufferInfoEXT.html" /></remarks>
    public unsafe struct VkExportMetalBufferInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportMetalBufferInfoExt;
        public void* pNext;
        public VkDeviceMemory memory;
        public IntPtr mtlBuffer;
        public VkExportMetalBufferInfoEXT() { }
        public VkExportMetalBufferInfoEXT(VkStructureType sType, void* pNext, VkDeviceMemory memory, IntPtr mtlBuffer)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memory = memory;
            this.mtlBuffer = mtlBuffer;
        }
    }
    /// <summary><b>[requires: VK_EXT_metal_objects]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportMetalBufferInfoEXT.html" /></remarks>
    public unsafe struct VkImportMetalBufferInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportMetalBufferInfoExt;
        public void* pNext;
        public IntPtr mtlBuffer;
        public VkImportMetalBufferInfoEXT() { }
        public VkImportMetalBufferInfoEXT(VkStructureType sType, void* pNext, IntPtr mtlBuffer)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.mtlBuffer = mtlBuffer;
        }
    }
    /// <summary><b>[requires: VK_EXT_metal_objects]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportMetalTextureInfoEXT.html" /></remarks>
    public unsafe struct VkExportMetalTextureInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportMetalTextureInfoExt;
        public void* pNext;
        public VkImage image;
        public VkImageView imageView;
        public VkBufferView bufferView;
        public VkImageAspectFlagBits plane;
        public IntPtr mtlTexture;
        public VkExportMetalTextureInfoEXT() { }
        public VkExportMetalTextureInfoEXT(VkStructureType sType, void* pNext, VkImage image, VkImageView imageView, VkBufferView bufferView, VkImageAspectFlagBits plane, IntPtr mtlTexture)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.image = image;
            this.imageView = imageView;
            this.bufferView = bufferView;
            this.plane = plane;
            this.mtlTexture = mtlTexture;
        }
    }
    /// <summary><b>[requires: VK_EXT_metal_objects]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportMetalTextureInfoEXT.html" /></remarks>
    public unsafe struct VkImportMetalTextureInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportMetalTextureInfoExt;
        public void* pNext;
        public VkImageAspectFlagBits plane;
        public IntPtr mtlTexture;
        public VkImportMetalTextureInfoEXT() { }
        public VkImportMetalTextureInfoEXT(VkStructureType sType, void* pNext, VkImageAspectFlagBits plane, IntPtr mtlTexture)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.plane = plane;
            this.mtlTexture = mtlTexture;
        }
    }
    /// <summary><b>[requires: VK_EXT_metal_objects]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportMetalIOSurfaceInfoEXT.html" /></remarks>
    public unsafe struct VkExportMetalIOSurfaceInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportMetalIoSurfaceInfoExt;
        public void* pNext;
        public VkImage image;
        public IntPtr ioSurface;
        public VkExportMetalIOSurfaceInfoEXT() { }
        public VkExportMetalIOSurfaceInfoEXT(VkStructureType sType, void* pNext, VkImage image, IntPtr ioSurface)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.image = image;
            this.ioSurface = ioSurface;
        }
    }
    /// <summary><b>[requires: VK_EXT_metal_objects]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportMetalIOSurfaceInfoEXT.html" /></remarks>
    public unsafe struct VkImportMetalIOSurfaceInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportMetalIoSurfaceInfoExt;
        public void* pNext;
        public IntPtr ioSurface;
        public VkImportMetalIOSurfaceInfoEXT() { }
        public VkImportMetalIOSurfaceInfoEXT(VkStructureType sType, void* pNext, IntPtr ioSurface)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.ioSurface = ioSurface;
        }
    }
    /// <summary><b>[requires: VK_EXT_metal_objects]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExportMetalSharedEventInfoEXT.html" /></remarks>
    public unsafe struct VkExportMetalSharedEventInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeExportMetalSharedEventInfoExt;
        public void* pNext;
        public VkSemaphore semaphore;
        public VkEvent @event;
        public IntPtr mtlSharedEvent;
        public VkExportMetalSharedEventInfoEXT() { }
        public VkExportMetalSharedEventInfoEXT(VkStructureType sType, void* pNext, VkSemaphore semaphore, VkEvent @event, IntPtr mtlSharedEvent)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.semaphore = semaphore;
            this.@event = @event;
            this.mtlSharedEvent = mtlSharedEvent;
        }
    }
    /// <summary><b>[requires: VK_EXT_metal_objects]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportMetalSharedEventInfoEXT.html" /></remarks>
    public unsafe struct VkImportMetalSharedEventInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportMetalSharedEventInfoExt;
        public void* pNext;
        public IntPtr mtlSharedEvent;
        public VkImportMetalSharedEventInfoEXT() { }
        public VkImportMetalSharedEventInfoEXT(VkStructureType sType, void* pNext, IntPtr mtlSharedEvent)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.mtlSharedEvent = mtlSharedEvent;
        }
    }
    /// <summary><b>[requires: VK_EXT_non_seamless_cube_map]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceNonSeamlessCubeMapFeaturesExt;
        public void* pNext;
        public int nonSeamlessCubeMap;
        public VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT() { }
        public VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(VkStructureType sType, void* pNext, int nonSeamlessCubeMap)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.nonSeamlessCubeMap = nonSeamlessCubeMap;
        }
    }
    /// <summary><b>[requires: VK_EXT_pipeline_robustness]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineRobustnessFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDevicePipelineRobustnessFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePipelineRobustnessFeaturesExt;
        public void* pNext;
        public int pipelineRobustness;
        public VkPhysicalDevicePipelineRobustnessFeaturesEXT() { }
        public VkPhysicalDevicePipelineRobustnessFeaturesEXT(VkStructureType sType, void* pNext, int pipelineRobustness)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipelineRobustness = pipelineRobustness;
        }
    }
    /// <summary><b>[requires: VK_EXT_pipeline_robustness]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineRobustnessCreateInfoEXT.html" /></remarks>
    public unsafe struct VkPipelineRobustnessCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineRobustnessCreateInfoExt;
        public void* pNext;
        public VkPipelineRobustnessBufferBehaviorEXT storageBuffers;
        public VkPipelineRobustnessBufferBehaviorEXT uniformBuffers;
        public VkPipelineRobustnessBufferBehaviorEXT vertexInputs;
        public VkPipelineRobustnessImageBehaviorEXT images;
        public VkPipelineRobustnessCreateInfoEXT() { }
        public VkPipelineRobustnessCreateInfoEXT(VkStructureType sType, void* pNext, VkPipelineRobustnessBufferBehaviorEXT storageBuffers, VkPipelineRobustnessBufferBehaviorEXT uniformBuffers, VkPipelineRobustnessBufferBehaviorEXT vertexInputs, VkPipelineRobustnessImageBehaviorEXT images)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.storageBuffers = storageBuffers;
            this.uniformBuffers = uniformBuffers;
            this.vertexInputs = vertexInputs;
            this.images = images;
        }
    }
    /// <summary><b>[requires: VK_EXT_pipeline_robustness]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineRobustnessPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDevicePipelineRobustnessPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePipelineRobustnessPropertiesExt;
        public void* pNext;
        public VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessStorageBuffers;
        public VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessUniformBuffers;
        public VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessVertexInputs;
        public VkPipelineRobustnessImageBehaviorEXT defaultRobustnessImages;
        public VkPhysicalDevicePipelineRobustnessPropertiesEXT() { }
        public VkPhysicalDevicePipelineRobustnessPropertiesEXT(VkStructureType sType, void* pNext, VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessStorageBuffers, VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessUniformBuffers, VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessVertexInputs, VkPipelineRobustnessImageBehaviorEXT defaultRobustnessImages)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.defaultRobustnessStorageBuffers = defaultRobustnessStorageBuffers;
            this.defaultRobustnessUniformBuffers = defaultRobustnessUniformBuffers;
            this.defaultRobustnessVertexInputs = defaultRobustnessVertexInputs;
            this.defaultRobustnessImages = defaultRobustnessImages;
        }
    }
    /// <summary><b>[requires: VK_QCOM_image_processing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageViewSampleWeightCreateInfoQCOM.html" /></remarks>
    public unsafe struct VkImageViewSampleWeightCreateInfoQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageViewSampleWeightCreateInfoQcom;
        public void* pNext;
        public VkOffset2D filterCenter;
        public VkExtent2D filterSize;
        public uint numPhases;
        public VkImageViewSampleWeightCreateInfoQCOM() { }
        public VkImageViewSampleWeightCreateInfoQCOM(VkStructureType sType, void* pNext, VkOffset2D filterCenter, VkExtent2D filterSize, uint numPhases)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.filterCenter = filterCenter;
            this.filterSize = filterSize;
            this.numPhases = numPhases;
        }
    }
    /// <summary><b>[requires: VK_QCOM_image_processing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageProcessingFeaturesQCOM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageProcessingFeaturesQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImageProcessingFeaturesQcom;
        public void* pNext;
        public int textureSampleWeighted;
        public int textureBoxFilter;
        public int textureBlockMatch;
        public VkPhysicalDeviceImageProcessingFeaturesQCOM() { }
        public VkPhysicalDeviceImageProcessingFeaturesQCOM(VkStructureType sType, void* pNext, int textureSampleWeighted, int textureBoxFilter, int textureBlockMatch)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.textureSampleWeighted = textureSampleWeighted;
            this.textureBoxFilter = textureBoxFilter;
            this.textureBlockMatch = textureBlockMatch;
        }
    }
    /// <summary><b>[requires: VK_QCOM_image_processing]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageProcessingPropertiesQCOM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageProcessingPropertiesQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImageProcessingPropertiesQcom;
        public void* pNext;
        public uint maxWeightFilterPhases;
        public VkExtent2D maxWeightFilterDimension;
        public VkExtent2D maxBlockMatchRegion;
        public VkExtent2D maxBoxFilterBlockSize;
        public VkPhysicalDeviceImageProcessingPropertiesQCOM() { }
        public VkPhysicalDeviceImageProcessingPropertiesQCOM(VkStructureType sType, void* pNext, uint maxWeightFilterPhases, VkExtent2D maxWeightFilterDimension, VkExtent2D maxBlockMatchRegion, VkExtent2D maxBoxFilterBlockSize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxWeightFilterPhases = maxWeightFilterPhases;
            this.maxWeightFilterDimension = maxWeightFilterDimension;
            this.maxBlockMatchRegion = maxBlockMatchRegion;
            this.maxBoxFilterBlockSize = maxBoxFilterBlockSize;
        }
    }
    /// <summary><b>[requires: VK_QCOM_tile_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTilePropertiesFeaturesQCOM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceTilePropertiesFeaturesQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceTilePropertiesFeaturesQcom;
        public void* pNext;
        public int tileProperties;
        public VkPhysicalDeviceTilePropertiesFeaturesQCOM() { }
        public VkPhysicalDeviceTilePropertiesFeaturesQCOM(VkStructureType sType, void* pNext, int tileProperties)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.tileProperties = tileProperties;
        }
    }
    /// <summary><b>[requires: VK_QCOM_tile_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkTilePropertiesQCOM.html" /></remarks>
    public unsafe struct VkTilePropertiesQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypeTilePropertiesQcom;
        public void* pNext;
        public VkExtent3D tileSize;
        public VkExtent2D apronSize;
        public VkOffset2D origin;
        public VkTilePropertiesQCOM() { }
        public VkTilePropertiesQCOM(VkStructureType sType, void* pNext, VkExtent3D tileSize, VkExtent2D apronSize, VkOffset2D origin)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.tileSize = tileSize;
            this.apronSize = apronSize;
            this.origin = origin;
        }
    }
    /// <summary><b>[requires: VK_SEC_amigo_profiling]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAmigoProfilingFeaturesSEC.html" /></remarks>
    public unsafe struct VkPhysicalDeviceAmigoProfilingFeaturesSEC
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceAmigoProfilingFeaturesSec;
        public void* pNext;
        public int amigoProfiling;
        public VkPhysicalDeviceAmigoProfilingFeaturesSEC() { }
        public VkPhysicalDeviceAmigoProfilingFeaturesSEC(VkStructureType sType, void* pNext, int amigoProfiling)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.amigoProfiling = amigoProfiling;
        }
    }
    /// <summary><b>[requires: VK_SEC_amigo_profiling]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAmigoProfilingSubmitInfoSEC.html" /></remarks>
    public unsafe struct VkAmigoProfilingSubmitInfoSEC
    {
        public VkStructureType sType = VkStructureType.StructureTypeAmigoProfilingSubmitInfoSec;
        public void* pNext;
        public ulong firstDrawTimestamp;
        public ulong swapBufferTimestamp;
        public VkAmigoProfilingSubmitInfoSEC() { }
        public VkAmigoProfilingSubmitInfoSEC(VkStructureType sType, void* pNext, ulong firstDrawTimestamp, ulong swapBufferTimestamp)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.firstDrawTimestamp = firstDrawTimestamp;
            this.swapBufferTimestamp = swapBufferTimestamp;
        }
    }
    /// <summary><b>[requires: VK_EXT_attachment_feedback_loop_layout]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesExt;
        public void* pNext;
        public int attachmentFeedbackLoopLayout;
        public VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT() { }
        public VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(VkStructureType sType, void* pNext, int attachmentFeedbackLoopLayout)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.attachmentFeedbackLoopLayout = attachmentFeedbackLoopLayout;
        }
    }
    /// <summary><b>[requires: VK_EXT_depth_clamp_zero_one]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDepthClampZeroOneFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDepthClampZeroOneFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDepthClampZeroOneFeaturesExt;
        public void* pNext;
        public int depthClampZeroOne;
        public VkPhysicalDeviceDepthClampZeroOneFeaturesEXT() { }
        public VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(VkStructureType sType, void* pNext, int depthClampZeroOne)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.depthClampZeroOne = depthClampZeroOne;
        }
    }
    /// <summary><b>[requires: VK_EXT_device_address_binding_report]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAddressBindingReportFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceAddressBindingReportFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceAddressBindingReportFeaturesExt;
        public void* pNext;
        public int reportAddressBinding;
        public VkPhysicalDeviceAddressBindingReportFeaturesEXT() { }
        public VkPhysicalDeviceAddressBindingReportFeaturesEXT(VkStructureType sType, void* pNext, int reportAddressBinding)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.reportAddressBinding = reportAddressBinding;
        }
    }
    /// <summary><b>[requires: VK_EXT_device_address_binding_report]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceAddressBindingCallbackDataEXT.html" /></remarks>
    public unsafe struct VkDeviceAddressBindingCallbackDataEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceAddressBindingCallbackDataExt;
        public void* pNext;
        public VkDeviceAddressBindingFlagBitsEXT flags;
        public ulong baseAddress;
        public ulong size;
        public VkDeviceAddressBindingTypeEXT bindingType;
        public VkDeviceAddressBindingCallbackDataEXT() { }
        public VkDeviceAddressBindingCallbackDataEXT(VkStructureType sType, void* pNext, VkDeviceAddressBindingFlagBitsEXT flags, ulong baseAddress, ulong size, VkDeviceAddressBindingTypeEXT bindingType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.baseAddress = baseAddress;
            this.size = size;
            this.bindingType = bindingType;
        }
    }
    /// <summary><b>[requires: VK_NV_optical_flow]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpticalFlowFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceOpticalFlowFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceOpticalFlowFeaturesNv;
        public void* pNext;
        public int opticalFlow;
        public VkPhysicalDeviceOpticalFlowFeaturesNV() { }
        public VkPhysicalDeviceOpticalFlowFeaturesNV(VkStructureType sType, void* pNext, int opticalFlow)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.opticalFlow = opticalFlow;
        }
    }
    /// <summary><b>[requires: VK_NV_optical_flow]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpticalFlowPropertiesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceOpticalFlowPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceOpticalFlowPropertiesNv;
        public void* pNext;
        public VkOpticalFlowGridSizeFlagBitsNV supportedOutputGridSizes;
        public VkOpticalFlowGridSizeFlagBitsNV supportedHintGridSizes;
        public int hintSupported;
        public int costSupported;
        public int bidirectionalFlowSupported;
        public int globalFlowSupported;
        public uint minWidth;
        public uint minHeight;
        public uint maxWidth;
        public uint maxHeight;
        public uint maxNumRegionsOfInterest;
        public VkPhysicalDeviceOpticalFlowPropertiesNV() { }
        public VkPhysicalDeviceOpticalFlowPropertiesNV(VkStructureType sType, void* pNext, VkOpticalFlowGridSizeFlagBitsNV supportedOutputGridSizes, VkOpticalFlowGridSizeFlagBitsNV supportedHintGridSizes, int hintSupported, int costSupported, int bidirectionalFlowSupported, int globalFlowSupported, uint minWidth, uint minHeight, uint maxWidth, uint maxHeight, uint maxNumRegionsOfInterest)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.supportedOutputGridSizes = supportedOutputGridSizes;
            this.supportedHintGridSizes = supportedHintGridSizes;
            this.hintSupported = hintSupported;
            this.costSupported = costSupported;
            this.bidirectionalFlowSupported = bidirectionalFlowSupported;
            this.globalFlowSupported = globalFlowSupported;
            this.minWidth = minWidth;
            this.minHeight = minHeight;
            this.maxWidth = maxWidth;
            this.maxHeight = maxHeight;
            this.maxNumRegionsOfInterest = maxNumRegionsOfInterest;
        }
    }
    /// <summary><b>[requires: VK_NV_optical_flow]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkOpticalFlowImageFormatInfoNV.html" /></remarks>
    public unsafe struct VkOpticalFlowImageFormatInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeOpticalFlowImageFormatInfoNv;
        public void* pNext;
        public VkOpticalFlowUsageFlagBitsNV usage;
        public VkOpticalFlowImageFormatInfoNV() { }
        public VkOpticalFlowImageFormatInfoNV(VkStructureType sType, void* pNext, VkOpticalFlowUsageFlagBitsNV usage)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.usage = usage;
        }
    }
    /// <summary><b>[requires: VK_NV_optical_flow]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkOpticalFlowImageFormatPropertiesNV.html" /></remarks>
    public unsafe struct VkOpticalFlowImageFormatPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeOpticalFlowImageFormatPropertiesNv;
        public void* pNext;
        public VkFormat format;
        public VkOpticalFlowImageFormatPropertiesNV() { }
        public VkOpticalFlowImageFormatPropertiesNV(VkStructureType sType, void* pNext, VkFormat format)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.format = format;
        }
    }
    /// <summary><b>[requires: VK_NV_optical_flow]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkOpticalFlowSessionCreateInfoNV.html" /></remarks>
    public unsafe struct VkOpticalFlowSessionCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeOpticalFlowSessionCreateInfoNv;
        public void* pNext;
        public uint width;
        public uint height;
        public VkFormat imageFormat;
        public VkFormat flowVectorFormat;
        public VkFormat costFormat;
        public VkOpticalFlowGridSizeFlagBitsNV outputGridSize;
        public VkOpticalFlowGridSizeFlagBitsNV hintGridSize;
        public VkOpticalFlowPerformanceLevelNV performanceLevel;
        public VkOpticalFlowSessionCreateFlagBitsNV flags;
        public VkOpticalFlowSessionCreateInfoNV() { }
        public VkOpticalFlowSessionCreateInfoNV(VkStructureType sType, void* pNext, uint width, uint height, VkFormat imageFormat, VkFormat flowVectorFormat, VkFormat costFormat, VkOpticalFlowGridSizeFlagBitsNV outputGridSize, VkOpticalFlowGridSizeFlagBitsNV hintGridSize, VkOpticalFlowPerformanceLevelNV performanceLevel, VkOpticalFlowSessionCreateFlagBitsNV flags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.width = width;
            this.height = height;
            this.imageFormat = imageFormat;
            this.flowVectorFormat = flowVectorFormat;
            this.costFormat = costFormat;
            this.outputGridSize = outputGridSize;
            this.hintGridSize = hintGridSize;
            this.performanceLevel = performanceLevel;
            this.flags = flags;
        }
    }
    /// <summary><b>[requires: VK_NV_optical_flow]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkOpticalFlowSessionCreatePrivateDataInfoNV.html" /></remarks>
    public unsafe struct VkOpticalFlowSessionCreatePrivateDataInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeOpticalFlowSessionCreatePrivateDataInfoNv;
        public void* pNext;
        public uint id;
        public uint size;
        public void* pPrivateData;
        public VkOpticalFlowSessionCreatePrivateDataInfoNV() { }
        public VkOpticalFlowSessionCreatePrivateDataInfoNV(VkStructureType sType, void* pNext, uint id, uint size, void* pPrivateData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.id = id;
            this.size = size;
            this.pPrivateData = pPrivateData;
        }
    }
    /// <summary><b>[requires: VK_NV_optical_flow]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkOpticalFlowExecuteInfoNV.html" /></remarks>
    public unsafe struct VkOpticalFlowExecuteInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeOpticalFlowExecuteInfoNv;
        public void* pNext;
        public VkOpticalFlowExecuteFlagBitsNV flags;
        public uint regionCount;
        public VkRect2D* pRegions;
        public VkOpticalFlowExecuteInfoNV() { }
        public VkOpticalFlowExecuteInfoNV(VkStructureType sType, void* pNext, VkOpticalFlowExecuteFlagBitsNV flags, uint regionCount, VkRect2D* pRegions)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.regionCount = regionCount;
            this.pRegions = pRegions;
        }
    }
    /// <summary><b>[requires: VK_EXT_device_fault]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFaultFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFaultFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFaultFeaturesExt;
        public void* pNext;
        public int deviceFault;
        public int deviceFaultVendorBinary;
        public VkPhysicalDeviceFaultFeaturesEXT() { }
        public VkPhysicalDeviceFaultFeaturesEXT(VkStructureType sType, void* pNext, int deviceFault, int deviceFaultVendorBinary)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.deviceFault = deviceFault;
            this.deviceFaultVendorBinary = deviceFaultVendorBinary;
        }
    }
    /// <summary><b>[requires: VK_EXT_device_fault]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceFaultAddressInfoEXT.html" /></remarks>
    public unsafe struct VkDeviceFaultAddressInfoEXT
    {
        public VkDeviceFaultAddressTypeEXT addressType;
        public ulong reportedAddress;
        public ulong addressPrecision;
        public VkDeviceFaultAddressInfoEXT() { }
        public VkDeviceFaultAddressInfoEXT(VkDeviceFaultAddressTypeEXT addressType, ulong reportedAddress, ulong addressPrecision)
        {
            this.addressType = addressType;
            this.reportedAddress = reportedAddress;
            this.addressPrecision = addressPrecision;
        }
    }
    /// <summary><b>[requires: VK_EXT_device_fault]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceFaultVendorInfoEXT.html" /></remarks>
    public unsafe struct VkDeviceFaultVendorInfoEXT
    {
        public fixed byte description[256];
        public ulong vendorFaultCode;
        public ulong vendorFaultData;
        public VkDeviceFaultVendorInfoEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_device_fault]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceFaultCountsEXT.html" /></remarks>
    public unsafe struct VkDeviceFaultCountsEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceFaultCountsExt;
        public void* pNext;
        public uint addressInfoCount;
        public uint vendorInfoCount;
        public ulong vendorBinarySize;
        public VkDeviceFaultCountsEXT() { }
        public VkDeviceFaultCountsEXT(VkStructureType sType, void* pNext, uint addressInfoCount, uint vendorInfoCount, ulong vendorBinarySize)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.addressInfoCount = addressInfoCount;
            this.vendorInfoCount = vendorInfoCount;
            this.vendorBinarySize = vendorBinarySize;
        }
    }
    /// <summary><b>[requires: VK_EXT_device_fault]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceFaultInfoEXT.html" /></remarks>
    public unsafe struct VkDeviceFaultInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceFaultInfoExt;
        public void* pNext;
        public fixed byte description[256];
        public VkDeviceFaultAddressInfoEXT* pAddressInfos;
        public VkDeviceFaultVendorInfoEXT* pVendorInfos;
        public void* pVendorBinaryData;
        public VkDeviceFaultInfoEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_device_fault]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceFaultVendorBinaryHeaderVersionOneEXT.html" /></remarks>
    public unsafe struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT
    {
        public uint headerSize;
        public VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion;
        public uint vendorID;
        public uint deviceID;
        public uint driverVersion;
        public fixed byte pipelineCacheUUID[16];
        public uint applicationNameOffset;
        public uint applicationVersion;
        public uint engineNameOffset;
        public uint engineVersion;
        public uint apiVersion;
        public VkDeviceFaultVendorBinaryHeaderVersionOneEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_pipeline_library_group_handles]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePipelineLibraryGroupHandlesFeaturesExt;
        public void* pNext;
        public int pipelineLibraryGroupHandles;
        public VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT() { }
        public VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(VkStructureType sType, void* pNext, int pipelineLibraryGroupHandles)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pipelineLibraryGroupHandles = pipelineLibraryGroupHandles;
        }
    }
    /// <summary><b>[requires: VK_EXT_depth_bias_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDepthBiasInfoEXT.html" /></remarks>
    public unsafe struct VkDepthBiasInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDepthBiasInfoExt;
        public void* pNext;
        public float depthBiasConstantFactor;
        public float depthBiasClamp;
        public float depthBiasSlopeFactor;
        public VkDepthBiasInfoEXT() { }
        public VkDepthBiasInfoEXT(VkStructureType sType, void* pNext, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.depthBiasConstantFactor = depthBiasConstantFactor;
            this.depthBiasClamp = depthBiasClamp;
            this.depthBiasSlopeFactor = depthBiasSlopeFactor;
        }
    }
    /// <summary><b>[requires: VK_EXT_depth_bias_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDepthBiasRepresentationInfoEXT.html" /></remarks>
    public unsafe struct VkDepthBiasRepresentationInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeDepthBiasRepresentationInfoExt;
        public void* pNext;
        public VkDepthBiasRepresentationEXT depthBiasRepresentation;
        public int depthBiasExact;
        public VkDepthBiasRepresentationInfoEXT() { }
        public VkDepthBiasRepresentationInfoEXT(VkStructureType sType, void* pNext, VkDepthBiasRepresentationEXT depthBiasRepresentation, int depthBiasExact)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.depthBiasRepresentation = depthBiasRepresentation;
            this.depthBiasExact = depthBiasExact;
        }
    }
    /// <summary><b>[requires: VK_NV_memory_decompression]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDecompressMemoryRegionNV.html" /></remarks>
    public unsafe struct VkDecompressMemoryRegionNV
    {
        public ulong srcAddress;
        public ulong dstAddress;
        public ulong compressedSize;
        public ulong decompressedSize;
        public VkMemoryDecompressionMethodFlagBitsNV decompressionMethod;
        public VkDecompressMemoryRegionNV() { }
        public VkDecompressMemoryRegionNV(ulong srcAddress, ulong dstAddress, ulong compressedSize, ulong decompressedSize, VkMemoryDecompressionMethodFlagBitsNV decompressionMethod)
        {
            this.srcAddress = srcAddress;
            this.dstAddress = dstAddress;
            this.compressedSize = compressedSize;
            this.decompressedSize = decompressedSize;
            this.decompressionMethod = decompressionMethod;
        }
    }
    /// <summary><b>[requires: VK_ARM_shader_core_builtins]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderCoreBuiltinsPropertiesArm;
        public void* pNext;
        public ulong shaderCoreMask;
        public uint shaderCoreCount;
        public uint shaderWarpsPerCore;
        public VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM() { }
        public VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(VkStructureType sType, void* pNext, ulong shaderCoreMask, uint shaderCoreCount, uint shaderWarpsPerCore)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderCoreMask = shaderCoreMask;
            this.shaderCoreCount = shaderCoreCount;
            this.shaderWarpsPerCore = shaderWarpsPerCore;
        }
    }
    /// <summary><b>[requires: VK_ARM_shader_core_builtins]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderCoreBuiltinsFeaturesArm;
        public void* pNext;
        public int shaderCoreBuiltins;
        public VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM() { }
        public VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM(VkStructureType sType, void* pNext, int shaderCoreBuiltins)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderCoreBuiltins = shaderCoreBuiltins;
        }
    }
    /// <summary><b>[requires: VK_EXT_frame_boundary]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFrameBoundaryEXT.html" /></remarks>
    public unsafe struct VkFrameBoundaryEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeFrameBoundaryExt;
        public void* pNext;
        public VkFrameBoundaryFlagBitsEXT flags;
        public ulong frameID;
        public uint imageCount;
        public VkImage* pImages;
        public uint bufferCount;
        public VkBuffer* pBuffers;
        public ulong tagName;
        public nuint tagSize;
        public void* pTag;
        public VkFrameBoundaryEXT() { }
        public VkFrameBoundaryEXT(VkStructureType sType, void* pNext, VkFrameBoundaryFlagBitsEXT flags, ulong frameID, uint imageCount, VkImage* pImages, uint bufferCount, VkBuffer* pBuffers, ulong tagName, nuint tagSize, void* pTag)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.frameID = frameID;
            this.imageCount = imageCount;
            this.pImages = pImages;
            this.bufferCount = bufferCount;
            this.pBuffers = pBuffers;
            this.tagName = tagName;
            this.tagSize = tagSize;
            this.pTag = pTag;
        }
    }
    /// <summary><b>[requires: VK_EXT_frame_boundary]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFrameBoundaryFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceFrameBoundaryFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceFrameBoundaryFeaturesExt;
        public void* pNext;
        public int frameBoundary;
        public VkPhysicalDeviceFrameBoundaryFeaturesEXT() { }
        public VkPhysicalDeviceFrameBoundaryFeaturesEXT(VkStructureType sType, void* pNext, int frameBoundary)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.frameBoundary = frameBoundary;
        }
    }
    /// <summary><b>[requires: VK_EXT_dynamic_rendering_unused_attachments]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesExt;
        public void* pNext;
        public int dynamicRenderingUnusedAttachments;
        public VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT() { }
        public VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT(VkStructureType sType, void* pNext, int dynamicRenderingUnusedAttachments)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.dynamicRenderingUnusedAttachments = dynamicRenderingUnusedAttachments;
        }
    }
    /// <summary><b>[requires: VK_EXT_surface_maintenance1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSurfacePresentModeEXT.html" /></remarks>
    public unsafe struct VkSurfacePresentModeEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSurfacePresentModeExt;
        public void* pNext;
        public VkPresentModeKHR presentMode;
        public VkSurfacePresentModeEXT() { }
        public VkSurfacePresentModeEXT(VkStructureType sType, void* pNext, VkPresentModeKHR presentMode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.presentMode = presentMode;
        }
    }
    /// <summary><b>[requires: VK_EXT_surface_maintenance1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSurfacePresentScalingCapabilitiesEXT.html" /></remarks>
    public unsafe struct VkSurfacePresentScalingCapabilitiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSurfacePresentScalingCapabilitiesExt;
        public void* pNext;
        public VkPresentScalingFlagBitsEXT supportedPresentScaling;
        public VkPresentGravityFlagBitsEXT supportedPresentGravityX;
        public VkPresentGravityFlagBitsEXT supportedPresentGravityY;
        public VkExtent2D minScaledImageExtent;
        public VkExtent2D maxScaledImageExtent;
        public VkSurfacePresentScalingCapabilitiesEXT() { }
        public VkSurfacePresentScalingCapabilitiesEXT(VkStructureType sType, void* pNext, VkPresentScalingFlagBitsEXT supportedPresentScaling, VkPresentGravityFlagBitsEXT supportedPresentGravityX, VkPresentGravityFlagBitsEXT supportedPresentGravityY, VkExtent2D minScaledImageExtent, VkExtent2D maxScaledImageExtent)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.supportedPresentScaling = supportedPresentScaling;
            this.supportedPresentGravityX = supportedPresentGravityX;
            this.supportedPresentGravityY = supportedPresentGravityY;
            this.minScaledImageExtent = minScaledImageExtent;
            this.maxScaledImageExtent = maxScaledImageExtent;
        }
    }
    /// <summary><b>[requires: VK_EXT_surface_maintenance1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSurfacePresentModeCompatibilityEXT.html" /></remarks>
    public unsafe struct VkSurfacePresentModeCompatibilityEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSurfacePresentModeCompatibilityExt;
        public void* pNext;
        public uint presentModeCount;
        public VkPresentModeKHR* pPresentModes;
        public VkSurfacePresentModeCompatibilityEXT() { }
        public VkSurfacePresentModeCompatibilityEXT(VkStructureType sType, void* pNext, uint presentModeCount, VkPresentModeKHR* pPresentModes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.presentModeCount = presentModeCount;
            this.pPresentModes = pPresentModes;
        }
    }
    /// <summary><b>[requires: VK_EXT_swapchain_maintenance1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSwapchainMaintenance1FeaturesExt;
        public void* pNext;
        public int swapchainMaintenance1;
        public VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT() { }
        public VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(VkStructureType sType, void* pNext, int swapchainMaintenance1)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.swapchainMaintenance1 = swapchainMaintenance1;
        }
    }
    /// <summary><b>[requires: VK_EXT_swapchain_maintenance1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSwapchainPresentFenceInfoEXT.html" /></remarks>
    public unsafe struct VkSwapchainPresentFenceInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSwapchainPresentFenceInfoExt;
        public void* pNext;
        public uint swapchainCount;
        public VkFence* pFences;
        public VkSwapchainPresentFenceInfoEXT() { }
        public VkSwapchainPresentFenceInfoEXT(VkStructureType sType, void* pNext, uint swapchainCount, VkFence* pFences)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.swapchainCount = swapchainCount;
            this.pFences = pFences;
        }
    }
    /// <summary><b>[requires: VK_EXT_swapchain_maintenance1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSwapchainPresentModesCreateInfoEXT.html" /></remarks>
    public unsafe struct VkSwapchainPresentModesCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSwapchainPresentModesCreateInfoExt;
        public void* pNext;
        public uint presentModeCount;
        public VkPresentModeKHR* pPresentModes;
        public VkSwapchainPresentModesCreateInfoEXT() { }
        public VkSwapchainPresentModesCreateInfoEXT(VkStructureType sType, void* pNext, uint presentModeCount, VkPresentModeKHR* pPresentModes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.presentModeCount = presentModeCount;
            this.pPresentModes = pPresentModes;
        }
    }
    /// <summary><b>[requires: VK_EXT_swapchain_maintenance1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSwapchainPresentModeInfoEXT.html" /></remarks>
    public unsafe struct VkSwapchainPresentModeInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSwapchainPresentModeInfoExt;
        public void* pNext;
        public uint swapchainCount;
        public VkPresentModeKHR* pPresentModes;
        public VkSwapchainPresentModeInfoEXT() { }
        public VkSwapchainPresentModeInfoEXT(VkStructureType sType, void* pNext, uint swapchainCount, VkPresentModeKHR* pPresentModes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.swapchainCount = swapchainCount;
            this.pPresentModes = pPresentModes;
        }
    }
    /// <summary><b>[requires: VK_EXT_swapchain_maintenance1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSwapchainPresentScalingCreateInfoEXT.html" /></remarks>
    public unsafe struct VkSwapchainPresentScalingCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSwapchainPresentScalingCreateInfoExt;
        public void* pNext;
        public VkPresentScalingFlagBitsEXT scalingBehavior;
        public VkPresentGravityFlagBitsEXT presentGravityX;
        public VkPresentGravityFlagBitsEXT presentGravityY;
        public VkSwapchainPresentScalingCreateInfoEXT() { }
        public VkSwapchainPresentScalingCreateInfoEXT(VkStructureType sType, void* pNext, VkPresentScalingFlagBitsEXT scalingBehavior, VkPresentGravityFlagBitsEXT presentGravityX, VkPresentGravityFlagBitsEXT presentGravityY)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.scalingBehavior = scalingBehavior;
            this.presentGravityX = presentGravityX;
            this.presentGravityY = presentGravityY;
        }
    }
    /// <summary><b>[requires: VK_EXT_swapchain_maintenance1]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkReleaseSwapchainImagesInfoEXT.html" /></remarks>
    public unsafe struct VkReleaseSwapchainImagesInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeReleaseSwapchainImagesInfoExt;
        public void* pNext;
        public VkSwapchainKHR swapchain;
        public uint imageIndexCount;
        public uint* pImageIndices;
        public VkReleaseSwapchainImagesInfoEXT() { }
        public VkReleaseSwapchainImagesInfoEXT(VkStructureType sType, void* pNext, VkSwapchainKHR swapchain, uint imageIndexCount, uint* pImageIndices)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.swapchain = swapchain;
            this.imageIndexCount = imageIndexCount;
            this.pImageIndices = pImageIndices;
        }
    }
    /// <summary><b>[requires: VK_EXT_depth_bias_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDepthBiasControlFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDepthBiasControlFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDepthBiasControlFeaturesExt;
        public void* pNext;
        public int depthBiasControl;
        public int leastRepresentableValueForceUnormRepresentation;
        public int floatRepresentation;
        public int depthBiasExact;
        public VkPhysicalDeviceDepthBiasControlFeaturesEXT() { }
        public VkPhysicalDeviceDepthBiasControlFeaturesEXT(VkStructureType sType, void* pNext, int depthBiasControl, int leastRepresentableValueForceUnormRepresentation, int floatRepresentation, int depthBiasExact)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.depthBiasControl = depthBiasControl;
            this.leastRepresentableValueForceUnormRepresentation = leastRepresentableValueForceUnormRepresentation;
            this.floatRepresentation = floatRepresentation;
            this.depthBiasExact = depthBiasExact;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing_invocation_reorder]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRayTracingInvocationReorderFeaturesNv;
        public void* pNext;
        public int rayTracingInvocationReorder;
        public VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV() { }
        public VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV(VkStructureType sType, void* pNext, int rayTracingInvocationReorder)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.rayTracingInvocationReorder = rayTracingInvocationReorder;
        }
    }
    /// <summary><b>[requires: VK_NV_ray_tracing_invocation_reorder]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRayTracingInvocationReorderPropertiesNv;
        public void* pNext;
        public VkRayTracingInvocationReorderModeNV rayTracingInvocationReorderReorderingHint;
        public VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV() { }
        public VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV(VkStructureType sType, void* pNext, VkRayTracingInvocationReorderModeNV rayTracingInvocationReorderReorderingHint)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.rayTracingInvocationReorderReorderingHint = rayTracingInvocationReorderReorderingHint;
        }
    }
    /// <summary><b>[requires: VK_NV_extended_sparse_address_space]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExtendedSparseAddressSpaceFeaturesNv;
        public void* pNext;
        public int extendedSparseAddressSpace;
        public VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV() { }
        public VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV(VkStructureType sType, void* pNext, int extendedSparseAddressSpace)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.extendedSparseAddressSpace = extendedSparseAddressSpace;
        }
    }
    /// <summary><b>[requires: VK_NV_extended_sparse_address_space]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExtendedSparseAddressSpacePropertiesNv;
        public void* pNext;
        public ulong extendedSparseAddressSpaceSize;
        public VkImageUsageFlagBits extendedSparseImageUsageFlags;
        public VkBufferUsageFlagBits extendedSparseBufferUsageFlags;
        public VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV() { }
        public VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV(VkStructureType sType, void* pNext, ulong extendedSparseAddressSpaceSize, VkImageUsageFlagBits extendedSparseImageUsageFlags, VkBufferUsageFlagBits extendedSparseBufferUsageFlags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.extendedSparseAddressSpaceSize = extendedSparseAddressSpaceSize;
            this.extendedSparseImageUsageFlags = extendedSparseImageUsageFlags;
            this.extendedSparseBufferUsageFlags = extendedSparseBufferUsageFlags;
        }
    }
    /// <summary><b>[requires: VK_LUNARG_direct_driver_loading]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDirectDriverLoadingInfoLUNARG.html" /></remarks>
    public unsafe struct VkDirectDriverLoadingInfoLUNARG
    {
        public VkStructureType sType = VkStructureType.StructureTypeDirectDriverLoadingInfoLunarg;
        public void* pNext;
        public VkDirectDriverLoadingFlagsLUNARG flags;
        public delegate* unmanaged[Cdecl]<VkInstance, byte*, IntPtr> pfnGetInstanceProcAddr;
        public VkDirectDriverLoadingInfoLUNARG() { }
        public VkDirectDriverLoadingInfoLUNARG(VkStructureType sType, void* pNext, VkDirectDriverLoadingFlagsLUNARG flags, delegate* unmanaged[Cdecl]<VkInstance, byte*, IntPtr> pfnGetInstanceProcAddr)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.pfnGetInstanceProcAddr = pfnGetInstanceProcAddr;
        }
    }
    /// <summary><b>[requires: VK_LUNARG_direct_driver_loading]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDirectDriverLoadingListLUNARG.html" /></remarks>
    public unsafe struct VkDirectDriverLoadingListLUNARG
    {
        public VkStructureType sType = VkStructureType.StructureTypeDirectDriverLoadingListLunarg;
        public void* pNext;
        public VkDirectDriverLoadingModeLUNARG mode;
        public uint driverCount;
        public VkDirectDriverLoadingInfoLUNARG* pDrivers;
        public VkDirectDriverLoadingListLUNARG() { }
        public VkDirectDriverLoadingListLUNARG(VkStructureType sType, void* pNext, VkDirectDriverLoadingModeLUNARG mode, uint driverCount, VkDirectDriverLoadingInfoLUNARG* pDrivers)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.mode = mode;
            this.driverCount = driverCount;
            this.pDrivers = pDrivers;
        }
    }
    /// <summary><b>[requires: VK_QCOM_multiview_per_view_viewports]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMultiviewPerViewViewportsFeaturesQcom;
        public void* pNext;
        public int multiviewPerViewViewports;
        public VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM() { }
        public VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(VkStructureType sType, void* pNext, int multiviewPerViewViewports)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.multiviewPerViewViewports = multiviewPerViewViewports;
        }
    }
    /// <summary><b>[requires: VK_KHR_ray_tracing_position_fetch]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRayTracingPositionFetchFeaturesKhr;
        public void* pNext;
        public int rayTracingPositionFetch;
        public VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR() { }
        public VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR(VkStructureType sType, void* pNext, int rayTracingPositionFetch)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.rayTracingPositionFetch = rayTracingPositionFetch;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance5]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceImageSubresourceInfoKHR.html" /></remarks>
    public unsafe struct VkDeviceImageSubresourceInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceImageSubresourceInfoKhr;
        public void* pNext;
        public VkImageCreateInfo* pCreateInfo;
        public VkImageSubresource2KHR* pSubresource;
        public VkDeviceImageSubresourceInfoKHR() { }
        public VkDeviceImageSubresourceInfoKHR(VkStructureType sType, void* pNext, VkImageCreateInfo* pCreateInfo, VkImageSubresource2KHR* pSubresource)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pCreateInfo = pCreateInfo;
            this.pSubresource = pSubresource;
        }
    }
    /// <summary><b>[requires: VK_ARM_shader_core_properties]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesARM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderCorePropertiesARM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderCorePropertiesArm;
        public void* pNext;
        public uint pixelRate;
        public uint texelRate;
        public uint fmaRate;
        public VkPhysicalDeviceShaderCorePropertiesARM() { }
        public VkPhysicalDeviceShaderCorePropertiesARM(VkStructureType sType, void* pNext, uint pixelRate, uint texelRate, uint fmaRate)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pixelRate = pixelRate;
            this.texelRate = texelRate;
            this.fmaRate = fmaRate;
        }
    }
    /// <summary><b>[requires: VK_QCOM_multiview_per_view_render_areas]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMultiviewPerViewRenderAreasFeaturesQcom;
        public void* pNext;
        public int multiviewPerViewRenderAreas;
        public VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM() { }
        public VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(VkStructureType sType, void* pNext, int multiviewPerViewRenderAreas)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.multiviewPerViewRenderAreas = multiviewPerViewRenderAreas;
        }
    }
    /// <summary><b>[requires: VK_QCOM_multiview_per_view_render_areas]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM.html" /></remarks>
    public unsafe struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypeMultiviewPerViewRenderAreasRenderPassBeginInfoQcom;
        public void* pNext;
        public uint perViewRenderAreaCount;
        public VkRect2D* pPerViewRenderAreas;
        public VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM() { }
        public VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(VkStructureType sType, void* pNext, uint perViewRenderAreaCount, VkRect2D* pPerViewRenderAreas)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.perViewRenderAreaCount = perViewRenderAreaCount;
            this.pPerViewRenderAreas = pPerViewRenderAreas;
        }
    }
    /// <summary><b>[requires: VK_NV_low_latency]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkQueryLowLatencySupportNV.html" /></remarks>
    public unsafe struct VkQueryLowLatencySupportNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeQueryLowLatencySupportNv;
        public void* pNext;
        public void* pQueriedLowLatencyData;
        public VkQueryLowLatencySupportNV() { }
        public VkQueryLowLatencySupportNV(VkStructureType sType, void* pNext, void* pQueriedLowLatencyData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pQueriedLowLatencyData = pQueriedLowLatencyData;
        }
    }
    /// <summary><b>[requires: VK_KHR_map_memory2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryMapInfoKHR.html" /></remarks>
    public unsafe struct VkMemoryMapInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryMapInfoKhr;
        public void* pNext;
        public VkMemoryMapFlagBits flags;
        public VkDeviceMemory memory;
        public ulong offset;
        public ulong size;
        public VkMemoryMapInfoKHR() { }
        public VkMemoryMapInfoKHR(VkStructureType sType, void* pNext, VkMemoryMapFlagBits flags, VkDeviceMemory memory, ulong offset, ulong size)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.memory = memory;
            this.offset = offset;
            this.size = size;
        }
    }
    /// <summary><b>[requires: VK_KHR_map_memory2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryUnmapInfoKHR.html" /></remarks>
    public unsafe struct VkMemoryUnmapInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryUnmapInfoKhr;
        public void* pNext;
        public VkMemoryUnmapFlagBitsKHR flags;
        public VkDeviceMemory memory;
        public VkMemoryUnmapInfoKHR() { }
        public VkMemoryUnmapInfoKHR(VkStructureType sType, void* pNext, VkMemoryUnmapFlagBitsKHR flags, VkDeviceMemory memory)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.memory = memory;
        }
    }
    /// <summary><b>[requires: VK_EXT_shader_object]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderObjectFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderObjectFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderObjectFeaturesExt;
        public void* pNext;
        public int shaderObject;
        public VkPhysicalDeviceShaderObjectFeaturesEXT() { }
        public VkPhysicalDeviceShaderObjectFeaturesEXT(VkStructureType sType, void* pNext, int shaderObject)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderObject = shaderObject;
        }
    }
    /// <summary><b>[requires: VK_EXT_shader_object]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderObjectPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderObjectPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderObjectPropertiesExt;
        public void* pNext;
        public fixed byte shaderBinaryUUID[16];
        public uint shaderBinaryVersion;
        public VkPhysicalDeviceShaderObjectPropertiesEXT() { }
    }
    /// <summary><b>[requires: VK_EXT_shader_object]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkShaderCreateInfoEXT.html" /></remarks>
    public unsafe struct VkShaderCreateInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeShaderCreateInfoExt;
        public void* pNext;
        public VkShaderCreateFlagBitsEXT flags;
        public VkShaderStageFlagBits stage;
        public VkShaderStageFlagBits nextStage;
        public VkShaderCodeTypeEXT codeType;
        public nuint codeSize;
        public void* pCode;
        public byte* pName;
        public uint setLayoutCount;
        public VkDescriptorSetLayout* pSetLayouts;
        public uint pushConstantRangeCount;
        public VkPushConstantRange* pPushConstantRanges;
        public VkSpecializationInfo* pSpecializationInfo;
        public VkShaderCreateInfoEXT() { }
        public VkShaderCreateInfoEXT(VkStructureType sType, void* pNext, VkShaderCreateFlagBitsEXT flags, VkShaderStageFlagBits stage, VkShaderStageFlagBits nextStage, VkShaderCodeTypeEXT codeType, nuint codeSize, void* pCode, byte* pName, uint setLayoutCount, VkDescriptorSetLayout* pSetLayouts, uint pushConstantRangeCount, VkPushConstantRange* pPushConstantRanges, VkSpecializationInfo* pSpecializationInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.stage = stage;
            this.nextStage = nextStage;
            this.codeType = codeType;
            this.codeSize = codeSize;
            this.pCode = pCode;
            this.pName = pName;
            this.setLayoutCount = setLayoutCount;
            this.pSetLayouts = pSetLayouts;
            this.pushConstantRangeCount = pushConstantRangeCount;
            this.pPushConstantRanges = pPushConstantRanges;
            this.pSpecializationInfo = pSpecializationInfo;
        }
    }
    /// <summary><b>[requires: VK_EXT_shader_tile_image]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderTileImageFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderTileImageFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderTileImageFeaturesExt;
        public void* pNext;
        public int shaderTileImageColorReadAccess;
        public int shaderTileImageDepthReadAccess;
        public int shaderTileImageStencilReadAccess;
        public VkPhysicalDeviceShaderTileImageFeaturesEXT() { }
        public VkPhysicalDeviceShaderTileImageFeaturesEXT(VkStructureType sType, void* pNext, int shaderTileImageColorReadAccess, int shaderTileImageDepthReadAccess, int shaderTileImageStencilReadAccess)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderTileImageColorReadAccess = shaderTileImageColorReadAccess;
            this.shaderTileImageDepthReadAccess = shaderTileImageDepthReadAccess;
            this.shaderTileImageStencilReadAccess = shaderTileImageStencilReadAccess;
        }
    }
    /// <summary><b>[requires: VK_EXT_shader_tile_image]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderTileImagePropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderTileImagePropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderTileImagePropertiesExt;
        public void* pNext;
        public int shaderTileImageCoherentReadAccelerated;
        public int shaderTileImageReadSampleFromPixelRateInvocation;
        public int shaderTileImageReadFromHelperInvocation;
        public VkPhysicalDeviceShaderTileImagePropertiesEXT() { }
        public VkPhysicalDeviceShaderTileImagePropertiesEXT(VkStructureType sType, void* pNext, int shaderTileImageCoherentReadAccelerated, int shaderTileImageReadSampleFromPixelRateInvocation, int shaderTileImageReadFromHelperInvocation)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderTileImageCoherentReadAccelerated = shaderTileImageCoherentReadAccelerated;
            this.shaderTileImageReadSampleFromPixelRateInvocation = shaderTileImageReadSampleFromPixelRateInvocation;
            this.shaderTileImageReadFromHelperInvocation = shaderTileImageReadFromHelperInvocation;
        }
    }
    /// <summary><b>[requires: VK_QNX_external_memory_screen_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImportScreenBufferInfoQNX.html" /></remarks>
    public unsafe struct VkImportScreenBufferInfoQNX
    {
        public VkStructureType sType = VkStructureType.StructureTypeImportScreenBufferInfoQnx;
        public void* pNext;
        public IntPtr* buffer;
        public VkImportScreenBufferInfoQNX() { }
        public VkImportScreenBufferInfoQNX(VkStructureType sType, void* pNext, IntPtr* buffer)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.buffer = buffer;
        }
    }
    /// <summary><b>[requires: VK_QNX_external_memory_screen_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkScreenBufferPropertiesQNX.html" /></remarks>
    public unsafe struct VkScreenBufferPropertiesQNX
    {
        public VkStructureType sType = VkStructureType.StructureTypeScreenBufferPropertiesQnx;
        public void* pNext;
        public ulong allocationSize;
        public uint memoryTypeBits;
        public VkScreenBufferPropertiesQNX() { }
        public VkScreenBufferPropertiesQNX(VkStructureType sType, void* pNext, ulong allocationSize, uint memoryTypeBits)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.allocationSize = allocationSize;
            this.memoryTypeBits = memoryTypeBits;
        }
    }
    /// <summary><b>[requires: VK_QNX_external_memory_screen_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkScreenBufferFormatPropertiesQNX.html" /></remarks>
    public unsafe struct VkScreenBufferFormatPropertiesQNX
    {
        public VkStructureType sType = VkStructureType.StructureTypeScreenBufferFormatPropertiesQnx;
        public void* pNext;
        public VkFormat format;
        public ulong externalFormat;
        public ulong screenUsage;
        public VkFormatFeatureFlagBits formatFeatures;
        public VkComponentMapping samplerYcbcrConversionComponents;
        public VkSamplerYcbcrModelConversion suggestedYcbcrModel;
        public VkSamplerYcbcrRange suggestedYcbcrRange;
        public VkChromaLocation suggestedXChromaOffset;
        public VkChromaLocation suggestedYChromaOffset;
        public VkScreenBufferFormatPropertiesQNX() { }
        public VkScreenBufferFormatPropertiesQNX(VkStructureType sType, void* pNext, VkFormat format, ulong externalFormat, ulong screenUsage, VkFormatFeatureFlagBits formatFeatures, VkComponentMapping samplerYcbcrConversionComponents, VkSamplerYcbcrModelConversion suggestedYcbcrModel, VkSamplerYcbcrRange suggestedYcbcrRange, VkChromaLocation suggestedXChromaOffset, VkChromaLocation suggestedYChromaOffset)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.format = format;
            this.externalFormat = externalFormat;
            this.screenUsage = screenUsage;
            this.formatFeatures = formatFeatures;
            this.samplerYcbcrConversionComponents = samplerYcbcrConversionComponents;
            this.suggestedYcbcrModel = suggestedYcbcrModel;
            this.suggestedYcbcrRange = suggestedYcbcrRange;
            this.suggestedXChromaOffset = suggestedXChromaOffset;
            this.suggestedYChromaOffset = suggestedYChromaOffset;
        }
    }
    /// <summary><b>[requires: VK_QNX_external_memory_screen_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExternalFormatQNX.html" /></remarks>
    public unsafe struct VkExternalFormatQNX
    {
        public VkStructureType sType = VkStructureType.StructureTypeExternalFormatQnx;
        public void* pNext;
        public ulong externalFormat;
        public VkExternalFormatQNX() { }
        public VkExternalFormatQNX(VkStructureType sType, void* pNext, ulong externalFormat)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.externalFormat = externalFormat;
        }
    }
    /// <summary><b>[requires: VK_QNX_external_memory_screen_buffer]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExternalMemoryScreenBufferFeaturesQnx;
        public void* pNext;
        public int screenBufferImport;
        public VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX() { }
        public VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX(VkStructureType sType, void* pNext, int screenBufferImport)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.screenBufferImport = screenBufferImport;
        }
    }
    /// <summary><b>[requires: VK_KHR_cooperative_matrix]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCooperativeMatrixFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCooperativeMatrixFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCooperativeMatrixFeaturesKhr;
        public void* pNext;
        public int cooperativeMatrix;
        public int cooperativeMatrixRobustBufferAccess;
        public VkPhysicalDeviceCooperativeMatrixFeaturesKHR() { }
        public VkPhysicalDeviceCooperativeMatrixFeaturesKHR(VkStructureType sType, void* pNext, int cooperativeMatrix, int cooperativeMatrixRobustBufferAccess)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.cooperativeMatrix = cooperativeMatrix;
            this.cooperativeMatrixRobustBufferAccess = cooperativeMatrixRobustBufferAccess;
        }
    }
    /// <summary><b>[requires: VK_KHR_cooperative_matrix]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCooperativeMatrixPropertiesKHR.html" /></remarks>
    public unsafe struct VkCooperativeMatrixPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeCooperativeMatrixPropertiesKhr;
        public void* pNext;
        public uint MSize;
        public uint NSize;
        public uint KSize;
        public VkComponentTypeKHR AType;
        public VkComponentTypeKHR BType;
        public VkComponentTypeKHR CType;
        public VkComponentTypeKHR ResultType;
        public int saturatingAccumulation;
        public VkScopeKHR scope;
        public VkCooperativeMatrixPropertiesKHR() { }
        public VkCooperativeMatrixPropertiesKHR(VkStructureType sType, void* pNext, uint MSize, uint NSize, uint KSize, VkComponentTypeKHR AType, VkComponentTypeKHR BType, VkComponentTypeKHR CType, VkComponentTypeKHR ResultType, int saturatingAccumulation, VkScopeKHR scope)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.MSize = MSize;
            this.NSize = NSize;
            this.KSize = KSize;
            this.AType = AType;
            this.BType = BType;
            this.CType = CType;
            this.ResultType = ResultType;
            this.saturatingAccumulation = saturatingAccumulation;
            this.scope = scope;
        }
    }
    /// <summary><b>[requires: VK_KHR_cooperative_matrix]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCooperativeMatrixPropertiesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCooperativeMatrixPropertiesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCooperativeMatrixPropertiesKhr;
        public void* pNext;
        public VkShaderStageFlagBits cooperativeMatrixSupportedStages;
        public VkPhysicalDeviceCooperativeMatrixPropertiesKHR() { }
        public VkPhysicalDeviceCooperativeMatrixPropertiesKHR(VkStructureType sType, void* pNext, VkShaderStageFlagBits cooperativeMatrixSupportedStages)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.cooperativeMatrixSupportedStages = cooperativeMatrixSupportedStages;
        }
    }
    /// <summary><b>[requires: VK_AMDX_shader_enqueue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderEnqueuePropertiesAMDX.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderEnqueuePropertiesAMDX
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderEnqueuePropertiesAmdx;
        public void* pNext;
        public uint maxExecutionGraphDepth;
        public uint maxExecutionGraphShaderOutputNodes;
        public uint maxExecutionGraphShaderPayloadSize;
        public uint maxExecutionGraphShaderPayloadCount;
        public uint executionGraphDispatchAddressAlignment;
        public VkPhysicalDeviceShaderEnqueuePropertiesAMDX() { }
        public VkPhysicalDeviceShaderEnqueuePropertiesAMDX(VkStructureType sType, void* pNext, uint maxExecutionGraphDepth, uint maxExecutionGraphShaderOutputNodes, uint maxExecutionGraphShaderPayloadSize, uint maxExecutionGraphShaderPayloadCount, uint executionGraphDispatchAddressAlignment)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxExecutionGraphDepth = maxExecutionGraphDepth;
            this.maxExecutionGraphShaderOutputNodes = maxExecutionGraphShaderOutputNodes;
            this.maxExecutionGraphShaderPayloadSize = maxExecutionGraphShaderPayloadSize;
            this.maxExecutionGraphShaderPayloadCount = maxExecutionGraphShaderPayloadCount;
            this.executionGraphDispatchAddressAlignment = executionGraphDispatchAddressAlignment;
        }
    }
    /// <summary><b>[requires: VK_AMDX_shader_enqueue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderEnqueueFeaturesAMDX.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderEnqueueFeaturesAMDX
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderEnqueueFeaturesAmdx;
        public void* pNext;
        public int shaderEnqueue;
        public VkPhysicalDeviceShaderEnqueueFeaturesAMDX() { }
        public VkPhysicalDeviceShaderEnqueueFeaturesAMDX(VkStructureType sType, void* pNext, int shaderEnqueue)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderEnqueue = shaderEnqueue;
        }
    }
    /// <summary><b>[requires: VK_AMDX_shader_enqueue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExecutionGraphPipelineCreateInfoAMDX.html" /></remarks>
    public unsafe struct VkExecutionGraphPipelineCreateInfoAMDX
    {
        public VkStructureType sType = VkStructureType.StructureTypeExecutionGraphPipelineCreateInfoAmdx;
        public void* pNext;
        public VkPipelineCreateFlagBits flags;
        public uint stageCount;
        public VkPipelineShaderStageCreateInfo* pStages;
        public VkPipelineLibraryCreateInfoKHR* pLibraryInfo;
        public VkPipelineLayout layout;
        public VkPipeline basePipelineHandle;
        public int basePipelineIndex;
        public VkExecutionGraphPipelineCreateInfoAMDX() { }
        public VkExecutionGraphPipelineCreateInfoAMDX(VkStructureType sType, void* pNext, VkPipelineCreateFlagBits flags, uint stageCount, VkPipelineShaderStageCreateInfo* pStages, VkPipelineLibraryCreateInfoKHR* pLibraryInfo, VkPipelineLayout layout, VkPipeline basePipelineHandle, int basePipelineIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.flags = flags;
            this.stageCount = stageCount;
            this.pStages = pStages;
            this.pLibraryInfo = pLibraryInfo;
            this.layout = layout;
            this.basePipelineHandle = basePipelineHandle;
            this.basePipelineIndex = basePipelineIndex;
        }
    }
    /// <summary><b>[requires: VK_AMDX_shader_enqueue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPipelineShaderStageNodeCreateInfoAMDX.html" /></remarks>
    public unsafe struct VkPipelineShaderStageNodeCreateInfoAMDX
    {
        public VkStructureType sType = VkStructureType.StructureTypePipelineShaderStageNodeCreateInfoAmdx;
        public void* pNext;
        public byte* pName;
        public uint index;
        public VkPipelineShaderStageNodeCreateInfoAMDX() { }
        public VkPipelineShaderStageNodeCreateInfoAMDX(VkStructureType sType, void* pNext, byte* pName, uint index)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pName = pName;
            this.index = index;
        }
    }
    /// <summary><b>[requires: VK_AMDX_shader_enqueue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkExecutionGraphPipelineScratchSizeAMDX.html" /></remarks>
    public unsafe struct VkExecutionGraphPipelineScratchSizeAMDX
    {
        public VkStructureType sType = VkStructureType.StructureTypeExecutionGraphPipelineScratchSizeAmdx;
        public void* pNext;
        public ulong size;
        public VkExecutionGraphPipelineScratchSizeAMDX() { }
        public VkExecutionGraphPipelineScratchSizeAMDX(VkStructureType sType, void* pNext, ulong size)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.size = size;
        }
    }
    /// <summary><b>[requires: VK_AMDX_shader_enqueue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDispatchGraphInfoAMDX.html" /></remarks>
    public unsafe struct VkDispatchGraphInfoAMDX
    {
        public uint nodeIndex;
        public uint payloadCount;
        public VkDeviceOrHostAddressConstAMDX payloads;
        public ulong payloadStride;
        public VkDispatchGraphInfoAMDX() { }
        public VkDispatchGraphInfoAMDX(uint nodeIndex, uint payloadCount, VkDeviceOrHostAddressConstAMDX payloads, ulong payloadStride)
        {
            this.nodeIndex = nodeIndex;
            this.payloadCount = payloadCount;
            this.payloads = payloads;
            this.payloadStride = payloadStride;
        }
    }
    /// <summary><b>[requires: VK_AMDX_shader_enqueue]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDispatchGraphCountInfoAMDX.html" /></remarks>
    public unsafe struct VkDispatchGraphCountInfoAMDX
    {
        public uint count;
        public VkDeviceOrHostAddressConstAMDX infos;
        public ulong stride;
        public VkDispatchGraphCountInfoAMDX() { }
        public VkDispatchGraphCountInfoAMDX(uint count, VkDeviceOrHostAddressConstAMDX infos, ulong stride)
        {
            this.count = count;
            this.infos = infos;
            this.stride = stride;
        }
    }
    /// <summary><b>[requires: VK_AMD_anti_lag]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAntiLagFeaturesAMD.html" /></remarks>
    public unsafe struct VkPhysicalDeviceAntiLagFeaturesAMD
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceAntiLagFeaturesAmd;
        public void* pNext;
        public int antiLag;
        public VkPhysicalDeviceAntiLagFeaturesAMD() { }
        public VkPhysicalDeviceAntiLagFeaturesAMD(VkStructureType sType, void* pNext, int antiLag)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.antiLag = antiLag;
        }
    }
    /// <summary><b>[requires: VK_AMD_anti_lag]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAntiLagDataAMD.html" /></remarks>
    public unsafe struct VkAntiLagDataAMD
    {
        public VkStructureType sType = VkStructureType.StructureTypeAntiLagDataAmd;
        public void* pNext;
        public VkAntiLagModeAMD mode;
        public uint maxFPS;
        public VkAntiLagPresentationInfoAMD* pPresentationInfo;
        public VkAntiLagDataAMD() { }
        public VkAntiLagDataAMD(VkStructureType sType, void* pNext, VkAntiLagModeAMD mode, uint maxFPS, VkAntiLagPresentationInfoAMD* pPresentationInfo)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.mode = mode;
            this.maxFPS = maxFPS;
            this.pPresentationInfo = pPresentationInfo;
        }
    }
    /// <summary><b>[requires: VK_AMD_anti_lag]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAntiLagPresentationInfoAMD.html" /></remarks>
    public unsafe struct VkAntiLagPresentationInfoAMD
    {
        public VkStructureType sType = VkStructureType.StructureTypeAntiLagPresentationInfoAmd;
        public void* pNext;
        public VkAntiLagStageAMD stage;
        public ulong frameIndex;
        public VkAntiLagPresentationInfoAMD() { }
        public VkAntiLagPresentationInfoAMD(VkStructureType sType, void* pNext, VkAntiLagStageAMD stage, ulong frameIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stage = stage;
            this.frameIndex = frameIndex;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance6]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindMemoryStatusKHR.html" /></remarks>
    public unsafe struct VkBindMemoryStatusKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeBindMemoryStatusKhr;
        public void* pNext;
        public VkResult* pResult;
        public VkBindMemoryStatusKHR() { }
        public VkBindMemoryStatusKHR(VkStructureType sType, void* pNext, VkResult* pResult)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pResult = pResult;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance6]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindDescriptorSetsInfoKHR.html" /></remarks>
    public unsafe struct VkBindDescriptorSetsInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeBindDescriptorSetsInfoKhr;
        public void* pNext;
        public VkShaderStageFlagBits stageFlags;
        public VkPipelineLayout layout;
        public uint firstSet;
        public uint descriptorSetCount;
        public VkDescriptorSet* pDescriptorSets;
        public uint dynamicOffsetCount;
        public uint* pDynamicOffsets;
        public VkBindDescriptorSetsInfoKHR() { }
        public VkBindDescriptorSetsInfoKHR(VkStructureType sType, void* pNext, VkShaderStageFlagBits stageFlags, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet* pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stageFlags = stageFlags;
            this.layout = layout;
            this.firstSet = firstSet;
            this.descriptorSetCount = descriptorSetCount;
            this.pDescriptorSets = pDescriptorSets;
            this.dynamicOffsetCount = dynamicOffsetCount;
            this.pDynamicOffsets = pDynamicOffsets;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance6]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPushConstantsInfoKHR.html" /></remarks>
    public unsafe struct VkPushConstantsInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePushConstantsInfoKhr;
        public void* pNext;
        public VkPipelineLayout layout;
        public VkShaderStageFlagBits stageFlags;
        public uint offset;
        public uint size;
        public void* pValues;
        public VkPushConstantsInfoKHR() { }
        public VkPushConstantsInfoKHR(VkStructureType sType, void* pNext, VkPipelineLayout layout, VkShaderStageFlagBits stageFlags, uint offset, uint size, void* pValues)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.layout = layout;
            this.stageFlags = stageFlags;
            this.offset = offset;
            this.size = size;
            this.pValues = pValues;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance6]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPushDescriptorSetInfoKHR.html" /></remarks>
    public unsafe struct VkPushDescriptorSetInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePushDescriptorSetInfoKhr;
        public void* pNext;
        public VkShaderStageFlagBits stageFlags;
        public VkPipelineLayout layout;
        public uint set;
        public uint descriptorWriteCount;
        public VkWriteDescriptorSet* pDescriptorWrites;
        public VkPushDescriptorSetInfoKHR() { }
        public VkPushDescriptorSetInfoKHR(VkStructureType sType, void* pNext, VkShaderStageFlagBits stageFlags, VkPipelineLayout layout, uint set, uint descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stageFlags = stageFlags;
            this.layout = layout;
            this.set = set;
            this.descriptorWriteCount = descriptorWriteCount;
            this.pDescriptorWrites = pDescriptorWrites;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance6]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPushDescriptorSetWithTemplateInfoKHR.html" /></remarks>
    public unsafe struct VkPushDescriptorSetWithTemplateInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePushDescriptorSetWithTemplateInfoKhr;
        public void* pNext;
        public VkDescriptorUpdateTemplate descriptorUpdateTemplate;
        public VkPipelineLayout layout;
        public uint set;
        public void* pData;
        public VkPushDescriptorSetWithTemplateInfoKHR() { }
        public VkPushDescriptorSetWithTemplateInfoKHR(VkStructureType sType, void* pNext, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint set, void* pData)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.descriptorUpdateTemplate = descriptorUpdateTemplate;
            this.layout = layout;
            this.set = set;
            this.pData = pData;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance6]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSetDescriptorBufferOffsetsInfoEXT.html" /></remarks>
    public unsafe struct VkSetDescriptorBufferOffsetsInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeSetDescriptorBufferOffsetsInfoExt;
        public void* pNext;
        public VkShaderStageFlagBits stageFlags;
        public VkPipelineLayout layout;
        public uint firstSet;
        public uint setCount;
        public uint* pBufferIndices;
        public ulong* pOffsets;
        public VkSetDescriptorBufferOffsetsInfoEXT() { }
        public VkSetDescriptorBufferOffsetsInfoEXT(VkStructureType sType, void* pNext, VkShaderStageFlagBits stageFlags, VkPipelineLayout layout, uint firstSet, uint setCount, uint* pBufferIndices, ulong* pOffsets)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stageFlags = stageFlags;
            this.layout = layout;
            this.firstSet = firstSet;
            this.setCount = setCount;
            this.pBufferIndices = pBufferIndices;
            this.pOffsets = pOffsets;
        }
    }
    /// <summary><b>[requires: VK_KHR_maintenance6]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBindDescriptorBufferEmbeddedSamplersInfoEXT.html" /></remarks>
    public unsafe struct VkBindDescriptorBufferEmbeddedSamplersInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeBindDescriptorBufferEmbeddedSamplersInfoExt;
        public void* pNext;
        public VkShaderStageFlagBits stageFlags;
        public VkPipelineLayout layout;
        public uint set;
        public VkBindDescriptorBufferEmbeddedSamplersInfoEXT() { }
        public VkBindDescriptorBufferEmbeddedSamplersInfoEXT(VkStructureType sType, void* pNext, VkShaderStageFlagBits stageFlags, VkPipelineLayout layout, uint set)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stageFlags = stageFlags;
            this.layout = layout;
            this.set = set;
        }
    }
    /// <summary><b>[requires: VK_QCOM_filter_cubic_clamp]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCubicClampFeaturesQCOM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCubicClampFeaturesQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCubicClampFeaturesQcom;
        public void* pNext;
        public int cubicRangeClamp;
        public VkPhysicalDeviceCubicClampFeaturesQCOM() { }
        public VkPhysicalDeviceCubicClampFeaturesQCOM(VkStructureType sType, void* pNext, int cubicRangeClamp)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.cubicRangeClamp = cubicRangeClamp;
        }
    }
    /// <summary><b>[requires: VK_QCOM_ycbcr_degamma]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceYcbcrDegammaFeaturesQCOM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceYcbcrDegammaFeaturesQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceYcbcrDegammaFeaturesQcom;
        public void* pNext;
        public int ycbcrDegamma;
        public VkPhysicalDeviceYcbcrDegammaFeaturesQCOM() { }
        public VkPhysicalDeviceYcbcrDegammaFeaturesQCOM(VkStructureType sType, void* pNext, int ycbcrDegamma)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.ycbcrDegamma = ycbcrDegamma;
        }
    }
    /// <summary><b>[requires: VK_QCOM_ycbcr_degamma]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM.html" /></remarks>
    public unsafe struct VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypeSamplerYcbcrConversionYcbcrDegammaCreateInfoQcom;
        public void* pNext;
        public int enableYDegamma;
        public int enableCbCrDegamma;
        public VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM() { }
        public VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM(VkStructureType sType, void* pNext, int enableYDegamma, int enableCbCrDegamma)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.enableYDegamma = enableYDegamma;
            this.enableCbCrDegamma = enableCbCrDegamma;
        }
    }
    /// <summary><b>[requires: VK_QCOM_filter_cubic_weights]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCubicWeightsFeaturesQCOM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCubicWeightsFeaturesQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCubicWeightsFeaturesQcom;
        public void* pNext;
        public int selectableCubicWeights;
        public VkPhysicalDeviceCubicWeightsFeaturesQCOM() { }
        public VkPhysicalDeviceCubicWeightsFeaturesQCOM(VkStructureType sType, void* pNext, int selectableCubicWeights)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.selectableCubicWeights = selectableCubicWeights;
        }
    }
    /// <summary><b>[requires: VK_QCOM_filter_cubic_weights]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerCubicWeightsCreateInfoQCOM.html" /></remarks>
    public unsafe struct VkSamplerCubicWeightsCreateInfoQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypeSamplerCubicWeightsCreateInfoQcom;
        public void* pNext;
        public VkCubicFilterWeightsQCOM cubicWeights;
        public VkSamplerCubicWeightsCreateInfoQCOM() { }
        public VkSamplerCubicWeightsCreateInfoQCOM(VkStructureType sType, void* pNext, VkCubicFilterWeightsQCOM cubicWeights)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.cubicWeights = cubicWeights;
        }
    }
    /// <summary><b>[requires: VK_QCOM_filter_cubic_weights]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkBlitImageCubicWeightsInfoQCOM.html" /></remarks>
    public unsafe struct VkBlitImageCubicWeightsInfoQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypeBlitImageCubicWeightsInfoQcom;
        public void* pNext;
        public VkCubicFilterWeightsQCOM cubicWeights;
        public VkBlitImageCubicWeightsInfoQCOM() { }
        public VkBlitImageCubicWeightsInfoQCOM(VkStructureType sType, void* pNext, VkCubicFilterWeightsQCOM cubicWeights)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.cubicWeights = cubicWeights;
        }
    }
    /// <summary><b>[requires: VK_QCOM_image_processing2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageProcessing2FeaturesQCOM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageProcessing2FeaturesQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImageProcessing2FeaturesQcom;
        public void* pNext;
        public int textureBlockMatch2;
        public VkPhysicalDeviceImageProcessing2FeaturesQCOM() { }
        public VkPhysicalDeviceImageProcessing2FeaturesQCOM(VkStructureType sType, void* pNext, int textureBlockMatch2)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.textureBlockMatch2 = textureBlockMatch2;
        }
    }
    /// <summary><b>[requires: VK_QCOM_image_processing2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageProcessing2PropertiesQCOM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageProcessing2PropertiesQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImageProcessing2PropertiesQcom;
        public void* pNext;
        public VkExtent2D maxBlockMatchWindow;
        public VkPhysicalDeviceImageProcessing2PropertiesQCOM() { }
        public VkPhysicalDeviceImageProcessing2PropertiesQCOM(VkStructureType sType, void* pNext, VkExtent2D maxBlockMatchWindow)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maxBlockMatchWindow = maxBlockMatchWindow;
        }
    }
    /// <summary><b>[requires: VK_QCOM_image_processing2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSamplerBlockMatchWindowCreateInfoQCOM.html" /></remarks>
    public unsafe struct VkSamplerBlockMatchWindowCreateInfoQCOM
    {
        public VkStructureType sType = VkStructureType.StructureTypeSamplerBlockMatchWindowCreateInfoQcom;
        public void* pNext;
        public VkExtent2D windowExtent;
        public VkBlockMatchWindowCompareModeQCOM windowCompareMode;
        public VkSamplerBlockMatchWindowCreateInfoQCOM() { }
        public VkSamplerBlockMatchWindowCreateInfoQCOM(VkStructureType sType, void* pNext, VkExtent2D windowExtent, VkBlockMatchWindowCompareModeQCOM windowCompareMode)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.windowExtent = windowExtent;
            this.windowCompareMode = windowCompareMode;
        }
    }
    /// <summary><b>[requires: VK_NV_descriptor_pool_overallocation]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDescriptorPoolOverallocationFeaturesNv;
        public void* pNext;
        public int descriptorPoolOverallocation;
        public VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV() { }
        public VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV(VkStructureType sType, void* pNext, int descriptorPoolOverallocation)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.descriptorPoolOverallocation = descriptorPoolOverallocation;
        }
    }
    /// <summary><b>[requires: VK_MSFT_layered_driver]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLayeredDriverPropertiesMSFT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceLayeredDriverPropertiesMSFT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceLayeredDriverPropertiesMsft;
        public void* pNext;
        public VkLayeredDriverUnderlyingApiMSFT underlyingAPI;
        public VkPhysicalDeviceLayeredDriverPropertiesMSFT() { }
        public VkPhysicalDeviceLayeredDriverPropertiesMSFT(VkStructureType sType, void* pNext, VkLayeredDriverUnderlyingApiMSFT underlyingAPI)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.underlyingAPI = underlyingAPI;
        }
    }
    /// <summary><b>[requires: VK_NV_per_stage_descriptor_set]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePerStageDescriptorSetFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDevicePerStageDescriptorSetFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDevicePerStageDescriptorSetFeaturesNv;
        public void* pNext;
        public int perStageDescriptorSet;
        public int dynamicPipelineLayout;
        public VkPhysicalDevicePerStageDescriptorSetFeaturesNV() { }
        public VkPhysicalDevicePerStageDescriptorSetFeaturesNV(VkStructureType sType, void* pNext, int perStageDescriptorSet, int dynamicPipelineLayout)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.perStageDescriptorSet = perStageDescriptorSet;
            this.dynamicPipelineLayout = dynamicPipelineLayout;
        }
    }
    /// <summary><b>[requires: VK_ANDROID_external_format_resolve]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalFormatResolveFeaturesANDROID.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalFormatResolveFeaturesANDROID
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExternalFormatResolveFeaturesAndroid;
        public void* pNext;
        public int externalFormatResolve;
        public VkPhysicalDeviceExternalFormatResolveFeaturesANDROID() { }
        public VkPhysicalDeviceExternalFormatResolveFeaturesANDROID(VkStructureType sType, void* pNext, int externalFormatResolve)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.externalFormatResolve = externalFormatResolve;
        }
    }
    /// <summary><b>[requires: VK_ANDROID_external_format_resolve]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalFormatResolvePropertiesANDROID.html" /></remarks>
    public unsafe struct VkPhysicalDeviceExternalFormatResolvePropertiesANDROID
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceExternalFormatResolvePropertiesAndroid;
        public void* pNext;
        public int nullColorAttachmentWithExternalFormatResolve;
        public VkChromaLocation externalFormatResolveChromaOffsetX;
        public VkChromaLocation externalFormatResolveChromaOffsetY;
        public VkPhysicalDeviceExternalFormatResolvePropertiesANDROID() { }
        public VkPhysicalDeviceExternalFormatResolvePropertiesANDROID(VkStructureType sType, void* pNext, int nullColorAttachmentWithExternalFormatResolve, VkChromaLocation externalFormatResolveChromaOffsetX, VkChromaLocation externalFormatResolveChromaOffsetY)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.nullColorAttachmentWithExternalFormatResolve = nullColorAttachmentWithExternalFormatResolve;
            this.externalFormatResolveChromaOffsetX = externalFormatResolveChromaOffsetX;
            this.externalFormatResolveChromaOffsetY = externalFormatResolveChromaOffsetY;
        }
    }
    /// <summary><b>[requires: VK_ANDROID_external_format_resolve]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAndroidHardwareBufferFormatResolvePropertiesANDROID.html" /></remarks>
    public unsafe struct VkAndroidHardwareBufferFormatResolvePropertiesANDROID
    {
        public VkStructureType sType = VkStructureType.StructureTypeAndroidHardwareBufferFormatResolvePropertiesAndroid;
        public void* pNext;
        public VkFormat colorAttachmentFormat;
        public VkAndroidHardwareBufferFormatResolvePropertiesANDROID() { }
        public VkAndroidHardwareBufferFormatResolvePropertiesANDROID(VkStructureType sType, void* pNext, VkFormat colorAttachmentFormat)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.colorAttachmentFormat = colorAttachmentFormat;
        }
    }
    /// <summary><b>[requires: VK_NV_low_latency2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkLatencySleepModeInfoNV.html" /></remarks>
    public unsafe struct VkLatencySleepModeInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeLatencySleepModeInfoNv;
        public void* pNext;
        public int lowLatencyMode;
        public int lowLatencyBoost;
        public uint minimumIntervalUs;
        public VkLatencySleepModeInfoNV() { }
        public VkLatencySleepModeInfoNV(VkStructureType sType, void* pNext, int lowLatencyMode, int lowLatencyBoost, uint minimumIntervalUs)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.lowLatencyMode = lowLatencyMode;
            this.lowLatencyBoost = lowLatencyBoost;
            this.minimumIntervalUs = minimumIntervalUs;
        }
    }
    /// <summary><b>[requires: VK_NV_low_latency2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkLatencySleepInfoNV.html" /></remarks>
    public unsafe struct VkLatencySleepInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeLatencySleepInfoNv;
        public void* pNext;
        public VkSemaphore signalSemaphore;
        public ulong value;
        public VkLatencySleepInfoNV() { }
        public VkLatencySleepInfoNV(VkStructureType sType, void* pNext, VkSemaphore signalSemaphore, ulong value)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.signalSemaphore = signalSemaphore;
            this.value = value;
        }
    }
    /// <summary><b>[requires: VK_NV_low_latency2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSetLatencyMarkerInfoNV.html" /></remarks>
    public unsafe struct VkSetLatencyMarkerInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeSetLatencyMarkerInfoNv;
        public void* pNext;
        public ulong presentID;
        public VkLatencyMarkerNV marker;
        public VkSetLatencyMarkerInfoNV() { }
        public VkSetLatencyMarkerInfoNV(VkStructureType sType, void* pNext, ulong presentID, VkLatencyMarkerNV marker)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.presentID = presentID;
            this.marker = marker;
        }
    }
    /// <summary><b>[requires: VK_NV_low_latency2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkGetLatencyMarkerInfoNV.html" /></remarks>
    public unsafe struct VkGetLatencyMarkerInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeGetLatencyMarkerInfoNv;
        public void* pNext;
        public uint timingCount;
        public VkLatencyTimingsFrameReportNV* pTimings;
        public VkGetLatencyMarkerInfoNV() { }
        public VkGetLatencyMarkerInfoNV(VkStructureType sType, void* pNext, uint timingCount, VkLatencyTimingsFrameReportNV* pTimings)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.timingCount = timingCount;
            this.pTimings = pTimings;
        }
    }
    /// <summary><b>[requires: VK_NV_low_latency2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkLatencyTimingsFrameReportNV.html" /></remarks>
    public unsafe struct VkLatencyTimingsFrameReportNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeLatencyTimingsFrameReportNv;
        public void* pNext;
        public ulong presentID;
        public ulong inputSampleTimeUs;
        public ulong simStartTimeUs;
        public ulong simEndTimeUs;
        public ulong renderSubmitStartTimeUs;
        public ulong renderSubmitEndTimeUs;
        public ulong presentStartTimeUs;
        public ulong presentEndTimeUs;
        public ulong driverStartTimeUs;
        public ulong driverEndTimeUs;
        public ulong osRenderQueueStartTimeUs;
        public ulong osRenderQueueEndTimeUs;
        public ulong gpuRenderStartTimeUs;
        public ulong gpuRenderEndTimeUs;
        public VkLatencyTimingsFrameReportNV() { }
        public VkLatencyTimingsFrameReportNV(VkStructureType sType, void* pNext, ulong presentID, ulong inputSampleTimeUs, ulong simStartTimeUs, ulong simEndTimeUs, ulong renderSubmitStartTimeUs, ulong renderSubmitEndTimeUs, ulong presentStartTimeUs, ulong presentEndTimeUs, ulong driverStartTimeUs, ulong driverEndTimeUs, ulong osRenderQueueStartTimeUs, ulong osRenderQueueEndTimeUs, ulong gpuRenderStartTimeUs, ulong gpuRenderEndTimeUs)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.presentID = presentID;
            this.inputSampleTimeUs = inputSampleTimeUs;
            this.simStartTimeUs = simStartTimeUs;
            this.simEndTimeUs = simEndTimeUs;
            this.renderSubmitStartTimeUs = renderSubmitStartTimeUs;
            this.renderSubmitEndTimeUs = renderSubmitEndTimeUs;
            this.presentStartTimeUs = presentStartTimeUs;
            this.presentEndTimeUs = presentEndTimeUs;
            this.driverStartTimeUs = driverStartTimeUs;
            this.driverEndTimeUs = driverEndTimeUs;
            this.osRenderQueueStartTimeUs = osRenderQueueStartTimeUs;
            this.osRenderQueueEndTimeUs = osRenderQueueEndTimeUs;
            this.gpuRenderStartTimeUs = gpuRenderStartTimeUs;
            this.gpuRenderEndTimeUs = gpuRenderEndTimeUs;
        }
    }
    /// <summary><b>[requires: VK_NV_low_latency2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkOutOfBandQueueTypeInfoNV.html" /></remarks>
    public unsafe struct VkOutOfBandQueueTypeInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeOutOfBandQueueTypeInfoNv;
        public void* pNext;
        public VkOutOfBandQueueTypeNV queueType;
        public VkOutOfBandQueueTypeInfoNV() { }
        public VkOutOfBandQueueTypeInfoNV(VkStructureType sType, void* pNext, VkOutOfBandQueueTypeNV queueType)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.queueType = queueType;
        }
    }
    /// <summary><b>[requires: VK_NV_low_latency2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkLatencySubmissionPresentIdNV.html" /></remarks>
    public unsafe struct VkLatencySubmissionPresentIdNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeLatencySubmissionPresentIdNv;
        public void* pNext;
        public ulong presentID;
        public VkLatencySubmissionPresentIdNV() { }
        public VkLatencySubmissionPresentIdNV(VkStructureType sType, void* pNext, ulong presentID)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.presentID = presentID;
        }
    }
    /// <summary><b>[requires: VK_NV_low_latency2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSwapchainLatencyCreateInfoNV.html" /></remarks>
    public unsafe struct VkSwapchainLatencyCreateInfoNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeSwapchainLatencyCreateInfoNv;
        public void* pNext;
        public int latencyModeEnable;
        public VkSwapchainLatencyCreateInfoNV() { }
        public VkSwapchainLatencyCreateInfoNV(VkStructureType sType, void* pNext, int latencyModeEnable)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.latencyModeEnable = latencyModeEnable;
        }
    }
    /// <summary><b>[requires: VK_NV_low_latency2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkLatencySurfaceCapabilitiesNV.html" /></remarks>
    public unsafe struct VkLatencySurfaceCapabilitiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypeLatencySurfaceCapabilitiesNv;
        public void* pNext;
        public uint presentModeCount;
        public VkPresentModeKHR* pPresentModes;
        public VkLatencySurfaceCapabilitiesNV() { }
        public VkLatencySurfaceCapabilitiesNV(VkStructureType sType, void* pNext, uint presentModeCount, VkPresentModeKHR* pPresentModes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.presentModeCount = presentModeCount;
            this.pPresentModes = pPresentModes;
        }
    }
    /// <summary><b>[requires: VK_NV_cuda_kernel_launch]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCudaKernelLaunchFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCudaKernelLaunchFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCudaKernelLaunchFeaturesNv;
        public void* pNext;
        public int cudaKernelLaunchFeatures;
        public VkPhysicalDeviceCudaKernelLaunchFeaturesNV() { }
        public VkPhysicalDeviceCudaKernelLaunchFeaturesNV(VkStructureType sType, void* pNext, int cudaKernelLaunchFeatures)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.cudaKernelLaunchFeatures = cudaKernelLaunchFeatures;
        }
    }
    /// <summary><b>[requires: VK_NV_cuda_kernel_launch]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCudaKernelLaunchPropertiesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCudaKernelLaunchPropertiesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCudaKernelLaunchPropertiesNv;
        public void* pNext;
        public uint computeCapabilityMinor;
        public uint computeCapabilityMajor;
        public VkPhysicalDeviceCudaKernelLaunchPropertiesNV() { }
        public VkPhysicalDeviceCudaKernelLaunchPropertiesNV(VkStructureType sType, void* pNext, uint computeCapabilityMinor, uint computeCapabilityMajor)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.computeCapabilityMinor = computeCapabilityMinor;
            this.computeCapabilityMajor = computeCapabilityMajor;
        }
    }
    /// <summary><b>[requires: VK_ARM_scheduling_controls]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkDeviceQueueShaderCoreControlCreateInfoARM.html" /></remarks>
    public unsafe struct VkDeviceQueueShaderCoreControlCreateInfoARM
    {
        public VkStructureType sType = VkStructureType.StructureTypeDeviceQueueShaderCoreControlCreateInfoArm;
        public void* pNext;
        public uint shaderCoreCount;
        public VkDeviceQueueShaderCoreControlCreateInfoARM() { }
        public VkDeviceQueueShaderCoreControlCreateInfoARM(VkStructureType sType, void* pNext, uint shaderCoreCount)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderCoreCount = shaderCoreCount;
        }
    }
    /// <summary><b>[requires: VK_ARM_scheduling_controls]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSchedulingControlsFeaturesARM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSchedulingControlsFeaturesARM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSchedulingControlsFeaturesArm;
        public void* pNext;
        public int schedulingControls;
        public VkPhysicalDeviceSchedulingControlsFeaturesARM() { }
        public VkPhysicalDeviceSchedulingControlsFeaturesARM(VkStructureType sType, void* pNext, int schedulingControls)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.schedulingControls = schedulingControls;
        }
    }
    /// <summary><b>[requires: VK_ARM_scheduling_controls]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSchedulingControlsPropertiesARM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceSchedulingControlsPropertiesARM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceSchedulingControlsPropertiesArm;
        public void* pNext;
        public VkPhysicalDeviceSchedulingControlsFlagBitsARM schedulingControlsFlags;
        public VkPhysicalDeviceSchedulingControlsPropertiesARM() { }
        public VkPhysicalDeviceSchedulingControlsPropertiesARM(VkStructureType sType, void* pNext, VkPhysicalDeviceSchedulingControlsFlagBitsARM schedulingControlsFlags)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.schedulingControlsFlags = schedulingControlsFlags;
        }
    }
    /// <summary><b>[requires: VK_IMG_relaxed_line_rasterization]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRelaxedLineRasterizationFeaturesImg;
        public void* pNext;
        public int relaxedLineRasterization;
        public VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG() { }
        public VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG(VkStructureType sType, void* pNext, int relaxedLineRasterization)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.relaxedLineRasterization = relaxedLineRasterization;
        }
    }
    /// <summary><b>[requires: VK_ARM_render_pass_striped]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRenderPassStripedFeaturesARM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRenderPassStripedFeaturesARM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRenderPassStripedFeaturesArm;
        public void* pNext;
        public int renderPassStriped;
        public VkPhysicalDeviceRenderPassStripedFeaturesARM() { }
        public VkPhysicalDeviceRenderPassStripedFeaturesARM(VkStructureType sType, void* pNext, int renderPassStriped)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.renderPassStriped = renderPassStriped;
        }
    }
    /// <summary><b>[requires: VK_ARM_render_pass_striped]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRenderPassStripedPropertiesARM.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRenderPassStripedPropertiesARM
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRenderPassStripedPropertiesArm;
        public void* pNext;
        public VkExtent2D renderPassStripeGranularity;
        public uint maxRenderPassStripes;
        public VkPhysicalDeviceRenderPassStripedPropertiesARM() { }
        public VkPhysicalDeviceRenderPassStripedPropertiesARM(VkStructureType sType, void* pNext, VkExtent2D renderPassStripeGranularity, uint maxRenderPassStripes)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.renderPassStripeGranularity = renderPassStripeGranularity;
            this.maxRenderPassStripes = maxRenderPassStripes;
        }
    }
    /// <summary><b>[requires: VK_ARM_render_pass_striped]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassStripeInfoARM.html" /></remarks>
    public unsafe struct VkRenderPassStripeInfoARM
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderPassStripeInfoArm;
        public void* pNext;
        public VkRect2D stripeArea;
        public VkRenderPassStripeInfoARM() { }
        public VkRenderPassStripeInfoARM(VkStructureType sType, void* pNext, VkRect2D stripeArea)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stripeArea = stripeArea;
        }
    }
    /// <summary><b>[requires: VK_ARM_render_pass_striped]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassStripeBeginInfoARM.html" /></remarks>
    public unsafe struct VkRenderPassStripeBeginInfoARM
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderPassStripeBeginInfoArm;
        public void* pNext;
        public uint stripeInfoCount;
        public VkRenderPassStripeInfoARM* pStripeInfos;
        public VkRenderPassStripeBeginInfoARM() { }
        public VkRenderPassStripeBeginInfoARM(VkStructureType sType, void* pNext, uint stripeInfoCount, VkRenderPassStripeInfoARM* pStripeInfos)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stripeInfoCount = stripeInfoCount;
            this.pStripeInfos = pStripeInfos;
        }
    }
    /// <summary><b>[requires: VK_ARM_render_pass_striped]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderPassStripeSubmitInfoARM.html" /></remarks>
    public unsafe struct VkRenderPassStripeSubmitInfoARM
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderPassStripeSubmitInfoArm;
        public void* pNext;
        public uint stripeSemaphoreInfoCount;
        public VkSemaphoreSubmitInfo* pStripeSemaphoreInfos;
        public VkRenderPassStripeSubmitInfoARM() { }
        public VkRenderPassStripeSubmitInfoARM(VkStructureType sType, void* pNext, uint stripeSemaphoreInfoCount, VkSemaphoreSubmitInfo* pStripeSemaphoreInfos)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.stripeSemaphoreInfoCount = stripeSemaphoreInfoCount;
            this.pStripeSemaphoreInfos = pStripeSemaphoreInfos;
        }
    }
    /// <summary><b>[requires: VK_KHR_shader_maximal_reconvergence]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderMaximalReconvergenceFeaturesKhr;
        public void* pNext;
        public int shaderMaximalReconvergence;
        public VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR() { }
        public VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR(VkStructureType sType, void* pNext, int shaderMaximalReconvergence)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderMaximalReconvergence = shaderMaximalReconvergence;
        }
    }
    /// <summary><b>[requires: VK_KHR_shader_subgroup_rotate]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderSubgroupRotateFeaturesKhr;
        public void* pNext;
        public int shaderSubgroupRotate;
        public int shaderSubgroupRotateClustered;
        public VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR() { }
        public VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR(VkStructureType sType, void* pNext, int shaderSubgroupRotate, int shaderSubgroupRotateClustered)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderSubgroupRotate = shaderSubgroupRotate;
            this.shaderSubgroupRotateClustered = shaderSubgroupRotateClustered;
        }
    }
    /// <summary><b>[requires: VK_KHR_shader_expect_assume]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderExpectAssumeFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderExpectAssumeFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderExpectAssumeFeaturesKhr;
        public void* pNext;
        public int shaderExpectAssume;
        public VkPhysicalDeviceShaderExpectAssumeFeaturesKHR() { }
        public VkPhysicalDeviceShaderExpectAssumeFeaturesKHR(VkStructureType sType, void* pNext, int shaderExpectAssume)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderExpectAssume = shaderExpectAssume;
        }
    }
    /// <summary><b>[requires: VK_KHR_shader_float_controls2]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderFloatControls2FeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderFloatControls2FeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderFloatControls2FeaturesKhr;
        public void* pNext;
        public int shaderFloatControls2;
        public VkPhysicalDeviceShaderFloatControls2FeaturesKHR() { }
        public VkPhysicalDeviceShaderFloatControls2FeaturesKHR(VkStructureType sType, void* pNext, int shaderFloatControls2)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderFloatControls2 = shaderFloatControls2;
        }
    }
    /// <summary><b>[requires: VK_KHR_dynamic_rendering_local_read]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceDynamicRenderingLocalReadFeaturesKhr;
        public void* pNext;
        public int dynamicRenderingLocalRead;
        public VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR() { }
        public VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR(VkStructureType sType, void* pNext, int dynamicRenderingLocalRead)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.dynamicRenderingLocalRead = dynamicRenderingLocalRead;
        }
    }
    /// <summary><b>[requires: VK_KHR_dynamic_rendering_local_read]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderingAttachmentLocationInfoKHR.html" /></remarks>
    public unsafe struct VkRenderingAttachmentLocationInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderingAttachmentLocationInfoKhr;
        public void* pNext;
        public uint colorAttachmentCount;
        public uint* pColorAttachmentLocations;
        public VkRenderingAttachmentLocationInfoKHR() { }
        public VkRenderingAttachmentLocationInfoKHR(VkStructureType sType, void* pNext, uint colorAttachmentCount, uint* pColorAttachmentLocations)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.colorAttachmentCount = colorAttachmentCount;
            this.pColorAttachmentLocations = pColorAttachmentLocations;
        }
    }
    /// <summary><b>[requires: VK_KHR_dynamic_rendering_local_read]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkRenderingInputAttachmentIndexInfoKHR.html" /></remarks>
    public unsafe struct VkRenderingInputAttachmentIndexInfoKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypeRenderingInputAttachmentIndexInfoKhr;
        public void* pNext;
        public uint colorAttachmentCount;
        public uint* pColorAttachmentInputIndices;
        public uint* pDepthInputAttachmentIndex;
        public uint* pStencilInputAttachmentIndex;
        public VkRenderingInputAttachmentIndexInfoKHR() { }
        public VkRenderingInputAttachmentIndexInfoKHR(VkStructureType sType, void* pNext, uint colorAttachmentCount, uint* pColorAttachmentInputIndices, uint* pDepthInputAttachmentIndex, uint* pStencilInputAttachmentIndex)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.colorAttachmentCount = colorAttachmentCount;
            this.pColorAttachmentInputIndices = pColorAttachmentInputIndices;
            this.pDepthInputAttachmentIndex = pDepthInputAttachmentIndex;
            this.pStencilInputAttachmentIndex = pStencilInputAttachmentIndex;
        }
    }
    /// <summary><b>[requires: VK_KHR_shader_quad_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderQuadControlFeaturesKHR.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderQuadControlFeaturesKHR
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderQuadControlFeaturesKhr;
        public void* pNext;
        public int shaderQuadControl;
        public VkPhysicalDeviceShaderQuadControlFeaturesKHR() { }
        public VkPhysicalDeviceShaderQuadControlFeaturesKHR(VkStructureType sType, void* pNext, int shaderQuadControl)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderQuadControl = shaderQuadControl;
        }
    }
    /// <summary><b>[requires: VK_NV_shader_atomic_float16_vector]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderAtomicFloat16VectorFeaturesNv;
        public void* pNext;
        public int shaderFloat16VectorAtomics;
        public VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV() { }
        public VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV(VkStructureType sType, void* pNext, int shaderFloat16VectorAtomics)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderFloat16VectorAtomics = shaderFloat16VectorAtomics;
        }
    }
    /// <summary><b>[requires: VK_EXT_map_memory_placed]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMapMemoryPlacedFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMapMemoryPlacedFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMapMemoryPlacedFeaturesExt;
        public void* pNext;
        public int memoryMapPlaced;
        public int memoryMapRangePlaced;
        public int memoryUnmapReserve;
        public VkPhysicalDeviceMapMemoryPlacedFeaturesEXT() { }
        public VkPhysicalDeviceMapMemoryPlacedFeaturesEXT(VkStructureType sType, void* pNext, int memoryMapPlaced, int memoryMapRangePlaced, int memoryUnmapReserve)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.memoryMapPlaced = memoryMapPlaced;
            this.memoryMapRangePlaced = memoryMapRangePlaced;
            this.memoryUnmapReserve = memoryUnmapReserve;
        }
    }
    /// <summary><b>[requires: VK_EXT_map_memory_placed]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMapMemoryPlacedPropertiesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceMapMemoryPlacedPropertiesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceMapMemoryPlacedPropertiesExt;
        public void* pNext;
        public ulong minPlacedMemoryMapAlignment;
        public VkPhysicalDeviceMapMemoryPlacedPropertiesEXT() { }
        public VkPhysicalDeviceMapMemoryPlacedPropertiesEXT(VkStructureType sType, void* pNext, ulong minPlacedMemoryMapAlignment)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.minPlacedMemoryMapAlignment = minPlacedMemoryMapAlignment;
        }
    }
    /// <summary><b>[requires: VK_EXT_map_memory_placed]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkMemoryMapPlacedInfoEXT.html" /></remarks>
    public unsafe struct VkMemoryMapPlacedInfoEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypeMemoryMapPlacedInfoExt;
        public void* pNext;
        public void* pPlacedAddress;
        public VkMemoryMapPlacedInfoEXT() { }
        public VkMemoryMapPlacedInfoEXT(VkStructureType sType, void* pNext, void* pPlacedAddress)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.pPlacedAddress = pPlacedAddress;
        }
    }
    /// <summary><b>[requires: VK_NV_raw_access_chains]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRawAccessChainsFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceRawAccessChainsFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceRawAccessChainsFeaturesNv;
        public void* pNext;
        public int shaderRawAccessChains;
        public VkPhysicalDeviceRawAccessChainsFeaturesNV() { }
        public VkPhysicalDeviceRawAccessChainsFeaturesNV(VkStructureType sType, void* pNext, int shaderRawAccessChains)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderRawAccessChains = shaderRawAccessChains;
        }
    }
    /// <summary><b>[requires: VK_NV_command_buffer_inheritance]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCommandBufferInheritanceFeaturesNV.html" /></remarks>
    public unsafe struct VkPhysicalDeviceCommandBufferInheritanceFeaturesNV
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceCommandBufferInheritanceFeaturesNv;
        public void* pNext;
        public int commandBufferInheritance;
        public VkPhysicalDeviceCommandBufferInheritanceFeaturesNV() { }
        public VkPhysicalDeviceCommandBufferInheritanceFeaturesNV(VkStructureType sType, void* pNext, int commandBufferInheritance)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.commandBufferInheritance = commandBufferInheritance;
        }
    }
    /// <summary><b>[requires: VK_MESA_image_alignment_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageAlignmentControlFeaturesMESA.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageAlignmentControlFeaturesMESA
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImageAlignmentControlFeaturesMesa;
        public void* pNext;
        public int imageAlignmentControl;
        public VkPhysicalDeviceImageAlignmentControlFeaturesMESA() { }
        public VkPhysicalDeviceImageAlignmentControlFeaturesMESA(VkStructureType sType, void* pNext, int imageAlignmentControl)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.imageAlignmentControl = imageAlignmentControl;
        }
    }
    /// <summary><b>[requires: VK_MESA_image_alignment_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageAlignmentControlPropertiesMESA.html" /></remarks>
    public unsafe struct VkPhysicalDeviceImageAlignmentControlPropertiesMESA
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceImageAlignmentControlPropertiesMesa;
        public void* pNext;
        public uint supportedImageAlignmentMask;
        public VkPhysicalDeviceImageAlignmentControlPropertiesMESA() { }
        public VkPhysicalDeviceImageAlignmentControlPropertiesMESA(VkStructureType sType, void* pNext, uint supportedImageAlignmentMask)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.supportedImageAlignmentMask = supportedImageAlignmentMask;
        }
    }
    /// <summary><b>[requires: VK_MESA_image_alignment_control]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkImageAlignmentControlCreateInfoMESA.html" /></remarks>
    public unsafe struct VkImageAlignmentControlCreateInfoMESA
    {
        public VkStructureType sType = VkStructureType.StructureTypeImageAlignmentControlCreateInfoMesa;
        public void* pNext;
        public uint maximumRequestedAlignment;
        public VkImageAlignmentControlCreateInfoMESA() { }
        public VkImageAlignmentControlCreateInfoMESA(VkStructureType sType, void* pNext, uint maximumRequestedAlignment)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.maximumRequestedAlignment = maximumRequestedAlignment;
        }
    }
    /// <summary><b>[requires: VK_EXT_shader_replicated_composites]</b> </summary>/// <remarks><see href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT.html" /></remarks>
    public unsafe struct VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT
    {
        public VkStructureType sType = VkStructureType.StructureTypePhysicalDeviceShaderReplicatedCompositesFeaturesExt;
        public void* pNext;
        public int shaderReplicatedComposites;
        public VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT() { }
        public VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT(VkStructureType sType, void* pNext, int shaderReplicatedComposites)
        {
            this.sType = sType;
            this.pNext = pNext;
            this.shaderReplicatedComposites = shaderReplicatedComposites;
        }
    }
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
}
